
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a368  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  0801a4f8  0801a4f8  0002a4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afdc  0801afdc  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801afdc  0801afdc  0002afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afe4  0801afe4  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afe4  0801afe4  0002afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afe8  0801afe8  0002afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801afec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801b2ac  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801b2ac  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ee4b  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000600d  00000000  00000000  0007f13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b58  00000000  00000000  00085148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002910  00000000  00000000  00087ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031297  00000000  00000000  0008a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af7b  00000000  00000000  000bb847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001166c0  00000000  00000000  000e67c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fce82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3c0  00000000  00000000  001fced8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a4e0 	.word	0x0801a4e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a4e0 	.word	0x0801a4e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
{
	// TODO Auto-generated constructor stub

}
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f005 f8df 	bl	8006190 <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fd2:	f001 fcb3 	bl	800293c <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fc5f 	bl	800189c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f85e 	bl	80010a0 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000fe4:	f001 f8c8 	bl	8002178 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 f980 	bl	80022ee <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f014 fb6e 	bl	80156d4 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000ff8:	7e3b      	ldrb	r3, [r7, #24]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d132      	bne.n	8001064 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001002:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800109c <_ZN14WobbleBoardApp4InitEv+0xd8>
 8001006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100a:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 800100e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 2a90 	vmov	r2, s15
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800109c <_ZN14WobbleBoardApp4InitEv+0xd8>
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 800102e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001036:	ee17 2a90 	vmov	r2, s15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800109c <_ZN14WobbleBoardApp4InitEv+0xd8>
 8001046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104a:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 800104e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001056:	ee17 2a90 	vmov	r2, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	}

	DWTInit();
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fb5b 	bl	8001720 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 800106a:	f000 fd61 	bl	8001b30 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(Enable6XMotionFusion == 1U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800107c:	2b01      	cmp	r3, #1
 800107e:	d103      	bne.n	8001088 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fbf3 	bl	800186c <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 8001086:	e002      	b.n	800108e <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fbfb 	bl	8001884 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fbb8 	bl	8001804 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	43fa0000 	.word	0x43fa0000

080010a0 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 80010a8:	f000 feec 	bl	8001e84 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 80010ac:	f000 fef2 	bl	8001e94 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 80010b0:	f000 fef8 	bl	8001ea4 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010b4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010cc <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 80010b8:	f000 ff53 	bl	8001f62 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010bc:	2004      	movs	r0, #4
 80010be:	f000 ff5f 	bl	8001f80 <BSP_SENSOR_ACC_SetFullScale>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	42c80000 	.word	0x42c80000

080010d0 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	bf0c      	ite	eq
 80010ea:	2301      	moveq	r3, #1
 80010ec:	2300      	movne	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d017      	beq.n	8001124 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800111e:	200a      	movs	r0, #10
 8001120:	f001 f8e5 	bl	80022ee <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!IsInUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <_ZN14WobbleBoardApp7ProcessEv+0x118>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <_ZN14WobbleBoardApp7ProcessEv+0x76>
 8001144:	2300      	movs	r3, #0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <_ZN14WobbleBoardApp7ProcessEv+0x84>
	{
		SensorReadRequest = 1;
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n User Calibration Mode timer counter: %d \r\n",
//			userCalbirationModeTimerCount);
//		printf("%s", DataOut);
	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(IsInUserCalibrationMode && (__HAL_TIM_GET_COUNTER(&htim15) - UserCalibrationTimerTimestamp  >= USER_CALIBRATION_TIME))
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00f      	beq.n	8001180 <_ZN14WobbleBoardApp7ProcessEv+0xb0>
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <_ZN14WobbleBoardApp7ProcessEv+0x11c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	f8b2 214c 	ldrh.w	r2, [r2, #332]	; 0x14c
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	1d3a      	adds	r2, r7, #4
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001178:	4293      	cmp	r3, r2
 800117a:	d301      	bcc.n	8001180 <_ZN14WobbleBoardApp7ProcessEv+0xb0>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <_ZN14WobbleBoardApp7ProcessEv+0xb2>
 8001180:	2300      	movs	r3, #0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <_ZN14WobbleBoardApp7ProcessEv+0xbe>
	{
		ExitUserCalibrationMode();
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f000 fc5d 	bl	8001a48 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
	}

	if (SensorReadRequest == 1U)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01b      	beq.n	80011de <_ZN14WobbleBoardApp7ProcessEv+0x10e>
	{
		SensorReadRequest = 0;
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		// Write the motion sensor data to the terminal
		AccelerometerSensorHandler();
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f000 f81c 	bl	80011f0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
		GyroSensorHandler();
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f000 f846 	bl	800124c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
		MagnetometerSensorHandler();
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	f000 f870 	bl	80012a8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f000 f924 	bl	8001418 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>

		// Add the header that contains the command
		InitStreamingHeader(&msg_dat);
 80011d0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4611      	mov	r1, r2
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f000 faf9 	bl	80017d0 <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011de:	bf00      	nop
 80011e0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200014a8 	.word	0x200014a8
 80011ec:	2000145c 	.word	0x2000145c

080011f0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3310      	adds	r3, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fe89 	bl	8001f14 <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8001208:	2b00      	cmp	r3, #0
 800120a:	d116      	bne.n	800123a <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f103 0046 	add.w	r0, r3, #70	; 0x46
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6919      	ldr	r1, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6992      	ldr	r2, [r2, #24]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	460b      	mov	r3, r1
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	f017 f82f 	bl	801828c <sniprintf>
		printf("%s", DataOut);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3346      	adds	r3, #70	; 0x46
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001236:	f016 ffbd 	bl	80181b4 <iprintf>
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0801a4f8 	.word	0x0801a4f8
 8001248:	0801a524 	.word	0x0801a524

0800124c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	331c      	adds	r3, #28
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fe68 	bl	8001f2e <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8001264:	2b00      	cmp	r3, #0
 8001266:	d116      	bne.n	8001296 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f103 0046 	add.w	r0, r3, #70	; 0x46
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69d9      	ldr	r1, [r3, #28]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6a52      	ldr	r2, [r2, #36]	; 0x24
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 800127a:	9201      	str	r2, [sp, #4]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	460b      	mov	r3, r1
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	f017 f801 	bl	801828c <sniprintf>
		printf("%s", DataOut);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3346      	adds	r3, #70	; 0x46
 800128e:	4619      	mov	r1, r3
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 8001292:	f016 ff8f 	bl	80181b4 <iprintf>
	}
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0801a528 	.word	0x0801a528
 80012a4:	0801a524 	.word	0x0801a524

080012a8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3328      	adds	r3, #40	; 0x28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe47 	bl	8001f48 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d16d      	bne.n	800139e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001408 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001408 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001408 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	f103 020a 	add.w	r2, r3, #10
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800131c:	f107 020c 	add.w	r2, r7, #12
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f000 ffd2 	bl	80022d0 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800132c:	7e3b      	ldrb	r3, [r7, #24]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d135      	bne.n	800139e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001338:	edd7 7a03 	vldr	s15, [r7, #12]
 800133c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800140c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001348:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001350:	ee17 2a90 	vmov	r2, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001358:	edd7 7a04 	vldr	s15, [r7, #16]
 800135c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800140c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001368:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	ee17 2a90 	vmov	r2, s15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001378:	edd7 7a05 	vldr	s15, [r7, #20]
 800137c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800140c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001388:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001398:	200a      	movs	r0, #10
 800139a:	f000 ffb4 	bl	8002306 <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30

	if(MotionDataVerbosityLevel == All)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f103 0046 	add.w	r0, r3, #70	; 0x46
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	460b      	mov	r3, r1
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f0:	f016 ff4c 	bl	801828c <sniprintf>
		printf("%s", DataOut);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3346      	adds	r3, #70	; 0x46
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013fc:	f016 feda 	bl	80181b4 <iprintf>
	}
}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	3b03126f 	.word	0x3b03126f
 800140c:	43fa0000 	.word	0x43fa0000
 8001410:	0801a54c 	.word	0x0801a54c
 8001414:	0801a524 	.word	0x0801a524

08001418 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

void WobbleBoardApp::MotionFXDataHandler()
{
 8001418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800141c:	b0a5      	sub	sp, #148	; 0x94
 800141e:	af06      	add	r7, sp, #24
 8001420:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time_us = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001486:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80016fc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001700 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001700 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 80014ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ee:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fe:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001700 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 8001502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001506:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWTStart();
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f922 	bl	8001754 <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8001510:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001704 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2ec>
 8001514:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001516:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001518:	f000 fe86 	bl	8002228 <MotionFX_manager_run>
	elapsed_time_us = DWTStop();
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f92f 	bl	8001780 <_ZN14WobbleBoardApp7DWTStopEv>
 8001522:	6778      	str	r0, [r7, #116]	; 0x74
//	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x122>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8001534:	2b01      	cmp	r3, #1
 8001536:	f040 80dc 	bne.w	80016f2 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2da>
 800153a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80d8 	beq.w	80016f2 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2da>
			(pdata_out != nullptr))
	{
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f103 0646 	add.w	r6, r3, #70	; 0x46
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800154a:	68db      	ldr	r3, [r3, #12]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4604      	mov	r4, r0
 8001554:	460d      	mov	r5, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001558:	691b      	ldr	r3, [r3, #16]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fff4 	bl	8000548 <__aeabi_f2d>
 8001560:	4680      	mov	r8, r0
 8001562:	4689      	mov	r9, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001566:	695b      	ldr	r3, [r3, #20]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001576:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800157a:	e9cd 4500 	strd	r4, r5, [sp]
 800157e:	4a62      	ldr	r2, [pc, #392]	; (8001708 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f0>)
 8001580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001584:	4630      	mov	r0, r6
 8001586:	f016 fe81 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3346      	adds	r3, #70	; 0x46
 800158e:	4619      	mov	r1, r3
 8001590:	485e      	ldr	r0, [pc, #376]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 8001592:	f016 fe0f 	bl	80181b4 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f103 0646 	add.w	r6, r3, #70	; 0x46
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 800159c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800159e:	681b      	ldr	r3, [r3, #0]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffd1 	bl	8000548 <__aeabi_f2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 80015aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ac:	685b      	ldr	r3, [r3, #4]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffca 	bl	8000548 <__aeabi_f2d>
 80015b4:	4680      	mov	r8, r0
 80015b6:	4689      	mov	r9, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 80015b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ba:	689b      	ldr	r3, [r3, #8]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffc3 	bl	8000548 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015ce:	e9cd 4500 	strd	r4, r5, [sp]
 80015d2:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f8>)
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4630      	mov	r0, r6
 80015da:	f016 fe57 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3346      	adds	r3, #70	; 0x46
 80015e2:	4619      	mov	r1, r3
 80015e4:	4849      	ldr	r0, [pc, #292]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 80015e6:	f016 fde5 	bl	80181b4 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f103 0646 	add.w	r6, r3, #70	; 0x46
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 80015f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015f2:	69db      	ldr	r3, [r3, #28]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4604      	mov	r4, r0
 80015fc:	460d      	mov	r5, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 80015fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001600:	6a1b      	ldr	r3, [r3, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa0 	bl	8000548 <__aeabi_f2d>
 8001608:	4680      	mov	r8, r0
 800160a:	4689      	mov	r9, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 800160c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800161e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001622:	e9cd 4500 	strd	r4, r5, [sp]
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2fc>)
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4630      	mov	r0, r6
 800162e:	f016 fe2d 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3346      	adds	r3, #70	; 0x46
 8001636:	4619      	mov	r1, r3
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 800163a:	f016 fdbb 	bl	80181b4 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f103 0646 	add.w	r6, r3, #70	; 0x46
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff76 	bl	8000548 <__aeabi_f2d>
 800165c:	4680      	mov	r8, r0
 800165e:	4689      	mov	r9, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff6f 	bl	8000548 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001672:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001676:	e9cd 4500 	strd	r4, r5, [sp]
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f0>)
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	4630      	mov	r0, r6
 8001682:	f016 fe03 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3346      	adds	r3, #70	; 0x46
 800168a:	4619      	mov	r1, r3
 800168c:	481f      	ldr	r0, [pc, #124]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 800168e:	f016 fd91 	bl	80181b4 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f103 0446 	add.w	r4, r3, #70	; 0x46
				pdata_out->heading);
 8001698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff53 	bl	8000548 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	e9cd 2300 	strd	r2, r3, [sp]
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x300>)
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	4620      	mov	r0, r4
 80016b2:	f016 fdeb 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3346      	adds	r3, #70	; 0x46
 80016ba:	4619      	mov	r1, r3
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 80016be:	f016 fd79 	bl	80181b4 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f103 0446 	add.w	r4, r3, #70	; 0x46
				pdata_out->headingErr);
 80016c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff3b 	bl	8000548 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9cd 2300 	strd	r2, r3, [sp]
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x304>)
 80016dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e0:	4620      	mov	r0, r4
 80016e2:	f016 fdd3 	bl	801828c <sniprintf>
	    printf("%s", DataOut);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3346      	adds	r3, #70	; 0x46
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 80016ee:	f016 fd61 	bl	80181b4 <iprintf>
	}
}
 80016f2:	bf00      	nop
 80016f4:	377c      	adds	r7, #124	; 0x7c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016fc:	3a83126f 	.word	0x3a83126f
 8001700:	3b03126f 	.word	0x3b03126f
 8001704:	3c23d70a 	.word	0x3c23d70a
 8001708:	0801a578 	.word	0x0801a578
 800170c:	0801a524 	.word	0x0801a524
 8001710:	0801a5b0 	.word	0x0801a5b0
 8001714:	0801a5e8 	.word	0x0801a5e8
 8001718:	0801a61c 	.word	0x0801a61c
 800171c:	0801a63c 	.word	0x0801a63c

08001720 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 800172e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001732:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000edf0 	.word	0xe000edf0
 8001750:	e0001000 	.word	0xe0001000

08001754 <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e0001000 	.word	0xe0001000

08001780 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	0c9b      	lsrs	r3, r3, #18
 80017ae:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e0001000 	.word	0xe0001000
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	431bde83 	.word	0x431bde83

080017d0 <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>:

void WobbleBoardApp::InitStreamingHeader(TMsg* Msg)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2232      	movs	r2, #50	; 0x32
 80017ea:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2203      	movs	r2, #3
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 800180c:	f000 fb52 	bl	8001eb4 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 8001810:	f000 fb58 	bl	8001ec4 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 8001814:	f000 fb5e 	bl	8001ed4 <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 800181a:	f008 f8ef 	bl	80099fc <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SensorsEnabled = 1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200014a8 	.word	0x200014a8

08001838 <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <_ZN14WobbleBoardApp17StopDataStreamingEv+0x30>)
 800184a:	f008 f93f 	bl	8009acc <HAL_TIM_Base_Stop>

	/* Disable all sensors */
	BSP_SENSOR_ACC_Disable();
 800184e:	f000 fb49 	bl	8001ee4 <BSP_SENSOR_ACC_Disable>
	BSP_SENSOR_GYR_Disable();
 8001852:	f000 fb4f 	bl	8001ef4 <BSP_SENSOR_GYR_Disable>
	BSP_SENSOR_MAG_Disable();
 8001856:	f000 fb55 	bl	8001f04 <BSP_SENSOR_MAG_Disable>

	SensorsEnabled = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200014a8 	.word	0x200014a8

0800186c <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 8001874:	f000 fd22 	bl	80022bc <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 8001878:	f000 fd02 	bl	8002280 <MotionFX_manager_start_6X>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 800188c:	f000 fd02 	bl	8002294 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001890:	f000 fd0a 	bl	80022a8 <MotionFX_manager_start_9X>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 80018a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	09db      	lsrs	r3, r3, #7
 80018b8:	3b01      	subs	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80018bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018e8:	480a      	ldr	r0, [pc, #40]	; (8001914 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018ea:	f008 f82f 	bl	800994c <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018fe:	f000 fc35 	bl	800216c <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c
 8001910:	10624dd3 	.word	0x10624dd3
 8001914:	200014a8 	.word	0x200014a8

08001918 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146

	if(ShouldStartUserCalibrationMode)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f809 	bl	8001954 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode();
	}
}
 8001942:	e002      	b.n	800194a <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x32>
		ExitUserCalibrationMode();
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f87f 	bl	8001a48 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	UserCalibrationTimerTimestamp = __HAL_TIM_GET_COUNTER(&htim15);

	// Start the user calibration timer
	HAL_TIM_Base_Start(&htim15);

	IsInUserCalibrationMode = true;
 800195c:	466b      	mov	r3, sp
 800195e:	461d      	mov	r5, r3
	std::string printString = "Entered User Calibration Mode\r\n";
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	4618      	mov	r0, r3
 8001966:	f013 ff02 	bl	801576e <_ZNSaIcEC1Ev>
 800196a:	f107 0220 	add.w	r2, r7, #32
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4932      	ldr	r1, [pc, #200]	; (8001a3c <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe8>)
 8001974:	4618      	mov	r0, r3
 8001976:	f013 ff67 	bl	8015848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	4618      	mov	r0, r3
 8001980:	f013 fef6 	bl	8015770 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f013 ff35 	bl	80157f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800198e:	4603      	mov	r3, r0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	1e5c      	subs	r4, r3, #1
 8001996:	62bc      	str	r4, [r7, #40]	; 0x28
 8001998:	4623      	mov	r3, r4
 800199a:	3301      	adds	r3, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	00cb      	lsls	r3, r1, #3
 80019ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019b0:	00c2      	lsls	r2, r0, #3
 80019b2:	4623      	mov	r3, r4
 80019b4:	3301      	adds	r3, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	00cb      	lsls	r3, r1, #3
 80019c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019ca:	00c2      	lsls	r2, r0, #3
 80019cc:	4623      	mov	r3, r4
 80019ce:	3301      	adds	r3, #1
 80019d0:	3307      	adds	r3, #7
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	ebad 0d03 	sub.w	sp, sp, r3
 80019da:	466b      	mov	r3, sp
 80019dc:	3300      	adds	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 80019e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f013 ff08 	bl	80157fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4620      	mov	r0, r4
 80019f2:	f016 fc7f 	bl	80182f4 <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 80019f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xec>)
 8001a02:	f008 fcd7 	bl	800a3b4 <HAL_UART_Transmit>
	StopDataStreaming();
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff16 	bl	8001838 <_ZN14WobbleBoardApp17StopDataStreamingEv>
	UserCalibrationTimerTimestamp = __HAL_TIM_GET_COUNTER(&htim15);
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xf0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	HAL_TIM_Base_Start(&htim15);
 8001a1a:	480a      	ldr	r0, [pc, #40]	; (8001a44 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xf0>)
 8001a1c:	f007 ffee 	bl	80099fc <HAL_TIM_Base_Start>
	IsInUserCalibrationMode = true;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	std::string printString = "Entered User Calibration Mode\r\n";
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f013 fedd 	bl	80157ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a32:	46ad      	mov	sp, r5
}
 8001a34:	bf00      	nop
 8001a36:	3730      	adds	r7, #48	; 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	0801a664 	.word	0x0801a664
 8001a40:	20001548 	.word	0x20001548
 8001a44:	2000145c 	.word	0x2000145c

08001a48 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>:
{

}

void WobbleBoardApp::ExitUserCalibrationMode()
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

	// Stop the user calibration timer
	HAL_TIM_Base_Stop(&htim15);

	// Start streaming out the motion data again
	StartDataStreaming();
 8001a50:	466b      	mov	r3, sp
 8001a52:	461d      	mov	r5, r3
	std::string printString = "Exited User Calibration Mode\r\n";
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f013 fe88 	bl	801576e <_ZNSaIcEC1Ev>
 8001a5e:	f107 0220 	add.w	r2, r7, #32
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	492f      	ldr	r1, [pc, #188]	; (8001b24 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0xdc>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f013 feed 	bl	8015848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4618      	mov	r0, r3
 8001a74:	f013 fe7c 	bl	8015770 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f013 febb 	bl	80157f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001a82:	4603      	mov	r3, r0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	1e5c      	subs	r4, r3, #1
 8001a8a:	62bc      	str	r4, [r7, #40]	; 0x28
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	00cb      	lsls	r3, r1, #3
 8001aa0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aa4:	00c2      	lsls	r2, r0, #3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	00cb      	lsls	r3, r1, #3
 8001aba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001abe:	00c2      	lsls	r2, r0, #3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	ebad 0d03 	sub.w	sp, sp, r3
 8001ace:	466b      	mov	r3, sp
 8001ad0:	3300      	adds	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 8001ad4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f013 fe8e 	bl	80157fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f016 fc05 	bl	80182f4 <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0xe0>)
 8001af6:	f008 fc5d 	bl	800a3b4 <HAL_UART_Transmit>
	IsInUserCalibrationMode = false;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	HAL_TIM_Base_Stop(&htim15);
 8001b02:	480a      	ldr	r0, [pc, #40]	; (8001b2c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0xe4>)
 8001b04:	f007 ffe2 	bl	8009acc <HAL_TIM_Base_Stop>
	StartDataStreaming();
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff fe7b 	bl	8001804 <_ZN14WobbleBoardApp18StartDataStreamingEv>
	std::string printString = "Exited User Calibration Mode\r\n";
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4618      	mov	r0, r3
 8001b14:	f013 fe6a 	bl	80157ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b18:	46ad      	mov	sp, r5
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	0801a684 	.word	0x0801a684
 8001b28:	20001548 	.word	0x20001548
 8001b2c:	2000145c 	.word	0x2000145c

08001b30 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <UART_StartReceiveMsg+0x2c>)
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <UART_StartReceiveMsg+0x30>)
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <UART_StartReceiveMsg+0x2c>)
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <UART_StartReceiveMsg+0x2c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <UART_StartReceiveMsg+0x30>)
 8001b52:	4802      	ldr	r0, [pc, #8]	; (8001b5c <UART_StartReceiveMsg+0x2c>)
 8001b54:	f008 fcc2 	bl	800a4dc <HAL_UART_Receive_DMA>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20001548 	.word	0x20001548
 8001b60:	200011c0 	.word	0x200011c0

08001b64 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <MX_CRC_Init+0x40>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_CRC_Init+0x3c>)
 8001b8e:	f004 fd87 	bl	80066a0 <HAL_CRC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b98:	f000 fae8 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200013c8 	.word	0x200013c8
 8001ba4:	40023000 	.word	0x40023000

08001ba8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_CRC_MspInit+0x38>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6493      	str	r3, [r2, #72]	; 0x48
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_CRC_MspInit+0x3c>)
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023000 	.word	0x40023000
 8001be4:	40021000 	.word	0x40021000

08001be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_DMA_Init+0x38>)
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <MX_DMA_Init+0x38>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_DMA_Init+0x38>)
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f004 fd11 	bl	8006632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c10:	2010      	movs	r0, #16
 8001c12:	f004 fd2a 	bl	800666a <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	4a2e      	ldr	r2, [pc, #184]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_GPIO_Init+0xd4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f005 fa7d 	bl	80071a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <MX_GPIO_Init+0xd8>)
 8001cbe:	f004 ffd1 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f004 ffc2 	bl	8006c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2028      	movs	r0, #40	; 0x28
 8001ce6:	f004 fca4 	bl	8006632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cea:	2028      	movs	r0, #40	; 0x28
 8001cec:	f004 fcbd 	bl	800666a <HAL_NVIC_EnableIRQ>

}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	48000800 	.word	0x48000800

08001d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d06:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <MX_I2C1_Init+0x78>)
 8001d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <MX_I2C1_Init+0x7c>)
 8001d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d3a:	480e      	ldr	r0, [pc, #56]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d3c:	f005 fa60 	bl	8007200 <HAL_I2C_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d46:	f000 fa11 	bl	800216c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4809      	ldr	r0, [pc, #36]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d4e:	f006 f803 	bl	8007d58 <HAL_I2CEx_ConfigAnalogFilter>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d58:	f000 fa08 	bl	800216c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_I2C1_Init+0x74>)
 8001d60:	f006 f845 	bl	8007dee <HAL_I2CEx_ConfigDigitalFilter>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d6a:	f000 f9ff 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200013ec 	.word	0x200013ec
 8001d78:	40005400 	.word	0x40005400
 8001d7c:	00702991 	.word	0x00702991

08001d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0ac      	sub	sp, #176	; 0xb0
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2288      	movs	r2, #136	; 0x88
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f015 fceb 	bl	801777c <memset>
  if(i2cHandle->Instance==I2C1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_I2C_MspInit+0xb0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d13b      	bne.n	8001e28 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 feb3 	bl	8008b28 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dc8:	f000 f9d0 	bl	800216c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dec:	2312      	movs	r3, #18
 8001dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_I2C_MspInit+0xb8>)
 8001e0c:	f004 ff2a 	bl	8006c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_I2C_MspInit+0xb4>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	37b0      	adds	r7, #176	; 0xb0
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40005400 	.word	0x40005400
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000400 	.word	0x48000400

08001e3c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_I2C_MspDeInit+0x3c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10f      	bne.n	8001e6e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_I2C_MspDeInit+0x40>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_I2C_MspDeInit+0x40>)
 8001e54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <HAL_I2C_MspDeInit+0x44>)
 8001e60:	f005 f8aa 	bl	8006fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <HAL_I2C_MspDeInit+0x44>)
 8001e6a:	f005 f8a5 	bl	8006fb8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48000400 	.word	0x48000400

08001e84 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001e88:	2102      	movs	r1, #2
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f003 fd2e 	bl	80058ec <IKS01A2_MOTION_SENSOR_Init>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f003 fd26 	bl	80058ec <IKS01A2_MOTION_SENSOR_Init>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f003 fd1e 	bl	80058ec <IKS01A2_MOTION_SENSOR_Init>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001eb8:	2102      	movs	r1, #2
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f003 fe12 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f003 fe0a 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001ed8:	2104      	movs	r1, #4
 8001eda:	2002      	movs	r0, #2
 8001edc:	f003 fe02 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001ee8:	2102      	movs	r1, #2
 8001eea:	2000      	movs	r0, #0
 8001eec:	f003 fe3c 	bl	8005b68 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2000      	movs	r0, #0
 8001efc:	f003 fe34 	bl	8005b68 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001f08:	2104      	movs	r1, #4
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f003 fe2c 	bl	8005b68 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	2102      	movs	r1, #2
 8001f20:	2000      	movs	r0, #0
 8001f22:	f003 fe63 	bl	8005bec <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f003 fe56 	bl	8005bec <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	2104      	movs	r1, #4
 8001f54:	2002      	movs	r0, #2
 8001f56:	f003 fe49 	bl	8005bec <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001f6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f70:	2102      	movs	r1, #2
 8001f72:	2000      	movs	r0, #0
 8001f74:	f003 fe7e 	bl	8005c74 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f003 feb7 	bl	8005d00 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	226e      	movs	r2, #110	; 0x6e
 8001fa6:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	2277      	movs	r2, #119	; 0x77
 8001fae:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	2275      	movs	r2, #117	; 0x75
 8001fb6:	701a      	strb	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	226e      	movs	r2, #110	; 0x6e
 8001fd0:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	2277      	movs	r2, #119	; 0x77
 8001fd8:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	2275      	movs	r2, #117	; 0x75
 8001fe0:	701a      	strb	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	226e      	movs	r2, #110	; 0x6e
 8001ffa:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3301      	adds	r3, #1
 8002000:	2265      	movs	r2, #101	; 0x65
 8002002:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3302      	adds	r3, #2
 8002008:	2275      	movs	r2, #117	; 0x75
 800200a:	701a      	strb	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b598      	push	{r3, r4, r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201c:	f004 f9b2 	bl	8006384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002020:	f000 f82a 	bl	8002078 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002024:	f7ff fdfe 	bl	8001c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8002028:	f7ff fdde 	bl	8001be8 <MX_DMA_Init>
  MX_CRC_Init();
 800202c:	f7ff fd9a 	bl	8001b64 <MX_CRC_Init>
  MX_RTC_Init();
 8002030:	f000 f976 	bl	8002320 <MX_RTC_Init>
  MX_TIM15_Init();
 8002034:	f000 fcd0 	bl	80029d8 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8002038:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800203c:	f013 fb86 	bl	801574c <_Znwj>
 8002040:	4603      	mov	r3, r0
 8002042:	461c      	mov	r4, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe ff7b 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <main+0x5c>)
 800204c:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <main+0x5c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <main+0x48>
  {
	  wobbleBoardApp->Init();
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <main+0x5c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe ffb2 	bl	8000fc4 <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <main+0x5c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0fb      	beq.n	8002060 <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <main+0x5c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f82f 	bl	80010d0 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 8002072:	e7f5      	b.n	8002060 <main+0x48>
 8002074:	2000072c 	.word	0x2000072c

08002078 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b096      	sub	sp, #88	; 0x58
 800207c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	2244      	movs	r2, #68	; 0x44
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f015 fb78 	bl	801777c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800209a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800209e:	f005 ff01 	bl	8007ea4 <HAL_PWREx_ControlVoltageScaling>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80020b2:	f000 f85b 	bl	800216c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80020b6:	230a      	movs	r3, #10
 80020b8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c0:	2310      	movs	r3, #16
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c8:	2302      	movs	r3, #2
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020cc:	2302      	movs	r3, #2
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80020d4:	230a      	movs	r3, #10
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020d8:	2307      	movs	r3, #7
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020dc:	2302      	movs	r3, #2
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4618      	mov	r0, r3
 80020ea:	f005 ff31 	bl	8007f50 <HAL_RCC_OscConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 80020fe:	f000 f835 	bl	800216c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002102:	230f      	movs	r3, #15
 8002104:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002106:	2303      	movs	r3, #3
 8002108:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2104      	movs	r1, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f006 fafe 	bl	800871c <HAL_RCC_ClockConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 8002130:	f000 f81c 	bl	800216c <Error_Handler>
	}
}
 8002134:	bf00      	nop
 8002136:	3758      	adds	r7, #88	; 0x58
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214c:	d108      	bne.n	8002160 <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fbdc 	bl	8001918 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000072c 	.word	0x2000072c

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002174:	e7fe      	b.n	8002174 <Error_Handler+0x8>
	...

08002178 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 800217c:	f012 fd2c 	bl	8014bd8 <MotionFX_GetStateSize>
 8002180:	4603      	mov	r3, r0
 8002182:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8002186:	d901      	bls.n	800218c <MotionFX_manager_init+0x14>
    Error_Handler();
 8002188:	f7ff fff0 	bl	800216c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 800218c:	4821      	ldr	r0, [pc, #132]	; (8002214 <MotionFX_manager_init+0x9c>)
 800218e:	f012 fd27 	bl	8014be0 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <MotionFX_manager_init+0xa0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	481e      	ldr	r0, [pc, #120]	; (8002214 <MotionFX_manager_init+0x9c>)
 800219a:	f012 fe05 	bl	8014da8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	331d      	adds	r3, #29
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fef8 	bl	8001f9a <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3321      	adds	r3, #33	; 0x21
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff07 	bl	8001fc4 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3325      	adds	r3, #37	; 0x25
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff16 	bl	8001fee <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <MotionFX_manager_init+0xa4>)
 80021c8:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <MotionFX_manager_init+0xa8>)
 80021d0:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <MotionFX_manager_init+0xac>)
 80021d8:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MotionFX_manager_init+0xa0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <MotionFX_manager_init+0x9c>)
 80021fc:	f012 fd8a 	bl	8014d14 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002200:	2100      	movs	r1, #0
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <MotionFX_manager_init+0x9c>)
 8002204:	f012 fe0c 	bl	8014e20 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002208:	2100      	movs	r1, #0
 800220a:	4802      	ldr	r0, [pc, #8]	; (8002214 <MotionFX_manager_init+0x9c>)
 800220c:	f012 fe28 	bl	8014e60 <MotionFX_enable_9X>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000764 	.word	0x20000764
 8002218:	20000004 	.word	0x20000004
 800221c:	3ac88a48 	.word	0x3ac88a48
 8002220:	3b83126f 	.word	0x3b83126f
 8002224:	3b449ba6 	.word	0x3b449ba6

08002228 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MotionFX_manager_run+0x4c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MotionFX_manager_run+0x50>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d10e      	bne.n	8002260 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <MotionFX_manager_run+0x54>)
 800224a:	f012 fe39 	bl	8014ec0 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <MotionFX_manager_run+0x54>)
 800225a:	f012 fe21 	bl	8014ea0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800225e:	e004      	b.n	800226a <MotionFX_manager_run+0x42>
    discardedCount++;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <MotionFX_manager_run+0x4c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a03      	ldr	r2, [pc, #12]	; (8002274 <MotionFX_manager_run+0x4c>)
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000760 	.word	0x20000760
 8002278:	20000008 	.word	0x20000008
 800227c:	20000764 	.word	0x20000764

08002280 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002284:	2101      	movs	r1, #1
 8002286:	4802      	ldr	r0, [pc, #8]	; (8002290 <MotionFX_manager_start_6X+0x10>)
 8002288:	f012 fdca 	bl	8014e20 <MotionFX_enable_6X>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000764 	.word	0x20000764

08002294 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002298:	2100      	movs	r1, #0
 800229a:	4802      	ldr	r0, [pc, #8]	; (80022a4 <MotionFX_manager_stop_6X+0x10>)
 800229c:	f012 fdc0 	bl	8014e20 <MotionFX_enable_6X>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000764 	.word	0x20000764

080022a8 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80022ac:	2101      	movs	r1, #1
 80022ae:	4802      	ldr	r0, [pc, #8]	; (80022b8 <MotionFX_manager_start_9X+0x10>)
 80022b0:	f012 fdd6 	bl	8014e60 <MotionFX_enable_9X>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000764 	.word	0x20000764

080022bc <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80022c0:	2100      	movs	r1, #0
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <MotionFX_manager_stop_9X+0x10>)
 80022c4:	f012 fdcc 	bl	8014e60 <MotionFX_enable_9X>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000764 	.word	0x20000764

080022d0 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f012 ffd8 	bl	8015290 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f013 f9f7 	bl	80156d4 <MotionFX_MagCal_getParams>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80022f6:	2101      	movs	r1, #1
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f012 ff33 	bl	8015164 <MotionFX_MagCal_init>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f012 ff27 	bl	8015164 <MotionFX_MagCal_init>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002334:	2300      	movs	r3, #0
 8002336:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <MX_RTC_Init+0xb0>)
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <MX_RTC_Init+0xb4>)
 800233c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002346:	227f      	movs	r2, #127	; 0x7f
 8002348:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <MX_RTC_Init+0xb0>)
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <MX_RTC_Init+0xb0>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002368:	4819      	ldr	r0, [pc, #100]	; (80023d0 <MX_RTC_Init+0xb0>)
 800236a:	f007 f899 	bl	80094a0 <HAL_RTC_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002374:	f7ff fefa 	bl	800216c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002378:	2300      	movs	r3, #0
 800237a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800237c:	2300      	movs	r3, #0
 800237e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002380:	2300      	movs	r3, #0
 8002382:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2201      	movs	r2, #1
 8002390:	4619      	mov	r1, r3
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <MX_RTC_Init+0xb0>)
 8002394:	f007 f8ff 	bl	8009596 <HAL_RTC_SetTime>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800239e:	f7ff fee5 	bl	800216c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023a2:	2301      	movs	r3, #1
 80023a4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80023a6:	2301      	movs	r3, #1
 80023a8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_RTC_Init+0xb0>)
 80023ba:	f007 f989 	bl	80096d0 <HAL_RTC_SetDate>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80023c4:	f7ff fed2 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20001438 	.word	0x20001438
 80023d4:	40002800 	.word	0x40002800

080023d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0a4      	sub	sp, #144	; 0x90
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	2288      	movs	r2, #136	; 0x88
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f015 f9c7 	bl	801777c <memset>
  if(rtcHandle->Instance==RTC)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_RTC_MspInit+0x5c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d118      	bne.n	800242a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	4618      	mov	r0, r3
 800240c:	f006 fb8c 	bl	8008b28 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002416:	f7ff fea9 	bl	800216c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RTC_MspInit+0x60>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_RTC_MspInit+0x60>)
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800242a:	bf00      	nop
 800242c:	3790      	adds	r7, #144	; 0x90
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40002800 	.word	0x40002800
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_MspInit+0x44>)
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_MspInit+0x44>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6613      	str	r3, [r2, #96]	; 0x60
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_MspInit+0x44>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x44>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x44>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x44>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <NMI_Handler+0x4>

0800248a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <MemManage_Handler+0x4>

08002496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f003 ffb4 	bl	800643c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA1_Channel6_IRQHandler+0x10>)
 80024de:	f004 fae1 	bl	8006aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20001500 	.word	0x20001500

080024ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80024f2:	f007 fb12 	bl	8009b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000145c 	.word	0x2000145c

08002500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM3_IRQHandler+0x10>)
 8002506:	f007 fb08 	bl	8009b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200014a8 	.word	0x200014a8

08002514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800251c:	f004 fe58 	bl	80071d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <BSP_I2C1_Init+0x70>)
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <BSP_I2C1_Init+0x74>)
 8002532:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <BSP_I2C1_Init+0x78>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	4918      	ldr	r1, [pc, #96]	; (800259c <BSP_I2C1_Init+0x78>)
 800253c:	600a      	str	r2, [r1, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d122      	bne.n	8002588 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002542:	4814      	ldr	r0, [pc, #80]	; (8002594 <BSP_I2C1_Init+0x70>)
 8002544:	f005 f948 	bl	80077d8 <HAL_I2C_GetState>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11c      	bne.n	8002588 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800254e:	4811      	ldr	r0, [pc, #68]	; (8002594 <BSP_I2C1_Init+0x70>)
 8002550:	f000 f8ba 	bl	80026c8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800255a:	480e      	ldr	r0, [pc, #56]	; (8002594 <BSP_I2C1_Init+0x70>)
 800255c:	f7ff fbd0 	bl	8001d00 <MX_I2C1_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002566:	f06f 0307 	mvn.w	r3, #7
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e00c      	b.n	8002588 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	4808      	ldr	r0, [pc, #32]	; (8002594 <BSP_I2C1_Init+0x70>)
 8002572:	f005 fbf1 	bl	8007d58 <HAL_I2CEx_ConfigAnalogFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800257c:	f06f 0307 	mvn.w	r3, #7
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	e001      	b.n	8002588 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200013ec 	.word	0x200013ec
 8002598:	40005400 	.word	0x40005400
 800259c:	200010e4 	.word	0x200010e4

080025a0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <BSP_I2C1_DeInit+0x48>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d014      	beq.n	80025dc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <BSP_I2C1_DeInit+0x48>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <BSP_I2C1_DeInit+0x48>)
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <BSP_I2C1_DeInit+0x48>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <BSP_I2C1_DeInit+0x4c>)
 80025c6:	f000 f8c5 	bl	8002754 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <BSP_I2C1_DeInit+0x4c>)
 80025cc:	f004 fea7 	bl	800731e <HAL_I2C_DeInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80025d6:	f06f 0307 	mvn.w	r3, #7
 80025da:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200010e4 	.word	0x200010e4
 80025ec:	200013ec 	.word	0x200013ec

080025f0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	60ba      	str	r2, [r7, #8]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	81fb      	strh	r3, [r7, #14]
 80025fe:	460b      	mov	r3, r1
 8002600:	81bb      	strh	r3, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800260a:	89ba      	ldrh	r2, [r7, #12]
 800260c:	89f9      	ldrh	r1, [r7, #14]
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	480c      	ldr	r0, [pc, #48]	; (8002650 <BSP_I2C1_WriteReg+0x60>)
 8002620:	f004 feac 	bl	800737c <HAL_I2C_Mem_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800262a:	4809      	ldr	r0, [pc, #36]	; (8002650 <BSP_I2C1_WriteReg+0x60>)
 800262c:	f005 f8e2 	bl	80077f4 <HAL_I2C_GetError>
 8002630:	4603      	mov	r3, r0
 8002632:	2b04      	cmp	r3, #4
 8002634:	d103      	bne.n	800263e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002636:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e002      	b.n	8002644 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800263e:	f06f 0303 	mvn.w	r3, #3
 8002642:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200013ec 	.word	0x200013ec

08002654 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af04      	add	r7, sp, #16
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	81fb      	strh	r3, [r7, #14]
 8002662:	460b      	mov	r3, r1
 8002664:	81bb      	strh	r3, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800266e:	89ba      	ldrh	r2, [r7, #12]
 8002670:	89f9      	ldrh	r1, [r7, #14]
 8002672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <BSP_I2C1_ReadReg+0x60>)
 8002684:	f004 ff8e 	bl	80075a4 <HAL_I2C_Mem_Read>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800268e:	4809      	ldr	r0, [pc, #36]	; (80026b4 <BSP_I2C1_ReadReg+0x60>)
 8002690:	f005 f8b0 	bl	80077f4 <HAL_I2C_GetError>
 8002694:	4603      	mov	r3, r0
 8002696:	2b04      	cmp	r3, #4
 8002698:	d103      	bne.n	80026a2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800269a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e002      	b.n	80026a8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026a2:	f06f 0303 	mvn.w	r3, #3
 80026a6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80026a8:	697b      	ldr	r3, [r7, #20]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200013ec 	.word	0x200013ec

080026b8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80026bc:	f003 fed2 	bl	8006464 <HAL_GetTick>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <I2C1_MspInit+0x84>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <I2C1_MspInit+0x84>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <I2C1_MspInit+0x84>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80026fa:	2304      	movs	r3, #4
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4812      	ldr	r0, [pc, #72]	; (8002750 <I2C1_MspInit+0x88>)
 8002706:	f004 faad 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800270a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002710:	2312      	movs	r3, #18
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800271c:	2304      	movs	r3, #4
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	480a      	ldr	r0, [pc, #40]	; (8002750 <I2C1_MspInit+0x88>)
 8002728:	f004 fa9c 	bl	8006c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <I2C1_MspInit+0x84>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <I2C1_MspInit+0x84>)
 8002732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <I2C1_MspInit+0x84>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	48000400 	.word	0x48000400

08002754 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <I2C1_MspDeInit+0x30>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	4a08      	ldr	r2, [pc, #32]	; (8002784 <I2C1_MspDeInit+0x30>)
 8002762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002766:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800276c:	4806      	ldr	r0, [pc, #24]	; (8002788 <I2C1_MspDeInit+0x34>)
 800276e:	f004 fc23 	bl	8006fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <I2C1_MspDeInit+0x34>)
 8002778:	f004 fc1e 	bl	8006fb8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400

0800278c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	return 1;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_kill>:

int _kill(int pid, int sig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027a6:	f014 ff87 	bl	80176b8 <__errno>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2216      	movs	r2, #22
 80027ae:	601a      	str	r2, [r3, #0]
	return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_exit>:

void _exit (int status)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ffe7 	bl	800279c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ce:	e7fe      	b.n	80027ce <_exit+0x12>

080027d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e00a      	b.n	80027f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e2:	f3af 8000 	nop.w
 80027e6:	4601      	mov	r1, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60ba      	str	r2, [r7, #8]
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf0      	blt.n	80027e2 <_read+0x12>
	}

return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e009      	b.n	8002830 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fd25 	bl	8006274 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	dbf1      	blt.n	800281c <_write+0x12>
	}
	return len;
 8002838:	687b      	ldr	r3, [r7, #4]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_close>:

int _close(int file)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return -1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286a:	605a      	str	r2, [r3, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_isatty>:

int _isatty(int file)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
	return 1;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <_sbrk+0x5c>)
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <_sbrk+0x60>)
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <_sbrk+0x64>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <_sbrk+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d207      	bcs.n	80028ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028dc:	f014 feec 	bl	80176b8 <__errno>
 80028e0:	4603      	mov	r3, r0
 80028e2:	220c      	movs	r2, #12
 80028e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	e009      	b.n	8002900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <_sbrk+0x64>)
 80028fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20018000 	.word	0x20018000
 800290c:	00000400 	.word	0x00000400
 8002910:	200010e8 	.word	0x200010e8
 8002914:	20001a08 	.word	0x20001a08

08002918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x20>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <SystemInit+0x20>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <MX_TIM3_Init+0x94>)
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <MX_TIM3_Init+0x98>)
 800295e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <MX_TIM3_Init+0x94>)
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_TIM3_Init+0x94>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_TIM3_Init+0x94>)
 800296e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <MX_TIM3_Init+0x94>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <MX_TIM3_Init+0x94>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002980:	4813      	ldr	r0, [pc, #76]	; (80029d0 <MX_TIM3_Init+0x94>)
 8002982:	f006 ffe3 	bl	800994c <HAL_TIM_Base_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800298c:	f7ff fbee 	bl	800216c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002996:	f107 0310 	add.w	r3, r7, #16
 800299a:	4619      	mov	r1, r3
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <MX_TIM3_Init+0x94>)
 800299e:	f007 f9db 	bl	8009d58 <HAL_TIM_ConfigClockSource>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80029a8:	f7ff fbe0 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_TIM3_Init+0x94>)
 80029ba:	f007 fbfd 	bl	800a1b8 <HAL_TIMEx_MasterConfigSynchronization>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029c4:	f7ff fbd2 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200014a8 	.word	0x200014a8
 80029d4:	40000400 	.word	0x40000400

080029d8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <MX_TIM15_Init+0x9c>)
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <MX_TIM15_Init+0xa0>)
 80029fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_TIM15_Init+0x9c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002a22:	4814      	ldr	r0, [pc, #80]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a24:	f006 ff92 	bl	800994c <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002a2e:	f7ff fb9d 	bl	800216c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a40:	f007 f98a 	bl	8009d58 <HAL_TIM_ConfigClockSource>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002a4a:	f7ff fb8f 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_TIM15_Init+0x9c>)
 8002a5c:	f007 fbac 	bl	800a1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002a66:	f7ff fb81 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000145c 	.word	0x2000145c
 8002a78:	40014000 	.word	0x40014000

08002a7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_TIM_Base_MspInit+0x78>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d114      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	201d      	movs	r0, #29
 8002aac:	f003 fdc1 	bl	8006632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ab0:	201d      	movs	r0, #29
 8002ab2:	f003 fdda 	bl	800666a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002ab6:	e018      	b.n	8002aea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <HAL_TIM_Base_MspInit+0x80>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_TIM_Base_MspInit+0x7c>)
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2018      	movs	r0, #24
 8002ae0:	f003 fda7 	bl	8006632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ae4:	2018      	movs	r0, #24
 8002ae6:	f003 fdc0 	bl	800666a <HAL_NVIC_EnableIRQ>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40014000 	.word	0x40014000

08002b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b04:	f7ff ff08 	bl	8002918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b0a:	490d      	ldr	r1, [pc, #52]	; (8002b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <LoopForever+0xe>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <LoopForever+0x16>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f014 fdc9 	bl	80176c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b32:	f7ff fa71 	bl	8002018 <main>

08002b36 <LoopForever>:

LoopForever:
    b LoopForever
 8002b36:	e7fe      	b.n	8002b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002b44:	0801afec 	.word	0x0801afec
  ldr r2, =_sbss
 8002b48:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002b4c:	20001a08 	.word	0x20001a08

08002b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC1_2_IRQHandler>
	...

08002b54 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e04d      	b.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7b1a      	ldrb	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002bac:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002bb2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e020      	b.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4798      	blx	r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e016      	b.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d112      	bne.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2123      	movs	r1, #35	; 0x23
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fb55 	bl	80032aa <LSM303AGR_ACC_Write_Reg>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e000      	b.n	8002c0e <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08003ab9 	.word	0x08003ab9
 8002c1c:	08003b1b 	.word	0x08003b1b

08002c20 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	331c      	adds	r3, #28
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f94a 	bl	8003ec8 <lsm303agr_xl_block_data_update_set>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	e02c      	b.n	8002c9a <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	331c      	adds	r3, #28
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 faed 	bl	8004226 <lsm303agr_xl_fifo_mode_set>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e020      	b.n	8002c9a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	331c      	adds	r3, #28
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f84e 	bl	8003d08 <lsm303agr_xl_data_rate_set>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e010      	b.n	8002c9a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	331c      	adds	r3, #28
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f8c4 	bl	8003e0c <lsm303agr_xl_full_scale_set>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e004      	b.n	8002c9a <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f87c 	bl	8002da8 <LSM303AGR_ACC_Disable>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e008      	b.n	8002cce <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	331c      	adds	r3, #28
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fa55 	bl	8004196 <lsm303agr_xl_device_id_get>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e000      	b.n	8002cfa <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002d44:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	43c80000 	.word	0x43c80000

08002d60 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e014      	b.n	8002da0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f103 021c 	add.w	r2, r3, #28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f000 ffbf 	bl	8003d08 <lsm303agr_xl_data_rate_set>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	e004      	b.n	8002da0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e01f      	b.n	8002dfe <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 021c 	add.w	r2, r3, #28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	332a      	adds	r3, #42	; 0x2a
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f000 ffc2 	bl	8003d54 <lsm303agr_xl_data_rate_get>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e010      	b.n	8002dfe <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	331c      	adds	r3, #28
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 ff90 	bl	8003d08 <lsm303agr_xl_data_rate_set>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e004      	b.n	8002dfe <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	331c      	adds	r3, #28
 8002e18:	f107 020b 	add.w	r2, r7, #11
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff3e 	bl	8003ca0 <lsm303agr_xl_operating_mode_get>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e031      	b.n	8002e94 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d01a      	beq.n	8002e6c <LSM303AGR_ACC_GetSensitivity+0x66>
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	dc22      	bgt.n	8002e80 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d00a      	beq.n	8002e58 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002e42:	e01d      	b.n	8002e80 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fca8 	bl	800379c <LSM303AGR_ACC_GetSensitivityHR>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01a      	beq.n	8002e88 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e01d      	b.n	8002e94 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fce4 	bl	8003828 <LSM303AGR_ACC_GetSensitivityNM>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e013      	b.n	8002e94 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fd20 	bl	80038b4 <LSM303AGR_ACC_GetSensitivityLP>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	60fb      	str	r3, [r7, #12]
      break;
 8002e86:	e004      	b.n	8002e92 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e002      	b.n	8002e92 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002e90:	bf00      	nop
  }

  return ret;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	331c      	adds	r3, #28
 8002eae:	f107 020b 	add.w	r2, r7, #11
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fef3 	bl	8003ca0 <lsm303agr_xl_operating_mode_get>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	e09d      	b.n	8003002 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	331c      	adds	r3, #28
 8002eca:	f107 020a 	add.w	r2, r7, #10
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 ff3f 	bl	8003d54 <lsm303agr_xl_data_rate_get>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002edc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee0:	e08f      	b.n	8003002 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d147      	bne.n	8002f78 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002ee8:	7abb      	ldrb	r3, [r7, #10]
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	d840      	bhi.n	8002f70 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f1d 	.word	0x08002f1d
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f41 	.word	0x08002f41
 8002f08:	08002f49 	.word	0x08002f49
 8002f0c:	08002f51 	.word	0x08002f51
 8002f10:	08002f59 	.word	0x08002f59
 8002f14:	08002f61 	.word	0x08002f61
 8002f18:	08002f69 	.word	0x08002f69
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
        break;
 8002f24:	e06c      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f2c:	601a      	str	r2, [r3, #0]
        break;
 8002f2e:	e067      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002f34:	601a      	str	r2, [r3, #0]
        break;
 8002f36:	e063      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4a35      	ldr	r2, [pc, #212]	; (8003010 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002f3c:	601a      	str	r2, [r3, #0]
        break;
 8002f3e:	e05f      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002f44:	601a      	str	r2, [r3, #0]
        break;
 8002f46:	e05b      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4a33      	ldr	r2, [pc, #204]	; (8003018 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002f4c:	601a      	str	r2, [r3, #0]
        break;
 8002f4e:	e057      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002f54:	601a      	str	r2, [r3, #0]
        break;
 8002f56:	e053      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002f5c:	601a      	str	r2, [r3, #0]
        break;
 8002f5e:	e04f      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4a30      	ldr	r2, [pc, #192]	; (8003024 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002f64:	601a      	str	r2, [r3, #0]
        break;
 8002f66:	e04b      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002f6c:	601a      	str	r2, [r3, #0]
        break;
 8002f6e:	e047      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	60fb      	str	r3, [r7, #12]
        break;
 8002f76:	e043      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002f78:	7abb      	ldrb	r3, [r7, #10]
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d83c      	bhi.n	8002ff8 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	08002fb7 	.word	0x08002fb7
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fc9 	.word	0x08002fc9
 8002f94:	08002fd1 	.word	0x08002fd1
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fe1 	.word	0x08002fe1
 8002fa0:	08002fe9 	.word	0x08002fe9
 8002fa4:	08002ff9 	.word	0x08002ff9
 8002fa8:	08002ff1 	.word	0x08002ff1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
        break;
 8002fb4:	e024      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002fbc:	601a      	str	r2, [r3, #0]
        break;
 8002fbe:	e01f      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002fc4:	601a      	str	r2, [r3, #0]
        break;
 8002fc6:	e01b      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002fcc:	601a      	str	r2, [r3, #0]
        break;
 8002fce:	e017      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002fd4:	601a      	str	r2, [r3, #0]
        break;
 8002fd6:	e013      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002fdc:	601a      	str	r2, [r3, #0]
        break;
 8002fde:	e00f      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	; (800301c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002fe4:	601a      	str	r2, [r3, #0]
        break;
 8002fe6:	e00b      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002fec:	601a      	str	r2, [r3, #0]
        break;
 8002fee:	e007      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002ff4:	601a      	str	r2, [r3, #0]
        break;
 8002ff6:	e003      	b.n	8003000 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	60fb      	str	r3, [r7, #12]
        break;
 8002ffe:	bf00      	nop
    }
  }

  return ret;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	41200000 	.word	0x41200000
 8003010:	41c80000 	.word	0x41c80000
 8003014:	42480000 	.word	0x42480000
 8003018:	42c80000 	.word	0x42c80000
 800301c:	43480000 	.word	0x43480000
 8003020:	43c80000 	.word	0x43c80000
 8003024:	44ca8000 	.word	0x44ca8000
 8003028:	45a80000 	.word	0x45a80000
 800302c:	44a80000 	.word	0x44a80000

08003030 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003042:	2b01      	cmp	r3, #1
 8003044:	d106      	bne.n	8003054 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003046:	ed97 0a00 	vldr	s0, [r7]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fc78 	bl	8003940 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8003050:	4603      	mov	r3, r0
 8003052:	e005      	b.n	8003060 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003054:	ed97 0a00 	vldr	s0, [r7]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcd3 	bl	8003a04 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800305e:	4603      	mov	r3, r0
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	331c      	adds	r3, #28
 800307a:	f107 020b 	add.w	r2, r7, #11
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fee9 	bl	8003e58 <lsm303agr_xl_full_scale_get>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	e023      	b.n	80030da <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d81b      	bhi.n	80030d0 <LSM303AGR_ACC_GetFullScale+0x68>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <LSM303AGR_ACC_GetFullScale+0x38>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030c1 	.word	0x080030c1
 80030ac:	080030c9 	.word	0x080030c9
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
      break;
 80030b6:	e00f      	b.n	80030d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	601a      	str	r2, [r3, #0]
      break;
 80030be:	e00b      	b.n	80030d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	601a      	str	r2, [r3, #0]
      break;
 80030c6:	e007      	b.n	80030d8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	601a      	str	r2, [r3, #0]
      break;
 80030ce:	e003      	b.n	80030d8 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	60fb      	str	r3, [r7, #12]
      break;
 80030d6:	bf00      	nop
  }

  return ret;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop

080030e4 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	dd0b      	ble.n	800310c <LSM303AGR_ACC_SetFullScale+0x28>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	dd06      	ble.n	8003108 <LSM303AGR_ACC_SetFullScale+0x24>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	dc01      	bgt.n	8003104 <LSM303AGR_ACC_SetFullScale+0x20>
 8003100:	2302      	movs	r3, #2
 8003102:	e004      	b.n	800310e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003104:	2303      	movs	r3, #3
 8003106:	e002      	b.n	800310e <LSM303AGR_ACC_SetFullScale+0x2a>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <LSM303AGR_ACC_SetFullScale+0x2a>
 800310c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800310e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	331c      	adds	r3, #28
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fe77 	bl	8003e0c <lsm303agr_xl_full_scale_set>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	e000      	b.n	800312c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	331c      	adds	r3, #28
 800314a:	f107 020f 	add.w	r2, r7, #15
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fda5 	bl	8003ca0 <lsm303agr_xl_operating_mode_get>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e04a      	b.n	80031f8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00c      	beq.n	8003182 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003168:	2b02      	cmp	r3, #2
 800316a:	dc0e      	bgt.n	800318a <LSM303AGR_ACC_GetAxesRaw+0x56>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003170:	2b01      	cmp	r3, #1
 8003172:	d003      	beq.n	800317c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8003174:	e009      	b.n	800318a <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8003176:	2310      	movs	r3, #16
 8003178:	83fb      	strh	r3, [r7, #30]
      break;
 800317a:	e00a      	b.n	8003192 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800317c:	2340      	movs	r3, #64	; 0x40
 800317e:	83fb      	strh	r3, [r7, #30]
      break;
 8003180:	e007      	b.n	8003192 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8003182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003186:	83fb      	strh	r3, [r7, #30]
      break;
 8003188:	e003      	b.n	8003192 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	61bb      	str	r3, [r7, #24]
      break;
 8003190:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d101      	bne.n	800319e <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	e02c      	b.n	80031f8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	331c      	adds	r3, #28
 80031a2:	f107 0210 	add.w	r2, r7, #16
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 feb3 	bl	8003f14 <lsm303agr_acceleration_raw_get>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e01e      	b.n	80031f8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80031ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031be:	461a      	mov	r2, r3
 80031c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80031ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80031dc:	b21a      	sxth	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80031e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	809a      	strh	r2, [r3, #4]

  return ret;
 80031f6:	69bb      	ldr	r3, [r7, #24]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff8c 	bl	8003134 <LSM303AGR_ACC_GetAxesRaw>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e03c      	b.n	80032a2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fde9 	bl	8002e06 <LSM303AGR_ACC_GetSensitivity>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e030      	b.n	80032a2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003240:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800324c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003258:	ee17 2a90 	vmov	r2, s15
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800326c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003278:	ee17 2a90 	vmov	r2, s15
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003280:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800328c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003298:	ee17 2a90 	vmov	r2, s15
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	70fb      	strb	r3, [r7, #3]
 80032b6:	4613      	mov	r3, r2
 80032b8:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f103 001c 	add.w	r0, r3, #28
 80032c0:	1cba      	adds	r2, r7, #2
 80032c2:	78f9      	ldrb	r1, [r7, #3]
 80032c4:	2301      	movs	r3, #1
 80032c6:	f000 fcd3 	bl	8003c70 <lsm303agr_write_reg>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	e000      	b.n	80032d8 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e04b      	b.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7b1a      	ldrb	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003338:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800333e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e01e      	b.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4798      	blx	r3
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e014      	b.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	331c      	adds	r3, #28
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f000 ff75 	bl	8004272 <lsm303agr_mag_i2c_interface_set>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	e000      	b.n	8003396 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08003b7d 	.word	0x08003b7d
 80033a4:	08003bdf 	.word	0x08003bdf

080033a8 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	331c      	adds	r3, #28
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fe7c 	bl	80040b4 <lsm303agr_mag_block_data_update_set>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e028      	b.n	800341a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	331c      	adds	r3, #28
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fdeb 	bl	8003faa <lsm303agr_mag_operating_mode_set>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e01c      	b.n	800341a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	331c      	adds	r3, #28
 80033e4:	2103      	movs	r1, #3
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fe05 	bl	8003ff6 <lsm303agr_mag_data_rate_set>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	e010      	b.n	800341a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	331c      	adds	r3, #28
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 feeb 	bl	80041da <lsm303agr_mag_self_test_set>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e004      	b.n	800341a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f874 	bl	8003518 <LSM303AGR_MAG_Disable>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e004      	b.n	8003446 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	331c      	adds	r3, #28
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 feaa 	bl	80041b8 <lsm303agr_mag_device_id_get>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	e000      	b.n	8003472 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2232      	movs	r2, #50	; 0x32
 80034ae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80034c4:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	42c80000 	.word	0x42c80000

080034d8 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e010      	b.n	8003510 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	331c      	adds	r3, #28
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd58 	bl	8003faa <lsm303agr_mag_operating_mode_set>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	e004      	b.n	8003510 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e010      	b.n	8003550 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	331c      	adds	r3, #28
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fd38 	bl	8003faa <lsm303agr_mag_operating_mode_set>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	e004      	b.n	8003550 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003568:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	331c      	adds	r3, #28
 800358a:	f107 020b 	add.w	r2, r7, #11
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fd57 	bl	8004044 <lsm303agr_mag_data_rate_get>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	e023      	b.n	80035ea <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80035a2:	7afb      	ldrb	r3, [r7, #11]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d81b      	bhi.n	80035e0 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80035a8:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035c9 	.word	0x080035c9
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035d9 	.word	0x080035d9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80035c4:	601a      	str	r2, [r3, #0]
      break;
 80035c6:	e00f      	b.n	80035e8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80035cc:	601a      	str	r2, [r3, #0]
      break;
 80035ce:	e00b      	b.n	80035e8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80035d4:	601a      	str	r2, [r3, #0]
      break;
 80035d6:	e007      	b.n	80035e8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80035dc:	601a      	str	r2, [r3, #0]
      break;
 80035de:	e003      	b.n	80035e8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	60fb      	str	r3, [r7, #12]
      break;
 80035e6:	bf00      	nop
  }

  return ret;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	41200000 	.word	0x41200000
 80035f8:	41a00000 	.word	0x41a00000
 80035fc:	42480000 	.word	0x42480000
 8003600:	42c80000 	.word	0x42c80000

08003604 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003610:	edd7 7a00 	vldr	s15, [r7]
 8003614:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	d801      	bhi.n	8003626 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003622:	2300      	movs	r3, #0
 8003624:	e016      	b.n	8003654 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003626:	edd7 7a00 	vldr	s15, [r7]
 800362a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d801      	bhi.n	800363c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003638:	2301      	movs	r3, #1
 800363a:	e00b      	b.n	8003654 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800363c:	edd7 7a00 	vldr	s15, [r7]
 8003640:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800367c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	d801      	bhi.n	8003652 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800364e:	2302      	movs	r3, #2
 8003650:	e000      	b.n	8003654 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003652:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003654:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	331c      	adds	r3, #28
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fcc9 	bl	8003ff6 <lsm303agr_mag_data_rate_set>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e000      	b.n	8003672 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	42480000 	.word	0x42480000

08003680 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2232      	movs	r2, #50	; 0x32
 800368e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	331c      	adds	r3, #28
 80036c4:	f107 0208 	add.w	r2, r7, #8
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fd18 	bl	8004100 <lsm303agr_magnetic_raw_get>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e00c      	b.n	80036f6 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80036dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80036e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80036ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	331c      	adds	r3, #28
 800370c:	f107 0210 	add.w	r2, r7, #16
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fcf4 	bl	8004100 <lsm303agr_magnetic_raw_get>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e036      	b.n	8003792 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff14 	bl	8003558 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003730:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003748:	ee17 2a90 	vmov	r2, s15
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003750:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800375c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003768:	ee17 2a90 	vmov	r2, s15
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003788:	ee17 2a90 	vmov	r2, s15
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	331c      	adds	r3, #28
 80037ae:	f107 020b 	add.w	r2, r7, #11
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb4f 	bl	8003e58 <lsm303agr_xl_full_scale_get>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	e023      	b.n	800380e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d81b      	bhi.n	8003804 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037ed 	.word	0x080037ed
 80037dc:	080037f5 	.word	0x080037f5
 80037e0:	080037fd 	.word	0x080037fd
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80037e8:	601a      	str	r2, [r3, #0]
      break;
 80037ea:	e00f      	b.n	800380c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80037f0:	601a      	str	r2, [r3, #0]
      break;
 80037f2:	e00b      	b.n	800380c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80037f8:	601a      	str	r2, [r3, #0]
      break;
 80037fa:	e007      	b.n	800380c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003800:	601a      	str	r2, [r3, #0]
      break;
 8003802:	e003      	b.n	800380c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	60fb      	str	r3, [r7, #12]
      break;
 800380a:	bf00      	nop
  }

  return ret;
 800380c:	68fb      	ldr	r3, [r7, #12]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	3f7ae148 	.word	0x3f7ae148
 800381c:	3ff9999a 	.word	0x3ff9999a
 8003820:	4079999a 	.word	0x4079999a
 8003824:	413b851f 	.word	0x413b851f

08003828 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	331c      	adds	r3, #28
 800383a:	f107 020b 	add.w	r2, r7, #11
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb09 	bl	8003e58 <lsm303agr_xl_full_scale_get>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	e023      	b.n	800389a <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d81b      	bhi.n	8003890 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003871 	.word	0x08003871
 8003864:	08003879 	.word	0x08003879
 8003868:	08003881 	.word	0x08003881
 800386c:	08003889 	.word	0x08003889
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003874:	601a      	str	r2, [r3, #0]
      break;
 8003876:	e00f      	b.n	8003898 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 800387c:	601a      	str	r2, [r3, #0]
      break;
 800387e:	e00b      	b.n	8003898 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003884:	601a      	str	r2, [r3, #0]
      break;
 8003886:	e007      	b.n	8003898 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 800388c:	601a      	str	r2, [r3, #0]
      break;
 800388e:	e003      	b.n	8003898 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
 8003894:	60fb      	str	r3, [r7, #12]
      break;
 8003896:	bf00      	nop
  }

  return ret;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	4079999a 	.word	0x4079999a
 80038a8:	40fa3d71 	.word	0x40fa3d71
 80038ac:	417a147b 	.word	0x417a147b
 80038b0:	423b999a 	.word	0x423b999a

080038b4 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	331c      	adds	r3, #28
 80038c6:	f107 020b 	add.w	r2, r7, #11
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fac3 	bl	8003e58 <lsm303agr_xl_full_scale_get>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e023      	b.n	8003926 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d81b      	bhi.n	800391c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003905 	.word	0x08003905
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003915 	.word	0x08003915
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003900:	601a      	str	r2, [r3, #0]
      break;
 8003902:	e00f      	b.n	8003924 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003908:	601a      	str	r2, [r3, #0]
      break;
 800390a:	e00b      	b.n	8003924 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003910:	601a      	str	r2, [r3, #0]
      break;
 8003912:	e007      	b.n	8003924 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003918:	601a      	str	r2, [r3, #0]
      break;
 800391a:	e003      	b.n	8003924 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	60fb      	str	r3, [r7, #12]
      break;
 8003922:	bf00      	nop
  }

  return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	417a147b 	.word	0x417a147b
 8003934:	41fa147b 	.word	0x41fa147b
 8003938:	427a147b 	.word	0x427a147b
 800393c:	433b947b 	.word	0x433b947b

08003940 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800394c:	edd7 7a00 	vldr	s15, [r7]
 8003950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	d801      	bhi.n	8003962 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800395e:	2301      	movs	r3, #1
 8003960:	e037      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003962:	edd7 7a00 	vldr	s15, [r7]
 8003966:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800396a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003972:	d801      	bhi.n	8003978 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003974:	2302      	movs	r3, #2
 8003976:	e02c      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003978:	edd7 7a00 	vldr	s15, [r7]
 800397c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d801      	bhi.n	800398e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800398a:	2303      	movs	r3, #3
 800398c:	e021      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800398e:	edd7 7a00 	vldr	s15, [r7]
 8003992:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80039f8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	d801      	bhi.n	80039a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80039a0:	2304      	movs	r3, #4
 80039a2:	e016      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80039a4:	edd7 7a00 	vldr	s15, [r7]
 80039a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80039fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80039ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	d801      	bhi.n	80039ba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80039b6:	2305      	movs	r3, #5
 80039b8:	e00b      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80039ba:	edd7 7a00 	vldr	s15, [r7]
 80039be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a00 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80039c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	d801      	bhi.n	80039d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80039cc:	2306      	movs	r3, #6
 80039ce:	e000      	b.n	80039d2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80039d0:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80039d2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	331c      	adds	r3, #28
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f993 	bl	8003d08 <lsm303agr_xl_data_rate_set>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	e000      	b.n	80039f0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	42480000 	.word	0x42480000
 80039fc:	42c80000 	.word	0x42c80000
 8003a00:	43480000 	.word	0x43480000

08003a04 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003a10:	edd7 7a00 	vldr	s15, [r7]
 8003a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	d801      	bhi.n	8003a26 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e037      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a26:	edd7 7a00 	vldr	s15, [r7]
 8003a2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d801      	bhi.n	8003a3c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e02c      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a3c:	edd7 7a00 	vldr	s15, [r7]
 8003a40:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d801      	bhi.n	8003a52 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e021      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a52:	edd7 7a00 	vldr	s15, [r7]
 8003a56:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003aac <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a62:	d801      	bhi.n	8003a68 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e016      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a68:	edd7 7a00 	vldr	s15, [r7]
 8003a6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003ab0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a78:	d801      	bhi.n	8003a7e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e00b      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a7e:	edd7 7a00 	vldr	s15, [r7]
 8003a82:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003ab4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	d801      	bhi.n	8003a94 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003a90:	2306      	movs	r3, #6
 8003a92:	e000      	b.n	8003a96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003a94:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	42480000 	.word	0x42480000
 8003ab0:	42c80000 	.word	0x42c80000
 8003ab4:	43480000 	.word	0x43480000

08003ab8 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	72fb      	strb	r3, [r7, #11]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10e      	bne.n	8003af6 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	695c      	ldr	r4, [r3, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	7b1b      	ldrb	r3, [r3, #12]
 8003ae0:	b298      	uxth	r0, r3
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
 8003ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	b299      	uxth	r1, r3
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	47a0      	blx	r4
 8003af2:	4603      	mov	r3, r0
 8003af4:	e00d      	b.n	8003b12 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	695c      	ldr	r4, [r3, #20]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	7b1b      	ldrb	r3, [r3, #12]
 8003afe:	b298      	uxth	r0, r3
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	b299      	uxth	r1, r3
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	47a0      	blx	r4
 8003b10:	4603      	mov	r3, r0
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd90      	pop	{r4, r7, pc}

08003b1a <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b1a:	b590      	push	{r4, r7, lr}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	461a      	mov	r2, r3
 8003b26:	460b      	mov	r3, r1
 8003b28:	72fb      	strb	r3, [r7, #11]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	691c      	ldr	r4, [r3, #16]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	7b1b      	ldrb	r3, [r3, #12]
 8003b42:	b298      	uxth	r0, r3
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	47a0      	blx	r4
 8003b54:	4603      	mov	r3, r0
 8003b56:	e00d      	b.n	8003b74 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	691c      	ldr	r4, [r3, #16]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	7b1b      	ldrb	r3, [r3, #12]
 8003b60:	b298      	uxth	r0, r3
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b299      	uxth	r1, r3
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	47a0      	blx	r4
 8003b72:	4603      	mov	r3, r0
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}

08003b7c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	72fb      	strb	r3, [r7, #11]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10e      	bne.n	8003bba <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	695c      	ldr	r4, [r3, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	7b1b      	ldrb	r3, [r3, #12]
 8003ba4:	b298      	uxth	r0, r3
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	b299      	uxth	r1, r3
 8003bb0:	893b      	ldrh	r3, [r7, #8]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	47a0      	blx	r4
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e00d      	b.n	8003bd6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	695c      	ldr	r4, [r3, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	7b1b      	ldrb	r3, [r3, #12]
 8003bc2:	b298      	uxth	r0, r3
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	b299      	uxth	r1, r3
 8003bce:	893b      	ldrh	r3, [r7, #8]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	47a0      	blx	r4
 8003bd4:	4603      	mov	r3, r0
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd90      	pop	{r4, r7, pc}

08003bde <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bde:	b590      	push	{r4, r7, lr}
 8003be0:	b087      	sub	sp, #28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	461a      	mov	r2, r3
 8003bea:	460b      	mov	r3, r1
 8003bec:	72fb      	strb	r3, [r7, #11]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	691c      	ldr	r4, [r3, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	7b1b      	ldrb	r3, [r3, #12]
 8003c06:	b298      	uxth	r0, r3
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	b299      	uxth	r1, r3
 8003c12:	893b      	ldrh	r3, [r7, #8]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	47a0      	blx	r4
 8003c18:	4603      	mov	r3, r0
 8003c1a:	e00d      	b.n	8003c38 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	691c      	ldr	r4, [r3, #16]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	7b1b      	ldrb	r3, [r3, #12]
 8003c24:	b298      	uxth	r0, r3
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	47a0      	blx	r4
 8003c36:	4603      	mov	r3, r0
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}

08003c40 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	72fb      	strb	r3, [r7, #11]
 8003c50:	4613      	mov	r3, r2
 8003c52:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685c      	ldr	r4, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6898      	ldr	r0, [r3, #8]
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	7af9      	ldrb	r1, [r7, #11]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	47a0      	blx	r4
 8003c64:	6178      	str	r0, [r7, #20]
  return ret;
 8003c66:	697b      	ldr	r3, [r7, #20]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	72fb      	strb	r3, [r7, #11]
 8003c80:	4613      	mov	r3, r2
 8003c82:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681c      	ldr	r4, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6898      	ldr	r0, [r3, #8]
 8003c8c:	893b      	ldrh	r3, [r7, #8]
 8003c8e:	7af9      	ldrb	r1, [r7, #11]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	47a0      	blx	r4
 8003c94:	6178      	str	r0, [r7, #20]
  return ret;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd90      	pop	{r4, r7, pc}

08003ca0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003caa:	f107 020c 	add.w	r2, r7, #12
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffc4 	bl	8003c40 <lsm303agr_read_reg>
 8003cb8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003cc0:	f107 0210 	add.w	r2, r7, #16
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	2123      	movs	r1, #35	; 0x23
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffb9 	bl	8003c40 <lsm303agr_read_reg>
 8003cce:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003cd0:	7b3b      	ldrb	r3, [r7, #12]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e00c      	b.n	8003cfe <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003ce4:	7c3b      	ldrb	r3, [r7, #16]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003cfe:	697b      	ldr	r3, [r7, #20]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003d14:	f107 0208 	add.w	r2, r7, #8
 8003d18:	2301      	movs	r3, #1
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff8f 	bl	8003c40 <lsm303agr_read_reg>
 8003d22:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	7a3b      	ldrb	r3, [r7, #8]
 8003d34:	f362 1307 	bfi	r3, r2, #4, #4
 8003d38:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003d3a:	f107 0208 	add.w	r2, r7, #8
 8003d3e:	2301      	movs	r3, #1
 8003d40:	2120      	movs	r1, #32
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ff94 	bl	8003c70 <lsm303agr_write_reg>
 8003d48:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003d5e:	f107 0208 	add.w	r2, r7, #8
 8003d62:	2301      	movs	r3, #1
 8003d64:	2120      	movs	r1, #32
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff6a 	bl	8003c40 <lsm303agr_read_reg>
 8003d6c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003d6e:	7a3b      	ldrb	r3, [r7, #8]
 8003d70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d83e      	bhi.n	8003df8 <lsm303agr_xl_data_rate_get+0xa4>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <lsm303agr_xl_data_rate_get+0x2c>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003db9 	.word	0x08003db9
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dd1 	.word	0x08003dd1
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003de1 	.word	0x08003de1
 8003da0:	08003de9 	.word	0x08003de9
 8003da4:	08003df1 	.word	0x08003df1
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
      break;
 8003dae:	e027      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
      break;
 8003db6:	e023      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	e01f      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
      break;
 8003dc6:	e01b      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	701a      	strb	r2, [r3, #0]
      break;
 8003dce:	e017      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2205      	movs	r2, #5
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e013      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2206      	movs	r2, #6
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e00f      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2207      	movs	r2, #7
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	e00b      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2208      	movs	r2, #8
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e007      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2209      	movs	r2, #9
 8003df4:	701a      	strb	r2, [r3, #0]
      break;
 8003df6:	e003      	b.n	8003e00 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
      break;
 8003dfe:	bf00      	nop
  }

  return ret;
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop

08003e0c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e18:	f107 0208 	add.w	r2, r7, #8
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	2123      	movs	r1, #35	; 0x23
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff0d 	bl	8003c40 <lsm303agr_read_reg>
 8003e26:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	7a3b      	ldrb	r3, [r7, #8]
 8003e38:	f362 1305 	bfi	r3, r2, #4, #2
 8003e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e3e:	f107 0208 	add.w	r2, r7, #8
 8003e42:	2301      	movs	r3, #1
 8003e44:	2123      	movs	r1, #35	; 0x23
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff12 	bl	8003c70 <lsm303agr_write_reg>
 8003e4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e62:	f107 0208 	add.w	r2, r7, #8
 8003e66:	2301      	movs	r3, #1
 8003e68:	2123      	movs	r1, #35	; 0x23
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fee8 	bl	8003c40 <lsm303agr_read_reg>
 8003e70:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003e72:	7a3b      	ldrb	r3, [r7, #8]
 8003e74:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d81a      	bhi.n	8003eb4 <lsm303agr_xl_full_scale_get+0x5c>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <lsm303agr_xl_full_scale_get+0x2c>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003e9d 	.word	0x08003e9d
 8003e8c:	08003ea5 	.word	0x08003ea5
 8003e90:	08003ead 	.word	0x08003ead
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
      break;
 8003e9a:	e00f      	b.n	8003ebc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
      break;
 8003ea2:	e00b      	b.n	8003ebc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	e007      	b.n	8003ebc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	701a      	strb	r2, [r3, #0]
      break;
 8003eb2:	e003      	b.n	8003ebc <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
      break;
 8003eba:	bf00      	nop
  }

  return ret;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003ed4:	f107 0208 	add.w	r2, r7, #8
 8003ed8:	2301      	movs	r3, #1
 8003eda:	2123      	movs	r1, #35	; 0x23
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff feaf 	bl	8003c40 <lsm303agr_read_reg>
 8003ee2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	7a3b      	ldrb	r3, [r7, #8]
 8003ef4:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ef8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003efa:	f107 0208 	add.w	r2, r7, #8
 8003efe:	2301      	movs	r3, #1
 8003f00:	2123      	movs	r1, #35	; 0x23
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff feb4 	bl	8003c70 <lsm303agr_write_reg>
 8003f08:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003f1e:	f107 020c 	add.w	r2, r7, #12
 8003f22:	2306      	movs	r3, #6
 8003f24:	2128      	movs	r1, #40	; 0x28
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fe8a 	bl	8003c40 <lsm303agr_read_reg>
 8003f2c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003f2e:	7b7b      	ldrb	r3, [r7, #13]
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	7b3b      	ldrb	r3, [r7, #12]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21a      	sxth	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	3302      	adds	r3, #2
 8003f56:	b212      	sxth	r2, r2
 8003f58:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	3302      	adds	r3, #2
 8003f74:	b212      	sxth	r2, r2
 8003f76:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f78:	7c7a      	ldrb	r2, [r7, #17]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	b212      	sxth	r2, r2
 8003f80:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	7c3b      	ldrb	r3, [r7, #16]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	b212      	sxth	r2, r2
 8003f9e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003fa0:	697b      	ldr	r3, [r7, #20]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003fb6:	f107 0208 	add.w	r2, r7, #8
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2160      	movs	r1, #96	; 0x60
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fe3e 	bl	8003c40 <lsm303agr_read_reg>
 8003fc4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	7a3b      	ldrb	r3, [r7, #8]
 8003fd6:	f362 0301 	bfi	r3, r2, #0, #2
 8003fda:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003fdc:	f107 0208 	add.w	r2, r7, #8
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	2160      	movs	r1, #96	; 0x60
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fe43 	bl	8003c70 <lsm303agr_write_reg>
 8003fea:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004002:	f107 0208 	add.w	r2, r7, #8
 8004006:	2301      	movs	r3, #1
 8004008:	2160      	movs	r1, #96	; 0x60
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe18 	bl	8003c40 <lsm303agr_read_reg>
 8004010:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	7a3b      	ldrb	r3, [r7, #8]
 8004022:	f362 0383 	bfi	r3, r2, #2, #2
 8004026:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004028:	f107 0208 	add.w	r2, r7, #8
 800402c:	2301      	movs	r3, #1
 800402e:	2160      	movs	r1, #96	; 0x60
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe1d 	bl	8003c70 <lsm303agr_write_reg>
 8004036:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800404e:	f107 0208 	add.w	r2, r7, #8
 8004052:	2301      	movs	r3, #1
 8004054:	2160      	movs	r1, #96	; 0x60
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fdf2 	bl	8003c40 <lsm303agr_read_reg>
 800405c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 800405e:	7a3b      	ldrb	r3, [r7, #8]
 8004060:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d81a      	bhi.n	80040a0 <lsm303agr_mag_data_rate_get+0x5c>
 800406a:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <lsm303agr_mag_data_rate_get+0x2c>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004081 	.word	0x08004081
 8004074:	08004089 	.word	0x08004089
 8004078:	08004091 	.word	0x08004091
 800407c:	08004099 	.word	0x08004099
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
      break;
 8004086:	e00f      	b.n	80040a8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	e00b      	b.n	80040a8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2202      	movs	r2, #2
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	e007      	b.n	80040a8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2203      	movs	r2, #3
 800409c:	701a      	strb	r2, [r3, #0]
      break;
 800409e:	e003      	b.n	80040a8 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	bf00      	nop
  }

  return ret;
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop

080040b4 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80040c0:	f107 0208 	add.w	r2, r7, #8
 80040c4:	2301      	movs	r3, #1
 80040c6:	2162      	movs	r1, #98	; 0x62
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fdb9 	bl	8003c40 <lsm303agr_read_reg>
 80040ce:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	7a3b      	ldrb	r3, [r7, #8]
 80040e0:	f362 1304 	bfi	r3, r2, #4, #1
 80040e4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80040e6:	f107 0208 	add.w	r2, r7, #8
 80040ea:	2301      	movs	r3, #1
 80040ec:	2162      	movs	r1, #98	; 0x62
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fdbe 	bl	8003c70 <lsm303agr_write_reg>
 80040f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	2306      	movs	r3, #6
 8004110:	2168      	movs	r1, #104	; 0x68
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fd94 	bl	8003c40 <lsm303agr_read_reg>
 8004118:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800411a:	7b7b      	ldrb	r3, [r7, #13]
 800411c:	b21a      	sxth	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004128:	b29b      	uxth	r3, r3
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	b29a      	uxth	r2, r3
 800412e:	7b3b      	ldrb	r3, [r7, #12]
 8004130:	b29b      	uxth	r3, r3
 8004132:	4413      	add	r3, r2
 8004134:	b29b      	uxth	r3, r3
 8004136:	b21a      	sxth	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	3302      	adds	r3, #2
 8004142:	b212      	sxth	r2, r2
 8004144:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	3302      	adds	r3, #2
 800414a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800414e:	b29b      	uxth	r3, r3
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	b29a      	uxth	r2, r3
 8004154:	7bbb      	ldrb	r3, [r7, #14]
 8004156:	b29b      	uxth	r3, r3
 8004158:	4413      	add	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3302      	adds	r3, #2
 8004160:	b212      	sxth	r2, r2
 8004162:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004164:	7c7a      	ldrb	r2, [r7, #17]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	3304      	adds	r3, #4
 800416a:	b212      	sxth	r2, r2
 800416c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004176:	b29b      	uxth	r3, r3
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	b29a      	uxth	r2, r3
 800417c:	7c3b      	ldrb	r3, [r7, #16]
 800417e:	b29b      	uxth	r3, r3
 8004180:	4413      	add	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	3304      	adds	r3, #4
 8004188:	b212      	sxth	r2, r2
 800418a:	801a      	strh	r2, [r3, #0]
  return ret;
 800418c:	697b      	ldr	r3, [r7, #20]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80041a0:	2301      	movs	r3, #1
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	210f      	movs	r1, #15
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fd4a 	bl	8003c40 <lsm303agr_read_reg>
 80041ac:	60f8      	str	r0, [r7, #12]
  return ret;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80041c2:	2301      	movs	r3, #1
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	214f      	movs	r1, #79	; 0x4f
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fd39 	bl	8003c40 <lsm303agr_read_reg>
 80041ce:	60f8      	str	r0, [r7, #12]
  return ret;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80041e6:	f107 0208 	add.w	r2, r7, #8
 80041ea:	2301      	movs	r3, #1
 80041ec:	2162      	movs	r1, #98	; 0x62
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fd26 	bl	8003c40 <lsm303agr_read_reg>
 80041f4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	b2da      	uxtb	r2, r3
 8004204:	7a3b      	ldrb	r3, [r7, #8]
 8004206:	f362 0341 	bfi	r3, r2, #1, #1
 800420a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	2301      	movs	r3, #1
 8004212:	2162      	movs	r1, #98	; 0x62
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fd2b 	bl	8003c70 <lsm303agr_write_reg>
 800421a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800421c:	68fb      	ldr	r3, [r7, #12]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004232:	f107 0208 	add.w	r2, r7, #8
 8004236:	2301      	movs	r3, #1
 8004238:	212e      	movs	r1, #46	; 0x2e
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fd00 	bl	8003c40 <lsm303agr_read_reg>
 8004240:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	b2da      	uxtb	r2, r3
 8004250:	7a3b      	ldrb	r3, [r7, #8]
 8004252:	f362 1387 	bfi	r3, r2, #6, #2
 8004256:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004258:	f107 0208 	add.w	r2, r7, #8
 800425c:	2301      	movs	r3, #1
 800425e:	212e      	movs	r1, #46	; 0x2e
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fd05 	bl	8003c70 <lsm303agr_write_reg>
 8004266:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004268:	68fb      	ldr	r3, [r7, #12]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	2301      	movs	r3, #1
 8004284:	2162      	movs	r1, #98	; 0x62
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fcda 	bl	8003c40 <lsm303agr_read_reg>
 800428c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	7a3b      	ldrb	r3, [r7, #8]
 800429e:	f362 1345 	bfi	r3, r2, #5, #1
 80042a2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042a4:	f107 0208 	add.w	r2, r7, #8
 80042a8:	2301      	movs	r3, #1
 80042aa:	2162      	movs	r1, #98	; 0x62
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fcdf 	bl	8003c70 <lsm303agr_write_reg>
 80042b2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80042b4:	68fb      	ldr	r3, [r7, #12]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e04d      	b.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	7b1a      	ldrb	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <LSM6DSL_RegisterBusIO+0xc4>)
 8004318:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <LSM6DSL_RegisterBusIO+0xc8>)
 800431e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e020      	b.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4798      	blx	r3
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e016      	b.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d112      	bne.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800435c:	230c      	movs	r3, #12
 800435e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	461a      	mov	r2, r3
 8004364:	2112      	movs	r1, #18
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fd2d 	bl	8004dc6 <LSM6DSL_Write_Reg>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08005235 	.word	0x08005235
 8004388:	0800526b 	.word	0x0800526b

0800438c <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	331c      	adds	r3, #28
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fa59 	bl	8005852 <lsm6dsl_auto_increment_set>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e054      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	331c      	adds	r3, #28
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 f980 	bl	80056b8 <lsm6dsl_block_data_update_set>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e048      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	331c      	adds	r3, #28
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fa67 	bl	800589e <lsm6dsl_fifo_mode_set>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	e03c      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	331c      	adds	r3, #28
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ffe6 	bl	80053bc <lsm6dsl_xl_data_rate_set>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e02c      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	331c      	adds	r3, #28
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ff7c 	bl	8005300 <lsm6dsl_xl_full_scale_set>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e020      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2204      	movs	r2, #4
 8004418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	331c      	adds	r3, #28
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f001 f8c0 	bl	80055a8 <lsm6dsl_gy_data_rate_set>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e010      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	331c      	adds	r3, #28
 8004438:	2106      	movs	r1, #6
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f84c 	bl	80054d8 <lsm6dsl_gy_full_scale_set>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	e004      	b.n	8004456 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f888 	bl	800457c <LSM6DSL_ACC_Disable>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	e015      	b.n	80044a4 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa9a 	bl	80049b2 <LSM6DSL_GYRO_Disable>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	e00c      	b.n	80044a4 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	331c      	adds	r3, #28
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f9b7 	bl	8005830 <lsm6dsl_device_id_get>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e000      	b.n	80044d0 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004500:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <LSM6DSL_GetCapabilities+0x58>)
 8004512:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4a06      	ldr	r2, [pc, #24]	; (8004530 <LSM6DSL_GetCapabilities+0x58>)
 8004518:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	45d02000 	.word	0x45d02000

08004534 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e014      	b.n	8004574 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 021c 	add.w	r2, r3, #28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 ff2f 	bl	80053bc <lsm6dsl_xl_data_rate_set>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	e004      	b.n	8004574 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e01f      	b.n	80045d2 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f103 021c 	add.w	r2, r3, #28
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	332b      	adds	r3, #43	; 0x2b
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 ff32 	bl	8005408 <lsm6dsl_xl_data_rate_get>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	e010      	b.n	80045d2 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	331c      	adds	r3, #28
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ff00 	bl	80053bc <lsm6dsl_xl_data_rate_set>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e004      	b.n	80045d2 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	331c      	adds	r3, #28
 80045ee:	f107 020b 	add.w	r2, r7, #11
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fea9 	bl	800534c <lsm6dsl_xl_full_scale_get>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	e023      	b.n	800464e <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d81b      	bhi.n	8004644 <LSM6DSL_ACC_GetSensitivity+0x68>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	0800463d 	.word	0x0800463d
 800461c:	0800462d 	.word	0x0800462d
 8004620:	08004635 	.word	0x08004635
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004628:	601a      	str	r2, [r3, #0]
      break;
 800462a:	e00f      	b.n	800464c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4a0b      	ldr	r2, [pc, #44]	; (800465c <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004630:	601a      	str	r2, [r3, #0]
      break;
 8004632:	e00b      	b.n	800464c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004638:	601a      	str	r2, [r3, #0]
      break;
 800463a:	e007      	b.n	800464c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004640:	601a      	str	r2, [r3, #0]
      break;
 8004642:	e003      	b.n	800464c <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	60fb      	str	r3, [r7, #12]
      break;
 800464a:	bf00      	nop
  }

  return ret;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	3d79db23 	.word	0x3d79db23
 800465c:	3df9db23 	.word	0x3df9db23
 8004660:	3e79db23 	.word	0x3e79db23
 8004664:	3ef9db23 	.word	0x3ef9db23

08004668 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	331c      	adds	r3, #28
 800467a:	f107 020b 	add.w	r2, r7, #11
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fec1 	bl	8005408 <lsm6dsl_xl_data_rate_get>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
 8004690:	e054      	b.n	800473c <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004692:	7afb      	ldrb	r3, [r7, #11]
 8004694:	2b0b      	cmp	r3, #11
 8004696:	d84c      	bhi.n	8004732 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046d1 	.word	0x080046d1
 80046a4:	080046e3 	.word	0x080046e3
 80046a8:	080046eb 	.word	0x080046eb
 80046ac:	080046f3 	.word	0x080046f3
 80046b0:	080046fb 	.word	0x080046fb
 80046b4:	08004703 	.word	0x08004703
 80046b8:	0800470b 	.word	0x0800470b
 80046bc:	08004713 	.word	0x08004713
 80046c0:	0800471b 	.word	0x0800471b
 80046c4:	08004723 	.word	0x08004723
 80046c8:	0800472b 	.word	0x0800472b
 80046cc:	080046db 	.word	0x080046db
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
      break;
 80046d8:	e02f      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80046de:	601a      	str	r2, [r3, #0]
      break;
 80046e0:	e02b      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80046e6:	601a      	str	r2, [r3, #0]
      break;
 80046e8:	e027      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80046ee:	601a      	str	r2, [r3, #0]
      break;
 80046f0:	e023      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80046f6:	601a      	str	r2, [r3, #0]
      break;
 80046f8:	e01f      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80046fe:	601a      	str	r2, [r3, #0]
      break;
 8004700:	e01b      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004706:	601a      	str	r2, [r3, #0]
      break;
 8004708:	e017      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800470e:	601a      	str	r2, [r3, #0]
      break;
 8004710:	e013      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004716:	601a      	str	r2, [r3, #0]
      break;
 8004718:	e00f      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800471e:	601a      	str	r2, [r3, #0]
      break;
 8004720:	e00b      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	4a10      	ldr	r2, [pc, #64]	; (8004768 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004726:	601a      	str	r2, [r3, #0]
      break;
 8004728:	e007      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4a0f      	ldr	r2, [pc, #60]	; (800476c <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800472e:	601a      	str	r2, [r3, #0]
      break;
 8004730:	e003      	b.n	800473a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	60fb      	str	r3, [r7, #12]
      break;
 8004738:	bf00      	nop
  }

  return ret;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	3fcccccd 	.word	0x3fcccccd
 8004748:	41480000 	.word	0x41480000
 800474c:	41d00000 	.word	0x41d00000
 8004750:	42500000 	.word	0x42500000
 8004754:	42d00000 	.word	0x42d00000
 8004758:	43500000 	.word	0x43500000
 800475c:	43d00000 	.word	0x43d00000
 8004760:	44504000 	.word	0x44504000
 8004764:	44cf8000 	.word	0x44cf8000
 8004768:	45502000 	.word	0x45502000
 800476c:	45d02000 	.word	0x45d02000

08004770 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004782:	2b01      	cmp	r3, #1
 8004784:	d106      	bne.n	8004794 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004786:	ed97 0a00 	vldr	s0, [r7]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fb36 	bl	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004790:	4603      	mov	r3, r0
 8004792:	e005      	b.n	80047a0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004794:	ed97 0a00 	vldr	s0, [r7]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fbbb 	bl	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800479e:	4603      	mov	r3, r0
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	331c      	adds	r3, #28
 80047ba:	f107 020b 	add.w	r2, r7, #11
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fdc3 	bl	800534c <lsm6dsl_xl_full_scale_get>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	e023      	b.n	800481a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d81b      	bhi.n	8004810 <LSM6DSL_ACC_GetFullScale+0x68>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <LSM6DSL_ACC_GetFullScale+0x38>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004809 	.word	0x08004809
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004801 	.word	0x08004801
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2202      	movs	r2, #2
 80047f4:	601a      	str	r2, [r3, #0]
      break;
 80047f6:	e00f      	b.n	8004818 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2204      	movs	r2, #4
 80047fc:	601a      	str	r2, [r3, #0]
      break;
 80047fe:	e00b      	b.n	8004818 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2208      	movs	r2, #8
 8004804:	601a      	str	r2, [r3, #0]
      break;
 8004806:	e007      	b.n	8004818 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2210      	movs	r2, #16
 800480c:	601a      	str	r2, [r3, #0]
      break;
 800480e:	e003      	b.n	8004818 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	60fb      	str	r3, [r7, #12]
      break;
 8004816:	bf00      	nop
  }

  return ret;
 8004818:	68fb      	ldr	r3, [r7, #12]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop

08004824 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	dd0b      	ble.n	800484c <LSM6DSL_ACC_SetFullScale+0x28>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b04      	cmp	r3, #4
 8004838:	dd06      	ble.n	8004848 <LSM6DSL_ACC_SetFullScale+0x24>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	dc01      	bgt.n	8004844 <LSM6DSL_ACC_SetFullScale+0x20>
 8004840:	2303      	movs	r3, #3
 8004842:	e004      	b.n	800484e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004844:	2301      	movs	r3, #1
 8004846:	e002      	b.n	800484e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004848:	2302      	movs	r3, #2
 800484a:	e000      	b.n	800484e <LSM6DSL_ACC_SetFullScale+0x2a>
 800484c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800484e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	331c      	adds	r3, #28
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fd51 	bl	8005300 <lsm6dsl_xl_full_scale_set>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	e000      	b.n	800486c <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	331c      	adds	r3, #28
 8004882:	f107 0208 	add.w	r2, r7, #8
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f000 ff86 	bl	800579a <lsm6dsl_acceleration_raw_get>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004894:	f04f 33ff 	mov.w	r3, #4294967295
 8004898:	e00c      	b.n	80048b4 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800489a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80048a2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80048aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	331c      	adds	r3, #28
 80048d0:	f107 0210 	add.w	r2, r7, #16
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff5f 	bl	800579a <lsm6dsl_acceleration_raw_get>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e03c      	b.n	8004962 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fe74 	bl	80045dc <LSM6DSL_ACC_GetSensitivity>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295
 80048fe:	e030      	b.n	8004962 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004900:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800490c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004918:	ee17 2a90 	vmov	r2, s15
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004920:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800492c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004938:	ee17 2a90 	vmov	r2, s15
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004940:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800494c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004958:	ee17 2a90 	vmov	r2, s15
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e014      	b.n	80049aa <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f103 021c 	add.w	r2, r3, #28
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fe0a 	bl	80055a8 <lsm6dsl_gy_data_rate_set>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e004      	b.n	80049aa <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e01f      	b.n	8004a08 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f103 021c 	add.w	r2, r3, #28
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	332c      	adds	r3, #44	; 0x2c
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 fe0d 	bl	80055f4 <lsm6dsl_gy_data_rate_get>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	e010      	b.n	8004a08 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	331c      	adds	r3, #28
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fddb 	bl	80055a8 <lsm6dsl_gy_data_rate_set>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	e004      	b.n	8004a08 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	331c      	adds	r3, #28
 8004a22:	f107 020b 	add.w	r2, r7, #11
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fd7b 	bl	8005524 <lsm6dsl_gy_full_scale_get>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004a34:	f04f 33ff 	mov.w	r3, #4294967295
 8004a38:	e02d      	b.n	8004a96 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d825      	bhi.n	8004a8c <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a65 	.word	0x08004a65
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a8d 	.word	0x08004a8d
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a8d 	.word	0x08004a8d
 8004a60:	08004a85 	.word	0x08004a85
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004a68:	601a      	str	r2, [r3, #0]
      break;
 8004a6a:	e013      	b.n	8004a94 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004a70:	601a      	str	r2, [r3, #0]
      break;
 8004a72:	e00f      	b.n	8004a94 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004a78:	601a      	str	r2, [r3, #0]
      break;
 8004a7a:	e00b      	b.n	8004a94 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a0b      	ldr	r2, [pc, #44]	; (8004aac <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004a80:	601a      	str	r2, [r3, #0]
      break;
 8004a82:	e007      	b.n	8004a94 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004a88:	601a      	str	r2, [r3, #0]
      break;
 8004a8a:	e003      	b.n	8004a94 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	60fb      	str	r3, [r7, #12]
      break;
 8004a92:	bf00      	nop
  }

  return ret;
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	408c0000 	.word	0x408c0000
 8004aa4:	410c0000 	.word	0x410c0000
 8004aa8:	418c0000 	.word	0x418c0000
 8004aac:	420c0000 	.word	0x420c0000
 8004ab0:	428c0000 	.word	0x428c0000

08004ab4 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	331c      	adds	r3, #28
 8004ac6:	f107 020b 	add.w	r2, r7, #11
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd91 	bl	80055f4 <lsm6dsl_gy_data_rate_get>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e04e      	b.n	8004b7c <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	2b0a      	cmp	r3, #10
 8004ae2:	d846      	bhi.n	8004b72 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b23 	.word	0x08004b23
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b33 	.word	0x08004b33
 8004afc:	08004b3b 	.word	0x08004b3b
 8004b00:	08004b43 	.word	0x08004b43
 8004b04:	08004b4b 	.word	0x08004b4b
 8004b08:	08004b53 	.word	0x08004b53
 8004b0c:	08004b5b 	.word	0x08004b5b
 8004b10:	08004b63 	.word	0x08004b63
 8004b14:	08004b6b 	.word	0x08004b6b
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
      break;
 8004b20:	e02b      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004b26:	601a      	str	r2, [r3, #0]
      break;
 8004b28:	e027      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004b2e:	601a      	str	r2, [r3, #0]
      break;
 8004b30:	e023      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004b36:	601a      	str	r2, [r3, #0]
      break;
 8004b38:	e01f      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004b3e:	601a      	str	r2, [r3, #0]
      break;
 8004b40:	e01b      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004b46:	601a      	str	r2, [r3, #0]
      break;
 8004b48:	e017      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004b4e:	601a      	str	r2, [r3, #0]
      break;
 8004b50:	e013      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004b56:	601a      	str	r2, [r3, #0]
      break;
 8004b58:	e00f      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004b5e:	601a      	str	r2, [r3, #0]
      break;
 8004b60:	e00b      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004b66:	601a      	str	r2, [r3, #0]
      break;
 8004b68:	e007      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004b6e:	601a      	str	r2, [r3, #0]
      break;
 8004b70:	e003      	b.n	8004b7a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	60fb      	str	r3, [r7, #12]
      break;
 8004b78:	bf00      	nop
  }

  return ret;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	41480000 	.word	0x41480000
 8004b88:	41d00000 	.word	0x41d00000
 8004b8c:	42500000 	.word	0x42500000
 8004b90:	42d00000 	.word	0x42d00000
 8004b94:	43500000 	.word	0x43500000
 8004b98:	43d00000 	.word	0x43d00000
 8004b9c:	44504000 	.word	0x44504000
 8004ba0:	44cf8000 	.word	0x44cf8000
 8004ba4:	45502000 	.word	0x45502000
 8004ba8:	45d02000 	.word	0x45d02000

08004bac <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d106      	bne.n	8004bd0 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004bc2:	ed97 0a00 	vldr	s0, [r7]
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa26 	bl	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e005      	b.n	8004bdc <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004bd0:	ed97 0a00 	vldr	s0, [r7]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 faab 	bl	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004bda:	4603      	mov	r3, r0
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	331c      	adds	r3, #28
 8004bf6:	f107 020b 	add.w	r2, r7, #11
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fc91 	bl	8005524 <lsm6dsl_gy_full_scale_get>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	e030      	b.n	8004c70 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
 8004c10:	2b06      	cmp	r3, #6
 8004c12:	d828      	bhi.n	8004c66 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c39 	.word	0x08004c39
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c53 	.word	0x08004c53
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c5d 	.word	0x08004c5d
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	227d      	movs	r2, #125	; 0x7d
 8004c3c:	601a      	str	r2, [r3, #0]
      break;
 8004c3e:	e016      	b.n	8004c6e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	22fa      	movs	r2, #250	; 0xfa
 8004c44:	601a      	str	r2, [r3, #0]
      break;
 8004c46:	e012      	b.n	8004c6e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c4e:	601a      	str	r2, [r3, #0]
      break;
 8004c50:	e00d      	b.n	8004c6e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c58:	601a      	str	r2, [r3, #0]
      break;
 8004c5a:	e008      	b.n	8004c6e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c62:	601a      	str	r2, [r3, #0]
      break;
 8004c64:	e003      	b.n	8004c6e <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	60fb      	str	r3, [r7, #12]
      break;
 8004c6c:	bf00      	nop
  }

  return ret;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b7d      	cmp	r3, #125	; 0x7d
 8004c86:	dd12      	ble.n	8004cae <LSM6DSL_GYRO_SetFullScale+0x36>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2bfa      	cmp	r3, #250	; 0xfa
 8004c8c:	dd0d      	ble.n	8004caa <LSM6DSL_GYRO_SetFullScale+0x32>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c94:	dd07      	ble.n	8004ca6 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c9c:	dc01      	bgt.n	8004ca2 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	e006      	b.n	8004cb0 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e004      	b.n	8004cb0 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e002      	b.n	8004cb0 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004caa:	2300      	movs	r3, #0
 8004cac:	e000      	b.n	8004cb0 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004cae:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004cb0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	331c      	adds	r3, #28
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc0c 	bl	80054d8 <lsm6dsl_gy_full_scale_set>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e000      	b.n	8004cce <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	331c      	adds	r3, #28
 8004ce4:	f107 0208 	add.w	r2, r7, #8
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fd0a 	bl	8005704 <lsm6dsl_angular_rate_raw_get>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e00c      	b.n	8004d16 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cfc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004d04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	331c      	adds	r3, #28
 8004d2c:	f107 0210 	add.w	r2, r7, #16
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fce6 	bl	8005704 <lsm6dsl_angular_rate_raw_get>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e03c      	b.n	8004dbe <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004d44:	f107 030c 	add.w	r3, r7, #12
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fe60 	bl	8004a10 <LSM6DSL_GYRO_GetSensitivity>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	e030      	b.n	8004dbe <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d74:	ee17 2a90 	vmov	r2, s15
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d94:	ee17 2a90 	vmov	r2, s15
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 001c 	add.w	r0, r3, #28
 8004ddc:	1cba      	adds	r2, r7, #2
 8004dde:	78f9      	ldrb	r1, [r7, #3]
 8004de0:	2301      	movs	r3, #1
 8004de2:	f000 fa75 	bl	80052d0 <lsm6dsl_write_reg>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295
 8004df0:	e000      	b.n	8004df4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004e08:	edd7 7a00 	vldr	s15, [r7]
 8004e0c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e18:	d801      	bhi.n	8004e1e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e058      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e1e:	edd7 7a00 	vldr	s15, [r7]
 8004e22:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	d801      	bhi.n	8004e34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e04d      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e34:	edd7 7a00 	vldr	s15, [r7]
 8004e38:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ef8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	d801      	bhi.n	8004e4a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004e46:	2303      	movs	r3, #3
 8004e48:	e042      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e4a:	edd7 7a00 	vldr	s15, [r7]
 8004e4e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004efc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	d801      	bhi.n	8004e60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	e037      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e60:	edd7 7a00 	vldr	s15, [r7]
 8004e64:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f00 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e70:	d801      	bhi.n	8004e76 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e02c      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e76:	edd7 7a00 	vldr	s15, [r7]
 8004e7a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f04 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	d801      	bhi.n	8004e8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004e88:	2306      	movs	r3, #6
 8004e8a:	e021      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e8c:	edd7 7a00 	vldr	s15, [r7]
 8004e90:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9c:	d801      	bhi.n	8004ea2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004e9e:	2307      	movs	r3, #7
 8004ea0:	e016      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ea2:	edd7 7a00 	vldr	s15, [r7]
 8004ea6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	d801      	bhi.n	8004eb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	e00b      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004eb8:	edd7 7a00 	vldr	s15, [r7]
 8004ebc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	d801      	bhi.n	8004ece <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004eca:	2309      	movs	r3, #9
 8004ecc:	e000      	b.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ece:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004ed0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	331c      	adds	r3, #28
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa6e 	bl	80053bc <lsm6dsl_xl_data_rate_set>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	e000      	b.n	8004eee <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	42500000 	.word	0x42500000
 8004efc:	42d00000 	.word	0x42d00000
 8004f00:	43500000 	.word	0x43500000
 8004f04:	43d00000 	.word	0x43d00000
 8004f08:	44504000 	.word	0x44504000
 8004f0c:	44cf8000 	.word	0x44cf8000
 8004f10:	45502000 	.word	0x45502000

08004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004f20:	edd7 7a00 	vldr	s15, [r7]
 8004f24:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f30:	d801      	bhi.n	8004f36 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e058      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f36:	edd7 7a00 	vldr	s15, [r7]
 8004f3a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	d801      	bhi.n	8004f4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e04d      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f4c:	edd7 7a00 	vldr	s15, [r7]
 8004f50:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004ffc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	d801      	bhi.n	8004f62 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e042      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f62:	edd7 7a00 	vldr	s15, [r7]
 8004f66:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	d801      	bhi.n	8004f78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004f74:	2304      	movs	r3, #4
 8004f76:	e037      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f78:	edd7 7a00 	vldr	s15, [r7]
 8004f7c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005004 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	d801      	bhi.n	8004f8e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004f8a:	2305      	movs	r3, #5
 8004f8c:	e02c      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f8e:	edd7 7a00 	vldr	s15, [r7]
 8004f92:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005008 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	d801      	bhi.n	8004fa4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	e021      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fa4:	edd7 7a00 	vldr	s15, [r7]
 8004fa8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800500c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	d801      	bhi.n	8004fba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	e016      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fba:	edd7 7a00 	vldr	s15, [r7]
 8004fbe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005010 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	d801      	bhi.n	8004fd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	e00b      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fd0:	edd7 7a00 	vldr	s15, [r7]
 8004fd4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005014 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe0:	d801      	bhi.n	8004fe6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e000      	b.n	8004fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fe6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	42500000 	.word	0x42500000
 8005000:	42d00000 	.word	0x42d00000
 8005004:	43500000 	.word	0x43500000
 8005008:	43d00000 	.word	0x43d00000
 800500c:	44504000 	.word	0x44504000
 8005010:	44cf8000 	.word	0x44cf8000
 8005014:	45502000 	.word	0x45502000

08005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005024:	edd7 7a00 	vldr	s15, [r7]
 8005028:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800502c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	d801      	bhi.n	800503a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005036:	2301      	movs	r3, #1
 8005038:	e058      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800503a:	edd7 7a00 	vldr	s15, [r7]
 800503e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	d801      	bhi.n	8005050 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800504c:	2302      	movs	r3, #2
 800504e:	e04d      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005050:	edd7 7a00 	vldr	s15, [r7]
 8005054:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005114 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d801      	bhi.n	8005066 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005062:	2303      	movs	r3, #3
 8005064:	e042      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005066:	edd7 7a00 	vldr	s15, [r7]
 800506a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005118 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800506e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	d801      	bhi.n	800507c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005078:	2304      	movs	r3, #4
 800507a:	e037      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800507c:	edd7 7a00 	vldr	s15, [r7]
 8005080:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800511c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d801      	bhi.n	8005092 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800508e:	2305      	movs	r3, #5
 8005090:	e02c      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005092:	edd7 7a00 	vldr	s15, [r7]
 8005096:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005120 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800509a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d801      	bhi.n	80050a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80050a4:	2306      	movs	r3, #6
 80050a6:	e021      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050a8:	edd7 7a00 	vldr	s15, [r7]
 80050ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005124 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80050b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d801      	bhi.n	80050be <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80050ba:	2307      	movs	r3, #7
 80050bc:	e016      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050be:	edd7 7a00 	vldr	s15, [r7]
 80050c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005128 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80050c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	d801      	bhi.n	80050d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80050d0:	2308      	movs	r3, #8
 80050d2:	e00b      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050d4:	edd7 7a00 	vldr	s15, [r7]
 80050d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800512c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80050dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	d801      	bhi.n	80050ea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80050e6:	2309      	movs	r3, #9
 80050e8:	e000      	b.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050ea:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80050ec:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	331c      	adds	r3, #28
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fa56 	bl	80055a8 <lsm6dsl_gy_data_rate_set>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	e000      	b.n	800510a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	42500000 	.word	0x42500000
 8005118:	42d00000 	.word	0x42d00000
 800511c:	43500000 	.word	0x43500000
 8005120:	43d00000 	.word	0x43d00000
 8005124:	44504000 	.word	0x44504000
 8005128:	44cf8000 	.word	0x44cf8000
 800512c:	45502000 	.word	0x45502000

08005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800513c:	edd7 7a00 	vldr	s15, [r7]
 8005140:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	d801      	bhi.n	8005152 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800514e:	2301      	movs	r3, #1
 8005150:	e058      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005152:	edd7 7a00 	vldr	s15, [r7]
 8005156:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800515a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	d801      	bhi.n	8005168 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005164:	2302      	movs	r3, #2
 8005166:	e04d      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005168:	edd7 7a00 	vldr	s15, [r7]
 800516c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005218 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	d801      	bhi.n	800517e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800517a:	2303      	movs	r3, #3
 800517c:	e042      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800517e:	edd7 7a00 	vldr	s15, [r7]
 8005182:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800521c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d801      	bhi.n	8005194 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005190:	2304      	movs	r3, #4
 8005192:	e037      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005194:	edd7 7a00 	vldr	s15, [r7]
 8005198:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005220 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800519c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	d801      	bhi.n	80051aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80051a6:	2305      	movs	r3, #5
 80051a8:	e02c      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051aa:	edd7 7a00 	vldr	s15, [r7]
 80051ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005224 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80051b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	d801      	bhi.n	80051c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80051bc:	2306      	movs	r3, #6
 80051be:	e021      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051c0:	edd7 7a00 	vldr	s15, [r7]
 80051c4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80051c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	d801      	bhi.n	80051d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80051d2:	2307      	movs	r3, #7
 80051d4:	e016      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051d6:	edd7 7a00 	vldr	s15, [r7]
 80051da:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800522c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80051de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e6:	d801      	bhi.n	80051ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80051e8:	2308      	movs	r3, #8
 80051ea:	e00b      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051ec:	edd7 7a00 	vldr	s15, [r7]
 80051f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005230 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80051f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fc:	d801      	bhi.n	8005202 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80051fe:	2309      	movs	r3, #9
 8005200:	e000      	b.n	8005204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005202:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	42500000 	.word	0x42500000
 800521c:	42d00000 	.word	0x42d00000
 8005220:	43500000 	.word	0x43500000
 8005224:	43d00000 	.word	0x43d00000
 8005228:	44504000 	.word	0x44504000
 800522c:	44cf8000 	.word	0x44cf8000
 8005230:	45502000 	.word	0x45502000

08005234 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	461a      	mov	r2, r3
 8005240:	460b      	mov	r3, r1
 8005242:	72fb      	strb	r3, [r7, #11]
 8005244:	4613      	mov	r3, r2
 8005246:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	695c      	ldr	r4, [r3, #20]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	7b1b      	ldrb	r3, [r3, #12]
 8005254:	b298      	uxth	r0, r3
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	b299      	uxth	r1, r3
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	47a0      	blx	r4
 8005260:	4603      	mov	r3, r0
}
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}

0800526a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800526a:	b590      	push	{r4, r7, lr}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	461a      	mov	r2, r3
 8005276:	460b      	mov	r3, r1
 8005278:	72fb      	strb	r3, [r7, #11]
 800527a:	4613      	mov	r3, r2
 800527c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	691c      	ldr	r4, [r3, #16]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	7b1b      	ldrb	r3, [r3, #12]
 800528a:	b298      	uxth	r0, r3
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	b299      	uxth	r1, r3
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	47a0      	blx	r4
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}

080052a0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	460b      	mov	r3, r1
 80052ae:	72fb      	strb	r3, [r7, #11]
 80052b0:	4613      	mov	r3, r2
 80052b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685c      	ldr	r4, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6898      	ldr	r0, [r3, #8]
 80052bc:	893b      	ldrh	r3, [r7, #8]
 80052be:	7af9      	ldrb	r1, [r7, #11]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	47a0      	blx	r4
 80052c4:	6178      	str	r0, [r7, #20]
  return ret;
 80052c6:	697b      	ldr	r3, [r7, #20]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd90      	pop	{r4, r7, pc}

080052d0 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	461a      	mov	r2, r3
 80052dc:	460b      	mov	r3, r1
 80052de:	72fb      	strb	r3, [r7, #11]
 80052e0:	4613      	mov	r3, r2
 80052e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681c      	ldr	r4, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6898      	ldr	r0, [r3, #8]
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	7af9      	ldrb	r1, [r7, #11]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	47a0      	blx	r4
 80052f4:	6178      	str	r0, [r7, #20]
  return ret;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800530c:	f107 0208 	add.w	r2, r7, #8
 8005310:	2301      	movs	r3, #1
 8005312:	2110      	movs	r1, #16
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ffc3 	bl	80052a0 <lsm6dsl_read_reg>
 800531a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	b2da      	uxtb	r2, r3
 800532a:	7a3b      	ldrb	r3, [r7, #8]
 800532c:	f362 0383 	bfi	r3, r2, #2, #2
 8005330:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005332:	f107 0208 	add.w	r2, r7, #8
 8005336:	2301      	movs	r3, #1
 8005338:	2110      	movs	r1, #16
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ffc8 	bl	80052d0 <lsm6dsl_write_reg>
 8005340:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005356:	f107 0208 	add.w	r2, r7, #8
 800535a:	2301      	movs	r3, #1
 800535c:	2110      	movs	r1, #16
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ff9e 	bl	80052a0 <lsm6dsl_read_reg>
 8005364:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8005366:	7a3b      	ldrb	r3, [r7, #8]
 8005368:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d81a      	bhi.n	80053a8 <lsm6dsl_xl_full_scale_get+0x5c>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005389 	.word	0x08005389
 800537c:	08005391 	.word	0x08005391
 8005380:	08005399 	.word	0x08005399
 8005384:	080053a1 	.word	0x080053a1
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
      break;
 800538e:	e00f      	b.n	80053b0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
      break;
 8005396:	e00b      	b.n	80053b0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2202      	movs	r2, #2
 800539c:	701a      	strb	r2, [r3, #0]
      break;
 800539e:	e007      	b.n	80053b0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2203      	movs	r2, #3
 80053a4:	701a      	strb	r2, [r3, #0]
      break;
 80053a6:	e003      	b.n	80053b0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2204      	movs	r2, #4
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	bf00      	nop
  }

  return ret;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80053c8:	f107 0208 	add.w	r2, r7, #8
 80053cc:	2301      	movs	r3, #1
 80053ce:	2110      	movs	r1, #16
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff65 	bl	80052a0 <lsm6dsl_read_reg>
 80053d6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	7a3b      	ldrb	r3, [r7, #8]
 80053e8:	f362 1307 	bfi	r3, r2, #4, #4
 80053ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80053ee:	f107 0208 	add.w	r2, r7, #8
 80053f2:	2301      	movs	r3, #1
 80053f4:	2110      	movs	r1, #16
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff6a 	bl	80052d0 <lsm6dsl_write_reg>
 80053fc:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005412:	f107 0208 	add.w	r2, r7, #8
 8005416:	2301      	movs	r3, #1
 8005418:	2110      	movs	r1, #16
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff40 	bl	80052a0 <lsm6dsl_read_reg>
 8005420:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8005422:	7a3b      	ldrb	r3, [r7, #8]
 8005424:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b0b      	cmp	r3, #11
 800542c:	d84a      	bhi.n	80054c4 <lsm6dsl_xl_data_rate_get+0xbc>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <lsm6dsl_xl_data_rate_get+0x2c>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005465 	.word	0x08005465
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005475 	.word	0x08005475
 8005440:	0800547d 	.word	0x0800547d
 8005444:	08005485 	.word	0x08005485
 8005448:	0800548d 	.word	0x0800548d
 800544c:	08005495 	.word	0x08005495
 8005450:	0800549d 	.word	0x0800549d
 8005454:	080054a5 	.word	0x080054a5
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054bd 	.word	0x080054bd
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
      break;
 800546a:	e02f      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
      break;
 8005472:	e02b      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2202      	movs	r2, #2
 8005478:	701a      	strb	r2, [r3, #0]
      break;
 800547a:	e027      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2203      	movs	r2, #3
 8005480:	701a      	strb	r2, [r3, #0]
      break;
 8005482:	e023      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2204      	movs	r2, #4
 8005488:	701a      	strb	r2, [r3, #0]
      break;
 800548a:	e01f      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2205      	movs	r2, #5
 8005490:	701a      	strb	r2, [r3, #0]
      break;
 8005492:	e01b      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2206      	movs	r2, #6
 8005498:	701a      	strb	r2, [r3, #0]
      break;
 800549a:	e017      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2207      	movs	r2, #7
 80054a0:	701a      	strb	r2, [r3, #0]
      break;
 80054a2:	e013      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2208      	movs	r2, #8
 80054a8:	701a      	strb	r2, [r3, #0]
      break;
 80054aa:	e00f      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2209      	movs	r2, #9
 80054b0:	701a      	strb	r2, [r3, #0]
      break;
 80054b2:	e00b      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	220a      	movs	r2, #10
 80054b8:	701a      	strb	r2, [r3, #0]
      break;
 80054ba:	e007      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	220b      	movs	r2, #11
 80054c0:	701a      	strb	r2, [r3, #0]
      break;
 80054c2:	e003      	b.n	80054cc <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	220c      	movs	r2, #12
 80054c8:	701a      	strb	r2, [r3, #0]
      break;
 80054ca:	bf00      	nop
  }

  return ret;
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop

080054d8 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80054e4:	f107 0208 	add.w	r2, r7, #8
 80054e8:	2301      	movs	r3, #1
 80054ea:	2111      	movs	r1, #17
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff fed7 	bl	80052a0 <lsm6dsl_read_reg>
 80054f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	b2da      	uxtb	r2, r3
 8005502:	7a3b      	ldrb	r3, [r7, #8]
 8005504:	f362 0343 	bfi	r3, r2, #1, #3
 8005508:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800550a:	f107 0208 	add.w	r2, r7, #8
 800550e:	2301      	movs	r3, #1
 8005510:	2111      	movs	r1, #17
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fedc 	bl	80052d0 <lsm6dsl_write_reg>
 8005518:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800552e:	f107 0208 	add.w	r2, r7, #8
 8005532:	2301      	movs	r3, #1
 8005534:	2111      	movs	r1, #17
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff feb2 	bl	80052a0 <lsm6dsl_read_reg>
 800553c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800553e:	7a3b      	ldrb	r3, [r7, #8]
 8005540:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b06      	cmp	r3, #6
 8005548:	d824      	bhi.n	8005594 <lsm6dsl_gy_full_scale_get+0x70>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <lsm6dsl_gy_full_scale_get+0x2c>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	0800556d 	.word	0x0800556d
 8005554:	08005575 	.word	0x08005575
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005595 	.word	0x08005595
 8005560:	08005585 	.word	0x08005585
 8005564:	08005595 	.word	0x08005595
 8005568:	0800558d 	.word	0x0800558d
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
      break;
 8005572:	e013      	b.n	800559c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
      break;
 800557a:	e00f      	b.n	800559c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2202      	movs	r2, #2
 8005580:	701a      	strb	r2, [r3, #0]
      break;
 8005582:	e00b      	b.n	800559c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	701a      	strb	r2, [r3, #0]
      break;
 800558a:	e007      	b.n	800559c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2206      	movs	r2, #6
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e003      	b.n	800559c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2207      	movs	r2, #7
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	bf00      	nop
  }

  return ret;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80055b4:	f107 0208 	add.w	r2, r7, #8
 80055b8:	2301      	movs	r3, #1
 80055ba:	2111      	movs	r1, #17
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff fe6f 	bl	80052a0 <lsm6dsl_read_reg>
 80055c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	7a3b      	ldrb	r3, [r7, #8]
 80055d4:	f362 1307 	bfi	r3, r2, #4, #4
 80055d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80055da:	f107 0208 	add.w	r2, r7, #8
 80055de:	2301      	movs	r3, #1
 80055e0:	2111      	movs	r1, #17
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fe74 	bl	80052d0 <lsm6dsl_write_reg>
 80055e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80055fe:	f107 0208 	add.w	r2, r7, #8
 8005602:	2301      	movs	r3, #1
 8005604:	2111      	movs	r1, #17
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fe4a 	bl	80052a0 <lsm6dsl_read_reg>
 800560c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800560e:	7a3b      	ldrb	r3, [r7, #8]
 8005610:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b0a      	cmp	r3, #10
 8005618:	d844      	bhi.n	80056a4 <lsm6dsl_gy_data_rate_get+0xb0>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <lsm6dsl_gy_data_rate_get+0x2c>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	0800564d 	.word	0x0800564d
 8005624:	08005655 	.word	0x08005655
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005665 	.word	0x08005665
 8005630:	0800566d 	.word	0x0800566d
 8005634:	08005675 	.word	0x08005675
 8005638:	0800567d 	.word	0x0800567d
 800563c:	08005685 	.word	0x08005685
 8005640:	0800568d 	.word	0x0800568d
 8005644:	08005695 	.word	0x08005695
 8005648:	0800569d 	.word	0x0800569d
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
      break;
 8005652:	e02b      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
      break;
 800565a:	e027      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2202      	movs	r2, #2
 8005660:	701a      	strb	r2, [r3, #0]
      break;
 8005662:	e023      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2203      	movs	r2, #3
 8005668:	701a      	strb	r2, [r3, #0]
      break;
 800566a:	e01f      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2204      	movs	r2, #4
 8005670:	701a      	strb	r2, [r3, #0]
      break;
 8005672:	e01b      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2205      	movs	r2, #5
 8005678:	701a      	strb	r2, [r3, #0]
      break;
 800567a:	e017      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2206      	movs	r2, #6
 8005680:	701a      	strb	r2, [r3, #0]
      break;
 8005682:	e013      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2207      	movs	r2, #7
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	e00f      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	e00b      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2209      	movs	r2, #9
 8005698:	701a      	strb	r2, [r3, #0]
      break;
 800569a:	e007      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	220a      	movs	r2, #10
 80056a0:	701a      	strb	r2, [r3, #0]
      break;
 80056a2:	e003      	b.n	80056ac <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	220b      	movs	r2, #11
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	bf00      	nop
  }

  return ret;
 80056ac:	68fb      	ldr	r3, [r7, #12]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056c4:	f107 0208 	add.w	r2, r7, #8
 80056c8:	2301      	movs	r3, #1
 80056ca:	2112      	movs	r1, #18
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff fde7 	bl	80052a0 <lsm6dsl_read_reg>
 80056d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	7a3b      	ldrb	r3, [r7, #8]
 80056e4:	f362 1386 	bfi	r3, r2, #6, #1
 80056e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056ea:	f107 0208 	add.w	r2, r7, #8
 80056ee:	2301      	movs	r3, #1
 80056f0:	2112      	movs	r1, #18
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fdec 	bl	80052d0 <lsm6dsl_write_reg>
 80056f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800570e:	f107 020c 	add.w	r2, r7, #12
 8005712:	2306      	movs	r3, #6
 8005714:	2122      	movs	r1, #34	; 0x22
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fdc2 	bl	80052a0 <lsm6dsl_read_reg>
 800571c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800571e:	7b7b      	ldrb	r3, [r7, #13]
 8005720:	b21a      	sxth	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800572c:	b29b      	uxth	r3, r3
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	b29a      	uxth	r2, r3
 8005732:	7b3b      	ldrb	r3, [r7, #12]
 8005734:	b29b      	uxth	r3, r3
 8005736:	4413      	add	r3, r2
 8005738:	b29b      	uxth	r3, r3
 800573a:	b21a      	sxth	r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	3302      	adds	r3, #2
 8005746:	b212      	sxth	r2, r2
 8005748:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3302      	adds	r3, #2
 800574e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005752:	b29b      	uxth	r3, r3
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	b29a      	uxth	r2, r3
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	b29b      	uxth	r3, r3
 800575c:	4413      	add	r3, r2
 800575e:	b29a      	uxth	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	3302      	adds	r3, #2
 8005764:	b212      	sxth	r2, r2
 8005766:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005768:	7c7a      	ldrb	r2, [r7, #17]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	3304      	adds	r3, #4
 800576e:	b212      	sxth	r2, r2
 8005770:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800577a:	b29b      	uxth	r3, r3
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	b29a      	uxth	r2, r3
 8005780:	7c3b      	ldrb	r3, [r7, #16]
 8005782:	b29b      	uxth	r3, r3
 8005784:	4413      	add	r3, r2
 8005786:	b29a      	uxth	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	b212      	sxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]
  return ret;
 8005790:	697b      	ldr	r3, [r7, #20]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80057a4:	f107 020c 	add.w	r2, r7, #12
 80057a8:	2306      	movs	r3, #6
 80057aa:	2128      	movs	r1, #40	; 0x28
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fd77 	bl	80052a0 <lsm6dsl_read_reg>
 80057b2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80057b4:	7b7b      	ldrb	r3, [r7, #13]
 80057b6:	b21a      	sxth	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	7b3b      	ldrb	r3, [r7, #12]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	3302      	adds	r3, #2
 80057dc:	b212      	sxth	r2, r2
 80057de:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	3302      	adds	r3, #2
 80057e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	3302      	adds	r3, #2
 80057fa:	b212      	sxth	r2, r2
 80057fc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80057fe:	7c7a      	ldrb	r2, [r7, #17]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	b212      	sxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	3304      	adds	r3, #4
 800580c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005810:	b29b      	uxth	r3, r3
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	b29a      	uxth	r2, r3
 8005816:	7c3b      	ldrb	r3, [r7, #16]
 8005818:	b29b      	uxth	r3, r3
 800581a:	4413      	add	r3, r2
 800581c:	b29a      	uxth	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	3304      	adds	r3, #4
 8005822:	b212      	sxth	r2, r2
 8005824:	801a      	strh	r2, [r3, #0]
  return ret;
 8005826:	697b      	ldr	r3, [r7, #20]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800583a:	2301      	movs	r3, #1
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	210f      	movs	r1, #15
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fd2d 	bl	80052a0 <lsm6dsl_read_reg>
 8005846:	60f8      	str	r0, [r7, #12]
  return ret;
 8005848:	68fb      	ldr	r3, [r7, #12]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800585e:	f107 0208 	add.w	r2, r7, #8
 8005862:	2301      	movs	r3, #1
 8005864:	2112      	movs	r1, #18
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fd1a 	bl	80052a0 <lsm6dsl_read_reg>
 800586c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10f      	bne.n	8005894 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	b2da      	uxtb	r2, r3
 800587c:	7a3b      	ldrb	r3, [r7, #8]
 800587e:	f362 0382 	bfi	r3, r2, #2, #1
 8005882:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005884:	f107 0208 	add.w	r2, r7, #8
 8005888:	2301      	movs	r3, #1
 800588a:	2112      	movs	r1, #18
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fd1f 	bl	80052d0 <lsm6dsl_write_reg>
 8005892:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80058aa:	f107 0208 	add.w	r2, r7, #8
 80058ae:	2301      	movs	r3, #1
 80058b0:	210a      	movs	r1, #10
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fcf4 	bl	80052a0 <lsm6dsl_read_reg>
 80058b8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10f      	bne.n	80058e0 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	7a3b      	ldrb	r3, [r7, #8]
 80058ca:	f362 0302 	bfi	r3, r2, #0, #3
 80058ce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	2301      	movs	r3, #1
 80058d6:	210a      	movs	r1, #10
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fcf9 	bl	80052d0 <lsm6dsl_write_reg>
 80058de:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80058e0:	68fb      	ldr	r3, [r7, #12]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80058fa:	2301      	movs	r3, #1
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d06e      	beq.n	80059e6 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b02      	cmp	r3, #2
 800590c:	f200 809d 	bhi.w	8005a4a <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d032      	beq.n	8005982 <IKS01A2_MOTION_SENSOR_Init+0x96>
 800591c:	e095      	b.n	8005a4a <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800591e:	6838      	ldr	r0, [r7, #0]
 8005920:	f000 fa32 	bl	8005d88 <LSM6DSL_0_Probe>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
 800592e:	e0cc      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005930:	4a68      	ldr	r2, [pc, #416]	; (8005ad4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4967      	ldr	r1, [pc, #412]	; (8005ad8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005942:	f107 010c 	add.w	r1, r7, #12
 8005946:	4610      	mov	r0, r2
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005950:	f06f 0306 	mvn.w	r3, #6
 8005954:	e0b9      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005956:	7b3b      	ldrb	r3, [r7, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d103      	bne.n	8005964 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005964:	7b7b      	ldrb	r3, [r7, #13]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d103      	bne.n	8005972 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d16c      	bne.n	8005a52 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	f043 0304 	orr.w	r3, r3, #4
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005980:	e067      	b.n	8005a52 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005982:	6838      	ldr	r0, [r7, #0]
 8005984:	f000 fabc 	bl	8005f00 <LSM303AGR_ACC_0_Probe>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	e09a      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005994:	4a4f      	ldr	r2, [pc, #316]	; (8005ad4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	494e      	ldr	r1, [pc, #312]	; (8005ad8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059a6:	f107 010c 	add.w	r1, r7, #12
 80059aa:	4610      	mov	r0, r2
 80059ac:	4798      	blx	r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059b4:	f06f 0306 	mvn.w	r3, #6
 80059b8:	e087      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059ba:	7b3b      	ldrb	r3, [r7, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d103      	bne.n	80059c8 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059c8:	7b7b      	ldrb	r3, [r7, #13]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d103      	bne.n	80059d6 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d13c      	bne.n	8005a56 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059e4:	e037      	b.n	8005a56 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80059e6:	6838      	ldr	r0, [r7, #0]
 80059e8:	f000 fb2e 	bl	8006048 <LSM303AGR_MAG_0_Probe>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	e068      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80059f8:	4a36      	ldr	r2, [pc, #216]	; (8005ad4 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4935      	ldr	r1, [pc, #212]	; (8005ad8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a0a:	f107 010c 	add.w	r1, r7, #12
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a18:	f06f 0306 	mvn.w	r3, #6
 8005a1c:	e055      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a1e:	7b3b      	ldrb	r3, [r7, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d103      	bne.n	8005a2c <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f043 0302 	orr.w	r3, r3, #2
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a2c:	7b7b      	ldrb	r3, [r7, #13]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d103      	bne.n	8005a3a <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10c      	bne.n	8005a5a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	f043 0304 	orr.w	r3, r3, #4
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a48:	e007      	b.n	8005a5a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005a4a:	f06f 0301 	mvn.w	r3, #1
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005a50:	e004      	b.n	8005a5c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a5a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	e031      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6a:	e02a      	b.n	8005ac2 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	4013      	ands	r3, r2
 8005a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11e      	bne.n	8005ab6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d118      	bne.n	8005ab6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a8c:	4814      	ldr	r0, [pc, #80]	; (8005ae0 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	440b      	add	r3, r1
 8005a98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	490e      	ldr	r1, [pc, #56]	; (8005ad8 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4798      	blx	r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005ab0:	f06f 0304 	mvn.w	r3, #4
 8005ab4:	e009      	b.n	8005aca <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	3301      	adds	r3, #1
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d9d1      	bls.n	8005a6c <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3738      	adds	r7, #56	; 0x38
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20001110 	.word	0x20001110
 8005ad8:	200014f4 	.word	0x200014f4
 8005adc:	200000d0 	.word	0x200000d0
 8005ae0:	200010ec 	.word	0x200010ec

08005ae4 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d903      	bls.n	8005afc <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005af4:	f06f 0301 	mvn.w	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e028      	b.n	8005b4e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4013      	ands	r3, r2
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d11c      	bne.n	8005b48 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b16:	4812      	ldr	r0, [pc, #72]	; (8005b60 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	4413      	add	r3, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	490e      	ldr	r1, [pc, #56]	; (8005b64 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b3a:	f06f 0304 	mvn.w	r3, #4
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e005      	b.n	8005b4e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	e002      	b.n	8005b4e <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b48:	f06f 0301 	mvn.w	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2000111c 	.word	0x2000111c
 8005b5c:	200000d0 	.word	0x200000d0
 8005b60:	200010ec 	.word	0x200010ec
 8005b64:	200014f4 	.word	0x200014f4

08005b68 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d903      	bls.n	8005b80 <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b78:	f06f 0301 	mvn.w	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e028      	b.n	8005bd2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005b80:	4a16      	ldr	r2, [pc, #88]	; (8005bdc <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d11c      	bne.n	8005bcc <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b9a:	4812      	ldr	r0, [pc, #72]	; (8005be4 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	490e      	ldr	r1, [pc, #56]	; (8005be8 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bbe:	f06f 0304 	mvn.w	r3, #4
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e005      	b.n	8005bd2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e002      	b.n	8005bd2 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005bcc:	f06f 0301 	mvn.w	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	2000111c 	.word	0x2000111c
 8005be0:	200000d0 	.word	0x200000d0
 8005be4:	200010ec 	.word	0x200010ec
 8005be8:	200014f4 	.word	0x200014f4

08005bec <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d903      	bls.n	8005c06 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bfe:	f06f 0301 	mvn.w	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e029      	b.n	8005c5a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4013      	ands	r3, r2
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d11d      	bne.n	8005c54 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c20:	4812      	ldr	r0, [pc, #72]	; (8005c6c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	490f      	ldr	r1, [pc, #60]	; (8005c70 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c46:	f06f 0304 	mvn.w	r3, #4
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e005      	b.n	8005c5a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e002      	b.n	8005c5a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c54:	f06f 0301 	mvn.w	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c5a:	697b      	ldr	r3, [r7, #20]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	2000111c 	.word	0x2000111c
 8005c68:	200000d0 	.word	0x200000d0
 8005c6c:	200010ec 	.word	0x200010ec
 8005c70:	200014f4 	.word	0x200014f4

08005c74 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d903      	bls.n	8005c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c88:	f06f 0301 	mvn.w	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e02a      	b.n	8005ce6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d11e      	bne.n	8005ce0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005caa:	4813      	ldr	r0, [pc, #76]	; (8005cf8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	490f      	ldr	r1, [pc, #60]	; (8005cfc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cd2:	f06f 0304 	mvn.w	r3, #4
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e005      	b.n	8005ce6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e002      	b.n	8005ce6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ce0:	f06f 0301 	mvn.w	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005ce6:	697b      	ldr	r3, [r7, #20]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	2000111c 	.word	0x2000111c
 8005cf4:	200000d0 	.word	0x200000d0
 8005cf8:	200010ec 	.word	0x200010ec
 8005cfc:	200014f4 	.word	0x200014f4

08005d00 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d903      	bls.n	8005d1a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d12:	f06f 0301 	mvn.w	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e029      	b.n	8005d6e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d11d      	bne.n	8005d68 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005d2c:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d34:	4812      	ldr	r0, [pc, #72]	; (8005d80 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	440b      	add	r3, r1
 8005d40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	490f      	ldr	r1, [pc, #60]	; (8005d84 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d5a:	f06f 0304 	mvn.w	r3, #4
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e005      	b.n	8005d6e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e002      	b.n	8005d6e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d68:	f06f 0301 	mvn.w	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	2000111c 	.word	0x2000111c
 8005d7c:	200000d0 	.word	0x200000d0
 8005d80:	200010ec 	.word	0x200010ec
 8005d84:	200014f4 	.word	0x200014f4

08005d88 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b092      	sub	sp, #72	; 0x48
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005d94:	2300      	movs	r3, #0
 8005d96:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005d98:	23d7      	movs	r3, #215	; 0xd7
 8005d9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	; (8005ec8 <LSM6DSL_0_Probe+0x140>)
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005da2:	4b4a      	ldr	r3, [pc, #296]	; (8005ecc <LSM6DSL_0_Probe+0x144>)
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <LSM6DSL_0_Probe+0x148>)
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005daa:	4b4a      	ldr	r3, [pc, #296]	; (8005ed4 <LSM6DSL_0_Probe+0x14c>)
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <LSM6DSL_0_Probe+0x150>)
 8005db0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db6:	4619      	mov	r1, r3
 8005db8:	4848      	ldr	r0, [pc, #288]	; (8005edc <LSM6DSL_0_Probe+0x154>)
 8005dba:	f7fe fa81 	bl	80042c0 <LSM6DSL_RegisterBusIO>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dc4:	f06f 0306 	mvn.w	r3, #6
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	e077      	b.n	8005ebc <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005dcc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4842      	ldr	r0, [pc, #264]	; (8005edc <LSM6DSL_0_Probe+0x154>)
 8005dd4:	f7fe fb6a 	bl	80044ac <LSM6DSL_ReadID>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dde:	f06f 0306 	mvn.w	r3, #6
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	e06a      	b.n	8005ebc <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dea:	2b6a      	cmp	r3, #106	; 0x6a
 8005dec:	d003      	beq.n	8005df6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dee:	f06f 0306 	mvn.w	r3, #6
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
 8005df4:	e062      	b.n	8005ebc <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4837      	ldr	r0, [pc, #220]	; (8005edc <LSM6DSL_0_Probe+0x154>)
 8005dfe:	f7fe fb6b 	bl	80044d8 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005e02:	7a7b      	ldrb	r3, [r7, #9]
 8005e04:	461a      	mov	r2, r3
 8005e06:	7a3b      	ldrb	r3, [r7, #8]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	7abb      	ldrb	r3, [r7, #10]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4313      	orrs	r3, r2
 8005e12:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <LSM6DSL_0_Probe+0x158>)
 8005e14:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005e16:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <LSM6DSL_0_Probe+0x15c>)
 8005e18:	4a30      	ldr	r2, [pc, #192]	; (8005edc <LSM6DSL_0_Probe+0x154>)
 8005e1a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005e1c:	4b32      	ldr	r3, [pc, #200]	; (8005ee8 <LSM6DSL_0_Probe+0x160>)
 8005e1e:	4a33      	ldr	r2, [pc, #204]	; (8005eec <LSM6DSL_0_Probe+0x164>)
 8005e20:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11d      	bne.n	8005e64 <LSM6DSL_0_Probe+0xdc>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d018      	beq.n	8005e64 <LSM6DSL_0_Probe+0xdc>
 8005e32:	7a7b      	ldrb	r3, [r7, #9]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d115      	bne.n	8005e64 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005e38:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <LSM6DSL_0_Probe+0x168>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <LSM6DSL_0_Probe+0x16c>)
 8005e3e:	492e      	ldr	r1, [pc, #184]	; (8005ef8 <LSM6DSL_0_Probe+0x170>)
 8005e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005e44:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <LSM6DSL_0_Probe+0x160>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <LSM6DSL_0_Probe+0x15c>)
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4798      	blx	r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e58:	f06f 0304 	mvn.w	r3, #4
 8005e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e5e:	e001      	b.n	8005e64 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d11d      	bne.n	8005ea6 <LSM6DSL_0_Probe+0x11e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d018      	beq.n	8005ea6 <LSM6DSL_0_Probe+0x11e>
 8005e74:	7a3b      	ldrb	r3, [r7, #8]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d115      	bne.n	8005ea6 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <LSM6DSL_0_Probe+0x168>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <LSM6DSL_0_Probe+0x16c>)
 8005e80:	491e      	ldr	r1, [pc, #120]	; (8005efc <LSM6DSL_0_Probe+0x174>)
 8005e82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <LSM6DSL_0_Probe+0x160>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <LSM6DSL_0_Probe+0x15c>)
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	4610      	mov	r0, r2
 8005e92:	4798      	blx	r3
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e9a:	f06f 0304 	mvn.w	r3, #4
 8005e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea0:	e001      	b.n	8005ea6 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <LSM6DSL_0_Probe+0x134>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eb6:	f06f 0304 	mvn.w	r3, #4
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3748      	adds	r7, #72	; 0x48
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08002525 	.word	0x08002525
 8005ecc:	080025a1 	.word	0x080025a1
 8005ed0:	08002655 	.word	0x08002655
 8005ed4:	080025f1 	.word	0x080025f1
 8005ed8:	080026b9 	.word	0x080026b9
 8005edc:	20001128 	.word	0x20001128
 8005ee0:	2000111c 	.word	0x2000111c
 8005ee4:	200014f4 	.word	0x200014f4
 8005ee8:	20001110 	.word	0x20001110
 8005eec:	20000078 	.word	0x20000078
 8005ef0:	200000d0 	.word	0x200000d0
 8005ef4:	200010ec 	.word	0x200010ec
 8005ef8:	200000ac 	.word	0x200000ac
 8005efc:	20000088 	.word	0x20000088

08005f00 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b092      	sub	sp, #72	; 0x48
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005f10:	2333      	movs	r3, #51	; 0x33
 8005f12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <LSM303AGR_ACC_0_Probe+0x114>)
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	; (8006018 <LSM303AGR_ACC_0_Probe+0x118>)
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f1e:	4b3f      	ldr	r3, [pc, #252]	; (800601c <LSM303AGR_ACC_0_Probe+0x11c>)
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f22:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <LSM303AGR_ACC_0_Probe+0x120>)
 8005f24:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f26:	4b3f      	ldr	r3, [pc, #252]	; (8006024 <LSM303AGR_ACC_0_Probe+0x124>)
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f2e:	4619      	mov	r1, r3
 8005f30:	483d      	ldr	r0, [pc, #244]	; (8006028 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f32:	f7fc fe0f 	bl	8002b54 <LSM303AGR_ACC_RegisterBusIO>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f3c:	f06f 0306 	mvn.w	r3, #6
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
 8005f42:	e062      	b.n	800600a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005f44:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4837      	ldr	r0, [pc, #220]	; (8006028 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f4c:	f7fc fec3 	bl	8002cd6 <LSM303AGR_ACC_ReadID>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f56:	f06f 0306 	mvn.w	r3, #6
 8005f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5c:	e055      	b.n	800600a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f62:	2b33      	cmp	r3, #51	; 0x33
 8005f64:	d003      	beq.n	8005f6e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f66:	f06f 0306 	mvn.w	r3, #6
 8005f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6c:	e04d      	b.n	800600a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4619      	mov	r1, r3
 8005f74:	482c      	ldr	r0, [pc, #176]	; (8006028 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f76:	f7fc fec5 	bl	8002d04 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f7a:	7a7b      	ldrb	r3, [r7, #9]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	7a3b      	ldrb	r3, [r7, #8]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005f84:	7abb      	ldrb	r3, [r7, #10]
 8005f86:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	4a28      	ldr	r2, [pc, #160]	; (800602c <LSM303AGR_ACC_0_Probe+0x12c>)
 8005f8c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <LSM303AGR_ACC_0_Probe+0x130>)
 8005f90:	4a25      	ldr	r2, [pc, #148]	; (8006028 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f92:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005f94:	4b27      	ldr	r3, [pc, #156]	; (8006034 <LSM303AGR_ACC_0_Probe+0x134>)
 8005f96:	4a28      	ldr	r2, [pc, #160]	; (8006038 <LSM303AGR_ACC_0_Probe+0x138>)
 8005f98:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11e      	bne.n	8005fde <LSM303AGR_ACC_0_Probe+0xde>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d019      	beq.n	8005fde <LSM303AGR_ACC_0_Probe+0xde>
 8005faa:	7a3b      	ldrb	r3, [r7, #8]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d116      	bne.n	8005fde <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fb0:	4b22      	ldr	r3, [pc, #136]	; (800603c <LSM303AGR_ACC_0_Probe+0x13c>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a22      	ldr	r2, [pc, #136]	; (8006040 <LSM303AGR_ACC_0_Probe+0x140>)
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	4922      	ldr	r1, [pc, #136]	; (8006044 <LSM303AGR_ACC_0_Probe+0x144>)
 8005fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <LSM303AGR_ACC_0_Probe+0x134>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <LSM303AGR_ACC_0_Probe+0x130>)
 8005fc6:	6852      	ldr	r2, [r2, #4]
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fd2:	f06f 0304 	mvn.w	r3, #4
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd8:	e001      	b.n	8005fde <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d107      	bne.n	8005ff4 <LSM303AGR_ACC_0_Probe+0xf4>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fee:	f06f 0304 	mvn.w	r3, #4
 8005ff2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <LSM303AGR_ACC_0_Probe+0x10a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006004:	f06f 0304 	mvn.w	r3, #4
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800600a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800600c:	4618      	mov	r0, r3
 800600e:	3748      	adds	r7, #72	; 0x48
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	08002525 	.word	0x08002525
 8006018:	080025a1 	.word	0x080025a1
 800601c:	08002655 	.word	0x08002655
 8006020:	080025f1 	.word	0x080025f1
 8006024:	080026b9 	.word	0x080026b9
 8006028:	20001158 	.word	0x20001158
 800602c:	2000111c 	.word	0x2000111c
 8006030:	200014f4 	.word	0x200014f4
 8006034:	20001110 	.word	0x20001110
 8006038:	20000010 	.word	0x20000010
 800603c:	200000d0 	.word	0x200000d0
 8006040:	200010ec 	.word	0x200010ec
 8006044:	20000020 	.word	0x20000020

08006048 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b092      	sub	sp, #72	; 0x48
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006050:	2300      	movs	r3, #0
 8006052:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006054:	2300      	movs	r3, #0
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006058:	233d      	movs	r3, #61	; 0x3d
 800605a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800605e:	4b3f      	ldr	r3, [pc, #252]	; (800615c <LSM303AGR_MAG_0_Probe+0x114>)
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006062:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <LSM303AGR_MAG_0_Probe+0x118>)
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006066:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800606a:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <LSM303AGR_MAG_0_Probe+0x120>)
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800606e:	4b3f      	ldr	r3, [pc, #252]	; (800616c <LSM303AGR_MAG_0_Probe+0x124>)
 8006070:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006076:	4619      	mov	r1, r3
 8006078:	483d      	ldr	r0, [pc, #244]	; (8006170 <LSM303AGR_MAG_0_Probe+0x128>)
 800607a:	f7fd f931 	bl	80032e0 <LSM303AGR_MAG_RegisterBusIO>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006084:	f06f 0306 	mvn.w	r3, #6
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
 800608a:	e062      	b.n	8006152 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800608c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006090:	4619      	mov	r1, r3
 8006092:	4837      	ldr	r0, [pc, #220]	; (8006170 <LSM303AGR_MAG_0_Probe+0x128>)
 8006094:	f7fd f9db 	bl	800344e <LSM303AGR_MAG_ReadID>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800609e:	f06f 0306 	mvn.w	r3, #6
 80060a2:	647b      	str	r3, [r7, #68]	; 0x44
 80060a4:	e055      	b.n	8006152 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80060a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d003      	beq.n	80060b6 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ae:	f06f 0306 	mvn.w	r3, #6
 80060b2:	647b      	str	r3, [r7, #68]	; 0x44
 80060b4:	e04d      	b.n	8006152 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	4619      	mov	r1, r3
 80060bc:	482c      	ldr	r0, [pc, #176]	; (8006170 <LSM303AGR_MAG_0_Probe+0x128>)
 80060be:	f7fd f9dd 	bl	800347c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060c2:	7a7b      	ldrb	r3, [r7, #9]
 80060c4:	461a      	mov	r2, r3
 80060c6:	7a3b      	ldrb	r3, [r7, #8]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80060cc:	7abb      	ldrb	r3, [r7, #10]
 80060ce:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060d0:	4313      	orrs	r3, r2
 80060d2:	4a28      	ldr	r2, [pc, #160]	; (8006174 <LSM303AGR_MAG_0_Probe+0x12c>)
 80060d4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80060d6:	4b28      	ldr	r3, [pc, #160]	; (8006178 <LSM303AGR_MAG_0_Probe+0x130>)
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <LSM303AGR_MAG_0_Probe+0x128>)
 80060da:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <LSM303AGR_MAG_0_Probe+0x134>)
 80060de:	4a28      	ldr	r2, [pc, #160]	; (8006180 <LSM303AGR_MAG_0_Probe+0x138>)
 80060e0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80060e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11e      	bne.n	8006126 <LSM303AGR_MAG_0_Probe+0xde>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d019      	beq.n	8006126 <LSM303AGR_MAG_0_Probe+0xde>
 80060f2:	7abb      	ldrb	r3, [r7, #10]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d116      	bne.n	8006126 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <LSM303AGR_MAG_0_Probe+0x13c>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4a22      	ldr	r2, [pc, #136]	; (8006188 <LSM303AGR_MAG_0_Probe+0x140>)
 80060fe:	3306      	adds	r3, #6
 8006100:	4922      	ldr	r1, [pc, #136]	; (800618c <LSM303AGR_MAG_0_Probe+0x144>)
 8006102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006106:	4b1d      	ldr	r3, [pc, #116]	; (800617c <LSM303AGR_MAG_0_Probe+0x134>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <LSM303AGR_MAG_0_Probe+0x130>)
 800610e:	6892      	ldr	r2, [r2, #8]
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800611a:	f06f 0304 	mvn.w	r3, #4
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
 8006120:	e001      	b.n	8006126 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006122:	2300      	movs	r3, #0
 8006124:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	2b00      	cmp	r3, #0
 800612a:	d107      	bne.n	800613c <LSM303AGR_MAG_0_Probe+0xf4>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006136:	f06f 0304 	mvn.w	r3, #4
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800613c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <LSM303AGR_MAG_0_Probe+0x10a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800614c:	f06f 0304 	mvn.w	r3, #4
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006154:	4618      	mov	r0, r3
 8006156:	3748      	adds	r7, #72	; 0x48
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08002525 	.word	0x08002525
 8006160:	080025a1 	.word	0x080025a1
 8006164:	08002655 	.word	0x08002655
 8006168:	080025f1 	.word	0x080025f1
 800616c:	080026b9 	.word	0x080026b9
 8006170:	20001184 	.word	0x20001184
 8006174:	2000111c 	.word	0x2000111c
 8006178:	200014f4 	.word	0x200014f4
 800617c:	20001110 	.word	0x20001110
 8006180:	20000044 	.word	0x20000044
 8006184:	200000d0 	.word	0x200000d0
 8006188:	200010ec 	.word	0x200010ec
 800618c:	20000054 	.word	0x20000054

08006190 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d903      	bls.n	80061ac <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80061a4:	f06f 0301 	mvn.w	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e025      	b.n	80061f8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	4914      	ldr	r1, [pc, #80]	; (8006204 <BSP_COM_Init+0x74>)
 80061b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80061b6:	4814      	ldr	r0, [pc, #80]	; (8006208 <BSP_COM_Init+0x78>)
 80061b8:	4613      	mov	r3, r2
 80061ba:	015b      	lsls	r3, r3, #5
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4403      	add	r3, r0
 80061c2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80061c4:	79fa      	ldrb	r2, [r7, #7]
 80061c6:	4613      	mov	r3, r2
 80061c8:	015b      	lsls	r3, r3, #5
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <BSP_COM_Init+0x78>)
 80061d0:	4413      	add	r3, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f86a 	bl	80062ac <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80061d8:	79fa      	ldrb	r2, [r7, #7]
 80061da:	4613      	mov	r3, r2
 80061dc:	015b      	lsls	r3, r3, #5
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <BSP_COM_Init+0x78>)
 80061e4:	4413      	add	r3, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f810 	bl	800620c <MX_USART2_UART_Init>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061f2:	f06f 0303 	mvn.w	r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200000e4 	.word	0x200000e4
 8006208:	20001548 	.word	0x20001548

0800620c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <MX_USART2_UART_Init+0x64>)
 800621c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006224:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	220c      	movs	r2, #12
 800623c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f004 f854 	bl	800a304 <HAL_UART_Init>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40004400 	.word	0x40004400

08006274 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <__io_putchar+0x30>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	4613      	mov	r3, r2
 8006284:	015b      	lsls	r3, r3, #5
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <__io_putchar+0x34>)
 800628c:	1898      	adds	r0, r3, r2
 800628e:	1d39      	adds	r1, r7, #4
 8006290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006294:	2201      	movs	r2, #1
 8006296:	f004 f88d 	bl	800a3b4 <HAL_UART_Transmit>
  return ch;
 800629a:	687b      	ldr	r3, [r7, #4]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200011b0 	.word	0x200011b0
 80062a8:	20001548 	.word	0x20001548

080062ac <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80062b4:	4b30      	ldr	r3, [pc, #192]	; (8006378 <USART2_MspInit+0xcc>)
 80062b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b8:	4a2f      	ldr	r2, [pc, #188]	; (8006378 <USART2_MspInit+0xcc>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062be:	6593      	str	r3, [r2, #88]	; 0x58
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <USART2_MspInit+0xcc>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <USART2_MspInit+0xcc>)
 80062ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <USART2_MspInit+0xcc>)
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <USART2_MspInit+0xcc>)
 80062da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80062e4:	2304      	movs	r3, #4
 80062e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e8:	2302      	movs	r3, #2
 80062ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80062f4:	2307      	movs	r3, #7
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006302:	f000 fcaf 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006306:	2308      	movs	r3, #8
 8006308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800630a:	2302      	movs	r3, #2
 800630c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006312:	2303      	movs	r3, #3
 8006314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006316:	2307      	movs	r3, #7
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	4619      	mov	r1, r3
 8006320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006324:	f000 fc9e 	bl	8006c64 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <USART2_MspInit+0xd0>)
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <USART2_MspInit+0xd4>)
 800632c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <USART2_MspInit+0xd0>)
 8006330:	2202      	movs	r2, #2
 8006332:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <USART2_MspInit+0xd0>)
 8006336:	2200      	movs	r2, #0
 8006338:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <USART2_MspInit+0xd0>)
 800633c:	2200      	movs	r2, #0
 800633e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <USART2_MspInit+0xd0>)
 8006342:	2280      	movs	r2, #128	; 0x80
 8006344:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <USART2_MspInit+0xd0>)
 8006348:	2200      	movs	r2, #0
 800634a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <USART2_MspInit+0xd0>)
 800634e:	2200      	movs	r2, #0
 8006350:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <USART2_MspInit+0xd0>)
 8006354:	2220      	movs	r2, #32
 8006356:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <USART2_MspInit+0xd0>)
 800635a:	2200      	movs	r2, #0
 800635c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800635e:	4807      	ldr	r0, [pc, #28]	; (800637c <USART2_MspInit+0xd0>)
 8006360:	f000 fa88 	bl	8006874 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a05      	ldr	r2, [pc, #20]	; (800637c <USART2_MspInit+0xd0>)
 8006368:	671a      	str	r2, [r3, #112]	; 0x70
 800636a:	4a04      	ldr	r2, [pc, #16]	; (800637c <USART2_MspInit+0xd0>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006370:	bf00      	nop
 8006372:	3728      	adds	r7, #40	; 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40021000 	.word	0x40021000
 800637c:	20001500 	.word	0x20001500
 8006380:	4002006c 	.word	0x4002006c

08006384 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <HAL_Init+0x3c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a0b      	ldr	r2, [pc, #44]	; (80063c0 <HAL_Init+0x3c>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800639a:	2003      	movs	r0, #3
 800639c:	f000 f93e 	bl	800661c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063a0:	2000      	movs	r0, #0
 80063a2:	f000 f80f 	bl	80063c4 <HAL_InitTick>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	71fb      	strb	r3, [r7, #7]
 80063b0:	e001      	b.n	80063b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063b2:	f7fc f843 	bl	800243c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063b6:	79fb      	ldrb	r3, [r7, #7]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40022000 	.word	0x40022000

080063c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80063d0:	4b17      	ldr	r3, [pc, #92]	; (8006430 <HAL_InitTick+0x6c>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80063d8:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_InitTick+0x70>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <HAL_InitTick+0x6c>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f949 	bl	8006686 <HAL_SYSTICK_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b0f      	cmp	r3, #15
 80063fe:	d809      	bhi.n	8006414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006400:	2200      	movs	r2, #0
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	f000 f913 	bl	8006632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800640c:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <HAL_InitTick+0x74>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e007      	b.n	8006424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e004      	b.n	8006424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	e001      	b.n	8006424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	200000ec 	.word	0x200000ec
 8006434:	2000000c 	.word	0x2000000c
 8006438:	200000e8 	.word	0x200000e8

0800643c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_IncTick+0x20>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_IncTick+0x24>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4413      	add	r3, r2
 800644c:	4a04      	ldr	r2, [pc, #16]	; (8006460 <HAL_IncTick+0x24>)
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200000ec 	.word	0x200000ec
 8006460:	200015cc 	.word	0x200015cc

08006464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return uwTick;
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <HAL_GetTick+0x14>)
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	200015cc 	.word	0x200015cc

0800647c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <__NVIC_SetPriorityGrouping+0x44>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006498:	4013      	ands	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ae:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <__NVIC_SetPriorityGrouping+0x44>)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	60d3      	str	r3, [r2, #12]
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	e000ed00 	.word	0xe000ed00

080064c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064c8:	4b04      	ldr	r3, [pc, #16]	; (80064dc <__NVIC_GetPriorityGrouping+0x18>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	f003 0307 	and.w	r3, r3, #7
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	db0b      	blt.n	800650a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	f003 021f 	and.w	r2, r3, #31
 80064f8:	4907      	ldr	r1, [pc, #28]	; (8006518 <__NVIC_EnableIRQ+0x38>)
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	2001      	movs	r0, #1
 8006502:	fa00 f202 	lsl.w	r2, r0, r2
 8006506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	e000e100 	.word	0xe000e100

0800651c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652c:	2b00      	cmp	r3, #0
 800652e:	db0a      	blt.n	8006546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	b2da      	uxtb	r2, r3
 8006534:	490c      	ldr	r1, [pc, #48]	; (8006568 <__NVIC_SetPriority+0x4c>)
 8006536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653a:	0112      	lsls	r2, r2, #4
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	440b      	add	r3, r1
 8006540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006544:	e00a      	b.n	800655c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	4908      	ldr	r1, [pc, #32]	; (800656c <__NVIC_SetPriority+0x50>)
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	3b04      	subs	r3, #4
 8006554:	0112      	lsls	r2, r2, #4
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	440b      	add	r3, r1
 800655a:	761a      	strb	r2, [r3, #24]
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	e000e100 	.word	0xe000e100
 800656c:	e000ed00 	.word	0xe000ed00

08006570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006570:	b480      	push	{r7}
 8006572:	b089      	sub	sp, #36	; 0x24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f1c3 0307 	rsb	r3, r3, #7
 800658a:	2b04      	cmp	r3, #4
 800658c:	bf28      	it	cs
 800658e:	2304      	movcs	r3, #4
 8006590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3304      	adds	r3, #4
 8006596:	2b06      	cmp	r3, #6
 8006598:	d902      	bls.n	80065a0 <NVIC_EncodePriority+0x30>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3b03      	subs	r3, #3
 800659e:	e000      	b.n	80065a2 <NVIC_EncodePriority+0x32>
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43da      	mvns	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	401a      	ands	r2, r3
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065b8:	f04f 31ff 	mov.w	r1, #4294967295
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fa01 f303 	lsl.w	r3, r1, r3
 80065c2:	43d9      	mvns	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c8:	4313      	orrs	r3, r2
         );
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065e8:	d301      	bcc.n	80065ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ea:	2301      	movs	r3, #1
 80065ec:	e00f      	b.n	800660e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <SysTick_Config+0x40>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065f6:	210f      	movs	r1, #15
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	f7ff ff8e 	bl	800651c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <SysTick_Config+0x40>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <SysTick_Config+0x40>)
 8006608:	2207      	movs	r2, #7
 800660a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	e000e010 	.word	0xe000e010

0800661c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ff29 	bl	800647c <__NVIC_SetPriorityGrouping>
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	4603      	mov	r3, r0
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
 800663e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006644:	f7ff ff3e 	bl	80064c4 <__NVIC_GetPriorityGrouping>
 8006648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff ff8e 	bl	8006570 <NVIC_EncodePriority>
 8006654:	4602      	mov	r2, r0
 8006656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff ff5d 	bl	800651c <__NVIC_SetPriority>
}
 8006662:	bf00      	nop
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	4603      	mov	r3, r0
 8006672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff ff31 	bl	80064e0 <__NVIC_EnableIRQ>
}
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ffa2 	bl	80065d8 <SysTick_Config>
 8006694:	4603      	mov	r3, r0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e054      	b.n	800675c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7f5b      	ldrb	r3, [r3, #29]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fb fa70 	bl	8001ba8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	791b      	ldrb	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10c      	bne.n	80066f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a22      	ldr	r2, [pc, #136]	; (8006764 <HAL_CRC_Init+0xc4>)
 80066dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0218 	bic.w	r2, r2, #24
 80066ec:	609a      	str	r2, [r3, #8]
 80066ee:	e00c      	b.n	800670a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6899      	ldr	r1, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f834 	bl	8006768 <HAL_CRCEx_Polynomial_Set>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e028      	b.n	800675c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	795b      	ldrb	r3, [r3, #5]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	611a      	str	r2, [r3, #16]
 800671c:	e004      	b.n	8006728 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6912      	ldr	r2, [r2, #16]
 8006726:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	04c11db7 	.word	0x04c11db7

08006768 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006778:	231f      	movs	r3, #31
 800677a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800677c:	bf00      	nop
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	613a      	str	r2, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <HAL_CRCEx_Polynomial_Set+0x34>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_CRCEx_Polynomial_Set+0x16>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b18      	cmp	r3, #24
 80067a0:	d846      	bhi.n	8006830 <HAL_CRCEx_Polynomial_Set+0xc8>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	08006837 	.word	0x08006837
 80067ac:	08006831 	.word	0x08006831
 80067b0:	08006831 	.word	0x08006831
 80067b4:	08006831 	.word	0x08006831
 80067b8:	08006831 	.word	0x08006831
 80067bc:	08006831 	.word	0x08006831
 80067c0:	08006831 	.word	0x08006831
 80067c4:	08006831 	.word	0x08006831
 80067c8:	08006825 	.word	0x08006825
 80067cc:	08006831 	.word	0x08006831
 80067d0:	08006831 	.word	0x08006831
 80067d4:	08006831 	.word	0x08006831
 80067d8:	08006831 	.word	0x08006831
 80067dc:	08006831 	.word	0x08006831
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006831 	.word	0x08006831
 80067e8:	08006819 	.word	0x08006819
 80067ec:	08006831 	.word	0x08006831
 80067f0:	08006831 	.word	0x08006831
 80067f4:	08006831 	.word	0x08006831
 80067f8:	08006831 	.word	0x08006831
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006831 	.word	0x08006831
 8006804:	08006831 	.word	0x08006831
 8006808:	0800680d 	.word	0x0800680d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b06      	cmp	r3, #6
 8006810:	d913      	bls.n	800683a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006816:	e010      	b.n	800683a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b07      	cmp	r3, #7
 800681c:	d90f      	bls.n	800683e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006822:	e00c      	b.n	800683e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d90b      	bls.n	8006842 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800682e:	e008      	b.n	8006842 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	75fb      	strb	r3, [r7, #23]
      break;
 8006834:	e006      	b.n	8006844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006836:	bf00      	nop
 8006838:	e004      	b.n	8006844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800683a:	bf00      	nop
 800683c:	e002      	b.n	8006844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006842:	bf00      	nop
  }
  if (status == HAL_OK)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f023 0118 	bic.w	r1, r3, #24
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e098      	b.n	80069b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	4b4d      	ldr	r3, [pc, #308]	; (80069c4 <HAL_DMA_Init+0x150>)
 800688e:	429a      	cmp	r2, r3
 8006890:	d80f      	bhi.n	80068b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_DMA_Init+0x154>)
 800689a:	4413      	add	r3, r2
 800689c:	4a4b      	ldr	r2, [pc, #300]	; (80069cc <HAL_DMA_Init+0x158>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	009a      	lsls	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a48      	ldr	r2, [pc, #288]	; (80069d0 <HAL_DMA_Init+0x15c>)
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
 80068b0:	e00e      	b.n	80068d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	4b46      	ldr	r3, [pc, #280]	; (80069d4 <HAL_DMA_Init+0x160>)
 80068ba:	4413      	add	r3, r2
 80068bc:	4a43      	ldr	r2, [pc, #268]	; (80069cc <HAL_DMA_Init+0x158>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	009a      	lsls	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a42      	ldr	r2, [pc, #264]	; (80069d8 <HAL_DMA_Init+0x164>)
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800690c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800692a:	d039      	beq.n	80069a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	4a27      	ldr	r2, [pc, #156]	; (80069d0 <HAL_DMA_Init+0x15c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d11a      	bne.n	800696c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006936:	4b29      	ldr	r3, [pc, #164]	; (80069dc <HAL_DMA_Init+0x168>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f003 031c 	and.w	r3, r3, #28
 8006942:	210f      	movs	r1, #15
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	43db      	mvns	r3, r3
 800694a:	4924      	ldr	r1, [pc, #144]	; (80069dc <HAL_DMA_Init+0x168>)
 800694c:	4013      	ands	r3, r2
 800694e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006950:	4b22      	ldr	r3, [pc, #136]	; (80069dc <HAL_DMA_Init+0x168>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695c:	f003 031c 	and.w	r3, r3, #28
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	491d      	ldr	r1, [pc, #116]	; (80069dc <HAL_DMA_Init+0x168>)
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
 800696a:	e019      	b.n	80069a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <HAL_DMA_Init+0x16c>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f003 031c 	and.w	r3, r3, #28
 8006978:	210f      	movs	r1, #15
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	43db      	mvns	r3, r3
 8006980:	4917      	ldr	r1, [pc, #92]	; (80069e0 <HAL_DMA_Init+0x16c>)
 8006982:	4013      	ands	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <HAL_DMA_Init+0x16c>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6859      	ldr	r1, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006992:	f003 031c 	and.w	r3, r3, #28
 8006996:	fa01 f303 	lsl.w	r3, r1, r3
 800699a:	4911      	ldr	r1, [pc, #68]	; (80069e0 <HAL_DMA_Init+0x16c>)
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40020407 	.word	0x40020407
 80069c8:	bffdfff8 	.word	0xbffdfff8
 80069cc:	cccccccd 	.word	0xcccccccd
 80069d0:	40020000 	.word	0x40020000
 80069d4:	bffdfbf8 	.word	0xbffdfbf8
 80069d8:	40020400 	.word	0x40020400
 80069dc:	400200a8 	.word	0x400200a8
 80069e0:	400204a8 	.word	0x400204a8

080069e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_DMA_Start_IT+0x20>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e04b      	b.n	8006a9c <HAL_DMA_Start_IT+0xb8>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d13a      	bne.n	8006a8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f8e0 	bl	8006c02 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 020e 	orr.w	r2, r2, #14
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00f      	b.n	8006a7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 020a 	orr.w	r2, r2, #10
 8006a7a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e005      	b.n	8006a9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
 8006a98:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac0:	f003 031c 	and.w	r3, r3, #28
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d026      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x7a>
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d021      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d107      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0204 	bic.w	r2, r2, #4
 8006af6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	f003 021c 	and.w	r2, r3, #28
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	2104      	movs	r1, #4
 8006b06:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d071      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006b1c:	e06c      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f003 031c 	and.w	r3, r3, #28
 8006b26:	2202      	movs	r2, #2
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02e      	beq.n	8006b90 <HAL_DMA_IRQHandler+0xec>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d029      	beq.n	8006b90 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 020a 	bic.w	r2, r2, #10
 8006b58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f003 021c 	and.w	r2, r3, #28
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2102      	movs	r1, #2
 8006b70:	fa01 f202 	lsl.w	r2, r1, r2
 8006b74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d038      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006b8e:	e033      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b94:	f003 031c 	and.w	r3, r3, #28
 8006b98:	2208      	movs	r2, #8
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d02a      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x156>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d025      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 020e 	bic.w	r2, r2, #14
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	f003 021c 	and.w	r2, r3, #28
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2101      	movs	r1, #1
 8006bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
}
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	f003 021c 	and.w	r2, r3, #28
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d108      	bne.n	8006c46 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c44:	e007      	b.n	8006c56 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c72:	e17f      	b.n	8006f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8171 	beq.w	8006f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d005      	beq.n	8006ca4 <HAL_GPIO_Init+0x40>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d130      	bne.n	8006d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	2203      	movs	r2, #3
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cda:	2201      	movs	r2, #1
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0201 	and.w	r2, r3, #1
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d118      	bne.n	8006d44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4013      	ands	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0201 	and.w	r2, r3, #1
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d017      	beq.n	8006d80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4013      	ands	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d123      	bne.n	8006dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	220f      	movs	r2, #15
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4013      	ands	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	08da      	lsrs	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3208      	adds	r2, #8
 8006dce:	6939      	ldr	r1, [r7, #16]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4013      	ands	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0203 	and.w	r2, r3, #3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80ac 	beq.w	8006f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e16:	4b5f      	ldr	r3, [pc, #380]	; (8006f94 <HAL_GPIO_Init+0x330>)
 8006e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1a:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <HAL_GPIO_Init+0x330>)
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	6613      	str	r3, [r2, #96]	; 0x60
 8006e22:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <HAL_GPIO_Init+0x330>)
 8006e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	60bb      	str	r3, [r7, #8]
 8006e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006e2e:	4a5a      	ldr	r2, [pc, #360]	; (8006f98 <HAL_GPIO_Init+0x334>)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	3302      	adds	r3, #2
 8006e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	220f      	movs	r2, #15
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e58:	d025      	beq.n	8006ea6 <HAL_GPIO_Init+0x242>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a4f      	ldr	r2, [pc, #316]	; (8006f9c <HAL_GPIO_Init+0x338>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01f      	beq.n	8006ea2 <HAL_GPIO_Init+0x23e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <HAL_GPIO_Init+0x33c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d019      	beq.n	8006e9e <HAL_GPIO_Init+0x23a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4d      	ldr	r2, [pc, #308]	; (8006fa4 <HAL_GPIO_Init+0x340>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_GPIO_Init+0x236>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a4c      	ldr	r2, [pc, #304]	; (8006fa8 <HAL_GPIO_Init+0x344>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00d      	beq.n	8006e96 <HAL_GPIO_Init+0x232>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a4b      	ldr	r2, [pc, #300]	; (8006fac <HAL_GPIO_Init+0x348>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d007      	beq.n	8006e92 <HAL_GPIO_Init+0x22e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a4a      	ldr	r2, [pc, #296]	; (8006fb0 <HAL_GPIO_Init+0x34c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d101      	bne.n	8006e8e <HAL_GPIO_Init+0x22a>
 8006e8a:	2306      	movs	r3, #6
 8006e8c:	e00c      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006e8e:	2307      	movs	r3, #7
 8006e90:	e00a      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006e92:	2305      	movs	r3, #5
 8006e94:	e008      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006e96:	2304      	movs	r3, #4
 8006e98:	e006      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e004      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e002      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <HAL_GPIO_Init+0x244>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	f002 0203 	and.w	r2, r2, #3
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	4093      	lsls	r3, r2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006eb8:	4937      	ldr	r1, [pc, #220]	; (8006f98 <HAL_GPIO_Init+0x334>)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ec6:	4b3b      	ldr	r3, [pc, #236]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	43db      	mvns	r3, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006eea:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ef0:	4b30      	ldr	r3, [pc, #192]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4013      	ands	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f14:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006f1a:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	43db      	mvns	r3, r3
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4013      	ands	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4013      	ands	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f68:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <HAL_GPIO_Init+0x350>)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	3301      	adds	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f ae78 	bne.w	8006c74 <HAL_GPIO_Init+0x10>
  }
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40021000 	.word	0x40021000
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	48000400 	.word	0x48000400
 8006fa0:	48000800 	.word	0x48000800
 8006fa4:	48000c00 	.word	0x48000c00
 8006fa8:	48001000 	.word	0x48001000
 8006fac:	48001400 	.word	0x48001400
 8006fb0:	48001800 	.word	0x48001800
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006fc6:	e0cd      	b.n	8007164 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006fc8:	2201      	movs	r2, #1
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80c0 	beq.w	800715e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006fde:	4a68      	ldr	r2, [pc, #416]	; (8007180 <HAL_GPIO_DeInit+0x1c8>)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	220f      	movs	r2, #15
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007006:	d025      	beq.n	8007054 <HAL_GPIO_DeInit+0x9c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a5e      	ldr	r2, [pc, #376]	; (8007184 <HAL_GPIO_DeInit+0x1cc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d01f      	beq.n	8007050 <HAL_GPIO_DeInit+0x98>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a5d      	ldr	r2, [pc, #372]	; (8007188 <HAL_GPIO_DeInit+0x1d0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d019      	beq.n	800704c <HAL_GPIO_DeInit+0x94>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a5c      	ldr	r2, [pc, #368]	; (800718c <HAL_GPIO_DeInit+0x1d4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_GPIO_DeInit+0x90>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a5b      	ldr	r2, [pc, #364]	; (8007190 <HAL_GPIO_DeInit+0x1d8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00d      	beq.n	8007044 <HAL_GPIO_DeInit+0x8c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a5a      	ldr	r2, [pc, #360]	; (8007194 <HAL_GPIO_DeInit+0x1dc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <HAL_GPIO_DeInit+0x88>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a59      	ldr	r2, [pc, #356]	; (8007198 <HAL_GPIO_DeInit+0x1e0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d101      	bne.n	800703c <HAL_GPIO_DeInit+0x84>
 8007038:	2306      	movs	r3, #6
 800703a:	e00c      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 800703c:	2307      	movs	r3, #7
 800703e:	e00a      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 8007040:	2305      	movs	r3, #5
 8007042:	e008      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 8007044:	2304      	movs	r3, #4
 8007046:	e006      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 8007048:	2303      	movs	r3, #3
 800704a:	e004      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 800704c:	2302      	movs	r3, #2
 800704e:	e002      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_GPIO_DeInit+0x9e>
 8007054:	2300      	movs	r3, #0
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	f002 0203 	and.w	r2, r2, #3
 800705c:	0092      	lsls	r2, r2, #2
 800705e:	4093      	lsls	r3, r2
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d132      	bne.n	80070cc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007066:	4b4d      	ldr	r3, [pc, #308]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	43db      	mvns	r3, r3
 800706e:	494b      	ldr	r1, [pc, #300]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 8007070:	4013      	ands	r3, r2
 8007072:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007074:	4b49      	ldr	r3, [pc, #292]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	43db      	mvns	r3, r3
 800707c:	4947      	ldr	r1, [pc, #284]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 800707e:	4013      	ands	r3, r2
 8007080:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007082:	4b46      	ldr	r3, [pc, #280]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	43db      	mvns	r3, r3
 800708a:	4944      	ldr	r1, [pc, #272]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 800708c:	4013      	ands	r3, r2
 800708e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007090:	4b42      	ldr	r3, [pc, #264]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	43db      	mvns	r3, r3
 8007098:	4940      	ldr	r1, [pc, #256]	; (800719c <HAL_GPIO_DeInit+0x1e4>)
 800709a:	4013      	ands	r3, r2
 800709c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	220f      	movs	r2, #15
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80070ae:	4a34      	ldr	r2, [pc, #208]	; (8007180 <HAL_GPIO_DeInit+0x1c8>)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	089b      	lsrs	r3, r3, #2
 80070b4:	3302      	adds	r3, #2
 80070b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	43da      	mvns	r2, r3
 80070be:	4830      	ldr	r0, [pc, #192]	; (8007180 <HAL_GPIO_DeInit+0x1c8>)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	089b      	lsrs	r3, r3, #2
 80070c4:	400a      	ands	r2, r1
 80070c6:	3302      	adds	r3, #2
 80070c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	2103      	movs	r1, #3
 80070d6:	fa01 f303 	lsl.w	r3, r1, r3
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	08da      	lsrs	r2, r3, #3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3208      	adds	r2, #8
 80070e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	220f      	movs	r2, #15
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	08d2      	lsrs	r2, r2, #3
 8007100:	4019      	ands	r1, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3208      	adds	r2, #8
 8007106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	2103      	movs	r1, #3
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	2101      	movs	r1, #1
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	401a      	ands	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	2103      	movs	r1, #3
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	43db      	mvns	r3, r3
 8007144:	401a      	ands	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	2101      	movs	r1, #1
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	fa01 f303 	lsl.w	r3, r1, r3
 8007156:	43db      	mvns	r3, r3
 8007158:	401a      	ands	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	3301      	adds	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	fa22 f303 	lsr.w	r3, r2, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	f47f af2b 	bne.w	8006fc8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40010000 	.word	0x40010000
 8007184:	48000400 	.word	0x48000400
 8007188:	48000800 	.word	0x48000800
 800718c:	48000c00 	.word	0x48000c00
 8007190:	48001000 	.word	0x48001000
 8007194:	48001400 	.word	0x48001400
 8007198:	48001800 	.word	0x48001800
 800719c:	40010400 	.word	0x40010400

080071a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	807b      	strh	r3, [r7, #2]
 80071ac:	4613      	mov	r3, r2
 80071ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071b0:	787b      	ldrb	r3, [r7, #1]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071bc:	e002      	b.n	80071c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071be:	887a      	ldrh	r2, [r7, #2]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80071da:	4b08      	ldr	r3, [pc, #32]	; (80071fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071dc:	695a      	ldr	r2, [r3, #20]
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d006      	beq.n	80071f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071e6:	4a05      	ldr	r2, [pc, #20]	; (80071fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa ffa4 	bl	800213c <HAL_GPIO_EXTI_Callback>
  }
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40010400 	.word	0x40010400

08007200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e081      	b.n	8007316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fdaa 	bl	8001d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d107      	bne.n	800727a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	e006      	b.n	8007288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d104      	bne.n	800729a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6812      	ldr	r2, [r2, #0]
 80072a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69d9      	ldr	r1, [r3, #28]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e021      	b.n	8007374 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2224      	movs	r2, #36	; 0x24
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fa fd77 	bl	8001e3c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	461a      	mov	r2, r3
 800738a:	4603      	mov	r3, r0
 800738c:	817b      	strh	r3, [r7, #10]
 800738e:	460b      	mov	r3, r1
 8007390:	813b      	strh	r3, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b20      	cmp	r3, #32
 80073a0:	f040 80f9 	bne.w	8007596 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_I2C_Mem_Write+0x34>
 80073aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0ed      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_I2C_Mem_Write+0x4e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0e6      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073d2:	f7ff f847 	bl	8006464 <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	2319      	movs	r3, #25
 80073de:	2201      	movs	r2, #1
 80073e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fadd 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0d1      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2221      	movs	r2, #33	; 0x21
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2240      	movs	r2, #64	; 0x40
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a3a      	ldr	r2, [r7, #32]
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800741c:	88f8      	ldrh	r0, [r7, #6]
 800741e:	893a      	ldrh	r2, [r7, #8]
 8007420:	8979      	ldrh	r1, [r7, #10]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	4603      	mov	r3, r0
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f9ed 	bl	800780c <I2C_RequestMemoryWrite>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0a9      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007448:	b29b      	uxth	r3, r3
 800744a:	2bff      	cmp	r3, #255	; 0xff
 800744c:	d90e      	bls.n	800746c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007458:	b2da      	uxtb	r2, r3
 800745a:	8979      	ldrh	r1, [r7, #10]
 800745c:	2300      	movs	r3, #0
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fc45 	bl	8007cf4 <I2C_TransferConfig>
 800746a:	e00f      	b.n	800748c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747a:	b2da      	uxtb	r2, r3
 800747c:	8979      	ldrh	r1, [r7, #10]
 800747e:	2300      	movs	r3, #0
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fc34 	bl	8007cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fac7 	bl	8007a24 <I2C_WaitOnTXISFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e07b      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d034      	beq.n	8007544 <HAL_I2C_Mem_Write+0x1c8>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d130      	bne.n	8007544 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	2200      	movs	r2, #0
 80074ea:	2180      	movs	r1, #128	; 0x80
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fa59 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e04d      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	2bff      	cmp	r3, #255	; 0xff
 8007504:	d90e      	bls.n	8007524 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007510:	b2da      	uxtb	r2, r3
 8007512:	8979      	ldrh	r1, [r7, #10]
 8007514:	2300      	movs	r3, #0
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fbe9 	bl	8007cf4 <I2C_TransferConfig>
 8007522:	e00f      	b.n	8007544 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007532:	b2da      	uxtb	r2, r3
 8007534:	8979      	ldrh	r1, [r7, #10]
 8007536:	2300      	movs	r3, #0
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fbd8 	bl	8007cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d19e      	bne.n	800748c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 faa6 	bl	8007aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e01a      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2220      	movs	r2, #32
 8007568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <HAL_I2C_Mem_Write+0x224>)
 8007576:	400b      	ands	r3, r1
 8007578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	fe00e800 	.word	0xfe00e800

080075a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	817b      	strh	r3, [r7, #10]
 80075b6:	460b      	mov	r3, r1
 80075b8:	813b      	strh	r3, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	f040 80fd 	bne.w	80077c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_I2C_Mem_Read+0x34>
 80075d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0f1      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_I2C_Mem_Read+0x4e>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e0ea      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075fa:	f7fe ff33 	bl	8006464 <HAL_GetTick>
 80075fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2319      	movs	r3, #25
 8007606:	2201      	movs	r2, #1
 8007608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f9c9 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e0d5      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2222      	movs	r2, #34	; 0x22
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2240      	movs	r2, #64	; 0x40
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a3a      	ldr	r2, [r7, #32]
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800763c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007644:	88f8      	ldrh	r0, [r7, #6]
 8007646:	893a      	ldrh	r2, [r7, #8]
 8007648:	8979      	ldrh	r1, [r7, #10]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4603      	mov	r3, r0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f92d 	bl	80078b4 <I2C_RequestMemoryRead>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e0ad      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2bff      	cmp	r3, #255	; 0xff
 8007674:	d90e      	bls.n	8007694 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	22ff      	movs	r2, #255	; 0xff
 800767a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007680:	b2da      	uxtb	r2, r3
 8007682:	8979      	ldrh	r1, [r7, #10]
 8007684:	4b52      	ldr	r3, [pc, #328]	; (80077d0 <HAL_I2C_Mem_Read+0x22c>)
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb31 	bl	8007cf4 <I2C_TransferConfig>
 8007692:	e00f      	b.n	80076b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	8979      	ldrh	r1, [r7, #10]
 80076a6:	4b4a      	ldr	r3, [pc, #296]	; (80077d0 <HAL_I2C_Mem_Read+0x22c>)
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fb20 	bl	8007cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2200      	movs	r2, #0
 80076bc:	2104      	movs	r1, #4
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f970 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e07c      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d034      	beq.n	8007774 <HAL_I2C_Mem_Read+0x1d0>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770e:	2b00      	cmp	r3, #0
 8007710:	d130      	bne.n	8007774 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	2200      	movs	r2, #0
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f941 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e04d      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29b      	uxth	r3, r3
 8007732:	2bff      	cmp	r3, #255	; 0xff
 8007734:	d90e      	bls.n	8007754 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	22ff      	movs	r2, #255	; 0xff
 800773a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007740:	b2da      	uxtb	r2, r3
 8007742:	8979      	ldrh	r1, [r7, #10]
 8007744:	2300      	movs	r3, #0
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fad1 	bl	8007cf4 <I2C_TransferConfig>
 8007752:	e00f      	b.n	8007774 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007758:	b29a      	uxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007762:	b2da      	uxtb	r2, r3
 8007764:	8979      	ldrh	r1, [r7, #10]
 8007766:	2300      	movs	r3, #0
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fac0 	bl	8007cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d19a      	bne.n	80076b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f98e 	bl	8007aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e01a      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2220      	movs	r2, #32
 8007798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6859      	ldr	r1, [r3, #4]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <HAL_I2C_Mem_Read+0x230>)
 80077a6:	400b      	ands	r3, r1
 80077a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e000      	b.n	80077c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
  }
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	80002400 	.word	0x80002400
 80077d4:	fe00e800 	.word	0xfe00e800

080077d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e6:	b2db      	uxtb	r3, r3
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	4603      	mov	r3, r0
 800781c:	817b      	strh	r3, [r7, #10]
 800781e:	460b      	mov	r3, r1
 8007820:	813b      	strh	r3, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	b2da      	uxtb	r2, r3
 800782a:	8979      	ldrh	r1, [r7, #10]
 800782c:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <I2C_RequestMemoryWrite+0xa4>)
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fa5d 	bl	8007cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	69b9      	ldr	r1, [r7, #24]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f8f0 	bl	8007a24 <I2C_WaitOnTXISFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e02c      	b.n	80078a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d105      	bne.n	8007860 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007854:	893b      	ldrh	r3, [r7, #8]
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
 800785e:	e015      	b.n	800788c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007860:	893b      	ldrh	r3, [r7, #8]
 8007862:	0a1b      	lsrs	r3, r3, #8
 8007864:	b29b      	uxth	r3, r3
 8007866:	b2da      	uxtb	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	69b9      	ldr	r1, [r7, #24]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f8d6 	bl	8007a24 <I2C_WaitOnTXISFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e012      	b.n	80078a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007882:	893b      	ldrh	r3, [r7, #8]
 8007884:	b2da      	uxtb	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2200      	movs	r2, #0
 8007894:	2180      	movs	r1, #128	; 0x80
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f884 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	80002000 	.word	0x80002000

080078b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	4608      	mov	r0, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	817b      	strh	r3, [r7, #10]
 80078c6:	460b      	mov	r3, r1
 80078c8:	813b      	strh	r3, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	8979      	ldrh	r1, [r7, #10]
 80078d4:	4b20      	ldr	r3, [pc, #128]	; (8007958 <I2C_RequestMemoryRead+0xa4>)
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2300      	movs	r3, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fa0a 	bl	8007cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	69b9      	ldr	r1, [r7, #24]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f89d 	bl	8007a24 <I2C_WaitOnTXISFlagUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e02c      	b.n	800794e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078fa:	893b      	ldrh	r3, [r7, #8]
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	629a      	str	r2, [r3, #40]	; 0x28
 8007904:	e015      	b.n	8007932 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007906:	893b      	ldrh	r3, [r7, #8]
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	b29b      	uxth	r3, r3
 800790c:	b2da      	uxtb	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	69b9      	ldr	r1, [r7, #24]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f883 	bl	8007a24 <I2C_WaitOnTXISFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e012      	b.n	800794e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007928:	893b      	ldrh	r3, [r7, #8]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2200      	movs	r2, #0
 800793a:	2140      	movs	r1, #64	; 0x40
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f831 	bl	80079a4 <I2C_WaitOnFlagUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	80002000 	.word	0x80002000

0800795c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b02      	cmp	r3, #2
 8007970:	d103      	bne.n	800797a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b01      	cmp	r3, #1
 8007986:	d007      	beq.n	8007998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	619a      	str	r2, [r3, #24]
  }
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079b4:	e022      	b.n	80079fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d01e      	beq.n	80079fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079be:	f7fe fd51 	bl	8006464 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d113      	bne.n	80079fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	f043 0220 	orr.w	r2, r3, #32
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e00f      	b.n	8007a1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4013      	ands	r3, r2
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d0cd      	beq.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a30:	e02c      	b.n	8007a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f870 	bl	8007b1c <I2C_IsErrorOccurred>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e02a      	b.n	8007a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d01e      	beq.n	8007a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a4e:	f7fe fd09 	bl	8006464 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d302      	bcc.n	8007a64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d113      	bne.n	8007a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a68:	f043 0220 	orr.w	r2, r3, #32
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e007      	b.n	8007a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d1cb      	bne.n	8007a32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ab0:	e028      	b.n	8007b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f830 	bl	8007b1c <I2C_IsErrorOccurred>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e026      	b.n	8007b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fe fccd 	bl	8006464 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d113      	bne.n	8007b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae0:	f043 0220 	orr.w	r2, r3, #32
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e007      	b.n	8007b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d1cf      	bne.n	8007ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d075      	beq.n	8007c34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b50:	e056      	b.n	8007c00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d052      	beq.n	8007c00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fe fc83 	bl	8006464 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <I2C_IsErrorOccurred+0x54>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d147      	bne.n	8007c00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b92:	d12e      	bne.n	8007bf2 <I2C_IsErrorOccurred+0xd6>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b9a:	d02a      	beq.n	8007bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007b9c:	7cfb      	ldrb	r3, [r7, #19]
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d027      	beq.n	8007bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bb0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007bb2:	f7fe fc57 	bl	8006464 <HAL_GetTick>
 8007bb6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bb8:	e01b      	b.n	8007bf2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007bba:	f7fe fc53 	bl	8006464 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b19      	cmp	r3, #25
 8007bc6:	d914      	bls.n	8007bf2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d1dc      	bne.n	8007bba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d003      	beq.n	8007c16 <I2C_IsErrorOccurred+0xfa>
 8007c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d09d      	beq.n	8007b52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d103      	bne.n	8007c26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2220      	movs	r2, #32
 8007c24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	f043 0308 	orr.w	r3, r3, #8
 8007c6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01c      	beq.n	8007ce4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fe56 	bl	800795c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <I2C_IsErrorOccurred+0x1d4>)
 8007cbc:	400b      	ands	r3, r1
 8007cbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	fe00e800 	.word	0xfe00e800

08007cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	607b      	str	r3, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	817b      	strh	r3, [r7, #10]
 8007d02:	4613      	mov	r3, r2
 8007d04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d06:	897b      	ldrh	r3, [r7, #10]
 8007d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d0c:	7a7b      	ldrb	r3, [r7, #9]
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	0d5b      	lsrs	r3, r3, #21
 8007d2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <I2C_TransferConfig+0x60>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	43db      	mvns	r3, r3
 8007d38:	ea02 0103 	and.w	r1, r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	03ff63ff 	.word	0x03ff63ff

08007d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d138      	bne.n	8007de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e032      	b.n	8007de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2224      	movs	r2, #36	; 0x24
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6819      	ldr	r1, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e000      	b.n	8007de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d139      	bne.n	8007e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e033      	b.n	8007e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2224      	movs	r2, #36	; 0x24
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e000      	b.n	8007e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e78:	2302      	movs	r3, #2
  }
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40007000 	.word	0x40007000

08007ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d130      	bne.n	8007f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007eb4:	4b23      	ldr	r3, [pc, #140]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec0:	d038      	beq.n	8007f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ec2:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007eca:	4a1e      	ldr	r2, [pc, #120]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ed2:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2232      	movs	r2, #50	; 0x32
 8007ed8:	fb02 f303 	mul.w	r3, r2, r3
 8007edc:	4a1b      	ldr	r2, [pc, #108]	; (8007f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007ede:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee2:	0c9b      	lsrs	r3, r3, #18
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ee8:	e002      	b.n	8007ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efc:	d102      	bne.n	8007f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f2      	bne.n	8007eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f10:	d110      	bne.n	8007f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e00f      	b.n	8007f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d007      	beq.n	8007f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f24:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f2c:	4a05      	ldr	r2, [pc, #20]	; (8007f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40007000 	.word	0x40007000
 8007f48:	2000000c 	.word	0x2000000c
 8007f4c:	431bde83 	.word	0x431bde83

08007f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e3d4      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f62:	4ba1      	ldr	r3, [pc, #644]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f6c:	4b9e      	ldr	r3, [pc, #632]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0310 	and.w	r3, r3, #16
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80e4 	beq.w	800814c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <HAL_RCC_OscConfig+0x4a>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b0c      	cmp	r3, #12
 8007f8e:	f040 808b 	bne.w	80080a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	f040 8087 	bne.w	80080a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f9a:	4b93      	ldr	r3, [pc, #588]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x62>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e3ac      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	4b8c      	ldr	r3, [pc, #560]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <HAL_RCC_OscConfig+0x7c>
 8007fc2:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fca:	e005      	b.n	8007fd8 <HAL_RCC_OscConfig+0x88>
 8007fcc:	4b86      	ldr	r3, [pc, #536]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd2:	091b      	lsrs	r3, r3, #4
 8007fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d223      	bcs.n	8008024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fd41 	bl	8008a68 <RCC_SetFlashLatencyFromMSIRange>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e38d      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ff0:	4b7d      	ldr	r3, [pc, #500]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a7c      	ldr	r2, [pc, #496]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007ff6:	f043 0308 	orr.w	r3, r3, #8
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	4b7a      	ldr	r3, [pc, #488]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	4977      	ldr	r1, [pc, #476]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800800a:	4313      	orrs	r3, r2
 800800c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800800e:	4b76      	ldr	r3, [pc, #472]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	4972      	ldr	r1, [pc, #456]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800801e:	4313      	orrs	r3, r2
 8008020:	604b      	str	r3, [r1, #4]
 8008022:	e025      	b.n	8008070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008024:	4b70      	ldr	r3, [pc, #448]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a6f      	ldr	r2, [pc, #444]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800802a:	f043 0308 	orr.w	r3, r3, #8
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	4b6d      	ldr	r3, [pc, #436]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	496a      	ldr	r1, [pc, #424]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008042:	4b69      	ldr	r3, [pc, #420]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	4965      	ldr	r1, [pc, #404]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008052:	4313      	orrs	r3, r2
 8008054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fd01 	bl	8008a68 <RCC_SetFlashLatencyFromMSIRange>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e34d      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008070:	f000 fc36 	bl	80088e0 <HAL_RCC_GetSysClockFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b5c      	ldr	r3, [pc, #368]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	091b      	lsrs	r3, r3, #4
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	495a      	ldr	r1, [pc, #360]	; (80081ec <HAL_RCC_OscConfig+0x29c>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	4a58      	ldr	r2, [pc, #352]	; (80081f0 <HAL_RCC_OscConfig+0x2a0>)
 800808e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008090:	4b58      	ldr	r3, [pc, #352]	; (80081f4 <HAL_RCC_OscConfig+0x2a4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe f995 	bl	80063c4 <HAL_InitTick>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d052      	beq.n	800814a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	e331      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d032      	beq.n	8008116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80080b0:	4b4d      	ldr	r3, [pc, #308]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a4c      	ldr	r2, [pc, #304]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80080bc:	f7fe f9d2 	bl	8006464 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080c4:	f7fe f9ce 	bl	8006464 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e31a      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080d6:	4b44      	ldr	r3, [pc, #272]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080e2:	4b41      	ldr	r3, [pc, #260]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a40      	ldr	r2, [pc, #256]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	4b3e      	ldr	r3, [pc, #248]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	493b      	ldr	r1, [pc, #236]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008100:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	4936      	ldr	r1, [pc, #216]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008110:	4313      	orrs	r3, r2
 8008112:	604b      	str	r3, [r1, #4]
 8008114:	e01a      	b.n	800814c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008116:	4b34      	ldr	r3, [pc, #208]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a33      	ldr	r2, [pc, #204]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008122:	f7fe f99f 	bl	8006464 <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008128:	e008      	b.n	800813c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800812a:	f7fe f99b 	bl	8006464 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e2e7      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800813c:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <HAL_RCC_OscConfig+0x1da>
 8008148:	e000      	b.n	800814c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800814a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d074      	beq.n	8008242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b08      	cmp	r3, #8
 800815c:	d005      	beq.n	800816a <HAL_RCC_OscConfig+0x21a>
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b0c      	cmp	r3, #12
 8008162:	d10e      	bne.n	8008182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d10b      	bne.n	8008182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d064      	beq.n	8008240 <HAL_RCC_OscConfig+0x2f0>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d160      	bne.n	8008240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e2c4      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818a:	d106      	bne.n	800819a <HAL_RCC_OscConfig+0x24a>
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 8008192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	e01d      	b.n	80081d6 <HAL_RCC_OscConfig+0x286>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081a2:	d10c      	bne.n	80081be <HAL_RCC_OscConfig+0x26e>
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a0f      	ldr	r2, [pc, #60]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	e00b      	b.n	80081d6 <HAL_RCC_OscConfig+0x286>
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a06      	ldr	r2, [pc, #24]	; (80081e8 <HAL_RCC_OscConfig+0x298>)
 80081d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01c      	beq.n	8008218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081de:	f7fe f941 	bl	8006464 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081e4:	e011      	b.n	800820a <HAL_RCC_OscConfig+0x2ba>
 80081e6:	bf00      	nop
 80081e8:	40021000 	.word	0x40021000
 80081ec:	0801a6f0 	.word	0x0801a6f0
 80081f0:	2000000c 	.word	0x2000000c
 80081f4:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081f8:	f7fe f934 	bl	8006464 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b64      	cmp	r3, #100	; 0x64
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e280      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800820a:	4baf      	ldr	r3, [pc, #700]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <HAL_RCC_OscConfig+0x2a8>
 8008216:	e014      	b.n	8008242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008218:	f7fe f924 	bl	8006464 <HAL_GetTick>
 800821c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800821e:	e008      	b.n	8008232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008220:	f7fe f920 	bl	8006464 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b64      	cmp	r3, #100	; 0x64
 800822c:	d901      	bls.n	8008232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e26c      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008232:	4ba5      	ldr	r3, [pc, #660]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1f0      	bne.n	8008220 <HAL_RCC_OscConfig+0x2d0>
 800823e:	e000      	b.n	8008242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d060      	beq.n	8008310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d005      	beq.n	8008260 <HAL_RCC_OscConfig+0x310>
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d119      	bne.n	800828e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d116      	bne.n	800828e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008260:	4b99      	ldr	r3, [pc, #612]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCC_OscConfig+0x328>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e249      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008278:	4b93      	ldr	r3, [pc, #588]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	061b      	lsls	r3, r3, #24
 8008286:	4990      	ldr	r1, [pc, #576]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008288:	4313      	orrs	r3, r2
 800828a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800828c:	e040      	b.n	8008310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d023      	beq.n	80082de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008296:	4b8c      	ldr	r3, [pc, #560]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a8b      	ldr	r2, [pc, #556]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800829c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a2:	f7fe f8df 	bl	8006464 <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082a8:	e008      	b.n	80082bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082aa:	f7fe f8db 	bl	8006464 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d901      	bls.n	80082bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e227      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082bc:	4b82      	ldr	r3, [pc, #520]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0f0      	beq.n	80082aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c8:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	497c      	ldr	r1, [pc, #496]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	604b      	str	r3, [r1, #4]
 80082dc:	e018      	b.n	8008310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082de:	4b7a      	ldr	r3, [pc, #488]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a79      	ldr	r2, [pc, #484]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80082e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ea:	f7fe f8bb 	bl	8006464 <HAL_GetTick>
 80082ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082f0:	e008      	b.n	8008304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082f2:	f7fe f8b7 	bl	8006464 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e203      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008304:	4b70      	ldr	r3, [pc, #448]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f0      	bne.n	80082f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d03c      	beq.n	8008396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01c      	beq.n	800835e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008324:	4b68      	ldr	r3, [pc, #416]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832a:	4a67      	ldr	r2, [pc, #412]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008334:	f7fe f896 	bl	8006464 <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800833a:	e008      	b.n	800834e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800833c:	f7fe f892 	bl	8006464 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d901      	bls.n	800834e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e1de      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800834e:	4b5e      	ldr	r3, [pc, #376]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0ef      	beq.n	800833c <HAL_RCC_OscConfig+0x3ec>
 800835c:	e01b      	b.n	8008396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800835e:	4b5a      	ldr	r3, [pc, #360]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008364:	4a58      	ldr	r2, [pc, #352]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836e:	f7fe f879 	bl	8006464 <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008376:	f7fe f875 	bl	8006464 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e1c1      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008388:	4b4f      	ldr	r3, [pc, #316]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800838a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1ef      	bne.n	8008376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80a6 	beq.w	80084f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083a4:	2300      	movs	r3, #0
 80083a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80083a8:	4b47      	ldr	r3, [pc, #284]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10d      	bne.n	80083d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083b4:	4b44      	ldr	r3, [pc, #272]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80083b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b8:	4a43      	ldr	r2, [pc, #268]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80083ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083be:	6593      	str	r3, [r2, #88]	; 0x58
 80083c0:	4b41      	ldr	r3, [pc, #260]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 80083c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083cc:	2301      	movs	r3, #1
 80083ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083d0:	4b3e      	ldr	r3, [pc, #248]	; (80084cc <HAL_RCC_OscConfig+0x57c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d118      	bne.n	800840e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083dc:	4b3b      	ldr	r3, [pc, #236]	; (80084cc <HAL_RCC_OscConfig+0x57c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a3a      	ldr	r2, [pc, #232]	; (80084cc <HAL_RCC_OscConfig+0x57c>)
 80083e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083e8:	f7fe f83c 	bl	8006464 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f0:	f7fe f838 	bl	8006464 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e184      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008402:	4b32      	ldr	r3, [pc, #200]	; (80084cc <HAL_RCC_OscConfig+0x57c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0f0      	beq.n	80083f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d108      	bne.n	8008428 <HAL_RCC_OscConfig+0x4d8>
 8008416:	4b2c      	ldr	r3, [pc, #176]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841c:	4a2a      	ldr	r2, [pc, #168]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800841e:	f043 0301 	orr.w	r3, r3, #1
 8008422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008426:	e024      	b.n	8008472 <HAL_RCC_OscConfig+0x522>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2b05      	cmp	r3, #5
 800842e:	d110      	bne.n	8008452 <HAL_RCC_OscConfig+0x502>
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008436:	4a24      	ldr	r2, [pc, #144]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008438:	f043 0304 	orr.w	r3, r3, #4
 800843c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008440:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008446:	4a20      	ldr	r2, [pc, #128]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008450:	e00f      	b.n	8008472 <HAL_RCC_OscConfig+0x522>
 8008452:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008458:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800846a:	f023 0304 	bic.w	r3, r3, #4
 800846e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d016      	beq.n	80084a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847a:	f7fd fff3 	bl	8006464 <HAL_GetTick>
 800847e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008480:	e00a      	b.n	8008498 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008482:	f7fd ffef 	bl	8006464 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008490:	4293      	cmp	r3, r2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e139      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <HAL_RCC_OscConfig+0x578>)
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0ed      	beq.n	8008482 <HAL_RCC_OscConfig+0x532>
 80084a6:	e01a      	b.n	80084de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fd ffdc 	bl	8006464 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084ae:	e00f      	b.n	80084d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b0:	f7fd ffd8 	bl	8006464 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80084be:	4293      	cmp	r3, r2
 80084c0:	d906      	bls.n	80084d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e122      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
 80084c6:	bf00      	nop
 80084c8:	40021000 	.word	0x40021000
 80084cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084d0:	4b90      	ldr	r3, [pc, #576]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e8      	bne.n	80084b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084de:	7ffb      	ldrb	r3, [r7, #31]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d105      	bne.n	80084f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084e4:	4b8b      	ldr	r3, [pc, #556]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	4a8a      	ldr	r2, [pc, #552]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80084ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8108 	beq.w	800870a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	2b02      	cmp	r3, #2
 8008500:	f040 80d0 	bne.w	80086a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008504:	4b83      	ldr	r3, [pc, #524]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f003 0203 	and.w	r2, r3, #3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	429a      	cmp	r2, r3
 8008516:	d130      	bne.n	800857a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	3b01      	subs	r3, #1
 8008524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008526:	429a      	cmp	r2, r3
 8008528:	d127      	bne.n	800857a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008536:	429a      	cmp	r2, r3
 8008538:	d11f      	bne.n	800857a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008544:	2a07      	cmp	r2, #7
 8008546:	bf14      	ite	ne
 8008548:	2201      	movne	r2, #1
 800854a:	2200      	moveq	r2, #0
 800854c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800854e:	4293      	cmp	r3, r2
 8008550:	d113      	bne.n	800857a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	3b01      	subs	r3, #1
 8008560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d109      	bne.n	800857a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	3b01      	subs	r3, #1
 8008574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d06e      	beq.n	8008658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b0c      	cmp	r3, #12
 800857e:	d069      	beq.n	8008654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008580:	4b64      	ldr	r3, [pc, #400]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d105      	bne.n	8008598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800858c:	4b61      	ldr	r3, [pc, #388]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0b7      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800859c:	4b5d      	ldr	r3, [pc, #372]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a5c      	ldr	r2, [pc, #368]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80085a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085a8:	f7fd ff5c 	bl	8006464 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b0:	f7fd ff58 	bl	8006464 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e0a4      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085c2:	4b54      	ldr	r3, [pc, #336]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f0      	bne.n	80085b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ce:	4b51      	ldr	r3, [pc, #324]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	4b51      	ldr	r3, [pc, #324]	; (8008718 <HAL_RCC_OscConfig+0x7c8>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085de:	3a01      	subs	r2, #1
 80085e0:	0112      	lsls	r2, r2, #4
 80085e2:	4311      	orrs	r1, r2
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085e8:	0212      	lsls	r2, r2, #8
 80085ea:	4311      	orrs	r1, r2
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085f0:	0852      	lsrs	r2, r2, #1
 80085f2:	3a01      	subs	r2, #1
 80085f4:	0552      	lsls	r2, r2, #21
 80085f6:	4311      	orrs	r1, r2
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80085fc:	0852      	lsrs	r2, r2, #1
 80085fe:	3a01      	subs	r2, #1
 8008600:	0652      	lsls	r2, r2, #25
 8008602:	4311      	orrs	r1, r2
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008608:	0912      	lsrs	r2, r2, #4
 800860a:	0452      	lsls	r2, r2, #17
 800860c:	430a      	orrs	r2, r1
 800860e:	4941      	ldr	r1, [pc, #260]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008610:	4313      	orrs	r3, r2
 8008612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008614:	4b3f      	ldr	r3, [pc, #252]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3e      	ldr	r2, [pc, #248]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 800861a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008620:	4b3c      	ldr	r3, [pc, #240]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	4a3b      	ldr	r2, [pc, #236]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800862a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800862c:	f7fd ff1a 	bl	8006464 <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008634:	f7fd ff16 	bl	8006464 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e062      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008646:	4b33      	ldr	r3, [pc, #204]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0f0      	beq.n	8008634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008652:	e05a      	b.n	800870a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e059      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008658:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d152      	bne.n	800870a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008664:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 800866a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800866e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4a27      	ldr	r2, [pc, #156]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800867a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800867c:	f7fd fef2 	bl	8006464 <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008684:	f7fd feee 	bl	8006464 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e03a      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008696:	4b1f      	ldr	r3, [pc, #124]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0f0      	beq.n	8008684 <HAL_RCC_OscConfig+0x734>
 80086a2:	e032      	b.n	800870a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d02d      	beq.n	8008706 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a19      	ldr	r2, [pc, #100]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80086b6:	4b17      	ldr	r3, [pc, #92]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	4a13      	ldr	r2, [pc, #76]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	4a10      	ldr	r2, [pc, #64]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80086d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086de:	f7fd fec1 	bl	8006464 <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086e4:	e008      	b.n	80086f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086e6:	f7fd febd 	bl	8006464 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e009      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_RCC_OscConfig+0x7c4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1f0      	bne.n	80086e6 <HAL_RCC_OscConfig+0x796>
 8008704:	e001      	b.n	800870a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000
 8008718:	f99d808c 	.word	0xf99d808c

0800871c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e0c8      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008730:	4b66      	ldr	r3, [pc, #408]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0307 	and.w	r3, r3, #7
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d910      	bls.n	8008760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873e:	4b63      	ldr	r3, [pc, #396]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f023 0207 	bic.w	r2, r3, #7
 8008746:	4961      	ldr	r1, [pc, #388]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	4313      	orrs	r3, r2
 800874c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800874e:	4b5f      	ldr	r3, [pc, #380]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d001      	beq.n	8008760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e0b0      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d04c      	beq.n	8008806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d107      	bne.n	8008784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008774:	4b56      	ldr	r3, [pc, #344]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d121      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e09e      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d107      	bne.n	800879c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800878c:	4b50      	ldr	r3, [pc, #320]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d115      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e092      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d107      	bne.n	80087b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087a4:	4b4a      	ldr	r3, [pc, #296]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e086      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087b4:	4b46      	ldr	r3, [pc, #280]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e07e      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087c4:	4b42      	ldr	r3, [pc, #264]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f023 0203 	bic.w	r2, r3, #3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	493f      	ldr	r1, [pc, #252]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d6:	f7fd fe45 	bl	8006464 <HAL_GetTick>
 80087da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087dc:	e00a      	b.n	80087f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087de:	f7fd fe41 	bl	8006464 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e066      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087f4:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 020c 	and.w	r2, r3, #12
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	429a      	cmp	r2, r3
 8008804:	d1eb      	bne.n	80087de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d008      	beq.n	8008824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008812:	4b2f      	ldr	r3, [pc, #188]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	492c      	ldr	r1, [pc, #176]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008824:	4b29      	ldr	r3, [pc, #164]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d210      	bcs.n	8008854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008832:	4b26      	ldr	r3, [pc, #152]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 0207 	bic.w	r2, r3, #7
 800883a:	4924      	ldr	r1, [pc, #144]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	4313      	orrs	r3, r2
 8008840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008842:	4b22      	ldr	r3, [pc, #136]	; (80088cc <HAL_RCC_ClockConfig+0x1b0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d001      	beq.n	8008854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e036      	b.n	80088c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008860:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	4918      	ldr	r1, [pc, #96]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 800886e:	4313      	orrs	r3, r2
 8008870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4910      	ldr	r1, [pc, #64]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 800888e:	4313      	orrs	r3, r2
 8008890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008892:	f000 f825 	bl	80088e0 <HAL_RCC_GetSysClockFreq>
 8008896:	4602      	mov	r2, r0
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <HAL_RCC_ClockConfig+0x1b4>)
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	490c      	ldr	r1, [pc, #48]	; (80088d4 <HAL_RCC_ClockConfig+0x1b8>)
 80088a4:	5ccb      	ldrb	r3, [r1, r3]
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <HAL_RCC_ClockConfig+0x1bc>)
 80088b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <HAL_RCC_ClockConfig+0x1c0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fd fd84 	bl	80063c4 <HAL_InitTick>
 80088bc:	4603      	mov	r3, r0
 80088be:	72fb      	strb	r3, [r7, #11]

  return status;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40022000 	.word	0x40022000
 80088d0:	40021000 	.word	0x40021000
 80088d4:	0801a6f0 	.word	0x0801a6f0
 80088d8:	2000000c 	.word	0x2000000c
 80088dc:	200000e8 	.word	0x200000e8

080088e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b089      	sub	sp, #36	; 0x24
 80088e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ee:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 030c 	and.w	r3, r3, #12
 80088f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088f8:	4b3b      	ldr	r3, [pc, #236]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_RCC_GetSysClockFreq+0x34>
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2b0c      	cmp	r3, #12
 800890c:	d121      	bne.n	8008952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d11e      	bne.n	8008952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008914:	4b34      	ldr	r3, [pc, #208]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d107      	bne.n	8008930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008920:	4b31      	ldr	r3, [pc, #196]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008926:	0a1b      	lsrs	r3, r3, #8
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	e005      	b.n	800893c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008930:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	091b      	lsrs	r3, r3, #4
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800893c:	4a2b      	ldr	r2, [pc, #172]	; (80089ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10d      	bne.n	8008968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b04      	cmp	r3, #4
 8008956:	d102      	bne.n	800895e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	e004      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b08      	cmp	r3, #8
 8008962:	d101      	bne.n	8008968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008964:	4b23      	ldr	r3, [pc, #140]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b0c      	cmp	r3, #12
 800896c:	d134      	bne.n	80089d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800896e:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d003      	beq.n	8008986 <HAL_RCC_GetSysClockFreq+0xa6>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d003      	beq.n	800898c <HAL_RCC_GetSysClockFreq+0xac>
 8008984:	e005      	b.n	8008992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008986:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008988:	617b      	str	r3, [r7, #20]
      break;
 800898a:	e005      	b.n	8008998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800898c:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800898e:	617b      	str	r3, [r7, #20]
      break;
 8008990:	e002      	b.n	8008998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	617b      	str	r3, [r7, #20]
      break;
 8008996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008998:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	3301      	adds	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	fb02 f203 	mul.w	r2, r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089be:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	0e5b      	lsrs	r3, r3, #25
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	3301      	adds	r3, #1
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80089d8:	69bb      	ldr	r3, [r7, #24]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3724      	adds	r7, #36	; 0x24
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40021000 	.word	0x40021000
 80089ec:	0801a708 	.word	0x0801a708
 80089f0:	00f42400 	.word	0x00f42400
 80089f4:	007a1200 	.word	0x007a1200

080089f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089fc:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80089fe:	681b      	ldr	r3, [r3, #0]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	2000000c 	.word	0x2000000c

08008a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a14:	f7ff fff0 	bl	80089f8 <HAL_RCC_GetHCLKFreq>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	4904      	ldr	r1, [pc, #16]	; (8008a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a26:	5ccb      	ldrb	r3, [r1, r3]
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	40021000 	.word	0x40021000
 8008a38:	0801a700 	.word	0x0801a700

08008a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a40:	f7ff ffda 	bl	80089f8 <HAL_RCC_GetHCLKFreq>
 8008a44:	4602      	mov	r2, r0
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	0adb      	lsrs	r3, r3, #11
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	4904      	ldr	r1, [pc, #16]	; (8008a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a52:	5ccb      	ldrb	r3, [r1, r3]
 8008a54:	f003 031f 	and.w	r3, r3, #31
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40021000 	.word	0x40021000
 8008a64:	0801a700 	.word	0x0801a700

08008a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a74:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a80:	f7ff fa02 	bl	8007e88 <HAL_PWREx_GetVoltageRange>
 8008a84:	6178      	str	r0, [r7, #20]
 8008a86:	e014      	b.n	8008ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8c:	4a24      	ldr	r2, [pc, #144]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a92:	6593      	str	r3, [r2, #88]	; 0x58
 8008a94:	4b22      	ldr	r3, [pc, #136]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008aa0:	f7ff f9f2 	bl	8007e88 <HAL_PWREx_GetVoltageRange>
 8008aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008aa6:	4b1e      	ldr	r3, [pc, #120]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	; (8008b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab8:	d10b      	bne.n	8008ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d919      	bls.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2ba0      	cmp	r3, #160	; 0xa0
 8008ac4:	d902      	bls.n	8008acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	e013      	b.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008acc:	2301      	movs	r3, #1
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	e010      	b.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b80      	cmp	r3, #128	; 0x80
 8008ad6:	d902      	bls.n	8008ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ad8:	2303      	movs	r3, #3
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	e00a      	b.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d102      	bne.n	8008aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	e004      	b.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b70      	cmp	r3, #112	; 0x70
 8008aee:	d101      	bne.n	8008af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008af0:	2301      	movs	r3, #1
 8008af2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f023 0207 	bic.w	r2, r3, #7
 8008afc:	4909      	ldr	r1, [pc, #36]	; (8008b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d001      	beq.n	8008b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40021000 	.word	0x40021000
 8008b24:	40022000 	.word	0x40022000

08008b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b30:	2300      	movs	r3, #0
 8008b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b34:	2300      	movs	r3, #0
 8008b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d041      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b4c:	d02a      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b52:	d824      	bhi.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b58:	d008      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b5e:	d81e      	bhi.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b68:	d010      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b6a:	e018      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b6c:	4b86      	ldr	r3, [pc, #536]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	4a85      	ldr	r2, [pc, #532]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b78:	e015      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fabb 	bl	80090fc <RCCEx_PLLSAI1_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b8a:	e00c      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3320      	adds	r3, #32
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fba6 	bl	80092e4 <RCCEx_PLLSAI2_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b9c:	e003      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba6:	7cfb      	ldrb	r3, [r7, #19]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bac:	4b76      	ldr	r3, [pc, #472]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bba:	4973      	ldr	r1, [pc, #460]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008bc2:	e001      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	7cfb      	ldrb	r3, [r7, #19]
 8008bc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d041      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bdc:	d02a      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008bde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008be2:	d824      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008be8:	d008      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bee:	d81e      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bf8:	d010      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008bfa:	e018      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bfc:	4b62      	ldr	r3, [pc, #392]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a61      	ldr	r2, [pc, #388]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c08:	e015      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 fa73 	bl	80090fc <RCCEx_PLLSAI1_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c1a:	e00c      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3320      	adds	r3, #32
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fb5e 	bl	80092e4 <RCCEx_PLLSAI2_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008c2c:	e003      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	74fb      	strb	r3, [r7, #19]
      break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c36:	7cfb      	ldrb	r3, [r7, #19]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c3c:	4b52      	ldr	r3, [pc, #328]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4a:	494f      	ldr	r1, [pc, #316]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008c52:	e001      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	7cfb      	ldrb	r3, [r7, #19]
 8008c56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 80a0 	beq.w	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c66:	2300      	movs	r3, #0
 8008c68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c6a:	4b47      	ldr	r3, [pc, #284]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00d      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c80:	4b41      	ldr	r3, [pc, #260]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c84:	4a40      	ldr	r2, [pc, #256]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c8c:	4b3e      	ldr	r3, [pc, #248]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c94:	60bb      	str	r3, [r7, #8]
 8008c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c9c:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a3a      	ldr	r2, [pc, #232]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ca8:	f7fd fbdc 	bl	8006464 <HAL_GetTick>
 8008cac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008cae:	e009      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cb0:	f7fd fbd8 	bl	8006464 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d902      	bls.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	74fb      	strb	r3, [r7, #19]
        break;
 8008cc2:	e005      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008cc4:	4b31      	ldr	r3, [pc, #196]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0ef      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008cd0:	7cfb      	ldrb	r3, [r7, #19]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d15c      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cd6:	4b2c      	ldr	r3, [pc, #176]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01f      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d019      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008cf4:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d00:	4b21      	ldr	r3, [pc, #132]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d06:	4a20      	ldr	r2, [pc, #128]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d10:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d016      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d32:	f7fd fb97 	bl	8006464 <HAL_GetTick>
 8008d36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d38:	e00b      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d3a:	f7fd fb93 	bl	8006464 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d902      	bls.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	74fb      	strb	r3, [r7, #19]
            break;
 8008d50:	e006      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ec      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008d60:	7cfb      	ldrb	r3, [r7, #19]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d66:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d76:	4904      	ldr	r1, [pc, #16]	; (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d7e:	e009      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d80:	7cfb      	ldrb	r3, [r7, #19]
 8008d82:	74bb      	strb	r3, [r7, #18]
 8008d84:	e006      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008d86:	bf00      	nop
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d94:	7c7b      	ldrb	r3, [r7, #17]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d105      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d9a:	4b9e      	ldr	r3, [pc, #632]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	4a9d      	ldr	r2, [pc, #628]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008da4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008db2:	4b98      	ldr	r3, [pc, #608]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db8:	f023 0203 	bic.w	r2, r3, #3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	4994      	ldr	r1, [pc, #592]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008dd4:	4b8f      	ldr	r3, [pc, #572]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dda:	f023 020c 	bic.w	r2, r3, #12
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	498c      	ldr	r1, [pc, #560]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008df6:	4b87      	ldr	r3, [pc, #540]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	4983      	ldr	r1, [pc, #524]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0308 	and.w	r3, r3, #8
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e18:	4b7e      	ldr	r3, [pc, #504]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	497b      	ldr	r1, [pc, #492]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e3a:	4b76      	ldr	r3, [pc, #472]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e48:	4972      	ldr	r1, [pc, #456]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e5c:	4b6d      	ldr	r3, [pc, #436]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6a:	496a      	ldr	r1, [pc, #424]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e7e:	4b65      	ldr	r3, [pc, #404]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8c:	4961      	ldr	r1, [pc, #388]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ea0:	4b5c      	ldr	r3, [pc, #368]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eae:	4959      	ldr	r1, [pc, #356]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ec2:	4b54      	ldr	r3, [pc, #336]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	4950      	ldr	r1, [pc, #320]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ee4:	4b4b      	ldr	r3, [pc, #300]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef2:	4948      	ldr	r1, [pc, #288]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f06:	4b43      	ldr	r3, [pc, #268]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f14:	493f      	ldr	r1, [pc, #252]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d028      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f28:	4b3a      	ldr	r3, [pc, #232]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f36:	4937      	ldr	r1, [pc, #220]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f46:	d106      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f48:	4b32      	ldr	r3, [pc, #200]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	4a31      	ldr	r2, [pc, #196]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f52:	60d3      	str	r3, [r2, #12]
 8008f54:	e011      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f5e:	d10c      	bne.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	2101      	movs	r1, #1
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f8c8 	bl	80090fc <RCCEx_PLLSAI1_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008f70:	7cfb      	ldrb	r3, [r7, #19]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008f76:	7cfb      	ldrb	r3, [r7, #19]
 8008f78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d028      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f86:	4b23      	ldr	r3, [pc, #140]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f94:	491f      	ldr	r1, [pc, #124]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fa4:	d106      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fa6:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fb0:	60d3      	str	r3, [r2, #12]
 8008fb2:	e011      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fbc:	d10c      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f899 	bl	80090fc <RCCEx_PLLSAI1_Config>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fce:	7cfb      	ldrb	r3, [r7, #19]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008fd4:	7cfb      	ldrb	r3, [r7, #19]
 8008fd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02b      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fe4:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff2:	4908      	ldr	r1, [pc, #32]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009002:	d109      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	4a02      	ldr	r2, [pc, #8]	; (8009014 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800900a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800900e:	60d3      	str	r3, [r2, #12]
 8009010:	e014      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009012:	bf00      	nop
 8009014:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009020:	d10c      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3304      	adds	r3, #4
 8009026:	2101      	movs	r1, #1
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f867 	bl	80090fc <RCCEx_PLLSAI1_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009032:	7cfb      	ldrb	r3, [r7, #19]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009038:	7cfb      	ldrb	r3, [r7, #19]
 800903a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d02f      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009048:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800904a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009056:	4928      	ldr	r1, [pc, #160]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009058:	4313      	orrs	r3, r2
 800905a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009066:	d10d      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	2102      	movs	r1, #2
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f844 	bl	80090fc <RCCEx_PLLSAI1_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d014      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800907e:	7cfb      	ldrb	r3, [r7, #19]
 8009080:	74bb      	strb	r3, [r7, #18]
 8009082:	e011      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908c:	d10c      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3320      	adds	r3, #32
 8009092:	2102      	movs	r1, #2
 8009094:	4618      	mov	r0, r3
 8009096:	f000 f925 	bl	80092e4 <RCCEx_PLLSAI2_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800909e:	7cfb      	ldrb	r3, [r7, #19]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80090a4:	7cfb      	ldrb	r3, [r7, #19]
 80090a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090b4:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c2:	490d      	ldr	r1, [pc, #52]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090d6:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e6:	4904      	ldr	r1, [pc, #16]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80090ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	40021000 	.word	0x40021000

080090fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800910a:	4b75      	ldr	r3, [pc, #468]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d018      	beq.n	8009148 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009116:	4b72      	ldr	r3, [pc, #456]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f003 0203 	and.w	r2, r3, #3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d10d      	bne.n	8009142 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
       ||
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800912e:	4b6c      	ldr	r3, [pc, #432]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	091b      	lsrs	r3, r3, #4
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
       ||
 800913e:	429a      	cmp	r2, r3
 8009140:	d047      	beq.n	80091d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
 8009146:	e044      	b.n	80091d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b03      	cmp	r3, #3
 800914e:	d018      	beq.n	8009182 <RCCEx_PLLSAI1_Config+0x86>
 8009150:	2b03      	cmp	r3, #3
 8009152:	d825      	bhi.n	80091a0 <RCCEx_PLLSAI1_Config+0xa4>
 8009154:	2b01      	cmp	r3, #1
 8009156:	d002      	beq.n	800915e <RCCEx_PLLSAI1_Config+0x62>
 8009158:	2b02      	cmp	r3, #2
 800915a:	d009      	beq.n	8009170 <RCCEx_PLLSAI1_Config+0x74>
 800915c:	e020      	b.n	80091a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800915e:	4b60      	ldr	r3, [pc, #384]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d11d      	bne.n	80091a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800916e:	e01a      	b.n	80091a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009170:	4b5b      	ldr	r3, [pc, #364]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009178:	2b00      	cmp	r3, #0
 800917a:	d116      	bne.n	80091aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009180:	e013      	b.n	80091aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009182:	4b57      	ldr	r3, [pc, #348]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10f      	bne.n	80091ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800918e:	4b54      	ldr	r3, [pc, #336]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d109      	bne.n	80091ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800919e:	e006      	b.n	80091ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	73fb      	strb	r3, [r7, #15]
      break;
 80091a4:	e004      	b.n	80091b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091a6:	bf00      	nop
 80091a8:	e002      	b.n	80091b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10d      	bne.n	80091d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80091b6:	4b4a      	ldr	r3, [pc, #296]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	430b      	orrs	r3, r1
 80091cc:	4944      	ldr	r1, [pc, #272]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d17d      	bne.n	80092d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80091d8:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a40      	ldr	r2, [pc, #256]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e4:	f7fd f93e 	bl	8006464 <HAL_GetTick>
 80091e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091ea:	e009      	b.n	8009200 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80091ec:	f7fd f93a 	bl	8006464 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d902      	bls.n	8009200 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	73fb      	strb	r3, [r7, #15]
        break;
 80091fe:	e005      	b.n	800920c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009200:	4b37      	ldr	r3, [pc, #220]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1ef      	bne.n	80091ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d160      	bne.n	80092d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d111      	bne.n	800923c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6892      	ldr	r2, [r2, #8]
 8009228:	0211      	lsls	r1, r2, #8
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68d2      	ldr	r2, [r2, #12]
 800922e:	0912      	lsrs	r2, r2, #4
 8009230:	0452      	lsls	r2, r2, #17
 8009232:	430a      	orrs	r2, r1
 8009234:	492a      	ldr	r1, [pc, #168]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009236:	4313      	orrs	r3, r2
 8009238:	610b      	str	r3, [r1, #16]
 800923a:	e027      	b.n	800928c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d112      	bne.n	8009268 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009242:	4b27      	ldr	r3, [pc, #156]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800924a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6892      	ldr	r2, [r2, #8]
 8009252:	0211      	lsls	r1, r2, #8
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6912      	ldr	r2, [r2, #16]
 8009258:	0852      	lsrs	r2, r2, #1
 800925a:	3a01      	subs	r2, #1
 800925c:	0552      	lsls	r2, r2, #21
 800925e:	430a      	orrs	r2, r1
 8009260:	491f      	ldr	r1, [pc, #124]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009262:	4313      	orrs	r3, r2
 8009264:	610b      	str	r3, [r1, #16]
 8009266:	e011      	b.n	800928c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009268:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009270:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6892      	ldr	r2, [r2, #8]
 8009278:	0211      	lsls	r1, r2, #8
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6952      	ldr	r2, [r2, #20]
 800927e:	0852      	lsrs	r2, r2, #1
 8009280:	3a01      	subs	r2, #1
 8009282:	0652      	lsls	r2, r2, #25
 8009284:	430a      	orrs	r2, r1
 8009286:	4916      	ldr	r1, [pc, #88]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009288:	4313      	orrs	r3, r2
 800928a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800928c:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009296:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009298:	f7fd f8e4 	bl	8006464 <HAL_GetTick>
 800929c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800929e:	e009      	b.n	80092b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092a0:	f7fd f8e0 	bl	8006464 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d902      	bls.n	80092b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	73fb      	strb	r3, [r7, #15]
          break;
 80092b2:	e005      	b.n	80092c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0ef      	beq.n	80092a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	4904      	ldr	r1, [pc, #16]	; (80092e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40021000 	.word	0x40021000

080092e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092f2:	4b6a      	ldr	r3, [pc, #424]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80092fe:	4b67      	ldr	r3, [pc, #412]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0203 	and.w	r2, r3, #3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d10d      	bne.n	800932a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
       ||
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009316:	4b61      	ldr	r3, [pc, #388]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	091b      	lsrs	r3, r3, #4
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
       ||
 8009326:	429a      	cmp	r2, r3
 8009328:	d047      	beq.n	80093ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	73fb      	strb	r3, [r7, #15]
 800932e:	e044      	b.n	80093ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d018      	beq.n	800936a <RCCEx_PLLSAI2_Config+0x86>
 8009338:	2b03      	cmp	r3, #3
 800933a:	d825      	bhi.n	8009388 <RCCEx_PLLSAI2_Config+0xa4>
 800933c:	2b01      	cmp	r3, #1
 800933e:	d002      	beq.n	8009346 <RCCEx_PLLSAI2_Config+0x62>
 8009340:	2b02      	cmp	r3, #2
 8009342:	d009      	beq.n	8009358 <RCCEx_PLLSAI2_Config+0x74>
 8009344:	e020      	b.n	8009388 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009346:	4b55      	ldr	r3, [pc, #340]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d11d      	bne.n	800938e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009356:	e01a      	b.n	800938e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009358:	4b50      	ldr	r3, [pc, #320]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009360:	2b00      	cmp	r3, #0
 8009362:	d116      	bne.n	8009392 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009368:	e013      	b.n	8009392 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800936a:	4b4c      	ldr	r3, [pc, #304]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10f      	bne.n	8009396 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009376:	4b49      	ldr	r3, [pc, #292]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009386:	e006      	b.n	8009396 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
      break;
 800938c:	e004      	b.n	8009398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800938e:	bf00      	nop
 8009390:	e002      	b.n	8009398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009396:	bf00      	nop
    }

    if(status == HAL_OK)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10d      	bne.n	80093ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800939e:	4b3f      	ldr	r3, [pc, #252]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6819      	ldr	r1, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	430b      	orrs	r3, r1
 80093b4:	4939      	ldr	r1, [pc, #228]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d167      	bne.n	8009490 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80093c0:	4b36      	ldr	r3, [pc, #216]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a35      	ldr	r2, [pc, #212]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093cc:	f7fd f84a 	bl	8006464 <HAL_GetTick>
 80093d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80093d2:	e009      	b.n	80093e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80093d4:	f7fd f846 	bl	8006464 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d902      	bls.n	80093e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	73fb      	strb	r3, [r7, #15]
        break;
 80093e6:	e005      	b.n	80093f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80093e8:	4b2c      	ldr	r3, [pc, #176]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1ef      	bne.n	80093d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d14a      	bne.n	8009490 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d111      	bne.n	8009424 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009400:	4b26      	ldr	r3, [pc, #152]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6892      	ldr	r2, [r2, #8]
 8009410:	0211      	lsls	r1, r2, #8
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68d2      	ldr	r2, [r2, #12]
 8009416:	0912      	lsrs	r2, r2, #4
 8009418:	0452      	lsls	r2, r2, #17
 800941a:	430a      	orrs	r2, r1
 800941c:	491f      	ldr	r1, [pc, #124]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800941e:	4313      	orrs	r3, r2
 8009420:	614b      	str	r3, [r1, #20]
 8009422:	e011      	b.n	8009448 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800942c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6892      	ldr	r2, [r2, #8]
 8009434:	0211      	lsls	r1, r2, #8
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6912      	ldr	r2, [r2, #16]
 800943a:	0852      	lsrs	r2, r2, #1
 800943c:	3a01      	subs	r2, #1
 800943e:	0652      	lsls	r2, r2, #25
 8009440:	430a      	orrs	r2, r1
 8009442:	4916      	ldr	r1, [pc, #88]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009444:	4313      	orrs	r3, r2
 8009446:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009448:	4b14      	ldr	r3, [pc, #80]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a13      	ldr	r2, [pc, #76]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800944e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009454:	f7fd f806 	bl	8006464 <HAL_GetTick>
 8009458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800945a:	e009      	b.n	8009470 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800945c:	f7fd f802 	bl	8006464 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d902      	bls.n	8009470 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
          break;
 800946e:	e005      	b.n	800947c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0ef      	beq.n	800945c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009482:	4b06      	ldr	r3, [pc, #24]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009484:	695a      	ldr	r2, [r3, #20]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	4904      	ldr	r1, [pc, #16]	; (800949c <RCCEx_PLLSAI2_Config+0x1b8>)
 800948c:	4313      	orrs	r3, r2
 800948e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40021000 	.word	0x40021000

080094a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d06c      	beq.n	800958c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f8 ff86 	bl	80023d8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	22ca      	movs	r2, #202	; 0xca
 80094da:	625a      	str	r2, [r3, #36]	; 0x24
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2253      	movs	r2, #83	; 0x53
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9a0 	bl	800982a <RTC_EnterInitMode>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d14b      	bne.n	800958c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6812      	ldr	r2, [r2, #0]
 80094fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009506:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6899      	ldr	r1, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68d2      	ldr	r2, [r2, #12]
 800952e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6919      	ldr	r1, [r3, #16]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	041a      	lsls	r2, r3, #16
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	430a      	orrs	r2, r1
 8009542:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f9a3 	bl	8009890 <RTC_ExitInitMode>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11b      	bne.n	800958c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0203 	bic.w	r2, r2, #3
 8009562:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	22ff      	movs	r2, #255	; 0xff
 8009582:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800958c:	7bfb      	ldrb	r3, [r7, #15]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009596:	b590      	push	{r4, r7, lr}
 8009598:	b087      	sub	sp, #28
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_RTC_SetTime+0x1a>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e08b      	b.n	80096c8 <HAL_RTC_SetTime+0x132>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	22ca      	movs	r2, #202	; 0xca
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2253      	movs	r2, #83	; 0x53
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f92a 	bl	800982a <RTC_EnterInitMode>
 80095d6:	4603      	mov	r3, r0
 80095d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80095da:	7cfb      	ldrb	r3, [r7, #19]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d163      	bne.n	80096a8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d126      	bne.n	8009634 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2200      	movs	r2, #0
 80095f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f984 	bl	800990c <RTC_ByteToBcd2>
 8009604:	4603      	mov	r3, r0
 8009606:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f97d 	bl	800990c <RTC_ByteToBcd2>
 8009612:	4603      	mov	r3, r0
 8009614:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009616:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	789b      	ldrb	r3, [r3, #2]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f975 	bl	800990c <RTC_ByteToBcd2>
 8009622:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009624:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	78db      	ldrb	r3, [r3, #3]
 800962c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e018      	b.n	8009666 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2200      	movs	r2, #0
 8009646:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009654:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800965a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	78db      	ldrb	r3, [r3, #3]
 8009660:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009670:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009674:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6899      	ldr	r1, [r3, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	431a      	orrs	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f8f6 	bl	8009890 <RTC_ExitInitMode>
 80096a4:	4603      	mov	r3, r0
 80096a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	22ff      	movs	r2, #255	; 0xff
 80096ae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80096b0:	7cfb      	ldrb	r3, [r7, #19]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80096c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}

080096d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d101      	bne.n	80096ea <HAL_RTC_SetDate+0x1a>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e075      	b.n	80097d6 <HAL_RTC_SetDate+0x106>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2202      	movs	r2, #2
 80096f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10e      	bne.n	800971e <HAL_RTC_SetDate+0x4e>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	f023 0310 	bic.w	r3, r3, #16
 8009714:	b2db      	uxtb	r3, r3
 8009716:	330a      	adds	r3, #10
 8009718:	b2da      	uxtb	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d11c      	bne.n	800975e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	78db      	ldrb	r3, [r3, #3]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f8ef 	bl	800990c <RTC_ByteToBcd2>
 800972e:	4603      	mov	r3, r0
 8009730:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f8e8 	bl	800990c <RTC_ByteToBcd2>
 800973c:	4603      	mov	r3, r0
 800973e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009740:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	789b      	ldrb	r3, [r3, #2]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f8e0 	bl	800990c <RTC_ByteToBcd2>
 800974c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800974e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e00e      	b.n	800977c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	78db      	ldrb	r3, [r3, #3]
 8009762:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	785b      	ldrb	r3, [r3, #1]
 8009768:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800976a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009770:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009778:	4313      	orrs	r3, r2
 800977a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	22ca      	movs	r2, #202	; 0xca
 8009782:	625a      	str	r2, [r3, #36]	; 0x24
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2253      	movs	r2, #83	; 0x53
 800978a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f84c 	bl	800982a <RTC_EnterInitMode>
 8009792:	4603      	mov	r3, r0
 8009794:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009796:	7cfb      	ldrb	r3, [r7, #19]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10c      	bne.n	80097b6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80097aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f86f 	bl	8009890 <RTC_ExitInitMode>
 80097b2:	4603      	mov	r3, r0
 80097b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	22ff      	movs	r2, #255	; 0xff
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80097be:	7cfb      	ldrb	r3, [r7, #19]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80097d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd90      	pop	{r4, r7, pc}

080097de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097f4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80097f6:	f7fc fe35 	bl	8006464 <HAL_GetTick>
 80097fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097fc:	e009      	b.n	8009812 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097fe:	f7fc fe31 	bl	8006464 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800980c:	d901      	bls.n	8009812 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e007      	b.n	8009822 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0ee      	beq.n	80097fe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d120      	bne.n	8009886 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800984e:	f7fc fe09 	bl	8006464 <HAL_GetTick>
 8009852:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009854:	e00d      	b.n	8009872 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009856:	f7fc fe05 	bl	8006464 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009864:	d905      	bls.n	8009872 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2203      	movs	r2, #3
 800986e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <RTC_EnterInitMode+0x5c>
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d1e7      	bne.n	8009856 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800989c:	4b1a      	ldr	r3, [pc, #104]	; (8009908 <RTC_ExitInitMode+0x78>)
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4a19      	ldr	r2, [pc, #100]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80098a8:	4b17      	ldr	r3, [pc, #92]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10c      	bne.n	80098ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ff92 	bl	80097de <HAL_RTC_WaitForSynchro>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01e      	beq.n	80098fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2203      	movs	r2, #3
 80098c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	73fb      	strb	r3, [r7, #15]
 80098cc:	e017      	b.n	80098fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	4a0d      	ldr	r2, [pc, #52]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098d4:	f023 0320 	bic.w	r3, r3, #32
 80098d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff ff7f 	bl	80097de <HAL_RTC_WaitForSynchro>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2203      	movs	r2, #3
 80098ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	4a04      	ldr	r2, [pc, #16]	; (8009908 <RTC_ExitInitMode+0x78>)
 80098f8:	f043 0320 	orr.w	r3, r3, #32
 80098fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	40002800 	.word	0x40002800

0800990c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800991e:	e005      	b.n	800992c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	3b0a      	subs	r3, #10
 800992a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	2b09      	cmp	r3, #9
 8009930:	d8f6      	bhi.n	8009920 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	b2da      	uxtb	r2, r3
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	4313      	orrs	r3, r2
 800993e:	b2db      	uxtb	r3, r3
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e049      	b.n	80099f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7f9 f882 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f000 fae0 	bl	8009f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d001      	beq.n	8009a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e047      	b.n	8009aa4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a23      	ldr	r2, [pc, #140]	; (8009ab0 <HAL_TIM_Base_Start+0xb4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01d      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a2e:	d018      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1f      	ldr	r2, [pc, #124]	; (8009ab4 <HAL_TIM_Base_Start+0xb8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <HAL_TIM_Base_Start+0xbc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00e      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a1c      	ldr	r2, [pc, #112]	; (8009abc <HAL_TIM_Base_Start+0xc0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d009      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <HAL_TIM_Base_Start+0xc4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_TIM_Base_Start+0x66>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a19      	ldr	r2, [pc, #100]	; (8009ac4 <HAL_TIM_Base_Start+0xc8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d115      	bne.n	8009a8e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <HAL_TIM_Base_Start+0xcc>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b06      	cmp	r3, #6
 8009a72:	d015      	beq.n	8009aa0 <HAL_TIM_Base_Start+0xa4>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a7a:	d011      	beq.n	8009aa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8c:	e008      	b.n	8009aa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f042 0201 	orr.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e000      	b.n	8009aa2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	40012c00 	.word	0x40012c00
 8009ab4:	40000400 	.word	0x40000400
 8009ab8:	40000800 	.word	0x40000800
 8009abc:	40000c00 	.word	0x40000c00
 8009ac0:	40013400 	.word	0x40013400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	00010007 	.word	0x00010007

08009acc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6a1a      	ldr	r2, [r3, #32]
 8009ada:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ade:	4013      	ands	r3, r2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10f      	bne.n	8009b04 <HAL_TIM_Base_Stop+0x38>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6a1a      	ldr	r2, [r3, #32]
 8009aea:	f240 4344 	movw	r3, #1092	; 0x444
 8009aee:	4013      	ands	r3, r2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d107      	bne.n	8009b04 <HAL_TIM_Base_Stop+0x38>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0201 	bic.w	r2, r2, #1
 8009b02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d122      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d11b      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f06f 0202 	mvn.w	r2, #2
 8009b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9d8 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009b62:	e005      	b.n	8009b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9ca 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f9db 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d122      	bne.n	8009bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d11b      	bne.n	8009bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f06f 0204 	mvn.w	r2, #4
 8009b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9ae 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009bb6:	e005      	b.n	8009bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f9a0 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9b1 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d122      	bne.n	8009c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	2b08      	cmp	r3, #8
 8009be4:	d11b      	bne.n	8009c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f06f 0208 	mvn.w	r2, #8
 8009bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f984 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009c0a:	e005      	b.n	8009c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f976 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f987 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	f003 0310 	and.w	r3, r3, #16
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	d122      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b10      	cmp	r3, #16
 8009c38:	d11b      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f06f 0210 	mvn.w	r2, #16
 8009c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2208      	movs	r2, #8
 8009c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f95a 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009c5e:	e005      	b.n	8009c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f94c 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f95d 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d10e      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d107      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f06f 0201 	mvn.w	r2, #1
 8009c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f926 	bl	8009eea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca8:	2b80      	cmp	r3, #128	; 0x80
 8009caa:	d10e      	bne.n	8009cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb6:	2b80      	cmp	r3, #128	; 0x80
 8009cb8:	d107      	bne.n	8009cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fb09 	bl	800a2dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd8:	d10e      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce4:	2b80      	cmp	r3, #128	; 0x80
 8009ce6:	d107      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fafc 	bl	800a2f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	d10e      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d107      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f90b 	bl	8009f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	d10e      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d107      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f06f 0220 	mvn.w	r2, #32
 8009d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fabc 	bl	800a2c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_TIM_ConfigClockSource+0x1c>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e0b6      	b.n	8009ee2 <HAL_TIM_ConfigClockSource+0x18a>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db0:	d03e      	beq.n	8009e30 <HAL_TIM_ConfigClockSource+0xd8>
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db6:	f200 8087 	bhi.w	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dbe:	f000 8086 	beq.w	8009ece <HAL_TIM_ConfigClockSource+0x176>
 8009dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc6:	d87f      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009dc8:	2b70      	cmp	r3, #112	; 0x70
 8009dca:	d01a      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0xaa>
 8009dcc:	2b70      	cmp	r3, #112	; 0x70
 8009dce:	d87b      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009dd0:	2b60      	cmp	r3, #96	; 0x60
 8009dd2:	d050      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x11e>
 8009dd4:	2b60      	cmp	r3, #96	; 0x60
 8009dd6:	d877      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009dd8:	2b50      	cmp	r3, #80	; 0x50
 8009dda:	d03c      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0xfe>
 8009ddc:	2b50      	cmp	r3, #80	; 0x50
 8009dde:	d873      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009de0:	2b40      	cmp	r3, #64	; 0x40
 8009de2:	d058      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x13e>
 8009de4:	2b40      	cmp	r3, #64	; 0x40
 8009de6:	d86f      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009de8:	2b30      	cmp	r3, #48	; 0x30
 8009dea:	d064      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d86b      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d060      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d867      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d05c      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d05a      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15e>
 8009e00:	e062      	b.n	8009ec8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6899      	ldr	r1, [r3, #8]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f000 f9b1 	bl	800a178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	609a      	str	r2, [r3, #8]
      break;
 8009e2e:	e04f      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	6899      	ldr	r1, [r3, #8]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f000 f99a 	bl	800a178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e52:	609a      	str	r2, [r3, #8]
      break;
 8009e54:	e03c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6859      	ldr	r1, [r3, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f000 f90e 	bl	800a084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2150      	movs	r1, #80	; 0x50
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f967 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009e74:	e02c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6859      	ldr	r1, [r3, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f000 f92d 	bl	800a0e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2160      	movs	r1, #96	; 0x60
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f957 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009e94:	e01c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6859      	ldr	r1, [r3, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f000 f8ee 	bl	800a084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2140      	movs	r1, #64	; 0x40
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f947 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009eb4:	e00c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f000 f93e 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009ec6:	e003      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e000      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a40      	ldr	r2, [pc, #256]	; (800a064 <TIM_Base_SetConfig+0x114>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d013      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6e:	d00f      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a3d      	ldr	r2, [pc, #244]	; (800a068 <TIM_Base_SetConfig+0x118>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d00b      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a3c      	ldr	r2, [pc, #240]	; (800a06c <TIM_Base_SetConfig+0x11c>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d007      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a3b      	ldr	r2, [pc, #236]	; (800a070 <TIM_Base_SetConfig+0x120>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d003      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a3a      	ldr	r2, [pc, #232]	; (800a074 <TIM_Base_SetConfig+0x124>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d108      	bne.n	8009fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2f      	ldr	r2, [pc, #188]	; (800a064 <TIM_Base_SetConfig+0x114>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d01f      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb0:	d01b      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2c      	ldr	r2, [pc, #176]	; (800a068 <TIM_Base_SetConfig+0x118>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d017      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a2b      	ldr	r2, [pc, #172]	; (800a06c <TIM_Base_SetConfig+0x11c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d013      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a2a      	ldr	r2, [pc, #168]	; (800a070 <TIM_Base_SetConfig+0x120>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d00f      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a29      	ldr	r2, [pc, #164]	; (800a074 <TIM_Base_SetConfig+0x124>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00b      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a28      	ldr	r2, [pc, #160]	; (800a078 <TIM_Base_SetConfig+0x128>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d007      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a27      	ldr	r2, [pc, #156]	; (800a07c <TIM_Base_SetConfig+0x12c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d003      	beq.n	8009fea <TIM_Base_SetConfig+0x9a>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a26      	ldr	r2, [pc, #152]	; (800a080 <TIM_Base_SetConfig+0x130>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d108      	bne.n	8009ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a10      	ldr	r2, [pc, #64]	; (800a064 <TIM_Base_SetConfig+0x114>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00f      	beq.n	800a048 <TIM_Base_SetConfig+0xf8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a12      	ldr	r2, [pc, #72]	; (800a074 <TIM_Base_SetConfig+0x124>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00b      	beq.n	800a048 <TIM_Base_SetConfig+0xf8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a11      	ldr	r2, [pc, #68]	; (800a078 <TIM_Base_SetConfig+0x128>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d007      	beq.n	800a048 <TIM_Base_SetConfig+0xf8>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a10      	ldr	r2, [pc, #64]	; (800a07c <TIM_Base_SetConfig+0x12c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d003      	beq.n	800a048 <TIM_Base_SetConfig+0xf8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a0f      	ldr	r2, [pc, #60]	; (800a080 <TIM_Base_SetConfig+0x130>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d103      	bne.n	800a050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	691a      	ldr	r2, [r3, #16]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	615a      	str	r2, [r3, #20]
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	40012c00 	.word	0x40012c00
 800a068:	40000400 	.word	0x40000400
 800a06c:	40000800 	.word	0x40000800
 800a070:	40000c00 	.word	0x40000c00
 800a074:	40013400 	.word	0x40013400
 800a078:	40014000 	.word	0x40014000
 800a07c:	40014400 	.word	0x40014400
 800a080:	40014800 	.word	0x40014800

0800a084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 030a 	bic.w	r3, r3, #10
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	621a      	str	r2, [r3, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f023 0210 	bic.w	r2, r3, #16
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a10c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	031b      	lsls	r3, r3, #12
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a11e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	621a      	str	r2, [r3, #32]
}
 800a136:	bf00      	nop
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a142:	b480      	push	{r7}
 800a144:	b085      	sub	sp, #20
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	f043 0307 	orr.w	r3, r3, #7
 800a164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	609a      	str	r2, [r3, #8]
}
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	021a      	lsls	r2, r3, #8
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	609a      	str	r2, [r3, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d101      	bne.n	800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	e068      	b.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a2e      	ldr	r2, [pc, #184]	; (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d108      	bne.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a20a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1e      	ldr	r2, [pc, #120]	; (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d01d      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a242:	d018      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a1b      	ldr	r2, [pc, #108]	; (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d013      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d00e      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d009      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d004      	beq.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a14      	ldr	r2, [pc, #80]	; (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d10c      	bne.n	800a290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	4313      	orrs	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	40012c00 	.word	0x40012c00
 800a2b4:	40013400 	.word	0x40013400
 800a2b8:	40000400 	.word	0x40000400
 800a2bc:	40000800 	.word	0x40000800
 800a2c0:	40000c00 	.word	0x40000c00
 800a2c4:	40014000 	.word	0x40014000

0800a2c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e040      	b.n	800a398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d106      	bne.n	800a32c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f83a 	bl	800a3a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2224      	movs	r2, #36	; 0x24
 800a330:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0201 	bic.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f94a 	bl	800a5dc <UART_SetConfig>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e022      	b.n	800a398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fbc8 	bl	800aaf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a36e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a37e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0201 	orr.w	r2, r2, #1
 800a38e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fc4f 	bl	800ac34 <UART_CheckIdleState>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08a      	sub	sp, #40	; 0x28
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	f040 8082 	bne.w	800a4d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <HAL_UART_Transmit+0x26>
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e07a      	b.n	800a4d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_UART_Transmit+0x38>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e073      	b.n	800a4d4 <HAL_UART_Transmit+0x120>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2221      	movs	r2, #33	; 0x21
 800a400:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a402:	f7fc f82f 	bl	8006464 <HAL_GetTick>
 800a406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	88fa      	ldrh	r2, [r7, #6]
 800a40c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	88fa      	ldrh	r2, [r7, #6]
 800a414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a420:	d108      	bne.n	800a434 <HAL_UART_Transmit+0x80>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d104      	bne.n	800a434 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	61bb      	str	r3, [r7, #24]
 800a432:	e003      	b.n	800a43c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a438:	2300      	movs	r3, #0
 800a43a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a444:	e02d      	b.n	800a4a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2200      	movs	r2, #0
 800a44e:	2180      	movs	r1, #128	; 0x80
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fc38 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e039      	b.n	800a4d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	881a      	ldrh	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a472:	b292      	uxth	r2, r2
 800a474:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	3302      	adds	r3, #2
 800a47a:	61bb      	str	r3, [r7, #24]
 800a47c:	e008      	b.n	800a490 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	b292      	uxth	r2, r2
 800a488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	3301      	adds	r3, #1
 800a48e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1cb      	bne.n	800a446 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2140      	movs	r1, #64	; 0x40
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fc04 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e005      	b.n	800a4d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e000      	b.n	800a4d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a4d2:	2302      	movs	r3, #2
  }
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d142      	bne.n	800a578 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <HAL_UART_Receive_DMA+0x22>
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e03b      	b.n	800a57a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d101      	bne.n	800a510 <HAL_UART_Receive_DMA+0x34>
 800a50c:	2302      	movs	r3, #2
 800a50e:	e034      	b.n	800a57a <HAL_UART_Receive_DMA+0x9e>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a18      	ldr	r2, [pc, #96]	; (800a584 <HAL_UART_Receive_DMA+0xa8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d01f      	beq.n	800a568 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d018      	beq.n	800a568 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	613b      	str	r3, [r7, #16]
   return(result);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	623b      	str	r3, [r7, #32]
 800a556:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	69f9      	ldr	r1, [r7, #28]
 800a55a:	6a3a      	ldr	r2, [r7, #32]
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	61bb      	str	r3, [r7, #24]
   return(result);
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e6      	bne.n	800a536 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	461a      	mov	r2, r3
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fc6e 	bl	800ae50 <UART_Start_Receive_DMA>
 800a574:	4603      	mov	r3, r0
 800a576:	e000      	b.n	800a57a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a578:	2302      	movs	r3, #2
  }
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3728      	adds	r7, #40	; 0x28
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40008000 	.word	0x40008000

0800a588 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	b5b0      	push	{r4, r5, r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4bad      	ldr	r3, [pc, #692]	; (800a8bc <UART_SetConfig+0x2e0>)
 800a608:	4013      	ands	r3, r2
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	69f9      	ldr	r1, [r7, #28]
 800a610:	430b      	orrs	r3, r1
 800a612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4aa2      	ldr	r2, [pc, #648]	; (800a8c0 <UART_SetConfig+0x2e4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	4313      	orrs	r3, r2
 800a642:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	430a      	orrs	r2, r1
 800a656:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a99      	ldr	r2, [pc, #612]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d121      	bne.n	800a6a6 <UART_SetConfig+0xca>
 800a662:	4b99      	ldr	r3, [pc, #612]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d817      	bhi.n	800a6a0 <UART_SetConfig+0xc4>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x9c>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a695 	.word	0x0800a695
 800a680:	0800a68f 	.word	0x0800a68f
 800a684:	0800a69b 	.word	0x0800a69b
 800a688:	2301      	movs	r3, #1
 800a68a:	76fb      	strb	r3, [r7, #27]
 800a68c:	e0e7      	b.n	800a85e <UART_SetConfig+0x282>
 800a68e:	2302      	movs	r3, #2
 800a690:	76fb      	strb	r3, [r7, #27]
 800a692:	e0e4      	b.n	800a85e <UART_SetConfig+0x282>
 800a694:	2304      	movs	r3, #4
 800a696:	76fb      	strb	r3, [r7, #27]
 800a698:	e0e1      	b.n	800a85e <UART_SetConfig+0x282>
 800a69a:	2308      	movs	r3, #8
 800a69c:	76fb      	strb	r3, [r7, #27]
 800a69e:	e0de      	b.n	800a85e <UART_SetConfig+0x282>
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	76fb      	strb	r3, [r7, #27]
 800a6a4:	e0db      	b.n	800a85e <UART_SetConfig+0x282>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a88      	ldr	r2, [pc, #544]	; (800a8cc <UART_SetConfig+0x2f0>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d132      	bne.n	800a716 <UART_SetConfig+0x13a>
 800a6b0:	4b85      	ldr	r3, [pc, #532]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b6:	f003 030c 	and.w	r3, r3, #12
 800a6ba:	2b0c      	cmp	r3, #12
 800a6bc:	d828      	bhi.n	800a710 <UART_SetConfig+0x134>
 800a6be:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <UART_SetConfig+0xe8>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a6f9 	.word	0x0800a6f9
 800a6c8:	0800a711 	.word	0x0800a711
 800a6cc:	0800a711 	.word	0x0800a711
 800a6d0:	0800a711 	.word	0x0800a711
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a711 	.word	0x0800a711
 800a6dc:	0800a711 	.word	0x0800a711
 800a6e0:	0800a711 	.word	0x0800a711
 800a6e4:	0800a6ff 	.word	0x0800a6ff
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a711 	.word	0x0800a711
 800a6f0:	0800a711 	.word	0x0800a711
 800a6f4:	0800a70b 	.word	0x0800a70b
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	76fb      	strb	r3, [r7, #27]
 800a6fc:	e0af      	b.n	800a85e <UART_SetConfig+0x282>
 800a6fe:	2302      	movs	r3, #2
 800a700:	76fb      	strb	r3, [r7, #27]
 800a702:	e0ac      	b.n	800a85e <UART_SetConfig+0x282>
 800a704:	2304      	movs	r3, #4
 800a706:	76fb      	strb	r3, [r7, #27]
 800a708:	e0a9      	b.n	800a85e <UART_SetConfig+0x282>
 800a70a:	2308      	movs	r3, #8
 800a70c:	76fb      	strb	r3, [r7, #27]
 800a70e:	e0a6      	b.n	800a85e <UART_SetConfig+0x282>
 800a710:	2310      	movs	r3, #16
 800a712:	76fb      	strb	r3, [r7, #27]
 800a714:	e0a3      	b.n	800a85e <UART_SetConfig+0x282>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6d      	ldr	r2, [pc, #436]	; (800a8d0 <UART_SetConfig+0x2f4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d120      	bne.n	800a762 <UART_SetConfig+0x186>
 800a720:	4b69      	ldr	r3, [pc, #420]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a72a:	2b30      	cmp	r3, #48	; 0x30
 800a72c:	d013      	beq.n	800a756 <UART_SetConfig+0x17a>
 800a72e:	2b30      	cmp	r3, #48	; 0x30
 800a730:	d814      	bhi.n	800a75c <UART_SetConfig+0x180>
 800a732:	2b20      	cmp	r3, #32
 800a734:	d009      	beq.n	800a74a <UART_SetConfig+0x16e>
 800a736:	2b20      	cmp	r3, #32
 800a738:	d810      	bhi.n	800a75c <UART_SetConfig+0x180>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <UART_SetConfig+0x168>
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d006      	beq.n	800a750 <UART_SetConfig+0x174>
 800a742:	e00b      	b.n	800a75c <UART_SetConfig+0x180>
 800a744:	2300      	movs	r3, #0
 800a746:	76fb      	strb	r3, [r7, #27]
 800a748:	e089      	b.n	800a85e <UART_SetConfig+0x282>
 800a74a:	2302      	movs	r3, #2
 800a74c:	76fb      	strb	r3, [r7, #27]
 800a74e:	e086      	b.n	800a85e <UART_SetConfig+0x282>
 800a750:	2304      	movs	r3, #4
 800a752:	76fb      	strb	r3, [r7, #27]
 800a754:	e083      	b.n	800a85e <UART_SetConfig+0x282>
 800a756:	2308      	movs	r3, #8
 800a758:	76fb      	strb	r3, [r7, #27]
 800a75a:	e080      	b.n	800a85e <UART_SetConfig+0x282>
 800a75c:	2310      	movs	r3, #16
 800a75e:	76fb      	strb	r3, [r7, #27]
 800a760:	e07d      	b.n	800a85e <UART_SetConfig+0x282>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a5b      	ldr	r2, [pc, #364]	; (800a8d4 <UART_SetConfig+0x2f8>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d120      	bne.n	800a7ae <UART_SetConfig+0x1d2>
 800a76c:	4b56      	ldr	r3, [pc, #344]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a776:	2bc0      	cmp	r3, #192	; 0xc0
 800a778:	d013      	beq.n	800a7a2 <UART_SetConfig+0x1c6>
 800a77a:	2bc0      	cmp	r3, #192	; 0xc0
 800a77c:	d814      	bhi.n	800a7a8 <UART_SetConfig+0x1cc>
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d009      	beq.n	800a796 <UART_SetConfig+0x1ba>
 800a782:	2b80      	cmp	r3, #128	; 0x80
 800a784:	d810      	bhi.n	800a7a8 <UART_SetConfig+0x1cc>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <UART_SetConfig+0x1b4>
 800a78a:	2b40      	cmp	r3, #64	; 0x40
 800a78c:	d006      	beq.n	800a79c <UART_SetConfig+0x1c0>
 800a78e:	e00b      	b.n	800a7a8 <UART_SetConfig+0x1cc>
 800a790:	2300      	movs	r3, #0
 800a792:	76fb      	strb	r3, [r7, #27]
 800a794:	e063      	b.n	800a85e <UART_SetConfig+0x282>
 800a796:	2302      	movs	r3, #2
 800a798:	76fb      	strb	r3, [r7, #27]
 800a79a:	e060      	b.n	800a85e <UART_SetConfig+0x282>
 800a79c:	2304      	movs	r3, #4
 800a79e:	76fb      	strb	r3, [r7, #27]
 800a7a0:	e05d      	b.n	800a85e <UART_SetConfig+0x282>
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	76fb      	strb	r3, [r7, #27]
 800a7a6:	e05a      	b.n	800a85e <UART_SetConfig+0x282>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	76fb      	strb	r3, [r7, #27]
 800a7ac:	e057      	b.n	800a85e <UART_SetConfig+0x282>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a49      	ldr	r2, [pc, #292]	; (800a8d8 <UART_SetConfig+0x2fc>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d125      	bne.n	800a804 <UART_SetConfig+0x228>
 800a7b8:	4b43      	ldr	r3, [pc, #268]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c6:	d017      	beq.n	800a7f8 <UART_SetConfig+0x21c>
 800a7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7cc:	d817      	bhi.n	800a7fe <UART_SetConfig+0x222>
 800a7ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d2:	d00b      	beq.n	800a7ec <UART_SetConfig+0x210>
 800a7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d8:	d811      	bhi.n	800a7fe <UART_SetConfig+0x222>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <UART_SetConfig+0x20a>
 800a7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e2:	d006      	beq.n	800a7f2 <UART_SetConfig+0x216>
 800a7e4:	e00b      	b.n	800a7fe <UART_SetConfig+0x222>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	76fb      	strb	r3, [r7, #27]
 800a7ea:	e038      	b.n	800a85e <UART_SetConfig+0x282>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	76fb      	strb	r3, [r7, #27]
 800a7f0:	e035      	b.n	800a85e <UART_SetConfig+0x282>
 800a7f2:	2304      	movs	r3, #4
 800a7f4:	76fb      	strb	r3, [r7, #27]
 800a7f6:	e032      	b.n	800a85e <UART_SetConfig+0x282>
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	76fb      	strb	r3, [r7, #27]
 800a7fc:	e02f      	b.n	800a85e <UART_SetConfig+0x282>
 800a7fe:	2310      	movs	r3, #16
 800a800:	76fb      	strb	r3, [r7, #27]
 800a802:	e02c      	b.n	800a85e <UART_SetConfig+0x282>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a2d      	ldr	r2, [pc, #180]	; (800a8c0 <UART_SetConfig+0x2e4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d125      	bne.n	800a85a <UART_SetConfig+0x27e>
 800a80e:	4b2e      	ldr	r3, [pc, #184]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a81c:	d017      	beq.n	800a84e <UART_SetConfig+0x272>
 800a81e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a822:	d817      	bhi.n	800a854 <UART_SetConfig+0x278>
 800a824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a828:	d00b      	beq.n	800a842 <UART_SetConfig+0x266>
 800a82a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a82e:	d811      	bhi.n	800a854 <UART_SetConfig+0x278>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <UART_SetConfig+0x260>
 800a834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a838:	d006      	beq.n	800a848 <UART_SetConfig+0x26c>
 800a83a:	e00b      	b.n	800a854 <UART_SetConfig+0x278>
 800a83c:	2300      	movs	r3, #0
 800a83e:	76fb      	strb	r3, [r7, #27]
 800a840:	e00d      	b.n	800a85e <UART_SetConfig+0x282>
 800a842:	2302      	movs	r3, #2
 800a844:	76fb      	strb	r3, [r7, #27]
 800a846:	e00a      	b.n	800a85e <UART_SetConfig+0x282>
 800a848:	2304      	movs	r3, #4
 800a84a:	76fb      	strb	r3, [r7, #27]
 800a84c:	e007      	b.n	800a85e <UART_SetConfig+0x282>
 800a84e:	2308      	movs	r3, #8
 800a850:	76fb      	strb	r3, [r7, #27]
 800a852:	e004      	b.n	800a85e <UART_SetConfig+0x282>
 800a854:	2310      	movs	r3, #16
 800a856:	76fb      	strb	r3, [r7, #27]
 800a858:	e001      	b.n	800a85e <UART_SetConfig+0x282>
 800a85a:	2310      	movs	r3, #16
 800a85c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <UART_SetConfig+0x2e4>)
 800a864:	4293      	cmp	r3, r2
 800a866:	f040 8087 	bne.w	800a978 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a86a:	7efb      	ldrb	r3, [r7, #27]
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d837      	bhi.n	800a8e0 <UART_SetConfig+0x304>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <UART_SetConfig+0x29c>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a8e1 	.word	0x0800a8e1
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8e1 	.word	0x0800a8e1
 800a888:	0800a8ab 	.word	0x0800a8ab
 800a88c:	0800a8e1 	.word	0x0800a8e1
 800a890:	0800a8e1 	.word	0x0800a8e1
 800a894:	0800a8e1 	.word	0x0800a8e1
 800a898:	0800a8b3 	.word	0x0800a8b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a89c:	f7fe f8b8 	bl	8008a10 <HAL_RCC_GetPCLK1Freq>
 800a8a0:	6178      	str	r0, [r7, #20]
        break;
 800a8a2:	e022      	b.n	800a8ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8a4:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <UART_SetConfig+0x300>)
 800a8a6:	617b      	str	r3, [r7, #20]
        break;
 800a8a8:	e01f      	b.n	800a8ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8aa:	f7fe f819 	bl	80088e0 <HAL_RCC_GetSysClockFreq>
 800a8ae:	6178      	str	r0, [r7, #20]
        break;
 800a8b0:	e01b      	b.n	800a8ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8b6:	617b      	str	r3, [r7, #20]
        break;
 800a8b8:	e017      	b.n	800a8ea <UART_SetConfig+0x30e>
 800a8ba:	bf00      	nop
 800a8bc:	efff69f3 	.word	0xefff69f3
 800a8c0:	40008000 	.word	0x40008000
 800a8c4:	40013800 	.word	0x40013800
 800a8c8:	40021000 	.word	0x40021000
 800a8cc:	40004400 	.word	0x40004400
 800a8d0:	40004800 	.word	0x40004800
 800a8d4:	40004c00 	.word	0x40004c00
 800a8d8:	40005000 	.word	0x40005000
 800a8dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	76bb      	strb	r3, [r7, #26]
        break;
 800a8e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80f1 	beq.w	800aad4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	4413      	add	r3, r2
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d305      	bcc.n	800a90e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d902      	bls.n	800a914 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	76bb      	strb	r3, [r7, #26]
 800a912:	e0df      	b.n	800aad4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	4618      	mov	r0, r3
 800a918:	f04f 0100 	mov.w	r1, #0
 800a91c:	f04f 0200 	mov.w	r2, #0
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	020b      	lsls	r3, r1, #8
 800a926:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a92a:	0202      	lsls	r2, r0, #8
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	6849      	ldr	r1, [r1, #4]
 800a930:	0849      	lsrs	r1, r1, #1
 800a932:	4608      	mov	r0, r1
 800a934:	f04f 0100 	mov.w	r1, #0
 800a938:	1814      	adds	r4, r2, r0
 800a93a:	eb43 0501 	adc.w	r5, r3, r1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	461a      	mov	r2, r3
 800a944:	f04f 0300 	mov.w	r3, #0
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f6 f97c 	bl	8000c48 <__aeabi_uldivmod>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4613      	mov	r3, r2
 800a956:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a95e:	d308      	bcc.n	800a972 <UART_SetConfig+0x396>
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a966:	d204      	bcs.n	800a972 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	60da      	str	r2, [r3, #12]
 800a970:	e0b0      	b.n	800aad4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	76bb      	strb	r3, [r7, #26]
 800a976:	e0ad      	b.n	800aad4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a980:	d15b      	bne.n	800aa3a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a982:	7efb      	ldrb	r3, [r7, #27]
 800a984:	2b08      	cmp	r3, #8
 800a986:	d828      	bhi.n	800a9da <UART_SetConfig+0x3fe>
 800a988:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <UART_SetConfig+0x3b4>)
 800a98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98e:	bf00      	nop
 800a990:	0800a9b5 	.word	0x0800a9b5
 800a994:	0800a9bd 	.word	0x0800a9bd
 800a998:	0800a9c5 	.word	0x0800a9c5
 800a99c:	0800a9db 	.word	0x0800a9db
 800a9a0:	0800a9cb 	.word	0x0800a9cb
 800a9a4:	0800a9db 	.word	0x0800a9db
 800a9a8:	0800a9db 	.word	0x0800a9db
 800a9ac:	0800a9db 	.word	0x0800a9db
 800a9b0:	0800a9d3 	.word	0x0800a9d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9b4:	f7fe f82c 	bl	8008a10 <HAL_RCC_GetPCLK1Freq>
 800a9b8:	6178      	str	r0, [r7, #20]
        break;
 800a9ba:	e013      	b.n	800a9e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9bc:	f7fe f83e 	bl	8008a3c <HAL_RCC_GetPCLK2Freq>
 800a9c0:	6178      	str	r0, [r7, #20]
        break;
 800a9c2:	e00f      	b.n	800a9e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9c4:	4b49      	ldr	r3, [pc, #292]	; (800aaec <UART_SetConfig+0x510>)
 800a9c6:	617b      	str	r3, [r7, #20]
        break;
 800a9c8:	e00c      	b.n	800a9e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9ca:	f7fd ff89 	bl	80088e0 <HAL_RCC_GetSysClockFreq>
 800a9ce:	6178      	str	r0, [r7, #20]
        break;
 800a9d0:	e008      	b.n	800a9e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9d6:	617b      	str	r3, [r7, #20]
        break;
 800a9d8:	e004      	b.n	800a9e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	76bb      	strb	r3, [r7, #26]
        break;
 800a9e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d074      	beq.n	800aad4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	005a      	lsls	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	441a      	add	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2b0f      	cmp	r3, #15
 800aa04:	d916      	bls.n	800aa34 <UART_SetConfig+0x458>
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa0c:	d212      	bcs.n	800aa34 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	f023 030f 	bic.w	r3, r3, #15
 800aa16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	89fb      	ldrh	r3, [r7, #14]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	89fa      	ldrh	r2, [r7, #14]
 800aa30:	60da      	str	r2, [r3, #12]
 800aa32:	e04f      	b.n	800aad4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	76bb      	strb	r3, [r7, #26]
 800aa38:	e04c      	b.n	800aad4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa3a:	7efb      	ldrb	r3, [r7, #27]
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d828      	bhi.n	800aa92 <UART_SetConfig+0x4b6>
 800aa40:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <UART_SetConfig+0x46c>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa75 	.word	0x0800aa75
 800aa50:	0800aa7d 	.word	0x0800aa7d
 800aa54:	0800aa93 	.word	0x0800aa93
 800aa58:	0800aa83 	.word	0x0800aa83
 800aa5c:	0800aa93 	.word	0x0800aa93
 800aa60:	0800aa93 	.word	0x0800aa93
 800aa64:	0800aa93 	.word	0x0800aa93
 800aa68:	0800aa8b 	.word	0x0800aa8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa6c:	f7fd ffd0 	bl	8008a10 <HAL_RCC_GetPCLK1Freq>
 800aa70:	6178      	str	r0, [r7, #20]
        break;
 800aa72:	e013      	b.n	800aa9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa74:	f7fd ffe2 	bl	8008a3c <HAL_RCC_GetPCLK2Freq>
 800aa78:	6178      	str	r0, [r7, #20]
        break;
 800aa7a:	e00f      	b.n	800aa9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa7c:	4b1b      	ldr	r3, [pc, #108]	; (800aaec <UART_SetConfig+0x510>)
 800aa7e:	617b      	str	r3, [r7, #20]
        break;
 800aa80:	e00c      	b.n	800aa9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa82:	f7fd ff2d 	bl	80088e0 <HAL_RCC_GetSysClockFreq>
 800aa86:	6178      	str	r0, [r7, #20]
        break;
 800aa88:	e008      	b.n	800aa9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa8e:	617b      	str	r3, [r7, #20]
        break;
 800aa90:	e004      	b.n	800aa9c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	76bb      	strb	r3, [r7, #26]
        break;
 800aa9a:	bf00      	nop
    }

    if (pclk != 0U)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d018      	beq.n	800aad4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	085a      	lsrs	r2, r3, #1
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	441a      	add	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d909      	bls.n	800aad0 <UART_SetConfig+0x4f4>
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac2:	d205      	bcs.n	800aad0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	e001      	b.n	800aad4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aae0:	7ebb      	ldrb	r3, [r7, #26]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3720      	adds	r7, #32
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bdb0      	pop	{r4, r5, r7, pc}
 800aaea:	bf00      	nop
 800aaec:	00f42400 	.word	0x00f42400

0800aaf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00a      	beq.n	800ab3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	f003 0308 	and.w	r3, r3, #8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00a      	beq.n	800aba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01a      	beq.n	800ac06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abee:	d10a      	bne.n	800ac06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	605a      	str	r2, [r3, #4]
  }
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac44:	f7fb fc0e 	bl	8006464 <HAL_GetTick>
 800ac48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0308 	and.w	r3, r3, #8
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	d10e      	bne.n	800ac76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f82d 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e023      	b.n	800acbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d10e      	bne.n	800aca2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f817 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e00d      	b.n	800acbe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2220      	movs	r2, #32
 800aca6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2220      	movs	r2, #32
 800acac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b09c      	sub	sp, #112	; 0x70
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	603b      	str	r3, [r7, #0]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd6:	e0a5      	b.n	800ae24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	f000 80a1 	beq.w	800ae24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace2:	f7fb fbbf 	bl	8006464 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800acee:	429a      	cmp	r2, r3
 800acf0:	d302      	bcc.n	800acf8 <UART_WaitOnFlagUntilTimeout+0x32>
 800acf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d13e      	bne.n	800ad76 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e6      	bne.n	800acf8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad34:	e853 3f00 	ldrex	r3, [r3]
 800ad38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f023 0301 	bic.w	r3, r3, #1
 800ad40:	663b      	str	r3, [r7, #96]	; 0x60
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad4a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e5      	bne.n	800ad2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2220      	movs	r2, #32
 800ad62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2220      	movs	r2, #32
 800ad68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e067      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d04f      	beq.n	800ae24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad92:	d147      	bne.n	800ae24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad9c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
 800adbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e6      	bne.n	800ad9e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	613b      	str	r3, [r7, #16]
   return(result);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f023 0301 	bic.w	r3, r3, #1
 800ade6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adf0:	623a      	str	r2, [r7, #32]
 800adf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	69f9      	ldr	r1, [r7, #28]
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e5      	bne.n	800add0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2220      	movs	r2, #32
 800ae08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e010      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	69da      	ldr	r2, [r3, #28]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	bf0c      	ite	eq
 800ae34:	2301      	moveq	r3, #1
 800ae36:	2300      	movne	r3, #0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	f43f af4a 	beq.w	800acd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3770      	adds	r7, #112	; 0x70
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b096      	sub	sp, #88	; 0x58
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	88fa      	ldrh	r2, [r7, #6]
 800ae68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2222      	movs	r2, #34	; 0x22
 800ae78:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d02b      	beq.n	800aeda <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae86:	4a42      	ldr	r2, [pc, #264]	; (800af90 <UART_Start_Receive_DMA+0x140>)
 800ae88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8e:	4a41      	ldr	r2, [pc, #260]	; (800af94 <UART_Start_Receive_DMA+0x144>)
 800ae90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	4a40      	ldr	r2, [pc, #256]	; (800af98 <UART_Start_Receive_DMA+0x148>)
 800ae98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9e:	2200      	movs	r2, #0
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3324      	adds	r3, #36	; 0x24
 800aeac:	4619      	mov	r1, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	88fb      	ldrh	r3, [r7, #6]
 800aeb6:	f7fb fd95 	bl	80069e4 <HAL_DMA_Start_IT>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00c      	beq.n	800aeda <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2210      	movs	r2, #16
 800aec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2220      	movs	r2, #32
 800aed4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e055      	b.n	800af86 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d018      	beq.n	800af1c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aefe:	657b      	str	r3, [r7, #84]	; 0x54
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af08:	64bb      	str	r3, [r7, #72]	; 0x48
 800af0a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e6      	bne.n	800aeea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3308      	adds	r3, #8
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	653b      	str	r3, [r7, #80]	; 0x50
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af3c:	637a      	str	r2, [r7, #52]	; 0x34
 800af3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3308      	adds	r3, #8
 800af56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	613b      	str	r3, [r7, #16]
   return(result);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3308      	adds	r3, #8
 800af6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af70:	623a      	str	r2, [r7, #32]
 800af72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af74:	69f9      	ldr	r1, [r7, #28]
 800af76:	6a3a      	ldr	r2, [r7, #32]
 800af78:	e841 2300 	strex	r3, r2, [r1]
 800af7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e5      	bne.n	800af50 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3758      	adds	r7, #88	; 0x58
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	0800b0af 	.word	0x0800b0af
 800af94:	0800b1d3 	.word	0x0800b1d3
 800af98:	0800b20b 	.word	0x0800b20b

0800af9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b089      	sub	sp, #36	; 0x24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	61bb      	str	r3, [r7, #24]
 800afc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6979      	ldr	r1, [r7, #20]
 800afc8:	69ba      	ldr	r2, [r7, #24]
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	613b      	str	r3, [r7, #16]
   return(result);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	679a      	str	r2, [r3, #120]	; 0x78
}
 800afdc:	bf00      	nop
 800afde:	3724      	adds	r7, #36	; 0x24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b095      	sub	sp, #84	; 0x54
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b004:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b00e:	643b      	str	r3, [r7, #64]	; 0x40
 800b010:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e6      	bne.n	800aff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	61fb      	str	r3, [r7, #28]
   return(result);
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	64bb      	str	r3, [r7, #72]	; 0x48
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3308      	adds	r3, #8
 800b040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b042:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d118      	bne.n	800b090 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f023 0310 	bic.w	r3, r3, #16
 800b072:	647b      	str	r3, [r7, #68]	; 0x44
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6979      	ldr	r1, [r7, #20]
 800b082:	69ba      	ldr	r2, [r7, #24]
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	613b      	str	r3, [r7, #16]
   return(result);
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e6      	bne.n	800b05e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2220      	movs	r2, #32
 800b094:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b0a2:	bf00      	nop
 800b0a4:	3754      	adds	r7, #84	; 0x54
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b09c      	sub	sp, #112	; 0x70
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0320 	and.w	r3, r3, #32
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d170      	bne.n	800b1ac <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e6      	bne.n	800b0d2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3308      	adds	r3, #8
 800b10a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	e853 3f00 	ldrex	r3, [r3]
 800b112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	f023 0301 	bic.w	r3, r3, #1
 800b11a:	667b      	str	r3, [r7, #100]	; 0x64
 800b11c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b124:	647a      	str	r2, [r7, #68]	; 0x44
 800b126:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b12a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e5      	bne.n	800b104 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3308      	adds	r3, #8
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	e853 3f00 	ldrex	r3, [r3]
 800b146:	623b      	str	r3, [r7, #32]
   return(result);
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b14e:	663b      	str	r3, [r7, #96]	; 0x60
 800b150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3308      	adds	r3, #8
 800b156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b158:	633a      	str	r2, [r7, #48]	; 0x30
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b160:	e841 2300 	strex	r3, r2, [r1]
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e5      	bne.n	800b138 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16e:	2220      	movs	r2, #32
 800b170:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b176:	2b01      	cmp	r3, #1
 800b178:	d118      	bne.n	800b1ac <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	e853 3f00 	ldrex	r3, [r3]
 800b186:	60fb      	str	r3, [r7, #12]
   return(result);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f023 0310 	bic.w	r3, r3, #16
 800b18e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b198:	61fb      	str	r3, [r7, #28]
 800b19a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19c:	69b9      	ldr	r1, [r7, #24]
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	e841 2300 	strex	r3, r2, [r1]
 800b1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e6      	bne.n	800b17a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d107      	bne.n	800b1c4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1be:	f7ff fa01 	bl	800a5c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1c2:	e002      	b.n	800b1ca <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b1c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1c6:	f7ff f9df 	bl	800a588 <HAL_UART_RxCpltCallback>
}
 800b1ca:	bf00      	nop
 800b1cc:	3770      	adds	r7, #112	; 0x70
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d109      	bne.n	800b1fc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1ee:	085b      	lsrs	r3, r3, #1
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff f9e5 	bl	800a5c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1fa:	e002      	b.n	800b202 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7ff f9cd 	bl	800a59c <HAL_UART_RxHalfCpltCallback>
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b086      	sub	sp, #24
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b216:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b21c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b222:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22e:	2b80      	cmp	r3, #128	; 0x80
 800b230:	d109      	bne.n	800b246 <UART_DMAError+0x3c>
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b21      	cmp	r3, #33	; 0x21
 800b236:	d106      	bne.n	800b246 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b240:	6978      	ldr	r0, [r7, #20]
 800b242:	f7ff feab 	bl	800af9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b250:	2b40      	cmp	r3, #64	; 0x40
 800b252:	d109      	bne.n	800b268 <UART_DMAError+0x5e>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b22      	cmp	r3, #34	; 0x22
 800b258:	d106      	bne.n	800b268 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b262:	6978      	ldr	r0, [r7, #20]
 800b264:	f7ff fec0 	bl	800afe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b26e:	f043 0210 	orr.w	r2, r3, #16
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b278:	6978      	ldr	r0, [r7, #20]
 800b27a:	f7ff f999 	bl	800a5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b27e:	bf00      	nop
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
	...

0800b288 <DataHist_parameters>:
 800b288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b28c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b28e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b290:	7020      	strb	r0, [r4, #0]
 800b292:	6808      	ldr	r0, [r1, #0]
 800b294:	6060      	str	r0, [r4, #4]
 800b296:	6848      	ldr	r0, [r1, #4]
 800b298:	60a0      	str	r0, [r4, #8]
 800b29a:	6888      	ldr	r0, [r1, #8]
 800b29c:	60e0      	str	r0, [r4, #12]
 800b29e:	68c8      	ldr	r0, [r1, #12]
 800b2a0:	6120      	str	r0, [r4, #16]
 800b2a2:	6908      	ldr	r0, [r1, #16]
 800b2a4:	6160      	str	r0, [r4, #20]
 800b2a6:	6948      	ldr	r0, [r1, #20]
 800b2a8:	61a0      	str	r0, [r4, #24]
 800b2aa:	6988      	ldr	r0, [r1, #24]
 800b2ac:	61e0      	str	r0, [r4, #28]
 800b2ae:	69c8      	ldr	r0, [r1, #28]
 800b2b0:	6220      	str	r0, [r4, #32]
 800b2b2:	6a09      	ldr	r1, [r1, #32]
 800b2b4:	6261      	str	r1, [r4, #36]	; 0x24
 800b2b6:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b2ba:	8811      	ldrh	r1, [r2, #0]
 800b2bc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b2c0:	8521      	strh	r1, [r4, #40]	; 0x28
 800b2c2:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b2c6:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b2ca:	f04f 0e00 	mov.w	lr, #0
 800b2ce:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b2d2:	4641      	mov	r1, r8
 800b2d4:	f852 0b04 	ldr.w	r0, [r2], #4
 800b2d8:	f841 0b04 	str.w	r0, [r1], #4
 800b2dc:	4562      	cmp	r2, ip
 800b2de:	d1f9      	bne.n	800b2d4 <DataHist_parameters+0x4c>
 800b2e0:	f10e 0e1e 	add.w	lr, lr, #30
 800b2e4:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b2e8:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b2ec:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b2f0:	d1ed      	bne.n	800b2ce <DataHist_parameters+0x46>
 800b2f2:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b2f6:	881a      	ldrh	r2, [r3, #0]
 800b2f8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b2fc:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b300:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b304:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b308:	f04f 0c00 	mov.w	ip, #0
 800b30c:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b310:	4672      	mov	r2, lr
 800b312:	f853 1b04 	ldr.w	r1, [r3], #4
 800b316:	f842 1b04 	str.w	r1, [r2], #4
 800b31a:	4283      	cmp	r3, r0
 800b31c:	d1f9      	bne.n	800b312 <DataHist_parameters+0x8a>
 800b31e:	f10c 0c1e 	add.w	ip, ip, #30
 800b322:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b326:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b32a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b32e:	d1ed      	bne.n	800b30c <DataHist_parameters+0x84>
 800b330:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b334:	883b      	ldrh	r3, [r7, #0]
 800b336:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b33a:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b33e:	3780      	adds	r7, #128	; 0x80
 800b340:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b344:	2000      	movs	r0, #0
 800b346:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b34a:	4662      	mov	r2, ip
 800b34c:	f853 1b04 	ldr.w	r1, [r3], #4
 800b350:	f842 1b04 	str.w	r1, [r2], #4
 800b354:	42bb      	cmp	r3, r7
 800b356:	d1f9      	bne.n	800b34c <DataHist_parameters+0xc4>
 800b358:	301e      	adds	r0, #30
 800b35a:	285a      	cmp	r0, #90	; 0x5a
 800b35c:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b360:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b364:	d1ef      	bne.n	800b346 <DataHist_parameters+0xbe>
 800b366:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b36a:	8833      	ldrh	r3, [r6, #0]
 800b36c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b370:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b374:	3680      	adds	r6, #128	; 0x80
 800b376:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b37a:	2000      	movs	r0, #0
 800b37c:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b380:	463a      	mov	r2, r7
 800b382:	f853 1b04 	ldr.w	r1, [r3], #4
 800b386:	f842 1b04 	str.w	r1, [r2], #4
 800b38a:	429e      	cmp	r6, r3
 800b38c:	d1f9      	bne.n	800b382 <DataHist_parameters+0xfa>
 800b38e:	301e      	adds	r0, #30
 800b390:	285a      	cmp	r0, #90	; 0x5a
 800b392:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b396:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b39a:	d1ef      	bne.n	800b37c <DataHist_parameters+0xf4>
 800b39c:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b3a0:	69aa      	ldr	r2, [r5, #24]
 800b3a2:	f8c3 c004 	str.w	ip, [r3, #4]
 800b3a6:	782b      	ldrb	r3, [r5, #0]
 800b3a8:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b3ac:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b3b0:	619a      	str	r2, [r3, #24]
 800b3b2:	686a      	ldr	r2, [r5, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b3ba:	68a9      	ldr	r1, [r5, #8]
 800b3bc:	6011      	str	r1, [r2, #0]
 800b3be:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b3c2:	68e9      	ldr	r1, [r5, #12]
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b3ca:	6929      	ldr	r1, [r5, #16]
 800b3cc:	6011      	str	r1, [r2, #0]
 800b3ce:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b3d2:	6969      	ldr	r1, [r5, #20]
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	69ea      	ldr	r2, [r5, #28]
 800b3d8:	61da      	str	r2, [r3, #28]
 800b3da:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b3de:	6a2a      	ldr	r2, [r5, #32]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b3e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b3ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b3f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3fe:	bf00      	nop

0800b400 <rotVect>:
 800b400:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b404:	ed92 5a01 	vldr	s10, [r2, #4]
 800b408:	edd2 5a00 	vldr	s11, [r2]
 800b40c:	ed92 6a02 	vldr	s12, [r2, #8]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	f991 3000 	ldrsb.w	r3, [r1]
 800b418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b41c:	ee06 3a90 	vmov	s13, r3
 800b420:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b424:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b428:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b42c:	ee07 3a10 	vmov	s14, r3
 800b430:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b434:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b438:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b43c:	edc0 7a00 	vstr	s15, [r0]
 800b440:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b444:	ed92 5a01 	vldr	s10, [r2, #4]
 800b448:	edd2 5a00 	vldr	s11, [r2]
 800b44c:	ed92 6a02 	vldr	s12, [r2, #8]
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b45c:	ee06 3a90 	vmov	s13, r3
 800b460:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b464:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b468:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b46c:	ee07 3a10 	vmov	s14, r3
 800b470:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b478:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b47c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b480:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b484:	ed92 5a01 	vldr	s10, [r2, #4]
 800b488:	edd2 5a00 	vldr	s11, [r2]
 800b48c:	ed92 6a02 	vldr	s12, [r2, #8]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b49c:	ee06 3a90 	vmov	s13, r3
 800b4a0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b4a4:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b4a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b4ac:	ee07 3a10 	vmov	s14, r3
 800b4b0:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b4b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4b8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b4bc:	edc0 7a02 	vstr	s15, [r0, #8]
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop

0800b4c4 <findAxis>:
 800b4c4:	f990 3000 	ldrsb.w	r3, [r0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d027      	beq.n	800b51c <findAxis+0x58>
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	d00e      	beq.n	800b4ee <findAxis+0x2a>
 800b4d0:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d053      	beq.n	800b580 <findAxis+0xbc>
 800b4d8:	3301      	adds	r3, #1
 800b4da:	d048      	beq.n	800b56e <findAxis+0xaa>
 800b4dc:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d053      	beq.n	800b58c <findAxis+0xc8>
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	d104      	bne.n	800b4f2 <findAxis+0x2e>
 800b4e8:	2364      	movs	r3, #100	; 0x64
 800b4ea:	700b      	strb	r3, [r1, #0]
 800b4ec:	e001      	b.n	800b4f2 <findAxis+0x2e>
 800b4ee:	2377      	movs	r3, #119	; 0x77
 800b4f0:	700b      	strb	r3, [r1, #0]
 800b4f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d016      	beq.n	800b528 <findAxis+0x64>
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	d02e      	beq.n	800b55c <findAxis+0x98>
 800b4fe:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d039      	beq.n	800b57a <findAxis+0xb6>
 800b506:	3301      	adds	r3, #1
 800b508:	d034      	beq.n	800b574 <findAxis+0xb0>
 800b50a:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d03f      	beq.n	800b592 <findAxis+0xce>
 800b512:	3301      	adds	r3, #1
 800b514:	d10a      	bne.n	800b52c <findAxis+0x68>
 800b516:	2364      	movs	r3, #100	; 0x64
 800b518:	704b      	strb	r3, [r1, #1]
 800b51a:	e007      	b.n	800b52c <findAxis+0x68>
 800b51c:	2365      	movs	r3, #101	; 0x65
 800b51e:	700b      	strb	r3, [r1, #0]
 800b520:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d1e8      	bne.n	800b4fa <findAxis+0x36>
 800b528:	2365      	movs	r3, #101	; 0x65
 800b52a:	704b      	strb	r3, [r1, #1]
 800b52c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d010      	beq.n	800b556 <findAxis+0x92>
 800b534:	3301      	adds	r3, #1
 800b536:	d014      	beq.n	800b562 <findAxis+0x9e>
 800b538:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d022      	beq.n	800b586 <findAxis+0xc2>
 800b540:	3301      	adds	r3, #1
 800b542:	d011      	beq.n	800b568 <findAxis+0xa4>
 800b544:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d025      	beq.n	800b598 <findAxis+0xd4>
 800b54c:	3301      	adds	r3, #1
 800b54e:	bf04      	itt	eq
 800b550:	2364      	moveq	r3, #100	; 0x64
 800b552:	708b      	strbeq	r3, [r1, #2]
 800b554:	4770      	bx	lr
 800b556:	2365      	movs	r3, #101	; 0x65
 800b558:	708b      	strb	r3, [r1, #2]
 800b55a:	4770      	bx	lr
 800b55c:	2377      	movs	r3, #119	; 0x77
 800b55e:	704b      	strb	r3, [r1, #1]
 800b560:	e7e4      	b.n	800b52c <findAxis+0x68>
 800b562:	2377      	movs	r3, #119	; 0x77
 800b564:	708b      	strb	r3, [r1, #2]
 800b566:	4770      	bx	lr
 800b568:	2373      	movs	r3, #115	; 0x73
 800b56a:	708b      	strb	r3, [r1, #2]
 800b56c:	4770      	bx	lr
 800b56e:	2373      	movs	r3, #115	; 0x73
 800b570:	700b      	strb	r3, [r1, #0]
 800b572:	e7be      	b.n	800b4f2 <findAxis+0x2e>
 800b574:	2373      	movs	r3, #115	; 0x73
 800b576:	704b      	strb	r3, [r1, #1]
 800b578:	e7d8      	b.n	800b52c <findAxis+0x68>
 800b57a:	236e      	movs	r3, #110	; 0x6e
 800b57c:	704b      	strb	r3, [r1, #1]
 800b57e:	e7d5      	b.n	800b52c <findAxis+0x68>
 800b580:	236e      	movs	r3, #110	; 0x6e
 800b582:	700b      	strb	r3, [r1, #0]
 800b584:	e7b5      	b.n	800b4f2 <findAxis+0x2e>
 800b586:	236e      	movs	r3, #110	; 0x6e
 800b588:	708b      	strb	r3, [r1, #2]
 800b58a:	4770      	bx	lr
 800b58c:	2375      	movs	r3, #117	; 0x75
 800b58e:	700b      	strb	r3, [r1, #0]
 800b590:	e7af      	b.n	800b4f2 <findAxis+0x2e>
 800b592:	2375      	movs	r3, #117	; 0x75
 800b594:	704b      	strb	r3, [r1, #1]
 800b596:	e7c9      	b.n	800b52c <findAxis+0x68>
 800b598:	2375      	movs	r3, #117	; 0x75
 800b59a:	708b      	strb	r3, [r1, #2]
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop

0800b5a0 <findDirection>:
 800b5a0:	b5d0      	push	{r4, r6, r7, lr}
 800b5a2:	ed2d 8b04 	vpush	{d8-d9}
 800b5a6:	eef0 8ac0 	vabs.f32	s17, s0
 800b5aa:	eeb0 8ae0 	vabs.f32	s16, s1
 800b5ae:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	eeb0 9ac1 	vabs.f32	s18, s2
 800b5bc:	dd36      	ble.n	800b62c <findDirection+0x8c>
 800b5be:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	dd31      	ble.n	800b62c <findDirection+0x8c>
 800b5c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d0:	ee18 0a90 	vmov	r0, s17
 800b5d4:	f340 8094 	ble.w	800b700 <findDirection+0x160>
 800b5d8:	f7f4 ffb6 	bl	8000548 <__aeabi_f2d>
 800b5dc:	4606      	mov	r6, r0
 800b5de:	ee18 0a10 	vmov	r0, s16
 800b5e2:	460f      	mov	r7, r1
 800b5e4:	f7f4 ffb0 	bl	8000548 <__aeabi_f2d>
 800b5e8:	a387      	add	r3, pc, #540	; (adr r3, 800b808 <findDirection+0x268>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f5 f803 	bl	80005f8 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	f7f5 fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 800b5fe:	b188      	cbz	r0, 800b624 <findDirection+0x84>
 800b600:	ee19 0a10 	vmov	r0, s18
 800b604:	f7f4 ffa0 	bl	8000548 <__aeabi_f2d>
 800b608:	a37f      	add	r3, pc, #508	; (adr r3, 800b808 <findDirection+0x268>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f7f4 fff3 	bl	80005f8 <__aeabi_dmul>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f5 fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	bf18      	it	ne
 800b622:	2404      	movne	r4, #4
 800b624:	ecbd 8b04 	vpop	{d8-d9}
 800b628:	4620      	mov	r0, r4
 800b62a:	bdd0      	pop	{r4, r6, r7, pc}
 800b62c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	dd32      	ble.n	800b69c <findDirection+0xfc>
 800b636:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	ee18 0a10 	vmov	r0, s16
 800b642:	f340 8086 	ble.w	800b752 <findDirection+0x1b2>
 800b646:	f7f4 ff7f 	bl	8000548 <__aeabi_f2d>
 800b64a:	4606      	mov	r6, r0
 800b64c:	ee18 0a90 	vmov	r0, s17
 800b650:	460f      	mov	r7, r1
 800b652:	f7f4 ff79 	bl	8000548 <__aeabi_f2d>
 800b656:	a36c      	add	r3, pc, #432	; (adr r3, 800b808 <findDirection+0x268>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4630      	mov	r0, r6
 800b666:	4639      	mov	r1, r7
 800b668:	f7f5 fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d0d9      	beq.n	800b624 <findDirection+0x84>
 800b670:	ee19 0a10 	vmov	r0, s18
 800b674:	f7f4 ff68 	bl	8000548 <__aeabi_f2d>
 800b678:	a363      	add	r3, pc, #396	; (adr r3, 800b808 <findDirection+0x268>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f7f4 ffbb 	bl	80005f8 <__aeabi_dmul>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	f7f5 fa45 	bl	8000b18 <__aeabi_dcmpgt>
 800b68e:	ecbd 8b04 	vpop	{d8-d9}
 800b692:	2800      	cmp	r0, #0
 800b694:	bf18      	it	ne
 800b696:	2401      	movne	r4, #1
 800b698:	4620      	mov	r0, r4
 800b69a:	bdd0      	pop	{r4, r6, r7, pc}
 800b69c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a4:	ee19 0a10 	vmov	r0, s18
 800b6a8:	dd7f      	ble.n	800b7aa <findDirection+0x20a>
 800b6aa:	f7f4 ff4d 	bl	8000548 <__aeabi_f2d>
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	ee18 0a10 	vmov	r0, s16
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f7f4 ff47 	bl	8000548 <__aeabi_f2d>
 800b6ba:	a353      	add	r3, pc, #332	; (adr r3, 800b808 <findDirection+0x268>)
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	f7f4 ff9a 	bl	80005f8 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	f7f5 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0a7      	beq.n	800b624 <findDirection+0x84>
 800b6d4:	ee18 0a90 	vmov	r0, s17
 800b6d8:	f7f4 ff36 	bl	8000548 <__aeabi_f2d>
 800b6dc:	a34a      	add	r3, pc, #296	; (adr r3, 800b808 <findDirection+0x268>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	f7f5 fa13 	bl	8000b18 <__aeabi_dcmpgt>
 800b6f2:	ecbd 8b04 	vpop	{d8-d9}
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	bf18      	it	ne
 800b6fa:	2400      	movne	r4, #0
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	bdd0      	pop	{r4, r6, r7, pc}
 800b700:	f7f4 ff22 	bl	8000548 <__aeabi_f2d>
 800b704:	4606      	mov	r6, r0
 800b706:	ee18 0a10 	vmov	r0, s16
 800b70a:	460f      	mov	r7, r1
 800b70c:	f7f4 ff1c 	bl	8000548 <__aeabi_f2d>
 800b710:	a33d      	add	r3, pc, #244	; (adr r3, 800b808 <findDirection+0x268>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f4 ff6f 	bl	80005f8 <__aeabi_dmul>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4630      	mov	r0, r6
 800b720:	4639      	mov	r1, r7
 800b722:	f7f5 f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 800b726:	2800      	cmp	r0, #0
 800b728:	f43f af7c 	beq.w	800b624 <findDirection+0x84>
 800b72c:	ee19 0a10 	vmov	r0, s18
 800b730:	f7f4 ff0a 	bl	8000548 <__aeabi_f2d>
 800b734:	a334      	add	r3, pc, #208	; (adr r3, 800b808 <findDirection+0x268>)
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f7f4 ff5d 	bl	80005f8 <__aeabi_dmul>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4630      	mov	r0, r6
 800b744:	4639      	mov	r1, r7
 800b746:	f7f5 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	bf18      	it	ne
 800b74e:	2405      	movne	r4, #5
 800b750:	e768      	b.n	800b624 <findDirection+0x84>
 800b752:	f7f4 fef9 	bl	8000548 <__aeabi_f2d>
 800b756:	4606      	mov	r6, r0
 800b758:	ee18 0a90 	vmov	r0, s17
 800b75c:	460f      	mov	r7, r1
 800b75e:	f7f4 fef3 	bl	8000548 <__aeabi_f2d>
 800b762:	a329      	add	r3, pc, #164	; (adr r3, 800b808 <findDirection+0x268>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 800b778:	2800      	cmp	r0, #0
 800b77a:	f43f af53 	beq.w	800b624 <findDirection+0x84>
 800b77e:	ee19 0a10 	vmov	r0, s18
 800b782:	f7f4 fee1 	bl	8000548 <__aeabi_f2d>
 800b786:	a320      	add	r3, pc, #128	; (adr r3, 800b808 <findDirection+0x268>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f7f5 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 800b79c:	ecbd 8b04 	vpop	{d8-d9}
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	bf18      	it	ne
 800b7a4:	2403      	movne	r4, #3
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	bdd0      	pop	{r4, r6, r7, pc}
 800b7aa:	f7f4 fecd 	bl	8000548 <__aeabi_f2d>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	ee18 0a10 	vmov	r0, s16
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	f7f4 fec7 	bl	8000548 <__aeabi_f2d>
 800b7ba:	a313      	add	r3, pc, #76	; (adr r3, 800b808 <findDirection+0x268>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 ff1a 	bl	80005f8 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f5 f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f43f af27 	beq.w	800b624 <findDirection+0x84>
 800b7d6:	ee18 0a90 	vmov	r0, s17
 800b7da:	f7f4 feb5 	bl	8000548 <__aeabi_f2d>
 800b7de:	a30a      	add	r3, pc, #40	; (adr r3, 800b808 <findDirection+0x268>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 ff08 	bl	80005f8 <__aeabi_dmul>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	f7f5 f992 	bl	8000b18 <__aeabi_dcmpgt>
 800b7f4:	ecbd 8b04 	vpop	{d8-d9}
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	bf18      	it	ne
 800b7fc:	2402      	movne	r4, #2
 800b7fe:	4620      	mov	r0, r4
 800b800:	bdd0      	pop	{r4, r6, r7, pc}
 800b802:	bf00      	nop
 800b804:	f3af 8000 	nop.w
 800b808:	e0000000 	.word	0xe0000000
 800b80c:	3ff6b851 	.word	0x3ff6b851

0800b810 <updateOrientation>:
 800b810:	b410      	push	{r4}
 800b812:	2300      	movs	r3, #0
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	6043      	str	r3, [r0, #4]
 800b818:	7203      	strb	r3, [r0, #8]
 800b81a:	780c      	ldrb	r4, [r1, #0]
 800b81c:	784a      	ldrb	r2, [r1, #1]
 800b81e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b822:	2b17      	cmp	r3, #23
 800b824:	bf98      	it	ls
 800b826:	3420      	addls	r4, #32
 800b828:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b82c:	bf98      	it	ls
 800b82e:	b2e4      	uxtbls	r4, r4
 800b830:	2b17      	cmp	r3, #23
 800b832:	788b      	ldrb	r3, [r1, #2]
 800b834:	bf98      	it	ls
 800b836:	3220      	addls	r2, #32
 800b838:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b83c:	bf98      	it	ls
 800b83e:	b2d2      	uxtbls	r2, r2
 800b840:	2917      	cmp	r1, #23
 800b842:	bf98      	it	ls
 800b844:	3320      	addls	r3, #32
 800b846:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b84a:	bf98      	it	ls
 800b84c:	b2db      	uxtbls	r3, r3
 800b84e:	2c13      	cmp	r4, #19
 800b850:	d80d      	bhi.n	800b86e <updateOrientation+0x5e>
 800b852:	e8df f004 	tbb	[pc, r4]
 800b856:	0a36      	.short	0x0a36
 800b858:	0c0c0c0c 	.word	0x0c0c0c0c
 800b85c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b860:	0c0c0c39 	.word	0x0c0c0c39
 800b864:	3f0c3c0c 	.word	0x3f0c3c0c
 800b868:	420c      	.short	0x420c
 800b86a:	2101      	movs	r1, #1
 800b86c:	7001      	strb	r1, [r0, #0]
 800b86e:	3a64      	subs	r2, #100	; 0x64
 800b870:	2a13      	cmp	r2, #19
 800b872:	d80d      	bhi.n	800b890 <updateOrientation+0x80>
 800b874:	e8df f002 	tbb	[pc, r2]
 800b878:	0c0c0a34 	.word	0x0c0c0a34
 800b87c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b880:	0c370c0c 	.word	0x0c370c0c
 800b884:	3a0c0c0c 	.word	0x3a0c0c0c
 800b888:	400c3d0c 	.word	0x400c3d0c
 800b88c:	2201      	movs	r2, #1
 800b88e:	7042      	strb	r2, [r0, #1]
 800b890:	3b64      	subs	r3, #100	; 0x64
 800b892:	2b13      	cmp	r3, #19
 800b894:	d80d      	bhi.n	800b8b2 <updateOrientation+0xa2>
 800b896:	e8df f003 	tbb	[pc, r3]
 800b89a:	320a      	.short	0x320a
 800b89c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b8a0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b8a4:	0c0c0c37 	.word	0x0c0c0c37
 800b8a8:	410c3c0c 	.word	0x410c3c0c
 800b8ac:	0f0c      	.short	0x0f0c
 800b8ae:	23ff      	movs	r3, #255	; 0xff
 800b8b0:	7203      	strb	r3, [r0, #8]
 800b8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	23ff      	movs	r3, #255	; 0xff
 800b8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8be:	7083      	strb	r3, [r0, #2]
 800b8c0:	4770      	bx	lr
 800b8c2:	21ff      	movs	r1, #255	; 0xff
 800b8c4:	7181      	strb	r1, [r0, #6]
 800b8c6:	e7d2      	b.n	800b86e <updateOrientation+0x5e>
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	70c1      	strb	r1, [r0, #3]
 800b8cc:	e7cf      	b.n	800b86e <updateOrientation+0x5e>
 800b8ce:	21ff      	movs	r1, #255	; 0xff
 800b8d0:	70c1      	strb	r1, [r0, #3]
 800b8d2:	e7cc      	b.n	800b86e <updateOrientation+0x5e>
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	7181      	strb	r1, [r0, #6]
 800b8d8:	e7c9      	b.n	800b86e <updateOrientation+0x5e>
 800b8da:	21ff      	movs	r1, #255	; 0xff
 800b8dc:	7001      	strb	r1, [r0, #0]
 800b8de:	e7c6      	b.n	800b86e <updateOrientation+0x5e>
 800b8e0:	22ff      	movs	r2, #255	; 0xff
 800b8e2:	71c2      	strb	r2, [r0, #7]
 800b8e4:	e7d4      	b.n	800b890 <updateOrientation+0x80>
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	7102      	strb	r2, [r0, #4]
 800b8ea:	e7d1      	b.n	800b890 <updateOrientation+0x80>
 800b8ec:	22ff      	movs	r2, #255	; 0xff
 800b8ee:	7102      	strb	r2, [r0, #4]
 800b8f0:	e7ce      	b.n	800b890 <updateOrientation+0x80>
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	71c2      	strb	r2, [r0, #7]
 800b8f6:	e7cb      	b.n	800b890 <updateOrientation+0x80>
 800b8f8:	22ff      	movs	r2, #255	; 0xff
 800b8fa:	7042      	strb	r2, [r0, #1]
 800b8fc:	e7c8      	b.n	800b890 <updateOrientation+0x80>
 800b8fe:	2301      	movs	r3, #1
 800b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b904:	7083      	strb	r3, [r0, #2]
 800b906:	4770      	bx	lr
 800b908:	2301      	movs	r3, #1
 800b90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b90e:	7143      	strb	r3, [r0, #5]
 800b910:	4770      	bx	lr
 800b912:	23ff      	movs	r3, #255	; 0xff
 800b914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b918:	7143      	strb	r3, [r0, #5]
 800b91a:	4770      	bx	lr
 800b91c:	2301      	movs	r3, #1
 800b91e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b922:	7203      	strb	r3, [r0, #8]
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop

0800b928 <qmult>:
 800b928:	ed91 2a03 	vldr	s4, [r1, #12]
 800b92c:	ed90 3a01 	vldr	s6, [r0, #4]
 800b930:	edd0 5a02 	vldr	s11, [r0, #8]
 800b934:	edd1 4a01 	vldr	s9, [r1, #4]
 800b938:	ed90 4a00 	vldr	s8, [r0]
 800b93c:	edd1 3a00 	vldr	s7, [r1]
 800b940:	ed91 5a02 	vldr	s10, [r1, #8]
 800b944:	edd0 2a03 	vldr	s5, [r0, #12]
 800b948:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b94c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b950:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b954:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b958:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b95c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b960:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b964:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b968:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b96c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b970:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b974:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b978:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b97c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b980:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b984:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b988:	ed82 6a00 	vstr	s12, [r2]
 800b98c:	edc2 6a01 	vstr	s13, [r2, #4]
 800b990:	ed82 7a02 	vstr	s14, [r2, #8]
 800b994:	edc2 7a03 	vstr	s15, [r2, #12]
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <MEMS_setMagIndexToOne>:
 800b99c:	291f      	cmp	r1, #31
 800b99e:	b430      	push	{r4, r5}
 800b9a0:	d920      	bls.n	800b9e4 <MEMS_setMagIndexToOne+0x48>
 800b9a2:	6885      	ldr	r5, [r0, #8]
 800b9a4:	3920      	subs	r1, #32
 800b9a6:	2401      	movs	r4, #1
 800b9a8:	fa04 f101 	lsl.w	r1, r4, r1
 800b9ac:	ea21 0105 	bic.w	r1, r1, r5
 800b9b0:	4069      	eors	r1, r5
 800b9b2:	2a1f      	cmp	r2, #31
 800b9b4:	6081      	str	r1, [r0, #8]
 800b9b6:	d91f      	bls.n	800b9f8 <MEMS_setMagIndexToOne+0x5c>
 800b9b8:	6901      	ldr	r1, [r0, #16]
 800b9ba:	f1a2 0420 	sub.w	r4, r2, #32
 800b9be:	2201      	movs	r2, #1
 800b9c0:	40a2      	lsls	r2, r4
 800b9c2:	ea22 0201 	bic.w	r2, r2, r1
 800b9c6:	404a      	eors	r2, r1
 800b9c8:	2b1f      	cmp	r3, #31
 800b9ca:	6102      	str	r2, [r0, #16]
 800b9cc:	d91e      	bls.n	800ba0c <MEMS_setMagIndexToOne+0x70>
 800b9ce:	69c2      	ldr	r2, [r0, #28]
 800b9d0:	f1a3 0120 	sub.w	r1, r3, #32
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	408b      	lsls	r3, r1
 800b9d8:	ea23 0302 	bic.w	r3, r3, r2
 800b9dc:	4053      	eors	r3, r2
 800b9de:	bc30      	pop	{r4, r5}
 800b9e0:	61c3      	str	r3, [r0, #28]
 800b9e2:	4770      	bx	lr
 800b9e4:	68c5      	ldr	r5, [r0, #12]
 800b9e6:	2401      	movs	r4, #1
 800b9e8:	fa04 f101 	lsl.w	r1, r4, r1
 800b9ec:	ea21 0105 	bic.w	r1, r1, r5
 800b9f0:	4069      	eors	r1, r5
 800b9f2:	2a1f      	cmp	r2, #31
 800b9f4:	60c1      	str	r1, [r0, #12]
 800b9f6:	d8df      	bhi.n	800b9b8 <MEMS_setMagIndexToOne+0x1c>
 800b9f8:	6944      	ldr	r4, [r0, #20]
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	fa01 f202 	lsl.w	r2, r1, r2
 800ba00:	ea22 0204 	bic.w	r2, r2, r4
 800ba04:	4062      	eors	r2, r4
 800ba06:	2b1f      	cmp	r3, #31
 800ba08:	6142      	str	r2, [r0, #20]
 800ba0a:	d8e0      	bhi.n	800b9ce <MEMS_setMagIndexToOne+0x32>
 800ba0c:	6981      	ldr	r1, [r0, #24]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	fa02 f303 	lsl.w	r3, r2, r3
 800ba14:	ea23 0301 	bic.w	r3, r3, r1
 800ba18:	404b      	eors	r3, r1
 800ba1a:	bc30      	pop	{r4, r5}
 800ba1c:	6183      	str	r3, [r0, #24]
 800ba1e:	4770      	bx	lr

0800ba20 <getRotationMatrix>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4605      	mov	r5, r0
 800ba24:	460c      	mov	r4, r1
 800ba26:	4610      	mov	r0, r2
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2224      	movs	r2, #36	; 0x24
 800ba2c:	f00b fea6 	bl	801777c <memset>
 800ba30:	edd5 5a00 	vldr	s11, [r5]
 800ba34:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bb5c <getRotationMatrix+0x13c>
 800ba38:	edc0 5a02 	vstr	s11, [r0, #8]
 800ba3c:	ed95 7a01 	vldr	s14, [r5, #4]
 800ba40:	ed80 7a05 	vstr	s14, [r0, #20]
 800ba44:	ed95 5a02 	vldr	s10, [r5, #8]
 800ba48:	ed80 5a08 	vstr	s10, [r0, #32]
 800ba4c:	ed94 4a02 	vldr	s8, [r4, #8]
 800ba50:	edd4 3a01 	vldr	s7, [r4, #4]
 800ba54:	edd4 4a00 	vldr	s9, [r4]
 800ba58:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800ba5c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800ba60:	eee3 7a85 	vfma.f32	s15, s7, s10
 800ba64:	4603      	mov	r3, r0
 800ba66:	eee4 6a87 	vfma.f32	s13, s9, s14
 800ba6a:	eeb0 7ae7 	vabs.f32	s14, s15
 800ba6e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800ba72:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800ba76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800ba7e:	bfdc      	itt	le
 800ba80:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800ba84:	eeb0 7a43 	vmovle.f32	s14, s6
 800ba88:	eeb0 5ac6 	vabs.f32	s10, s12
 800ba8c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ba90:	edc0 6a06 	vstr	s13, [r0, #24]
 800ba94:	bfd4      	ite	le
 800ba96:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800ba9a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800ba9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa2:	ed80 6a03 	vstr	s12, [r0, #12]
 800baa6:	edc0 7a00 	vstr	s15, [r0]
 800baaa:	d447      	bmi.n	800bb3c <getRotationMatrix+0x11c>
 800baac:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800bab0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800bab4:	eef0 5a66 	vmov.f32	s11, s13
 800bab8:	edd3 6a06 	vldr	s13, [r3, #24]
 800babc:	eeb0 5ae6 	vabs.f32	s10, s13
 800bac0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	d543      	bpl.n	800bb52 <getRotationMatrix+0x132>
 800baca:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bace:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bad2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bad6:	eeb0 7a45 	vmov.f32	s14, s10
 800bada:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800bade:	eef0 5a44 	vmov.f32	s11, s8
 800bae2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800bae6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800baea:	ee65 5a07 	vmul.f32	s11, s10, s14
 800baee:	edd3 3a08 	vldr	s7, [r3, #32]
 800baf2:	edd3 4a02 	vldr	s9, [r3, #8]
 800baf6:	ed93 4a05 	vldr	s8, [r3, #20]
 800bafa:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800bafe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb02:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bb06:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bb0a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800bb0e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bb12:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bb16:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800bb1a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bb1e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bb22:	edc3 7a00 	vstr	s15, [r3]
 800bb26:	ed83 6a03 	vstr	s12, [r3, #12]
 800bb2a:	ed83 7a06 	vstr	s14, [r3, #24]
 800bb2e:	ed83 5a04 	vstr	s10, [r3, #16]
 800bb32:	edc3 5a01 	vstr	s11, [r3, #4]
 800bb36:	edc3 6a07 	vstr	s13, [r3, #28]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bb40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bb44:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bb48:	eeb0 7a45 	vmov.f32	s14, s10
 800bb4c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bb50:	e7b2      	b.n	800bab8 <getRotationMatrix+0x98>
 800bb52:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bb56:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bb5a:	e7c2      	b.n	800bae2 <getRotationMatrix+0xc2>
 800bb5c:	00000000 	.word	0x00000000

0800bb60 <b_dcm2q>:
 800bb60:	ed90 5a08 	vldr	s10, [r0, #32]
 800bb64:	edd0 7a00 	vldr	s15, [r0]
 800bb68:	edd0 6a04 	vldr	s13, [r0, #16]
 800bb6c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bb70:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bb74:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bb78:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bb7c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb84:	bfc5      	ittet	gt
 800bb86:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bb8a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bb8e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800bc9c <b_dcm2q+0x13c>
 800bb92:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bb96:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bb9a:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bb9e:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bba2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbaa:	bfc5      	ittet	gt
 800bbac:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bbb0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bbb4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800bc9c <b_dcm2q+0x13c>
 800bbb8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bbbc:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bbc0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc8:	dd5b      	ble.n	800bc82 <b_dcm2q+0x122>
 800bbca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bbce:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bbd2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bbd6:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bbda:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bbde:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bbe2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bbe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bbea:	edd0 6a07 	vldr	s13, [r0, #28]
 800bbee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf6:	bf85      	ittet	hi
 800bbf8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bbfc:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800bc00:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800bc9c <b_dcm2q+0x13c>
 800bc04:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800bc08:	edd0 7a05 	vldr	s15, [r0, #20]
 800bc0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bc10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc18:	d43c      	bmi.n	800bc94 <b_dcm2q+0x134>
 800bc1a:	bfd8      	it	le
 800bc1c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800bc20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc28:	ed81 7a00 	vstr	s14, [r1]
 800bc2c:	edd0 7a06 	vldr	s15, [r0, #24]
 800bc30:	ed90 7a02 	vldr	s14, [r0, #8]
 800bc34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc40:	d425      	bmi.n	800bc8e <b_dcm2q+0x12e>
 800bc42:	bfd8      	it	le
 800bc44:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800bc48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bc50:	edc1 5a01 	vstr	s11, [r1, #4]
 800bc54:	edd0 7a01 	vldr	s15, [r0, #4]
 800bc58:	ed90 7a03 	vldr	s14, [r0, #12]
 800bc5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc68:	d40e      	bmi.n	800bc88 <b_dcm2q+0x128>
 800bc6a:	bfd8      	it	le
 800bc6c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800bc70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc74:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bc78:	edc1 4a03 	vstr	s9, [r1, #12]
 800bc7c:	ed81 6a02 	vstr	s12, [r1, #8]
 800bc80:	4770      	bx	lr
 800bc82:	eddf 4a06 	vldr	s9, [pc, #24]	; 800bc9c <b_dcm2q+0x13c>
 800bc86:	e7aa      	b.n	800bbde <b_dcm2q+0x7e>
 800bc88:	eeb1 6a46 	vneg.f32	s12, s12
 800bc8c:	e7f0      	b.n	800bc70 <b_dcm2q+0x110>
 800bc8e:	eef1 5a65 	vneg.f32	s11, s11
 800bc92:	e7d9      	b.n	800bc48 <b_dcm2q+0xe8>
 800bc94:	eeb1 7a47 	vneg.f32	s14, s14
 800bc98:	e7c2      	b.n	800bc20 <b_dcm2q+0xc0>
 800bc9a:	bf00      	nop
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <q2hpr>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	ed90 7a00 	vldr	s14, [r0]
 800bca6:	edd0 6a01 	vldr	s13, [r0, #4]
 800bcaa:	edd0 7a02 	vldr	s15, [r0, #8]
 800bcae:	ed90 5a03 	vldr	s10, [r0, #12]
 800bcb2:	ed2d 8b0a 	vpush	{d8-d12}
 800bcb6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bcba:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bcbe:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800bcc2:	ee67 0a07 	vmul.f32	s1, s14, s14
 800bcc6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800bcca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bcce:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bcd2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bcd6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bcda:	ee78 aa08 	vadd.f32	s21, s16, s16
 800bcde:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800bce2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800bce6:	ee30 ca00 	vadd.f32	s24, s0, s0
 800bcea:	ee36 ba06 	vadd.f32	s22, s12, s12
 800bcee:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bcf2:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bcf6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800bcfa:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800bcfe:	460c      	mov	r4, r1
 800bd00:	bb8a      	cbnz	r2, 800bd66 <q2hpr+0xc6>
 800bd02:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bd06:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bd0a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bd0e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bd12:	f00a f833 	bl	8015d7c <atan2f>
 800bd16:	eeb0 8a40 	vmov.f32	s16, s0
 800bd1a:	ed84 8a00 	vstr	s16, [r4]
 800bd1e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bd22:	f009 fff9 	bl	8015d18 <asinf>
 800bd26:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bd2a:	eef0 8a40 	vmov.f32	s17, s0
 800bd2e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bd32:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bd36:	f00a f821 	bl	8015d7c <atan2f>
 800bd3a:	eef1 8a68 	vneg.f32	s17, s17
 800bd3e:	eeb0 9a40 	vmov.f32	s18, s0
 800bd42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4a:	ed84 9a02 	vstr	s18, [r4, #8]
 800bd4e:	edc4 8a01 	vstr	s17, [r4, #4]
 800bd52:	d505      	bpl.n	800bd60 <q2hpr+0xc0>
 800bd54:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bdac <q2hpr+0x10c>
 800bd58:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bd5c:	ed84 8a00 	vstr	s16, [r4]
 800bd60:	ecbd 8b0a 	vpop	{d8-d12}
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bd6a:	f009 ffd5 	bl	8015d18 <asinf>
 800bd6e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bd72:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bd76:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bd7a:	eeb0 9a40 	vmov.f32	s18, s0
 800bd7e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bd82:	f009 fffb 	bl	8015d7c <atan2f>
 800bd86:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bd8a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bd8e:	eef0 8a40 	vmov.f32	s17, s0
 800bd92:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bd96:	eeb1 0a48 	vneg.f32	s0, s16
 800bd9a:	f009 ffef 	bl	8015d7c <atan2f>
 800bd9e:	eef1 8a68 	vneg.f32	s17, s17
 800bda2:	eeb0 8a40 	vmov.f32	s16, s0
 800bda6:	ed84 0a00 	vstr	s0, [r4]
 800bdaa:	e7ca      	b.n	800bd42 <q2hpr+0xa2>
 800bdac:	40c90fdb 	.word	0x40c90fdb

0800bdb0 <llEvaluate.constprop.0>:
 800bdb0:	edd2 0a00 	vldr	s1, [r2]
 800bdb4:	ed90 1a00 	vldr	s2, [r0]
 800bdb8:	edd0 1a04 	vldr	s3, [r0, #16]
 800bdbc:	edd2 5a01 	vldr	s11, [r2, #4]
 800bdc0:	ed90 6a08 	vldr	s12, [r0, #32]
 800bdc4:	ed90 2a05 	vldr	s4, [r0, #20]
 800bdc8:	ed92 7a02 	vldr	s14, [r2, #8]
 800bdcc:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bdd0:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bdd4:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bdd8:	edd2 7a03 	vldr	s15, [r2, #12]
 800bddc:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bde0:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bde4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bde8:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	f10d 0810 	add.w	r8, sp, #16
 800bdf6:	2704      	movs	r7, #4
 800bdf8:	f101 0510 	add.w	r5, r1, #16
 800bdfc:	2f04      	cmp	r7, #4
 800bdfe:	4686      	mov	lr, r0
 800be00:	f04f 0c03 	mov.w	ip, #3
 800be04:	b27b      	sxtb	r3, r7
 800be06:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800be0a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800be0e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800be12:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800be16:	eea6 7a43 	vfms.f32	s14, s12, s6
 800be1a:	edcd 6a00 	vstr	s13, [sp]
 800be1e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800be22:	eee6 7a63 	vfms.f32	s15, s12, s7
 800be26:	ed8d 6a01 	vstr	s12, [sp, #4]
 800be2a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800be2e:	edcd 6a02 	vstr	s13, [sp, #8]
 800be32:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800be36:	ed8d 7a03 	vstr	s14, [sp, #12]
 800be3a:	ed78 7a01 	vldmdb	r8!, {s15}
 800be3e:	ed65 7a01 	vstmdb	r5!, {s15}
 800be42:	d029      	beq.n	800be98 <llEvaluate.constprop.0+0xe8>
 800be44:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800be48:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800be4c:	4432      	add	r2, r6
 800be4e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800be52:	edd2 6a00 	vldr	s13, [r2]
 800be56:	ed94 7a00 	vldr	s14, [r4]
 800be5a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800be5e:	3301      	adds	r3, #1
 800be60:	b2da      	uxtb	r2, r3
 800be62:	2a04      	cmp	r2, #4
 800be64:	b25b      	sxtb	r3, r3
 800be66:	edc5 7a00 	vstr	s15, [r5]
 800be6a:	d1ed      	bne.n	800be48 <llEvaluate.constprop.0+0x98>
 800be6c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800be70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800be74:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800be78:	ed85 7a00 	vstr	s14, [r5]
 800be7c:	d013      	beq.n	800bea6 <llEvaluate.constprop.0+0xf6>
 800be7e:	3f01      	subs	r7, #1
 800be80:	b2ff      	uxtb	r7, r7
 800be82:	ed78 7a01 	vldmdb	r8!, {s15}
 800be86:	2f04      	cmp	r7, #4
 800be88:	f1ae 0e14 	sub.w	lr, lr, #20
 800be8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800be90:	b27b      	sxtb	r3, r7
 800be92:	ed65 7a01 	vstmdb	r5!, {s15}
 800be96:	d1d5      	bne.n	800be44 <llEvaluate.constprop.0+0x94>
 800be98:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800be9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bea0:	ed85 7a00 	vstr	s14, [r5]
 800bea4:	e7eb      	b.n	800be7e <llEvaluate.constprop.0+0xce>
 800bea6:	b004      	add	sp, #16
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800beac <MEMS_updateMagBufferIndex>:
 800beac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beb0:	ed2d 8b02 	vpush	{d8}
 800beb4:	7804      	ldrb	r4, [r0, #0]
 800beb6:	7842      	ldrb	r2, [r0, #1]
 800beb8:	4606      	mov	r6, r0
 800beba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800bebe:	2300      	movs	r3, #0
 800bec0:	4294      	cmp	r4, r2
 800bec2:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800bec6:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800beca:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800bece:	b083      	sub	sp, #12
 800bed0:	460d      	mov	r5, r1
 800bed2:	f100 0001 	add.w	r0, r0, #1
 800bed6:	f000 8083 	beq.w	800bfe0 <MEMS_updateMagBufferIndex+0x134>
 800beda:	1b00      	subs	r0, r0, r4
 800bedc:	fb90 f8f2 	sdiv	r8, r0, r2
 800bee0:	fb02 0018 	mls	r0, r2, r8, r0
 800bee4:	2800      	cmp	r0, #0
 800bee6:	bfb6      	itet	lt
 800bee8:	eb02 0800 	addlt.w	r8, r2, r0
 800beec:	fa0f f880 	sxthge.w	r8, r0
 800bef0:	fa0f f888 	sxthlt.w	r8, r8
 800bef4:	b934      	cbnz	r4, 800bf04 <MEMS_updateMagBufferIndex+0x58>
 800bef6:	23ff      	movs	r3, #255	; 0xff
 800bef8:	70b3      	strb	r3, [r6, #2]
 800befa:	b003      	add	sp, #12
 800befc:	ecbd 8b02 	vpop	{d8}
 800bf00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf08:	2700      	movs	r7, #0
 800bf0a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800bf0e:	463b      	mov	r3, r7
 800bf10:	e000      	b.n	800bf14 <MEMS_updateMagBufferIndex+0x68>
 800bf12:	7872      	ldrb	r2, [r6, #1]
 800bf14:	4443      	add	r3, r8
 800bf16:	fb93 f4f2 	sdiv	r4, r3, r2
 800bf1a:	fb02 3314 	mls	r3, r2, r4, r3
 800bf1e:	b2dc      	uxtb	r4, r3
 800bf20:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800bf24:	3701      	adds	r7, #1
 800bf26:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800bf2a:	fb92 f3f5 	sdiv	r3, r2, r5
 800bf2e:	fb05 2313 	mls	r3, r5, r3, r2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfb8      	it	lt
 800bf36:	195b      	addlt	r3, r3, r5
 800bf38:	b21b      	sxth	r3, r3
 800bf3a:	ee00 3a10 	vmov	s0, r3
 800bf3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf42:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bf46:	f009 fdef 	bl	8015b28 <roundf>
 800bf4a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800bf4e:	fb92 f3f5 	sdiv	r3, r2, r5
 800bf52:	fb05 2313 	mls	r3, r5, r3, r2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	bfb8      	it	lt
 800bf5a:	195b      	addlt	r3, r3, r5
 800bf5c:	b21b      	sxth	r3, r3
 800bf5e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf62:	ee00 3a10 	vmov	s0, r3
 800bf66:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf6a:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf6e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bf72:	f009 fdd9 	bl	8015b28 <roundf>
 800bf76:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800bf7a:	fb92 f3f5 	sdiv	r3, r2, r5
 800bf7e:	fb05 2313 	mls	r3, r5, r3, r2
 800bf82:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf86:	18ea      	adds	r2, r5, r3
 800bf88:	b219      	sxth	r1, r3
 800bf8a:	b212      	sxth	r2, r2
 800bf8c:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800bf90:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf94:	ee00 1a10 	vmov	s0, r1
 800bf98:	ee07 2a90 	vmov	s15, r2
 800bf9c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bfa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bfaa:	bfb8      	it	lt
 800bfac:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800bfb0:	f009 fdba 	bl	8015b28 <roundf>
 800bfb4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bfb8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800bfbc:	edcd 7a01 	vstr	s15, [sp, #4]
 800bfc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f7ff fce7 	bl	800b99c <MEMS_setMagIndexToOne>
 800bfce:	7832      	ldrb	r2, [r6, #0]
 800bfd0:	b2fb      	uxtb	r3, r7
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d89d      	bhi.n	800bf12 <MEMS_updateMagBufferIndex+0x66>
 800bfd6:	b003      	add	sp, #12
 800bfd8:	ecbd 8b02 	vpop	{d8}
 800bfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfe0:	fb90 f8f4 	sdiv	r8, r0, r4
 800bfe4:	fb04 0018 	mls	r0, r4, r8, r0
 800bfe8:	fa0f f880 	sxth.w	r8, r0
 800bfec:	e782      	b.n	800bef4 <MEMS_updateMagBufferIndex+0x48>
 800bfee:	bf00      	nop

0800bff0 <getMagStats.constprop.0>:
 800bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bff6:	2400      	movs	r4, #0
 800bff8:	4607      	mov	r7, r0
 800bffa:	6034      	str	r4, [r6, #0]
 800bffc:	601c      	str	r4, [r3, #0]
 800bffe:	7800      	ldrb	r0, [r0, #0]
 800c000:	787d      	ldrb	r5, [r7, #1]
 800c002:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800c006:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c00a:	42a8      	cmp	r0, r5
 800c00c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800c010:	f000 80c0 	beq.w	800c194 <getMagStats.constprop.0+0x1a4>
 800c014:	3401      	adds	r4, #1
 800c016:	eba4 0c00 	sub.w	ip, r4, r0
 800c01a:	fb9c f4f5 	sdiv	r4, ip, r5
 800c01e:	fb05 c414 	mls	r4, r5, r4, ip
 800c022:	2c00      	cmp	r4, #0
 800c024:	bfb8      	it	lt
 800c026:	1964      	addlt	r4, r4, r5
 800c028:	b224      	sxth	r4, r4
 800c02a:	ee04 0a90 	vmov	s9, r0
 800c02e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c1b0 <getMagStats.constprop.0+0x1c0>
 800c032:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c036:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c03a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c03e:	2800      	cmp	r0, #0
 800c040:	f000 80b2 	beq.w	800c1a8 <getMagStats.constprop.0+0x1b8>
 800c044:	3801      	subs	r0, #1
 800c046:	fa54 fc80 	uxtab	ip, r4, r0
 800c04a:	f8b1 9000 	ldrh.w	r9, [r1]
 800c04e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c052:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c056:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c1b4 <getMagStats.constprop.0+0x1c4>
 800c05a:	2000      	movs	r0, #0
 800c05c:	e002      	b.n	800c064 <getMagStats.constprop.0+0x74>
 800c05e:	ed93 3a00 	vldr	s6, [r3]
 800c062:	3401      	adds	r4, #1
 800c064:	fb94 f1f5 	sdiv	r1, r4, r5
 800c068:	fb05 4111 	mls	r1, r5, r1, r4
 800c06c:	b2c9      	uxtb	r1, r1
 800c06e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c072:	edd2 3a00 	vldr	s7, [r2]
 800c076:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c07a:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c07e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c080:	ed92 4a04 	vldr	s8, [r2, #16]
 800c084:	ed92 6a08 	vldr	s12, [r2, #32]
 800c088:	ebaa 0a09 	sub.w	sl, sl, r9
 800c08c:	ebab 0b08 	sub.w	fp, fp, r8
 800c090:	fa0f fa8a 	sxth.w	sl, sl
 800c094:	ee07 aa10 	vmov	s14, sl
 800c098:	fa0f fa8b 	sxth.w	sl, fp
 800c09c:	ee06 aa90 	vmov	s13, sl
 800c0a0:	eba1 010e 	sub.w	r1, r1, lr
 800c0a4:	b209      	sxth	r1, r1
 800c0a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c0aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c0ae:	ee07 1a90 	vmov	s15, r1
 800c0b2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c0b6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c0ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c0c2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c0c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c0ca:	ee16 1a90 	vmov	r1, s13
 800c0ce:	ee17 aa10 	vmov	sl, s14
 800c0d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0d6:	fb11 f101 	smulbb	r1, r1, r1
 800c0da:	fa0f fa8a 	sxth.w	sl, sl
 800c0de:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c0e2:	ee17 1a90 	vmov	r1, s15
 800c0e6:	b209      	sxth	r1, r1
 800c0e8:	fb01 a101 	mla	r1, r1, r1, sl
 800c0ec:	ee07 1a90 	vmov	s15, r1
 800c0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f4:	f100 0a01 	add.w	sl, r0, #1
 800c0f8:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c0fc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c100:	ee17 1a90 	vmov	r1, s15
 800c104:	b209      	sxth	r1, r1
 800c106:	ee07 1a10 	vmov	s14, r1
 800c10a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c10e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c112:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c116:	eef0 7ae7 	vabs.f32	s15, s15
 800c11a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c11e:	ed83 7a00 	vstr	s14, [r3]
 800c122:	ee17 1a90 	vmov	r1, s15
 800c126:	b209      	sxth	r1, r1
 800c128:	fb01 fb01 	mul.w	fp, r1, r1
 800c12c:	ee07 ba90 	vmov	s15, fp
 800c130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c134:	ee07 1a90 	vmov	s15, r1
 800c138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c13c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c140:	edd6 7a00 	vldr	s15, [r6]
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14c:	bf48      	it	mi
 800c14e:	fa5f f08a 	uxtbmi.w	r0, sl
 800c152:	45a4      	cmp	ip, r4
 800c154:	edc6 7a00 	vstr	s15, [r6]
 800c158:	d181      	bne.n	800c05e <getMagStats.constprop.0+0x6e>
 800c15a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c15e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c1b8 <getMagStats.constprop.0+0x1c8>
 800c162:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c166:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c16a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c16e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c176:	bfb8      	it	lt
 800c178:	eef0 7a47 	vmovlt.f32	s15, s14
 800c17c:	edc6 7a00 	vstr	s15, [r6]
 800c180:	edd3 7a00 	vldr	s15, [r3]
 800c184:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c188:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c18c:	edc3 7a00 	vstr	s15, [r3]
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	1c65      	adds	r5, r4, #1
 800c196:	fb95 f4f0 	sdiv	r4, r5, r0
 800c19a:	fb00 5414 	mls	r4, r0, r4, r5
 800c19e:	ee04 0a90 	vmov	s9, r0
 800c1a2:	b224      	sxth	r4, r4
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	e742      	b.n	800c02e <getMagStats.constprop.0+0x3e>
 800c1a8:	edd6 7a00 	vldr	s15, [r6]
 800c1ac:	e7d5      	b.n	800c15a <getMagStats.constprop.0+0x16a>
 800c1ae:	bf00      	nop
 800c1b0:	423c0000 	.word	0x423c0000
 800c1b4:	00000000 	.word	0x00000000
 800c1b8:	3f59999a 	.word	0x3f59999a

0800c1bc <MFX_emptyAttitude>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	ed2d 8b10 	vpush	{d8-d15}
 800c1c4:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c1c8:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c1cc:	f04f 0a00 	mov.w	sl, #0
 800c1d0:	4fef      	ldr	r7, [pc, #956]	; (800c590 <MFX_emptyAttitude+0x3d4>)
 800c1d2:	f8c4 a008 	str.w	sl, [r4, #8]
 800c1d6:	e9c4 aa00 	strd	sl, sl, [r4]
 800c1da:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c1de:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c1e2:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c1e6:	4680      	mov	r8, r0
 800c1e8:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c1ec:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c1f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c1fa:	ab27      	add	r3, sp, #156	; 0x9c
 800c1fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c200:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c204:	ab2d      	add	r3, sp, #180	; 0xb4
 800c206:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c20a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c20e:	ab30      	add	r3, sp, #192	; 0xc0
 800c210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c214:	ab33      	add	r3, sp, #204	; 0xcc
 800c216:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c21a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c21e:	f04f 0c00 	mov.w	ip, #0
 800c222:	ab36      	add	r3, sp, #216	; 0xd8
 800c224:	f04f 0b00 	mov.w	fp, #0
 800c228:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c22c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c234:	4628      	mov	r0, r5
 800c236:	2224      	movs	r2, #36	; 0x24
 800c238:	f00b faa0 	bl	801777c <memset>
 800c23c:	4651      	mov	r1, sl
 800c23e:	4620      	mov	r0, r4
 800c240:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c244:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c594 <MFX_emptyAttitude+0x3d8>
 800c248:	eddf ead3 	vldr	s29, [pc, #844]	; 800c598 <MFX_emptyAttitude+0x3dc>
 800c24c:	f00b fa96 	bl	801777c <memset>
 800c250:	edd5 4a00 	vldr	s9, [r5]
 800c254:	ed95 5a01 	vldr	s10, [r5, #4]
 800c258:	edd5 5a02 	vldr	s11, [r5, #8]
 800c25c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c260:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c264:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c268:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c26c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c270:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c274:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c278:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c27c:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c280:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c284:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c288:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c28c:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c290:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c294:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c298:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c29c:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c2a0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c2a4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c2a8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c2ac:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c2b0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c2b4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c2b8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c2bc:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c2c0:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c2c4:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c2c8:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c2cc:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c2d0:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c2d4:	ed95 6a03 	vldr	s12, [r5, #12]
 800c2d8:	edd5 6a04 	vldr	s13, [r5, #16]
 800c2dc:	ed95 7a05 	vldr	s14, [r5, #20]
 800c2e0:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c2e4:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c2e8:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c2ec:	edcd 6a07 	vstr	s13, [sp, #28]
 800c2f0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c2f4:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c2f8:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c2fc:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c300:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c304:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c308:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c30c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c310:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c314:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c318:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c31c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c320:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c324:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c328:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c32c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c330:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c334:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c338:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c33c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c340:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c344:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c348:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c34c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c350:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c354:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c358:	edd5 7a06 	vldr	s15, [r5, #24]
 800c35c:	edd5 fa07 	vldr	s31, [r5, #28]
 800c360:	ed95 fa08 	vldr	s30, [r5, #32]
 800c364:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c368:	edcd 7a05 	vstr	s15, [sp, #20]
 800c36c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c370:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c374:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c378:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c37c:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c380:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c384:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c388:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c38c:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c390:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c394:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c398:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c39c:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c3a0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c3a4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c3a8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c3ac:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c3b0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c3b4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c3b8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c3bc:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c3c0:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c3c4:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c3c8:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c3cc:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c3d0:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c3d4:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c3d8:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c3dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3de:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c3e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	f8cc 3000 	str.w	r3, [ip]
 800c3f2:	4651      	mov	r1, sl
 800c3f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c3fe:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c402:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c406:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c40a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c40e:	f00b f9b5 	bl	801777c <memset>
 800c412:	4621      	mov	r1, r4
 800c414:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c418:	a898      	add	r0, sp, #608	; 0x260
 800c41a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c41e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c422:	f00b f983 	bl	801772c <memcpy>
 800c426:	4651      	mov	r1, sl
 800c428:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c42c:	4620      	mov	r0, r4
 800c42e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c432:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c436:	f00b f9a1 	bl	801777c <memset>
 800c43a:	4621      	mov	r1, r4
 800c43c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c440:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c442:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c446:	f00b f971 	bl	801772c <memcpy>
 800c44a:	4651      	mov	r1, sl
 800c44c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c450:	4620      	mov	r0, r4
 800c452:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c456:	f00b f991 	bl	801777c <memset>
 800c45a:	4621      	mov	r1, r4
 800c45c:	8037      	strh	r7, [r6, #0]
 800c45e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c462:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c466:	f00b f961 	bl	801772c <memcpy>
 800c46a:	4651      	mov	r1, sl
 800c46c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c470:	4620      	mov	r0, r4
 800c472:	ed86 8a01 	vstr	s16, [r6, #4]
 800c476:	f00b f981 	bl	801777c <memset>
 800c47a:	4621      	mov	r1, r4
 800c47c:	802f      	strh	r7, [r5, #0]
 800c47e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c482:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c486:	f00b f951 	bl	801772c <memcpy>
 800c48a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c48e:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c492:	2701      	movs	r7, #1
 800c494:	9600      	str	r6, [sp, #0]
 800c496:	9403      	str	r4, [sp, #12]
 800c498:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c59c <MFX_emptyAttitude+0x3e0>
 800c49c:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c5a0 <MFX_emptyAttitude+0x3e4>
 800c4a0:	ed85 8a01 	vstr	s16, [r5, #4]
 800c4a4:	483f      	ldr	r0, [pc, #252]	; (800c5a4 <MFX_emptyAttitude+0x3e8>)
 800c4a6:	4d40      	ldr	r5, [pc, #256]	; (800c5a8 <MFX_emptyAttitude+0x3ec>)
 800c4a8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c5cc <MFX_emptyAttitude+0x410>
 800c4ac:	951c      	str	r5, [sp, #112]	; 0x70
 800c4ae:	abf2      	add	r3, sp, #968	; 0x3c8
 800c4b0:	aa96      	add	r2, sp, #600	; 0x258
 800c4b2:	a90d      	add	r1, sp, #52	; 0x34
 800c4b4:	9017      	str	r0, [sp, #92]	; 0x5c
 800c4b6:	4d3d      	ldr	r5, [pc, #244]	; (800c5ac <MFX_emptyAttitude+0x3f0>)
 800c4b8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c4bc:	4638      	mov	r0, r7
 800c4be:	ae27      	add	r6, sp, #156	; 0x9c
 800c4c0:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c4c4:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c4c8:	951b      	str	r5, [sp, #108]	; 0x6c
 800c4ca:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c4ce:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c4d2:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c4d6:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c4da:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c4de:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c4e2:	f7fe fed1 	bl	800b288 <DataHist_parameters>
 800c4e6:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c4e8:	4b31      	ldr	r3, [pc, #196]	; (800c5b0 <MFX_emptyAttitude+0x3f4>)
 800c4ea:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c4ee:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c4f2:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c4f6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c4fa:	f8c8 300c 	str.w	r3, [r8, #12]
 800c4fe:	4b2d      	ldr	r3, [pc, #180]	; (800c5b4 <MFX_emptyAttitude+0x3f8>)
 800c500:	f8c8 3014 	str.w	r3, [r8, #20]
 800c504:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c508:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c5b8 <MFX_emptyAttitude+0x3fc>
 800c50c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c5bc <MFX_emptyAttitude+0x400>
 800c510:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c5c0 <MFX_emptyAttitude+0x404>
 800c514:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c5c4 <MFX_emptyAttitude+0x408>
 800c518:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c5c8 <MFX_emptyAttitude+0x40c>
 800c51c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c520:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c5d0 <MFX_emptyAttitude+0x414>
 800c524:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c5d4 <MFX_emptyAttitude+0x418>
 800c528:	edc8 2a06 	vstr	s5, [r8, #24]
 800c52c:	f04f 0b00 	mov.w	fp, #0
 800c530:	f04f 0c00 	mov.w	ip, #0
 800c534:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c538:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c53c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c540:	ad2d      	add	r5, sp, #180	; 0xb4
 800c542:	469b      	mov	fp, r3
 800c544:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c5d8 <MFX_emptyAttitude+0x41c>
 800c548:	ed88 3a07 	vstr	s6, [r8, #28]
 800c54c:	f240 1301 	movw	r3, #257	; 0x101
 800c550:	edc8 3a08 	vstr	s7, [r8, #32]
 800c554:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c558:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c55c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c560:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c564:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c568:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c56c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c570:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c574:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c578:	f8c8 3000 	str.w	r3, [r8]
 800c57c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c580:	ed88 8a02 	vstr	s16, [r8, #8]
 800c584:	ed88 8a04 	vstr	s16, [r8, #16]
 800c588:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c58c:	e028      	b.n	800c5e0 <MFX_emptyAttitude+0x424>
 800c58e:	bf00      	nop
 800c590:	0801a6a4 	.word	0x0801a6a4
 800c594:	00000000 	.word	0x00000000
 800c598:	447a0000 	.word	0x447a0000
 800c59c:	3e93ffa3 	.word	0x3e93ffa3
 800c5a0:	3e5cec8f 	.word	0x3e5cec8f
 800c5a4:	3ea25c13 	.word	0x3ea25c13
 800c5a8:	40a00000 	.word	0x40a00000
 800c5ac:	3d57bb3d 	.word	0x3d57bb3d
 800c5b0:	01010100 	.word	0x01010100
 800c5b4:	41200000 	.word	0x41200000
 800c5b8:	3a9d4952 	.word	0x3a9d4952
 800c5bc:	3ac49ba6 	.word	0x3ac49ba6
 800c5c0:	3b03126f 	.word	0x3b03126f
 800c5c4:	402ab021 	.word	0x402ab021
 800c5c8:	3a83126f 	.word	0x3a83126f
 800c5cc:	3e006d36 	.word	0x3e006d36
 800c5d0:	3f639581 	.word	0x3f639581
 800c5d4:	3f13f7cf 	.word	0x3f13f7cf
 800c5d8:	3f2ac083 	.word	0x3f2ac083
 800c5dc:	3f4ccccd 	.word	0x3f4ccccd
 800c5e0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c5e2:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c5e6:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c5ea:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c5ee:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c5f2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c5f6:	ab33      	add	r3, sp, #204	; 0xcc
 800c5f8:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c5fc:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c600:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c604:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c606:	ab36      	add	r3, sp, #216	; 0xd8
 800c608:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c60c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c610:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c614:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c616:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c5dc <MFX_emptyAttitude+0x420>
 800c61a:	4bd6      	ldr	r3, [pc, #856]	; (800c974 <MFX_emptyAttitude+0x7b8>)
 800c61c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c620:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c624:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c628:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c62c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c630:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c634:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c638:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c63c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c640:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c644:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c648:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c64c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c650:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c654:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c658:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c65c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c660:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c664:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c668:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c66c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c670:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c674:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c678:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c67c:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c680:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c684:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c688:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c68c:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c690:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c694:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c698:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c69c:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c6a0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c6a4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c6a8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c6ac:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c6b0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c6b4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c6b8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c6bc:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c6c0:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c6c4:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c6c8:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c6cc:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c6d0:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c6d4:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c6d8:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c6dc:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c6e0:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c6e4:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c6e8:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c6ec:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c6f0:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c6f4:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c6f8:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c6fc:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c700:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c704:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c708:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c70c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c710:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c714:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c718:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c71c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c720:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c724:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c728:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c72c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c730:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c734:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c738:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c73c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c740:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c744:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c748:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c74c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c750:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c754:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c758:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c75c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c760:	eddd 6a07 	vldr	s13, [sp, #28]
 800c764:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c768:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c76c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c770:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c774:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c778:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c77c:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c780:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c784:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c788:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c78c:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c790:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c794:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c798:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c79c:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c7a0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c7a4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c7a8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c7ac:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c7b0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c7b4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c7b8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c7bc:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c7c0:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c7c4:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c7c8:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c7cc:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c7d0:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c7d4:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c7d8:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c7dc:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c7e0:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c7e4:	eddd 7a05 	vldr	s15, [sp, #20]
 800c7e8:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c7ec:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c7f0:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c7f4:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c7f8:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c7fc:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c800:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c804:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c808:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c80c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c810:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c814:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c818:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c81c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c820:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c824:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c828:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c82c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c830:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c834:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c838:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c83c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c840:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c844:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c848:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c84c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c850:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c854:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c858:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c85c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c860:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c864:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c868:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c86c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c870:	7820      	ldrb	r0, [r4, #0]
 800c872:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c876:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c87a:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c87e:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c882:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c886:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c88a:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c88e:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c892:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c896:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c89a:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c89e:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c8a2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c8a6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c8aa:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c8ae:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c8b2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c8b6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c8ba:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c8be:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c8c2:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c8c6:	f8cd e00c 	str.w	lr, [sp, #12]
 800c8ca:	9500      	str	r5, [sp, #0]
 800c8cc:	f7fe fcdc 	bl	800b288 <DataHist_parameters>
 800c8d0:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c8d4:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c8d8:	9205      	str	r2, [sp, #20]
 800c8da:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c8de:	ed8b ba00 	vstr	s22, [fp]
 800c8e2:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c8e6:	ed83 ba00 	vstr	s22, [r3]
 800c8ea:	9b05      	ldr	r3, [sp, #20]
 800c8ec:	9106      	str	r1, [sp, #24]
 800c8ee:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c8f2:	ed89 ba00 	vstr	s22, [r9]
 800c8f6:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c8fa:	ed83 8a00 	vstr	s16, [r3]
 800c8fe:	9b06      	ldr	r3, [sp, #24]
 800c900:	9207      	str	r2, [sp, #28]
 800c902:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c906:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c90a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c90e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c912:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c916:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c91a:	ed8e ba00 	vstr	s22, [lr]
 800c91e:	ed8c ba00 	vstr	s22, [ip]
 800c922:	ed87 ba00 	vstr	s22, [r7]
 800c926:	ed86 ba00 	vstr	s22, [r6]
 800c92a:	ed85 ba00 	vstr	s22, [r5]
 800c92e:	ed84 ba00 	vstr	s22, [r4]
 800c932:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c936:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c93a:	ed83 ba00 	vstr	s22, [r3]
 800c93e:	9b07      	ldr	r3, [sp, #28]
 800c940:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c944:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c948:	ed80 8a00 	vstr	s16, [r0]
 800c94c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c950:	ed81 ba00 	vstr	s22, [r1]
 800c954:	ed83 ba00 	vstr	s22, [r3]
 800c958:	230a      	movs	r3, #10
 800c95a:	ed82 ba00 	vstr	s22, [r2]
 800c95e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c962:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c966:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c96a:	ecbd 8b10 	vpop	{d8-d15}
 800c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c972:	bf00      	nop
 800c974:	3f333333 	.word	0x3f333333

0800c978 <output_update>:
 800c978:	ed90 7a00 	vldr	s14, [r0]
 800c97c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c980:	ed90 5a03 	vldr	s10, [r0, #12]
 800c984:	edd0 5a02 	vldr	s11, [r0, #8]
 800c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c990:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c994:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c998:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c99c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c9a0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c9a4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c9a8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c9ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c9b0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c9b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c9b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c9bc:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c9c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c9c4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c9c8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c9cc:	460f      	mov	r7, r1
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	461e      	mov	r6, r3
 800c9d2:	f1bc 0f00 	cmp.w	ip, #0
 800c9d6:	d146      	bne.n	800ca66 <output_update+0xee>
 800c9d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9dc:	eef1 6a66 	vneg.f32	s13, s13
 800c9e0:	edc3 7a01 	vstr	s15, [r3, #4]
 800c9e4:	edc3 6a00 	vstr	s13, [r3]
 800c9e8:	ed83 5a02 	vstr	s10, [r3, #8]
 800c9ec:	4662      	mov	r2, ip
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	f7ff f955 	bl	800bca0 <q2hpr>
 800c9f6:	edd5 6a01 	vldr	s13, [r5, #4]
 800c9fa:	ed95 7a00 	vldr	s14, [r5]
 800c9fe:	edd5 7a02 	vldr	s15, [r5, #8]
 800ca02:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800cb14 <output_update+0x19c>
 800ca06:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca0a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800ca0e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800ca12:	ed85 7a00 	vstr	s14, [r5]
 800ca16:	edc5 6a01 	vstr	s13, [r5, #4]
 800ca1a:	edc5 7a02 	vstr	s15, [r5, #8]
 800ca1e:	ed97 7a01 	vldr	s14, [r7, #4]
 800ca22:	edd6 7a00 	vldr	s15, [r6]
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca2c:	edc8 7a00 	vstr	s15, [r8]
 800ca30:	ed97 7a00 	vldr	s14, [r7]
 800ca34:	edd6 7a01 	vldr	s15, [r6, #4]
 800ca38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca3c:	edc8 7a01 	vstr	s15, [r8, #4]
 800ca40:	edd6 7a02 	vldr	s15, [r6, #8]
 800ca44:	ed97 7a02 	vldr	s14, [r7, #8]
 800ca48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca4c:	edc8 7a02 	vstr	s15, [r8, #8]
 800ca50:	edd4 7a02 	vldr	s15, [r4, #8]
 800ca54:	6863      	ldr	r3, [r4, #4]
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	eef1 7a67 	vneg.f32	s15, s15
 800ca5c:	6062      	str	r2, [r4, #4]
 800ca5e:	edc4 7a02 	vstr	s15, [r4, #8]
 800ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca66:	f1bc 0f01 	cmp.w	ip, #1
 800ca6a:	d015      	beq.n	800ca98 <output_update+0x120>
 800ca6c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cb14 <output_update+0x19c>
 800ca70:	edd2 6a00 	vldr	s13, [r2]
 800ca74:	ed92 7a01 	vldr	s14, [r2, #4]
 800ca78:	edd2 7a02 	vldr	s15, [r2, #8]
 800ca7c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ca80:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca84:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ca88:	edc2 6a00 	vstr	s13, [r2]
 800ca8c:	ed82 7a01 	vstr	s14, [r2, #4]
 800ca90:	edc2 7a02 	vstr	s15, [r2, #8]
 800ca94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca9c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800caa0:	eef1 6a66 	vneg.f32	s13, s13
 800caa4:	edc3 7a00 	vstr	s15, [r3]
 800caa8:	ed83 6a02 	vstr	s12, [r3, #8]
 800caac:	edc3 6a01 	vstr	s13, [r3, #4]
 800cab0:	4662      	mov	r2, ip
 800cab2:	4629      	mov	r1, r5
 800cab4:	f7ff f8f4 	bl	800bca0 <q2hpr>
 800cab8:	edd5 6a00 	vldr	s13, [r5]
 800cabc:	ed95 7a01 	vldr	s14, [r5, #4]
 800cac0:	edd5 7a02 	vldr	s15, [r5, #8]
 800cac4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cb14 <output_update+0x19c>
 800cac8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cacc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cad0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cad4:	ed85 7a01 	vstr	s14, [r5, #4]
 800cad8:	edc5 6a00 	vstr	s13, [r5]
 800cadc:	edc5 7a02 	vstr	s15, [r5, #8]
 800cae0:	ed97 7a00 	vldr	s14, [r7]
 800cae4:	edd6 7a00 	vldr	s15, [r6]
 800cae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caec:	edc8 7a00 	vstr	s15, [r8]
 800caf0:	ed97 7a01 	vldr	s14, [r7, #4]
 800caf4:	edd6 7a01 	vldr	s15, [r6, #4]
 800caf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cafc:	edc8 7a01 	vstr	s15, [r8, #4]
 800cb00:	edd6 7a02 	vldr	s15, [r6, #8]
 800cb04:	ed97 7a02 	vldr	s14, [r7, #8]
 800cb08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb0c:	edc8 7a02 	vstr	s15, [r8, #8]
 800cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb14:	42652ee1 	.word	0x42652ee1

0800cb18 <kalman_3gyro.constprop.0>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	ed2d 8b10 	vpush	{d8-d15}
 800cb20:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800cb24:	edd2 9a02 	vldr	s19, [r2, #8]
 800cb28:	edd2 8a03 	vldr	s17, [r2, #12]
 800cb2c:	edd2 6a04 	vldr	s13, [r2, #16]
 800cb30:	ed92 6a05 	vldr	s12, [r2, #20]
 800cb34:	6854      	ldr	r4, [r2, #4]
 800cb36:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800cb3a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cb3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb42:	4683      	mov	fp, r0
 800cb44:	edd2 7a00 	vldr	s15, [r2]
 800cb48:	48e3      	ldr	r0, [pc, #908]	; (800ced8 <kalman_3gyro.constprop.0+0x3c0>)
 800cb4a:	9108      	str	r1, [sp, #32]
 800cb4c:	904a      	str	r0, [sp, #296]	; 0x128
 800cb4e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800cb52:	460d      	mov	r5, r1
 800cb54:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800cb58:	2100      	movs	r1, #0
 800cb5a:	9328      	str	r3, [sp, #160]	; 0xa0
 800cb5c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800cb60:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800cb64:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cb68:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800cb6c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800cb70:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800cb74:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800cb78:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800cb7c:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800cb80:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800cb84:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800cb88:	946f      	str	r4, [sp, #444]	; 0x1bc
 800cb8a:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cb8c:	9471      	str	r4, [sp, #452]	; 0x1c4
 800cb8e:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800cb92:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800cb96:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800cb9a:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800cb9e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cba2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cba6:	eeb0 8a60 	vmov.f32	s16, s1
 800cbaa:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800cbae:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800cbb2:	ed8d 1a07 	vstr	s2, [sp, #28]
 800cbb6:	f00a fde1 	bl	801777c <memset>
 800cbba:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800cbbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cbc2:	600b      	str	r3, [r1, #0]
 800cbc4:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cbc8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cbcc:	600b      	str	r3, [r1, #0]
 800cbce:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cbd2:	600b      	str	r3, [r1, #0]
 800cbd4:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cbd8:	600b      	str	r3, [r1, #0]
 800cbda:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cbde:	600b      	str	r3, [r1, #0]
 800cbe0:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cbe4:	600b      	str	r3, [r1, #0]
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	f001 82c2 	beq.w	800e170 <kalman_3gyro.constprop.0+0x1658>
 800cbec:	ed95 5a02 	vldr	s10, [r5, #8]
 800cbf0:	edd5 5a01 	vldr	s11, [r5, #4]
 800cbf4:	ed95 3a00 	vldr	s6, [r5]
 800cbf8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cbfc:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800cc00:	ee35 4a05 	vadd.f32	s8, s10, s10
 800cc04:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800cc08:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cc0c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800cc10:	ee33 3a03 	vadd.f32	s6, s6, s6
 800cc14:	9b08      	ldr	r3, [sp, #32]
 800cc16:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800cc1a:	ed82 4a00 	vstr	s8, [r2]
 800cc1e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800cc22:	edc2 4a00 	vstr	s9, [r2]
 800cc26:	ed93 6a05 	vldr	s12, [r3, #20]
 800cc2a:	edd3 6a04 	vldr	s13, [r3, #16]
 800cc2e:	ed93 7a03 	vldr	s14, [r3, #12]
 800cc32:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800cc36:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800cc3a:	ed82 5a00 	vstr	s10, [r2]
 800cc3e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800cc42:	ed82 3a00 	vstr	s6, [r2]
 800cc46:	eef1 3a46 	vneg.f32	s7, s12
 800cc4a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800cc4e:	edc2 5a00 	vstr	s11, [r2]
 800cc52:	eeb1 4a66 	vneg.f32	s8, s13
 800cc56:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800cc5a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800cc5e:	edc2 7a00 	vstr	s15, [r2]
 800cc62:	ee34 3a04 	vadd.f32	s6, s8, s8
 800cc66:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800cc6a:	eef1 4a47 	vneg.f32	s9, s14
 800cc6e:	ed82 5a00 	vstr	s10, [r2]
 800cc72:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800cc76:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800cc7a:	ed81 3a00 	vstr	s6, [r1]
 800cc7e:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800cc82:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800cc86:	ed81 5a00 	vstr	s10, [r1]
 800cc8a:	ee77 7a07 	vadd.f32	s15, s14, s14
 800cc8e:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800cc92:	edc1 5a00 	vstr	s11, [r1]
 800cc96:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800cc9a:	edc1 7a00 	vstr	s15, [r1]
 800cc9e:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800cca2:	2300      	movs	r3, #0
 800cca4:	600b      	str	r3, [r1, #0]
 800cca6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800ccaa:	ee76 2a06 	vadd.f32	s5, s12, s12
 800ccae:	600b      	str	r3, [r1, #0]
 800ccb0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800ccb4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800ccb8:	600b      	str	r3, [r1, #0]
 800ccba:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800ccbe:	edc2 2a00 	vstr	s5, [r2]
 800ccc2:	600b      	str	r3, [r1, #0]
 800ccc4:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800ccc8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800cccc:	600b      	str	r3, [r1, #0]
 800ccce:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ccd2:	a87b      	add	r0, sp, #492	; 0x1ec
 800ccd4:	600b      	str	r3, [r1, #0]
 800ccd6:	2230      	movs	r2, #48	; 0x30
 800ccd8:	2100      	movs	r1, #0
 800ccda:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ccde:	934b      	str	r3, [sp, #300]	; 0x12c
 800cce0:	934f      	str	r3, [sp, #316]	; 0x13c
 800cce2:	9353      	str	r3, [sp, #332]	; 0x14c
 800cce4:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800cce8:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800ccec:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800ccf0:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800ccf4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800ccf8:	942c      	str	r4, [sp, #176]	; 0xb0
 800ccfa:	f00a fd3f 	bl	801777c <memset>
 800ccfe:	eddb 6a06 	vldr	s13, [fp, #24]
 800cd02:	ed9b 7a07 	vldr	s14, [fp, #28]
 800cd06:	eddb 7a08 	vldr	s15, [fp, #32]
 800cd0a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800cd0e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800cd12:	ee28 7a07 	vmul.f32	s14, s16, s14
 800cd16:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cd1a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800cd1e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800cd22:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f043 84a8 	bne.w	801067c <kalman_3gyro.constprop.0+0x3b64>
 800cd2c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f043 81e7 	bne.w	8010104 <kalman_3gyro.constprop.0+0x35ec>
 800cd36:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800cd40:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cd44:	9310      	str	r3, [sp, #64]	; 0x40
 800cd46:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cd4a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cd4e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800cd52:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd54:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cd58:	edd0 7a00 	vldr	s15, [r0]
 800cd5c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cd60:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cd64:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cd68:	ed93 6a00 	vldr	s12, [r3]
 800cd6c:	ed91 7a00 	vldr	s14, [r1]
 800cd70:	edd2 6a00 	vldr	s13, [r2]
 800cd74:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cd78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cd86:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cd8a:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cd8e:	933a      	str	r3, [sp, #232]	; 0xe8
 800cd90:	933b      	str	r3, [sp, #236]	; 0xec
 800cd92:	933c      	str	r3, [sp, #240]	; 0xf0
 800cd94:	933d      	str	r3, [sp, #244]	; 0xf4
 800cd96:	d14e      	bne.n	800ce36 <kalman_3gyro.constprop.0+0x31e>
 800cd98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda0:	d149      	bne.n	800ce36 <kalman_3gyro.constprop.0+0x31e>
 800cda2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdaa:	d144      	bne.n	800ce36 <kalman_3gyro.constprop.0+0x31e>
 800cdac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	d13f      	bne.n	800ce36 <kalman_3gyro.constprop.0+0x31e>
 800cdb6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cdb8:	9336      	str	r3, [sp, #216]	; 0xd8
 800cdba:	7802      	ldrb	r2, [r0, #0]
 800cdbc:	9337      	str	r3, [sp, #220]	; 0xdc
 800cdbe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cdc2:	9338      	str	r3, [sp, #224]	; 0xe0
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	ed90 7a03 	vldr	s14, [r0, #12]
 800cdca:	edd0 6a01 	vldr	s13, [r0, #4]
 800cdce:	edd0 7a02 	vldr	s15, [r0, #8]
 800cdd2:	9139      	str	r1, [sp, #228]	; 0xe4
 800cdd4:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	f003 8568 	beq.w	80108ae <kalman_3gyro.constprop.0+0x3d96>
 800cdde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cde2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cde6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cdea:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cdee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cdf6:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cdfa:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cdfe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ce02:	2100      	movs	r1, #0
 800ce04:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800ce08:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800ce0c:	f00a fcb6 	bl	801777c <memset>
 800ce10:	4b32      	ldr	r3, [pc, #200]	; (800cedc <kalman_3gyro.constprop.0+0x3c4>)
 800ce12:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800ce16:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800ce1a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800ce1e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800ce22:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800ce26:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800ce2a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800ce2e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800ce32:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800ce36:	9b08      	ldr	r3, [sp, #32]
 800ce38:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cee0 <kalman_3gyro.constprop.0+0x3c8>
 800ce3c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce40:	edd3 5a00 	vldr	s11, [r3]
 800ce44:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce48:	ee67 6a07 	vmul.f32	s13, s14, s14
 800ce4c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800ce50:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800ce54:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ce58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce5c:	f101 8127 	bmi.w	800e0ae <kalman_3gyro.constprop.0+0x1596>
 800ce60:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800ce64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce68:	ee79 6a66 	vsub.f32	s13, s18, s13
 800ce6c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800ce70:	eef0 6ae6 	vabs.f32	s13, s13
 800ce74:	ee76 aaea 	vsub.f32	s21, s13, s21
 800ce78:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800ce7c:	ed93 5a04 	vldr	s10, [r3, #16]
 800ce80:	ed93 3a03 	vldr	s6, [r3, #12]
 800ce84:	edd3 1a05 	vldr	s3, [r3, #20]
 800ce88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cee0 <kalman_3gyro.constprop.0+0x3c8>
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	ed95 ca00 	vldr	s24, [r5]
 800ce92:	ed93 ba00 	vldr	s22, [r3]
 800ce96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce9a:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800ce9e:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800cea2:	461e      	mov	r6, r3
 800cea4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800cea8:	9502      	str	r5, [sp, #8]
 800ceaa:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800ceae:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800ceb2:	9327      	str	r3, [sp, #156]	; 0x9c
 800ceb4:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800ceb8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800cebc:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800cec0:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800cec4:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800cec8:	9501      	str	r5, [sp, #4]
 800ceca:	ee65 6a05 	vmul.f32	s13, s10, s10
 800cece:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800ced2:	eee3 6a03 	vfma.f32	s13, s6, s6
 800ced6:	e009      	b.n	800ceec <kalman_3gyro.constprop.0+0x3d4>
 800ced8:	3a9d4952 	.word	0x3a9d4952
 800cedc:	40a00000 	.word	0x40a00000
 800cee0:	3c23d70a 	.word	0x3c23d70a
 800cee4:	3dcccccd 	.word	0x3dcccccd
 800cee8:	4b000000 	.word	0x4b000000
 800ceec:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800cef0:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800cef4:	ee25 8a82 	vmul.f32	s16, s11, s4
 800cef8:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800cefc:	950c      	str	r5, [sp, #48]	; 0x30
 800cefe:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800cf02:	ee67 fa02 	vmul.f32	s31, s14, s4
 800cf06:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	bf58      	it	pl
 800cf10:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800cf14:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800cf18:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800cf1c:	bf48      	it	mi
 800cf1e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800cee4 <kalman_3gyro.constprop.0+0x3cc>
 800cf22:	ed96 6a00 	vldr	s12, [r6]
 800cf26:	edda 4a00 	vldr	s9, [sl]
 800cf2a:	ed93 fa00 	vldr	s30, [r3]
 800cf2e:	ed90 ea00 	vldr	s28, [r0]
 800cf32:	edd4 3a00 	vldr	s7, [r4]
 800cf36:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800cf3a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800cf3e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800cf42:	9617      	str	r6, [sp, #92]	; 0x5c
 800cf44:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800cf48:	961a      	str	r6, [sp, #104]	; 0x68
 800cf4a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800cf4e:	9611      	str	r6, [sp, #68]	; 0x44
 800cf50:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800cf54:	9618      	str	r6, [sp, #96]	; 0x60
 800cf56:	9e02      	ldr	r6, [sp, #8]
 800cf58:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800cf5c:	9303      	str	r3, [sp, #12]
 800cf5e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800cf62:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cf66:	ee23 3a26 	vmul.f32	s6, s6, s13
 800cf6a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cf6e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800cf72:	edd1 6a00 	vldr	s13, [r1]
 800cf76:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800cf7a:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800cf7e:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800cf82:	edcd 6a05 	vstr	s13, [sp, #20]
 800cf86:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cf8a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800cf8e:	ed92 6a00 	vldr	s12, [r2]
 800cf92:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800cf96:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800cf9a:	edd6 2a00 	vldr	s5, [r6]
 800cf9e:	eddc 4a00 	vldr	s9, [ip]
 800cfa2:	9e01      	ldr	r6, [sp, #4]
 800cfa4:	edd0 ca00 	vldr	s25, [r0]
 800cfa8:	ed96 1a00 	vldr	s2, [r6]
 800cfac:	9803      	ldr	r0, [sp, #12]
 800cfae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cfb0:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800cfb4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800cfb8:	eddc 0a00 	vldr	s1, [ip]
 800cfbc:	ed96 da00 	vldr	s26, [r6]
 800cfc0:	edd0 4a00 	vldr	s9, [r0]
 800cfc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cfc6:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800cfca:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800cfce:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800cfd2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800cfd6:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800cfda:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800cfde:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800cfe2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800cfe6:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800cfea:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800cfee:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800cff2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800cff6:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800cffa:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800cffe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d002:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800d006:	edd6 4a00 	vldr	s9, [r6]
 800d00a:	edd9 6a00 	vldr	s13, [r9]
 800d00e:	edde ba00 	vldr	s23, [lr]
 800d012:	ed95 4a00 	vldr	s8, [r5]
 800d016:	ed94 0a00 	vldr	s0, [r4]
 800d01a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800d01e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800d022:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800d026:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800d02a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800d02e:	edd9 ea00 	vldr	s29, [r9]
 800d032:	edd1 2a00 	vldr	s5, [r1]
 800d036:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800d03a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800d03e:	ed92 1a00 	vldr	s2, [r2]
 800d042:	edd3 ca00 	vldr	s25, [r3]
 800d046:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d04a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800d04e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d050:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d052:	edd3 4a00 	vldr	s9, [r3]
 800d056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d058:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d05c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d060:	edd3 fa00 	vldr	s31, [r3]
 800d064:	eef0 4a6f 	vmov.f32	s9, s31
 800d068:	edd6 fa00 	vldr	s31, [r6]
 800d06c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d06e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d072:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d076:	ed96 3a00 	vldr	s6, [r6]
 800d07a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d07c:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d080:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d084:	eddd 5a06 	vldr	s11, [sp, #24]
 800d088:	edd6 fa00 	vldr	s31, [r6]
 800d08c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d08e:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d092:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d096:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d09a:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d09e:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d0a2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d0a6:	edd8 5a00 	vldr	s11, [r8]
 800d0aa:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d0ae:	eef0 5a44 	vmov.f32	s11, s8
 800d0b2:	ed97 4a00 	vldr	s8, [r7]
 800d0b6:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d0ba:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d0be:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d0c2:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d0c6:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d0ca:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d0ce:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d0d2:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d0d6:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d0da:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d0de:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d0e2:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d0e6:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d0ea:	edd6 ca00 	vldr	s25, [r6]
 800d0ee:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d0f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d0f4:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d0f8:	ed96 ea00 	vldr	s28, [r6]
 800d0fc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d0fe:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d102:	ed96 da00 	vldr	s26, [r6]
 800d106:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d108:	ee7f faac 	vadd.f32	s31, s31, s25
 800d10c:	edd6 ca00 	vldr	s25, [r6]
 800d110:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d114:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d118:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d11a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d11e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d122:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d126:	eddd ba05 	vldr	s23, [sp, #20]
 800d12a:	ed96 0a00 	vldr	s0, [r6]
 800d12e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d130:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d134:	eeee fa03 	vfma.f32	s31, s28, s6
 800d138:	eead 6a03 	vfma.f32	s12, s26, s6
 800d13c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d140:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d144:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d148:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800cee4 <kalman_3gyro.constprop.0+0x3cc>
 800d14c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d150:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d154:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d158:	ed96 1a00 	vldr	s2, [r6]
 800d15c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d160:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d164:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d168:	ee6f faab 	vmul.f32	s31, s31, s23
 800d16c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d170:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d174:	eddc 0a00 	vldr	s1, [ip]
 800d178:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d17c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d180:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d184:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d188:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d18c:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d190:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d194:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d198:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d19c:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d1a0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d1a4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d1a8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d1ac:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d1b0:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d1b4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d1b8:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d1bc:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800cee8 <kalman_3gyro.constprop.0+0x3d0>
 800d1c0:	eef0 4ac8 	vabs.f32	s9, s16
 800d1c4:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1cc:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d1d0:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d1d4:	eef1 caef 	vsqrt.f32	s25, s31
 800d1d8:	eef1 bae6 	vsqrt.f32	s23, s13
 800d1dc:	ee67 daad 	vmul.f32	s27, s15, s27
 800d1e0:	eeb0 ca45 	vmov.f32	s24, s10
 800d1e4:	d517      	bpl.n	800d216 <kalman_3gyro.constprop.0+0x6fe>
 800d1e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f2:	f2c1 806f 	blt.w	800e2d4 <kalman_3gyro.constprop.0+0x17bc>
 800d1f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d1fa:	ee17 0a90 	vmov	r0, s15
 800d1fe:	f7f3 f9a3 	bl	8000548 <__aeabi_f2d>
 800d202:	ec41 0b10 	vmov	d0, r0, r1
 800d206:	f008 fbcf 	bl	80159a8 <floor>
 800d20a:	ec51 0b10 	vmov	r0, r1, d0
 800d20e:	f7f3 fccb 	bl	8000ba8 <__aeabi_d2f>
 800d212:	ee08 0a10 	vmov	s16, r0
 800d216:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800cee8 <kalman_3gyro.constprop.0+0x3d0>
 800d21a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d21e:	eef0 6ace 	vabs.f32	s13, s28
 800d222:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22a:	d517      	bpl.n	800d25c <kalman_3gyro.constprop.0+0x744>
 800d22c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d230:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d238:	f2c1 8040 	blt.w	800e2bc <kalman_3gyro.constprop.0+0x17a4>
 800d23c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d240:	ee17 0a90 	vmov	r0, s15
 800d244:	f7f3 f980 	bl	8000548 <__aeabi_f2d>
 800d248:	ec41 0b10 	vmov	d0, r0, r1
 800d24c:	f008 fbac 	bl	80159a8 <floor>
 800d250:	ec51 0b10 	vmov	r0, r1, d0
 800d254:	f7f3 fca8 	bl	8000ba8 <__aeabi_d2f>
 800d258:	ee0e 0a10 	vmov	s28, r0
 800d25c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800cee8 <kalman_3gyro.constprop.0+0x3d0>
 800d260:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d264:	eeb0 7aed 	vabs.f32	s14, s27
 800d268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d270:	d517      	bpl.n	800d2a2 <kalman_3gyro.constprop.0+0x78a>
 800d272:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d276:	eef4 dae7 	vcmpe.f32	s27, s15
 800d27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27e:	f2c1 8011 	blt.w	800e2a4 <kalman_3gyro.constprop.0+0x178c>
 800d282:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d286:	ee17 0a90 	vmov	r0, s15
 800d28a:	f7f3 f95d 	bl	8000548 <__aeabi_f2d>
 800d28e:	ec41 0b10 	vmov	d0, r0, r1
 800d292:	f008 fb89 	bl	80159a8 <floor>
 800d296:	ec51 0b10 	vmov	r0, r1, d0
 800d29a:	f7f3 fc85 	bl	8000ba8 <__aeabi_d2f>
 800d29e:	ee0d 0a90 	vmov	s27, r0
 800d2a2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d2a6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d2aa:	1e61      	subs	r1, r4, #1
 800d2ac:	b249      	sxtb	r1, r1
 800d2ae:	2900      	cmp	r1, #0
 800d2b0:	dd1a      	ble.n	800d2e8 <kalman_3gyro.constprop.0+0x7d0>
 800d2b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d2b6:	1ea0      	subs	r0, r4, #2
 800d2b8:	0089      	lsls	r1, r1, #2
 800d2ba:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d2be:	b2c0      	uxtb	r0, r0
 800d2c0:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d2c4:	440a      	add	r2, r1
 800d2c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d2ca:	445b      	add	r3, fp
 800d2cc:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d2d0:	6819      	ldr	r1, [r3, #0]
 800d2d2:	6858      	ldr	r0, [r3, #4]
 800d2d4:	60d9      	str	r1, [r3, #12]
 800d2d6:	6899      	ldr	r1, [r3, #8]
 800d2d8:	6118      	str	r0, [r3, #16]
 800d2da:	6159      	str	r1, [r3, #20]
 800d2dc:	3b0c      	subs	r3, #12
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d1f6      	bne.n	800d2d0 <kalman_3gyro.constprop.0+0x7b8>
 800d2e2:	9b04      	ldr	r3, [sp, #16]
 800d2e4:	ed93 ba00 	vldr	s22, [r3]
 800d2e8:	ed88 8a00 	vstr	s16, [r8]
 800d2ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2f0:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d2f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d2f6:	ed83 ea00 	vstr	s28, [r3]
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d300:	edc3 da00 	vstr	s27, [r3]
 800d304:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d308:	3301      	adds	r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	429c      	cmp	r4, r3
 800d30e:	bf28      	it	cs
 800d310:	461c      	movcs	r4, r3
 800d312:	9b08      	ldr	r3, [sp, #32]
 800d314:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d318:	edd3 da03 	vldr	s27, [r3, #12]
 800d31c:	ed93 ba04 	vldr	s22, [r3, #16]
 800d320:	edd3 6a05 	vldr	s13, [r3, #20]
 800d324:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d328:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d32c:	eeb0 7aed 	vabs.f32	s14, s27
 800d330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d338:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d33c:	d517      	bpl.n	800d36e <kalman_3gyro.constprop.0+0x856>
 800d33e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d342:	eef4 dae7 	vcmpe.f32	s27, s15
 800d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34a:	f2c0 879f 	blt.w	800e28c <kalman_3gyro.constprop.0+0x1774>
 800d34e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d352:	ee17 0a90 	vmov	r0, s15
 800d356:	f7f3 f8f7 	bl	8000548 <__aeabi_f2d>
 800d35a:	ec41 0b10 	vmov	d0, r0, r1
 800d35e:	f008 fb23 	bl	80159a8 <floor>
 800d362:	ec51 0b10 	vmov	r0, r1, d0
 800d366:	f7f3 fc1f 	bl	8000ba8 <__aeabi_d2f>
 800d36a:	ee0d 0a90 	vmov	s27, r0
 800d36e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d372:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d376:	eeb0 7acb 	vabs.f32	s14, s22
 800d37a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d382:	d517      	bpl.n	800d3b4 <kalman_3gyro.constprop.0+0x89c>
 800d384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d388:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	f2c0 8770 	blt.w	800e274 <kalman_3gyro.constprop.0+0x175c>
 800d394:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d398:	ee17 0a90 	vmov	r0, s15
 800d39c:	f7f3 f8d4 	bl	8000548 <__aeabi_f2d>
 800d3a0:	ec41 0b10 	vmov	d0, r0, r1
 800d3a4:	f008 fb00 	bl	80159a8 <floor>
 800d3a8:	ec51 0b10 	vmov	r0, r1, d0
 800d3ac:	f7f3 fbfc 	bl	8000ba8 <__aeabi_d2f>
 800d3b0:	ee0b 0a10 	vmov	s22, r0
 800d3b4:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d3b8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d3bc:	eeb0 7ac8 	vabs.f32	s14, s16
 800d3c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c8:	d517      	bpl.n	800d3fa <kalman_3gyro.constprop.0+0x8e2>
 800d3ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	f2c0 8741 	blt.w	800e25c <kalman_3gyro.constprop.0+0x1744>
 800d3da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d3de:	ee17 0a90 	vmov	r0, s15
 800d3e2:	f7f3 f8b1 	bl	8000548 <__aeabi_f2d>
 800d3e6:	ec41 0b10 	vmov	d0, r0, r1
 800d3ea:	f008 fadd 	bl	80159a8 <floor>
 800d3ee:	ec51 0b10 	vmov	r0, r1, d0
 800d3f2:	f7f3 fbd9 	bl	8000ba8 <__aeabi_d2f>
 800d3f6:	ee08 0a10 	vmov	s16, r0
 800d3fa:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d3fe:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d402:	1e61      	subs	r1, r4, #1
 800d404:	b249      	sxtb	r1, r1
 800d406:	2900      	cmp	r1, #0
 800d408:	dd17      	ble.n	800d43a <kalman_3gyro.constprop.0+0x922>
 800d40a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d40e:	1ea2      	subs	r2, r4, #2
 800d410:	0089      	lsls	r1, r1, #2
 800d412:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d41c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d420:	4401      	add	r1, r0
 800d422:	445b      	add	r3, fp
 800d424:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	6858      	ldr	r0, [r3, #4]
 800d42c:	60da      	str	r2, [r3, #12]
 800d42e:	689a      	ldr	r2, [r3, #8]
 800d430:	6118      	str	r0, [r3, #16]
 800d432:	615a      	str	r2, [r3, #20]
 800d434:	3b0c      	subs	r3, #12
 800d436:	4299      	cmp	r1, r3
 800d438:	d1f6      	bne.n	800d428 <kalman_3gyro.constprop.0+0x910>
 800d43a:	9b02      	ldr	r3, [sp, #8]
 800d43c:	edc7 da00 	vstr	s27, [r7]
 800d440:	ed83 ba00 	vstr	s22, [r3]
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d44a:	ed83 8a00 	vstr	s16, [r3]
 800d44e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d452:	3301      	adds	r3, #1
 800d454:	b2db      	uxtb	r3, r3
 800d456:	429c      	cmp	r4, r3
 800d458:	bf28      	it	cs
 800d45a:	461c      	movcs	r4, r3
 800d45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d45e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d462:	ed93 7a00 	vldr	s14, [r3]
 800d466:	9b08      	ldr	r3, [sp, #32]
 800d468:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d46c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d470:	edd3 da06 	vldr	s27, [r3, #24]
 800d474:	ed93 ba07 	vldr	s22, [r3, #28]
 800d478:	edd3 6a08 	vldr	s13, [r3, #32]
 800d47c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d480:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d484:	eeb0 7aed 	vabs.f32	s14, s27
 800d488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d490:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d494:	d517      	bpl.n	800d4c6 <kalman_3gyro.constprop.0+0x9ae>
 800d496:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d49a:	eef4 dae7 	vcmpe.f32	s27, s15
 800d49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a2:	f2c0 86cf 	blt.w	800e244 <kalman_3gyro.constprop.0+0x172c>
 800d4a6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d4aa:	ee17 0a90 	vmov	r0, s15
 800d4ae:	f7f3 f84b 	bl	8000548 <__aeabi_f2d>
 800d4b2:	ec41 0b10 	vmov	d0, r0, r1
 800d4b6:	f008 fa77 	bl	80159a8 <floor>
 800d4ba:	ec51 0b10 	vmov	r0, r1, d0
 800d4be:	f7f3 fb73 	bl	8000ba8 <__aeabi_d2f>
 800d4c2:	ee0d 0a90 	vmov	s27, r0
 800d4c6:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d4ca:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d4ce:	eeb0 7acb 	vabs.f32	s14, s22
 800d4d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4da:	d517      	bpl.n	800d50c <kalman_3gyro.constprop.0+0x9f4>
 800d4dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4e0:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e8:	f2c0 86a0 	blt.w	800e22c <kalman_3gyro.constprop.0+0x1714>
 800d4ec:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d4f0:	ee17 0a90 	vmov	r0, s15
 800d4f4:	f7f3 f828 	bl	8000548 <__aeabi_f2d>
 800d4f8:	ec41 0b10 	vmov	d0, r0, r1
 800d4fc:	f008 fa54 	bl	80159a8 <floor>
 800d500:	ec51 0b10 	vmov	r0, r1, d0
 800d504:	f7f3 fb50 	bl	8000ba8 <__aeabi_d2f>
 800d508:	ee0b 0a10 	vmov	s22, r0
 800d50c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d594 <kalman_3gyro.constprop.0+0xa7c>
 800d510:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d514:	eeb0 7ac8 	vabs.f32	s14, s16
 800d518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d520:	d517      	bpl.n	800d552 <kalman_3gyro.constprop.0+0xa3a>
 800d522:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d526:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d52e:	f2c0 8671 	blt.w	800e214 <kalman_3gyro.constprop.0+0x16fc>
 800d532:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d536:	ee17 0a90 	vmov	r0, s15
 800d53a:	f7f3 f805 	bl	8000548 <__aeabi_f2d>
 800d53e:	ec41 0b10 	vmov	d0, r0, r1
 800d542:	f008 fa31 	bl	80159a8 <floor>
 800d546:	ec51 0b10 	vmov	r0, r1, d0
 800d54a:	f7f3 fb2d 	bl	8000ba8 <__aeabi_d2f>
 800d54e:	ee08 0a10 	vmov	s16, r0
 800d552:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d556:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d55a:	1e63      	subs	r3, r4, #1
 800d55c:	b25b      	sxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	dd1c      	ble.n	800d59c <kalman_3gyro.constprop.0+0xa84>
 800d562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d566:	1ea2      	subs	r2, r4, #2
 800d568:	0099      	lsls	r1, r3, #2
 800d56a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d56e:	b2d2      	uxtb	r2, r2
 800d570:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d574:	4408      	add	r0, r1
 800d576:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d57a:	445b      	add	r3, fp
 800d57c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	6859      	ldr	r1, [r3, #4]
 800d584:	60da      	str	r2, [r3, #12]
 800d586:	689a      	ldr	r2, [r3, #8]
 800d588:	6119      	str	r1, [r3, #16]
 800d58a:	615a      	str	r2, [r3, #20]
 800d58c:	3b0c      	subs	r3, #12
 800d58e:	4283      	cmp	r3, r0
 800d590:	d1f6      	bne.n	800d580 <kalman_3gyro.constprop.0+0xa68>
 800d592:	e003      	b.n	800d59c <kalman_3gyro.constprop.0+0xa84>
 800d594:	4b000000 	.word	0x4b000000
 800d598:	00000000 	.word	0x00000000
 800d59c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d59e:	edc3 da00 	vstr	s27, [r3]
 800d5a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5a4:	ed83 ba00 	vstr	s22, [r3]
 800d5a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5aa:	ed83 8a00 	vstr	s16, [r3]
 800d5ae:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	429c      	cmp	r4, r3
 800d5b8:	bf28      	it	cs
 800d5ba:	461c      	movcs	r4, r3
 800d5bc:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d5c0:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d5c4:	aa54      	add	r2, sp, #336	; 0x150
 800d5c6:	a92d      	add	r1, sp, #180	; 0xb4
 800d5c8:	a830      	add	r0, sp, #192	; 0xc0
 800d5ca:	461c      	mov	r4, r3
 800d5cc:	9314      	str	r3, [sp, #80]	; 0x50
 800d5ce:	f7fe fa27 	bl	800ba20 <getRotationMatrix>
 800d5d2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d5d6:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d5da:	6820      	ldr	r0, [r4, #0]
 800d5dc:	6861      	ldr	r1, [r4, #4]
 800d5de:	68a2      	ldr	r2, [r4, #8]
 800d5e0:	68e3      	ldr	r3, [r4, #12]
 800d5e2:	4635      	mov	r5, r6
 800d5e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5e6:	3410      	adds	r4, #16
 800d5e8:	42bc      	cmp	r4, r7
 800d5ea:	462e      	mov	r6, r5
 800d5ec:	d1f5      	bne.n	800d5da <kalman_3gyro.constprop.0+0xac2>
 800d5ee:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d5f2:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d5f6:	6820      	ldr	r0, [r4, #0]
 800d5f8:	6028      	str	r0, [r5, #0]
 800d5fa:	eef0 7ae7 	vabs.f32	s15, s15
 800d5fe:	eeb0 7ac7 	vabs.f32	s14, s14
 800d602:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60a:	f140 85a4 	bpl.w	800e156 <kalman_3gyro.constprop.0+0x163e>
 800d60e:	2303      	movs	r3, #3
 800d610:	2706      	movs	r7, #6
 800d612:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d616:	2604      	movs	r6, #4
 800d618:	2400      	movs	r4, #0
 800d61a:	eef0 7a47 	vmov.f32	s15, s14
 800d61e:	4632      	mov	r2, r6
 800d620:	46a2      	mov	sl, r4
 800d622:	2107      	movs	r1, #7
 800d624:	f04f 0c01 	mov.w	ip, #1
 800d628:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d62c:	eeb0 7ac7 	vabs.f32	s14, s14
 800d630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d638:	f340 85ae 	ble.w	800e198 <kalman_3gyro.constprop.0+0x1680>
 800d63c:	2304      	movs	r3, #4
 800d63e:	2007      	movs	r0, #7
 800d640:	2108      	movs	r1, #8
 800d642:	9301      	str	r3, [sp, #4]
 800d644:	461c      	mov	r4, r3
 800d646:	9002      	str	r0, [sp, #8]
 800d648:	460a      	mov	r2, r1
 800d64a:	2306      	movs	r3, #6
 800d64c:	2003      	movs	r0, #3
 800d64e:	2605      	movs	r6, #5
 800d650:	f04f 0800 	mov.w	r8, #0
 800d654:	f04f 0a01 	mov.w	sl, #1
 800d658:	f04f 0c02 	mov.w	ip, #2
 800d65c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d65e:	442c      	add	r4, r5
 800d660:	442a      	add	r2, r5
 800d662:	edd4 6a00 	vldr	s13, [r4]
 800d666:	ed92 7a00 	vldr	s14, [r2]
 800d66a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d66e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d672:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d676:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d67a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d67e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d682:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d686:	970c      	str	r7, [sp, #48]	; 0x30
 800d688:	9f01      	ldr	r7, [sp, #4]
 800d68a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d68e:	00b6      	lsls	r6, r6, #2
 800d690:	960a      	str	r6, [sp, #40]	; 0x28
 800d692:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d696:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d69a:	edc4 7a00 	vstr	s15, [r4]
 800d69e:	edd2 7a00 	vldr	s15, [r2]
 800d6a2:	ed99 7a00 	vldr	s14, [r9]
 800d6a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d6aa:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d6ae:	9204      	str	r2, [sp, #16]
 800d6b0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d6b4:	9205      	str	r2, [sp, #20]
 800d6b6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d6ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d6bc:	00ba      	lsls	r2, r7, #2
 800d6be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d6c0:	9206      	str	r2, [sp, #24]
 800d6c2:	0080      	lsls	r0, r0, #2
 800d6c4:	9003      	str	r0, [sp, #12]
 800d6c6:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d6ca:	0089      	lsls	r1, r1, #2
 800d6cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6ce:	edc9 6a00 	vstr	s13, [r9]
 800d6d2:	ed94 6a00 	vldr	s12, [r4]
 800d6d6:	ed97 7a00 	vldr	s14, [r7]
 800d6da:	edd5 7a00 	vldr	s15, [r5]
 800d6de:	9902      	ldr	r1, [sp, #8]
 800d6e0:	9a02      	ldr	r2, [sp, #8]
 800d6e2:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d6e6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d6ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d6ee:	0092      	lsls	r2, r2, #2
 800d6f0:	edc5 7a00 	vstr	s15, [r5]
 800d6f4:	ed97 7a00 	vldr	s14, [r7]
 800d6f8:	edde 7a00 	vldr	s15, [lr]
 800d6fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	edce 7a00 	vstr	s15, [lr]
 800d706:	edd0 5a00 	vldr	s11, [r0]
 800d70a:	ed91 7a00 	vldr	s14, [r1]
 800d70e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d712:	eef0 7ae7 	vabs.f32	s15, s15
 800d716:	ed81 7a00 	vstr	s14, [r1]
 800d71a:	ed90 6a00 	vldr	s12, [r0]
 800d71e:	ed96 7a00 	vldr	s14, [r6]
 800d722:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d726:	ed86 7a00 	vstr	s14, [r6]
 800d72a:	ed95 7a00 	vldr	s14, [r5]
 800d72e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73a:	dd10      	ble.n	800d75e <kalman_3gyro.constprop.0+0xc46>
 800d73c:	4652      	mov	r2, sl
 800d73e:	46c2      	mov	sl, r8
 800d740:	4690      	mov	r8, r2
 800d742:	461a      	mov	r2, r3
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	9902      	ldr	r1, [sp, #8]
 800d748:	9803      	ldr	r0, [sp, #12]
 800d74a:	9006      	str	r0, [sp, #24]
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	9303      	str	r3, [sp, #12]
 800d750:	008b      	lsls	r3, r1, #2
 800d752:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d756:	9105      	str	r1, [sp, #20]
 800d758:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d75c:	9104      	str	r1, [sp, #16]
 800d75e:	9903      	ldr	r1, [sp, #12]
 800d760:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d764:	4401      	add	r1, r0
 800d766:	460c      	mov	r4, r1
 800d768:	9906      	ldr	r1, [sp, #24]
 800d76a:	ed94 7a00 	vldr	s14, [r4]
 800d76e:	4401      	add	r1, r0
 800d770:	edd1 7a00 	vldr	s15, [r1]
 800d774:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d778:	4608      	mov	r0, r1
 800d77a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d77e:	440a      	add	r2, r1
 800d780:	440b      	add	r3, r1
 800d782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d784:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d788:	4429      	add	r1, r5
 800d78a:	460d      	mov	r5, r1
 800d78c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d78e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d792:	4431      	add	r1, r6
 800d794:	468e      	mov	lr, r1
 800d796:	ed84 3a00 	vstr	s6, [r4]
 800d79a:	ed92 7a00 	vldr	s14, [r2]
 800d79e:	edd3 7a00 	vldr	s15, [r3]
 800d7a2:	9904      	ldr	r1, [sp, #16]
 800d7a4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d7a8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d7ac:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d7b0:	440e      	add	r6, r1
 800d7b2:	1879      	adds	r1, r7, r1
 800d7b4:	edc3 7a00 	vstr	s15, [r3]
 800d7b8:	9101      	str	r1, [sp, #4]
 800d7ba:	9b05      	ldr	r3, [sp, #20]
 800d7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7be:	edd2 0a00 	vldr	s1, [r2]
 800d7c2:	ed95 1a00 	vldr	s2, [r5]
 800d7c6:	ed9e 2a00 	vldr	s4, [lr]
 800d7ca:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d7ce:	edd6 6a00 	vldr	s13, [r6]
 800d7d2:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d7d6:	1874      	adds	r4, r6, r1
 800d7d8:	18f7      	adds	r7, r6, r3
 800d7da:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d7de:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d7e2:	eb06 0903 	add.w	r9, r6, r3
 800d7e6:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d7ea:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d7ee:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d7f2:	4633      	mov	r3, r6
 800d7f4:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d7f8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d7fc:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d800:	448c      	add	ip, r1
 800d802:	9901      	ldr	r1, [sp, #4]
 800d804:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d808:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d80c:	ed94 7a00 	vldr	s14, [r4]
 800d810:	ed93 6a00 	vldr	s12, [r3]
 800d814:	edd0 7a00 	vldr	s15, [r0]
 800d818:	ed99 8a00 	vldr	s16, [r9]
 800d81c:	ed91 ba00 	vldr	s22, [r1]
 800d820:	ed97 4a00 	vldr	s8, [r7]
 800d824:	edd6 4a00 	vldr	s9, [r6]
 800d828:	eddc da00 	vldr	s27, [ip]
 800d82c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d830:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d834:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d838:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d83c:	46a2      	mov	sl, r4
 800d83e:	4613      	mov	r3, r2
 800d840:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d844:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d848:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d84c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d850:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d854:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d858:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d85c:	ed94 5a00 	vldr	s10, [r4]
 800d860:	edda 3a00 	vldr	s7, [sl]
 800d864:	edd2 5a00 	vldr	s11, [r2]
 800d868:	edd3 7a00 	vldr	s15, [r3]
 800d86c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d870:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d874:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d878:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d87c:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d880:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d884:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d888:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d88c:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d890:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d894:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d898:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d89c:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d8a0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d8a4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d8a8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d8ac:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d8b0:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d8b4:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d8b8:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d8bc:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d8c0:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d8c4:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d8c8:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d8cc:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d8d0:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d8d4:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d8d8:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d8dc:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d8e0:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e8:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d8ec:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d8f0:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d8f4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d8f8:	bfc8      	it	gt
 800d8fa:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d8fe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d902:	bfcc      	ite	gt
 800d904:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d908:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d598 <kalman_3gyro.constprop.0+0xa80>
 800d90c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d914:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d918:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d91c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d920:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d924:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d928:	f100 84e4 	bmi.w	800e2f4 <kalman_3gyro.constprop.0+0x17dc>
 800d92c:	bfd8      	it	le
 800d92e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d932:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d936:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d93a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d93e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d942:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d94e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d952:	bf84      	itt	hi
 800d954:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d958:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d95c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d960:	bf8c      	ite	hi
 800d962:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d966:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800dce8 <kalman_3gyro.constprop.0+0x11d0>
 800d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96e:	f100 84bd 	bmi.w	800e2ec <kalman_3gyro.constprop.0+0x17d4>
 800d972:	bfd8      	it	le
 800d974:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d978:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d97c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d984:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d990:	bf84      	itt	hi
 800d992:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d996:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d99a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d99e:	bf8c      	ite	hi
 800d9a0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d9a4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800dce8 <kalman_3gyro.constprop.0+0x11d0>
 800d9a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b0:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d9b4:	f102 8399 	bmi.w	80100ea <kalman_3gyro.constprop.0+0x35d2>
 800d9b8:	bfd8      	it	le
 800d9ba:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d9be:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d9c2:	1e53      	subs	r3, r2, #1
 800d9c4:	b25b      	sxtb	r3, r3
 800d9c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9d0:	dd1c      	ble.n	800da0c <kalman_3gyro.constprop.0+0xef4>
 800d9d2:	3a02      	subs	r2, #2
 800d9d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d9d8:	b2d2      	uxtb	r2, r2
 800d9da:	f1ab 000c 	sub.w	r0, fp, #12
 800d9de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d9e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d9e6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d9ea:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d9ee:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d9f2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d9f6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d9fa:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d9fe:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800da02:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800da06:	3b0c      	subs	r3, #12
 800da08:	4283      	cmp	r3, r0
 800da0a:	d1f0      	bne.n	800d9ee <kalman_3gyro.constprop.0+0xed6>
 800da0c:	eddd 6a07 	vldr	s13, [sp, #28]
 800da10:	4ab6      	ldr	r2, [pc, #728]	; (800dcec <kalman_3gyro.constprop.0+0x11d4>)
 800da12:	4bb7      	ldr	r3, [pc, #732]	; (800dcf0 <kalman_3gyro.constprop.0+0x11d8>)
 800da14:	ed92 8a00 	vldr	s16, [r2]
 800da18:	ed93 ba00 	vldr	s22, [r3]
 800da1c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800da20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800da24:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800da28:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800da2c:	f1c1 0101 	rsb	r1, r1, #1
 800da30:	910c      	str	r1, [sp, #48]	; 0x30
 800da32:	a92d      	add	r1, sp, #180	; 0xb4
 800da34:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800da38:	9123      	str	r1, [sp, #140]	; 0x8c
 800da3a:	2100      	movs	r1, #0
 800da3c:	9109      	str	r1, [sp, #36]	; 0x24
 800da3e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800da42:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800da46:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800da4a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800da4e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800da52:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800da56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800da5e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800da62:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800da66:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800da6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800da70:	3301      	adds	r3, #1
 800da72:	9309      	str	r3, [sp, #36]	; 0x24
 800da74:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800da78:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800da7c:	18e0      	adds	r0, r4, r3
 800da7e:	f803 0f01 	strb.w	r0, [r3, #1]!
 800da82:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800da86:	f841 0b04 	str.w	r0, [r1], #4
 800da8a:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800da8e:	4298      	cmp	r0, r3
 800da90:	f102 020c 	add.w	r2, r2, #12
 800da94:	d1f2      	bne.n	800da7c <kalman_3gyro.constprop.0+0xf64>
 800da96:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800da9a:	ed93 7a00 	vldr	s14, [r3]
 800da9e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800daa2:	edd3 7a00 	vldr	s15, [r3]
 800daa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800daaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daae:	bf84      	itt	hi
 800dab0:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800dab4:	f8a9 3000 	strhhi.w	r3, [r9]
 800dab8:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800dabc:	ed93 7a00 	vldr	s14, [r3]
 800dac0:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800dac4:	edd3 7a00 	vldr	s15, [r3]
 800dac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad0:	bf84      	itt	hi
 800dad2:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800dad6:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800dada:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800dade:	ed93 7a00 	vldr	s14, [r3]
 800dae2:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dae6:	edd3 7a00 	vldr	s15, [r3]
 800daea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800daee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf2:	bf84      	itt	hi
 800daf4:	f240 5306 	movwhi	r3, #1286	; 0x506
 800daf8:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800dafc:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800db00:	ed93 7a00 	vldr	s14, [r3]
 800db04:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800db08:	edd3 7a00 	vldr	s15, [r3]
 800db0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db14:	bf84      	itt	hi
 800db16:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800db1a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800db1e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800db22:	ed93 7a00 	vldr	s14, [r3]
 800db26:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800db2a:	edd3 7a00 	vldr	s15, [r3]
 800db2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db36:	bf84      	itt	hi
 800db38:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800db3c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800db40:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800db44:	ed93 7a00 	vldr	s14, [r3]
 800db48:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800db4c:	edd3 7a00 	vldr	s15, [r3]
 800db50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db58:	bf84      	itt	hi
 800db5a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800db5e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800db62:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800db66:	ed93 7a00 	vldr	s14, [r3]
 800db6a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800db6e:	edd3 7a00 	vldr	s15, [r3]
 800db72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db7a:	bf84      	itt	hi
 800db7c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800db80:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800db84:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800db88:	ed93 7a00 	vldr	s14, [r3]
 800db8c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800db90:	edd3 7a00 	vldr	s15, [r3]
 800db94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9c:	bf84      	itt	hi
 800db9e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800dba2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800dba6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800dbaa:	ed93 7a00 	vldr	s14, [r3]
 800dbae:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800dbb2:	edd3 7a00 	vldr	s15, [r3]
 800dbb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbe:	bf84      	itt	hi
 800dbc0:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800dbc4:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800dbc8:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800dbcc:	ed93 7a00 	vldr	s14, [r3]
 800dbd0:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800dbd4:	edd3 7a00 	vldr	s15, [r3]
 800dbd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe0:	bf84      	itt	hi
 800dbe2:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800dbe6:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800dbea:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800dbee:	ed93 7a00 	vldr	s14, [r3]
 800dbf2:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800dbf6:	edd3 7a00 	vldr	s15, [r3]
 800dbfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc02:	bf84      	itt	hi
 800dc04:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800dc08:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800dc0c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800dc10:	ed93 7a00 	vldr	s14, [r3]
 800dc14:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800dc18:	edd3 7a00 	vldr	s15, [r3]
 800dc1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc24:	bf84      	itt	hi
 800dc26:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800dc2a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800dc2e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800dc32:	ed93 7a00 	vldr	s14, [r3]
 800dc36:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800dc3a:	edd3 7a00 	vldr	s15, [r3]
 800dc3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc46:	bf84      	itt	hi
 800dc48:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800dc4c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800dc50:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800dc54:	ed93 7a00 	vldr	s14, [r3]
 800dc58:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800dc5c:	edd3 7a00 	vldr	s15, [r3]
 800dc60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc68:	bf84      	itt	hi
 800dc6a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800dc6e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800dc72:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800dc76:	ed93 7a00 	vldr	s14, [r3]
 800dc7a:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800dc7e:	edd3 7a00 	vldr	s15, [r3]
 800dc82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8a:	bf84      	itt	hi
 800dc8c:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800dc90:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800dc94:	221e      	movs	r2, #30
 800dc96:	2101      	movs	r1, #1
 800dc98:	4650      	mov	r0, sl
 800dc9a:	f009 fd6f 	bl	801777c <memset>
 800dc9e:	2304      	movs	r3, #4
 800dca0:	9307      	str	r3, [sp, #28]
 800dca2:	2302      	movs	r3, #2
 800dca4:	9305      	str	r3, [sp, #20]
 800dca6:	9b05      	ldr	r3, [sp, #20]
 800dca8:	9306      	str	r3, [sp, #24]
 800dcaa:	1c5f      	adds	r7, r3, #1
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	9305      	str	r3, [sp, #20]
 800dcb0:	f04f 0b01 	mov.w	fp, #1
 800dcb4:	9b05      	ldr	r3, [sp, #20]
 800dcb6:	f8cd b004 	str.w	fp, [sp, #4]
 800dcba:	445b      	add	r3, fp
 800dcbc:	2b1f      	cmp	r3, #31
 800dcbe:	bfa8      	it	ge
 800dcc0:	231f      	movge	r3, #31
 800dcc2:	465a      	mov	r2, fp
 800dcc4:	eba3 0802 	sub.w	r8, r3, r2
 800dcc8:	f1b8 0f00 	cmp.w	r8, #0
 800dccc:	469b      	mov	fp, r3
 800dcce:	f107 35ff 	add.w	r5, r7, #4294967295
 800dcd2:	dd44      	ble.n	800dd5e <kalman_3gyro.constprop.0+0x1246>
 800dcd4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800dcd8:	9302      	str	r3, [sp, #8]
 800dcda:	f1ab 0302 	sub.w	r3, fp, #2
 800dcde:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800dce2:	4616      	mov	r6, r2
 800dce4:	2400      	movs	r4, #0
 800dce6:	e00f      	b.n	800dd08 <kalman_3gyro.constprop.0+0x11f0>
 800dce8:	00000000 	.word	0x00000000
 800dcec:	200019e4 	.word	0x200019e4
 800dcf0:	200019f4 	.word	0x200019f4
 800dcf4:	3f333333 	.word	0x3f333333
 800dcf8:	3f4ccccd 	.word	0x3f4ccccd
 800dcfc:	3f666666 	.word	0x3f666666
 800dd00:	3ecccccc 	.word	0x3ecccccc
 800dd04:	3dcccccd 	.word	0x3dcccccd
 800dd08:	1e71      	subs	r1, r6, #1
 800dd0a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800dd0e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800dd12:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dd16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd1a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800dd1e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dd22:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800dd26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2e:	f105 0c02 	add.w	ip, r5, #2
 800dd32:	f105 0801 	add.w	r8, r5, #1
 800dd36:	f240 81d3 	bls.w	800e0e0 <kalman_3gyro.constprop.0+0x15c8>
 800dd3a:	45e3      	cmp	fp, ip
 800dd3c:	f80a 0004 	strb.w	r0, [sl, r4]
 800dd40:	f000 81bf 	beq.w	800e0c2 <kalman_3gyro.constprop.0+0x15aa>
 800dd44:	4645      	mov	r5, r8
 800dd46:	9b03      	ldr	r3, [sp, #12]
 800dd48:	3401      	adds	r4, #1
 800dd4a:	42a3      	cmp	r3, r4
 800dd4c:	dcdc      	bgt.n	800dd08 <kalman_3gyro.constprop.0+0x11f0>
 800dd4e:	4698      	mov	r8, r3
 800dd50:	9b01      	ldr	r3, [sp, #4]
 800dd52:	1e58      	subs	r0, r3, #1
 800dd54:	4448      	add	r0, r9
 800dd56:	4642      	mov	r2, r8
 800dd58:	4651      	mov	r1, sl
 800dd5a:	f009 fce7 	bl	801772c <memcpy>
 800dd5e:	9b06      	ldr	r3, [sp, #24]
 800dd60:	eb0b 0703 	add.w	r7, fp, r3
 800dd64:	2f1e      	cmp	r7, #30
 800dd66:	dda5      	ble.n	800dcb4 <kalman_3gyro.constprop.0+0x119c>
 800dd68:	9b07      	ldr	r3, [sp, #28]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	9307      	str	r3, [sp, #28]
 800dd6e:	d19a      	bne.n	800dca6 <kalman_3gyro.constprop.0+0x118e>
 800dd70:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800dd74:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800dd78:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dd7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dd80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd84:	ed52 7a01 	vldr	s15, [r2, #-4]
 800dd88:	ed13 7a01 	vldr	s14, [r3, #-4]
 800dd8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd94:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dd98:	460a      	mov	r2, r1
 800dd9a:	bf4c      	ite	mi
 800dd9c:	2201      	movmi	r2, #1
 800dd9e:	2200      	movpl	r2, #0
 800dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda4:	bf4c      	ite	mi
 800dda6:	2301      	movmi	r3, #1
 800dda8:	2300      	movpl	r3, #0
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	f000 81b4 	beq.w	800e118 <kalman_3gyro.constprop.0+0x1600>
 800ddb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ddb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddbe:	ece3 7a01 	vstmia	r3!, {s15}
 800ddc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	f47f ae4c 	bne.w	800da6a <kalman_3gyro.constprop.0+0xf52>
 800ddd2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800ddd6:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800ddda:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800ddde:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800dcf4 <kalman_3gyro.constprop.0+0x11dc>
 800dde2:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800dde6:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800dcf8 <kalman_3gyro.constprop.0+0x11e0>
 800ddea:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800ddee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ddf2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800ddf6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ddfa:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800ddfe:	eee6 7a06 	vfma.f32	s15, s12, s12
 800de02:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800de06:	eeb0 6a67 	vmov.f32	s12, s15
 800de0a:	edcd 7a03 	vstr	s15, [sp, #12]
 800de0e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800de12:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800de16:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800de1a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800de1e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800de22:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800de26:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800de2a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800de2e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800de32:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800de36:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800de3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de3e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800de42:	ee64 7a27 	vmul.f32	s15, s8, s15
 800de46:	ee25 7a07 	vmul.f32	s14, s10, s14
 800de4a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800de4e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800de52:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800de56:	2b00      	cmp	r3, #0
 800de58:	f040 81a4 	bne.w	800e1a4 <kalman_3gyro.constprop.0+0x168c>
 800de5c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800de60:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800de64:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800de68:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800de6c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800de70:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800de74:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800de78:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800de7c:	f8c8 3020 	str.w	r3, [r8, #32]
 800de80:	ed88 7a07 	vstr	s14, [r8, #28]
 800de84:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800de88:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800de8c:	ed93 7a00 	vldr	s14, [r3]
 800de90:	ed92 8a00 	vldr	s16, [r2]
 800de94:	eddb ea02 	vldr	s29, [fp, #8]
 800de98:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800de9c:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800dea0:	ed92 5a00 	vldr	s10, [r2]
 800dea4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800dea8:	ed93 7a00 	vldr	s14, [r3]
 800deac:	eea5 8a07 	vfma.f32	s16, s10, s14
 800deb0:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800deb4:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800deb8:	ed92 5a00 	vldr	s10, [r2]
 800debc:	ed93 7a00 	vldr	s14, [r3]
 800dec0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dec4:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800dec8:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800decc:	ed92 5a00 	vldr	s10, [r2]
 800ded0:	ed93 7a00 	vldr	s14, [r3]
 800ded4:	eea5 8a07 	vfma.f32	s16, s10, s14
 800ded8:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800dedc:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800dee0:	ed92 5a00 	vldr	s10, [r2]
 800dee4:	ed93 7a00 	vldr	s14, [r3]
 800dee8:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800def4:	f340 8232 	ble.w	800e35c <kalman_3gyro.constprop.0+0x1844>
 800def8:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800defc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df04:	f100 815e 	bmi.w	800e1c4 <kalman_3gyro.constprop.0+0x16ac>
 800df08:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800df0c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800df10:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df18:	f142 84bd 	bpl.w	8010896 <kalman_3gyro.constprop.0+0x3d7e>
 800df1c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800df20:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800df24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df28:	f342 850a 	ble.w	8010940 <kalman_3gyro.constprop.0+0x3e28>
 800df2c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800df30:	eef4 2ac8 	vcmpe.f32	s5, s16
 800df34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df38:	f342 86c5 	ble.w	8010cc6 <kalman_3gyro.constprop.0+0x41ae>
 800df3c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800df40:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800df44:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800df48:	ee38 3a47 	vsub.f32	s6, s16, s14
 800df4c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800df50:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800df54:	ee24 4a03 	vmul.f32	s8, s8, s6
 800df58:	eef4 4ac8 	vcmpe.f32	s9, s16
 800df5c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800df60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df64:	ee3e ea23 	vadd.f32	s28, s28, s7
 800df68:	f202 86c5 	bhi.w	8010cf6 <kalman_3gyro.constprop.0+0x41de>
 800df6c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800df70:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df78:	f342 86c5 	ble.w	8010d06 <kalman_3gyro.constprop.0+0x41ee>
 800df7c:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800df80:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800df84:	ee38 3a64 	vsub.f32	s6, s16, s9
 800df88:	ee34 4a63 	vsub.f32	s8, s8, s7
 800df8c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800df90:	ee64 4a03 	vmul.f32	s9, s8, s6
 800df94:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800df98:	ee3e ea23 	vadd.f32	s28, s28, s7
 800df9c:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800dfa0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	f202 86c5 	bhi.w	8010d36 <kalman_3gyro.constprop.0+0x421e>
 800dfac:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800dfb0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb8:	f343 8371 	ble.w	801169e <kalman_3gyro.constprop.0+0x4b86>
 800dfbc:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800dfc0:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800dfc4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dfc8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dfcc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dfd0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dfd4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dfd8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dfdc:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800dfe0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe8:	f202 86c5 	bhi.w	8010d76 <kalman_3gyro.constprop.0+0x425e>
 800dfec:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800dff0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff8:	f343 8359 	ble.w	80116ae <kalman_3gyro.constprop.0+0x4b96>
 800dffc:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800e000:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800e004:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e008:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e00c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e010:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e014:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e018:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e01c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800e020:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	f2c2 86c5 	blt.w	8010db6 <kalman_3gyro.constprop.0+0x429e>
 800e02c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800e030:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e038:	f143 832d 	bpl.w	8011696 <kalman_3gyro.constprop.0+0x4b7e>
 800e03c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800e040:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800e044:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e048:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e04c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e050:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e054:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e058:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e05c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e060:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e068:	f2c2 86c5 	blt.w	8010df6 <kalman_3gyro.constprop.0+0x42de>
 800e06c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e070:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e078:	f142 86c5 	bpl.w	8010e06 <kalman_3gyro.constprop.0+0x42ee>
 800e07c:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e080:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e084:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e088:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e08c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e090:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e094:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e098:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e09c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e0a0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e0a4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e0a8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e0ac:	e15a      	b.n	800e364 <kalman_3gyro.constprop.0+0x184c>
 800e0ae:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800dcfc <kalman_3gyro.constprop.0+0x11e4>
 800e0b2:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800dd00 <kalman_3gyro.constprop.0+0x11e8>
 800e0b6:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800dd04 <kalman_3gyro.constprop.0+0x11ec>
 800e0ba:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e0be:	f7fe bedd 	b.w	800ce7c <kalman_3gyro.constprop.0+0x364>
 800e0c2:	1c60      	adds	r0, r4, #1
 800e0c4:	42be      	cmp	r6, r7
 800e0c6:	eba7 0206 	sub.w	r2, r7, r6
 800e0ca:	4449      	add	r1, r9
 800e0cc:	4450      	add	r0, sl
 800e0ce:	f6bf ae39 	bge.w	800dd44 <kalman_3gyro.constprop.0+0x122c>
 800e0d2:	443c      	add	r4, r7
 800e0d4:	1ba4      	subs	r4, r4, r6
 800e0d6:	f009 fb29 	bl	801772c <memcpy>
 800e0da:	463e      	mov	r6, r7
 800e0dc:	4645      	mov	r5, r8
 800e0de:	e632      	b.n	800dd46 <kalman_3gyro.constprop.0+0x122e>
 800e0e0:	3601      	adds	r6, #1
 800e0e2:	42be      	cmp	r6, r7
 800e0e4:	f80a 2004 	strb.w	r2, [sl, r4]
 800e0e8:	f47f ae2d 	bne.w	800dd46 <kalman_3gyro.constprop.0+0x122e>
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	f105 0801 	add.w	r8, r5, #1
 800e0f2:	1c60      	adds	r0, r4, #1
 800e0f4:	45c3      	cmp	fp, r8
 800e0f6:	eba3 0205 	sub.w	r2, r3, r5
 800e0fa:	eb09 0105 	add.w	r1, r9, r5
 800e0fe:	4450      	add	r0, sl
 800e100:	f77f ae21 	ble.w	800dd46 <kalman_3gyro.constprop.0+0x122e>
 800e104:	f009 fb12 	bl	801772c <memcpy>
 800e108:	9b02      	ldr	r3, [sp, #8]
 800e10a:	441c      	add	r4, r3
 800e10c:	9b04      	ldr	r3, [sp, #16]
 800e10e:	1b5a      	subs	r2, r3, r5
 800e110:	1b64      	subs	r4, r4, r5
 800e112:	eb02 0508 	add.w	r5, r2, r8
 800e116:	e616      	b.n	800dd46 <kalman_3gyro.constprop.0+0x122e>
 800e118:	eef4 7a48 	vcmp.f32	s15, s16
 800e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e120:	f43f ae46 	beq.w	800ddb0 <kalman_3gyro.constprop.0+0x1298>
 800e124:	eef4 7a4b 	vcmp.f32	s15, s22
 800e128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e12c:	f43f ae40 	beq.w	800ddb0 <kalman_3gyro.constprop.0+0x1298>
 800e130:	eeb4 7a48 	vcmp.f32	s14, s16
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	f43f ae3a 	beq.w	800ddb0 <kalman_3gyro.constprop.0+0x1298>
 800e13c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e144:	f43f ae34 	beq.w	800ddb0 <kalman_3gyro.constprop.0+0x1298>
 800e148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e14c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e150:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e154:	e632      	b.n	800ddbc <kalman_3gyro.constprop.0+0x12a4>
 800e156:	2304      	movs	r3, #4
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	461c      	mov	r4, r3
 800e15e:	2307      	movs	r3, #7
 800e160:	4694      	mov	ip, r2
 800e162:	2106      	movs	r1, #6
 800e164:	9302      	str	r3, [sp, #8]
 800e166:	2603      	movs	r6, #3
 800e168:	f04f 0a01 	mov.w	sl, #1
 800e16c:	f7ff ba5c 	b.w	800d628 <kalman_3gyro.constprop.0+0xb10>
 800e170:	9a08      	ldr	r2, [sp, #32]
 800e172:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e2fc <kalman_3gyro.constprop.0+0x17e4>
 800e176:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e300 <kalman_3gyro.constprop.0+0x17e8>
 800e17a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e304 <kalman_3gyro.constprop.0+0x17ec>
 800e17e:	4b62      	ldr	r3, [pc, #392]	; (800e308 <kalman_3gyro.constprop.0+0x17f0>)
 800e180:	edc2 7a00 	vstr	s15, [r2]
 800e184:	eeb0 4a65 	vmov.f32	s8, s11
 800e188:	eeb0 3a67 	vmov.f32	s6, s15
 800e18c:	eef0 4a45 	vmov.f32	s9, s10
 800e190:	6053      	str	r3, [r2, #4]
 800e192:	6093      	str	r3, [r2, #8]
 800e194:	f7fe bd3e 	b.w	800cc14 <kalman_3gyro.constprop.0+0xfc>
 800e198:	2308      	movs	r3, #8
 800e19a:	2005      	movs	r0, #5
 800e19c:	f04f 0802 	mov.w	r8, #2
 800e1a0:	f7ff ba5c 	b.w	800d65c <kalman_3gyro.constprop.0+0xb44>
 800e1a4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e1ae:	ed88 7a07 	vstr	s14, [r8, #28]
 800e1b2:	ed88 7a08 	vstr	s14, [r8, #32]
 800e1b6:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e1ba:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e1be:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e1c2:	e65f      	b.n	800de84 <kalman_3gyro.constprop.0+0x136c>
 800e1c4:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e1c8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	f342 83b2 	ble.w	8010938 <kalman_3gyro.constprop.0+0x3e20>
 800e1d4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1dc:	f2c2 86e9 	blt.w	8010fb2 <kalman_3gyro.constprop.0+0x449a>
 800e1e0:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e1e4:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	f342 8712 	ble.w	8011014 <kalman_3gyro.constprop.0+0x44fc>
 800e1f0:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e1f4:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e1f8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1fc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e200:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e204:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e208:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e20c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e210:	f002 bed8 	b.w	8010fc4 <kalman_3gyro.constprop.0+0x44ac>
 800e214:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e218:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e220:	f342 84bd 	ble.w	8010b9e <kalman_3gyro.constprop.0+0x4086>
 800e224:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e228:	f7ff b993 	b.w	800d552 <kalman_3gyro.constprop.0+0xa3a>
 800e22c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e230:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e238:	f342 849f 	ble.w	8010b7a <kalman_3gyro.constprop.0+0x4062>
 800e23c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e240:	f7ff b964 	b.w	800d50c <kalman_3gyro.constprop.0+0x9f4>
 800e244:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e248:	eef4 dac7 	vcmpe.f32	s27, s14
 800e24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e250:	f342 84b7 	ble.w	8010bc2 <kalman_3gyro.constprop.0+0x40aa>
 800e254:	eddf da2d 	vldr	s27, [pc, #180]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e258:	f7ff b935 	b.w	800d4c6 <kalman_3gyro.constprop.0+0x9ae>
 800e25c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e260:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e268:	f342 8475 	ble.w	8010b56 <kalman_3gyro.constprop.0+0x403e>
 800e26c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e270:	f7ff b8c3 	b.w	800d3fa <kalman_3gyro.constprop.0+0x8e2>
 800e274:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e278:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	f342 83a0 	ble.w	80109c4 <kalman_3gyro.constprop.0+0x3eac>
 800e284:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e288:	f7ff b894 	b.w	800d3b4 <kalman_3gyro.constprop.0+0x89c>
 800e28c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e290:	eef4 dac7 	vcmpe.f32	s27, s14
 800e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e298:	f342 8382 	ble.w	80109a0 <kalman_3gyro.constprop.0+0x3e88>
 800e29c:	eddf da1b 	vldr	s27, [pc, #108]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e2a0:	f7ff b865 	b.w	800d36e <kalman_3gyro.constprop.0+0x856>
 800e2a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e2a8:	eef4 dac7 	vcmpe.f32	s27, s14
 800e2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b0:	f342 8364 	ble.w	801097c <kalman_3gyro.constprop.0+0x3e64>
 800e2b4:	eddf da15 	vldr	s27, [pc, #84]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e2b8:	f7fe bff3 	b.w	800d2a2 <kalman_3gyro.constprop.0+0x78a>
 800e2bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e2c0:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	f342 8346 	ble.w	8010958 <kalman_3gyro.constprop.0+0x3e40>
 800e2cc:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e2d0:	f7fe bfc4 	b.w	800d25c <kalman_3gyro.constprop.0+0x744>
 800e2d4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e2d8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e0:	f342 839e 	ble.w	8010a20 <kalman_3gyro.constprop.0+0x3f08>
 800e2e4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e30c <kalman_3gyro.constprop.0+0x17f4>
 800e2e8:	f7fe bf95 	b.w	800d216 <kalman_3gyro.constprop.0+0x6fe>
 800e2ec:	eef1 3a63 	vneg.f32	s7, s7
 800e2f0:	f7ff bb42 	b.w	800d978 <kalman_3gyro.constprop.0+0xe60>
 800e2f4:	eef1 3a63 	vneg.f32	s7, s7
 800e2f8:	f7ff bb1b 	b.w	800d932 <kalman_3gyro.constprop.0+0xe1a>
 800e2fc:	00000000 	.word	0x00000000
 800e300:	3fb33333 	.word	0x3fb33333
 800e304:	bfb33333 	.word	0xbfb33333
 800e308:	3f333333 	.word	0x3f333333
 800e30c:	80000000 	.word	0x80000000
 800e310:	3fb77778 	.word	0x3fb77778
 800e314:	3f99999a 	.word	0x3f99999a
 800e318:	3f4ccccd 	.word	0x3f4ccccd
 800e31c:	42d40000 	.word	0x42d40000
 800e320:	46979000 	.word	0x46979000
 800e324:	4415c000 	.word	0x4415c000
 800e328:	3ba3d70a 	.word	0x3ba3d70a
 800e32c:	3b449ba6 	.word	0x3b449ba6
 800e330:	3c75c28f 	.word	0x3c75c28f
 800e334:	3c23d70a 	.word	0x3c23d70a
 800e338:	3d4cccc0 	.word	0x3d4cccc0
 800e33c:	43480000 	.word	0x43480000
 800e340:	3d4ccccd 	.word	0x3d4ccccd
 800e344:	3cf5c28f 	.word	0x3cf5c28f
 800e348:	3eb33334 	.word	0x3eb33334
 800e34c:	3f933333 	.word	0x3f933333
 800e350:	4247ffff 	.word	0x4247ffff
 800e354:	3dcccccd 	.word	0x3dcccccd
 800e358:	3e4ccccd 	.word	0x3e4ccccd
 800e35c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e360:	eeb0 ba4e 	vmov.f32	s22, s28
 800e364:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e368:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e36c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e354 <kalman_3gyro.constprop.0+0x183c>
 800e370:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e374:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e378:	eef0 daed 	vabs.f32	s27, s27
 800e37c:	eeb0 5ac5 	vabs.f32	s10, s10
 800e380:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e384:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	f340 821c 	ble.w	800e7c8 <kalman_3gyro.constprop.0+0x1cb0>
 800e390:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e310 <kalman_3gyro.constprop.0+0x17f8>
 800e394:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	f302 828b 	bgt.w	80108b6 <kalman_3gyro.constprop.0+0x3d9e>
 800e3a0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e3a4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e3a8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e3ac:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e3b0:	eeb0 5a64 	vmov.f32	s10, s9
 800e3b4:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3bc:	f89b 3000 	ldrb.w	r3, [fp]
 800e3c0:	bfb8      	it	lt
 800e3c2:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e3c6:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 81f9 	beq.w	800e7c2 <kalman_3gyro.constprop.0+0x1caa>
 800e3d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 81de 	beq.w	800e796 <kalman_3gyro.constprop.0+0x1c7e>
 800e3da:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e3de:	2300      	movs	r3, #0
 800e3e0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e3e4:	eeb0 6a61 	vmov.f32	s12, s3
 800e3e8:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e3ec:	9908      	ldr	r1, [sp, #32]
 800e3ee:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e3f2:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e3f6:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e3fa:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e3fe:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e402:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e406:	2200      	movs	r2, #0
 800e408:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e40c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e410:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e414:	9233      	str	r2, [sp, #204]	; 0xcc
 800e416:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e41a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e41e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e422:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e426:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e42a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e42e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e432:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e436:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e43a:	eeb0 3a42 	vmov.f32	s6, s4
 800e43e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e442:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e446:	eef0 aa46 	vmov.f32	s21, s12
 800e44a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e44e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e452:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e456:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e45a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e45e:	eef0 2a44 	vmov.f32	s5, s8
 800e462:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e466:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e46a:	eeb0 fa64 	vmov.f32	s30, s9
 800e46e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e472:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e476:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e47a:	eeb0 1a6a 	vmov.f32	s2, s21
 800e47e:	eef0 aa66 	vmov.f32	s21, s13
 800e482:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e486:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e48a:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e48e:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e492:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e496:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e49a:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e49e:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e4a2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e4a6:	eef0 3a64 	vmov.f32	s7, s9
 800e4aa:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e4ae:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e4b2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e4b6:	edd1 5a02 	vldr	s11, [r1, #8]
 800e4ba:	ed91 5a05 	vldr	s10, [r1, #20]
 800e4be:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e4c2:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e4c6:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e4ca:	edd1 1a01 	vldr	s3, [r1, #4]
 800e4ce:	edd1 fa00 	vldr	s31, [r1]
 800e4d2:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e4d6:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e4da:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e4de:	edd1 5a03 	vldr	s11, [r1, #12]
 800e4e2:	edd1 1a04 	vldr	s3, [r1, #16]
 800e4e6:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e314 <kalman_3gyro.constprop.0+0x17fc>
 800e4ea:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e4ee:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e4f2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e4f6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e4fa:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e4fe:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e50a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e50e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e512:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e516:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e51a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e51e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e522:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e526:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e52a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e52e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e532:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e536:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e53a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e53e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e542:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e546:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e54a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e54e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e552:	d506      	bpl.n	800e562 <kalman_3gyro.constprop.0+0x1a4a>
 800e554:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e318 <kalman_3gyro.constprop.0+0x1800>
 800e558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e560:	dc01      	bgt.n	800e566 <kalman_3gyro.constprop.0+0x1a4e>
 800e562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e566:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e56a:	eef0 7ae7 	vabs.f32	s15, s15
 800e56e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57a:	f340 8141 	ble.w	800e800 <kalman_3gyro.constprop.0+0x1ce8>
 800e57e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e582:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58a:	f142 8198 	bpl.w	80108be <kalman_3gyro.constprop.0+0x3da6>
 800e58e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e328 <kalman_3gyro.constprop.0+0x1810>
 800e592:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e596:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e334 <kalman_3gyro.constprop.0+0x181c>
 800e59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5a2:	f102 8221 	bmi.w	80109e8 <kalman_3gyro.constprop.0+0x3ed0>
 800e5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5aa:	f142 8221 	bpl.w	80109f0 <kalman_3gyro.constprop.0+0x3ed8>
 800e5ae:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e330 <kalman_3gyro.constprop.0+0x1818>
 800e5b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	f282 84a4 	bge.w	8010f06 <kalman_3gyro.constprop.0+0x43ee>
 800e5be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5c2:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e344 <kalman_3gyro.constprop.0+0x182c>
 800e5c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ce:	f2c2 84b0 	blt.w	8010f32 <kalman_3gyro.constprop.0+0x441a>
 800e5d2:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e340 <kalman_3gyro.constprop.0+0x1828>
 800e5d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5de:	f142 84b0 	bpl.w	8010f42 <kalman_3gyro.constprop.0+0x442a>
 800e5e2:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e344 <kalman_3gyro.constprop.0+0x182c>
 800e5e6:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e350 <kalman_3gyro.constprop.0+0x1838>
 800e5ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e5ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e5f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e5f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e5fa:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e5fe:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e354 <kalman_3gyro.constprop.0+0x183c>
 800e602:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e60a:	f2c2 84b0 	blt.w	8010f6e <kalman_3gyro.constprop.0+0x4456>
 800e60e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e358 <kalman_3gyro.constprop.0+0x1840>
 800e612:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61a:	f142 84b0 	bpl.w	8010f7e <kalman_3gyro.constprop.0+0x4466>
 800e61e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e354 <kalman_3gyro.constprop.0+0x183c>
 800e622:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e31c <kalman_3gyro.constprop.0+0x1804>
 800e626:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e62a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e62e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e632:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e636:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e63a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e63e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e646:	db0d      	blt.n	800e664 <kalman_3gyro.constprop.0+0x1b4c>
 800e648:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e64c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e320 <kalman_3gyro.constprop.0+0x1808>
 800e650:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e324 <kalman_3gyro.constprop.0+0x180c>
 800e654:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e658:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e65c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e660:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e668:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e66c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e670:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e674:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e330 <kalman_3gyro.constprop.0+0x1818>
 800e678:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e328 <kalman_3gyro.constprop.0+0x1810>
 800e67c:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e334 <kalman_3gyro.constprop.0+0x181c>
 800e680:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e32c <kalman_3gyro.constprop.0+0x1814>
 800e684:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e68c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e690:	bfb8      	it	lt
 800e692:	eef0 4a46 	vmovlt.f32	s9, s12
 800e696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69a:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e69e:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e6a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6a6:	f142 841f 	bpl.w	8010ee8 <kalman_3gyro.constprop.0+0x43d0>
 800e6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ae:	f2c2 841f 	blt.w	8010ef0 <kalman_3gyro.constprop.0+0x43d8>
 800e6b2:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e330 <kalman_3gyro.constprop.0+0x1818>
 800e6b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	f142 83ba 	bpl.w	8010e36 <kalman_3gyro.constprop.0+0x431e>
 800e6c2:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e334 <kalman_3gyro.constprop.0+0x181c>
 800e6c6:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e338 <kalman_3gyro.constprop.0+0x1820>
 800e6ca:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e33c <kalman_3gyro.constprop.0+0x1824>
 800e6ce:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6d6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e6da:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e6de:	eeb0 ca66 	vmov.f32	s24, s13
 800e6e2:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e344 <kalman_3gyro.constprop.0+0x182c>
 800e6e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ee:	f2c2 83ba 	blt.w	8010e66 <kalman_3gyro.constprop.0+0x434e>
 800e6f2:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e340 <kalman_3gyro.constprop.0+0x1828>
 800e6f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fe:	f142 83ba 	bpl.w	8010e76 <kalman_3gyro.constprop.0+0x435e>
 800e702:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e344 <kalman_3gyro.constprop.0+0x182c>
 800e706:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e348 <kalman_3gyro.constprop.0+0x1830>
 800e70a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e350 <kalman_3gyro.constprop.0+0x1838>
 800e70e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e34c <kalman_3gyro.constprop.0+0x1834>
 800e712:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e716:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e71a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e71e:	eeb0 ca66 	vmov.f32	s24, s13
 800e722:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e354 <kalman_3gyro.constprop.0+0x183c>
 800e726:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72e:	f2c2 83ba 	blt.w	8010ea6 <kalman_3gyro.constprop.0+0x438e>
 800e732:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e358 <kalman_3gyro.constprop.0+0x1840>
 800e736:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	f142 83ba 	bpl.w	8010eb6 <kalman_3gyro.constprop.0+0x439e>
 800e742:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e7d0 <kalman_3gyro.constprop.0+0x1cb8>
 800e746:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e7d4 <kalman_3gyro.constprop.0+0x1cbc>
 800e74a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e74e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e752:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e756:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e75a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e75e:	eeb0 ca66 	vmov.f32	s24, s13
 800e762:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e766:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76e:	f2c2 80b0 	blt.w	80108d2 <kalman_3gyro.constprop.0+0x3dba>
 800e772:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e776:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e77a:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e7d8 <kalman_3gyro.constprop.0+0x1cc0>
 800e77e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e7dc <kalman_3gyro.constprop.0+0x1cc4>
 800e782:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e786:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e78a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e78e:	eeb0 ca66 	vmov.f32	s24, s13
 800e792:	f002 b89e 	b.w	80108d2 <kalman_3gyro.constprop.0+0x3dba>
 800e796:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e79a:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e79e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e7a2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e7a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e7aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e7b2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e7b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	f102 8246 	bmi.w	8010c4e <kalman_3gyro.constprop.0+0x4136>
 800e7c2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e7c6:	e60b      	b.n	800e3e0 <kalman_3gyro.constprop.0+0x18c8>
 800e7c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e7cc:	e5f2      	b.n	800e3b4 <kalman_3gyro.constprop.0+0x189c>
 800e7ce:	bf00      	nop
 800e7d0:	3dcccccd 	.word	0x3dcccccd
 800e7d4:	410c0000 	.word	0x410c0000
 800e7d8:	42c80000 	.word	0x42c80000
 800e7dc:	424a0000 	.word	0x424a0000
 800e7e0:	3c23d70a 	.word	0x3c23d70a
 800e7e4:	3b449ba6 	.word	0x3b449ba6
 800e7e8:	3fb33333 	.word	0x3fb33333
 800e7ec:	3ecccccd 	.word	0x3ecccccd
 800e7f0:	3f8f5c29 	.word	0x3f8f5c29
 800e7f4:	3f59999a 	.word	0x3f59999a
 800e7f8:	3e4ccccd 	.word	0x3e4ccccd
 800e7fc:	3f99999a 	.word	0x3f99999a
 800e800:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e804:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e7e0 <kalman_3gyro.constprop.0+0x1cc8>
 800e808:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e7e4 <kalman_3gyro.constprop.0+0x1ccc>
 800e80c:	eeb0 7a4c 	vmov.f32	s14, s24
 800e810:	eef0 4a4c 	vmov.f32	s9, s24
 800e814:	eddd 6a01 	vldr	s13, [sp, #4]
 800e818:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e81c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e820:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e824:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e828:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e82c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e830:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e834:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e838:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e83c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e840:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e844:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e848:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e84c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e850:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e854:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e858:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e85c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e860:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e864:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e868:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e86c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e870:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e874:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e878:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e87c:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e880:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e884:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e888:	2a00      	cmp	r2, #0
 800e88a:	f001 8411 	beq.w	80100b0 <kalman_3gyro.constprop.0+0x3598>
 800e88e:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e892:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e896:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e89a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e89e:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e8a2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e8a6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e8aa:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e8ae:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e8b2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e8b6:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e8ba:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e8be:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e8c2:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e8c6:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e8ca:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e8ce:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e8d2:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e8d6:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e8da:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e8de:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e8e2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e8e6:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e8ea:	b159      	cbz	r1, 800e904 <kalman_3gyro.constprop.0+0x1dec>
 800e8ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	dd04      	ble.n	800e904 <kalman_3gyro.constprop.0+0x1dec>
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e900:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e904:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90c:	dd09      	ble.n	800e922 <kalman_3gyro.constprop.0+0x1e0a>
 800e90e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e912:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91a:	db02      	blt.n	800e922 <kalman_3gyro.constprop.0+0x1e0a>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f002 8001 	beq.w	8010924 <kalman_3gyro.constprop.0+0x3e0c>
 800e922:	b132      	cbz	r2, 800e932 <kalman_3gyro.constprop.0+0x1e1a>
 800e924:	f240 1001 	movw	r0, #257	; 0x101
 800e928:	2301      	movs	r3, #1
 800e92a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e92e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e932:	2301      	movs	r3, #1
 800e934:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e938:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e93c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e7e8 <kalman_3gyro.constprop.0+0x1cd0>
 800e940:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e948:	dc09      	bgt.n	800e95e <kalman_3gyro.constprop.0+0x1e46>
 800e94a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e7ec <kalman_3gyro.constprop.0+0x1cd4>
 800e94e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e956:	d402      	bmi.n	800e95e <kalman_3gyro.constprop.0+0x1e46>
 800e958:	2a00      	cmp	r2, #0
 800e95a:	f042 80e4 	bne.w	8010b26 <kalman_3gyro.constprop.0+0x400e>
 800e95e:	2300      	movs	r3, #0
 800e960:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e964:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e968:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e96c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e970:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e7f0 <kalman_3gyro.constprop.0+0x1cd8>
 800e974:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97c:	dc09      	bgt.n	800e992 <kalman_3gyro.constprop.0+0x1e7a>
 800e97e:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e7f4 <kalman_3gyro.constprop.0+0x1cdc>
 800e982:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	d402      	bmi.n	800e992 <kalman_3gyro.constprop.0+0x1e7a>
 800e98c:	2900      	cmp	r1, #0
 800e98e:	f042 8097 	bne.w	8010ac0 <kalman_3gyro.constprop.0+0x3fa8>
 800e992:	2300      	movs	r3, #0
 800e994:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e998:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e99c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e9a0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e9a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e9a8:	eef4 dae7 	vcmpe.f32	s27, s15
 800e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b0:	f341 836b 	ble.w	801008a <kalman_3gyro.constprop.0+0x3572>
 800e9b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9b8:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e9bc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e9c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e9d2:	eef4 dac7 	vcmpe.f32	s27, s14
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	bfc4      	itt	gt
 800e9dc:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e9e0:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e9e4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e9e8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e9ec:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e9f0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e9f4:	2b0e      	cmp	r3, #14
 800e9f6:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e9fa:	dc02      	bgt.n	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 800e9fc:	3305      	adds	r3, #5
 800e9fe:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800ea02:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ea06:	eef4 7acd 	vcmpe.f32	s15, s26
 800ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0e:	f340 82e9 	ble.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea12:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ea16:	eef4 7aeb 	vcmpe.f32	s15, s23
 800ea1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1e:	f340 82e1 	ble.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea22:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ea26:	eef4 7aec 	vcmpe.f32	s15, s25
 800ea2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2e:	f340 82d9 	ble.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea32:	9b08      	ldr	r3, [sp, #32]
 800ea34:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e7f8 <kalman_3gyro.constprop.0+0x1ce0>
 800ea38:	ed93 7a06 	vldr	s14, [r3, #24]
 800ea3c:	eef0 6ac7 	vabs.f32	s13, s14
 800ea40:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ea44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea48:	f140 82cc 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea4c:	edd3 6a07 	vldr	s13, [r3, #28]
 800ea50:	eeb0 6ae6 	vabs.f32	s12, s13
 800ea54:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ea58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5c:	f140 82c2 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea60:	ed93 6a08 	vldr	s12, [r3, #32]
 800ea64:	eef0 4ac6 	vabs.f32	s9, s12
 800ea68:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ea6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea70:	f140 82b8 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea74:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e7fc <kalman_3gyro.constprop.0+0x1ce4>
 800ea78:	eef0 5ae5 	vabs.f32	s11, s11
 800ea7c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ea80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea84:	f140 82ae 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea88:	eef0 1ae1 	vabs.f32	s3, s3
 800ea8c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ea90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea94:	f140 82a6 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ea98:	eeb0 5ac5 	vabs.f32	s10, s10
 800ea9c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800eaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa4:	f140 829e 	bpl.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800eaa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaaa:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800eaae:	edd3 5a00 	vldr	s11, [r3]
 800eab2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eab4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800eab6:	ed93 5a00 	vldr	s10, [r3]
 800eaba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800eabc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800eac0:	2a09      	cmp	r2, #9
 800eac2:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800eac6:	ed93 4a00 	vldr	s8, [r3]
 800eaca:	edd4 3a00 	vldr	s7, [r4]
 800eace:	bf8c      	ite	hi
 800ead0:	230a      	movhi	r3, #10
 800ead2:	2305      	movls	r3, #5
 800ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead8:	bfb4      	ite	lt
 800eada:	eef0 7a45 	vmovlt.f32	s15, s10
 800eade:	eef0 7a65 	vmovge.f32	s15, s11
 800eae2:	bf8c      	ite	hi
 800eae4:	eef0 4a45 	vmovhi.f32	s9, s10
 800eae8:	eef0 4a65 	vmovls.f32	s9, s11
 800eaec:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eaf8:	bfb8      	it	lt
 800eafa:	eef0 7a63 	vmovlt.f32	s15, s7
 800eafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb02:	bf88      	it	hi
 800eb04:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb08:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	ee35 5a85 	vadd.f32	s10, s11, s10
 800eb14:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb18:	edd1 5a00 	vldr	s11, [r1]
 800eb1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eb1e:	bfb8      	it	lt
 800eb20:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb28:	bf88      	it	hi
 800eb2a:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb2e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800eb32:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800eb3e:	bfb8      	it	lt
 800eb40:	eef0 7a65 	vmovlt.f32	s15, s11
 800eb44:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4c:	bf88      	it	hi
 800eb4e:	eef0 4a65 	vmovhi.f32	s9, s11
 800eb52:	2b05      	cmp	r3, #5
 800eb54:	ee35 5a25 	vadd.f32	s10, s10, s11
 800eb58:	edd1 5a00 	vldr	s11, [r1]
 800eb5c:	d065      	beq.n	800ec2a <kalman_3gyro.constprop.0+0x2112>
 800eb5e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800eb62:	edd1 3a00 	vldr	s7, [r1]
 800eb66:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800eb6a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb6e:	ed91 4a00 	vldr	s8, [r1]
 800eb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb76:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb7a:	bfb8      	it	lt
 800eb7c:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb84:	bf88      	it	hi
 800eb86:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb8a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb8e:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb96:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb9a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb9e:	edd1 3a00 	vldr	s7, [r1]
 800eba2:	bfb8      	it	lt
 800eba4:	eef0 7a44 	vmovlt.f32	s15, s8
 800eba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebac:	bf88      	it	hi
 800ebae:	eef0 4a44 	vmovhi.f32	s9, s8
 800ebb2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ebb6:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ebc2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ebc6:	ed91 4a00 	vldr	s8, [r1]
 800ebca:	bfb8      	it	lt
 800ebcc:	eef0 7a63 	vmovlt.f32	s15, s7
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	bf88      	it	hi
 800ebd6:	eef0 4a63 	vmovhi.f32	s9, s7
 800ebda:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ebde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ebe6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ebea:	bfb8      	it	lt
 800ebec:	eef0 7a44 	vmovlt.f32	s15, s8
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	bf88      	it	hi
 800ebf6:	eef0 4a44 	vmovhi.f32	s9, s8
 800ebfa:	2b0a      	cmp	r3, #10
 800ebfc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ec00:	d113      	bne.n	800ec2a <kalman_3gyro.constprop.0+0x2112>
 800ec02:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ec06:	ed91 4a00 	vldr	s8, [r1]
 800ec0a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ec0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec12:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ec16:	bfb8      	it	lt
 800ec18:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec1c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ec20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec24:	bf88      	it	hi
 800ec26:	eef0 4a44 	vmovhi.f32	s9, s8
 800ec2a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ec2e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800efcc <kalman_3gyro.constprop.0+0x24b4>
 800ec32:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800efd0 <kalman_3gyro.constprop.0+0x24b8>
 800ec36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec3a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ec3e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ec42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec46:	f300 81cd 	bgt.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ec4a:	eef0 7ac5 	vabs.f32	s15, s10
 800ec4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec52:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800efd4 <kalman_3gyro.constprop.0+0x24bc>
 800ec56:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	f300 81c1 	bgt.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ec62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec64:	ed91 5a00 	vldr	s10, [r1]
 800ec68:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec6a:	ed91 4a00 	vldr	s8, [r1]
 800ec6e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ec70:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ec74:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800ec78:	ed90 3a00 	vldr	s6, [r0]
 800ec7c:	edd1 3a00 	vldr	s7, [r1]
 800ec80:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec86:	bfb4      	ite	lt
 800ec88:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec8c:	eef0 7a45 	vmovge.f32	s15, s10
 800ec90:	bf8c      	ite	hi
 800ec92:	eef0 4a44 	vmovhi.f32	s9, s8
 800ec96:	eef0 4a45 	vmovls.f32	s9, s10
 800ec9a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ec9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800eca6:	bfb8      	it	lt
 800eca8:	eef0 7a43 	vmovlt.f32	s15, s6
 800ecac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb0:	bf88      	it	hi
 800ecb2:	eef0 4a43 	vmovhi.f32	s9, s6
 800ecb6:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ecc2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ecc6:	ed91 4a00 	vldr	s8, [r1]
 800ecca:	bfb8      	it	lt
 800eccc:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd4:	bf88      	it	hi
 800ecd6:	eef0 4a63 	vmovhi.f32	s9, s7
 800ecda:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ecde:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ece2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece6:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ecea:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ecee:	bfb8      	it	lt
 800ecf0:	eef0 7a44 	vmovlt.f32	s15, s8
 800ecf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf8:	bf88      	it	hi
 800ecfa:	eef0 4a44 	vmovhi.f32	s9, s8
 800ecfe:	2b05      	cmp	r3, #5
 800ed00:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed04:	d065      	beq.n	800edd2 <kalman_3gyro.constprop.0+0x22ba>
 800ed06:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800ed0a:	edd1 3a00 	vldr	s7, [r1]
 800ed0e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ed12:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed16:	ed91 4a00 	vldr	s8, [r1]
 800ed1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed22:	bfb8      	it	lt
 800ed24:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	bf88      	it	hi
 800ed2e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed32:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed36:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800ed3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed42:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed46:	edd1 3a00 	vldr	s7, [r1]
 800ed4a:	bfb8      	it	lt
 800ed4c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed54:	bf88      	it	hi
 800ed56:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed5a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed5e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800ed62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed66:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed6a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed6e:	ed91 4a00 	vldr	s8, [r1]
 800ed72:	bfb8      	it	lt
 800ed74:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7c:	bf88      	it	hi
 800ed7e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed82:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed92:	bfb8      	it	lt
 800ed94:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9c:	bf88      	it	hi
 800ed9e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eda2:	2b0a      	cmp	r3, #10
 800eda4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eda8:	d113      	bne.n	800edd2 <kalman_3gyro.constprop.0+0x22ba>
 800edaa:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800edae:	ed91 4a00 	vldr	s8, [r1]
 800edb2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800edb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edba:	eef4 4ac4 	vcmpe.f32	s9, s8
 800edbe:	bfb8      	it	lt
 800edc0:	eef0 7a44 	vmovlt.f32	s15, s8
 800edc4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800edc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edcc:	bf88      	it	hi
 800edce:	eef0 4a44 	vmovhi.f32	s9, s8
 800edd2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800edd6:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800efcc <kalman_3gyro.constprop.0+0x24b4>
 800edda:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800efd0 <kalman_3gyro.constprop.0+0x24b8>
 800edde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ede2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ede6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800edea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edee:	f300 80f9 	bgt.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800edf2:	eef0 7ac5 	vabs.f32	s15, s10
 800edf6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edfa:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800efd4 <kalman_3gyro.constprop.0+0x24bc>
 800edfe:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ee02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee06:	f300 80ed 	bgt.w	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ee0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee0c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ee0e:	edd1 4a00 	vldr	s9, [r1]
 800ee12:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ee14:	ed91 3a00 	vldr	s6, [r1]
 800ee18:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee1a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ee1e:	ed91 4a00 	vldr	s8, [r1]
 800ee22:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800ee26:	edd1 3a00 	vldr	s7, [r1]
 800ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2e:	bfb4      	ite	lt
 800ee30:	eef0 7a43 	vmovlt.f32	s15, s6
 800ee34:	eef0 7a64 	vmovge.f32	s15, s9
 800ee38:	bf8c      	ite	hi
 800ee3a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ee3e:	eeb0 5a64 	vmovls.f32	s10, s9
 800ee42:	eef4 3ae7 	vcmpe.f32	s7, s15
 800ee46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800ee4e:	bfa8      	it	ge
 800ee50:	eef0 7a63 	vmovge.f32	s15, s7
 800ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee58:	bf98      	it	ls
 800ee5a:	eeb0 5a63 	vmovls.f32	s10, s7
 800ee5e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800ee62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee66:	ee34 3a83 	vadd.f32	s6, s9, s6
 800ee6a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800ee6e:	edd5 4a00 	vldr	s9, [r5]
 800ee72:	bfa8      	it	ge
 800ee74:	eef0 7a44 	vmovge.f32	s15, s8
 800ee78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7c:	bf98      	it	ls
 800ee7e:	eeb0 5a44 	vmovls.f32	s10, s8
 800ee82:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ee86:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ee8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ee92:	bfb8      	it	lt
 800ee94:	eef0 7a64 	vmovlt.f32	s15, s9
 800ee98:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	bf98      	it	ls
 800eea2:	eeb0 5a64 	vmovls.f32	s10, s9
 800eea6:	2b05      	cmp	r3, #5
 800eea8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800eeac:	d065      	beq.n	800ef7a <kalman_3gyro.constprop.0+0x2462>
 800eeae:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800eeb2:	ed95 4a00 	vldr	s8, [r5]
 800eeb6:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800eeba:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eebe:	ed95 3a00 	vldr	s6, [r5]
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800eeca:	bfb8      	it	lt
 800eecc:	eef0 7a44 	vmovlt.f32	s15, s8
 800eed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed4:	bf88      	it	hi
 800eed6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800eeda:	eef4 7ac3 	vcmpe.f32	s15, s6
 800eede:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800eee2:	edd5 3a00 	vldr	s7, [r5]
 800eee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeea:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800eeee:	bfb8      	it	lt
 800eef0:	eef0 7a43 	vmovlt.f32	s15, s6
 800eef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef8:	bf88      	it	hi
 800eefa:	eeb0 5a43 	vmovhi.f32	s10, s6
 800eefe:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ef02:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800ef0e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800ef12:	edd5 4a00 	vldr	s9, [r5]
 800ef16:	bfb8      	it	lt
 800ef18:	eef0 7a63 	vmovlt.f32	s15, s7
 800ef1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef20:	bf88      	it	hi
 800ef22:	eeb0 5a63 	vmovhi.f32	s10, s7
 800ef26:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ef2a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800ef36:	bfb8      	it	lt
 800ef38:	eef0 7a64 	vmovlt.f32	s15, s9
 800ef3c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	bf88      	it	hi
 800ef46:	eeb0 5a64 	vmovhi.f32	s10, s9
 800ef4a:	2b0a      	cmp	r3, #10
 800ef4c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ef50:	d113      	bne.n	800ef7a <kalman_3gyro.constprop.0+0x2462>
 800ef52:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800ef56:	ed93 4a00 	vldr	s8, [r3]
 800ef5a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef62:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ef66:	bfb8      	it	lt
 800ef68:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef6c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ef70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef74:	bf88      	it	hi
 800ef76:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ef7a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ef7e:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800efcc <kalman_3gyro.constprop.0+0x24b4>
 800ef82:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800efd0 <kalman_3gyro.constprop.0+0x24b8>
 800ef86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef8a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ef8e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef96:	dc25      	bgt.n	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800ef98:	eef0 7ae4 	vabs.f32	s15, s9
 800ef9c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800efa0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800efd4 <kalman_3gyro.constprop.0+0x24bc>
 800efa4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efac:	dc1a      	bgt.n	800efe4 <kalman_3gyro.constprop.0+0x24cc>
 800efae:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800efb2:	2d00      	cmp	r5, #0
 800efb4:	f000 80e0 	beq.w	800f178 <kalman_3gyro.constprop.0+0x2660>
 800efb8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	f002 8439 	beq.w	8011834 <kalman_3gyro.constprop.0+0x4d1c>
 800efc2:	2201      	movs	r2, #1
 800efc4:	462b      	mov	r3, r5
 800efc6:	9201      	str	r2, [sp, #4]
 800efc8:	e01c      	b.n	800f004 <kalman_3gyro.constprop.0+0x24ec>
 800efca:	bf00      	nop
 800efcc:	3be56041 	.word	0x3be56041
 800efd0:	3dcccccd 	.word	0x3dcccccd
 800efd4:	3e333333 	.word	0x3e333333
 800efd8:	3d088889 	.word	0x3d088889
 800efdc:	42480000 	.word	0x42480000
 800efe0:	00000000 	.word	0x00000000
 800efe4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800efe8:	2100      	movs	r1, #0
 800efea:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800efee:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 80c1 	beq.w	800f17a <kalman_3gyro.constprop.0+0x2662>
 800eff8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800effc:	2a01      	cmp	r2, #1
 800effe:	f001 8615 	beq.w	8010c2c <kalman_3gyro.constprop.0+0x4114>
 800f002:	9101      	str	r1, [sp, #4]
 800f004:	2b02      	cmp	r3, #2
 800f006:	f041 87d2 	bne.w	8010fae <kalman_3gyro.constprop.0+0x4496>
 800f00a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f00e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800f012:	f240 1301 	movw	r3, #257	; 0x101
 800f016:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800f01a:	2301      	movs	r3, #1
 800f01c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800f020:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f024:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800f028:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800f02c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f030:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800f034:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800f038:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800f03c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800f040:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800f044:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f048:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f050:	f2c2 809a 	blt.w	8011188 <kalman_3gyro.constprop.0+0x4670>
 800f054:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f058:	2a00      	cmp	r2, #0
 800f05a:	f002 83db 	beq.w	8011814 <kalman_3gyro.constprop.0+0x4cfc>
 800f05e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f062:	3301      	adds	r3, #1
 800f064:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f068:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f06c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f074:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f078:	f002 84da 	beq.w	8011a30 <kalman_3gyro.constprop.0+0x4f18>
 800f07c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f080:	f002 80d0 	beq.w	8011224 <kalman_3gyro.constprop.0+0x470c>
 800f084:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f088:	2a00      	cmp	r2, #0
 800f08a:	f042 80d0 	bne.w	801122e <kalman_3gyro.constprop.0+0x4716>
 800f08e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f090:	a830      	add	r0, sp, #192	; 0xc0
 800f092:	f04f 31ff 	mov.w	r1, #4294967295
 800f096:	4613      	mov	r3, r2
 800f098:	edd2 7a00 	vldr	s15, [r2]
 800f09c:	3101      	adds	r1, #1
 800f09e:	330c      	adds	r3, #12
 800f0a0:	3204      	adds	r2, #4
 800f0a2:	461c      	mov	r4, r3
 800f0a4:	ed94 7a00 	vldr	s14, [r4]
 800f0a8:	330c      	adds	r3, #12
 800f0aa:	4598      	cmp	r8, r3
 800f0ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0b0:	d1f7      	bne.n	800f0a2 <kalman_3gyro.constprop.0+0x258a>
 800f0b2:	2902      	cmp	r1, #2
 800f0b4:	ece0 7a01 	vstmia	r0!, {s15}
 800f0b8:	f108 0804 	add.w	r8, r8, #4
 800f0bc:	d1eb      	bne.n	800f096 <kalman_3gyro.constprop.0+0x257e>
 800f0be:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800efd8 <kalman_3gyro.constprop.0+0x24c0>
 800f0c2:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f0c6:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f0ca:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f0ce:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f0d0:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f0d4:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f0d8:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f0dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f0e0:	460a      	mov	r2, r1
 800f0e2:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f0e6:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f0ea:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f0ee:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f0f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fa:	f103 030c 	add.w	r3, r3, #12
 800f0fe:	bf88      	it	hi
 800f100:	eef0 7a47 	vmovhi.f32	s15, s14
 800f104:	4293      	cmp	r3, r2
 800f106:	d1f2      	bne.n	800f0ee <kalman_3gyro.constprop.0+0x25d6>
 800f108:	1d1a      	adds	r2, r3, #4
 800f10a:	4290      	cmp	r0, r2
 800f10c:	ece4 7a01 	vstmia	r4!, {s15}
 800f110:	d1e9      	bne.n	800f0e6 <kalman_3gyro.constprop.0+0x25ce>
 800f112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f114:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f118:	edd3 7a00 	vldr	s15, [r3]
 800f11c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f120:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f124:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f128:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f12c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f130:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f134:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f138:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f13c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f140:	b14b      	cbz	r3, 800f156 <kalman_3gyro.constprop.0+0x263e>
 800f142:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f146:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f14a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	f102 8553 	bmi.w	8011bfc <kalman_3gyro.constprop.0+0x50e4>
 800f156:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f15a:	2a1e      	cmp	r2, #30
 800f15c:	f002 84dd 	beq.w	8011b1a <kalman_3gyro.constprop.0+0x5002>
 800f160:	1c53      	adds	r3, r2, #1
 800f162:	2aff      	cmp	r2, #255	; 0xff
 800f164:	bf14      	ite	ne
 800f166:	b2db      	uxtbne	r3, r3
 800f168:	23ff      	moveq	r3, #255	; 0xff
 800f16a:	2200      	movs	r2, #0
 800f16c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f170:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f174:	9b01      	ldr	r3, [sp, #4]
 800f176:	e012      	b.n	800f19e <kalman_3gyro.constprop.0+0x2686>
 800f178:	2301      	movs	r3, #1
 800f17a:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f17e:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f182:	9181      	str	r1, [sp, #516]	; 0x204
 800f184:	9282      	str	r2, [sp, #520]	; 0x208
 800f186:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f18a:	9183      	str	r1, [sp, #524]	; 0x20c
 800f18c:	2200      	movs	r2, #0
 800f18e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f192:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f196:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f19a:	f88b 2001 	strb.w	r2, [fp, #1]
 800f19e:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800efdc <kalman_3gyro.constprop.0+0x24c4>
 800f1a2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1aa:	f2c0 875f 	blt.w	801006c <kalman_3gyro.constprop.0+0x3554>
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f1b4:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f1b8:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d125      	bne.n	800f20c <kalman_3gyro.constprop.0+0x26f4>
 800f1c0:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f1c4:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f1c8:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f1cc:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f1d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f1d4:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f1d8:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f1dc:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f1e0:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f1e4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f1e8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f1ec:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f1f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f1f4:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f1f8:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f1fc:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f200:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f204:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f208:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f20c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f210:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f214:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f218:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f21c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f220:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f224:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f228:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f22c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f230:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f234:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f238:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f23c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f240:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f244:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f248:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f24c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f250:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f254:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f258:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f262:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f266:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f26a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f26e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f272:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f276:	2500      	movs	r5, #0
 800f278:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f27c:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f280:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f284:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f288:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f28c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f290:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f294:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f29c:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f2a0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f2a4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f2a8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f2ac:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f2b0:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f2b4:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f2b8:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f2bc:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f2c0:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f2c4:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f2c8:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f2cc:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f2d0:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f2d4:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f2d8:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f2dc:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f2e0:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f2e4:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800efe0 <kalman_3gyro.constprop.0+0x24c8>
 800f2e8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f2ec:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f2f0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f2f4:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f2f8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f2fc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f300:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f304:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f308:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f30c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f310:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f314:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f318:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f31c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f320:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f324:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f328:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f32c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f330:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f334:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f338:	e005      	b.n	800f346 <kalman_3gyro.constprop.0+0x282e>
 800f33a:	3501      	adds	r5, #1
 800f33c:	2d0c      	cmp	r5, #12
 800f33e:	f104 0404 	add.w	r4, r4, #4
 800f342:	f000 84fe 	beq.w	800fd42 <kalman_3gyro.constprop.0+0x322a>
 800f346:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d0f5      	beq.n	800f33a <kalman_3gyro.constprop.0+0x2822>
 800f34e:	edd4 da00 	vldr	s27, [r4]
 800f352:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f356:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f35a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f35e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f362:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f366:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f36a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f36e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	ed89 8a00 	vstr	s16, [r9]
 800f378:	ed89 8a01 	vstr	s16, [r9, #4]
 800f37c:	ed89 8a02 	vstr	s16, [r9, #8]
 800f380:	ed89 8a03 	vstr	s16, [r9, #12]
 800f384:	ed89 8a04 	vstr	s16, [r9, #16]
 800f388:	ed89 8a05 	vstr	s16, [r9, #20]
 800f38c:	ed89 8a06 	vstr	s16, [r9, #24]
 800f390:	ed89 8a07 	vstr	s16, [r9, #28]
 800f394:	ed89 8a08 	vstr	s16, [r9, #32]
 800f398:	464e      	mov	r6, r9
 800f39a:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f39e:	464a      	mov	r2, r9
 800f3a0:	ecb3 7a01 	vldmia	r3!, {s14}
 800f3a4:	ecf2 7a01 	vldmia	r2!, {s15}
 800f3a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b0:	d006      	beq.n	800f3c0 <kalman_3gyro.constprop.0+0x28a8>
 800f3b2:	eef5 da40 	vcmp.f32	s27, #0.0
 800f3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ba:	bf18      	it	ne
 800f3bc:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f3c0:	ed93 7a08 	vldr	s14, [r3, #32]
 800f3c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3cc:	d006      	beq.n	800f3dc <kalman_3gyro.constprop.0+0x28c4>
 800f3ce:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d6:	bf18      	it	ne
 800f3d8:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f3dc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f3e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e8:	d006      	beq.n	800f3f8 <kalman_3gyro.constprop.0+0x28e0>
 800f3ea:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	bf18      	it	ne
 800f3f4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f3f8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f3fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f404:	d006      	beq.n	800f414 <kalman_3gyro.constprop.0+0x28fc>
 800f406:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40e:	bf18      	it	ne
 800f410:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f414:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f418:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	d006      	beq.n	800f430 <kalman_3gyro.constprop.0+0x2918>
 800f422:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42a:	bf18      	it	ne
 800f42c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f430:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f434:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	d006      	beq.n	800f44c <kalman_3gyro.constprop.0+0x2934>
 800f43e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f446:	bf18      	it	ne
 800f448:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f44c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f450:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f458:	d006      	beq.n	800f468 <kalman_3gyro.constprop.0+0x2950>
 800f45a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f462:	bf18      	it	ne
 800f464:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f468:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f46c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f474:	d006      	beq.n	800f484 <kalman_3gyro.constprop.0+0x296c>
 800f476:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47e:	bf18      	it	ne
 800f480:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f484:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f488:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	d006      	beq.n	800f4a0 <kalman_3gyro.constprop.0+0x2988>
 800f492:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49a:	bf18      	it	ne
 800f49c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f4a0:	428b      	cmp	r3, r1
 800f4a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f4a6:	f47f af7b 	bne.w	800f3a0 <kalman_3gyro.constprop.0+0x2888>
 800f4aa:	eef5 da40 	vcmp.f32	s27, #0.0
 800f4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b2:	edd9 8a00 	vldr	s17, [r9]
 800f4b6:	f040 8543 	bne.w	800ff40 <kalman_3gyro.constprop.0+0x3428>
 800f4ba:	eef0 7a6d 	vmov.f32	s15, s27
 800f4be:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c6:	ed99 9a01 	vldr	s18, [r9, #4]
 800f4ca:	d006      	beq.n	800f4da <kalman_3gyro.constprop.0+0x29c2>
 800f4cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	bf18      	it	ne
 800f4d6:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f4da:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	edd9 aa02 	vldr	s21, [r9, #8]
 800f4e6:	d006      	beq.n	800f4f6 <kalman_3gyro.constprop.0+0x29de>
 800f4e8:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f0:	bf18      	it	ne
 800f4f2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f4f6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	edd9 ba03 	vldr	s23, [r9, #12]
 800f502:	d006      	beq.n	800f512 <kalman_3gyro.constprop.0+0x29fa>
 800f504:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50c:	bf18      	it	ne
 800f50e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f512:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51a:	edd9 ca04 	vldr	s25, [r9, #16]
 800f51e:	d006      	beq.n	800f52e <kalman_3gyro.constprop.0+0x2a16>
 800f520:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	bf18      	it	ne
 800f52a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f52e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f536:	ed99 ca05 	vldr	s24, [r9, #20]
 800f53a:	d006      	beq.n	800f54a <kalman_3gyro.constprop.0+0x2a32>
 800f53c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	bf18      	it	ne
 800f546:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f54a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	ed99 da06 	vldr	s26, [r9, #24]
 800f556:	d006      	beq.n	800f566 <kalman_3gyro.constprop.0+0x2a4e>
 800f558:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	bf18      	it	ne
 800f562:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f566:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	ed99 aa07 	vldr	s20, [r9, #28]
 800f572:	d006      	beq.n	800f582 <kalman_3gyro.constprop.0+0x2a6a>
 800f574:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57c:	bf18      	it	ne
 800f57e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f582:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	ed99 ba08 	vldr	s22, [r9, #32]
 800f58e:	d006      	beq.n	800f59e <kalman_3gyro.constprop.0+0x2a86>
 800f590:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	bf18      	it	ne
 800f59a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f59e:	ab87      	add	r3, sp, #540	; 0x21c
 800f5a0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f5a4:	ed92 7a00 	vldr	s14, [r2]
 800f5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f5ac:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f5b0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f5b4:	2d05      	cmp	r5, #5
 800f5b6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f5ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f5be:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f5c2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f5c6:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f5ca:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f5ce:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f5d2:	ee2d da27 	vmul.f32	s26, s26, s15
 800f5d6:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f5da:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f5de:	edc9 8a00 	vstr	s17, [r9]
 800f5e2:	ed89 9a01 	vstr	s18, [r9, #4]
 800f5e6:	edc9 aa02 	vstr	s21, [r9, #8]
 800f5ea:	edc9 ba03 	vstr	s23, [r9, #12]
 800f5ee:	edc9 ca04 	vstr	s25, [r9, #16]
 800f5f2:	ed89 ca05 	vstr	s24, [r9, #20]
 800f5f6:	ed89 da06 	vstr	s26, [r9, #24]
 800f5fa:	ed89 aa07 	vstr	s20, [r9, #28]
 800f5fe:	ed89 ba08 	vstr	s22, [r9, #32]
 800f602:	f340 8497 	ble.w	800ff34 <kalman_3gyro.constprop.0+0x341c>
 800f606:	eef5 da40 	vcmp.f32	s27, #0.0
 800f60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60e:	f000 8510 	beq.w	8010032 <kalman_3gyro.constprop.0+0x351a>
 800f612:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61e:	d001      	beq.n	800f624 <kalman_3gyro.constprop.0+0x2b0c>
 800f620:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f624:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62c:	d008      	beq.n	800f640 <kalman_3gyro.constprop.0+0x2b28>
 800f62e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f632:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63a:	bf18      	it	ne
 800f63c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f640:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f648:	d008      	beq.n	800f65c <kalman_3gyro.constprop.0+0x2b44>
 800f64a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f64e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f656:	bf18      	it	ne
 800f658:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f65c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f664:	d008      	beq.n	800f678 <kalman_3gyro.constprop.0+0x2b60>
 800f666:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f66a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f672:	bf18      	it	ne
 800f674:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f678:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f680:	d008      	beq.n	800f694 <kalman_3gyro.constprop.0+0x2b7c>
 800f682:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f686:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68e:	bf18      	it	ne
 800f690:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f694:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69c:	d008      	beq.n	800f6b0 <kalman_3gyro.constprop.0+0x2b98>
 800f69e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f6a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6aa:	bf18      	it	ne
 800f6ac:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f6b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b8:	d008      	beq.n	800f6cc <kalman_3gyro.constprop.0+0x2bb4>
 800f6ba:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f6be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c6:	bf18      	it	ne
 800f6c8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f6cc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d4:	d008      	beq.n	800f6e8 <kalman_3gyro.constprop.0+0x2bd0>
 800f6d6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f6da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e2:	bf18      	it	ne
 800f6e4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f6e8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f0:	d008      	beq.n	800f704 <kalman_3gyro.constprop.0+0x2bec>
 800f6f2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f6f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fe:	bf18      	it	ne
 800f700:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f704:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f706:	4413      	add	r3, r2
 800f708:	edd3 9a00 	vldr	s19, [r3]
 800f70c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f710:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f714:	2100      	movs	r1, #0
 800f716:	4650      	mov	r0, sl
 800f718:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f71c:	edcd 5a04 	vstr	s11, [sp, #16]
 800f720:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f724:	edcd 6a02 	vstr	s13, [sp, #8]
 800f728:	f008 f828 	bl	801777c <memset>
 800f72c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f730:	eddd 5a04 	vldr	s11, [sp, #16]
 800f734:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f738:	eddd 6a02 	vldr	s13, [sp, #8]
 800f73c:	4651      	mov	r1, sl
 800f73e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f742:	4653      	mov	r3, sl
 800f744:	ecf6 7a01 	vldmia	r6!, {s15}
 800f748:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f750:	d062      	beq.n	800f818 <kalman_3gyro.constprop.0+0x2d00>
 800f752:	eef5 da40 	vcmp.f32	s27, #0.0
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	d005      	beq.n	800f768 <kalman_3gyro.constprop.0+0x2c50>
 800f75c:	ed93 7a00 	vldr	s14, [r3]
 800f760:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f764:	ed83 7a00 	vstr	s14, [r3]
 800f768:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f770:	d005      	beq.n	800f77e <kalman_3gyro.constprop.0+0x2c66>
 800f772:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f776:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f77a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f77e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f786:	d005      	beq.n	800f794 <kalman_3gyro.constprop.0+0x2c7c>
 800f788:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f78c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f790:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f794:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79c:	d005      	beq.n	800f7aa <kalman_3gyro.constprop.0+0x2c92>
 800f79e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f7a2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f7a6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f7aa:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b2:	d005      	beq.n	800f7c0 <kalman_3gyro.constprop.0+0x2ca8>
 800f7b4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f7b8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f7bc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f7c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c8:	d005      	beq.n	800f7d6 <kalman_3gyro.constprop.0+0x2cbe>
 800f7ca:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f7ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7d2:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f7d6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7de:	d005      	beq.n	800f7ec <kalman_3gyro.constprop.0+0x2cd4>
 800f7e0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f7e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f7e8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f7ec:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f4:	d005      	beq.n	800f802 <kalman_3gyro.constprop.0+0x2cea>
 800f7f6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f7fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f7fe:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f802:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80a:	d005      	beq.n	800f818 <kalman_3gyro.constprop.0+0x2d00>
 800f80c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f810:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f814:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f818:	4296      	cmp	r6, r2
 800f81a:	f103 0304 	add.w	r3, r3, #4
 800f81e:	d191      	bne.n	800f744 <kalman_3gyro.constprop.0+0x2c2c>
 800f820:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f824:	4656      	mov	r6, sl
 800f826:	463b      	mov	r3, r7
 800f828:	2208      	movs	r2, #8
 800f82a:	2000      	movs	r0, #0
 800f82c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f830:	e074      	b.n	800f91c <kalman_3gyro.constprop.0+0x2e04>
 800f832:	edd6 7a00 	vldr	s15, [r6]
 800f836:	ed83 8a01 	vstr	s16, [r3, #4]
 800f83a:	eef1 7a67 	vneg.f32	s15, s15
 800f83e:	2801      	cmp	r0, #1
 800f840:	edc6 7a00 	vstr	s15, [r6]
 800f844:	f1a2 0c07 	sub.w	ip, r2, #7
 800f848:	f000 831e 	beq.w	800fe88 <kalman_3gyro.constprop.0+0x3370>
 800f84c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f850:	eddc 7a00 	vldr	s15, [ip]
 800f854:	ed83 8a02 	vstr	s16, [r3, #8]
 800f858:	eef1 7a67 	vneg.f32	s15, s15
 800f85c:	2802      	cmp	r0, #2
 800f85e:	edcc 7a00 	vstr	s15, [ip]
 800f862:	f1a2 0c06 	sub.w	ip, r2, #6
 800f866:	f000 82f8 	beq.w	800fe5a <kalman_3gyro.constprop.0+0x3342>
 800f86a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f86e:	eddc 7a00 	vldr	s15, [ip]
 800f872:	ed83 8a03 	vstr	s16, [r3, #12]
 800f876:	eef1 7a67 	vneg.f32	s15, s15
 800f87a:	2803      	cmp	r0, #3
 800f87c:	edcc 7a00 	vstr	s15, [ip]
 800f880:	f1a2 0c05 	sub.w	ip, r2, #5
 800f884:	d170      	bne.n	800f968 <kalman_3gyro.constprop.0+0x2e50>
 800f886:	edd6 7a03 	vldr	s15, [r6, #12]
 800f88a:	ed83 8a04 	vstr	s16, [r3, #16]
 800f88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f892:	f1a2 0e04 	sub.w	lr, r2, #4
 800f896:	edc6 7a03 	vstr	s15, [r6, #12]
 800f89a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f89e:	edde 7a00 	vldr	s15, [lr]
 800f8a2:	ed83 8a05 	vstr	s16, [r3, #20]
 800f8a6:	eef1 7a67 	vneg.f32	s15, s15
 800f8aa:	f1a2 0c03 	sub.w	ip, r2, #3
 800f8ae:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f8b2:	edce 7a00 	vstr	s15, [lr]
 800f8b6:	eddc 7a00 	vldr	s15, [ip]
 800f8ba:	ed83 8a06 	vstr	s16, [r3, #24]
 800f8be:	eef1 7a67 	vneg.f32	s15, s15
 800f8c2:	edcc 7a00 	vstr	s15, [ip]
 800f8c6:	f1a2 0c02 	sub.w	ip, r2, #2
 800f8ca:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f8ce:	eddc 7a00 	vldr	s15, [ip]
 800f8d2:	ed83 8a07 	vstr	s16, [r3, #28]
 800f8d6:	eef1 7a67 	vneg.f32	s15, s15
 800f8da:	2807      	cmp	r0, #7
 800f8dc:	edcc 7a00 	vstr	s15, [ip]
 800f8e0:	f102 3cff 	add.w	ip, r2, #4294967295
 800f8e4:	f040 80a2 	bne.w	800fa2c <kalman_3gyro.constprop.0+0x2f14>
 800f8e8:	edd6 7a07 	vldr	s15, [r6, #28]
 800f8ec:	ed83 8a08 	vstr	s16, [r3, #32]
 800f8f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8f4:	edc6 7a07 	vstr	s15, [r6, #28]
 800f8f8:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f8fc:	eddc 7a00 	vldr	s15, [ip]
 800f900:	3001      	adds	r0, #1
 800f902:	eef1 7a67 	vneg.f32	s15, s15
 800f906:	2809      	cmp	r0, #9
 800f908:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f90c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f910:	f102 0209 	add.w	r2, r2, #9
 800f914:	edcc 7a00 	vstr	s15, [ip]
 800f918:	f000 809f 	beq.w	800fa5a <kalman_3gyro.constprop.0+0x2f42>
 800f91c:	ed83 8a00 	vstr	s16, [r3]
 800f920:	2800      	cmp	r0, #0
 800f922:	d186      	bne.n	800f832 <kalman_3gyro.constprop.0+0x2d1a>
 800f924:	edda 7a00 	vldr	s15, [sl]
 800f928:	ed83 8a01 	vstr	s16, [r3, #4]
 800f92c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f930:	f1a2 0e07 	sub.w	lr, r2, #7
 800f934:	edc6 7a00 	vstr	s15, [r6]
 800f938:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f93c:	edde 7a00 	vldr	s15, [lr]
 800f940:	ed83 8a02 	vstr	s16, [r3, #8]
 800f944:	eef1 7a67 	vneg.f32	s15, s15
 800f948:	f1a2 0c06 	sub.w	ip, r2, #6
 800f94c:	edce 7a00 	vstr	s15, [lr]
 800f950:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f954:	eddc 7a00 	vldr	s15, [ip]
 800f958:	ed83 8a03 	vstr	s16, [r3, #12]
 800f95c:	eef1 7a67 	vneg.f32	s15, s15
 800f960:	edcc 7a00 	vstr	s15, [ip]
 800f964:	f1a2 0c05 	sub.w	ip, r2, #5
 800f968:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f96c:	eddc 7a00 	vldr	s15, [ip]
 800f970:	ed83 8a04 	vstr	s16, [r3, #16]
 800f974:	eef1 7a67 	vneg.f32	s15, s15
 800f978:	2804      	cmp	r0, #4
 800f97a:	edcc 7a00 	vstr	s15, [ip]
 800f97e:	f1a2 0c04 	sub.w	ip, r2, #4
 800f982:	d031      	beq.n	800f9e8 <kalman_3gyro.constprop.0+0x2ed0>
 800f984:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f988:	eddc 7a00 	vldr	s15, [ip]
 800f98c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f990:	eef1 7a67 	vneg.f32	s15, s15
 800f994:	2805      	cmp	r0, #5
 800f996:	edcc 7a00 	vstr	s15, [ip]
 800f99a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f99e:	f000 8245 	beq.w	800fe2c <kalman_3gyro.constprop.0+0x3314>
 800f9a2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9a6:	eddc 7a00 	vldr	s15, [ip]
 800f9aa:	ed83 8a06 	vstr	s16, [r3, #24]
 800f9ae:	eef1 7a67 	vneg.f32	s15, s15
 800f9b2:	2806      	cmp	r0, #6
 800f9b4:	edcc 7a00 	vstr	s15, [ip]
 800f9b8:	f1a2 0c02 	sub.w	ip, r2, #2
 800f9bc:	d185      	bne.n	800f8ca <kalman_3gyro.constprop.0+0x2db2>
 800f9be:	edd6 7a06 	vldr	s15, [r6, #24]
 800f9c2:	ed83 8a07 	vstr	s16, [r3, #28]
 800f9c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9ca:	f102 3cff 	add.w	ip, r2, #4294967295
 800f9ce:	edc6 7a06 	vstr	s15, [r6, #24]
 800f9d2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9d6:	eddc 7a00 	vldr	s15, [ip]
 800f9da:	ed83 8a08 	vstr	s16, [r3, #32]
 800f9de:	eef1 7a67 	vneg.f32	s15, s15
 800f9e2:	edcc 7a00 	vstr	s15, [ip]
 800f9e6:	e787      	b.n	800f8f8 <kalman_3gyro.constprop.0+0x2de0>
 800f9e8:	edd6 7a04 	vldr	s15, [r6, #16]
 800f9ec:	ed83 8a05 	vstr	s16, [r3, #20]
 800f9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9f4:	f1a2 0e03 	sub.w	lr, r2, #3
 800f9f8:	edc6 7a04 	vstr	s15, [r6, #16]
 800f9fc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fa00:	edde 7a00 	vldr	s15, [lr]
 800fa04:	ed83 8a06 	vstr	s16, [r3, #24]
 800fa08:	eef1 7a67 	vneg.f32	s15, s15
 800fa0c:	f1a2 0c02 	sub.w	ip, r2, #2
 800fa10:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa14:	edce 7a00 	vstr	s15, [lr]
 800fa18:	eddc 7a00 	vldr	s15, [ip]
 800fa1c:	ed83 8a07 	vstr	s16, [r3, #28]
 800fa20:	eef1 7a67 	vneg.f32	s15, s15
 800fa24:	edcc 7a00 	vstr	s15, [ip]
 800fa28:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa2c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa30:	eddc 7a00 	vldr	s15, [ip]
 800fa34:	ed83 8a08 	vstr	s16, [r3, #32]
 800fa38:	eef1 7a67 	vneg.f32	s15, s15
 800fa3c:	2808      	cmp	r0, #8
 800fa3e:	edcc 7a00 	vstr	s15, [ip]
 800fa42:	f47f af59 	bne.w	800f8f8 <kalman_3gyro.constprop.0+0x2de0>
 800fa46:	ed96 7a08 	vldr	s14, [r6, #32]
 800fa4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa52:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fa56:	edc2 7a00 	vstr	s15, [r2]
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fa60:	ecb1 3a01 	vldmia	r1!, {s6}
 800fa64:	edd1 3a08 	vldr	s7, [r1, #32]
 800fa68:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fa6c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fa70:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fa74:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fa78:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fa7c:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fa80:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fa84:	465a      	mov	r2, fp
 800fa86:	463b      	mov	r3, r7
 800fa88:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa90:	d00c      	beq.n	800faac <kalman_3gyro.constprop.0+0x2f94>
 800fa92:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fa96:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9e:	d005      	beq.n	800faac <kalman_3gyro.constprop.0+0x2f94>
 800faa0:	edd3 7a00 	vldr	s15, [r3]
 800faa4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800faa8:	edc3 7a00 	vstr	s15, [r3]
 800faac:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab4:	d00c      	beq.n	800fad0 <kalman_3gyro.constprop.0+0x2fb8>
 800fab6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800faba:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	d005      	beq.n	800fad0 <kalman_3gyro.constprop.0+0x2fb8>
 800fac4:	edd3 7a00 	vldr	s15, [r3]
 800fac8:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800facc:	edc3 7a00 	vstr	s15, [r3]
 800fad0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad8:	d00c      	beq.n	800faf4 <kalman_3gyro.constprop.0+0x2fdc>
 800fada:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fade:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae6:	d005      	beq.n	800faf4 <kalman_3gyro.constprop.0+0x2fdc>
 800fae8:	edd3 7a00 	vldr	s15, [r3]
 800faec:	eee4 7a22 	vfma.f32	s15, s8, s5
 800faf0:	edc3 7a00 	vstr	s15, [r3]
 800faf4:	eef5 4a40 	vcmp.f32	s9, #0.0
 800faf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafc:	d00c      	beq.n	800fb18 <kalman_3gyro.constprop.0+0x3000>
 800fafe:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fb02:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0a:	d005      	beq.n	800fb18 <kalman_3gyro.constprop.0+0x3000>
 800fb0c:	edd3 7a00 	vldr	s15, [r3]
 800fb10:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fb14:	edc3 7a00 	vstr	s15, [r3]
 800fb18:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb20:	d00c      	beq.n	800fb3c <kalman_3gyro.constprop.0+0x3024>
 800fb22:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fb26:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb2e:	d005      	beq.n	800fb3c <kalman_3gyro.constprop.0+0x3024>
 800fb30:	edd3 7a00 	vldr	s15, [r3]
 800fb34:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fb38:	edc3 7a00 	vstr	s15, [r3]
 800fb3c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb44:	d00c      	beq.n	800fb60 <kalman_3gyro.constprop.0+0x3048>
 800fb46:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fb4a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb52:	d005      	beq.n	800fb60 <kalman_3gyro.constprop.0+0x3048>
 800fb54:	edd3 7a00 	vldr	s15, [r3]
 800fb58:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fb5c:	edc3 7a00 	vstr	s15, [r3]
 800fb60:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb68:	d00c      	beq.n	800fb84 <kalman_3gyro.constprop.0+0x306c>
 800fb6a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fb6e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	d005      	beq.n	800fb84 <kalman_3gyro.constprop.0+0x306c>
 800fb78:	edd3 7a00 	vldr	s15, [r3]
 800fb7c:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fb80:	edc3 7a00 	vstr	s15, [r3]
 800fb84:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8c:	d00c      	beq.n	800fba8 <kalman_3gyro.constprop.0+0x3090>
 800fb8e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fb92:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9a:	d005      	beq.n	800fba8 <kalman_3gyro.constprop.0+0x3090>
 800fb9c:	edd3 7a00 	vldr	s15, [r3]
 800fba0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fba4:	edc3 7a00 	vstr	s15, [r3]
 800fba8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb0:	d00c      	beq.n	800fbcc <kalman_3gyro.constprop.0+0x30b4>
 800fbb2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fbb6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbe:	d005      	beq.n	800fbcc <kalman_3gyro.constprop.0+0x30b4>
 800fbc0:	edd3 7a00 	vldr	s15, [r3]
 800fbc4:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fbc8:	edc3 7a00 	vstr	s15, [r3]
 800fbcc:	3224      	adds	r2, #36	; 0x24
 800fbce:	4296      	cmp	r6, r2
 800fbd0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fbd4:	f47f af58 	bne.w	800fa88 <kalman_3gyro.constprop.0+0x2f70>
 800fbd8:	3001      	adds	r0, #1
 800fbda:	2809      	cmp	r0, #9
 800fbdc:	f107 0704 	add.w	r7, r7, #4
 800fbe0:	f47f af3e 	bne.w	800fa60 <kalman_3gyro.constprop.0+0x2f48>
 800fbe4:	9801      	ldr	r0, [sp, #4]
 800fbe6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fbea:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fbee:	f007 fd9d 	bl	801772c <memcpy>
 800fbf2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfa:	f000 817c 	beq.w	800fef6 <kalman_3gyro.constprop.0+0x33de>
 800fbfe:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc06:	f000 8176 	beq.w	800fef6 <kalman_3gyro.constprop.0+0x33de>
 800fc0a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc12:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fc16:	f040 8212 	bne.w	801003e <kalman_3gyro.constprop.0+0x3526>
 800fc1a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc22:	f000 8177 	beq.w	800ff14 <kalman_3gyro.constprop.0+0x33fc>
 800fc26:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fc32:	f040 81cb 	bne.w	800ffcc <kalman_3gyro.constprop.0+0x34b4>
 800fc36:	eef0 ba47 	vmov.f32	s23, s14
 800fc3a:	eef0 aa49 	vmov.f32	s21, s18
 800fc3e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	f000 8138 	beq.w	800feba <kalman_3gyro.constprop.0+0x33a2>
 800fc4a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc52:	f000 824e 	beq.w	80100f2 <kalman_3gyro.constprop.0+0x35da>
 800fc56:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fc62:	eef0 7a48 	vmov.f32	s15, s16
 800fc66:	f040 81c5 	bne.w	800fff4 <kalman_3gyro.constprop.0+0x34dc>
 800fc6a:	eeb0 ca47 	vmov.f32	s24, s14
 800fc6e:	eef0 ca67 	vmov.f32	s25, s15
 800fc72:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7a:	f000 8179 	beq.w	800ff70 <kalman_3gyro.constprop.0+0x3458>
 800fc7e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc86:	f000 8125 	beq.w	800fed4 <kalman_3gyro.constprop.0+0x33bc>
 800fc8a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc92:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fc96:	eef0 7a48 	vmov.f32	s15, s16
 800fc9a:	f040 81be 	bne.w	801001a <kalman_3gyro.constprop.0+0x3502>
 800fc9e:	eeb0 aa47 	vmov.f32	s20, s14
 800fca2:	eeb0 da67 	vmov.f32	s26, s15
 800fca6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcae:	f000 811f 	beq.w	800fef0 <kalman_3gyro.constprop.0+0x33d8>
 800fcb2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcba:	f000 821d 	beq.w	80100f8 <kalman_3gyro.constprop.0+0x35e0>
 800fcbe:	eef0 7a48 	vmov.f32	s15, s16
 800fcc2:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fcc6:	eef0 9a67 	vmov.f32	s19, s15
 800fcca:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fcce:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fcd2:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fcd6:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fcda:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fcde:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fce2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fce6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fcea:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fcee:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fcf2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fcf6:	ee74 baab 	vadd.f32	s23, s9, s23
 800fcfa:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fcfe:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fd02:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fd06:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fd0a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fd0e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fd12:	3501      	adds	r5, #1
 800fd14:	2d0c      	cmp	r5, #12
 800fd16:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fd1a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fd1e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fd22:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fd26:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fd2a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fd2e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800fd32:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800fd36:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fd3a:	f104 0404 	add.w	r4, r4, #4
 800fd3e:	f47f ab02 	bne.w	800f346 <kalman_3gyro.constprop.0+0x282e>
 800fd42:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fd46:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fd4a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fd4e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800fd52:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fd56:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fd5a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fd5e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd66:	f100 81b5 	bmi.w	80100d4 <kalman_3gyro.constprop.0+0x35bc>
 800fd6a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800fd6e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8010100 <kalman_3gyro.constprop.0+0x35e8>
 800fd72:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800fd76:	ee67 4a86 	vmul.f32	s9, s15, s12
 800fd7a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800fd7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd82:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fd86:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800fd8a:	aa36      	add	r2, sp, #216	; 0xd8
 800fd8c:	edc3 4a00 	vstr	s9, [r3]
 800fd90:	edc3 5a01 	vstr	s11, [r3, #4]
 800fd94:	edc3 7a02 	vstr	s15, [r3, #8]
 800fd98:	ed83 5a03 	vstr	s10, [r3, #12]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	4611      	mov	r1, r2
 800fda0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800fda4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800fda8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800fdac:	f7fb fdbc 	bl	800b928 <qmult>
 800fdb0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800fdb4:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800fdb8:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800fdbc:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800fdc0:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800fdc4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fdc6:	ee66 7a06 	vmul.f32	s15, s12, s12
 800fdca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800fdce:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fdd2:	ae54      	add	r6, sp, #336	; 0x150
 800fdd4:	af5c      	add	r7, sp, #368	; 0x170
 800fdd6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fdda:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fdde:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800fde2:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800fde6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800fdea:	ee26 6a27 	vmul.f32	s12, s12, s15
 800fdee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fdf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fdf6:	edc3 5a00 	vstr	s11, [r3]
 800fdfa:	ed83 6a01 	vstr	s12, [r3, #4]
 800fdfe:	edc3 6a02 	vstr	s13, [r3, #8]
 800fe02:	ed83 7a03 	vstr	s14, [r3, #12]
 800fe06:	4634      	mov	r4, r6
 800fe08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe0a:	42bc      	cmp	r4, r7
 800fe0c:	6028      	str	r0, [r5, #0]
 800fe0e:	6069      	str	r1, [r5, #4]
 800fe10:	60aa      	str	r2, [r5, #8]
 800fe12:	60eb      	str	r3, [r5, #12]
 800fe14:	4626      	mov	r6, r4
 800fe16:	f105 0510 	add.w	r5, r5, #16
 800fe1a:	d1f4      	bne.n	800fe06 <kalman_3gyro.constprop.0+0x32ee>
 800fe1c:	6820      	ldr	r0, [r4, #0]
 800fe1e:	6028      	str	r0, [r5, #0]
 800fe20:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800fe24:	ecbd 8b10 	vpop	{d8-d15}
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	edd6 7a05 	vldr	s15, [r6, #20]
 800fe30:	ed83 8a06 	vstr	s16, [r3, #24]
 800fe34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe38:	f1a2 0e02 	sub.w	lr, r2, #2
 800fe3c:	edc6 7a05 	vstr	s15, [r6, #20]
 800fe40:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fe44:	edde 7a00 	vldr	s15, [lr]
 800fe48:	ed83 8a07 	vstr	s16, [r3, #28]
 800fe4c:	eef1 7a67 	vneg.f32	s15, s15
 800fe50:	f102 3cff 	add.w	ip, r2, #4294967295
 800fe54:	edce 7a00 	vstr	s15, [lr]
 800fe58:	e5bb      	b.n	800f9d2 <kalman_3gyro.constprop.0+0x2eba>
 800fe5a:	edd6 7a02 	vldr	s15, [r6, #8]
 800fe5e:	ed83 8a03 	vstr	s16, [r3, #12]
 800fe62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe66:	f1a2 0c05 	sub.w	ip, r2, #5
 800fe6a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fe6e:	edc6 7a02 	vstr	s15, [r6, #8]
 800fe72:	eddc 7a00 	vldr	s15, [ip]
 800fe76:	ed83 8a04 	vstr	s16, [r3, #16]
 800fe7a:	eef1 7a67 	vneg.f32	s15, s15
 800fe7e:	edcc 7a00 	vstr	s15, [ip]
 800fe82:	f1a2 0c04 	sub.w	ip, r2, #4
 800fe86:	e57d      	b.n	800f984 <kalman_3gyro.constprop.0+0x2e6c>
 800fe88:	edd6 7a01 	vldr	s15, [r6, #4]
 800fe8c:	ed83 8a02 	vstr	s16, [r3, #8]
 800fe90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe94:	f1a2 0c06 	sub.w	ip, r2, #6
 800fe98:	edc6 7a01 	vstr	s15, [r6, #4]
 800fe9c:	e558      	b.n	800f950 <kalman_3gyro.constprop.0+0x2e38>
 800fe9e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	ee69 7aab 	vmul.f32	s15, s19, s23
 800feaa:	eeb0 7a48 	vmov.f32	s14, s16
 800feae:	f040 8097 	bne.w	800ffe0 <kalman_3gyro.constprop.0+0x34c8>
 800feb2:	eef0 ca67 	vmov.f32	s25, s15
 800feb6:	eef0 ba47 	vmov.f32	s23, s14
 800feba:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800febe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec2:	f43f aed6 	beq.w	800fc72 <kalman_3gyro.constprop.0+0x315a>
 800fec6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800feca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fece:	d142      	bne.n	800ff56 <kalman_3gyro.constprop.0+0x343e>
 800fed0:	eeb0 ca69 	vmov.f32	s24, s19
 800fed4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fedc:	f040 80ba 	bne.w	8010054 <kalman_3gyro.constprop.0+0x353c>
 800fee0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee8:	eeb0 da4a 	vmov.f32	s26, s20
 800feec:	f47f aee1 	bne.w	800fcb2 <kalman_3gyro.constprop.0+0x319a>
 800fef0:	eef0 9a4b 	vmov.f32	s19, s22
 800fef4:	e6e9      	b.n	800fcca <kalman_3gyro.constprop.0+0x31b2>
 800fef6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefe:	d051      	beq.n	800ffa4 <kalman_3gyro.constprop.0+0x348c>
 800ff00:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ff04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff08:	f040 8097 	bne.w	801003a <kalman_3gyro.constprop.0+0x3522>
 800ff0c:	eef0 aa69 	vmov.f32	s21, s19
 800ff10:	eef0 8a69 	vmov.f32	s17, s19
 800ff14:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ff18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1c:	f43f ae8f 	beq.w	800fc3e <kalman_3gyro.constprop.0+0x3126>
 800ff20:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ff24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff28:	d1b9      	bne.n	800fe9e <kalman_3gyro.constprop.0+0x3386>
 800ff2a:	eef0 ca69 	vmov.f32	s25, s19
 800ff2e:	eef0 ba69 	vmov.f32	s23, s19
 800ff32:	e7c2      	b.n	800feba <kalman_3gyro.constprop.0+0x33a2>
 800ff34:	aa7b      	add	r2, sp, #492	; 0x1ec
 800ff36:	4413      	add	r3, r2
 800ff38:	edd3 9a00 	vldr	s19, [r3]
 800ff3c:	f7ff bbe8 	b.w	800f710 <kalman_3gyro.constprop.0+0x2bf8>
 800ff40:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ff44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff48:	bf14      	ite	ne
 800ff4a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800ff4e:	eef0 7a68 	vmoveq.f32	s15, s17
 800ff52:	f7ff bab4 	b.w	800f4be <kalman_3gyro.constprop.0+0x29a6>
 800ff56:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ff5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800ff62:	eeb0 7a48 	vmov.f32	s14, s16
 800ff66:	d14e      	bne.n	8010006 <kalman_3gyro.constprop.0+0x34ee>
 800ff68:	eeb0 da67 	vmov.f32	s26, s15
 800ff6c:	eeb0 ca47 	vmov.f32	s24, s14
 800ff70:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ff74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff78:	f43f ae95 	beq.w	800fca6 <kalman_3gyro.constprop.0+0x318e>
 800ff7c:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	f000 84bd 	beq.w	8010902 <kalman_3gyro.constprop.0+0x3dea>
 800ff88:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ff8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff90:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800ff94:	eeb0 7a48 	vmov.f32	s14, s16
 800ff98:	d148      	bne.n	801002c <kalman_3gyro.constprop.0+0x3514>
 800ff9a:	eef0 9a67 	vmov.f32	s19, s15
 800ff9e:	eeb0 aa47 	vmov.f32	s20, s14
 800ffa2:	e692      	b.n	800fcca <kalman_3gyro.constprop.0+0x31b2>
 800ffa4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	d05b      	beq.n	8010066 <kalman_3gyro.constprop.0+0x354e>
 800ffae:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ffb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb6:	d0a9      	beq.n	800ff0c <kalman_3gyro.constprop.0+0x33f4>
 800ffb8:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ffbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc0:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800ffc4:	eef0 8a49 	vmov.f32	s17, s18
 800ffc8:	f43f ae35 	beq.w	800fc36 <kalman_3gyro.constprop.0+0x311e>
 800ffcc:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ffd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd4:	ee69 7aab 	vmul.f32	s15, s19, s23
 800ffd8:	eef0 aa49 	vmov.f32	s21, s18
 800ffdc:	f43f af69 	beq.w	800feb2 <kalman_3gyro.constprop.0+0x339a>
 800ffe0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe8:	eef0 ba47 	vmov.f32	s23, s14
 800ffec:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fff0:	f43f ae3b 	beq.w	800fc6a <kalman_3gyro.constprop.0+0x3152>
 800fff4:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffc:	eef0 ca67 	vmov.f32	s25, s15
 8010000:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8010004:	d0b0      	beq.n	800ff68 <kalman_3gyro.constprop.0+0x3450>
 8010006:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801000e:	eeb0 ca47 	vmov.f32	s24, s14
 8010012:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8010016:	f43f ae42 	beq.w	800fc9e <kalman_3gyro.constprop.0+0x3186>
 801001a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801001e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010022:	eeb0 da67 	vmov.f32	s26, s15
 8010026:	ee69 7a8a 	vmul.f32	s15, s19, s20
 801002a:	d0b6      	beq.n	800ff9a <kalman_3gyro.constprop.0+0x3482>
 801002c:	eeb0 aa47 	vmov.f32	s20, s14
 8010030:	e647      	b.n	800fcc2 <kalman_3gyro.constprop.0+0x31aa>
 8010032:	eef0 7a6d 	vmov.f32	s15, s27
 8010036:	f7ff baf5 	b.w	800f624 <kalman_3gyro.constprop.0+0x2b0c>
 801003a:	eef0 8a48 	vmov.f32	s17, s16
 801003e:	eef5 aa40 	vcmp.f32	s21, #0.0
 8010042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010046:	ee29 9a29 	vmul.f32	s18, s18, s19
 801004a:	f47f adec 	bne.w	800fc26 <kalman_3gyro.constprop.0+0x310e>
 801004e:	eef0 aa49 	vmov.f32	s21, s18
 8010052:	e75f      	b.n	800ff14 <kalman_3gyro.constprop.0+0x33fc>
 8010054:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8010100 <kalman_3gyro.constprop.0+0x35e8>
 8010058:	eef0 9a48 	vmov.f32	s19, s16
 801005c:	eeb0 aa48 	vmov.f32	s20, s16
 8010060:	eeb0 da48 	vmov.f32	s26, s16
 8010064:	e631      	b.n	800fcca <kalman_3gyro.constprop.0+0x31b2>
 8010066:	eef0 8a6a 	vmov.f32	s17, s21
 801006a:	e753      	b.n	800ff14 <kalman_3gyro.constprop.0+0x33fc>
 801006c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8010070:	2a31      	cmp	r2, #49	; 0x31
 8010072:	f63f a8a3 	bhi.w	800f1bc <kalman_3gyro.constprop.0+0x26a4>
 8010076:	2100      	movs	r1, #0
 8010078:	3201      	adds	r2, #1
 801007a:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801007e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8010082:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8010086:	f7ff b899 	b.w	800f1bc <kalman_3gyro.constprop.0+0x26a4>
 801008a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801008e:	2b00      	cmp	r3, #0
 8010090:	f340 8423 	ble.w	80108da <kalman_3gyro.constprop.0+0x3dc2>
 8010094:	3b01      	subs	r3, #1
 8010096:	2200      	movs	r2, #0
 8010098:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801009c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 80100a0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80100a4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 80100a8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 80100ac:	f7fe bca9 	b.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 80100b0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80100b4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80100b8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80100bc:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80100c0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80100c4:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 80100c8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80100cc:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 80100d0:	f7fe bc18 	b.w	800e904 <kalman_3gyro.constprop.0+0x1dec>
 80100d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80100d8:	eef0 4a46 	vmov.f32	s9, s12
 80100dc:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80100e0:	eef0 7a47 	vmov.f32	s15, s14
 80100e4:	eef0 5a66 	vmov.f32	s11, s13
 80100e8:	e64b      	b.n	800fd82 <kalman_3gyro.constprop.0+0x326a>
 80100ea:	eeb1 7a47 	vneg.f32	s14, s14
 80100ee:	f7fd bc66 	b.w	800d9be <kalman_3gyro.constprop.0+0xea6>
 80100f2:	eef0 ca69 	vmov.f32	s25, s19
 80100f6:	e6e0      	b.n	800feba <kalman_3gyro.constprop.0+0x33a2>
 80100f8:	eeb0 ba69 	vmov.f32	s22, s19
 80100fc:	e5e5      	b.n	800fcca <kalman_3gyro.constprop.0+0x31b2>
 80100fe:	bf00      	nop
 8010100:	00000000 	.word	0x00000000
 8010104:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8010108:	49dc      	ldr	r1, [pc, #880]	; (801047c <kalman_3gyro.constprop.0+0x3964>)
 801010a:	4bdd      	ldr	r3, [pc, #884]	; (8010480 <kalman_3gyro.constprop.0+0x3968>)
 801010c:	4add      	ldr	r2, [pc, #884]	; (8010484 <kalman_3gyro.constprop.0+0x396c>)
 801010e:	2000      	movs	r0, #0
 8010110:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8010114:	6029      	str	r1, [r5, #0]
 8010116:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 801011a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801011e:	6002      	str	r2, [r0, #0]
 8010120:	600b      	str	r3, [r1, #0]
 8010122:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8010126:	9004      	str	r0, [sp, #16]
 8010128:	9110      	str	r1, [sp, #64]	; 0x40
 801012a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 80b4 	beq.w	801029c <kalman_3gyro.constprop.0+0x3784>
 8010134:	240c      	movs	r4, #12
 8010136:	eddf bad4 	vldr	s23, [pc, #848]	; 8010488 <kalman_3gyro.constprop.0+0x3970>
 801013a:	ed9f bad4 	vldr	s22, [pc, #848]	; 801048c <kalman_3gyro.constprop.0+0x3974>
 801013e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010490 <kalman_3gyro.constprop.0+0x3978>
 8010142:	ed9f aad4 	vldr	s20, [pc, #848]	; 8010494 <kalman_3gyro.constprop.0+0x397c>
 8010146:	eddf aad4 	vldr	s21, [pc, #848]	; 8010498 <kalman_3gyro.constprop.0+0x3980>
 801014a:	9f08      	ldr	r7, [sp, #32]
 801014c:	fb14 8403 	smlabb	r4, r4, r3, r8
 8010150:	4646      	mov	r6, r8
 8010152:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010156:	e06b      	b.n	8010230 <kalman_3gyro.constprop.0+0x3718>
 8010158:	eeb4 7aca 	vcmpe.f32	s14, s20
 801015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010160:	f300 815a 	bgt.w	8010418 <kalman_3gyro.constprop.0+0x3900>
 8010164:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010168:	ee17 0a90 	vmov	r0, s15
 801016c:	f7f0 f9ec 	bl	8000548 <__aeabi_f2d>
 8010170:	ec41 0b10 	vmov	d0, r0, r1
 8010174:	f005 fb94 	bl	80158a0 <ceil>
 8010178:	ec51 0b10 	vmov	r0, r1, d0
 801017c:	f7f0 fd14 	bl	8000ba8 <__aeabi_d2f>
 8010180:	ee07 0a90 	vmov	s15, r0
 8010184:	edc6 7a00 	vstr	s15, [r6]
 8010188:	ed97 7a01 	vldr	s14, [r7, #4]
 801018c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010190:	eef0 6ae7 	vabs.f32	s13, s15
 8010194:	eef4 6acb 	vcmpe.f32	s13, s22
 8010198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019c:	d51b      	bpl.n	80101d6 <kalman_3gyro.constprop.0+0x36be>
 801019e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	f280 8120 	bge.w	80103ea <kalman_3gyro.constprop.0+0x38d2>
 80101aa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80101ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b2:	f300 812e 	bgt.w	8010412 <kalman_3gyro.constprop.0+0x38fa>
 80101b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80101ba:	ee17 0a90 	vmov	r0, s15
 80101be:	f7f0 f9c3 	bl	8000548 <__aeabi_f2d>
 80101c2:	ec41 0b10 	vmov	d0, r0, r1
 80101c6:	f005 fb6b 	bl	80158a0 <ceil>
 80101ca:	ec51 0b10 	vmov	r0, r1, d0
 80101ce:	f7f0 fceb 	bl	8000ba8 <__aeabi_d2f>
 80101d2:	ee07 0a90 	vmov	s15, r0
 80101d6:	edc6 7a01 	vstr	s15, [r6, #4]
 80101da:	ed97 7a02 	vldr	s14, [r7, #8]
 80101de:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80101e2:	eef0 6ae7 	vabs.f32	s13, s15
 80101e6:	eef4 6acb 	vcmpe.f32	s13, s22
 80101ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ee:	d51a      	bpl.n	8010226 <kalman_3gyro.constprop.0+0x370e>
 80101f0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80101f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f8:	da3b      	bge.n	8010272 <kalman_3gyro.constprop.0+0x375a>
 80101fa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80101fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010202:	f300 8103 	bgt.w	801040c <kalman_3gyro.constprop.0+0x38f4>
 8010206:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801020a:	ee17 0a90 	vmov	r0, s15
 801020e:	f7f0 f99b 	bl	8000548 <__aeabi_f2d>
 8010212:	ec41 0b10 	vmov	d0, r0, r1
 8010216:	f005 fb43 	bl	80158a0 <ceil>
 801021a:	ec51 0b10 	vmov	r0, r1, d0
 801021e:	f7f0 fcc3 	bl	8000ba8 <__aeabi_d2f>
 8010222:	ee07 0a90 	vmov	s15, r0
 8010226:	edc6 7a02 	vstr	s15, [r6, #8]
 801022a:	360c      	adds	r6, #12
 801022c:	42b4      	cmp	r4, r6
 801022e:	d035      	beq.n	801029c <kalman_3gyro.constprop.0+0x3784>
 8010230:	ed97 7a00 	vldr	s14, [r7]
 8010234:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010238:	eef0 6ae7 	vabs.f32	s13, s15
 801023c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010244:	d59e      	bpl.n	8010184 <kalman_3gyro.constprop.0+0x366c>
 8010246:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024e:	db83      	blt.n	8010158 <kalman_3gyro.constprop.0+0x3640>
 8010250:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010254:	ee17 0a90 	vmov	r0, s15
 8010258:	f7f0 f976 	bl	8000548 <__aeabi_f2d>
 801025c:	ec41 0b10 	vmov	d0, r0, r1
 8010260:	f005 fba2 	bl	80159a8 <floor>
 8010264:	ec51 0b10 	vmov	r0, r1, d0
 8010268:	f7f0 fc9e 	bl	8000ba8 <__aeabi_d2f>
 801026c:	ee07 0a90 	vmov	s15, r0
 8010270:	e788      	b.n	8010184 <kalman_3gyro.constprop.0+0x366c>
 8010272:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010276:	360c      	adds	r6, #12
 8010278:	ee17 0a90 	vmov	r0, s15
 801027c:	f7f0 f964 	bl	8000548 <__aeabi_f2d>
 8010280:	ec41 0b10 	vmov	d0, r0, r1
 8010284:	f005 fb90 	bl	80159a8 <floor>
 8010288:	ec51 0b10 	vmov	r0, r1, d0
 801028c:	f7f0 fc8c 	bl	8000ba8 <__aeabi_d2f>
 8010290:	ee07 0a90 	vmov	s15, r0
 8010294:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010298:	42b4      	cmp	r4, r6
 801029a:	d1c9      	bne.n	8010230 <kalman_3gyro.constprop.0+0x3718>
 801029c:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 80102a0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 80cf 	beq.w	8010448 <kalman_3gyro.constprop.0+0x3930>
 80102aa:	240c      	movs	r4, #12
 80102ac:	eddf ba7b 	vldr	s23, [pc, #492]	; 801049c <kalman_3gyro.constprop.0+0x3984>
 80102b0:	ed9f ba76 	vldr	s22, [pc, #472]	; 801048c <kalman_3gyro.constprop.0+0x3974>
 80102b4:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80104a0 <kalman_3gyro.constprop.0+0x3988>
 80102b8:	ed9f aa7a 	vldr	s20, [pc, #488]	; 80104a4 <kalman_3gyro.constprop.0+0x398c>
 80102bc:	eddf aa76 	vldr	s21, [pc, #472]	; 8010498 <kalman_3gyro.constprop.0+0x3980>
 80102c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102c4:	fb14 7403 	smlabb	r4, r4, r3, r7
 80102c8:	463e      	mov	r6, r7
 80102ca:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80102ce:	e06b      	b.n	80103a8 <kalman_3gyro.constprop.0+0x3890>
 80102d0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d8:	f300 81a2 	bgt.w	8010620 <kalman_3gyro.constprop.0+0x3b08>
 80102dc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102e0:	ee17 0a90 	vmov	r0, s15
 80102e4:	f7f0 f930 	bl	8000548 <__aeabi_f2d>
 80102e8:	ec41 0b10 	vmov	d0, r0, r1
 80102ec:	f005 fad8 	bl	80158a0 <ceil>
 80102f0:	ec51 0b10 	vmov	r0, r1, d0
 80102f4:	f7f0 fc58 	bl	8000ba8 <__aeabi_d2f>
 80102f8:	ee07 0a90 	vmov	s15, r0
 80102fc:	edc6 7a00 	vstr	s15, [r6]
 8010300:	ed99 7a04 	vldr	s14, [r9, #16]
 8010304:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010308:	eef0 6ae7 	vabs.f32	s13, s15
 801030c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010314:	d51b      	bpl.n	801034e <kalman_3gyro.constprop.0+0x3836>
 8010316:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	f280 8168 	bge.w	80105f2 <kalman_3gyro.constprop.0+0x3ada>
 8010322:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032a:	f300 8176 	bgt.w	801061a <kalman_3gyro.constprop.0+0x3b02>
 801032e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010332:	ee17 0a90 	vmov	r0, s15
 8010336:	f7f0 f907 	bl	8000548 <__aeabi_f2d>
 801033a:	ec41 0b10 	vmov	d0, r0, r1
 801033e:	f005 faaf 	bl	80158a0 <ceil>
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	f7f0 fc2f 	bl	8000ba8 <__aeabi_d2f>
 801034a:	ee07 0a90 	vmov	s15, r0
 801034e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010352:	ed99 7a05 	vldr	s14, [r9, #20]
 8010356:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801035a:	eef0 6ae7 	vabs.f32	s13, s15
 801035e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010366:	d51a      	bpl.n	801039e <kalman_3gyro.constprop.0+0x3886>
 8010368:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010370:	da55      	bge.n	801041e <kalman_3gyro.constprop.0+0x3906>
 8010372:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	f300 814b 	bgt.w	8010614 <kalman_3gyro.constprop.0+0x3afc>
 801037e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010382:	ee17 0a90 	vmov	r0, s15
 8010386:	f7f0 f8df 	bl	8000548 <__aeabi_f2d>
 801038a:	ec41 0b10 	vmov	d0, r0, r1
 801038e:	f005 fa87 	bl	80158a0 <ceil>
 8010392:	ec51 0b10 	vmov	r0, r1, d0
 8010396:	f7f0 fc07 	bl	8000ba8 <__aeabi_d2f>
 801039a:	ee07 0a90 	vmov	s15, r0
 801039e:	edc6 7a02 	vstr	s15, [r6, #8]
 80103a2:	360c      	adds	r6, #12
 80103a4:	42b4      	cmp	r4, r6
 80103a6:	d04f      	beq.n	8010448 <kalman_3gyro.constprop.0+0x3930>
 80103a8:	ed99 7a03 	vldr	s14, [r9, #12]
 80103ac:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80103b0:	eef0 6ae7 	vabs.f32	s13, s15
 80103b4:	eef4 6acb 	vcmpe.f32	s13, s22
 80103b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103bc:	d59e      	bpl.n	80102fc <kalman_3gyro.constprop.0+0x37e4>
 80103be:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c6:	db83      	blt.n	80102d0 <kalman_3gyro.constprop.0+0x37b8>
 80103c8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103cc:	ee17 0a90 	vmov	r0, s15
 80103d0:	f7f0 f8ba 	bl	8000548 <__aeabi_f2d>
 80103d4:	ec41 0b10 	vmov	d0, r0, r1
 80103d8:	f005 fae6 	bl	80159a8 <floor>
 80103dc:	ec51 0b10 	vmov	r0, r1, d0
 80103e0:	f7f0 fbe2 	bl	8000ba8 <__aeabi_d2f>
 80103e4:	ee07 0a90 	vmov	s15, r0
 80103e8:	e788      	b.n	80102fc <kalman_3gyro.constprop.0+0x37e4>
 80103ea:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103ee:	ee17 0a90 	vmov	r0, s15
 80103f2:	f7f0 f8a9 	bl	8000548 <__aeabi_f2d>
 80103f6:	ec41 0b10 	vmov	d0, r0, r1
 80103fa:	f005 fad5 	bl	80159a8 <floor>
 80103fe:	ec51 0b10 	vmov	r0, r1, d0
 8010402:	f7f0 fbd1 	bl	8000ba8 <__aeabi_d2f>
 8010406:	ee07 0a90 	vmov	s15, r0
 801040a:	e6e4      	b.n	80101d6 <kalman_3gyro.constprop.0+0x36be>
 801040c:	eef0 7a6a 	vmov.f32	s15, s21
 8010410:	e709      	b.n	8010226 <kalman_3gyro.constprop.0+0x370e>
 8010412:	eef0 7a6a 	vmov.f32	s15, s21
 8010416:	e6de      	b.n	80101d6 <kalman_3gyro.constprop.0+0x36be>
 8010418:	eef0 7a6a 	vmov.f32	s15, s21
 801041c:	e6b2      	b.n	8010184 <kalman_3gyro.constprop.0+0x366c>
 801041e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010422:	360c      	adds	r6, #12
 8010424:	ee17 0a90 	vmov	r0, s15
 8010428:	f7f0 f88e 	bl	8000548 <__aeabi_f2d>
 801042c:	ec41 0b10 	vmov	d0, r0, r1
 8010430:	f005 faba 	bl	80159a8 <floor>
 8010434:	ec51 0b10 	vmov	r0, r1, d0
 8010438:	f7f0 fbb6 	bl	8000ba8 <__aeabi_d2f>
 801043c:	ee07 0a90 	vmov	s15, r0
 8010440:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010444:	42b4      	cmp	r4, r6
 8010446:	d1af      	bne.n	80103a8 <kalman_3gyro.constprop.0+0x3890>
 8010448:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 801044c:	2b00      	cmp	r3, #0
 801044e:	f43c ac7e 	beq.w	800cd4e <kalman_3gyro.constprop.0+0x236>
 8010452:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 8010456:	240c      	movs	r4, #12
 8010458:	eddf ba13 	vldr	s23, [pc, #76]	; 80104a8 <kalman_3gyro.constprop.0+0x3990>
 801045c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 801048c <kalman_3gyro.constprop.0+0x3974>
 8010460:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80104ac <kalman_3gyro.constprop.0+0x3994>
 8010464:	ed9f aa12 	vldr	s20, [pc, #72]	; 80104b0 <kalman_3gyro.constprop.0+0x3998>
 8010468:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010498 <kalman_3gyro.constprop.0+0x3980>
 801046c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010470:	960f      	str	r6, [sp, #60]	; 0x3c
 8010472:	fb14 6403 	smlabb	r4, r4, r3, r6
 8010476:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801047a:	e099      	b.n	80105b0 <kalman_3gyro.constprop.0+0x3a98>
 801047c:	3a7001e0 	.word	0x3a7001e0
 8010480:	3a8c0118 	.word	0x3a8c0118
 8010484:	3a000100 	.word	0x3a000100
 8010488:	44888777 	.word	0x44888777
 801048c:	4b000000 	.word	0x4b000000
 8010490:	39f001e1 	.word	0x39f001e1
 8010494:	b9f001e1 	.word	0xb9f001e1
 8010498:	80000000 	.word	0x80000000
 801049c:	44fffe00 	.word	0x44fffe00
 80104a0:	39800100 	.word	0x39800100
 80104a4:	b9800100 	.word	0xb9800100
 80104a8:	446a0ccd 	.word	0x446a0ccd
 80104ac:	3a0c0118 	.word	0x3a0c0118
 80104b0:	ba0c0118 	.word	0xba0c0118
 80104b4:	bf666666 	.word	0xbf666666
 80104b8:	3d072b02 	.word	0x3d072b02
 80104bc:	3cb43958 	.word	0x3cb43958
 80104c0:	3cf5c28f 	.word	0x3cf5c28f
 80104c4:	3d75c28f 	.word	0x3d75c28f
 80104c8:	3d23d70a 	.word	0x3d23d70a
 80104cc:	3ca3d70a 	.word	0x3ca3d70a
 80104d0:	3d4ccccd 	.word	0x3d4ccccd
 80104d4:	3d8f5c29 	.word	0x3d8f5c29
 80104d8:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e0:	f300 80c6 	bgt.w	8010670 <kalman_3gyro.constprop.0+0x3b58>
 80104e4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104e8:	ee17 0a90 	vmov	r0, s15
 80104ec:	f7f0 f82c 	bl	8000548 <__aeabi_f2d>
 80104f0:	ec41 0b10 	vmov	d0, r0, r1
 80104f4:	f005 f9d4 	bl	80158a0 <ceil>
 80104f8:	ec51 0b10 	vmov	r0, r1, d0
 80104fc:	f7f0 fb54 	bl	8000ba8 <__aeabi_d2f>
 8010500:	ee07 0a90 	vmov	s15, r0
 8010504:	edc6 7a00 	vstr	s15, [r6]
 8010508:	ed99 7a07 	vldr	s14, [r9, #28]
 801050c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010510:	eef0 6ae7 	vabs.f32	s13, s15
 8010514:	eef4 6acb 	vcmpe.f32	s13, s22
 8010518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051c:	d51b      	bpl.n	8010556 <kalman_3gyro.constprop.0+0x3a3e>
 801051e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010526:	f280 808f 	bge.w	8010648 <kalman_3gyro.constprop.0+0x3b30>
 801052a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010532:	f300 809a 	bgt.w	801066a <kalman_3gyro.constprop.0+0x3b52>
 8010536:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801053a:	ee17 0a90 	vmov	r0, s15
 801053e:	f7f0 f803 	bl	8000548 <__aeabi_f2d>
 8010542:	ec41 0b10 	vmov	d0, r0, r1
 8010546:	f005 f9ab 	bl	80158a0 <ceil>
 801054a:	ec51 0b10 	vmov	r0, r1, d0
 801054e:	f7f0 fb2b 	bl	8000ba8 <__aeabi_d2f>
 8010552:	ee07 0a90 	vmov	s15, r0
 8010556:	edc6 7a01 	vstr	s15, [r6, #4]
 801055a:	ed99 7a08 	vldr	s14, [r9, #32]
 801055e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010562:	eef0 6ae7 	vabs.f32	s13, s15
 8010566:	eef4 6acb 	vcmpe.f32	s13, s22
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	d519      	bpl.n	80105a4 <kalman_3gyro.constprop.0+0x3a8c>
 8010570:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010578:	da55      	bge.n	8010626 <kalman_3gyro.constprop.0+0x3b0e>
 801057a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	dc78      	bgt.n	8010676 <kalman_3gyro.constprop.0+0x3b5e>
 8010584:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010588:	ee17 0a90 	vmov	r0, s15
 801058c:	f7ef ffdc 	bl	8000548 <__aeabi_f2d>
 8010590:	ec41 0b10 	vmov	d0, r0, r1
 8010594:	f005 f984 	bl	80158a0 <ceil>
 8010598:	ec51 0b10 	vmov	r0, r1, d0
 801059c:	f7f0 fb04 	bl	8000ba8 <__aeabi_d2f>
 80105a0:	ee07 0a90 	vmov	s15, r0
 80105a4:	edc6 7a02 	vstr	s15, [r6, #8]
 80105a8:	360c      	adds	r6, #12
 80105aa:	42b4      	cmp	r4, r6
 80105ac:	f43c abd2 	beq.w	800cd54 <kalman_3gyro.constprop.0+0x23c>
 80105b0:	ed99 7a06 	vldr	s14, [r9, #24]
 80105b4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80105b8:	eef0 6ae7 	vabs.f32	s13, s15
 80105bc:	eef4 6acb 	vcmpe.f32	s13, s22
 80105c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c4:	d59e      	bpl.n	8010504 <kalman_3gyro.constprop.0+0x39ec>
 80105c6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80105ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ce:	db83      	blt.n	80104d8 <kalman_3gyro.constprop.0+0x39c0>
 80105d0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105d4:	ee17 0a90 	vmov	r0, s15
 80105d8:	f7ef ffb6 	bl	8000548 <__aeabi_f2d>
 80105dc:	ec41 0b10 	vmov	d0, r0, r1
 80105e0:	f005 f9e2 	bl	80159a8 <floor>
 80105e4:	ec51 0b10 	vmov	r0, r1, d0
 80105e8:	f7f0 fade 	bl	8000ba8 <__aeabi_d2f>
 80105ec:	ee07 0a90 	vmov	s15, r0
 80105f0:	e788      	b.n	8010504 <kalman_3gyro.constprop.0+0x39ec>
 80105f2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105f6:	ee17 0a90 	vmov	r0, s15
 80105fa:	f7ef ffa5 	bl	8000548 <__aeabi_f2d>
 80105fe:	ec41 0b10 	vmov	d0, r0, r1
 8010602:	f005 f9d1 	bl	80159a8 <floor>
 8010606:	ec51 0b10 	vmov	r0, r1, d0
 801060a:	f7f0 facd 	bl	8000ba8 <__aeabi_d2f>
 801060e:	ee07 0a90 	vmov	s15, r0
 8010612:	e69c      	b.n	801034e <kalman_3gyro.constprop.0+0x3836>
 8010614:	eef0 7a6a 	vmov.f32	s15, s21
 8010618:	e6c1      	b.n	801039e <kalman_3gyro.constprop.0+0x3886>
 801061a:	eef0 7a6a 	vmov.f32	s15, s21
 801061e:	e696      	b.n	801034e <kalman_3gyro.constprop.0+0x3836>
 8010620:	eef0 7a6a 	vmov.f32	s15, s21
 8010624:	e66a      	b.n	80102fc <kalman_3gyro.constprop.0+0x37e4>
 8010626:	ee77 7a89 	vadd.f32	s15, s15, s18
 801062a:	ee17 0a90 	vmov	r0, s15
 801062e:	f7ef ff8b 	bl	8000548 <__aeabi_f2d>
 8010632:	ec41 0b10 	vmov	d0, r0, r1
 8010636:	f005 f9b7 	bl	80159a8 <floor>
 801063a:	ec51 0b10 	vmov	r0, r1, d0
 801063e:	f7f0 fab3 	bl	8000ba8 <__aeabi_d2f>
 8010642:	ee07 0a90 	vmov	s15, r0
 8010646:	e7ad      	b.n	80105a4 <kalman_3gyro.constprop.0+0x3a8c>
 8010648:	ee77 7a89 	vadd.f32	s15, s15, s18
 801064c:	ee17 0a90 	vmov	r0, s15
 8010650:	f7ef ff7a 	bl	8000548 <__aeabi_f2d>
 8010654:	ec41 0b10 	vmov	d0, r0, r1
 8010658:	f005 f9a6 	bl	80159a8 <floor>
 801065c:	ec51 0b10 	vmov	r0, r1, d0
 8010660:	f7f0 faa2 	bl	8000ba8 <__aeabi_d2f>
 8010664:	ee07 0a90 	vmov	s15, r0
 8010668:	e775      	b.n	8010556 <kalman_3gyro.constprop.0+0x3a3e>
 801066a:	eef0 7a6a 	vmov.f32	s15, s21
 801066e:	e772      	b.n	8010556 <kalman_3gyro.constprop.0+0x3a3e>
 8010670:	eef0 7a6a 	vmov.f32	s15, s21
 8010674:	e746      	b.n	8010504 <kalman_3gyro.constprop.0+0x39ec>
 8010676:	eef0 7a6a 	vmov.f32	s15, s21
 801067a:	e793      	b.n	80105a4 <kalman_3gyro.constprop.0+0x3a8c>
 801067c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801067e:	7813      	ldrb	r3, [r2, #0]
 8010680:	ed92 7a03 	vldr	s14, [r2, #12]
 8010684:	edd2 6a01 	vldr	s13, [r2, #4]
 8010688:	edd2 7a02 	vldr	s15, [r2, #8]
 801068c:	2200      	movs	r2, #0
 801068e:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8010692:	2b00      	cmp	r3, #0
 8010694:	f040 813b 	bne.w	801090e <kalman_3gyro.constprop.0+0x3df6>
 8010698:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80104b4 <kalman_3gyro.constprop.0+0x399c>
 801069c:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80106a0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80106a4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80106a8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80106ac:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80106b0:	2100      	movs	r1, #0
 80106b2:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80106b6:	f007 f861 	bl	801777c <memset>
 80106ba:	eddb 7a02 	vldr	s15, [fp, #8]
 80106be:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 80104b8 <kalman_3gyro.constprop.0+0x39a0>
 80106c2:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 80104bc <kalman_3gyro.constprop.0+0x39a4>
 80106c6:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 80104c0 <kalman_3gyro.constprop.0+0x39a8>
 80106ca:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 80104c4 <kalman_3gyro.constprop.0+0x39ac>
 80106ce:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 80104c8 <kalman_3gyro.constprop.0+0x39b0>
 80106d2:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80104cc <kalman_3gyro.constprop.0+0x39b4>
 80106d6:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 80104d0 <kalman_3gyro.constprop.0+0x39b8>
 80106da:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 80104d4 <kalman_3gyro.constprop.0+0x39bc>
 80106de:	4bd9      	ldr	r3, [pc, #868]	; (8010a44 <kalman_3gyro.constprop.0+0x3f2c>)
 80106e0:	49d9      	ldr	r1, [pc, #868]	; (8010a48 <kalman_3gyro.constprop.0+0x3f30>)
 80106e2:	4dda      	ldr	r5, [pc, #872]	; (8010a4c <kalman_3gyro.constprop.0+0x3f34>)
 80106e4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010a50 <kalman_3gyro.constprop.0+0x3f38>
 80106e8:	48da      	ldr	r0, [pc, #872]	; (8010a54 <kalman_3gyro.constprop.0+0x3f3c>)
 80106ea:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 80106ee:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80106f2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80106f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80106fa:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80106fe:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010a58 <kalman_3gyro.constprop.0+0x3f40>
 8010702:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 8010706:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801070a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 801070e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 8010712:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010a5c <kalman_3gyro.constprop.0+0x3f44>
 8010716:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010a60 <kalman_3gyro.constprop.0+0x3f48>
 801071a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 801071e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010722:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010726:	ee27 5a85 	vmul.f32	s10, s15, s10
 801072a:	ee27 4a84 	vmul.f32	s8, s15, s8
 801072e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010732:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010736:	2200      	movs	r2, #0
 8010738:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 801073c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010740:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8010744:	4cc7      	ldr	r4, [pc, #796]	; (8010a64 <kalman_3gyro.constprop.0+0x3f4c>)
 8010746:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 801074a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 801074e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010a68 <kalman_3gyro.constprop.0+0x3f50>
 8010752:	49c6      	ldr	r1, [pc, #792]	; (8010a6c <kalman_3gyro.constprop.0+0x3f54>)
 8010754:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010758:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801075c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010a70 <kalman_3gyro.constprop.0+0x3f58>
 8010760:	4bc4      	ldr	r3, [pc, #784]	; (8010a74 <kalman_3gyro.constprop.0+0x3f5c>)
 8010762:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8010766:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 801076a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 801076e:	4ac2      	ldr	r2, [pc, #776]	; (8010a78 <kalman_3gyro.constprop.0+0x3f60>)
 8010770:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8010774:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010778:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 801077c:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010780:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010784:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010788:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801078c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010790:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010794:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010798:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801079c:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80107a0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80107a4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80107a8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80107ac:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80107b0:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80107b4:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80107b8:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80107bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80107c0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80107c4:	4cad      	ldr	r4, [pc, #692]	; (8010a7c <kalman_3gyro.constprop.0+0x3f64>)
 80107c6:	48ae      	ldr	r0, [pc, #696]	; (8010a80 <kalman_3gyro.constprop.0+0x3f68>)
 80107c8:	49ae      	ldr	r1, [pc, #696]	; (8010a84 <kalman_3gyro.constprop.0+0x3f6c>)
 80107ca:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 80107ce:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 80107d2:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 80107d6:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 80107da:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 80107de:	ee27 6a83 	vmul.f32	s12, s15, s6
 80107e2:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 80107e6:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 80107ea:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80107ee:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80107f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80107f6:	4aa4      	ldr	r2, [pc, #656]	; (8010a88 <kalman_3gyro.constprop.0+0x3f70>)
 80107f8:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80107fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010800:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010804:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010808:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 801080c:	4e9f      	ldr	r6, [pc, #636]	; (8010a8c <kalman_3gyro.constprop.0+0x3f74>)
 801080e:	4da0      	ldr	r5, [pc, #640]	; (8010a90 <kalman_3gyro.constprop.0+0x3f78>)
 8010810:	49a0      	ldr	r1, [pc, #640]	; (8010a94 <kalman_3gyro.constprop.0+0x3f7c>)
 8010812:	4aa1      	ldr	r2, [pc, #644]	; (8010a98 <kalman_3gyro.constprop.0+0x3f80>)
 8010814:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010818:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 801081c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010820:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010824:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010828:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 801082c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010830:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010834:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010838:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 801083c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010840:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010844:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010848:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801084c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010850:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010854:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010858:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801085c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010860:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010864:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010868:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801086c:	b973      	cbnz	r3, 801088c <kalman_3gyro.constprop.0+0x3d74>
 801086e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010872:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010876:	6811      	ldr	r1, [r2, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 801087e:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010888:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 801088c:	2300      	movs	r3, #0
 801088e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010892:	f7fc ba4b 	b.w	800cd2c <kalman_3gyro.constprop.0+0x214>
 8010896:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801089a:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 801089e:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80108a2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80108a6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80108aa:	f7fd bd5b 	b.w	800e364 <kalman_3gyro.constprop.0+0x184c>
 80108ae:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010a9c <kalman_3gyro.constprop.0+0x3f84>
 80108b2:	f7fc ba9e 	b.w	800cdf2 <kalman_3gyro.constprop.0+0x2da>
 80108b6:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80108ba:	f7fd bd7b 	b.w	800e3b4 <kalman_3gyro.constprop.0+0x189c>
 80108be:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010aa0 <kalman_3gyro.constprop.0+0x3f88>
 80108c2:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010aa4 <kalman_3gyro.constprop.0+0x3f8c>
 80108c6:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010aa8 <kalman_3gyro.constprop.0+0x3f90>
 80108ca:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010aac <kalman_3gyro.constprop.0+0x3f94>
 80108ce:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010ab0 <kalman_3gyro.constprop.0+0x3f98>
 80108d2:	ee68 8a8c 	vmul.f32	s17, s17, s24
 80108d6:	f7fd bf9d 	b.w	800e814 <kalman_3gyro.constprop.0+0x1cfc>
 80108da:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 80108de:	2a00      	cmp	r2, #0
 80108e0:	f340 8181 	ble.w	8010be6 <kalman_3gyro.constprop.0+0x40ce>
 80108e4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80108e8:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 80108ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f4:	f340 8177 	ble.w	8010be6 <kalman_3gyro.constprop.0+0x40ce>
 80108f8:	3a01      	subs	r2, #1
 80108fa:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80108fe:	f7fe b880 	b.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 8010902:	eeb0 aa69 	vmov.f32	s20, s19
 8010906:	eeb0 ba69 	vmov.f32	s22, s19
 801090a:	f7ff b9de 	b.w	800fcca <kalman_3gyro.constprop.0+0x31b2>
 801090e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010912:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010916:	eee7 7a07 	vfma.f32	s15, s14, s14
 801091a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801091e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010922:	e6bb      	b.n	801069c <kalman_3gyro.constprop.0+0x3b84>
 8010924:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010928:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801092c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010930:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010934:	f7fe b802 	b.w	800e93c <kalman_3gyro.constprop.0+0x1e24>
 8010938:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 801093c:	f7fd bae6 	b.w	800df0c <kalman_3gyro.constprop.0+0x13f4>
 8010940:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010944:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010948:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801094c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010950:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010954:	f7fd bd06 	b.w	800e364 <kalman_3gyro.constprop.0+0x184c>
 8010958:	ee7e 7a67 	vsub.f32	s15, s28, s15
 801095c:	ee17 0a90 	vmov	r0, s15
 8010960:	f7ef fdf2 	bl	8000548 <__aeabi_f2d>
 8010964:	ec41 0b10 	vmov	d0, r0, r1
 8010968:	f004 ff9a 	bl	80158a0 <ceil>
 801096c:	ec51 0b10 	vmov	r0, r1, d0
 8010970:	f7f0 f91a 	bl	8000ba8 <__aeabi_d2f>
 8010974:	ee0e 0a10 	vmov	s28, r0
 8010978:	f7fc bc70 	b.w	800d25c <kalman_3gyro.constprop.0+0x744>
 801097c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010980:	ee17 0a90 	vmov	r0, s15
 8010984:	f7ef fde0 	bl	8000548 <__aeabi_f2d>
 8010988:	ec41 0b10 	vmov	d0, r0, r1
 801098c:	f004 ff88 	bl	80158a0 <ceil>
 8010990:	ec51 0b10 	vmov	r0, r1, d0
 8010994:	f7f0 f908 	bl	8000ba8 <__aeabi_d2f>
 8010998:	ee0d 0a90 	vmov	s27, r0
 801099c:	f7fc bc81 	b.w	800d2a2 <kalman_3gyro.constprop.0+0x78a>
 80109a0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80109a4:	ee17 0a90 	vmov	r0, s15
 80109a8:	f7ef fdce 	bl	8000548 <__aeabi_f2d>
 80109ac:	ec41 0b10 	vmov	d0, r0, r1
 80109b0:	f004 ff76 	bl	80158a0 <ceil>
 80109b4:	ec51 0b10 	vmov	r0, r1, d0
 80109b8:	f7f0 f8f6 	bl	8000ba8 <__aeabi_d2f>
 80109bc:	ee0d 0a90 	vmov	s27, r0
 80109c0:	f7fc bcd5 	b.w	800d36e <kalman_3gyro.constprop.0+0x856>
 80109c4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80109c8:	ee17 0a90 	vmov	r0, s15
 80109cc:	f7ef fdbc 	bl	8000548 <__aeabi_f2d>
 80109d0:	ec41 0b10 	vmov	d0, r0, r1
 80109d4:	f004 ff64 	bl	80158a0 <ceil>
 80109d8:	ec51 0b10 	vmov	r0, r1, d0
 80109dc:	f7f0 f8e4 	bl	8000ba8 <__aeabi_d2f>
 80109e0:	ee0b 0a10 	vmov	s22, r0
 80109e4:	f7fc bce6 	b.w	800d3b4 <kalman_3gyro.constprop.0+0x89c>
 80109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ec:	f6fd addf 	blt.w	800e5ae <kalman_3gyro.constprop.0+0x1a96>
 80109f0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010aa8 <kalman_3gyro.constprop.0+0x3f90>
 80109f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fc:	f140 8283 	bpl.w	8010f06 <kalman_3gyro.constprop.0+0x43ee>
 8010a00:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010ab4 <kalman_3gyro.constprop.0+0x3f9c>
 8010a04:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010ab8 <kalman_3gyro.constprop.0+0x3fa0>
 8010a08:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010abc <kalman_3gyro.constprop.0+0x3fa4>
 8010a0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a14:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010a18:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010a1c:	f7fd bdd1 	b.w	800e5c2 <kalman_3gyro.constprop.0+0x1aaa>
 8010a20:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010a24:	ee17 0a90 	vmov	r0, s15
 8010a28:	f7ef fd8e 	bl	8000548 <__aeabi_f2d>
 8010a2c:	ec41 0b10 	vmov	d0, r0, r1
 8010a30:	f004 ff36 	bl	80158a0 <ceil>
 8010a34:	ec51 0b10 	vmov	r0, r1, d0
 8010a38:	f7f0 f8b6 	bl	8000ba8 <__aeabi_d2f>
 8010a3c:	ee08 0a10 	vmov	s16, r0
 8010a40:	f7fc bbe9 	b.w	800d216 <kalman_3gyro.constprop.0+0x6fe>
 8010a44:	3eb33333 	.word	0x3eb33333
 8010a48:	3ee66666 	.word	0x3ee66666
 8010a4c:	3f866666 	.word	0x3f866666
 8010a50:	3ecccccd 	.word	0x3ecccccd
 8010a54:	3f933333 	.word	0x3f933333
 8010a58:	3dcccccd 	.word	0x3dcccccd
 8010a5c:	3e4ccccd 	.word	0x3e4ccccd
 8010a60:	3e99999a 	.word	0x3e99999a
 8010a64:	3f8ccccd 	.word	0x3f8ccccd
 8010a68:	3f4ccccd 	.word	0x3f4ccccd
 8010a6c:	3ebd70a4 	.word	0x3ebd70a4
 8010a70:	3f666666 	.word	0x3f666666
 8010a74:	40a00000 	.word	0x40a00000
 8010a78:	3f99999a 	.word	0x3f99999a
 8010a7c:	3f19999a 	.word	0x3f19999a
 8010a80:	3fb9999a 	.word	0x3fb9999a
 8010a84:	3fe66666 	.word	0x3fe66666
 8010a88:	3f333333 	.word	0x3f333333
 8010a8c:	3fa66666 	.word	0x3fa66666
 8010a90:	3fcccccd 	.word	0x3fcccccd
 8010a94:	40200000 	.word	0x40200000
 8010a98:	40400000 	.word	0x40400000
 8010a9c:	bf666666 	.word	0xbf666666
 8010aa0:	391d4951 	.word	0x391d4951
 8010aa4:	383cbe62 	.word	0x383cbe62
 8010aa8:	3c75c28f 	.word	0x3c75c28f
 8010aac:	469c3e00 	.word	0x469c3e00
 8010ab0:	43168000 	.word	0x43168000
 8010ab4:	3c23d70a 	.word	0x3c23d70a
 8010ab8:	3f19999a 	.word	0x3f19999a
 8010abc:	43480000 	.word	0x43480000
 8010ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ac4:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010ac8:	eef0 7aca 	vabs.f32	s15, s20
 8010acc:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010ad0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad8:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010adc:	bfb8      	it	lt
 8010ade:	eef0 7a66 	vmovlt.f32	s15, s13
 8010ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010aea:	f77d af5b 	ble.w	800e9a4 <kalman_3gyro.constprop.0+0x1e8c>
 8010aee:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010af2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010af6:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afe:	f77d af51 	ble.w	800e9a4 <kalman_3gyro.constprop.0+0x1e8c>
 8010b02:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010b06:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010b0a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010b0e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010b12:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010b16:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010b1a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010b1e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010b22:	f7fd bf3f 	b.w	800e9a4 <kalman_3gyro.constprop.0+0x1e8c>
 8010b26:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010b2a:	2a01      	cmp	r2, #1
 8010b2c:	d002      	beq.n	8010b34 <kalman_3gyro.constprop.0+0x401c>
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	f47d af1e 	bne.w	800e970 <kalman_3gyro.constprop.0+0x1e58>
 8010b34:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010b38:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b40:	bfa8      	it	ge
 8010b42:	eeb0 3a67 	vmovge.f32	s6, s15
 8010b46:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010b4a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010b4e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010b52:	f7fd bf0d 	b.w	800e970 <kalman_3gyro.constprop.0+0x1e58>
 8010b56:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010b5a:	ee17 0a90 	vmov	r0, s15
 8010b5e:	f7ef fcf3 	bl	8000548 <__aeabi_f2d>
 8010b62:	ec41 0b10 	vmov	d0, r0, r1
 8010b66:	f004 fe9b 	bl	80158a0 <ceil>
 8010b6a:	ec51 0b10 	vmov	r0, r1, d0
 8010b6e:	f7f0 f81b 	bl	8000ba8 <__aeabi_d2f>
 8010b72:	ee08 0a10 	vmov	s16, r0
 8010b76:	f7fc bc40 	b.w	800d3fa <kalman_3gyro.constprop.0+0x8e2>
 8010b7a:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010b7e:	ee17 0a90 	vmov	r0, s15
 8010b82:	f7ef fce1 	bl	8000548 <__aeabi_f2d>
 8010b86:	ec41 0b10 	vmov	d0, r0, r1
 8010b8a:	f004 fe89 	bl	80158a0 <ceil>
 8010b8e:	ec51 0b10 	vmov	r0, r1, d0
 8010b92:	f7f0 f809 	bl	8000ba8 <__aeabi_d2f>
 8010b96:	ee0b 0a10 	vmov	s22, r0
 8010b9a:	f7fc bcb7 	b.w	800d50c <kalman_3gyro.constprop.0+0x9f4>
 8010b9e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010ba2:	ee17 0a90 	vmov	r0, s15
 8010ba6:	f7ef fccf 	bl	8000548 <__aeabi_f2d>
 8010baa:	ec41 0b10 	vmov	d0, r0, r1
 8010bae:	f004 fe77 	bl	80158a0 <ceil>
 8010bb2:	ec51 0b10 	vmov	r0, r1, d0
 8010bb6:	f7ef fff7 	bl	8000ba8 <__aeabi_d2f>
 8010bba:	ee08 0a10 	vmov	s16, r0
 8010bbe:	f7fc bcc8 	b.w	800d552 <kalman_3gyro.constprop.0+0xa3a>
 8010bc2:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010bc6:	ee17 0a90 	vmov	r0, s15
 8010bca:	f7ef fcbd 	bl	8000548 <__aeabi_f2d>
 8010bce:	ec41 0b10 	vmov	d0, r0, r1
 8010bd2:	f004 fe65 	bl	80158a0 <ceil>
 8010bd6:	ec51 0b10 	vmov	r0, r1, d0
 8010bda:	f7ef ffe5 	bl	8000ba8 <__aeabi_d2f>
 8010bde:	ee0d 0a90 	vmov	s27, r0
 8010be2:	f7fc bc70 	b.w	800d4c6 <kalman_3gyro.constprop.0+0x9ae>
 8010be6:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010bea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010bf2:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	f77d af02 	ble.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 8010bfe:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c06:	eef4 7aec 	vcmpe.f32	s15, s25
 8010c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0e:	f77d aef8 	ble.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 8010c12:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010c16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010c1a:	eef4 7acd 	vcmpe.f32	s15, s26
 8010c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c22:	f140 8711 	bpl.w	8011a48 <kalman_3gyro.constprop.0+0x4f30>
 8010c26:	3303      	adds	r3, #3
 8010c28:	f7ff ba35 	b.w	8010096 <kalman_3gyro.constprop.0+0x357e>
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010c32:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010c36:	9181      	str	r1, [sp, #516]	; 0x204
 8010c38:	9282      	str	r2, [sp, #520]	; 0x208
 8010c3a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010c3e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010c40:	2200      	movs	r2, #0
 8010c42:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010c46:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010c4a:	f7fe baa8 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8010c4e:	a936      	add	r1, sp, #216	; 0xd8
 8010c50:	a854      	add	r0, sp, #336	; 0x150
 8010c52:	f7fa ff85 	bl	800bb60 <b_dcm2q>
 8010c56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010c60:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010c64:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010c68:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010c6c:	f006 fd86 	bl	801777c <memset>
 8010c70:	4bd8      	ldr	r3, [pc, #864]	; (8010fd4 <kalman_3gyro.constprop.0+0x44bc>)
 8010c72:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010c76:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010c7a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010c7e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010c82:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010c86:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010c8a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010c8e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010c92:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010c96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010c98:	781a      	ldrb	r2, [r3, #0]
 8010c9a:	ee07 2a90 	vmov	s15, r2
 8010c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010caa:	f040 84dc 	bne.w	8011666 <kalman_3gyro.constprop.0+0x4b4e>
 8010cae:	eeb0 7a4c 	vmov.f32	s14, s24
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f88b 3000 	strb.w	r3, [fp]
 8010cb8:	eddb ea02 	vldr	s29, [fp, #8]
 8010cbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	f7fd bb8d 	b.w	800e3e0 <kalman_3gyro.constprop.0+0x18c8>
 8010cc6:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010cca:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd2:	f340 85da 	ble.w	801188a <kalman_3gyro.constprop.0+0x4d72>
 8010cd6:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010cda:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010cde:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010ce2:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010ce6:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010cea:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010cee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010cf2:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010cf6:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010cfa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d02:	f63d a94b 	bhi.w	800df9c <kalman_3gyro.constprop.0+0x1484>
 8010d06:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010d0a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d12:	f340 84bc 	ble.w	801168e <kalman_3gyro.constprop.0+0x4b76>
 8010d16:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010d1a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010d1e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d22:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d26:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d2a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d2e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d32:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d36:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010d3a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d42:	f63d a94b 	bhi.w	800dfdc <kalman_3gyro.constprop.0+0x14c4>
 8010d46:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010d4a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d52:	f340 84a8 	ble.w	80116a6 <kalman_3gyro.constprop.0+0x4b8e>
 8010d56:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010d5a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010d5e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d62:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d66:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d6a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d6e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d72:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d76:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010d7a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d82:	f63d a94b 	bhi.w	800e01c <kalman_3gyro.constprop.0+0x1504>
 8010d86:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010d8a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d92:	f340 8490 	ble.w	80116b6 <kalman_3gyro.constprop.0+0x4b9e>
 8010d96:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010d9a:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010d9e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010da2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010da6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010daa:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010dae:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010db2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010db6:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010dba:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc2:	f6fd a94b 	blt.w	800e05c <kalman_3gyro.constprop.0+0x1544>
 8010dc6:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010dca:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd2:	f57d a94b 	bpl.w	800e06c <kalman_3gyro.constprop.0+0x1554>
 8010dd6:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010dda:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010dde:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010de2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010de6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010dea:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010dee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010df2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010df6:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010dfa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e02:	f6fd a94b 	blt.w	800e09c <kalman_3gyro.constprop.0+0x1584>
 8010e06:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0e:	f57d a945 	bpl.w	800e09c <kalman_3gyro.constprop.0+0x1584>
 8010e12:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010e16:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010e1a:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010e1e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010e22:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010e26:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010e2a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010e2e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010e32:	f7fd b933 	b.w	800e09c <kalman_3gyro.constprop.0+0x1584>
 8010e36:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010fd8 <kalman_3gyro.constprop.0+0x44c0>
 8010e3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e42:	f57d ac56 	bpl.w	800e6f2 <kalman_3gyro.constprop.0+0x1bda>
 8010e46:	eddf 3a65 	vldr	s7, [pc, #404]	; 8010fdc <kalman_3gyro.constprop.0+0x44c4>
 8010e4a:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010fe0 <kalman_3gyro.constprop.0+0x44c8>
 8010e4e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010fe4 <kalman_3gyro.constprop.0+0x44cc>
 8010e52:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010fe8 <kalman_3gyro.constprop.0+0x44d0>
 8010e56:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010e5a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e5e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010e62:	eeb0 ca66 	vmov.f32	s24, s13
 8010e66:	eddf 6a61 	vldr	s13, [pc, #388]	; 8010fec <kalman_3gyro.constprop.0+0x44d4>
 8010e6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	f6fd ac56 	blt.w	800e722 <kalman_3gyro.constprop.0+0x1c0a>
 8010e76:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010ff0 <kalman_3gyro.constprop.0+0x44d8>
 8010e7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	f57d ac56 	bpl.w	800e732 <kalman_3gyro.constprop.0+0x1c1a>
 8010e86:	eddf 3a59 	vldr	s7, [pc, #356]	; 8010fec <kalman_3gyro.constprop.0+0x44d4>
 8010e8a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010e8e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010e92:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010e96:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8010e9a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010e9e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010ea2:	eeb0 ca66 	vmov.f32	s24, s13
 8010ea6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010ff4 <kalman_3gyro.constprop.0+0x44dc>
 8010eaa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb2:	f6fd ac56 	blt.w	800e762 <kalman_3gyro.constprop.0+0x1c4a>
 8010eb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010eba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec2:	f57d ac56 	bpl.w	800e772 <kalman_3gyro.constprop.0+0x1c5a>
 8010ec6:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010ff4 <kalman_3gyro.constprop.0+0x44dc>
 8010eca:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010ff8 <kalman_3gyro.constprop.0+0x44e0>
 8010ece:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8010ffc <kalman_3gyro.constprop.0+0x44e4>
 8010ed2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010ed6:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8010eda:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010ede:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010ee2:	eeb0 ca66 	vmov.f32	s24, s13
 8010ee6:	e4f4      	b.n	80108d2 <kalman_3gyro.constprop.0+0x3dba>
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	f57d abe1 	bpl.w	800e6b2 <kalman_3gyro.constprop.0+0x1b9a>
 8010ef0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8010fdc <kalman_3gyro.constprop.0+0x44c4>
 8010ef4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efc:	da9b      	bge.n	8010e36 <kalman_3gyro.constprop.0+0x431e>
 8010efe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010f02:	f7fd bbee 	b.w	800e6e2 <kalman_3gyro.constprop.0+0x1bca>
 8010f06:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010fd8 <kalman_3gyro.constprop.0+0x44c0>
 8010f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f12:	f57d ab5e 	bpl.w	800e5d2 <kalman_3gyro.constprop.0+0x1aba>
 8010f16:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010fdc <kalman_3gyro.constprop.0+0x44c4>
 8010f1a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8011000 <kalman_3gyro.constprop.0+0x44e8>
 8010f1e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010fe4 <kalman_3gyro.constprop.0+0x44cc>
 8010f22:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011004 <kalman_3gyro.constprop.0+0x44ec>
 8010f26:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010f2a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010f2e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f32:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8010fec <kalman_3gyro.constprop.0+0x44d4>
 8010f36:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3e:	f6fd ab5e 	blt.w	800e5fe <kalman_3gyro.constprop.0+0x1ae6>
 8010f42:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010ff0 <kalman_3gyro.constprop.0+0x44d8>
 8010f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	f57d ab5e 	bpl.w	800e60e <kalman_3gyro.constprop.0+0x1af6>
 8010f52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010fec <kalman_3gyro.constprop.0+0x44d4>
 8010f56:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010f5a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8010f5e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010f62:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010f66:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010f6a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f6e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010ff4 <kalman_3gyro.constprop.0+0x44dc>
 8010f72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7a:	f6fd ab5e 	blt.w	800e63a <kalman_3gyro.constprop.0+0x1b22>
 8010f7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8a:	f57d ab5d 	bpl.w	800e648 <kalman_3gyro.constprop.0+0x1b30>
 8010f8e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010ff4 <kalman_3gyro.constprop.0+0x44dc>
 8010f92:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8011008 <kalman_3gyro.constprop.0+0x44f0>
 8010f96:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8010ffc <kalman_3gyro.constprop.0+0x44e4>
 8010f9a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801100c <kalman_3gyro.constprop.0+0x44f4>
 8010f9e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010fa2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010fa6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010faa:	f7fd bb5b 	b.w	800e664 <kalman_3gyro.constprop.0+0x1b4c>
 8010fae:	9b01      	ldr	r3, [sp, #4]
 8010fb0:	e63d      	b.n	8010c2e <kalman_3gyro.constprop.0+0x4116>
 8010fb2:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8010fb6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbe:	da2b      	bge.n	8011018 <kalman_3gyro.constprop.0+0x4500>
 8010fc0:	ed9f ba13 	vldr	s22, [pc, #76]	; 8011010 <kalman_3gyro.constprop.0+0x44f8>
 8010fc4:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8010fc8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd0:	db3a      	blt.n	8011048 <kalman_3gyro.constprop.0+0x4530>
 8010fd2:	e386      	b.n	80116e2 <kalman_3gyro.constprop.0+0x4bca>
 8010fd4:	40a00000 	.word	0x40a00000
 8010fd8:	3cf5c28f 	.word	0x3cf5c28f
 8010fdc:	3c75c28f 	.word	0x3c75c28f
 8010fe0:	3dccccd0 	.word	0x3dccccd0
 8010fe4:	42855556 	.word	0x42855556
 8010fe8:	3f866666 	.word	0x3f866666
 8010fec:	3d4ccccd 	.word	0x3d4ccccd
 8010ff0:	3dcccccd 	.word	0x3dcccccd
 8010ff4:	3e4ccccd 	.word	0x3e4ccccd
 8010ff8:	42200000 	.word	0x42200000
 8010ffc:	40555555 	.word	0x40555555
 8011000:	3ecccccc 	.word	0x3ecccccc
 8011004:	3fcccccd 	.word	0x3fcccccd
 8011008:	43f00000 	.word	0x43f00000
 801100c:	42ee0000 	.word	0x42ee0000
 8011010:	00000000 	.word	0x00000000
 8011014:	eeb0 7a64 	vmov.f32	s14, s9
 8011018:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 801101c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011024:	f140 8359 	bpl.w	80116da <kalman_3gyro.constprop.0+0x4bc2>
 8011028:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 801102c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8011030:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011034:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011038:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801103c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011040:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011044:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011048:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 801104c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011054:	f2c0 835d 	blt.w	8011712 <kalman_3gyro.constprop.0+0x4bfa>
 8011058:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801105c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011064:	f140 8402 	bpl.w	801186c <kalman_3gyro.constprop.0+0x4d54>
 8011068:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801106c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8011070:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011074:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011078:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801107c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011080:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011084:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011088:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 801108c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011094:	f200 835d 	bhi.w	8011752 <kalman_3gyro.constprop.0+0x4c3a>
 8011098:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 801109c:	eef4 4ac8 	vcmpe.f32	s9, s16
 80110a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a4:	f340 83e8 	ble.w	8011878 <kalman_3gyro.constprop.0+0x4d60>
 80110a8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80110ac:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80110b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80110b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80110b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80110bc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80110c0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80110c4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80110c8:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 80110cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80110d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d4:	f200 835d 	bhi.w	8011792 <kalman_3gyro.constprop.0+0x4c7a>
 80110d8:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 80110dc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80110e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e4:	f340 83b4 	ble.w	8011850 <kalman_3gyro.constprop.0+0x4d38>
 80110e8:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 80110ec:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 80110f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80110f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80110f8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80110fc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011100:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011104:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011108:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 801110c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011114:	f2c0 835c 	blt.w	80117d0 <kalman_3gyro.constprop.0+0x4cb8>
 8011118:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801111c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011124:	f140 835c 	bpl.w	80117e0 <kalman_3gyro.constprop.0+0x4cc8>
 8011128:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 801112c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011130:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011134:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011138:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801113c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8011140:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8011144:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011148:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801114c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011154:	f6fc aeda 	blt.w	800df0c <kalman_3gyro.constprop.0+0x13f4>
 8011158:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011160:	f57c aed4 	bpl.w	800df0c <kalman_3gyro.constprop.0+0x13f4>
 8011164:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8011168:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801116c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8011170:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8011174:	ee35 7a47 	vsub.f32	s14, s10, s14
 8011178:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801117c:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011180:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011184:	f7fc bec2 	b.w	800df0c <kalman_3gyro.constprop.0+0x13f4>
 8011188:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801118c:	eef4 7acd 	vcmpe.f32	s15, s26
 8011190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011194:	dd2c      	ble.n	80111f0 <kalman_3gyro.constprop.0+0x46d8>
 8011196:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801119a:	eef4 7aeb 	vcmpe.f32	s15, s23
 801119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a2:	dd25      	ble.n	80111f0 <kalman_3gyro.constprop.0+0x46d8>
 80111a4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80111a8:	eef4 7aec 	vcmpe.f32	s15, s25
 80111ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b0:	dd1e      	ble.n	80111f0 <kalman_3gyro.constprop.0+0x46d8>
 80111b2:	eddd 5a03 	vldr	s11, [sp, #12]
 80111b6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80111ba:	eef4 5ae7 	vcmpe.f32	s11, s15
 80111be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c2:	d515      	bpl.n	80111f0 <kalman_3gyro.constprop.0+0x46d8>
 80111c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80111c8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80111cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80111d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	d50a      	bpl.n	80111f0 <kalman_3gyro.constprop.0+0x46d8>
 80111da:	2300      	movs	r3, #0
 80111dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80111e0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80111e4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80111e8:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80111ec:	f7fd bf4c 	b.w	800f088 <kalman_3gyro.constprop.0+0x2570>
 80111f0:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 80111f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fc:	dd0b      	ble.n	8011216 <kalman_3gyro.constprop.0+0x46fe>
 80111fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120a:	f100 843f 	bmi.w	8011a8c <kalman_3gyro.constprop.0+0x4f74>
 801120e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011212:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011216:	2300      	movs	r3, #0
 8011218:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 801121c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011220:	f7fd bf32 	b.w	800f088 <kalman_3gyro.constprop.0+0x2570>
 8011224:	2301      	movs	r3, #1
 8011226:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801122a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 801122e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8011232:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8011236:	edd2 5a00 	vldr	s11, [r2]
 801123a:	ed93 7a00 	vldr	s14, [r3]
 801123e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8011242:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8011246:	ed92 5a00 	vldr	s10, [r2]
 801124a:	edd3 6a00 	vldr	s13, [r3]
 801124e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8011252:	ee67 4a07 	vmul.f32	s9, s14, s14
 8011256:	eea5 4a05 	vfma.f32	s8, s10, s10
 801125a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801125e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8011262:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8011266:	aa5d      	add	r2, sp, #372	; 0x174
 8011268:	a833      	add	r0, sp, #204	; 0xcc
 801126a:	ed91 6a00 	vldr	s12, [r1]
 801126e:	edd3 7a00 	vldr	s15, [r3]
 8011272:	eea6 4a06 	vfma.f32	s8, s12, s12
 8011276:	a92d      	add	r1, sp, #180	; 0xb4
 8011278:	ad5d      	add	r5, sp, #372	; 0x174
 801127a:	eee7 4aa7 	vfma.f32	s9, s15, s15
 801127e:	ac66      	add	r4, sp, #408	; 0x198
 8011280:	eef1 2ac4 	vsqrt.f32	s5, s8
 8011284:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011288:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801128c:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011290:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8011294:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011298:	ee27 7a24 	vmul.f32	s14, s14, s9
 801129c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80112a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80112a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80112a8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80112ac:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 80112b0:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80112b4:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 80112b8:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 80112bc:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 80112c0:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 80112c4:	f7fa fbac 	bl	800ba20 <getRotationMatrix>
 80112c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112d0:	682e      	ldr	r6, [r5, #0]
 80112d2:	6026      	str	r6, [r4, #0]
 80112d4:	ad66      	add	r5, sp, #408	; 0x198
 80112d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112d8:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80112dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112e2:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 80112e6:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 80112ea:	6026      	str	r6, [r4, #0]
 80112ec:	eef0 7ae7 	vabs.f32	s15, s15
 80112f0:	eeb0 7ac7 	vabs.f32	s14, s14
 80112f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	f100 81df 	bmi.w	80116be <kalman_3gyro.constprop.0+0x4ba6>
 8011300:	2307      	movs	r3, #7
 8011302:	f04f 0c04 	mov.w	ip, #4
 8011306:	9305      	str	r3, [sp, #20]
 8011308:	2300      	movs	r3, #0
 801130a:	4662      	mov	r2, ip
 801130c:	2003      	movs	r0, #3
 801130e:	2706      	movs	r7, #6
 8011310:	f04f 0e01 	mov.w	lr, #1
 8011314:	9304      	str	r3, [sp, #16]
 8011316:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 801131a:	eeb0 7ac7 	vabs.f32	s14, s14
 801131e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011326:	f340 8296 	ble.w	8011856 <kalman_3gyro.constprop.0+0x4d3e>
 801132a:	2306      	movs	r3, #6
 801132c:	930a      	str	r3, [sp, #40]	; 0x28
 801132e:	2307      	movs	r3, #7
 8011330:	9305      	str	r3, [sp, #20]
 8011332:	2300      	movs	r3, #0
 8011334:	2708      	movs	r7, #8
 8011336:	f04f 0c04 	mov.w	ip, #4
 801133a:	9302      	str	r3, [sp, #8]
 801133c:	2302      	movs	r3, #2
 801133e:	9707      	str	r7, [sp, #28]
 8011340:	4662      	mov	r2, ip
 8011342:	2005      	movs	r0, #5
 8011344:	f04f 0e01 	mov.w	lr, #1
 8011348:	9304      	str	r3, [sp, #16]
 801134a:	ab66      	add	r3, sp, #408	; 0x198
 801134c:	441a      	add	r2, r3
 801134e:	9b07      	ldr	r3, [sp, #28]
 8011350:	edd2 6a00 	vldr	s13, [r2]
 8011354:	9a02      	ldr	r2, [sp, #8]
 8011356:	a966      	add	r1, sp, #408	; 0x198
 8011358:	440b      	add	r3, r1
 801135a:	ed93 7a00 	vldr	s14, [r3]
 801135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011362:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011366:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801136a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801136e:	9a04      	ldr	r2, [sp, #16]
 8011370:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8011374:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801137c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011380:	0080      	lsls	r0, r0, #2
 8011382:	900e      	str	r0, [sp, #56]	; 0x38
 8011384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011386:	940d      	str	r4, [sp, #52]	; 0x34
 8011388:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801138c:	edc3 7a00 	vstr	s15, [r3]
 8011390:	ed96 7a00 	vldr	s14, [r6]
 8011394:	edd1 7a00 	vldr	s15, [r1]
 8011398:	930c      	str	r3, [sp, #48]	; 0x30
 801139a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801139e:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80113a2:	0080      	lsls	r0, r0, #2
 80113a4:	9006      	str	r0, [sp, #24]
 80113a6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80113aa:	00bf      	lsls	r7, r7, #2
 80113ac:	9711      	str	r7, [sp, #68]	; 0x44
 80113ae:	9f05      	ldr	r7, [sp, #20]
 80113b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113b2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80113b6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80113ba:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	9307      	str	r3, [sp, #28]
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	edc6 6a00 	vstr	s13, [r6]
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80113cc:	9b04      	ldr	r3, [sp, #16]
 80113ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	9312      	str	r3, [sp, #72]	; 0x48
 80113d4:	9b05      	ldr	r3, [sp, #20]
 80113d6:	ed96 7a00 	vldr	s14, [r6]
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	9309      	str	r3, [sp, #36]	; 0x24
 80113de:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80113e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113e4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80113e8:	ed93 6a00 	vldr	s12, [r3]
 80113ec:	edd2 7a00 	vldr	s15, [r2]
 80113f0:	eee6 7a47 	vfms.f32	s15, s12, s14
 80113f4:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80113f8:	950a      	str	r5, [sp, #40]	; 0x28
 80113fa:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80113fe:	edc2 7a00 	vstr	s15, [r2]
 8011402:	ed96 7a00 	vldr	s14, [r6]
 8011406:	edd4 7a00 	vldr	s15, [r4]
 801140a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801140e:	edc4 7a00 	vstr	s15, [r4]
 8011412:	edd0 5a00 	vldr	s11, [r0]
 8011416:	ed97 7a00 	vldr	s14, [r7]
 801141a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801141e:	eef0 7ae7 	vabs.f32	s15, s15
 8011422:	ed87 7a00 	vstr	s14, [r7]
 8011426:	ed90 6a00 	vldr	s12, [r0]
 801142a:	ed91 7a00 	vldr	s14, [r1]
 801142e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011432:	ed81 7a00 	vstr	s14, [r1]
 8011436:	ed92 7a00 	vldr	s14, [r2]
 801143a:	eeb0 7ac7 	vabs.f32	s14, s14
 801143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011446:	dd12      	ble.n	801146e <kalman_3gyro.constprop.0+0x4956>
 8011448:	9a07      	ldr	r2, [sp, #28]
 801144a:	9f05      	ldr	r7, [sp, #20]
 801144c:	9806      	ldr	r0, [sp, #24]
 801144e:	9209      	str	r2, [sp, #36]	; 0x24
 8011450:	4673      	mov	r3, lr
 8011452:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011456:	9302      	str	r3, [sp, #8]
 8011458:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	9206      	str	r2, [sp, #24]
 8011460:	930b      	str	r3, [sp, #44]	; 0x2c
 8011462:	00ba      	lsls	r2, r7, #2
 8011464:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011468:	4605      	mov	r5, r0
 801146a:	9207      	str	r2, [sp, #28]
 801146c:	930a      	str	r3, [sp, #40]	; 0x28
 801146e:	9b06      	ldr	r3, [sp, #24]
 8011470:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011472:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011476:	4413      	add	r3, r2
 8011478:	461c      	mov	r4, r3
 801147a:	462b      	mov	r3, r5
 801147c:	4413      	add	r3, r2
 801147e:	ed94 7a00 	vldr	s14, [r4]
 8011482:	edd3 7a00 	vldr	s15, [r3]
 8011486:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801148a:	4618      	mov	r0, r3
 801148c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801148e:	4413      	add	r3, r2
 8011490:	461a      	mov	r2, r3
 8011492:	9b07      	ldr	r3, [sp, #28]
 8011494:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011498:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801149c:	440b      	add	r3, r1
 801149e:	4619      	mov	r1, r3
 80114a0:	442e      	add	r6, r5
 80114a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114a4:	9607      	str	r6, [sp, #28]
 80114a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80114a8:	ed84 2a00 	vstr	s4, [r4]
 80114ac:	442b      	add	r3, r5
 80114ae:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80114b2:	9306      	str	r3, [sp, #24]
 80114b4:	19bb      	adds	r3, r7, r6
 80114b6:	ed92 7a00 	vldr	s14, [r2]
 80114ba:	edd1 7a00 	vldr	s15, [r1]
 80114be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80114c0:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80114c4:	edd3 3a00 	vldr	s7, [r3]
 80114c8:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80114cc:	eee2 7a47 	vfms.f32	s15, s4, s14
 80114d0:	4423      	add	r3, r4
 80114d2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80114d6:	ed93 5a00 	vldr	s10, [r3]
 80114da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114dc:	edc1 7a00 	vstr	s15, [r1]
 80114e0:	462f      	mov	r7, r5
 80114e2:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 80114e6:	4629      	mov	r1, r5
 80114e8:	eb05 0c03 	add.w	ip, r5, r3
 80114ec:	9d04      	ldr	r5, [sp, #16]
 80114ee:	ed92 1a00 	vldr	s2, [r2]
 80114f2:	4437      	add	r7, r6
 80114f4:	9705      	str	r7, [sp, #20]
 80114f6:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 80114fa:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80114fe:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011502:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8011506:	4419      	add	r1, r3
 8011508:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801150c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8011510:	191c      	adds	r4, r3, r4
 8011512:	9b02      	ldr	r3, [sp, #8]
 8011514:	9104      	str	r1, [sp, #16]
 8011516:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 801151a:	9409      	str	r4, [sp, #36]	; 0x24
 801151c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8011520:	463d      	mov	r5, r7
 8011522:	9904      	ldr	r1, [sp, #16]
 8011524:	46b6      	mov	lr, r6
 8011526:	4623      	mov	r3, r4
 8011528:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801152c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8011530:	edd0 7a00 	vldr	s15, [r0]
 8011534:	9805      	ldr	r0, [sp, #20]
 8011536:	ed91 0a00 	vldr	s0, [r1]
 801153a:	ed90 8a00 	vldr	s16, [r0]
 801153e:	eddc 4a00 	vldr	s9, [ip]
 8011542:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8011546:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 801154a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 801154e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8011552:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8011556:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 801155a:	a85d      	add	r0, sp, #372	; 0x174
 801155c:	a93e      	add	r1, sp, #248	; 0xf8
 801155e:	edd7 5a00 	vldr	s11, [r7]
 8011562:	ed96 6a00 	vldr	s12, [r6]
 8011566:	9a06      	ldr	r2, [sp, #24]
 8011568:	ed95 7a00 	vldr	s14, [r5]
 801156c:	edd4 6a00 	vldr	s13, [r4]
 8011570:	ed93 3a00 	vldr	s6, [r3]
 8011574:	edde 7a00 	vldr	s15, [lr]
 8011578:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801157a:	edd2 1a00 	vldr	s3, [r2]
 801157e:	9e07      	ldr	r6, [sp, #28]
 8011580:	eee8 3a45 	vfms.f32	s7, s16, s10
 8011584:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011588:	eea8 6a65 	vfms.f32	s12, s16, s11
 801158c:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011590:	eee0 6a65 	vfms.f32	s13, s0, s11
 8011594:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011598:	ed94 0a00 	vldr	s0, [r4]
 801159c:	eea2 3a67 	vfms.f32	s6, s4, s15
 80115a0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80115a4:	eee2 6a46 	vfms.f32	s13, s4, s12
 80115a8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80115ac:	ee64 6a26 	vmul.f32	s13, s8, s13
 80115b0:	ee64 4a24 	vmul.f32	s9, s8, s9
 80115b4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80115b8:	eea1 6a66 	vfms.f32	s12, s2, s13
 80115bc:	eee4 3ac1 	vfms.f32	s7, s9, s2
 80115c0:	eee4 7a41 	vfms.f32	s15, s8, s2
 80115c4:	eee1 5ae6 	vfms.f32	s11, s3, s13
 80115c8:	eea4 5ae1 	vfms.f32	s10, s9, s3
 80115cc:	eea4 7a61 	vfms.f32	s14, s8, s3
 80115d0:	ed96 3a00 	vldr	s6, [r6]
 80115d4:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 80115d8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80115dc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80115e0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80115e4:	eea7 7ac3 	vfms.f32	s14, s15, s6
 80115e8:	eea3 5ac3 	vfms.f32	s10, s7, s6
 80115ec:	eee3 5a46 	vfms.f32	s11, s6, s12
 80115f0:	ee27 7a02 	vmul.f32	s14, s14, s4
 80115f4:	ee22 5a05 	vmul.f32	s10, s4, s10
 80115f8:	ee62 5a25 	vmul.f32	s11, s4, s11
 80115fc:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011600:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8011604:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011608:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 801160c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011610:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8011614:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011618:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 801161c:	f7fa faa0 	bl	800bb60 <b_dcm2q>
 8011620:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8011624:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8011628:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 801162c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8011630:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011634:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801163c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011640:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011644:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011648:	2b00      	cmp	r3, #0
 801164a:	f43d ad20 	beq.w	800f08e <kalman_3gyro.constprop.0+0x2576>
 801164e:	2200      	movs	r2, #0
 8011650:	9b01      	ldr	r3, [sp, #4]
 8011652:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011656:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801165a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801165e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011662:	f7fd bd9c 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011666:	edd3 7a02 	vldr	s15, [r3, #8]
 801166a:	ed93 7a01 	vldr	s14, [r3, #4]
 801166e:	edd3 6a03 	vldr	s13, [r3, #12]
 8011672:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011676:	eee7 7a07 	vfma.f32	s15, s14, s14
 801167a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801167e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8011682:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011686:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801168a:	f7ff bb12 	b.w	8010cb2 <kalman_3gyro.constprop.0+0x419a>
 801168e:	eeb0 7a64 	vmov.f32	s14, s9
 8011692:	f7fc bc8b 	b.w	800dfac <kalman_3gyro.constprop.0+0x1494>
 8011696:	eeb0 7a64 	vmov.f32	s14, s9
 801169a:	f7ff bb94 	b.w	8010dc6 <kalman_3gyro.constprop.0+0x42ae>
 801169e:	eeb0 7a64 	vmov.f32	s14, s9
 80116a2:	f7ff bb50 	b.w	8010d46 <kalman_3gyro.constprop.0+0x422e>
 80116a6:	eeb0 7a64 	vmov.f32	s14, s9
 80116aa:	f7fc bc9f 	b.w	800dfec <kalman_3gyro.constprop.0+0x14d4>
 80116ae:	eeb0 7a64 	vmov.f32	s14, s9
 80116b2:	f7ff bb68 	b.w	8010d86 <kalman_3gyro.constprop.0+0x426e>
 80116b6:	eeb0 7a64 	vmov.f32	s14, s9
 80116ba:	f7fc bcb7 	b.w	800e02c <kalman_3gyro.constprop.0+0x1514>
 80116be:	2200      	movs	r2, #0
 80116c0:	2004      	movs	r0, #4
 80116c2:	2301      	movs	r3, #1
 80116c4:	2406      	movs	r4, #6
 80116c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80116ca:	9007      	str	r0, [sp, #28]
 80116cc:	eef0 7a47 	vmov.f32	s15, s14
 80116d0:	4696      	mov	lr, r2
 80116d2:	f04f 0c03 	mov.w	ip, #3
 80116d6:	2707      	movs	r7, #7
 80116d8:	e61d      	b.n	8011316 <kalman_3gyro.constprop.0+0x47fe>
 80116da:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011a64 <kalman_3gyro.constprop.0+0x4f4c>
 80116de:	eeb0 7a64 	vmov.f32	s14, s9
 80116e2:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80116e6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	f140 80b9 	bpl.w	8011864 <kalman_3gyro.constprop.0+0x4d4c>
 80116f2:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80116f6:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80116fa:	ee38 3a47 	vsub.f32	s6, s16, s14
 80116fe:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011702:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011706:	ee64 4a03 	vmul.f32	s9, s8, s6
 801170a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801170e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011712:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8011716:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171e:	f6ff acb3 	blt.w	8011088 <kalman_3gyro.constprop.0+0x4570>
 8011722:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8011726:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172e:	f140 80a0 	bpl.w	8011872 <kalman_3gyro.constprop.0+0x4d5a>
 8011732:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8011736:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 801173a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801173e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011742:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011746:	ee64 4a03 	vmul.f32	s9, s8, s6
 801174a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801174e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011752:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011756:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175e:	f63f acb3 	bhi.w	80110c8 <kalman_3gyro.constprop.0+0x45b0>
 8011762:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8011766:	eef4 4ac8 	vcmpe.f32	s9, s16
 801176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176e:	f340 8086 	ble.w	801187e <kalman_3gyro.constprop.0+0x4d66>
 8011772:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8011776:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 801177a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801177e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011782:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011786:	ee64 4a03 	vmul.f32	s9, s8, s6
 801178a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801178e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011792:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8011796:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179e:	f63f acb3 	bhi.w	8011108 <kalman_3gyro.constprop.0+0x45f0>
 80117a2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80117a6:	eef4 4ac8 	vcmpe.f32	s9, s16
 80117aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ae:	dd69      	ble.n	8011884 <kalman_3gyro.constprop.0+0x4d6c>
 80117b0:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80117b4:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80117b8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80117bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80117c0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80117c4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80117c8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80117cc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80117d0:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80117d4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80117d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117dc:	f63f acb4 	bhi.w	8011148 <kalman_3gyro.constprop.0+0x4630>
 80117e0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80117e4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80117e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ec:	f77f acb4 	ble.w	8011158 <kalman_3gyro.constprop.0+0x4640>
 80117f0:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80117f4:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80117f8:	ee78 3a64 	vsub.f32	s7, s16, s9
 80117fc:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011800:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011804:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011808:	ee85 ba07 	vdiv.f32	s22, s10, s14
 801180c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011810:	f7fc bb7c 	b.w	800df0c <kalman_3gyro.constprop.0+0x13f4>
 8011814:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011818:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011a68 <kalman_3gyro.constprop.0+0x4f50>
 801181c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011a6c <kalman_3gyro.constprop.0+0x4f54>
 8011820:	3301      	adds	r3, #1
 8011822:	b29b      	uxth	r3, r3
 8011824:	2b31      	cmp	r3, #49	; 0x31
 8011826:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801182a:	bf98      	it	ls
 801182c:	eef0 7a47 	vmovls.f32	s15, s14
 8011830:	f7fd bc1c 	b.w	800f06c <kalman_3gyro.constprop.0+0x2554>
 8011834:	2a0a      	cmp	r2, #10
 8011836:	d02c      	beq.n	8011892 <kalman_3gyro.constprop.0+0x4d7a>
 8011838:	2100      	movs	r1, #0
 801183a:	3201      	adds	r2, #1
 801183c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011840:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011844:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011848:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801184c:	f7fd bca7 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011850:	eeb0 7a64 	vmov.f32	s14, s9
 8011854:	e7a5      	b.n	80117a2 <kalman_3gyro.constprop.0+0x4c8a>
 8011856:	2305      	movs	r3, #5
 8011858:	2108      	movs	r1, #8
 801185a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801185e:	2302      	movs	r3, #2
 8011860:	9302      	str	r3, [sp, #8]
 8011862:	e572      	b.n	801134a <kalman_3gyro.constprop.0+0x4832>
 8011864:	eeb0 7a64 	vmov.f32	s14, s9
 8011868:	f7ff bbf6 	b.w	8011058 <kalman_3gyro.constprop.0+0x4540>
 801186c:	eeb0 7a64 	vmov.f32	s14, s9
 8011870:	e757      	b.n	8011722 <kalman_3gyro.constprop.0+0x4c0a>
 8011872:	eeb0 7a64 	vmov.f32	s14, s9
 8011876:	e40f      	b.n	8011098 <kalman_3gyro.constprop.0+0x4580>
 8011878:	eeb0 7a64 	vmov.f32	s14, s9
 801187c:	e771      	b.n	8011762 <kalman_3gyro.constprop.0+0x4c4a>
 801187e:	eeb0 7a64 	vmov.f32	s14, s9
 8011882:	e429      	b.n	80110d8 <kalman_3gyro.constprop.0+0x45c0>
 8011884:	eeb0 7a64 	vmov.f32	s14, s9
 8011888:	e446      	b.n	8011118 <kalman_3gyro.constprop.0+0x4600>
 801188a:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011a64 <kalman_3gyro.constprop.0+0x4f4c>
 801188e:	f7fc bb6d 	b.w	800df6c <kalman_3gyro.constprop.0+0x1454>
 8011892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011894:	ed94 3a00 	vldr	s6, [r4]
 8011898:	edd2 5a00 	vldr	s11, [r2]
 801189c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801189e:	edd0 3a00 	vldr	s7, [r0]
 80118a2:	ed92 1a00 	vldr	s2, [r2]
 80118a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80118a8:	ed91 4a00 	vldr	s8, [r1]
 80118ac:	edd2 4a00 	vldr	s9, [r2]
 80118b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80118b2:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80118b6:	ed92 2a00 	vldr	s4, [r2]
 80118ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118bc:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 80118c0:	edd2 7a00 	vldr	s15, [r2]
 80118c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80118c6:	edd2 2a00 	vldr	s5, [r2]
 80118ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80118cc:	ee75 5a81 	vadd.f32	s11, s11, s2
 80118d0:	edd2 1a00 	vldr	s3, [r2]
 80118d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80118d6:	ee74 4a82 	vadd.f32	s9, s9, s4
 80118da:	ee75 5a83 	vadd.f32	s11, s11, s6
 80118de:	ed92 3a00 	vldr	s6, [r2]
 80118e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80118e4:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80118e8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80118ec:	edd2 3a00 	vldr	s7, [r2]
 80118f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80118f6:	ed92 4a00 	vldr	s8, [r2]
 80118fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118fc:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011900:	ed92 2a00 	vldr	s4, [r2]
 8011904:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011906:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 801190a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 801190e:	edd2 2a00 	vldr	s5, [r2]
 8011912:	ed91 3a00 	vldr	s6, [r1]
 8011916:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801191a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801191e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011922:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011926:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 801192a:	ed90 4a00 	vldr	s8, [r0]
 801192e:	edd2 3a00 	vldr	s7, [r2]
 8011932:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011936:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 801193a:	ed91 2a00 	vldr	s4, [r1]
 801193e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011942:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011946:	ee74 4a83 	vadd.f32	s9, s9, s6
 801194a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 801194e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011952:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011956:	ed90 4a00 	vldr	s8, [r0]
 801195a:	edd2 2a00 	vldr	s5, [r2]
 801195e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011962:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011966:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 801196a:	edd1 3a00 	vldr	s7, [r1]
 801196e:	ed90 3a00 	vldr	s6, [r0]
 8011972:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011976:	ee75 5a84 	vadd.f32	s11, s11, s8
 801197a:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 801197e:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011982:	ed92 4a00 	vldr	s8, [r2]
 8011986:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801198a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801198e:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011992:	edd0 3a00 	vldr	s7, [r0]
 8011996:	edd4 2a00 	vldr	s5, [r4]
 801199a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801199e:	ee75 5a83 	vadd.f32	s11, s11, s6
 80119a2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80119a6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80119aa:	ed91 3a00 	vldr	s6, [r1]
 80119ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80119b2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80119b6:	ed92 4a00 	vldr	s8, [r2]
 80119ba:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80119be:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 80119c2:	edd4 3a00 	vldr	s7, [r4]
 80119c6:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 80119ca:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80119ce:	ee77 7a84 	vadd.f32	s15, s15, s8
 80119d2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80119d6:	ed91 4a00 	vldr	s8, [r1]
 80119da:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80119de:	ee77 7a84 	vadd.f32	s15, s15, s8
 80119e2:	ee64 4a85 	vmul.f32	s9, s9, s10
 80119e6:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 80119ea:	ee65 5a85 	vmul.f32	s11, s11, s10
 80119ee:	edc1 4a00 	vstr	s9, [r1]
 80119f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80119f6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80119fa:	edc1 5a00 	vstr	s11, [r1]
 80119fe:	f240 1501 	movw	r5, #257	; 0x101
 8011a02:	3201      	adds	r2, #1
 8011a04:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011a08:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011a0c:	edc1 7a00 	vstr	s15, [r1]
 8011a10:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011a14:	2800      	cmp	r0, #0
 8011a16:	f43d abc2 	beq.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011a20:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011a24:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011a28:	f88b 2001 	strb.w	r2, [fp, #1]
 8011a2c:	f7fd bbb7 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011a30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011a34:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011a38:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011a3c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011a40:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011a44:	f7fd bb20 	b.w	800f088 <kalman_3gyro.constprop.0+0x2570>
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	f340 80c1 	ble.w	8011bd0 <kalman_3gyro.constprop.0+0x50b8>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011a54:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011a58:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011a5c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011a60:	f7fc bfcf 	b.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 8011a64:	00000000 	.word	0x00000000
 8011a68:	3e4cccce 	.word	0x3e4cccce
 8011a6c:	3eaaaaab 	.word	0x3eaaaaab
 8011a70:	3e999998 	.word	0x3e999998
 8011a74:	3f99999a 	.word	0x3f99999a
 8011a78:	3dccccd0 	.word	0x3dccccd0
 8011a7c:	3f8ccccd 	.word	0x3f8ccccd
 8011a80:	3e4ccccd 	.word	0x3e4ccccd
 8011a84:	3d088889 	.word	0x3d088889
 8011a88:	3d0d3dcb 	.word	0x3d0d3dcb
 8011a8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a98:	d55b      	bpl.n	8011b52 <kalman_3gyro.constprop.0+0x503a>
 8011a9a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011a78 <kalman_3gyro.constprop.0+0x4f60>
 8011a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011aa6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011aaa:	eef0 5a66 	vmov.f32	s11, s13
 8011aae:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011ab2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aba:	eeb0 7a65 	vmov.f32	s14, s11
 8011abe:	db5b      	blt.n	8011b78 <kalman_3gyro.constprop.0+0x5060>
 8011ac0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011acc:	d55b      	bpl.n	8011b86 <kalman_3gyro.constprop.0+0x506e>
 8011ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ad2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011ad6:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011a70 <kalman_3gyro.constprop.0+0x4f58>
 8011ada:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011a74 <kalman_3gyro.constprop.0+0x4f5c>
 8011ade:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011ae2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011ae6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aee:	db5b      	blt.n	8011ba8 <kalman_3gyro.constprop.0+0x5090>
 8011af0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afc:	d55b      	bpl.n	8011bb6 <kalman_3gyro.constprop.0+0x509e>
 8011afe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011b0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011b0e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011b12:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011b16:	f7ff bb7e 	b.w	8011216 <kalman_3gyro.constprop.0+0x46fe>
 8011b1a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011b1e:	2b27      	cmp	r3, #39	; 0x27
 8011b20:	f200 80c3 	bhi.w	8011caa <kalman_3gyro.constprop.0+0x5192>
 8011b24:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011b28:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011b2c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011b30:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011b34:	2201      	movs	r2, #1
 8011b36:	4413      	add	r3, r2
 8011b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b3c:	bf14      	ite	ne
 8011b3e:	b29b      	uxthne	r3, r3
 8011b40:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011b44:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011b48:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011b4c:	9b01      	ldr	r3, [sp, #4]
 8011b4e:	f7fd bb26 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5e:	d5af      	bpl.n	8011ac0 <kalman_3gyro.constprop.0+0x4fa8>
 8011b60:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011b64:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011a78 <kalman_3gyro.constprop.0+0x4f60>
 8011b68:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011a7c <kalman_3gyro.constprop.0+0x4f64>
 8011b6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011b70:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011b74:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011b78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	dbad      	blt.n	8011ae2 <kalman_3gyro.constprop.0+0x4fca>
 8011b86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b92:	d5ad      	bpl.n	8011af0 <kalman_3gyro.constprop.0+0x4fd8>
 8011b94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011b9c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011ba0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011ba4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011ba8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011bac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb4:	dbad      	blt.n	8011b12 <kalman_3gyro.constprop.0+0x4ffa>
 8011bb6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bbe:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011a80 <kalman_3gyro.constprop.0+0x4f68>
 8011bc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011bc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011bca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011bce:	e7a0      	b.n	8011b12 <kalman_3gyro.constprop.0+0x4ffa>
 8011bd0:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011bd4:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011bd8:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011bdc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011be0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011be4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011be8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011bec:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011bf0:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011bf4:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011bf8:	f7fc bf03 	b.w	800ea02 <kalman_3gyro.constprop.0+0x1eea>
 8011bfc:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011a84 <kalman_3gyro.constprop.0+0x4f6c>
 8011c00:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011a88 <kalman_3gyro.constprop.0+0x4f70>
 8011c04:	ac33      	add	r4, sp, #204	; 0xcc
 8011c06:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011c0e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011c12:	eef0 7a66 	vmov.f32	s15, s13
 8011c16:	3001      	adds	r0, #1
 8011c18:	461a      	mov	r2, r3
 8011c1a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011c1e:	320c      	adds	r2, #12
 8011c20:	428a      	cmp	r2, r1
 8011c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c26:	d1f8      	bne.n	8011c1a <kalman_3gyro.constprop.0+0x5102>
 8011c28:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011c2c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011c30:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011c34:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011c38:	330c      	adds	r3, #12
 8011c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c3e:	428b      	cmp	r3, r1
 8011c40:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011c44:	d1f6      	bne.n	8011c34 <kalman_3gyro.constprop.0+0x511c>
 8011c46:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011c4a:	2802      	cmp	r0, #2
 8011c4c:	f103 0104 	add.w	r1, r3, #4
 8011c50:	ece4 6a01 	vstmia	r4!, {s13}
 8011c54:	d1d9      	bne.n	8011c0a <kalman_3gyro.constprop.0+0x50f2>
 8011c56:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011c5a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011c5e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011c62:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011c66:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011c6a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c72:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c7a:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011c7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c86:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011c8a:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011c8e:	f57d aa62 	bpl.w	800f156 <kalman_3gyro.constprop.0+0x263e>
 8011c92:	2200      	movs	r2, #0
 8011c94:	9b01      	ldr	r3, [sp, #4]
 8011c96:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011c9a:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011c9e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011ca2:	f88b 2001 	strb.w	r2, [fp, #1]
 8011ca6:	f7fd ba7a 	b.w	800f19e <kalman_3gyro.constprop.0+0x2686>
 8011caa:	9b08      	ldr	r3, [sp, #32]
 8011cac:	6999      	ldr	r1, [r3, #24]
 8011cae:	69da      	ldr	r2, [r3, #28]
 8011cb0:	6a1b      	ldr	r3, [r3, #32]
 8011cb2:	9181      	str	r1, [sp, #516]	; 0x204
 8011cb4:	9282      	str	r2, [sp, #520]	; 0x208
 8011cb6:	9383      	str	r3, [sp, #524]	; 0x20c
 8011cb8:	e73a      	b.n	8011b30 <kalman_3gyro.constprop.0+0x5018>
 8011cba:	bf00      	nop
 8011cbc:	0000      	movs	r0, r0
	...

08011cc0 <iNemoEngine_API_Update>:
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc4:	ed2d 8b0c 	vpush	{d8-d13}
 8011cc8:	4604      	mov	r4, r0
 8011cca:	b0c1      	sub	sp, #260	; 0x104
 8011ccc:	460d      	mov	r5, r1
 8011cce:	4617      	mov	r7, r2
 8011cd0:	eeb0 8a40 	vmov.f32	s16, s0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 8253 	beq.w	8012180 <iNemoEngine_API_Update+0x4c0>
 8011cda:	461e      	mov	r6, r3
 8011cdc:	463b      	mov	r3, r7
 8011cde:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011ce2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011ce6:	6859      	ldr	r1, [r3, #4]
 8011ce8:	689a      	ldr	r2, [r3, #8]
 8011cea:	ab33      	add	r3, sp, #204	; 0xcc
 8011cec:	c307      	stmia	r3!, {r0, r1, r2}
 8011cee:	6879      	ldr	r1, [r7, #4]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	6838      	ldr	r0, [r7, #0]
 8011cf4:	ab30      	add	r3, sp, #192	; 0xc0
 8011cf6:	c307      	stmia	r3!, {r0, r1, r2}
 8011cf8:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011cfc:	6879      	ldr	r1, [r7, #4]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	ab36      	add	r3, sp, #216	; 0xd8
 8011d02:	c307      	stmia	r3!, {r0, r1, r2}
 8011d04:	f1bc 0f00 	cmp.w	ip, #0
 8011d08:	d005      	beq.n	8011d16 <iNemoEngine_API_Update+0x56>
 8011d0a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011d0e:	7923      	ldrb	r3, [r4, #4]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	f080 829b 	bcs.w	801224c <iNemoEngine_API_Update+0x58c>
 8011d16:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011d1a:	f10d 0a14 	add.w	sl, sp, #20
 8011d1e:	2300      	movs	r3, #0
 8011d20:	4649      	mov	r1, r9
 8011d22:	4650      	mov	r0, sl
 8011d24:	aa33      	add	r2, sp, #204	; 0xcc
 8011d26:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011d2a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011d2e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011d32:	f7f9 fb65 	bl	800b400 <rotVect>
 8011d36:	aa36      	add	r2, sp, #216	; 0xd8
 8011d38:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011d3c:	a808      	add	r0, sp, #32
 8011d3e:	f7f9 fb5f 	bl	800b400 <rotVect>
 8011d42:	aa30      	add	r2, sp, #192	; 0xc0
 8011d44:	4640      	mov	r0, r8
 8011d46:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011d4a:	f7f9 fb59 	bl	800b400 <rotVect>
 8011d4e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011d52:	b923      	cbnz	r3, 8011d5e <iNemoEngine_API_Update+0x9e>
 8011d54:	4b8c      	ldr	r3, [pc, #560]	; (8011f88 <iNemoEngine_API_Update+0x2c8>)
 8011d56:	930c      	str	r3, [sp, #48]	; 0x30
 8011d58:	2200      	movs	r2, #0
 8011d5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d5c:	930d      	str	r3, [sp, #52]	; 0x34
 8011d5e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011d62:	2f09      	cmp	r7, #9
 8011d64:	d851      	bhi.n	8011e0a <iNemoEngine_API_Update+0x14a>
 8011d66:	ed9d ba06 	vldr	s22, [sp, #24]
 8011d6a:	eddd ba05 	vldr	s23, [sp, #20]
 8011d6e:	eddd aa07 	vldr	s21, [sp, #28]
 8011d72:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011d76:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011d7a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011d7e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011d82:	ee17 0a90 	vmov	r0, s15
 8011d86:	f7ee fbdf 	bl	8000548 <__aeabi_f2d>
 8011d8a:	ec41 0b10 	vmov	d0, r0, r1
 8011d8e:	f003 ff5d 	bl	8015c4c <sqrt>
 8011d92:	ec51 0b10 	vmov	r0, r1, d0
 8011d96:	f7ee ff07 	bl	8000ba8 <__aeabi_d2f>
 8011d9a:	ee07 0a90 	vmov	s15, r0
 8011d9e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011da2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011da6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011daa:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011dae:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011db2:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011db6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011dba:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011dbe:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011dc2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011dc6:	ee17 0a90 	vmov	r0, s15
 8011dca:	edcd ba05 	vstr	s23, [sp, #20]
 8011dce:	ed8d ba06 	vstr	s22, [sp, #24]
 8011dd2:	edcd aa07 	vstr	s21, [sp, #28]
 8011dd6:	f7ee fbb7 	bl	8000548 <__aeabi_f2d>
 8011dda:	ec41 0b10 	vmov	d0, r0, r1
 8011dde:	f003 ff35 	bl	8015c4c <sqrt>
 8011de2:	ec51 0b10 	vmov	r0, r1, d0
 8011de6:	f7ee fedf 	bl	8000ba8 <__aeabi_d2f>
 8011dea:	ee07 0a90 	vmov	s15, r0
 8011dee:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011df2:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011df6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011dfa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011dfe:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011e02:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011e06:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011e0a:	7923      	ldrb	r3, [r4, #4]
 8011e0c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011e10:	429a      	cmp	r2, r3
 8011e12:	f080 80dd 	bcs.w	8011fd0 <iNemoEngine_API_Update+0x310>
 8011e16:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011e1a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011e1e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011e22:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011e26:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011e2a:	3701      	adds	r7, #1
 8011e2c:	aa33      	add	r2, sp, #204	; 0xcc
 8011e2e:	4649      	mov	r1, r9
 8011e30:	4640      	mov	r0, r8
 8011e32:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011e36:	9303      	str	r3, [sp, #12]
 8011e38:	f7f9 fae2 	bl	800b400 <rotVect>
 8011e3c:	9b03      	ldr	r3, [sp, #12]
 8011e3e:	f8db 1000 	ldr.w	r1, [fp]
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	f8da 2000 	ldr.w	r2, [sl]
 8011e48:	6833      	ldr	r3, [r6, #0]
 8011e4a:	61ab      	str	r3, [r5, #24]
 8011e4c:	60e8      	str	r0, [r5, #12]
 8011e4e:	6129      	str	r1, [r5, #16]
 8011e50:	616a      	str	r2, [r5, #20]
 8011e52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011e56:	9301      	str	r3, [sp, #4]
 8011e58:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011e5c:	4641      	mov	r1, r8
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	462a      	mov	r2, r5
 8011e62:	f105 031c 	add.w	r3, r5, #28
 8011e66:	f105 000c 	add.w	r0, r5, #12
 8011e6a:	f7fa fd85 	bl	800c978 <output_update>
 8011e6e:	ed95 8a00 	vldr	s16, [r5]
 8011e72:	edd5 9a01 	vldr	s19, [r5, #4]
 8011e76:	eeb0 0a48 	vmov.f32	s0, s16
 8011e7a:	f003 fe7b 	bl	8015b74 <sinf>
 8011e7e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011f8c <iNemoEngine_API_Update+0x2cc>
 8011e82:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011f90 <iNemoEngine_API_Update+0x2d0>
 8011e86:	ee60 8a00 	vmul.f32	s17, s0, s0
 8011e8a:	eef0 6ae9 	vabs.f32	s13, s19
 8011e8e:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011e92:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9a:	eef0 8a67 	vmov.f32	s17, s15
 8011e9e:	d56e      	bpl.n	8011f7e <iNemoEngine_API_Update+0x2be>
 8011ea0:	eeb0 0a69 	vmov.f32	s0, s19
 8011ea4:	f003 fea8 	bl	8015bf8 <tanf>
 8011ea8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011eac:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011eb0:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011eb4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011f94 <iNemoEngine_API_Update+0x2d4>
 8011eb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011fa8 <iNemoEngine_API_Update+0x2e8>
 8011ebc:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8011ec0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011ec4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	bf88      	it	hi
 8011ece:	eef0 7a66 	vmovhi.f32	s15, s13
 8011ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	bfb8      	it	lt
 8011edc:	eef0 7a47 	vmovlt.f32	s15, s14
 8011ee0:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011ee4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011ee8:	4c2b      	ldr	r4, [pc, #172]	; (8011f98 <iNemoEngine_API_Update+0x2d8>)
 8011eea:	bba3      	cbnz	r3, 8011f56 <iNemoEngine_API_Update+0x296>
 8011eec:	6820      	ldr	r0, [r4, #0]
 8011eee:	edd5 0a08 	vldr	s1, [r5, #32]
 8011ef2:	ed95 0a07 	vldr	s0, [r5, #28]
 8011ef6:	edd5 9a03 	vldr	s19, [r5, #12]
 8011efa:	ed95 aa04 	vldr	s20, [r5, #16]
 8011efe:	ed95 9a05 	vldr	s18, [r5, #20]
 8011f02:	edd5 8a06 	vldr	s17, [r5, #24]
 8011f06:	f7f9 fb4b 	bl	800b5a0 <findDirection>
 8011f0a:	6020      	str	r0, [r4, #0]
 8011f0c:	2805      	cmp	r0, #5
 8011f0e:	f200 833d 	bhi.w	801258c <iNemoEngine_API_Update+0x8cc>
 8011f12:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011f16:	000a      	.short	0x000a
 8011f18:	00060137 	.word	0x00060137
 8011f1c:	00060169 	.word	0x00060169
 8011f20:	000a      	.short	0x000a
 8011f22:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011f9c <iNemoEngine_API_Update+0x2dc>
 8011f26:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011f2a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011fcc <iNemoEngine_API_Update+0x30c>
 8011f2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f36:	bfa8      	it	ge
 8011f38:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8011f3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	f100 8111 	bmi.w	801216a <iNemoEngine_API_Update+0x4aa>
 8011f48:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011f4c:	b041      	add	sp, #260	; 0x104
 8011f4e:	ecbd 8b0c 	vpop	{d8-d13}
 8011f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f56:	ed95 9a05 	vldr	s18, [r5, #20]
 8011f5a:	6820      	ldr	r0, [r4, #0]
 8011f5c:	edd5 0a07 	vldr	s1, [r5, #28]
 8011f60:	ed95 0a08 	vldr	s0, [r5, #32]
 8011f64:	edd5 9a04 	vldr	s19, [r5, #16]
 8011f68:	ed95 aa03 	vldr	s20, [r5, #12]
 8011f6c:	edd5 8a06 	vldr	s17, [r5, #24]
 8011f70:	eeb1 1a41 	vneg.f32	s2, s2
 8011f74:	eeb1 9a49 	vneg.f32	s18, s18
 8011f78:	f7f9 fb12 	bl	800b5a0 <findDirection>
 8011f7c:	e7c5      	b.n	8011f0a <iNemoEngine_API_Update+0x24a>
 8011f7e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011fa0 <iNemoEngine_API_Update+0x2e0>
 8011f82:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8011f86:	e793      	b.n	8011eb0 <iNemoEngine_API_Update+0x1f0>
 8011f88:	3f333333 	.word	0x3f333333
 8011f8c:	00000000 	.word	0x00000000
 8011f90:	3fbc430e 	.word	0x3fbc430e
 8011f94:	40490fdb 	.word	0x40490fdb
 8011f98:	200002e0 	.word	0x200002e0
 8011f9c:	43340000 	.word	0x43340000
 8011fa0:	42c6ab07 	.word	0x42c6ab07
 8011fa4:	3c03126f 	.word	0x3c03126f
 8011fa8:	3c8efa35 	.word	0x3c8efa35
 8011fac:	3e4ccccd 	.word	0x3e4ccccd
 8011fb0:	3fb50481 	.word	0x3fb50481
 8011fb4:	3ed93dd9 	.word	0x3ed93dd9
 8011fb8:	3b656042 	.word	0x3b656042
 8011fbc:	42c80000 	.word	0x42c80000
 8011fc0:	3a83126f 	.word	0x3a83126f
 8011fc4:	3d4ccccd 	.word	0x3d4ccccd
 8011fc8:	3f333333 	.word	0x3f333333
 8011fcc:	43b40000 	.word	0x43b40000
 8011fd0:	ee07 3a90 	vmov	s15, r3
 8011fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fd8:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8011fa4 <iNemoEngine_API_Update+0x2e4>
 8011fdc:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8011fa8 <iNemoEngine_API_Update+0x2e8>
 8011fe0:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8011fb8 <iNemoEngine_API_Update+0x2f8>
 8011fe4:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8011fb4 <iNemoEngine_API_Update+0x2f4>
 8011fe8:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8011fb0 <iNemoEngine_API_Update+0x2f0>
 8011fec:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8011fac <iNemoEngine_API_Update+0x2ec>
 8011ff0:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011ff4:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011ff8:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8011ffc:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012000:	2700      	movs	r7, #0
 8012002:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8012006:	f04f 0c00 	mov.w	ip, #0
 801200a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 801200e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8012012:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8012016:	edd3 5a00 	vldr	s11, [r3]
 801201a:	f8c3 c000 	str.w	ip, [r3]
 801201e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8012022:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8012026:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801202a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801202e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8012032:	edd7 4a00 	vldr	s9, [r7]
 8012036:	f8c7 c000 	str.w	ip, [r7]
 801203a:	ed93 5a00 	vldr	s10, [r3]
 801203e:	f8c3 c000 	str.w	ip, [r3]
 8012042:	7963      	ldrb	r3, [r4, #5]
 8012044:	ee64 4a84 	vmul.f32	s9, s9, s8
 8012048:	ee25 5a04 	vmul.f32	s10, s10, s8
 801204c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8012050:	2b01      	cmp	r3, #1
 8012052:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8012056:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801205a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801205e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012062:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8012066:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 801206a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801206e:	f000 812e 	beq.w	80122ce <iNemoEngine_API_Update+0x60e>
 8012072:	2b02      	cmp	r3, #2
 8012074:	f000 8122 	beq.w	80122bc <iNemoEngine_API_Update+0x5fc>
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 80ef 	beq.w	801225c <iNemoEngine_API_Update+0x59c>
 801207e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012082:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8011fbc <iNemoEngine_API_Update+0x2fc>
 8012086:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8011fc0 <iNemoEngine_API_Update+0x300>
 801208a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801208e:	ee60 0a85 	vmul.f32	s1, s1, s10
 8012092:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012096:	8863      	ldrh	r3, [r4, #2]
 8012098:	1e5a      	subs	r2, r3, #1
 801209a:	2a12      	cmp	r2, #18
 801209c:	f200 80e7 	bhi.w	801226e <iNemoEngine_API_Update+0x5ae>
 80120a0:	3301      	adds	r3, #1
 80120a2:	b21a      	sxth	r2, r3
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	2b03      	cmp	r3, #3
 80120a8:	8062      	strh	r2, [r4, #2]
 80120aa:	f240 8115 	bls.w	80122d8 <iNemoEngine_API_Update+0x618>
 80120ae:	ee05 2a90 	vmov	s11, r2
 80120b2:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8011fc4 <iNemoEngine_API_Update+0x304>
 80120b6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80120ba:	ee65 5a85 	vmul.f32	s11, s11, s10
 80120be:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80120c2:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 80120c6:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 80120ca:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8011fc8 <iNemoEngine_API_Update+0x308>
 80120ce:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80120d2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80120d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80120da:	ee26 6a25 	vmul.f32	s12, s12, s11
 80120de:	ee27 7a05 	vmul.f32	s14, s14, s10
 80120e2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80120e6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80120ea:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80120ee:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80120f2:	aa1a      	add	r2, sp, #104	; 0x68
 80120f4:	af16      	add	r7, sp, #88	; 0x58
 80120f6:	e9cd 7200 	strd	r7, r2, [sp]
 80120fa:	ab12      	add	r3, sp, #72	; 0x48
 80120fc:	aa1e      	add	r2, sp, #120	; 0x78
 80120fe:	4641      	mov	r1, r8
 8012100:	4620      	mov	r0, r4
 8012102:	f7fa fd09 	bl	800cb18 <kalman_3gyro.constprop.0>
 8012106:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012108:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 801210c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8012110:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8012114:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8012118:	f8c7 a000 	str.w	sl, [r7]
 801211c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8012120:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8012124:	f8c7 e000 	str.w	lr, [r7]
 8012128:	f604 1748 	addw	r7, r4, #2376	; 0x948
 801212c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8012130:	f8c7 c000 	str.w	ip, [r7]
 8012134:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8012138:	6030      	str	r0, [r6, #0]
 801213a:	60f3      	str	r3, [r6, #12]
 801213c:	6071      	str	r1, [r6, #4]
 801213e:	60b2      	str	r2, [r6, #8]
 8012140:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8012144:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012148:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801214c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801214e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8012152:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8012156:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801215a:	edc3 7a00 	vstr	s15, [r3]
 801215e:	f8cb e000 	str.w	lr, [fp]
 8012162:	f8ca c000 	str.w	ip, [sl]
 8012166:	6030      	str	r0, [r6, #0]
 8012168:	e65f      	b.n	8011e2a <iNemoEngine_API_Update+0x16a>
 801216a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8011fcc <iNemoEngine_API_Update+0x30c>
 801216e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012172:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8012176:	b041      	add	sp, #260	; 0x104
 8012178:	ecbd 8b0c 	vpop	{d8-d13}
 801217c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012180:	ae0e      	add	r6, sp, #56	; 0x38
 8012182:	e5ab      	b.n	8011cdc <iNemoEngine_API_Update+0x1c>
 8012184:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012188:	ee69 8a28 	vmul.f32	s17, s18, s17
 801218c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012190:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012194:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012198:	eee9 7a49 	vfms.f32	s15, s18, s18
 801219c:	ee17 0a90 	vmov	r0, s15
 80121a0:	f7ee f9d2 	bl	8000548 <__aeabi_f2d>
 80121a4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80121a8:	4602      	mov	r2, r0
 80121aa:	460b      	mov	r3, r1
 80121ac:	ee17 0a90 	vmov	r0, s15
 80121b0:	ec43 2b18 	vmov	d8, r2, r3
 80121b4:	f7ee f9c8 	bl	8000548 <__aeabi_f2d>
 80121b8:	eeb0 1a48 	vmov.f32	s2, s16
 80121bc:	eef0 1a68 	vmov.f32	s3, s17
 80121c0:	ec41 0b10 	vmov	d0, r0, r1
 80121c4:	f003 fd40 	bl	8015c48 <atan2>
 80121c8:	a3f3      	add	r3, pc, #972	; (adr r3, 8012598 <iNemoEngine_API_Update+0x8d8>)
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	ec51 0b10 	vmov	r0, r1, d0
 80121d2:	f7ee fa11 	bl	80005f8 <__aeabi_dmul>
 80121d6:	4bf2      	ldr	r3, [pc, #968]	; (80125a0 <iNemoEngine_API_Update+0x8e0>)
 80121d8:	2200      	movs	r2, #0
 80121da:	f7ee f855 	bl	8000288 <__aeabi_dsub>
 80121de:	f7ee fce3 	bl	8000ba8 <__aeabi_d2f>
 80121e2:	ee08 0a10 	vmov	s16, r0
 80121e6:	e6a0      	b.n	8011f2a <iNemoEngine_API_Update+0x26a>
 80121e8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80121ec:	ee69 8a28 	vmul.f32	s17, s18, s17
 80121f0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80121f4:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80121f8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80121fc:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012200:	ee17 0a90 	vmov	r0, s15
 8012204:	f7ee f9a0 	bl	8000548 <__aeabi_f2d>
 8012208:	ee78 7aa8 	vadd.f32	s15, s17, s17
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	ee17 0a90 	vmov	r0, s15
 8012214:	ec43 2b18 	vmov	d8, r2, r3
 8012218:	f7ee f996 	bl	8000548 <__aeabi_f2d>
 801221c:	eeb0 1a48 	vmov.f32	s2, s16
 8012220:	eef0 1a68 	vmov.f32	s3, s17
 8012224:	ec41 0b10 	vmov	d0, r0, r1
 8012228:	f003 fd0e 	bl	8015c48 <atan2>
 801222c:	a3da      	add	r3, pc, #872	; (adr r3, 8012598 <iNemoEngine_API_Update+0x8d8>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	ec51 0b10 	vmov	r0, r1, d0
 8012236:	f7ee f9df 	bl	80005f8 <__aeabi_dmul>
 801223a:	4bd9      	ldr	r3, [pc, #868]	; (80125a0 <iNemoEngine_API_Update+0x8e0>)
 801223c:	2200      	movs	r2, #0
 801223e:	f7ee f825 	bl	800028c <__adddf3>
 8012242:	f7ee fcb1 	bl	8000ba8 <__aeabi_d2f>
 8012246:	ee08 0a10 	vmov	s16, r0
 801224a:	e66e      	b.n	8011f2a <iNemoEngine_API_Update+0x26a>
 801224c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012250:	2b00      	cmp	r3, #0
 8012252:	dd44      	ble.n	80122de <iNemoEngine_API_Update+0x61e>
 8012254:	3b01      	subs	r3, #1
 8012256:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801225a:	e55c      	b.n	8011d16 <iNemoEngine_API_Update+0x56>
 801225c:	8863      	ldrh	r3, [r4, #2]
 801225e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 80125a4 <iNemoEngine_API_Update+0x8e4>
 8012262:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80125a8 <iNemoEngine_API_Update+0x8e8>
 8012266:	1e5a      	subs	r2, r3, #1
 8012268:	2a12      	cmp	r2, #18
 801226a:	f67f af19 	bls.w	80120a0 <iNemoEngine_API_Update+0x3e0>
 801226e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8012272:	eddf 2ace 	vldr	s5, [pc, #824]	; 80125ac <iNemoEngine_API_Update+0x8ec>
 8012276:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 801227a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801227e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8012282:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8012286:	eec3 4a84 	vdiv.f32	s9, s7, s8
 801228a:	2300      	movs	r3, #0
 801228c:	8063      	strh	r3, [r4, #2]
 801228e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8012292:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8012296:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80125b0 <iNemoEngine_API_Update+0x8f0>
 801229a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 801229e:	ee65 6a26 	vmul.f32	s13, s10, s13
 80122a2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80122a6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80122aa:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 80122ae:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80122b2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80122b6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80122ba:	e71a      	b.n	80120f2 <iNemoEngine_API_Update+0x432>
 80122bc:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 80122c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80122c4:	edd4 0a05 	vldr	s1, [r4, #20]
 80122c8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80125b4 <iNemoEngine_API_Update+0x8f4>
 80122cc:	e6e3      	b.n	8012096 <iNemoEngine_API_Update+0x3d6>
 80122ce:	edd4 0a05 	vldr	s1, [r4, #20]
 80122d2:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80125b8 <iNemoEngine_API_Update+0x8f8>
 80122d6:	e6de      	b.n	8012096 <iNemoEngine_API_Update+0x3d6>
 80122d8:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80125bc <iNemoEngine_API_Update+0x8fc>
 80122dc:	e6ef      	b.n	80120be <iNemoEngine_API_Update+0x3fe>
 80122de:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 80122e2:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80122e6:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 80122ea:	ed97 5a00 	vldr	s10, [r7]
 80122ee:	ed92 da00 	vldr	s26, [r2]
 80122f2:	ed93 6a00 	vldr	s12, [r3]
 80122f6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80125a4 <iNemoEngine_API_Update+0x8e4>
 80122fa:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 80122fe:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8012302:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8012306:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 801230a:	ed91 3a00 	vldr	s6, [r1]
 801230e:	ed92 1a00 	vldr	s2, [r2]
 8012312:	ed97 7a00 	vldr	s14, [r7]
 8012316:	edd3 3a00 	vldr	s7, [r3]
 801231a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 801231e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8012322:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8012326:	ed91 ba00 	vldr	s22, [r1]
 801232a:	edd0 6a00 	vldr	s13, [r0]
 801232e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8012332:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8012336:	edd1 aa00 	vldr	s21, [r1]
 801233a:	ed92 2a00 	vldr	s4, [r2]
 801233e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8012342:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8012346:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 801234a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 801234e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8012352:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8012356:	edd0 7a00 	vldr	s15, [r0]
 801235a:	edd2 1a00 	vldr	s3, [r2]
 801235e:	ed93 ca00 	vldr	s24, [r3]
 8012362:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8012366:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 801236a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 801236e:	ed91 5a00 	vldr	s10, [r1]
 8012372:	edd0 5a00 	vldr	s11, [r0]
 8012376:	edd7 9a00 	vldr	s19, [r7]
 801237a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 801237e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8012382:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8012386:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 801238a:	edd0 2a00 	vldr	s5, [r0]
 801238e:	edd3 0a00 	vldr	s1, [r3]
 8012392:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8012396:	ee37 7a27 	vadd.f32	s14, s14, s15
 801239a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801239e:	edd7 7a00 	vldr	s15, [r7]
 80123a2:	edd0 5a00 	vldr	s11, [r0]
 80123a6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80123aa:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80123ae:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80123b2:	ed93 6a00 	vldr	s12, [r3]
 80123b6:	edda ba00 	vldr	s23, [sl]
 80123ba:	ed99 5a00 	vldr	s10, [r9]
 80123be:	ee76 6a83 	vadd.f32	s13, s13, s6
 80123c2:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 80123c6:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 80123ca:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80123ce:	eed7 5a84 	vfnms.f32	s11, s15, s8
 80123d2:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 80123d6:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 80123da:	eddc 4a00 	vldr	s9, [ip]
 80123de:	edd3 7a00 	vldr	s15, [r3]
 80123e2:	ed98 1a00 	vldr	s2, [r8]
 80123e6:	edde 8a00 	vldr	s17, [lr]
 80123ea:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 80123ee:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80123f2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80123f6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80123fa:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80123fe:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8012402:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8012406:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 801240a:	ed9c aa00 	vldr	s20, [ip]
 801240e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8012412:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8012416:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 801241a:	ed92 da00 	vldr	s26, [r2]
 801241e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8012422:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8012426:	ed91 ba00 	vldr	s22, [r1]
 801242a:	eef0 ca61 	vmov.f32	s25, s3
 801242e:	eddb 1a00 	vldr	s3, [fp]
 8012432:	edd3 ba00 	vldr	s23, [r3]
 8012436:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 801243a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 801243e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8012442:	1c53      	adds	r3, r2, #1
 8012444:	eeea 3a83 	vfma.f32	s7, s21, s6
 8012448:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 801244c:	edd8 aa00 	vldr	s21, [r8]
 8012450:	eee6 1a03 	vfma.f32	s3, s12, s6
 8012454:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8012458:	ed9e 6a00 	vldr	s12, [lr]
 801245c:	edd7 aa00 	vldr	s21, [r7]
 8012460:	eee6 7a03 	vfma.f32	s15, s12, s6
 8012464:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8012468:	ed9c 6a00 	vldr	s12, [ip]
 801246c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8012470:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8012474:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8012478:	ee2a 4a00 	vmul.f32	s8, s20, s0
 801247c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8012480:	ee62 2a80 	vmul.f32	s5, s5, s0
 8012484:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012488:	ed90 0a00 	vldr	s0, [r0]
 801248c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012490:	ee36 6a00 	vadd.f32	s12, s12, s0
 8012494:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012498:	ed91 0a00 	vldr	s0, [r1]
 801249c:	ee35 5a28 	vadd.f32	s10, s10, s17
 80124a0:	ee66 6a82 	vmul.f32	s13, s13, s4
 80124a4:	ee22 7a87 	vmul.f32	s14, s5, s14
 80124a8:	ee64 5a25 	vmul.f32	s11, s8, s11
 80124ac:	eee0 4a83 	vfma.f32	s9, s1, s6
 80124b0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80124b4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80124b8:	eea1 5a03 	vfma.f32	s10, s2, s6
 80124bc:	eea0 6a03 	vfma.f32	s12, s0, s6
 80124c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80124c4:	ee63 3a82 	vmul.f32	s7, s7, s4
 80124c8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80124cc:	ee62 1aa1 	vmul.f32	s3, s5, s3
 80124d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80124d4:	eee3 6aa3 	vfma.f32	s13, s7, s7
 80124d8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80124dc:	eea1 7aa1 	vfma.f32	s14, s3, s3
 80124e0:	ee24 6a06 	vmul.f32	s12, s8, s12
 80124e4:	ee62 4a24 	vmul.f32	s9, s4, s9
 80124e8:	ee22 5a85 	vmul.f32	s10, s5, s10
 80124ec:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80124f0:	eea5 7a05 	vfma.f32	s14, s10, s10
 80124f4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80124f8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80124fc:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012500:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012504:	ee07 3a90 	vmov	s15, r3
 8012508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801250c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012510:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8012514:	b21b      	sxth	r3, r3
 8012516:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801251a:	ee07 2a90 	vmov	s15, r2
 801251e:	ed90 4a00 	vldr	s8, [r0]
 8012522:	edd1 4a00 	vldr	s9, [r1]
 8012526:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801252a:	edd7 7a00 	vldr	s15, [r7]
 801252e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8012532:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8012536:	eea5 7aa4 	vfma.f32	s14, s11, s9
 801253a:	ee66 7a05 	vmul.f32	s15, s12, s10
 801253e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012542:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012546:	edc7 7a00 	vstr	s15, [r7]
 801254a:	edc0 6a00 	vstr	s13, [r0]
 801254e:	ed81 7a00 	vstr	s14, [r1]
 8012552:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8012556:	f47f abde 	bne.w	8011d16 <iNemoEngine_API_Update+0x56>
 801255a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801255e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012562:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012566:	ee67 7a86 	vmul.f32	s15, s15, s12
 801256a:	2300      	movs	r3, #0
 801256c:	2200      	movs	r2, #0
 801256e:	edc4 6a07 	vstr	s13, [r4, #28]
 8012572:	ed84 7a08 	vstr	s14, [r4, #32]
 8012576:	edc4 7a06 	vstr	s15, [r4, #24]
 801257a:	603b      	str	r3, [r7, #0]
 801257c:	6003      	str	r3, [r0, #0]
 801257e:	600b      	str	r3, [r1, #0]
 8012580:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8012584:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012588:	f7ff bbc5 	b.w	8011d16 <iNemoEngine_API_Update+0x56>
 801258c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80125c0 <iNemoEngine_API_Update+0x900>
 8012590:	e4da      	b.n	8011f48 <iNemoEngine_API_Update+0x288>
 8012592:	bf00      	nop
 8012594:	f3af 8000 	nop.w
 8012598:	20000000 	.word	0x20000000
 801259c:	404ca5dc 	.word	0x404ca5dc
 80125a0:	40568000 	.word	0x40568000
 80125a4:	3dcccccd 	.word	0x3dcccccd
 80125a8:	3a83126f 	.word	0x3a83126f
 80125ac:	358637bd 	.word	0x358637bd
 80125b0:	3f333333 	.word	0x3f333333
 80125b4:	3727c5ac 	.word	0x3727c5ac
 80125b8:	3ac49ba6 	.word	0x3ac49ba6
 80125bc:	3e4ccccd 	.word	0x3e4ccccd
 80125c0:	00000000 	.word	0x00000000

080125c4 <MEMS_getSensorData_I16>:
 80125c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125c8:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80125cc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80125d0:	68c5      	ldr	r5, [r0, #12]
 80125d2:	4596      	cmp	lr, r2
 80125d4:	fa1f f882 	uxth.w	r8, r2
 80125d8:	d94d      	bls.n	8012676 <MEMS_getSensorData_I16+0xb2>
 80125da:	f10e 33ff 	add.w	r3, lr, #4294967295
 80125de:	fb04 5313 	mls	r3, r4, r3, r5
 80125e2:	ebae 0c02 	sub.w	ip, lr, r2
 80125e6:	f8a1 8004 	strh.w	r8, [r1, #4]
 80125ea:	600b      	str	r3, [r1, #0]
 80125ec:	fa5f fc8c 	uxtb.w	ip, ip
 80125f0:	4647      	mov	r7, r8
 80125f2:	f1b8 0f00 	cmp.w	r8, #0
 80125f6:	d017      	beq.n	8012628 <MEMS_getSensorData_I16+0x64>
 80125f8:	688e      	ldr	r6, [r1, #8]
 80125fa:	6905      	ldr	r5, [r0, #16]
 80125fc:	2300      	movs	r3, #0
 80125fe:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8012602:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8012606:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801260a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801260e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8012612:	f8c1 9002 	str.w	r9, [r1, #2]
 8012616:	3301      	adds	r3, #1
 8012618:	88e4      	ldrh	r4, [r4, #6]
 801261a:	80cc      	strh	r4, [r1, #6]
 801261c:	b2d9      	uxtb	r1, r3
 801261e:	42b9      	cmp	r1, r7
 8012620:	460b      	mov	r3, r1
 8012622:	d3ec      	bcc.n	80125fe <MEMS_getSensorData_I16+0x3a>
 8012624:	45c6      	cmp	lr, r8
 8012626:	d934      	bls.n	8012692 <MEMS_getSensorData_I16+0xce>
 8012628:	ebae 0308 	sub.w	r3, lr, r8
 801262c:	b29b      	uxth	r3, r3
 801262e:	8103      	strh	r3, [r0, #8]
 8012630:	f1bc 0f00 	cmp.w	ip, #0
 8012634:	d01d      	beq.n	8012672 <MEMS_getSensorData_I16+0xae>
 8012636:	6903      	ldr	r3, [r0, #16]
 8012638:	f10c 3cff 	add.w	ip, ip, #4294967295
 801263c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012640:	f103 000a 	add.w	r0, r3, #10
 8012644:	fa5f fc8c 	uxtb.w	ip, ip
 8012648:	3202      	adds	r2, #2
 801264a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801264e:	3302      	adds	r3, #2
 8012650:	2400      	movs	r4, #0
 8012652:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012656:	f803 1c02 	strb.w	r1, [r3, #-2]
 801265a:	6811      	ldr	r1, [r2, #0]
 801265c:	6019      	str	r1, [r3, #0]
 801265e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012662:	8099      	strh	r1, [r3, #4]
 8012664:	3308      	adds	r3, #8
 8012666:	4283      	cmp	r3, r0
 8012668:	f802 4c02 	strb.w	r4, [r2, #-2]
 801266c:	f102 0208 	add.w	r2, r2, #8
 8012670:	d1ef      	bne.n	8012652 <MEMS_getSensorData_I16+0x8e>
 8012672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012676:	f10e 33ff 	add.w	r3, lr, #4294967295
 801267a:	fb04 5313 	mls	r3, r4, r3, r5
 801267e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012682:	600b      	str	r3, [r1, #0]
 8012684:	f1be 0f00 	cmp.w	lr, #0
 8012688:	d005      	beq.n	8012696 <MEMS_getSensorData_I16+0xd2>
 801268a:	4677      	mov	r7, lr
 801268c:	f04f 0c00 	mov.w	ip, #0
 8012690:	e7b2      	b.n	80125f8 <MEMS_getSensorData_I16+0x34>
 8012692:	2300      	movs	r3, #0
 8012694:	e7cb      	b.n	801262e <MEMS_getSensorData_I16+0x6a>
 8012696:	f8a0 e008 	strh.w	lr, [r0, #8]
 801269a:	e7ea      	b.n	8012672 <MEMS_getSensorData_I16+0xae>

0801269c <MEMS_SolveLinearEq>:
 801269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a0:	ed2d 8b0c 	vpush	{d8-d13}
 80126a4:	4617      	mov	r7, r2
 80126a6:	2400      	movs	r4, #0
 80126a8:	b0a9      	sub	sp, #164	; 0xa4
 80126aa:	2200      	movs	r2, #0
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	460d      	mov	r5, r1
 80126b0:	2240      	movs	r2, #64	; 0x40
 80126b2:	4621      	mov	r1, r4
 80126b4:	4680      	mov	r8, r0
 80126b6:	603c      	str	r4, [r7, #0]
 80126b8:	607c      	str	r4, [r7, #4]
 80126ba:	60bc      	str	r4, [r7, #8]
 80126bc:	60fc      	str	r4, [r7, #12]
 80126be:	a808      	add	r0, sp, #32
 80126c0:	461e      	mov	r6, r3
 80126c2:	eeb0 8a40 	vmov.f32	s16, s0
 80126c6:	e9cd 4400 	strd	r4, r4, [sp]
 80126ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80126ce:	f005 f855 	bl	801777c <memset>
 80126d2:	4621      	mov	r1, r4
 80126d4:	a818      	add	r0, sp, #96	; 0x60
 80126d6:	2240      	movs	r2, #64	; 0x40
 80126d8:	f005 f850 	bl	801777c <memset>
 80126dc:	edd5 2a03 	vldr	s5, [r5, #12]
 80126e0:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012a74 <MEMS_SolveLinearEq+0x3d8>
 80126e4:	eef4 2ae7 	vcmpe.f32	s5, s15
 80126e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ec:	d47e      	bmi.n	80127ec <MEMS_SolveLinearEq+0x150>
 80126ee:	f898 1000 	ldrb.w	r1, [r8]
 80126f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80126f6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80126fa:	4291      	cmp	r1, r2
 80126fc:	d07c      	beq.n	80127f8 <MEMS_SolveLinearEq+0x15c>
 80126fe:	3301      	adds	r3, #1
 8012700:	1a58      	subs	r0, r3, r1
 8012702:	fb90 f3f2 	sdiv	r3, r0, r2
 8012706:	fb02 0313 	mls	r3, r2, r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	bfb8      	it	lt
 801270e:	189b      	addlt	r3, r3, r2
 8012710:	b21b      	sxth	r3, r3
 8012712:	2900      	cmp	r1, #0
 8012714:	f000 81d6 	beq.w	8012ac4 <MEMS_SolveLinearEq+0x428>
 8012718:	3901      	subs	r1, #1
 801271a:	b2c9      	uxtb	r1, r1
 801271c:	3101      	adds	r1, #1
 801271e:	edd5 3a00 	vldr	s7, [r5]
 8012722:	ed95 4a01 	vldr	s8, [r5, #4]
 8012726:	edd5 4a02 	vldr	s9, [r5, #8]
 801272a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 801272e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012a78 <MEMS_SolveLinearEq+0x3dc>
 8012732:	4419      	add	r1, r3
 8012734:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012738:	fb93 f4f2 	sdiv	r4, r3, r2
 801273c:	fb02 3414 	mls	r4, r2, r4, r3
 8012740:	b2e4      	uxtb	r4, r4
 8012742:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012746:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 801274a:	ee07 0a90 	vmov	s15, r0
 801274e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012756:	ee06 0a10 	vmov	s12, r0
 801275a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801275e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8012762:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012766:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801276a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801276e:	ee07 0a10 	vmov	s14, r0
 8012772:	ee36 5a63 	vsub.f32	s10, s12, s7
 8012776:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801277a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801277e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8012782:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012786:	ee33 6ac6 	vsub.f32	s12, s7, s12
 801278a:	ee74 aac7 	vsub.f32	s21, s9, s14
 801278e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012792:	ee74 7a67 	vsub.f32	s15, s8, s15
 8012796:	eee7 6a07 	vfma.f32	s13, s14, s14
 801279a:	eef4 6ac2 	vcmpe.f32	s13, s4
 801279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a2:	d531      	bpl.n	8012808 <MEMS_SolveLinearEq+0x16c>
 80127a4:	3301      	adds	r3, #1
 80127a6:	4299      	cmp	r1, r3
 80127a8:	d1c6      	bne.n	8012738 <MEMS_SolveLinearEq+0x9c>
 80127aa:	eef0 7a65 	vmov.f32	s15, s11
 80127ae:	2101      	movs	r1, #1
 80127b0:	4608      	mov	r0, r1
 80127b2:	2200      	movs	r2, #0
 80127b4:	e006      	b.n	80127c4 <MEMS_SolveLinearEq+0x128>
 80127b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80127ba:	ac28      	add	r4, sp, #160	; 0xa0
 80127bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127c0:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 80127c4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80127c8:	3001      	adds	r0, #1
 80127ca:	ac28      	add	r4, sp, #160	; 0xa0
 80127cc:	b2c0      	uxtb	r0, r0
 80127ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127d2:	2804      	cmp	r0, #4
 80127d4:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 80127d8:	4613      	mov	r3, r2
 80127da:	d1ec      	bne.n	80127b6 <MEMS_SolveLinearEq+0x11a>
 80127dc:	1c48      	adds	r0, r1, #1
 80127de:	b2c0      	uxtb	r0, r0
 80127e0:	2804      	cmp	r0, #4
 80127e2:	d076      	beq.n	80128d2 <MEMS_SolveLinearEq+0x236>
 80127e4:	460b      	mov	r3, r1
 80127e6:	460a      	mov	r2, r1
 80127e8:	4601      	mov	r1, r0
 80127ea:	e7e4      	b.n	80127b6 <MEMS_SolveLinearEq+0x11a>
 80127ec:	2000      	movs	r0, #0
 80127ee:	b029      	add	sp, #164	; 0xa4
 80127f0:	ecbd 8b0c 	vpop	{d8-d13}
 80127f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	fb92 f3f1 	sdiv	r3, r2, r1
 80127fe:	fb01 2313 	mls	r3, r1, r3, r2
 8012802:	b21b      	sxth	r3, r3
 8012804:	460a      	mov	r2, r1
 8012806:	e784      	b.n	8012712 <MEMS_SolveLinearEq+0x76>
 8012808:	eef1 cae6 	vsqrt.f32	s25, s13
 801280c:	3301      	adds	r3, #1
 801280e:	428b      	cmp	r3, r1
 8012810:	ed9d ca00 	vldr	s24, [sp]
 8012814:	eddd ba08 	vldr	s23, [sp, #32]
 8012818:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 801281c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012820:	eddd 9a02 	vldr	s19, [sp, #8]
 8012824:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012828:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801282c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012830:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012834:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012838:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 801283c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012840:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012844:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012848:	ee3d da21 	vadd.f32	s26, s26, s3
 801284c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012850:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012854:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012858:	ee72 aaec 	vsub.f32	s21, s5, s25
 801285c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012860:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012864:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012868:	eeaa ca87 	vfma.f32	s24, s21, s14
 801286c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012870:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012874:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012878:	eea7 9aa7 	vfma.f32	s18, s15, s15
 801287c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012880:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012884:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012888:	ee30 6a06 	vadd.f32	s12, s0, s12
 801288c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012890:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012894:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012898:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801289c:	ed8d ca00 	vstr	s24, [sp]
 80128a0:	edcd ba08 	vstr	s23, [sp, #32]
 80128a4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80128a8:	ed8d aa01 	vstr	s20, [sp, #4]
 80128ac:	edcd 9a02 	vstr	s19, [sp, #8]
 80128b0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80128b4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80128b8:	ed8d 6a03 	vstr	s12, [sp, #12]
 80128bc:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80128c0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80128c4:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 80128c8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 80128cc:	f47f af34 	bne.w	8012738 <MEMS_SolveLinearEq+0x9c>
 80128d0:	e76b      	b.n	80127aa <MEMS_SolveLinearEq+0x10e>
 80128d2:	2240      	movs	r2, #64	; 0x40
 80128d4:	2100      	movs	r1, #0
 80128d6:	a818      	add	r0, sp, #96	; 0x60
 80128d8:	f004 ff50 	bl	801777c <memset>
 80128dc:	ab08      	add	r3, sp, #32
 80128de:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012a7c <MEMS_SolveLinearEq+0x3e0>
 80128e2:	4618      	mov	r0, r3
 80128e4:	aa18      	add	r2, sp, #96	; 0x60
 80128e6:	2100      	movs	r1, #0
 80128e8:	b24c      	sxtb	r4, r1
 80128ea:	2900      	cmp	r1, #0
 80128ec:	f000 80b5 	beq.w	8012a5a <MEMS_SolveLinearEq+0x3be>
 80128f0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80128f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80128f8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80128fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012900:	f53f af74 	bmi.w	80127ec <MEMS_SolveLinearEq+0x150>
 8012904:	ed93 7a00 	vldr	s14, [r3]
 8012908:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801290c:	2c01      	cmp	r4, #1
 801290e:	edc2 6a00 	vstr	s13, [r2]
 8012912:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801291a:	f000 80b5 	beq.w	8012a88 <MEMS_SolveLinearEq+0x3ec>
 801291e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012922:	eeb0 7ac6 	vabs.f32	s14, s12
 8012926:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292e:	f53f af5d 	bmi.w	80127ec <MEMS_SolveLinearEq+0x150>
 8012932:	ed93 7a01 	vldr	s14, [r3, #4]
 8012936:	ee37 7a67 	vsub.f32	s14, s14, s15
 801293a:	2c02      	cmp	r4, #2
 801293c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012940:	edc2 7a01 	vstr	s15, [r2, #4]
 8012944:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012948:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801294c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012950:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012954:	f000 80a7 	beq.w	8012aa6 <MEMS_SolveLinearEq+0x40a>
 8012958:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 801295c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012960:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012968:	f53f af40 	bmi.w	80127ec <MEMS_SolveLinearEq+0x150>
 801296c:	edd3 5a02 	vldr	s11, [r3, #8]
 8012970:	ed90 6a00 	vldr	s12, [r0]
 8012974:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012978:	eec7 5a24 	vdiv.f32	s11, s14, s9
 801297c:	edc2 5a02 	vstr	s11, [r2, #8]
 8012980:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012984:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012988:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801298c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012990:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012994:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012998:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a0:	f77f af24 	ble.w	80127ec <MEMS_SolveLinearEq+0x150>
 80129a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80129a8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80129ac:	ed82 7a03 	vstr	s14, [r2, #12]
 80129b0:	3101      	adds	r1, #1
 80129b2:	2904      	cmp	r1, #4
 80129b4:	f103 0310 	add.w	r3, r3, #16
 80129b8:	f102 0210 	add.w	r2, r2, #16
 80129bc:	f100 0014 	add.w	r0, r0, #20
 80129c0:	d192      	bne.n	80128e8 <MEMS_SolveLinearEq+0x24c>
 80129c2:	466a      	mov	r2, sp
 80129c4:	4639      	mov	r1, r7
 80129c6:	a818      	add	r0, sp, #96	; 0x60
 80129c8:	f7f9 f9f2 	bl	800bdb0 <llEvaluate.constprop.0>
 80129cc:	4b2c      	ldr	r3, [pc, #176]	; (8012a80 <MEMS_SolveLinearEq+0x3e4>)
 80129ce:	6033      	str	r3, [r6, #0]
 80129d0:	f10d 0910 	add.w	r9, sp, #16
 80129d4:	46e8      	mov	r8, sp
 80129d6:	f10d 0b0c 	add.w	fp, sp, #12
 80129da:	2400      	movs	r4, #0
 80129dc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80129e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80129e4:	e9cd 4400 	strd	r4, r4, [sp]
 80129e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80129ec:	466a      	mov	r2, sp
 80129ee:	f848 ab04 	str.w	sl, [r8], #4
 80129f2:	a904      	add	r1, sp, #16
 80129f4:	a818      	add	r0, sp, #96	; 0x60
 80129f6:	f7f9 f9db 	bl	800bdb0 <llEvaluate.constprop.0>
 80129fa:	ecf9 7a01 	vldmia	r9!, {s15}
 80129fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a06:	dd23      	ble.n	8012a50 <MEMS_SolveLinearEq+0x3b4>
 8012a08:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012a0c:	edd6 7a00 	vldr	s15, [r6]
 8012a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	bfb8      	it	lt
 8012a1a:	eef0 7a47 	vmovlt.f32	s15, s14
 8012a1e:	45c3      	cmp	fp, r8
 8012a20:	edc6 7a00 	vstr	s15, [r6]
 8012a24:	d1de      	bne.n	80129e4 <MEMS_SolveLinearEq+0x348>
 8012a26:	edd5 7a03 	vldr	s15, [r5, #12]
 8012a2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a2e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012a32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a36:	2001      	movs	r0, #1
 8012a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a40:	bf48      	it	mi
 8012a42:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012a46:	b029      	add	sp, #164	; 0xa4
 8012a48:	ecbd 8b0c 	vpop	{d8-d13}
 8012a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a50:	45c3      	cmp	fp, r8
 8012a52:	ed86 0a00 	vstr	s0, [r6]
 8012a56:	d1c5      	bne.n	80129e4 <MEMS_SolveLinearEq+0x348>
 8012a58:	e7e5      	b.n	8012a26 <MEMS_SolveLinearEq+0x38a>
 8012a5a:	edd0 7a00 	vldr	s15, [r0]
 8012a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a66:	f77f aec1 	ble.w	80127ec <MEMS_SolveLinearEq+0x150>
 8012a6a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012a6e:	ed82 7a00 	vstr	s14, [r2]
 8012a72:	e79d      	b.n	80129b0 <MEMS_SolveLinearEq+0x314>
 8012a74:	3dcccccd 	.word	0x3dcccccd
 8012a78:	2b8cbccb 	.word	0x2b8cbccb
 8012a7c:	358637bd 	.word	0x358637bd
 8012a80:	3dcccccd 	.word	0x3dcccccd
 8012a84:	00000000 	.word	0x00000000
 8012a88:	ed90 7a00 	vldr	s14, [r0]
 8012a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a94:	f77f aeaa 	ble.w	80127ec <MEMS_SolveLinearEq+0x150>
 8012a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a9c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012aa0:	ed82 7a01 	vstr	s14, [r2, #4]
 8012aa4:	e784      	b.n	80129b0 <MEMS_SolveLinearEq+0x314>
 8012aa6:	edd0 7a00 	vldr	s15, [r0]
 8012aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab2:	f77f ae9b 	ble.w	80127ec <MEMS_SolveLinearEq+0x150>
 8012ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012aba:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012abe:	ed82 7a02 	vstr	s14, [r2, #8]
 8012ac2:	e775      	b.n	80129b0 <MEMS_SolveLinearEq+0x314>
 8012ac4:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012a84 <MEMS_SolveLinearEq+0x3e8>
 8012ac8:	e671      	b.n	80127ae <MEMS_SolveLinearEq+0x112>
 8012aca:	bf00      	nop

08012acc <MEMS_EIG3>:
 8012acc:	edd0 6a02 	vldr	s13, [r0, #8]
 8012ad0:	ed90 7a01 	vldr	s14, [r0, #4]
 8012ad4:	edd0 4a04 	vldr	s9, [r0, #16]
 8012ad8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012c28 <MEMS_EIG3+0x15c>
 8012adc:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012ae0:	b510      	push	{r4, lr}
 8012ae2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	ed2d 8b04 	vpush	{d8-d9}
 8012aec:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012af0:	b08a      	sub	sp, #40	; 0x28
 8012af2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afa:	d509      	bpl.n	8012b10 <MEMS_EIG3+0x44>
 8012afc:	6803      	ldr	r3, [r0, #0]
 8012afe:	600b      	str	r3, [r1, #0]
 8012b00:	68c3      	ldr	r3, [r0, #12]
 8012b02:	604b      	str	r3, [r1, #4]
 8012b04:	6943      	ldr	r3, [r0, #20]
 8012b06:	608b      	str	r3, [r1, #8]
 8012b08:	b00a      	add	sp, #40	; 0x28
 8012b0a:	ecbd 8b04 	vpop	{d8-d9}
 8012b0e:	bd10      	pop	{r4, pc}
 8012b10:	ed90 4a00 	vldr	s8, [r0]
 8012b14:	edd0 5a03 	vldr	s11, [r0, #12]
 8012b18:	edd0 2a05 	vldr	s5, [r0, #20]
 8012b1c:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012c2c <MEMS_EIG3+0x160>
 8012b20:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012c30 <MEMS_EIG3+0x164>
 8012b24:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012b28:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012b2c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012b30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b34:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012b38:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012b3c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012b40:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012b44:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012b48:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012b4c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012b50:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012b54:	eef0 7a45 	vmov.f32	s15, s10
 8012b58:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012b5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012b60:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012b64:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012b68:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012b6c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012b70:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012b74:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012b78:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012b7c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012b80:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012b84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012b88:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012b8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b90:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012b94:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012b98:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012b9c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012ba0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012ba4:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bac:	d909      	bls.n	8012bc2 <MEMS_EIG3+0xf6>
 8012bae:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb6:	db22      	blt.n	8012bfe <MEMS_EIG3+0x132>
 8012bb8:	eeb0 9a40 	vmov.f32	s18, s0
 8012bbc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012c34 <MEMS_EIG3+0x168>
 8012bc0:	e003      	b.n	8012bca <MEMS_EIG3+0xfe>
 8012bc2:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012c38 <MEMS_EIG3+0x16c>
 8012bc6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012bca:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012bce:	eef0 7a48 	vmov.f32	s15, s16
 8012bd2:	eeb0 7a48 	vmov.f32	s14, s16
 8012bd6:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012bda:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012bde:	edc4 7a00 	vstr	s15, [r4]
 8012be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012be6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012bea:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012bee:	ed84 7a02 	vstr	s14, [r4, #8]
 8012bf2:	edc4 7a01 	vstr	s15, [r4, #4]
 8012bf6:	b00a      	add	sp, #40	; 0x28
 8012bf8:	ecbd 8b04 	vpop	{d8-d9}
 8012bfc:	bd10      	pop	{r4, pc}
 8012bfe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012c02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c06:	f003 f855 	bl	8015cb4 <acosf>
 8012c0a:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012c0e:	eeb0 0a69 	vmov.f32	s0, s19
 8012c12:	f002 ff49 	bl	8015aa8 <cosf>
 8012c16:	eeb0 9a40 	vmov.f32	s18, s0
 8012c1a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012c3c <MEMS_EIG3+0x170>
 8012c1e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012c22:	f002 ff41 	bl	8015aa8 <cosf>
 8012c26:	e7d0      	b.n	8012bca <MEMS_EIG3+0xfe>
 8012c28:	358637bd 	.word	0x358637bd
 8012c2c:	3eaaaaab 	.word	0x3eaaaaab
 8012c30:	3e2aaaab 	.word	0x3e2aaaab
 8012c34:	bf000001 	.word	0xbf000001
 8012c38:	3effffff 	.word	0x3effffff
 8012c3c:	40060a92 	.word	0x40060a92

08012c40 <MEMS_runMagCal>:
 8012c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	ed2d 8b0a 	vpush	{d8-d12}
 8012c48:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012c4c:	2282      	movs	r2, #130	; 0x82
 8012c4e:	ab36      	add	r3, sp, #216	; 0xd8
 8012c50:	460c      	mov	r4, r1
 8012c52:	9105      	str	r1, [sp, #20]
 8012c54:	4683      	mov	fp, r0
 8012c56:	4608      	mov	r0, r1
 8012c58:	a917      	add	r1, sp, #92	; 0x5c
 8012c5a:	9319      	str	r3, [sp, #100]	; 0x64
 8012c5c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012c60:	f7ff fcb0 	bl	80125c4 <MEMS_getSensorData_I16>
 8012c64:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012c68:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012c6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c70:	f108 31ff 	add.w	r1, r8, #4294967295
 8012c74:	9106      	str	r1, [sp, #24]
 8012c76:	fb01 2103 	mla	r1, r1, r3, r2
 8012c7a:	9108      	str	r1, [sp, #32]
 8012c7c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012c80:	f1b8 0f00 	cmp.w	r8, #0
 8012c84:	f000 8417 	beq.w	80134b6 <MEMS_runMagCal+0x876>
 8012c88:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c90:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012c94:	fb02 f203 	mul.w	r2, r2, r3
 8012c98:	31a0      	adds	r1, #160	; 0xa0
 8012c9a:	4291      	cmp	r1, r2
 8012c9c:	f080 8411 	bcs.w	80134c2 <MEMS_runMagCal+0x882>
 8012ca0:	3b00      	subs	r3, #0
 8012ca2:	bf18      	it	ne
 8012ca4:	2301      	movne	r3, #1
 8012ca6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012cb0:	f8cb 200c 	str.w	r2, [fp, #12]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012cba:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012cbe:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012cc2:	22ff      	movs	r2, #255	; 0xff
 8012cc4:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012cc8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012ccc:	4cd5      	ldr	r4, [pc, #852]	; (8013024 <MEMS_runMagCal+0x3e4>)
 8012cce:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8013030 <MEMS_runMagCal+0x3f0>
 8012cd2:	9b05      	ldr	r3, [sp, #20]
 8012cd4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012cd8:	edd3 5a01 	vldr	s11, [r3, #4]
 8012cdc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012ce0:	4652      	mov	r2, sl
 8012ce2:	2a03      	cmp	r2, #3
 8012ce4:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012ce8:	bf28      	it	cs
 8012cea:	2203      	movcs	r2, #3
 8012cec:	2100      	movs	r1, #0
 8012cee:	9207      	str	r2, [sp, #28]
 8012cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8012cf4:	464b      	mov	r3, r9
 8012cf6:	9402      	str	r4, [sp, #8]
 8012cf8:	4627      	mov	r7, r4
 8012cfa:	9503      	str	r5, [sp, #12]
 8012cfc:	462e      	mov	r6, r5
 8012cfe:	460a      	mov	r2, r1
 8012d00:	9404      	str	r4, [sp, #16]
 8012d02:	7818      	ldrb	r0, [r3, #0]
 8012d04:	3201      	adds	r2, #1
 8012d06:	b292      	uxth	r2, r2
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d04b      	beq.n	8012da4 <MEMS_runMagCal+0x164>
 8012d0c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012d10:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012d14:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012d18:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012d1c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012d20:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012d24:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012d28:	9c02      	ldr	r4, [sp, #8]
 8012d2a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012d2e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012d32:	ee07 ea90 	vmov	s15, lr
 8012d36:	ee07 ca10 	vmov	s14, ip
 8012d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d42:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012d46:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012d4a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012d4e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012d56:	4574      	cmp	r4, lr
 8012d58:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012d5c:	bfb8      	it	lt
 8012d5e:	4674      	movlt	r4, lr
 8012d60:	9402      	str	r4, [sp, #8]
 8012d62:	ee07 0a10 	vmov	s14, r0
 8012d66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d6a:	9c03      	ldr	r4, [sp, #12]
 8012d6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012d70:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012d74:	4574      	cmp	r4, lr
 8012d76:	bfa8      	it	ge
 8012d78:	4674      	movge	r4, lr
 8012d7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d7e:	4567      	cmp	r7, ip
 8012d80:	9403      	str	r4, [sp, #12]
 8012d82:	9c04      	ldr	r4, [sp, #16]
 8012d84:	bfb8      	it	lt
 8012d86:	4667      	movlt	r7, ip
 8012d88:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012d8c:	4566      	cmp	r6, ip
 8012d8e:	bfa8      	it	ge
 8012d90:	4666      	movge	r6, ip
 8012d92:	4284      	cmp	r4, r0
 8012d94:	bfb8      	it	lt
 8012d96:	4604      	movlt	r4, r0
 8012d98:	3101      	adds	r1, #1
 8012d9a:	4285      	cmp	r5, r0
 8012d9c:	b249      	sxtb	r1, r1
 8012d9e:	9404      	str	r4, [sp, #16]
 8012da0:	bfa8      	it	ge
 8012da2:	4605      	movge	r5, r0
 8012da4:	9807      	ldr	r0, [sp, #28]
 8012da6:	4282      	cmp	r2, r0
 8012da8:	f103 0308 	add.w	r3, r3, #8
 8012dac:	d9a9      	bls.n	8012d02 <MEMS_runMagCal+0xc2>
 8012dae:	4590      	cmp	r8, r2
 8012db0:	9c04      	ldr	r4, [sp, #16]
 8012db2:	f240 8767 	bls.w	8013c84 <MEMS_runMagCal+0x1044>
 8012db6:	ebaa 0a02 	sub.w	sl, sl, r2
 8012dba:	fa12 fa8a 	uxtah	sl, r2, sl
 8012dbe:	f109 0308 	add.w	r3, r9, #8
 8012dc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012dc6:	9307      	str	r3, [sp, #28]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	7813      	ldrb	r3, [r2, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	f000 8096 	beq.w	8012f04 <MEMS_runMagCal+0x2c4>
 8012dd8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012ddc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012de0:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012de4:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012de8:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012dec:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012df0:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012df4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012df8:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012dfc:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012e00:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012e04:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012e08:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012e0c:	ebae 0808 	sub.w	r8, lr, r8
 8012e10:	eba0 000a 	sub.w	r0, r0, sl
 8012e14:	ee07 ca10 	vmov	s14, ip
 8012e18:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012e1c:	ee07 0a90 	vmov	s15, r0
 8012e20:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012e24:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012e28:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012e2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e30:	eba3 030a 	sub.w	r3, r3, sl
 8012e34:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e3c:	ee06 ea90 	vmov	s13, lr
 8012e40:	ebac 0909 	sub.w	r9, ip, r9
 8012e44:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012e48:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8012e50:	ee06 9a90 	vmov	s13, r9
 8012e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e60:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012e64:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012e68:	eef0 6ae6 	vabs.f32	s13, s13
 8012e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e70:	eba0 0808 	sub.w	r8, r0, r8
 8012e74:	ee06 0a90 	vmov	s13, r0
 8012e78:	eba3 0309 	sub.w	r3, r3, r9
 8012e7c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012e80:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012e84:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012e88:	9b02      	ldr	r3, [sp, #8]
 8012e8a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8012e8e:	4577      	cmp	r7, lr
 8012e90:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012e94:	ee06 8a90 	vmov	s13, r8
 8012e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e9c:	bfb8      	it	lt
 8012e9e:	4677      	movlt	r7, lr
 8012ea0:	4576      	cmp	r6, lr
 8012ea2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012ea6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012eaa:	bfa8      	it	ge
 8012eac:	4676      	movge	r6, lr
 8012eae:	4563      	cmp	r3, ip
 8012eb0:	bfb8      	it	lt
 8012eb2:	4663      	movlt	r3, ip
 8012eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012eb8:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012ebc:	9302      	str	r3, [sp, #8]
 8012ebe:	9b03      	ldr	r3, [sp, #12]
 8012ec0:	eef0 6ae6 	vabs.f32	s13, s13
 8012ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ec8:	4563      	cmp	r3, ip
 8012eca:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012ece:	bfa8      	it	ge
 8012ed0:	4663      	movge	r3, ip
 8012ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ed6:	4284      	cmp	r4, r0
 8012ed8:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012edc:	bfb8      	it	lt
 8012ede:	4604      	movlt	r4, r0
 8012ee0:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012ee4:	4285      	cmp	r5, r0
 8012ee6:	bfa8      	it	ge
 8012ee8:	4605      	movge	r5, r0
 8012eea:	9303      	str	r3, [sp, #12]
 8012eec:	ee17 0a90 	vmov	r0, s15
 8012ef0:	9b04      	ldr	r3, [sp, #16]
 8012ef2:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012ef6:	4283      	cmp	r3, r0
 8012ef8:	f101 0101 	add.w	r1, r1, #1
 8012efc:	bf38      	it	cc
 8012efe:	4603      	movcc	r3, r0
 8012f00:	b249      	sxtb	r1, r1
 8012f02:	9304      	str	r3, [sp, #16]
 8012f04:	9b07      	ldr	r3, [sp, #28]
 8012f06:	3208      	adds	r2, #8
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	f47f af61 	bne.w	8012dd0 <MEMS_runMagCal+0x190>
 8012f0e:	2900      	cmp	r1, #0
 8012f10:	f000 86b6 	beq.w	8013c80 <MEMS_runMagCal+0x1040>
 8012f14:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012f18:	f280 82df 	bge.w	80134da <MEMS_runMagCal+0x89a>
 8012f1c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012f20:	f2c0 82db 	blt.w	80134da <MEMS_runMagCal+0x89a>
 8012f24:	9b02      	ldr	r3, [sp, #8]
 8012f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f2a:	f280 82d6 	bge.w	80134da <MEMS_runMagCal+0x89a>
 8012f2e:	9a03      	ldr	r2, [sp, #12]
 8012f30:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012f34:	f2c0 82d1 	blt.w	80134da <MEMS_runMagCal+0x89a>
 8012f38:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8012f3c:	f280 82cd 	bge.w	80134da <MEMS_runMagCal+0x89a>
 8012f40:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012f44:	f2c0 82c9 	blt.w	80134da <MEMS_runMagCal+0x89a>
 8012f48:	ee07 1a90 	vmov	s15, r1
 8012f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012f50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012f54:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012f58:	1bbe      	subs	r6, r7, r6
 8012f5a:	1a9f      	subs	r7, r3, r2
 8012f5c:	42be      	cmp	r6, r7
 8012f5e:	4633      	mov	r3, r6
 8012f60:	eba4 0405 	sub.w	r4, r4, r5
 8012f64:	bfb8      	it	lt
 8012f66:	463b      	movlt	r3, r7
 8012f68:	42a3      	cmp	r3, r4
 8012f6a:	bfb8      	it	lt
 8012f6c:	4623      	movlt	r3, r4
 8012f6e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8012f72:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012f76:	ee07 3a10 	vmov	s14, r3
 8012f7a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013028 <MEMS_runMagCal+0x3e8>
 8012f7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f86:	ee25 0a80 	vmul.f32	s0, s11, s0
 8012f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f92:	f100 82a2 	bmi.w	80134da <MEMS_runMagCal+0x89a>
 8012f96:	eddd 7a04 	vldr	s15, [sp, #16]
 8012f9a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 801302c <MEMS_runMagCal+0x3ec>
 8012f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fa2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012fa6:	eef4 5ac6 	vcmpe.f32	s11, s12
 8012faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fae:	f300 8294 	bgt.w	80134da <MEMS_runMagCal+0x89a>
 8012fb2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012fb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012fba:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc2:	f301 81f8 	bgt.w	80143b6 <MEMS_runMagCal+0x1776>
 8012fc6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd6:	f340 8552 	ble.w	8013a7e <MEMS_runMagCal+0xe3e>
 8012fda:	ee07 6a90 	vmov	s15, r6
 8012fde:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fe6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fee:	f340 8546 	ble.w	8013a7e <MEMS_runMagCal+0xe3e>
 8012ff2:	ee07 7a90 	vmov	s15, r7
 8012ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ffa:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013002:	f140 853c 	bpl.w	8013a7e <MEMS_runMagCal+0xe3e>
 8013006:	ee07 4a90 	vmov	s15, r4
 801300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801300e:	2300      	movs	r3, #0
 8013010:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013018:	9303      	str	r3, [sp, #12]
 801301a:	bf48      	it	mi
 801301c:	2301      	movmi	r3, #1
 801301e:	9307      	str	r3, [sp, #28]
 8013020:	f000 bd30 	b.w	8013a84 <MEMS_runMagCal+0xe44>
 8013024:	ffff8000 	.word	0xffff8000
 8013028:	43020000 	.word	0x43020000
 801302c:	447a0000 	.word	0x447a0000
 8013030:	00000000 	.word	0x00000000
 8013034:	41f00001 	.word	0x41f00001
 8013038:	400ccccd 	.word	0x400ccccd
 801303c:	3dcccccd 	.word	0x3dcccccd
 8013040:	423c0000 	.word	0x423c0000
 8013044:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8013030 <MEMS_runMagCal+0x3f0>
 8013048:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8013034 <MEMS_runMagCal+0x3f4>
 801304c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013050:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013058:	dc10      	bgt.n	801307c <MEMS_runMagCal+0x43c>
 801305a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8013038 <MEMS_runMagCal+0x3f8>
 801305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013066:	dc09      	bgt.n	801307c <MEMS_runMagCal+0x43c>
 8013068:	ed94 9a03 	vldr	s18, [r4, #12]
 801306c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801303c <MEMS_runMagCal+0x3fc>
 8013070:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013078:	f201 8527 	bhi.w	8014aca <MEMS_runMagCal+0x1e8a>
 801307c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8013040 <MEMS_runMagCal+0x400>
 8013080:	edd4 6a03 	vldr	s13, [r4, #12]
 8013084:	ed94 5a00 	vldr	s10, [r4]
 8013088:	edd4 5a01 	vldr	s11, [r4, #4]
 801308c:	ed94 6a02 	vldr	s12, [r4, #8]
 8013090:	edc4 7a06 	vstr	s15, [r4, #24]
 8013094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013098:	ad2e      	add	r5, sp, #184	; 0xb8
 801309a:	2300      	movs	r3, #0
 801309c:	e9c5 3300 	strd	r3, r3, [r5]
 80130a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80130a4:	60ab      	str	r3, [r5, #8]
 80130a6:	61ab      	str	r3, [r5, #24]
 80130a8:	4be7      	ldr	r3, [pc, #924]	; (8013448 <MEMS_runMagCal+0x808>)
 80130aa:	9311      	str	r3, [sp, #68]	; 0x44
 80130ac:	ee85 0a08 	vdiv.f32	s0, s10, s16
 80130b0:	eec5 9a88 	vdiv.f32	s19, s11, s16
 80130b4:	ee86 aa08 	vdiv.f32	s20, s12, s16
 80130b8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80130bc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80130c0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80130c4:	eef0 6a67 	vmov.f32	s13, s15
 80130c8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80130cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80130d0:	ee39 9a46 	vsub.f32	s18, s18, s12
 80130d4:	eddf 6add 	vldr	s13, [pc, #884]	; 801344c <MEMS_runMagCal+0x80c>
 80130d8:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013450 <MEMS_runMagCal+0x810>
 80130dc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80130e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80130e4:	eef0 6ae6 	vabs.f32	s13, s13
 80130e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130ec:	eef4 6ac6 	vcmpe.f32	s13, s12
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	eef0 7ae7 	vabs.f32	s15, s15
 80130f8:	f101 84dd 	bmi.w	8014ab6 <MEMS_runMagCal+0x1e76>
 80130fc:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8013454 <MEMS_runMagCal+0x814>
 8013100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013108:	f281 8438 	bge.w	801497c <MEMS_runMagCal+0x1d3c>
 801310c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8013458 <MEMS_runMagCal+0x818>
 8013110:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013118:	f101 8430 	bmi.w	801497c <MEMS_runMagCal+0x1d3c>
 801311c:	f002 fd04 	bl	8015b28 <roundf>
 8013120:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013124:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8013128:	ee17 3a90 	vmov	r3, s15
 801312c:	eeb0 0a69 	vmov.f32	s0, s19
 8013130:	f8a9 3000 	strh.w	r3, [r9]
 8013134:	f002 fcf8 	bl	8015b28 <roundf>
 8013138:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801313c:	eeb0 0a4a 	vmov.f32	s0, s20
 8013140:	ee17 3a90 	vmov	r3, s15
 8013144:	f8a9 3002 	strh.w	r3, [r9, #2]
 8013148:	f002 fcee 	bl	8015b28 <roundf>
 801314c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013150:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8013154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013158:	ee16 3a90 	vmov	r3, s13
 801315c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801345c <MEMS_runMagCal+0x81c>
 8013160:	f8a9 3004 	strh.w	r3, [r9, #4]
 8013164:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013168:	f002 fcde 	bl	8015b28 <roundf>
 801316c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013170:	ae0f      	add	r6, sp, #60	; 0x3c
 8013172:	ed8b 0a01 	vstr	s0, [fp, #4]
 8013176:	ab10      	add	r3, sp, #64	; 0x40
 8013178:	ee1c 0a10 	vmov	r0, s24
 801317c:	eeb0 0a48 	vmov.f32	s0, s16
 8013180:	4649      	mov	r1, r9
 8013182:	9600      	str	r6, [sp, #0]
 8013184:	aa2d      	add	r2, sp, #180	; 0xb4
 8013186:	f7f8 ff33 	bl	800bff0 <getMagStats.constprop.0>
 801318a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801318e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8013460 <MEMS_runMagCal+0x820>
 8013192:	461f      	mov	r7, r3
 8013194:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	ee07 3a90 	vmov	s15, r3
 801319e:	ee07 0a10 	vmov	s14, r0
 80131a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80131aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b6:	dc0f      	bgt.n	80131d8 <MEMS_runMagCal+0x598>
 80131b8:	ed96 7a00 	vldr	s14, [r6]
 80131bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80131c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c8:	bfc3      	ittte	gt
 80131ca:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 80131ce:	fab3 f383 	clzgt	r3, r3
 80131d2:	095b      	lsrgt	r3, r3, #5
 80131d4:	2301      	movle	r3, #1
 80131d6:	9303      	str	r3, [sp, #12]
 80131d8:	ed96 0a00 	vldr	s0, [r6]
 80131dc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80131e0:	9620      	str	r6, [sp, #128]	; 0x80
 80131e2:	ee28 0a80 	vmul.f32	s0, s17, s0
 80131e6:	ee80 0a09 	vdiv.f32	s0, s0, s18
 80131ea:	f002 fc9d 	bl	8015b28 <roundf>
 80131ee:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80131f2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80131f6:	ee17 3a10 	vmov	r3, s14
 80131fa:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80131fe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013202:	f002 fc91 	bl	8015b28 <roundf>
 8013206:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8013464 <MEMS_runMagCal+0x824>
 801320a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801320e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013212:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8013216:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801321a:	f8d9 0000 	ldr.w	r0, [r9]
 801321e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8013222:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013226:	ee27 7a06 	vmul.f32	s14, s14, s12
 801322a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801322e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013232:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013236:	ee16 2a90 	vmov	r2, s13
 801323a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801323e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8013242:	f1b8 0f01 	cmp.w	r8, #1
 8013246:	fa1f fc82 	uxth.w	ip, r2
 801324a:	bf08      	it	eq
 801324c:	23ff      	moveq	r3, #255	; 0xff
 801324e:	ee17 2a10 	vmov	r2, s14
 8013252:	ee17 1a90 	vmov	r1, s15
 8013256:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801325a:	ee16 0a10 	vmov	r0, s12
 801325e:	bf08      	it	eq
 8013260:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8013264:	9b03      	ldr	r3, [sp, #12]
 8013266:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 801326a:	b292      	uxth	r2, r2
 801326c:	b289      	uxth	r1, r1
 801326e:	2000      	movs	r0, #0
 8013270:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8013274:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013278:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801327c:	f88b 0000 	strb.w	r0, [fp]
 8013280:	2b00      	cmp	r3, #0
 8013282:	f000 8118 	beq.w	80134b6 <MEMS_runMagCal+0x876>
 8013286:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801328a:	f88b 0001 	strb.w	r0, [fp, #1]
 801328e:	2b00      	cmp	r3, #0
 8013290:	f041 80fd 	bne.w	801448e <MEMS_runMagCal+0x184e>
 8013294:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013298:	ad0e      	add	r5, sp, #56	; 0x38
 801329a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 801329e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132a2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80132a6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 80132aa:	f8cb 6008 	str.w	r6, [fp, #8]
 80132ae:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 80132b2:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 80132b6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013468 <MEMS_runMagCal+0x828>
 80132ba:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 80132be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80132c2:	fb00 f404 	mul.w	r4, r0, r4
 80132c6:	ee05 4a90 	vmov	s11, r4
 80132ca:	fb00 f406 	mul.w	r4, r0, r6
 80132ce:	fb00 f00e 	mul.w	r0, r0, lr
 80132d2:	ee06 0a10 	vmov	s12, r0
 80132d6:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 80132da:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 80132de:	ee03 0a90 	vmov	s7, r0
 80132e2:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 80132e6:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 80132ea:	ee05 4a10 	vmov	s10, r4
 80132ee:	ee04 0a10 	vmov	s8, r0
 80132f2:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 80132f6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80132fa:	ee04 0a90 	vmov	s9, r0
 80132fe:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013302:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013306:	f8dc 0000 	ldr.w	r0, [ip]
 801330a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 801330e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013312:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013316:	ee26 6a27 	vmul.f32	s12, s12, s15
 801331a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801331e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013322:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013326:	2001      	movs	r0, #1
 8013328:	24ff      	movs	r4, #255	; 0xff
 801332a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 801332e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8013332:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8013336:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 801333a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 801333e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8013342:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8013346:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 801334a:	f88b 4012 	strb.w	r4, [fp, #18]
 801334e:	2f00      	cmp	r7, #0
 8013350:	f001 82c8 	beq.w	80148e4 <MEMS_runMagCal+0x1ca4>
 8013354:	9b05      	ldr	r3, [sp, #20]
 8013356:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8013474 <MEMS_runMagCal+0x834>
 801335a:	ed93 0a01 	vldr	s0, [r3, #4]
 801335e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8013362:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013366:	2200      	movs	r2, #0
 8013368:	ee20 3a03 	vmul.f32	s6, s0, s6
 801336c:	f04f 34ff 	mov.w	r4, #4294967295
 8013370:	4616      	mov	r6, r2
 8013372:	fb96 f3f0 	sdiv	r3, r6, r0
 8013376:	fb00 6313 	mls	r3, r0, r3, r6
 801337a:	b2db      	uxtb	r3, r3
 801337c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013380:	1c66      	adds	r6, r4, #1
 8013382:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013386:	ee07 4a90 	vmov	s15, r4
 801338a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801338e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013392:	ee06 4a90 	vmov	s13, r4
 8013396:	fb96 f4f1 	sdiv	r4, r6, r1
 801339a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801339e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80133a2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80133a6:	ee07 3a10 	vmov	s14, r3
 80133aa:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80133ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80133b2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80133b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80133ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133be:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80133c2:	fb01 6414 	mls	r4, r1, r4, r6
 80133c6:	b264      	sxtb	r4, r4
 80133c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80133cc:	3201      	adds	r2, #1
 80133ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 80133d2:	b212      	sxth	r2, r2
 80133d4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80133d8:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 80133dc:	42ba      	cmp	r2, r7
 80133de:	4616      	mov	r6, r2
 80133e0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80133e4:	ee67 7a03 	vmul.f32	s15, s14, s6
 80133e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133ec:	ee17 ca90 	vmov	ip, s15
 80133f0:	f8a3 c014 	strh.w	ip, [r3, #20]
 80133f4:	dbbd      	blt.n	8013372 <MEMS_runMagCal+0x732>
 80133f6:	f88b 4012 	strb.w	r4, [fp, #18]
 80133fa:	428f      	cmp	r7, r1
 80133fc:	bf28      	it	cs
 80133fe:	460f      	movcs	r7, r1
 8013400:	f88b 7010 	strb.w	r7, [fp, #16]
 8013404:	ee1c 0a10 	vmov	r0, s24
 8013408:	9500      	str	r5, [sp, #0]
 801340a:	4642      	mov	r2, r8
 801340c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013410:	ab0d      	add	r3, sp, #52	; 0x34
 8013412:	f7f8 fded 	bl	800bff0 <getMagStats.constprop.0>
 8013416:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801346c <MEMS_runMagCal+0x82c>
 801341a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801341e:	edd5 6a00 	vldr	s13, [r5]
 8013422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013426:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801342a:	eef0 7ae7 	vabs.f32	s15, s15
 801342e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013436:	d525      	bpl.n	8013484 <MEMS_runMagCal+0x844>
 8013438:	eef4 6ac7 	vcmpe.f32	s13, s14
 801343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013440:	f101 8257 	bmi.w	80148f2 <MEMS_runMagCal+0x1cb2>
 8013444:	e01e      	b.n	8013484 <MEMS_runMagCal+0x844>
 8013446:	bf00      	nop
 8013448:	41f00001 	.word	0x41f00001
 801344c:	3f8ccccd 	.word	0x3f8ccccd
 8013450:	3f266666 	.word	0x3f266666
 8013454:	3eb33333 	.word	0x3eb33333
 8013458:	3f19999a 	.word	0x3f19999a
 801345c:	3a83126f 	.word	0x3a83126f
 8013460:	3c23d70a 	.word	0x3c23d70a
 8013464:	447a0000 	.word	0x447a0000
 8013468:	358637bd 	.word	0x358637bd
 801346c:	423c0000 	.word	0x423c0000
 8013470:	4423d666 	.word	0x4423d666
 8013474:	42c80000 	.word	0x42c80000
 8013478:	427c0000 	.word	0x427c0000
 801347c:	3f666666 	.word	0x3f666666
 8013480:	3eaaaaab 	.word	0x3eaaaaab
 8013484:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013488:	eef4 7ac7 	vcmpe.f32	s15, s14
 801348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013490:	d507      	bpl.n	80134a2 <MEMS_runMagCal+0x862>
 8013492:	eef4 6a47 	vcmp.f32	s13, s14
 8013496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349a:	9b03      	ldr	r3, [sp, #12]
 801349c:	bf48      	it	mi
 801349e:	2302      	movmi	r3, #2
 80134a0:	9303      	str	r3, [sp, #12]
 80134a2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80134a6:	9a03      	ldr	r2, [sp, #12]
 80134a8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80134ac:	2bc8      	cmp	r3, #200	; 0xc8
 80134ae:	d902      	bls.n	80134b6 <MEMS_runMagCal+0x876>
 80134b0:	2302      	movs	r3, #2
 80134b2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80134b6:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80134ba:	ecbd 8b0a 	vpop	{d8-d12}
 80134be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80134c6:	4291      	cmp	r1, r2
 80134c8:	f4ff abea 	bcc.w	8012ca0 <MEMS_runMagCal+0x60>
 80134cc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	f47f abf9 	bne.w	8012cc8 <MEMS_runMagCal+0x88>
 80134d6:	f7ff bbed 	b.w	8012cb4 <MEMS_runMagCal+0x74>
 80134da:	2702      	movs	r7, #2
 80134dc:	2300      	movs	r3, #0
 80134de:	9307      	str	r3, [sp, #28]
 80134e0:	9303      	str	r3, [sp, #12]
 80134e2:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8013470 <MEMS_runMagCal+0x830>
 80134e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80134ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ee:	f140 8260 	bpl.w	80139b2 <MEMS_runMagCal+0xd72>
 80134f2:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8013474 <MEMS_runMagCal+0x834>
 80134f6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80134fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80134fe:	2b01      	cmp	r3, #1
 8013500:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013504:	d911      	bls.n	801352a <MEMS_runMagCal+0x8ea>
 8013506:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801350a:	ee17 3a90 	vmov	r3, s15
 801350e:	b29b      	uxth	r3, r3
 8013510:	2bc7      	cmp	r3, #199	; 0xc7
 8013512:	f201 8359 	bhi.w	8014bc8 <MEMS_runMagCal+0x1f88>
 8013516:	2300      	movs	r3, #0
 8013518:	22ff      	movs	r2, #255	; 0xff
 801351a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801351e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013522:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8013526:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 801352a:	2f00      	cmp	r7, #0
 801352c:	f040 824d 	bne.w	80139ca <MEMS_runMagCal+0xd8a>
 8013530:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8013534:	2b00      	cmp	r3, #0
 8013536:	f2c0 839e 	blt.w	8013c76 <MEMS_runMagCal+0x1036>
 801353a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	fbb2 f3f6 	udiv	r3, r2, r6
 8013544:	fb06 2313 	mls	r3, r6, r3, r2
 8013548:	b25b      	sxtb	r3, r3
 801354a:	461d      	mov	r5, r3
 801354c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013550:	f88b 3012 	strb.w	r3, [fp, #18]
 8013554:	3401      	adds	r4, #1
 8013556:	42b4      	cmp	r4, r6
 8013558:	bfa8      	it	ge
 801355a:	4634      	movge	r4, r6
 801355c:	fa5f f884 	uxtb.w	r8, r4
 8013560:	f88b 8010 	strb.w	r8, [fp, #16]
 8013564:	f002 fae0 	bl	8015b28 <roundf>
 8013568:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801356c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8013570:	ee10 2a10 	vmov	r2, s0
 8013574:	829a      	strh	r2, [r3, #20]
 8013576:	2f00      	cmp	r7, #0
 8013578:	f040 8227 	bne.w	80139ca <MEMS_runMagCal+0xd8a>
 801357c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013580:	b122      	cbz	r2, 801358c <MEMS_runMagCal+0x94c>
 8013582:	9908      	ldr	r1, [sp, #32]
 8013584:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013588:	4299      	cmp	r1, r3
 801358a:	d394      	bcc.n	80134b6 <MEMS_runMagCal+0x876>
 801358c:	9b03      	ldr	r3, [sp, #12]
 801358e:	2b01      	cmp	r3, #1
 8013590:	d091      	beq.n	80134b6 <MEMS_runMagCal+0x876>
 8013592:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8013596:	1ebb      	subs	r3, r7, #2
 8013598:	2b01      	cmp	r3, #1
 801359a:	f240 8232 	bls.w	8013a02 <MEMS_runMagCal+0xdc2>
 801359e:	9b05      	ldr	r3, [sp, #20]
 80135a0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8013478 <MEMS_runMagCal+0x838>
 80135a4:	ed93 8a01 	vldr	s16, [r3, #4]
 80135a8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80135ac:	9a06      	ldr	r2, [sp, #24]
 80135ae:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80135b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80135b8:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80135bc:	fb02 1404 	mla	r4, r2, r4, r1
 80135c0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80135c4:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 80135c8:	3310      	adds	r3, #16
 80135ca:	42a3      	cmp	r3, r4
 80135cc:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 80135d0:	ee28 9a89 	vmul.f32	s18, s17, s18
 80135d4:	ee0c 2a10 	vmov	s24, r2
 80135d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80135dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80135e0:	ee17 2a90 	vmov	r2, s15
 80135e4:	fa1f f982 	uxth.w	r9, r2
 80135e8:	f080 81fe 	bcs.w	80139e8 <MEMS_runMagCal+0xda8>
 80135ec:	f242 3328 	movw	r3, #9000	; 0x2328
 80135f0:	429c      	cmp	r4, r3
 80135f2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80135f6:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 80135fa:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 80135fe:	bf1a      	itte	ne
 8013600:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8013604:	3c28      	subne	r4, #40	; 0x28
 8013606:	2400      	moveq	r4, #0
 8013608:	42a8      	cmp	r0, r5
 801360a:	f102 0201 	add.w	r2, r2, #1
 801360e:	f000 8727 	beq.w	8014460 <MEMS_runMagCal+0x1820>
 8013612:	1a12      	subs	r2, r2, r0
 8013614:	fb92 f1f5 	sdiv	r1, r2, r5
 8013618:	fb05 2211 	mls	r2, r5, r1, r2
 801361c:	2a00      	cmp	r2, #0
 801361e:	bfb8      	it	lt
 8013620:	1952      	addlt	r2, r2, r5
 8013622:	b211      	sxth	r1, r2
 8013624:	b358      	cbz	r0, 801367e <MEMS_runMagCal+0xa3e>
 8013626:	3801      	subs	r0, #1
 8013628:	b280      	uxth	r0, r0
 801362a:	3001      	adds	r0, #1
 801362c:	1b36      	subs	r6, r6, r4
 801362e:	9f03      	ldr	r7, [sp, #12]
 8013630:	b2b6      	uxth	r6, r6
 8013632:	4408      	add	r0, r1
 8013634:	e002      	b.n	801363c <MEMS_runMagCal+0x9fc>
 8013636:	3101      	adds	r1, #1
 8013638:	4281      	cmp	r1, r0
 801363a:	d01b      	beq.n	8013674 <MEMS_runMagCal+0xa34>
 801363c:	fb91 f3f5 	sdiv	r3, r1, r5
 8013640:	fb05 1313 	mls	r3, r5, r3, r1
 8013644:	b2db      	uxtb	r3, r3
 8013646:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801364a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801364e:	4432      	add	r2, r6
 8013650:	b212      	sxth	r2, r2
 8013652:	2a00      	cmp	r2, #0
 8013654:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013658:	daed      	bge.n	8013636 <MEMS_runMagCal+0x9f6>
 801365a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801365e:	1e5a      	subs	r2, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	f000 8306 	beq.w	8013c72 <MEMS_runMagCal+0x1032>
 8013666:	3101      	adds	r1, #1
 8013668:	4281      	cmp	r1, r0
 801366a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801366e:	f04f 0701 	mov.w	r7, #1
 8013672:	d1e3      	bne.n	801363c <MEMS_runMagCal+0x9fc>
 8013674:	2f01      	cmp	r7, #1
 8013676:	f001 80ea 	beq.w	801484e <MEMS_runMagCal+0x1c0e>
 801367a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801367e:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8013682:	2800      	cmp	r0, #0
 8013684:	f000 81b6 	beq.w	80139f4 <MEMS_runMagCal+0xdb4>
 8013688:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801368c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801368e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013692:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8013696:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801369a:	3308      	adds	r3, #8
 801369c:	441c      	add	r4, r3
 801369e:	42a2      	cmp	r2, r4
 80136a0:	f200 86e6 	bhi.w	8014470 <MEMS_runMagCal+0x1830>
 80136a4:	9b07      	ldr	r3, [sp, #28]
 80136a6:	b923      	cbnz	r3, 80136b2 <MEMS_runMagCal+0xa72>
 80136a8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80136ac:	2b0a      	cmp	r3, #10
 80136ae:	f240 81a5 	bls.w	80139fc <MEMS_runMagCal+0xdbc>
 80136b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80136b6:	9302      	str	r3, [sp, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f000 819f 	beq.w	80139fc <MEMS_runMagCal+0xdbc>
 80136be:	ee29 aa09 	vmul.f32	s20, s18, s18
 80136c2:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 801347c <MEMS_runMagCal+0x83c>
 80136c6:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8013480 <MEMS_runMagCal+0x840>
 80136ca:	9b03      	ldr	r3, [sp, #12]
 80136cc:	9309      	str	r3, [sp, #36]	; 0x24
 80136ce:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 80136d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80136d6:	2100      	movs	r1, #0
 80136d8:	ee2a aa26 	vmul.f32	s20, s20, s13
 80136dc:	ee28 8a07 	vmul.f32	s16, s16, s14
 80136e0:	ee69 9a29 	vmul.f32	s19, s18, s19
 80136e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80136e8:	468a      	mov	sl, r1
 80136ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80136ec:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80136f0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f000 80e2 	beq.w	80138be <MEMS_runMagCal+0xc7e>
 80136fa:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80136fe:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8013702:	ee07 4a90 	vmov	s15, r4
 8013706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801370a:	eef0 7ae7 	vabs.f32	s15, s15
 801370e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013716:	f100 820b 	bmi.w	8013b30 <MEMS_runMagCal+0xef0>
 801371a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801371e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013722:	2f00      	cmp	r7, #0
 8013724:	f000 8223 	beq.w	8013b6e <MEMS_runMagCal+0xf2e>
 8013728:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 801372c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8013730:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8013734:	1b52      	subs	r2, r2, r5
 8013736:	fb02 f102 	mul.w	r1, r2, r2
 801373a:	1b02      	subs	r2, r0, r4
 801373c:	fb02 1202 	mla	r2, r2, r2, r1
 8013740:	1b9b      	subs	r3, r3, r6
 8013742:	fb03 2303 	mla	r3, r3, r3, r2
 8013746:	ee07 3a90 	vmov	s15, r3
 801374a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801374e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	f300 80b2 	bgt.w	80138be <MEMS_runMagCal+0xc7e>
 801375a:	fb94 f3f9 	sdiv	r3, r4, r9
 801375e:	fb09 4313 	mls	r3, r9, r3, r4
 8013762:	2b00      	cmp	r3, #0
 8013764:	bfb8      	it	lt
 8013766:	444b      	addlt	r3, r9
 8013768:	b21b      	sxth	r3, r3
 801376a:	ee00 3a10 	vmov	s0, r3
 801376e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013772:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013776:	f002 f9d7 	bl	8015b28 <roundf>
 801377a:	fb95 f3f9 	sdiv	r3, r5, r9
 801377e:	fb09 5313 	mls	r3, r9, r3, r5
 8013782:	2b00      	cmp	r3, #0
 8013784:	bfb8      	it	lt
 8013786:	444b      	addlt	r3, r9
 8013788:	b21b      	sxth	r3, r3
 801378a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801378e:	ee00 3a10 	vmov	s0, r3
 8013792:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013796:	edcd 7a04 	vstr	s15, [sp, #16]
 801379a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801379e:	f002 f9c3 	bl	8015b28 <roundf>
 80137a2:	fb96 f3f9 	sdiv	r3, r6, r9
 80137a6:	fb09 6313 	mls	r3, r9, r3, r6
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	bfb8      	it	lt
 80137ae:	444b      	addlt	r3, r9
 80137b0:	b21b      	sxth	r3, r3
 80137b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80137b6:	ee00 3a10 	vmov	s0, r3
 80137ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80137be:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80137c2:	edcd 7a04 	vstr	s15, [sp, #16]
 80137c6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80137ca:	9204      	str	r2, [sp, #16]
 80137cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80137d0:	f002 f9aa 	bl	8015b28 <roundf>
 80137d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80137d8:	f1b8 0f1f 	cmp.w	r8, #31
 80137dc:	edcd 7a06 	vstr	s15, [sp, #24]
 80137e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80137e4:	9106      	str	r1, [sp, #24]
 80137e6:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 80137ea:	f240 823d 	bls.w	8013c68 <MEMS_runMagCal+0x1028>
 80137ee:	f1a8 0220 	sub.w	r2, r8, #32
 80137f2:	2101      	movs	r1, #1
 80137f4:	fa01 f202 	lsl.w	r2, r1, r2
 80137f8:	401a      	ands	r2, r3
 80137fa:	9804      	ldr	r0, [sp, #16]
 80137fc:	281f      	cmp	r0, #31
 80137fe:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013802:	f240 821f 	bls.w	8013c44 <MEMS_runMagCal+0x1004>
 8013806:	f1a0 0120 	sub.w	r1, r0, #32
 801380a:	2001      	movs	r0, #1
 801380c:	fa00 f101 	lsl.w	r1, r0, r1
 8013810:	ea01 0c03 	and.w	ip, r1, r3
 8013814:	9906      	ldr	r1, [sp, #24]
 8013816:	291f      	cmp	r1, #31
 8013818:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801381c:	f240 821e 	bls.w	8013c5c <MEMS_runMagCal+0x101c>
 8013820:	f1a1 0020 	sub.w	r0, r1, #32
 8013824:	2101      	movs	r1, #1
 8013826:	fa01 f000 	lsl.w	r0, r1, r0
 801382a:	4003      	ands	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	f040 812b 	bne.w	8013a88 <MEMS_runMagCal+0xe48>
 8013832:	ea52 030c 	orrs.w	r3, r2, ip
 8013836:	f040 812c 	bne.w	8013a92 <MEMS_runMagCal+0xe52>
 801383a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801383e:	930a      	str	r3, [sp, #40]	; 0x28
 8013840:	461a      	mov	r2, r3
 8013842:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013846:	3301      	adds	r3, #1
 8013848:	4694      	mov	ip, r2
 801384a:	930b      	str	r3, [sp, #44]	; 0x2c
 801384c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801384e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013852:	3701      	adds	r7, #1
 8013854:	4567      	cmp	r7, ip
 8013856:	bfa8      	it	ge
 8013858:	4667      	movge	r7, ip
 801385a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801385e:	b2ff      	uxtb	r7, r7
 8013860:	fa4f fc8c 	sxtb.w	ip, ip
 8013864:	9905      	ldr	r1, [sp, #20]
 8013866:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801386a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801386e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013874:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013878:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 801387c:	1a9b      	subs	r3, r3, r2
 801387e:	fb01 330a 	mla	r3, r1, sl, r3
 8013882:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013888:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 801388c:	429f      	cmp	r7, r3
 801388e:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013892:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013896:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801389a:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801389e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80138a2:	f000 8758 	beq.w	8014756 <MEMS_runMagCal+0x1b16>
 80138a6:	9b06      	ldr	r3, [sp, #24]
 80138a8:	9a04      	ldr	r2, [sp, #16]
 80138aa:	ee1c 0a10 	vmov	r0, s24
 80138ae:	4641      	mov	r1, r8
 80138b0:	f7f8 f874 	bl	800b99c <MEMS_setMagIndexToOne>
 80138b4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80138b8:	9302      	str	r3, [sp, #8]
 80138ba:	2301      	movs	r3, #1
 80138bc:	9309      	str	r3, [sp, #36]	; 0x24
 80138be:	9b02      	ldr	r3, [sp, #8]
 80138c0:	f10a 0a01 	add.w	sl, sl, #1
 80138c4:	fa0f fa8a 	sxth.w	sl, sl
 80138c8:	459a      	cmp	sl, r3
 80138ca:	4651      	mov	r1, sl
 80138cc:	f6ff af0d 	blt.w	80136ea <MEMS_runMagCal+0xaaa>
 80138d0:	f89b 3000 	ldrb.w	r3, [fp]
 80138d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138d6:	431a      	orrs	r2, r3
 80138d8:	b2d3      	uxtb	r3, r2
 80138da:	f88b 3000 	strb.w	r3, [fp]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f43f ade9 	beq.w	80134b6 <MEMS_runMagCal+0x876>
 80138e4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80138e8:	9306      	str	r3, [sp, #24]
 80138ea:	2b19      	cmp	r3, #25
 80138ec:	f67f ade3 	bls.w	80134b6 <MEMS_runMagCal+0x876>
 80138f0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80138f4:	9309      	str	r3, [sp, #36]	; 0x24
 80138f6:	b123      	cbz	r3, 8013902 <MEMS_runMagCal+0xcc2>
 80138f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f040 8583 	bne.w	8014408 <MEMS_runMagCal+0x17c8>
 8013902:	9b07      	ldr	r3, [sp, #28]
 8013904:	2b00      	cmp	r3, #0
 8013906:	f040 872f 	bne.w	8014768 <MEMS_runMagCal+0x1b28>
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	9903      	ldr	r1, [sp, #12]
 801390e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013912:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013916:	9302      	str	r3, [sp, #8]
 8013918:	2600      	movs	r6, #0
 801391a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 801391e:	9304      	str	r3, [sp, #16]
 8013920:	f04f 0a01 	mov.w	sl, #1
 8013924:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013928:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 801392c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013930:	9624      	str	r6, [sp, #144]	; 0x90
 8013932:	4657      	mov	r7, sl
 8013934:	460b      	mov	r3, r1
 8013936:	460c      	mov	r4, r1
 8013938:	e013      	b.n	8013962 <MEMS_runMagCal+0xd22>
 801393a:	f1b9 0f00 	cmp.w	r9, #0
 801393e:	bf18      	it	ne
 8013940:	3101      	addne	r1, #1
 8013942:	2d00      	cmp	r5, #0
 8013944:	bf18      	it	ne
 8013946:	3401      	addne	r4, #1
 8013948:	2a00      	cmp	r2, #0
 801394a:	bf18      	it	ne
 801394c:	3301      	addne	r3, #1
 801394e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013952:	b2c9      	uxtb	r1, r1
 8013954:	b2e4      	uxtb	r4, r4
 8013956:	b2db      	uxtb	r3, r3
 8013958:	f000 81a2 	beq.w	8013ca0 <MEMS_runMagCal+0x1060>
 801395c:	3601      	adds	r6, #1
 801395e:	fa5f fa8c 	uxtb.w	sl, ip
 8013962:	9804      	ldr	r0, [sp, #16]
 8013964:	f1a6 0220 	sub.w	r2, r6, #32
 8013968:	fa07 f202 	lsl.w	r2, r7, r2
 801396c:	ea02 0500 	and.w	r5, r2, r0
 8013970:	9802      	ldr	r0, [sp, #8]
 8013972:	2e1f      	cmp	r6, #31
 8013974:	ea08 0902 	and.w	r9, r8, r2
 8013978:	f10a 0c01 	add.w	ip, sl, #1
 801397c:	ea02 0200 	and.w	r2, r2, r0
 8013980:	fa07 f006 	lsl.w	r0, r7, r6
 8013984:	d8d9      	bhi.n	801393a <MEMS_runMagCal+0xcfa>
 8013986:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 801398a:	ea00 0902 	and.w	r9, r0, r2
 801398e:	4005      	ands	r5, r0
 8013990:	ea0e 0000 	and.w	r0, lr, r0
 8013994:	f1b9 0f00 	cmp.w	r9, #0
 8013998:	bf18      	it	ne
 801399a:	3401      	addne	r4, #1
 801399c:	2d00      	cmp	r5, #0
 801399e:	bf0c      	ite	eq
 80139a0:	461d      	moveq	r5, r3
 80139a2:	1c5d      	addne	r5, r3, #1
 80139a4:	2800      	cmp	r0, #0
 80139a6:	bf18      	it	ne
 80139a8:	3101      	addne	r1, #1
 80139aa:	b2e4      	uxtb	r4, r4
 80139ac:	b2eb      	uxtb	r3, r5
 80139ae:	b2c9      	uxtb	r1, r1
 80139b0:	e7d4      	b.n	801395c <MEMS_runMagCal+0xd1c>
 80139b2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80139b6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013c8c <MEMS_runMagCal+0x104c>
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80139c0:	f63f ada9 	bhi.w	8013516 <MEMS_runMagCal+0x8d6>
 80139c4:	2f00      	cmp	r7, #0
 80139c6:	f43f adb3 	beq.w	8013530 <MEMS_runMagCal+0x8f0>
 80139ca:	9908      	ldr	r1, [sp, #32]
 80139cc:	f8cb 100c 	str.w	r1, [fp, #12]
 80139d0:	2200      	movs	r2, #0
 80139d2:	23ff      	movs	r3, #255	; 0xff
 80139d4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80139d8:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80139dc:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80139e0:	ecbd 8b0a 	vpop	{d8-d12}
 80139e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e8:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80139ec:	4634      	mov	r4, r6
 80139ee:	2800      	cmp	r0, #0
 80139f0:	f47f ae4a 	bne.w	8013688 <MEMS_runMagCal+0xa48>
 80139f4:	9b07      	ldr	r3, [sp, #28]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f47f ae5b 	bne.w	80136b2 <MEMS_runMagCal+0xa72>
 80139fc:	9b03      	ldr	r3, [sp, #12]
 80139fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013a00:	e766      	b.n	80138d0 <MEMS_runMagCal+0xc90>
 8013a02:	45b0      	cmp	r8, r6
 8013a04:	f000 86b9 	beq.w	801477a <MEMS_runMagCal+0x1b3a>
 8013a08:	2f03      	cmp	r7, #3
 8013a0a:	f47f adc8 	bne.w	801359e <MEMS_runMagCal+0x95e>
 8013a0e:	ee07 2a90 	vmov	s15, r2
 8013a12:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013c90 <MEMS_runMagCal+0x1050>
 8013a16:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a2e:	f77f adb6 	ble.w	801359e <MEMS_runMagCal+0x95e>
 8013a32:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f43f adb1 	beq.w	801359e <MEMS_runMagCal+0x95e>
 8013a3c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013a40:	330a      	adds	r3, #10
 8013a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013a46:	ee07 3a90 	vmov	s15, r3
 8013a4a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5a:	f77f ada0 	ble.w	801359e <MEMS_runMagCal+0x95e>
 8013a5e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f47f ad9b 	bne.w	801359e <MEMS_runMagCal+0x95e>
 8013a68:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	f43f ad22 	beq.w	80134b6 <MEMS_runMagCal+0x876>
 8013a72:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013a76:	2bff      	cmp	r3, #255	; 0xff
 8013a78:	f47f ad1d 	bne.w	80134b6 <MEMS_runMagCal+0x876>
 8013a7c:	e58f      	b.n	801359e <MEMS_runMagCal+0x95e>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	9307      	str	r3, [sp, #28]
 8013a82:	9303      	str	r3, [sp, #12]
 8013a84:	2700      	movs	r7, #0
 8013a86:	e52c      	b.n	80134e2 <MEMS_runMagCal+0x8a2>
 8013a88:	b11a      	cbz	r2, 8013a92 <MEMS_runMagCal+0xe52>
 8013a8a:	f1bc 0f00 	cmp.w	ip, #0
 8013a8e:	f47f af16 	bne.w	80138be <MEMS_runMagCal+0xc7e>
 8013a92:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013a96:	930a      	str	r3, [sp, #40]	; 0x28
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4297      	cmp	r7, r2
 8013a9c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013aa0:	f000 848f 	beq.w	80143c2 <MEMS_runMagCal+0x1782>
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	4611      	mov	r1, r2
 8013aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aaa:	1bdb      	subs	r3, r3, r7
 8013aac:	fb93 f2f2 	sdiv	r2, r3, r2
 8013ab0:	fb01 3212 	mls	r2, r1, r2, r3
 8013ab4:	2a00      	cmp	r2, #0
 8013ab6:	bfbc      	itt	lt
 8013ab8:	460b      	movlt	r3, r1
 8013aba:	18d2      	addlt	r2, r2, r3
 8013abc:	468c      	mov	ip, r1
 8013abe:	b212      	sxth	r2, r2
 8013ac0:	f107 3eff 	add.w	lr, r7, #4294967295
 8013ac4:	fa5f fe8e 	uxtb.w	lr, lr
 8013ac8:	f10e 0e01 	add.w	lr, lr, #1
 8013acc:	4496      	add	lr, r2
 8013ace:	e002      	b.n	8013ad6 <MEMS_runMagCal+0xe96>
 8013ad0:	4572      	cmp	r2, lr
 8013ad2:	f43f aebb 	beq.w	801384c <MEMS_runMagCal+0xc0c>
 8013ad6:	fb92 f3fc 	sdiv	r3, r2, ip
 8013ada:	fb0c 2313 	mls	r3, ip, r3, r2
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013ae4:	3201      	adds	r2, #1
 8013ae6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013aea:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013aee:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013af2:	1a20      	subs	r0, r4, r0
 8013af4:	1a69      	subs	r1, r5, r1
 8013af6:	ee07 0a90 	vmov	s15, r0
 8013afa:	ee06 1a90 	vmov	s13, r1
 8013afe:	1af3      	subs	r3, r6, r3
 8013b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b08:	ee07 3a10 	vmov	s14, r3
 8013b0c:	eef0 7ae7 	vabs.f32	s15, s15
 8013b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b14:	eef0 6ae6 	vabs.f32	s13, s13
 8013b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b1c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b24:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b2c:	ddd0      	ble.n	8013ad0 <MEMS_runMagCal+0xe90>
 8013b2e:	e6c6      	b.n	80138be <MEMS_runMagCal+0xc7e>
 8013b30:	ee07 5a90 	vmov	s15, r5
 8013b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b38:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013b3c:	eef0 7ae7 	vabs.f32	s15, s15
 8013b40:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b48:	f77f ade9 	ble.w	801371e <MEMS_runMagCal+0xade>
 8013b4c:	ee07 6a90 	vmov	s15, r6
 8013b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b54:	eef0 7ae7 	vabs.f32	s15, s15
 8013b58:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b60:	f73f aead 	bgt.w	80138be <MEMS_runMagCal+0xc7e>
 8013b64:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013b68:	2f00      	cmp	r7, #0
 8013b6a:	f47f addd 	bne.w	8013728 <MEMS_runMagCal+0xae8>
 8013b6e:	fb94 f2f9 	sdiv	r2, r4, r9
 8013b72:	f04f 0301 	mov.w	r3, #1
 8013b76:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013b7a:	9b05      	ldr	r3, [sp, #20]
 8013b7c:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013b80:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b86:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013b8a:	fb09 4212 	mls	r2, r9, r2, r4
 8013b8e:	2a00      	cmp	r2, #0
 8013b90:	fb01 3300 	mla	r3, r1, r0, r3
 8013b94:	bfb8      	it	lt
 8013b96:	444a      	addlt	r2, r9
 8013b98:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013b9c:	b213      	sxth	r3, r2
 8013b9e:	ee00 3a10 	vmov	s0, r3
 8013ba2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013ba6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013baa:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013bae:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013bb2:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013bb6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013bba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013bbe:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013bc2:	f001 ffb1 	bl	8015b28 <roundf>
 8013bc6:	fb95 f3f9 	sdiv	r3, r5, r9
 8013bca:	fb09 5513 	mls	r5, r9, r3, r5
 8013bce:	2d00      	cmp	r5, #0
 8013bd0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bd4:	bfb8      	it	lt
 8013bd6:	444d      	addlt	r5, r9
 8013bd8:	b22d      	sxth	r5, r5
 8013bda:	edcd 7a02 	vstr	s15, [sp, #8]
 8013bde:	ee07 5a90 	vmov	s15, r5
 8013be2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013be6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013bea:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013bee:	f001 ff9b 	bl	8015b28 <roundf>
 8013bf2:	fb96 f3f9 	sdiv	r3, r6, r9
 8013bf6:	fb09 6613 	mls	r6, r9, r3, r6
 8013bfa:	2e00      	cmp	r6, #0
 8013bfc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013c00:	bfb8      	it	lt
 8013c02:	444e      	addlt	r6, r9
 8013c04:	b236      	sxth	r6, r6
 8013c06:	edcd 7a02 	vstr	s15, [sp, #8]
 8013c0a:	ee07 6a90 	vmov	s15, r6
 8013c0e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013c12:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013c16:	9204      	str	r2, [sp, #16]
 8013c18:	2301      	movs	r3, #1
 8013c1a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c20:	f001 ff82 	bl	8015b28 <roundf>
 8013c24:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013c28:	9a04      	ldr	r2, [sp, #16]
 8013c2a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013c2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013c32:	ee1c 0a10 	vmov	r0, s24
 8013c36:	4621      	mov	r1, r4
 8013c38:	f7f7 feb0 	bl	800b99c <MEMS_setMagIndexToOne>
 8013c3c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013c40:	9302      	str	r3, [sp, #8]
 8013c42:	e63c      	b.n	80138be <MEMS_runMagCal+0xc7e>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2001      	movs	r0, #1
 8013c48:	fa00 f303 	lsl.w	r3, r0, r3
 8013c4c:	ea01 0c03 	and.w	ip, r1, r3
 8013c50:	9906      	ldr	r1, [sp, #24]
 8013c52:	291f      	cmp	r1, #31
 8013c54:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013c58:	f63f ade2 	bhi.w	8013820 <MEMS_runMagCal+0xbe0>
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	2101      	movs	r1, #1
 8013c60:	fa01 f303 	lsl.w	r3, r1, r3
 8013c64:	4003      	ands	r3, r0
 8013c66:	e5e1      	b.n	801382c <MEMS_runMagCal+0xbec>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	fa03 f308 	lsl.w	r3, r3, r8
 8013c6e:	401a      	ands	r2, r3
 8013c70:	e5c3      	b.n	80137fa <MEMS_runMagCal+0xbba>
 8013c72:	2701      	movs	r7, #1
 8013c74:	e4df      	b.n	8013636 <MEMS_runMagCal+0x9f6>
 8013c76:	2500      	movs	r5, #0
 8013c78:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	e465      	b.n	801354c <MEMS_runMagCal+0x90c>
 8013c80:	460f      	mov	r7, r1
 8013c82:	e42b      	b.n	80134dc <MEMS_runMagCal+0x89c>
 8013c84:	2300      	movs	r3, #0
 8013c86:	9304      	str	r3, [sp, #16]
 8013c88:	f7ff b941 	b.w	8012f0e <MEMS_runMagCal+0x2ce>
 8013c8c:	477fff00 	.word	0x477fff00
 8013c90:	3a83126f 	.word	0x3a83126f
 8013c94:	42340000 	.word	0x42340000
 8013c98:	3faccccd 	.word	0x3faccccd
 8013c9c:	00000000 	.word	0x00000000
 8013ca0:	2905      	cmp	r1, #5
 8013ca2:	f240 8383 	bls.w	80143ac <MEMS_runMagCal+0x176c>
 8013ca6:	2c05      	cmp	r4, #5
 8013ca8:	f240 8380 	bls.w	80143ac <MEMS_runMagCal+0x176c>
 8013cac:	2b05      	cmp	r3, #5
 8013cae:	f240 837d 	bls.w	80143ac <MEMS_runMagCal+0x176c>
 8013cb2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013cb6:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013cba:	9302      	str	r3, [sp, #8]
 8013cbc:	9b06      	ldr	r3, [sp, #24]
 8013cbe:	4553      	cmp	r3, sl
 8013cc0:	f000 85f1 	beq.w	80148a6 <MEMS_runMagCal+0x1c66>
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	9b02      	ldr	r3, [sp, #8]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	9304      	str	r3, [sp, #16]
 8013ccc:	1a9b      	subs	r3, r3, r2
 8013cce:	fb93 f2fa 	sdiv	r2, r3, sl
 8013cd2:	fb0a 3212 	mls	r2, sl, r2, r3
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	bfb8      	it	lt
 8013cda:	4452      	addlt	r2, sl
 8013cdc:	46d1      	mov	r9, sl
 8013cde:	b212      	sxth	r2, r2
 8013ce0:	9906      	ldr	r1, [sp, #24]
 8013ce2:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013ce6:	f101 38ff 	add.w	r8, r1, #4294967295
 8013cea:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013cee:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013cf2:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013cf6:	fa5f f888 	uxtb.w	r8, r8
 8013cfa:	f108 0801 	add.w	r8, r8, #1
 8013cfe:	468e      	mov	lr, r1
 8013d00:	463e      	mov	r6, r7
 8013d02:	46ac      	mov	ip, r5
 8013d04:	4490      	add	r8, r2
 8013d06:	fb92 f3f9 	sdiv	r3, r2, r9
 8013d0a:	fb09 2313 	mls	r3, r9, r3, r2
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013d14:	3201      	adds	r2, #1
 8013d16:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013d1a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013d1e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013d22:	42a1      	cmp	r1, r4
 8013d24:	bfb8      	it	lt
 8013d26:	4621      	movlt	r1, r4
 8013d28:	45a6      	cmp	lr, r4
 8013d2a:	bfa8      	it	ge
 8013d2c:	46a6      	movge	lr, r4
 8013d2e:	4285      	cmp	r5, r0
 8013d30:	bfb8      	it	lt
 8013d32:	4605      	movlt	r5, r0
 8013d34:	4584      	cmp	ip, r0
 8013d36:	bfa8      	it	ge
 8013d38:	4684      	movge	ip, r0
 8013d3a:	429f      	cmp	r7, r3
 8013d3c:	bfb8      	it	lt
 8013d3e:	461f      	movlt	r7, r3
 8013d40:	429e      	cmp	r6, r3
 8013d42:	bfa8      	it	ge
 8013d44:	461e      	movge	r6, r3
 8013d46:	4542      	cmp	r2, r8
 8013d48:	d1dd      	bne.n	8013d06 <MEMS_runMagCal+0x10c6>
 8013d4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d4e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013d52:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013d56:	eba1 010e 	sub.w	r1, r1, lr
 8013d5a:	eba5 050c 	sub.w	r5, r5, ip
 8013d5e:	1bbe      	subs	r6, r7, r6
 8013d60:	b209      	sxth	r1, r1
 8013d62:	b22d      	sxth	r5, r5
 8013d64:	b236      	sxth	r6, r6
 8013d66:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013c94 <MEMS_runMagCal+0x1054>
 8013d6a:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	f040 8593 	bne.w	801489a <MEMS_runMagCal+0x1c5a>
 8013d74:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013d78:	fab3 f883 	clz	r8, r3
 8013d7c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013d80:	ee06 1a90 	vmov	s13, r1
 8013d84:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d90:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d98:	f300 8562 	bgt.w	8014860 <MEMS_runMagCal+0x1c20>
 8013d9c:	ee06 5a10 	vmov	s12, r5
 8013da0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013da4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dac:	f100 8558 	bmi.w	8014860 <MEMS_runMagCal+0x1c20>
 8013db0:	ee05 6a90 	vmov	s11, r6
 8013db4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013db8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc0:	f100 854e 	bmi.w	8014860 <MEMS_runMagCal+0x1c20>
 8013dc4:	428d      	cmp	r5, r1
 8013dc6:	462b      	mov	r3, r5
 8013dc8:	bfb8      	it	lt
 8013dca:	460b      	movlt	r3, r1
 8013dcc:	42b3      	cmp	r3, r6
 8013dce:	461a      	mov	r2, r3
 8013dd0:	bfb8      	it	lt
 8013dd2:	4632      	movlt	r2, r6
 8013dd4:	428e      	cmp	r6, r1
 8013dd6:	4633      	mov	r3, r6
 8013dd8:	bfa8      	it	ge
 8013dda:	460b      	movge	r3, r1
 8013ddc:	42ab      	cmp	r3, r5
 8013dde:	bfa8      	it	ge
 8013de0:	462b      	movge	r3, r5
 8013de2:	428a      	cmp	r2, r1
 8013de4:	9202      	str	r2, [sp, #8]
 8013de6:	f340 8588 	ble.w	80148fa <MEMS_runMagCal+0x1cba>
 8013dea:	4299      	cmp	r1, r3
 8013dec:	bfb8      	it	lt
 8013dee:	4619      	movlt	r1, r3
 8013df0:	42aa      	cmp	r2, r5
 8013df2:	dd02      	ble.n	8013dfa <MEMS_runMagCal+0x11ba>
 8013df4:	42ab      	cmp	r3, r5
 8013df6:	bfb8      	it	lt
 8013df8:	4629      	movlt	r1, r5
 8013dfa:	9a02      	ldr	r2, [sp, #8]
 8013dfc:	4296      	cmp	r6, r2
 8013dfe:	da02      	bge.n	8013e06 <MEMS_runMagCal+0x11c6>
 8013e00:	429e      	cmp	r6, r3
 8013e02:	bfc8      	it	gt
 8013e04:	4631      	movgt	r1, r6
 8013e06:	f1b8 0f00 	cmp.w	r8, #0
 8013e0a:	f000 8299 	beq.w	8014340 <MEMS_runMagCal+0x1700>
 8013e0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e16:	dc0d      	bgt.n	8013e34 <MEMS_runMagCal+0x11f4>
 8013e18:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e20:	dc08      	bgt.n	8013e34 <MEMS_runMagCal+0x11f4>
 8013e22:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2a:	bfcc      	ite	gt
 8013e2c:	f04f 0801 	movgt.w	r8, #1
 8013e30:	f04f 0800 	movle.w	r8, #0
 8013e34:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013c98 <MEMS_runMagCal+0x1058>
 8013e38:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e40:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013e44:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4c:	f2c0 8558 	blt.w	8014900 <MEMS_runMagCal+0x1cc0>
 8013e50:	ee07 1a90 	vmov	s15, r1
 8013e54:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013e58:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e60:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e68:	f2c0 854a 	blt.w	8014900 <MEMS_runMagCal+0x1cc0>
 8013e6c:	9a02      	ldr	r2, [sp, #8]
 8013e6e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013e72:	f280 8545 	bge.w	8014900 <MEMS_runMagCal+0x1cc0>
 8013e76:	ee07 3a90 	vmov	s15, r3
 8013e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e7e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013e82:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8e:	f140 8537 	bpl.w	8014900 <MEMS_runMagCal+0x1cc0>
 8013e92:	9b06      	ldr	r3, [sp, #24]
 8013e94:	4553      	cmp	r3, sl
 8013e96:	f000 8569 	beq.w	801496c <MEMS_runMagCal+0x1d2c>
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	9b04      	ldr	r3, [sp, #16]
 8013e9e:	1a9b      	subs	r3, r3, r2
 8013ea0:	fb93 f7f9 	sdiv	r7, r3, r9
 8013ea4:	fb09 3717 	mls	r7, r9, r7, r3
 8013ea8:	2f00      	cmp	r7, #0
 8013eaa:	bfb8      	it	lt
 8013eac:	4457      	addlt	r7, sl
 8013eae:	b23f      	sxth	r7, r7
 8013eb0:	9b03      	ldr	r3, [sp, #12]
 8013eb2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013eb6:	b27f      	sxtb	r7, r7
 8013eb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013ebc:	9304      	str	r3, [sp, #16]
 8013ebe:	f1c7 0e01 	rsb	lr, r7, #1
 8013ec2:	469c      	mov	ip, r3
 8013ec4:	463b      	mov	r3, r7
 8013ec6:	fb93 f1f9 	sdiv	r1, r3, r9
 8013eca:	fb09 3111 	mls	r1, r9, r1, r3
 8013ece:	b24a      	sxtb	r2, r1
 8013ed0:	2a00      	cmp	r2, #0
 8013ed2:	f107 0701 	add.w	r7, r7, #1
 8013ed6:	bfb8      	it	lt
 8013ed8:	eb0a 0201 	addlt.w	r2, sl, r1
 8013edc:	fb97 f3f9 	sdiv	r3, r7, r9
 8013ee0:	fb09 7313 	mls	r3, r9, r3, r7
 8013ee4:	bfb8      	it	lt
 8013ee6:	b252      	sxtblt	r2, r2
 8013ee8:	b25b      	sxtb	r3, r3
 8013eea:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013eee:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013ef2:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013ef6:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8013efa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013efe:	1a45      	subs	r5, r0, r1
 8013f00:	bf48      	it	mi
 8013f02:	1a09      	submi	r1, r1, r0
 8013f04:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013f08:	bf4c      	ite	mi
 8013f0a:	b20d      	sxthmi	r5, r1
 8013f0c:	b22d      	sxthpl	r5, r5
 8013f0e:	1a21      	subs	r1, r4, r0
 8013f10:	bf48      	it	mi
 8013f12:	1b01      	submi	r1, r0, r4
 8013f14:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013f18:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8013f1c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013f20:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	1a26      	subs	r6, r4, r0
 8013f28:	b21b      	sxth	r3, r3
 8013f2a:	bf48      	it	mi
 8013f2c:	1b06      	submi	r6, r0, r4
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	b209      	sxth	r1, r1
 8013f32:	b236      	sxth	r6, r6
 8013f34:	dd20      	ble.n	8013f78 <MEMS_runMagCal+0x1338>
 8013f36:	4429      	add	r1, r5
 8013f38:	440e      	add	r6, r1
 8013f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f3e:	fb02 f606 	mul.w	r6, r2, r6
 8013f42:	ee07 6a90 	vmov	s15, r6
 8013f46:	ee07 3a10 	vmov	s14, r3
 8013f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f52:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013f56:	f10c 0c01 	add.w	ip, ip, #1
 8013f5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013f5e:	fa5f fc8c 	uxtb.w	ip, ip
 8013f62:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013f66:	ee17 3a90 	vmov	r3, s15
 8013f6a:	b21b      	sxth	r3, r3
 8013f6c:	2b96      	cmp	r3, #150	; 0x96
 8013f6e:	dd03      	ble.n	8013f78 <MEMS_runMagCal+0x1338>
 8013f70:	9b04      	ldr	r3, [sp, #16]
 8013f72:	3301      	adds	r3, #1
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	9304      	str	r3, [sp, #16]
 8013f78:	eb0e 0307 	add.w	r3, lr, r7
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	4598      	cmp	r8, r3
 8013f80:	d8a0      	bhi.n	8013ec4 <MEMS_runMagCal+0x1284>
 8013f82:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8013f86:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013f8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f8e:	4563      	cmp	r3, ip
 8013f90:	f340 820c 	ble.w	80143ac <MEMS_runMagCal+0x176c>
 8013f94:	9b07      	ldr	r3, [sp, #28]
 8013f96:	b92b      	cbnz	r3, 8013fa4 <MEMS_runMagCal+0x1364>
 8013f98:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013f9c:	3b02      	subs	r3, #2
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	f240 851e 	bls.w	80149e0 <MEMS_runMagCal+0x1da0>
 8013fa4:	ac25      	add	r4, sp, #148	; 0x94
 8013fa6:	2220      	movs	r2, #32
 8013fa8:	4620      	mov	r0, r4
 8013faa:	2100      	movs	r1, #0
 8013fac:	f003 fbe6 	bl	801777c <memset>
 8013fb0:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8013fb4:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013fb8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	4286      	cmp	r6, r0
 8013fc0:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8013fc4:	921f      	str	r2, [sp, #124]	; 0x7c
 8013fc6:	f103 0301 	add.w	r3, r3, #1
 8013fca:	f000 8501 	beq.w	80149d0 <MEMS_runMagCal+0x1d90>
 8013fce:	1b9b      	subs	r3, r3, r6
 8013fd0:	fb93 f2f0 	sdiv	r2, r3, r0
 8013fd4:	fb00 3312 	mls	r3, r0, r2, r3
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	bfb8      	it	lt
 8013fdc:	181b      	addlt	r3, r3, r0
 8013fde:	b21a      	sxth	r2, r3
 8013fe0:	2e00      	cmp	r6, #0
 8013fe2:	f000 854c 	beq.w	8014a7e <MEMS_runMagCal+0x1e3e>
 8013fe6:	1e77      	subs	r7, r6, #1
 8013fe8:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013c9c <MEMS_runMagCal+0x105c>
 8013fec:	b2fd      	uxtb	r5, r7
 8013fee:	3501      	adds	r5, #1
 8013ff0:	eeb0 5a65 	vmov.f32	s10, s11
 8013ff4:	eef0 4a65 	vmov.f32	s9, s11
 8013ff8:	4415      	add	r5, r2
 8013ffa:	4611      	mov	r1, r2
 8013ffc:	fb91 f3f0 	sdiv	r3, r1, r0
 8014000:	fb00 1313 	mls	r3, r0, r3, r1
 8014004:	b2db      	uxtb	r3, r3
 8014006:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801400a:	3101      	adds	r1, #1
 801400c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8014010:	ee06 ca90 	vmov	s13, ip
 8014014:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8014018:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801401c:	ee07 ca10 	vmov	s14, ip
 8014020:	ee07 3a90 	vmov	s15, r3
 8014024:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014030:	42a9      	cmp	r1, r5
 8014032:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8014036:	ee35 5a07 	vadd.f32	s10, s10, s14
 801403a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801403e:	d1dd      	bne.n	8013ffc <MEMS_runMagCal+0x13bc>
 8014040:	ee07 6a90 	vmov	s15, r6
 8014044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801404c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8014050:	b2f9      	uxtb	r1, r7
 8014052:	3101      	adds	r1, #1
 8014054:	4411      	add	r1, r2
 8014056:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8014404 <MEMS_runMagCal+0x17c4>
 801405a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801405e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014062:	ee29 aa85 	vmul.f32	s20, s19, s10
 8014066:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801406a:	eef0 4a46 	vmov.f32	s9, s12
 801406e:	eeb0 4a46 	vmov.f32	s8, s12
 8014072:	eef0 3a46 	vmov.f32	s7, s12
 8014076:	eeb0 3a46 	vmov.f32	s6, s12
 801407a:	eef0 2a46 	vmov.f32	s5, s12
 801407e:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8014082:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8014086:	fb92 f3f0 	sdiv	r3, r2, r0
 801408a:	fb00 2313 	mls	r3, r0, r3, r2
 801408e:	b2db      	uxtb	r3, r3
 8014090:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014094:	3201      	adds	r2, #1
 8014096:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 801409a:	ee06 5a90 	vmov	s13, r5
 801409e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80140a2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80140a6:	ee07 5a10 	vmov	s14, r5
 80140aa:	ee07 3a90 	vmov	s15, r3
 80140ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80140b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80140b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140ba:	ee76 6ac9 	vsub.f32	s13, s13, s18
 80140be:	ee37 7a4a 	vsub.f32	s14, s14, s20
 80140c2:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80140c6:	4291      	cmp	r1, r2
 80140c8:	eee6 2aa6 	vfma.f32	s5, s13, s13
 80140cc:	eea6 3a87 	vfma.f32	s6, s13, s14
 80140d0:	eea7 4a07 	vfma.f32	s8, s14, s14
 80140d4:	eee6 3aa7 	vfma.f32	s7, s13, s15
 80140d8:	eee7 4a27 	vfma.f32	s9, s14, s15
 80140dc:	eea7 6aa7 	vfma.f32	s12, s15, s15
 80140e0:	d1d1      	bne.n	8014086 <MEMS_runMagCal+0x1446>
 80140e2:	edc4 2a00 	vstr	s5, [r4]
 80140e6:	ed84 3a01 	vstr	s6, [r4, #4]
 80140ea:	edc4 3a02 	vstr	s7, [r4, #8]
 80140ee:	ed84 4a03 	vstr	s8, [r4, #12]
 80140f2:	edc4 4a04 	vstr	s9, [r4, #16]
 80140f6:	ed84 6a05 	vstr	s12, [r4, #20]
 80140fa:	a91a      	add	r1, sp, #104	; 0x68
 80140fc:	4620      	mov	r0, r4
 80140fe:	f7fe fce5 	bl	8012acc <MEMS_EIG3>
 8014102:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8014106:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801410a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801410e:	eef0 5ae4 	vabs.f32	s11, s9
 8014112:	eef0 6ac6 	vabs.f32	s13, s12
 8014116:	eef4 6ae5 	vcmpe.f32	s13, s11
 801411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411e:	bf8c      	ite	hi
 8014120:	eef0 7a65 	vmovhi.f32	s15, s11
 8014124:	eef0 7a66 	vmovls.f32	s15, s13
 8014128:	eeb0 7ac5 	vabs.f32	s14, s10
 801412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014138:	bf88      	it	hi
 801413a:	eef0 7a47 	vmovhi.f32	s15, s14
 801413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014142:	bfb8      	it	lt
 8014144:	eef0 6a65 	vmovlt.f32	s13, s11
 8014148:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801414c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8014150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014154:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8014158:	bfb8      	it	lt
 801415a:	eeb0 7a66 	vmovlt.f32	s14, s13
 801415e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014166:	f300 8420 	bgt.w	80149aa <MEMS_runMagCal+0x1d6a>
 801416a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 801416e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014172:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417e:	dd02      	ble.n	8014186 <MEMS_runMagCal+0x1546>
 8014180:	2b22      	cmp	r3, #34	; 0x22
 8014182:	f240 8412 	bls.w	80149aa <MEMS_runMagCal+0x1d6a>
 8014186:	ee76 7a24 	vadd.f32	s15, s12, s9
 801418a:	ee07 3a10 	vmov	s14, r3
 801418e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014196:	eddf 6a90 	vldr	s13, [pc, #576]	; 80143d8 <MEMS_runMagCal+0x1798>
 801419a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801419e:	eef1 7ac6 	vsqrt.f32	s15, s12
 80141a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80141a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	f300 83fc 	bgt.w	80149aa <MEMS_runMagCal+0x1d6a>
 80141b2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80141b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141be:	f100 83f4 	bmi.w	80149aa <MEMS_runMagCal+0x1d6a>
 80141c2:	eddf 7a86 	vldr	s15, [pc, #536]	; 80143dc <MEMS_runMagCal+0x179c>
 80141c6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80141ca:	2300      	movs	r3, #0
 80141cc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80141d0:	932c      	str	r3, [sp, #176]	; 0xb0
 80141d2:	eddd 7a02 	vldr	s15, [sp, #8]
 80141d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e2:	d408      	bmi.n	80141f6 <MEMS_runMagCal+0x15b6>
 80141e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80141e8:	ee17 3a10 	vmov	r3, s14
 80141ec:	b21b      	sxth	r3, r3
 80141ee:	ee07 3a90 	vmov	s15, r3
 80141f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141f6:	eddf 6a81 	vldr	s13, [pc, #516]	; 80143fc <MEMS_runMagCal+0x17bc>
 80141fa:	ee86 7a88 	vdiv.f32	s14, s13, s16
 80141fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014206:	dc08      	bgt.n	801421a <MEMS_runMagCal+0x15da>
 8014208:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801420c:	ee17 3a10 	vmov	r3, s14
 8014210:	b21b      	sxth	r3, r3
 8014212:	ee07 3a90 	vmov	s15, r3
 8014216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801421a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801421e:	eddf 7a70 	vldr	s15, [pc, #448]	; 80143e0 <MEMS_runMagCal+0x17a0>
 8014222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422a:	f340 8424 	ble.w	8014a76 <MEMS_runMagCal+0x1e36>
 801422e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80143e4 <MEMS_runMagCal+0x17a4>
 8014232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801423a:	f140 841c 	bpl.w	8014a76 <MEMS_runMagCal+0x1e36>
 801423e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80143e8 <MEMS_runMagCal+0x17a8>
 8014242:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014246:	eee7 7a26 	vfma.f32	s15, s14, s13
 801424a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801424e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014252:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80143fc <MEMS_runMagCal+0x17bc>
 8014256:	eddf ba6b 	vldr	s23, [pc, #428]	; 8014404 <MEMS_runMagCal+0x17c4>
 801425a:	ed9f ba64 	vldr	s22, [pc, #400]	; 80143ec <MEMS_runMagCal+0x17ac>
 801425e:	eddf aa64 	vldr	s21, [pc, #400]	; 80143f0 <MEMS_runMagCal+0x17b0>
 8014262:	9d03      	ldr	r5, [sp, #12]
 8014264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014268:	ee68 4a09 	vmul.f32	s9, s16, s18
 801426c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8014270:	ee68 9a29 	vmul.f32	s19, s16, s19
 8014274:	edc4 4a00 	vstr	s9, [r4]
 8014278:	ed84 aa01 	vstr	s20, [r4, #4]
 801427c:	edc4 9a02 	vstr	s19, [r4, #8]
 8014280:	edc4 7a03 	vstr	s15, [r4, #12]
 8014284:	edc4 7a06 	vstr	s15, [r4, #24]
 8014288:	ab11      	add	r3, sp, #68	; 0x44
 801428a:	ee1c 0a10 	vmov	r0, s24
 801428e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014290:	eeb0 0a48 	vmov.f32	s0, s16
 8014294:	4621      	mov	r1, r4
 8014296:	f7fe fa01 	bl	801269c <MEMS_SolveLinearEq>
 801429a:	1c6b      	adds	r3, r5, #1
 801429c:	2800      	cmp	r0, #0
 801429e:	f43e aed1 	beq.w	8013044 <MEMS_runMagCal+0x404>
 80142a2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 80142a6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80142aa:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 80142ae:	edd4 4a00 	vldr	s9, [r4]
 80142b2:	ed94 5a01 	vldr	s10, [r4, #4]
 80142b6:	edd4 5a02 	vldr	s11, [r4, #8]
 80142ba:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80142be:	ed94 6a03 	vldr	s12, [r4, #12]
 80142c2:	eef0 6ae3 	vabs.f32	s13, s7
 80142c6:	eef0 7ac3 	vabs.f32	s15, s6
 80142ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80142ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d2:	bfb8      	it	lt
 80142d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80142d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e0:	bfb8      	it	lt
 80142e2:	eef0 7a6b 	vmovlt.f32	s15, s23
 80142e6:	eef0 6ac4 	vabs.f32	s13, s8
 80142ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80142ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f2:	bfb8      	it	lt
 80142f4:	eef0 6a67 	vmovlt.f32	s13, s15
 80142f8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80142fc:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014300:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014304:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014308:	eef4 6acb 	vcmpe.f32	s13, s22
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	edc4 4a00 	vstr	s9, [r4]
 8014314:	ed84 5a01 	vstr	s10, [r4, #4]
 8014318:	edc4 5a02 	vstr	s11, [r4, #8]
 801431c:	ed84 6a03 	vstr	s12, [r4, #12]
 8014320:	eef0 7ac7 	vabs.f32	s15, s14
 8014324:	d507      	bpl.n	8014336 <MEMS_runMagCal+0x16f6>
 8014326:	eef4 7aea 	vcmpe.f32	s15, s21
 801432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432e:	d502      	bpl.n	8014336 <MEMS_runMagCal+0x16f6>
 8014330:	2d01      	cmp	r5, #1
 8014332:	f63e ae8b 	bhi.w	801304c <MEMS_runMagCal+0x40c>
 8014336:	b2dd      	uxtb	r5, r3
 8014338:	2d05      	cmp	r5, #5
 801433a:	d1a5      	bne.n	8014288 <MEMS_runMagCal+0x1648>
 801433c:	f7fe be86 	b.w	801304c <MEMS_runMagCal+0x40c>
 8014340:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8014344:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8014348:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 801434c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 80143f4 <MEMS_runMagCal+0x17b4>
 8014350:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014354:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8014358:	ee77 7a85 	vadd.f32	s15, s15, s10
 801435c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014360:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014364:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436c:	bf88      	it	hi
 801436e:	eef0 7a64 	vmovhi.f32	s15, s9
 8014372:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437a:	bfb8      	it	lt
 801437c:	eef0 7a45 	vmovlt.f32	s15, s10
 8014380:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014384:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438c:	dc0e      	bgt.n	80143ac <MEMS_runMagCal+0x176c>
 801438e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014392:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439a:	dc07      	bgt.n	80143ac <MEMS_runMagCal+0x176c>
 801439c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80143a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a8:	f77f ad73 	ble.w	8013e92 <MEMS_runMagCal+0x1252>
 80143ac:	2300      	movs	r3, #0
 80143ae:	f88b 3000 	strb.w	r3, [fp]
 80143b2:	f7ff b880 	b.w	80134b6 <MEMS_runMagCal+0x876>
 80143b6:	2300      	movs	r3, #0
 80143b8:	9307      	str	r3, [sp, #28]
 80143ba:	2301      	movs	r3, #1
 80143bc:	9303      	str	r3, [sp, #12]
 80143be:	f7ff bb61 	b.w	8013a84 <MEMS_runMagCal+0xe44>
 80143c2:	3301      	adds	r3, #1
 80143c4:	fb93 f2f7 	sdiv	r2, r3, r7
 80143c8:	fb07 3212 	mls	r2, r7, r2, r3
 80143cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ce:	b212      	sxth	r2, r2
 80143d0:	46bc      	mov	ip, r7
 80143d2:	f7ff bb75 	b.w	8013ac0 <MEMS_runMagCal+0xe80>
 80143d6:	bf00      	nop
 80143d8:	42960000 	.word	0x42960000
 80143dc:	430d0000 	.word	0x430d0000
 80143e0:	41966667 	.word	0x41966667
 80143e4:	433c0000 	.word	0x433c0000
 80143e8:	3c2e4c41 	.word	0x3c2e4c41
 80143ec:	3e99999a 	.word	0x3e99999a
 80143f0:	3f666666 	.word	0x3f666666
 80143f4:	3eaaaaab 	.word	0x3eaaaaab
 80143f8:	358637bd 	.word	0x358637bd
 80143fc:	423c0000 	.word	0x423c0000
 8014400:	3a83126f 	.word	0x3a83126f
 8014404:	00000000 	.word	0x00000000
 8014408:	eddd 7a08 	vldr	s15, [sp, #32]
 801440c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014400 <MEMS_runMagCal+0x17c0>
 8014410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014414:	ee07 3a10 	vmov	s14, r3
 8014418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801441c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014420:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014424:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014428:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014430:	f63f aa67 	bhi.w	8013902 <MEMS_runMagCal+0xcc2>
 8014434:	9b07      	ldr	r3, [sp, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f43f a83d 	beq.w	80134b6 <MEMS_runMagCal+0x876>
 801443c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8014440:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014444:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801444c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014454:	bf4c      	ite	mi
 8014456:	2301      	movmi	r3, #1
 8014458:	2300      	movpl	r3, #0
 801445a:	9307      	str	r3, [sp, #28]
 801445c:	f7ff ba55 	b.w	801390a <MEMS_runMagCal+0xcca>
 8014460:	fb92 f1f0 	sdiv	r1, r2, r0
 8014464:	fb00 2211 	mls	r2, r0, r1, r2
 8014468:	b211      	sxth	r1, r2
 801446a:	4605      	mov	r5, r0
 801446c:	f7ff b8da 	b.w	8013624 <MEMS_runMagCal+0x9e4>
 8014470:	2200      	movs	r2, #0
 8014472:	23ff      	movs	r3, #255	; 0xff
 8014474:	ee1c 0a10 	vmov	r0, s24
 8014478:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801447c:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8014480:	eeb0 0a49 	vmov.f32	s0, s18
 8014484:	4649      	mov	r1, r9
 8014486:	f7f7 fd11 	bl	800beac <MEMS_updateMagBufferIndex>
 801448a:	f7ff b90b 	b.w	80136a4 <MEMS_runMagCal+0xa64>
 801448e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014492:	fb03 f60c 	mul.w	r6, r3, ip
 8014496:	fb03 f202 	mul.w	r2, r3, r2
 801449a:	fb03 f301 	mul.w	r3, r3, r1
 801449e:	ee06 6a90 	vmov	s13, r6
 80144a2:	ee07 2a10 	vmov	s14, r2
 80144a6:	ee07 3a90 	vmov	s15, r3
 80144aa:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80143f8 <MEMS_runMagCal+0x17b8>
 80144ae:	9e05      	ldr	r6, [sp, #20]
 80144b0:	9400      	str	r4, [sp, #0]
 80144b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80144b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80144ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80144c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80144c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80144ca:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 80144ce:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80144d2:	e9c5 0003 	strd	r0, r0, [r5, #12]
 80144d6:	e9c5 0005 	strd	r0, r0, [r5, #20]
 80144da:	6028      	str	r0, [r5, #0]
 80144dc:	ed96 0a01 	vldr	s0, [r6, #4]
 80144e0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80144e4:	4642      	mov	r2, r8
 80144e6:	ab0d      	add	r3, sp, #52	; 0x34
 80144e8:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 80144ec:	ad0e      	add	r5, sp, #56	; 0x38
 80144ee:	ee1c 0a10 	vmov	r0, s24
 80144f2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80144f6:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80144fa:	f7f7 fd79 	bl	800bff0 <getMagStats.constprop.0>
 80144fe:	9500      	str	r5, [sp, #0]
 8014500:	ed96 0a01 	vldr	s0, [r6, #4]
 8014504:	ee1c 0a10 	vmov	r0, s24
 8014508:	aa2d      	add	r2, sp, #180	; 0xb4
 801450a:	ab0d      	add	r3, sp, #52	; 0x34
 801450c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8014510:	f7f7 fd6e 	bl	800bff0 <getMagStats.constprop.0>
 8014514:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80143fc <MEMS_runMagCal+0x17bc>
 8014518:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801451c:	ed95 7a00 	vldr	s14, [r5]
 8014520:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014524:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014528:	eef0 7ae7 	vabs.f32	s15, s15
 801452c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014534:	d505      	bpl.n	8014542 <MEMS_runMagCal+0x1902>
 8014536:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453e:	f100 81fa 	bmi.w	8014936 <MEMS_runMagCal+0x1cf6>
 8014542:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014546:	eef4 7ae6 	vcmpe.f32	s15, s13
 801454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454e:	f140 81a8 	bpl.w	80148a2 <MEMS_runMagCal+0x1c62>
 8014552:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801455a:	9b03      	ldr	r3, [sp, #12]
 801455c:	bfb8      	it	lt
 801455e:	2302      	movlt	r3, #2
 8014560:	edd4 6a00 	vldr	s13, [r4]
 8014564:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801456c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014574:	f57e af9f 	bpl.w	80134b6 <MEMS_runMagCal+0x876>
 8014578:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 801457c:	429a      	cmp	r2, r3
 801457e:	f63e af9a 	bhi.w	80134b6 <MEMS_runMagCal+0x876>
 8014582:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801458a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014592:	d40e      	bmi.n	80145b2 <MEMS_runMagCal+0x1972>
 8014594:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014598:	eef4 6ae7 	vcmpe.f32	s13, s15
 801459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a0:	f140 80d4 	bpl.w	801474c <MEMS_runMagCal+0x1b0c>
 80145a4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80145a8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80145ac:	429a      	cmp	r2, r3
 80145ae:	f080 80cd 	bcs.w	801474c <MEMS_runMagCal+0x1b0c>
 80145b2:	9b05      	ldr	r3, [sp, #20]
 80145b4:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 80145b8:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 80145bc:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 80145c0:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 80145c4:	edd3 5a01 	vldr	s11, [r3, #4]
 80145c8:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 80145cc:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 80145d0:	1b8b      	subs	r3, r1, r6
 80145d2:	eba0 0c07 	sub.w	ip, r0, r7
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	bfb8      	it	lt
 80145da:	425b      	neglt	r3, r3
 80145dc:	f1bc 0f00 	cmp.w	ip, #0
 80145e0:	bfb8      	it	lt
 80145e2:	f1cc 0c00 	rsblt	ip, ip, #0
 80145e6:	4563      	cmp	r3, ip
 80145e8:	bfb8      	it	lt
 80145ea:	4663      	movlt	r3, ip
 80145ec:	eba2 0c04 	sub.w	ip, r2, r4
 80145f0:	f1bc 0f00 	cmp.w	ip, #0
 80145f4:	b21b      	sxth	r3, r3
 80145f6:	bfb8      	it	lt
 80145f8:	f1cc 0c00 	rsblt	ip, ip, #0
 80145fc:	4563      	cmp	r3, ip
 80145fe:	bfb8      	it	lt
 8014600:	4663      	movlt	r3, ip
 8014602:	b21b      	sxth	r3, r3
 8014604:	ee07 3a90 	vmov	s15, r3
 8014608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801460c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014610:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014614:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461c:	f140 8096 	bpl.w	801474c <MEMS_runMagCal+0x1b0c>
 8014620:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014624:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014628:	ee86 2a87 	vdiv.f32	s4, s13, s14
 801462c:	ee04 3a90 	vmov	s9, r3
 8014630:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8014634:	ee05 3a10 	vmov	s10, r3
 8014638:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 801463c:	ee07 0a90 	vmov	s15, r0
 8014640:	ee05 3a90 	vmov	s11, r3
 8014644:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014648:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801464c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014650:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014654:	ee06 3a10 	vmov	s12, r3
 8014658:	ee03 7a90 	vmov	s7, r7
 801465c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8014660:	ee07 1a90 	vmov	s15, r1
 8014664:	ee00 3a90 	vmov	s1, r3
 8014668:	ee66 6a84 	vmul.f32	s13, s13, s8
 801466c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014670:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014674:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801467c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014680:	ee03 6a90 	vmov	s7, r6
 8014684:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014688:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801468c:	ee07 2a90 	vmov	s15, r2
 8014690:	ee01 3a10 	vmov	s2, r3
 8014694:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014698:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801469c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80146a0:	eee2 4a20 	vfma.f32	s9, s4, s1
 80146a4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80146a8:	ee01 3a90 	vmov	s3, r3
 80146ac:	ee25 5a04 	vmul.f32	s10, s10, s8
 80146b0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80146b4:	eea2 7a03 	vfma.f32	s14, s4, s6
 80146b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146bc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80146c0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80146c4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80146c8:	ee03 4a90 	vmov	s7, r4
 80146cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80146d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80146d4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80146d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80146dc:	ee16 2a90 	vmov	r2, s13
 80146e0:	ee04 3a10 	vmov	s8, r3
 80146e4:	eea2 5a01 	vfma.f32	s10, s4, s2
 80146e8:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 80146ec:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80146f0:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80146f4:	eee2 7a23 	vfma.f32	s15, s4, s7
 80146f8:	ee14 2a90 	vmov	r2, s9
 80146fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014700:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014704:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014708:	eee2 5a21 	vfma.f32	s11, s4, s3
 801470c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014710:	eea2 6a04 	vfma.f32	s12, s4, s8
 8014714:	ee17 2a10 	vmov	r2, s14
 8014718:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801471c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014720:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8014724:	ee15 2a10 	vmov	r2, s10
 8014728:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801472c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014730:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8014734:	ee17 2a90 	vmov	r2, s15
 8014738:	ee16 3a10 	vmov	r3, s12
 801473c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014740:	ee15 2a90 	vmov	r2, s11
 8014744:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014748:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801474c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801474e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014752:	f7fe bda2 	b.w	801329a <MEMS_runMagCal+0x65a>
 8014756:	ee1c 0a10 	vmov	r0, s24
 801475a:	eeb0 0a49 	vmov.f32	s0, s18
 801475e:	4649      	mov	r1, r9
 8014760:	f7f7 fba4 	bl	800beac <MEMS_updateMagBufferIndex>
 8014764:	f7ff b89f 	b.w	80138a6 <MEMS_runMagCal+0xc66>
 8014768:	eddd 7a08 	vldr	s15, [sp, #32]
 801476c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014400 <MEMS_runMagCal+0x17c0>
 8014770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014778:	e660      	b.n	801443c <MEMS_runMagCal+0x17fc>
 801477a:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8014404 <MEMS_runMagCal+0x17c4>
 801477e:	1c6b      	adds	r3, r5, #1
 8014780:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014784:	ad0e      	add	r5, sp, #56	; 0x38
 8014786:	fb93 f1f6 	sdiv	r1, r3, r6
 801478a:	fa1f fc86 	uxth.w	ip, r6
 801478e:	fb06 3311 	mls	r3, r6, r1, r3
 8014792:	edc5 6a00 	vstr	s13, [r5]
 8014796:	2e00      	cmp	r6, #0
 8014798:	f000 80e1 	beq.w	801495e <MEMS_runMagCal+0x1d1e>
 801479c:	b29b      	uxth	r3, r3
 801479e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147a2:	1c58      	adds	r0, r3, #1
 80147a4:	eeb0 6a66 	vmov.f32	s12, s13
 80147a8:	fa10 fc8c 	uxtah	ip, r0, ip
 80147ac:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80147b0:	4619      	mov	r1, r3
 80147b2:	e000      	b.n	80147b6 <MEMS_runMagCal+0x1b76>
 80147b4:	3001      	adds	r0, #1
 80147b6:	fbb1 f3f6 	udiv	r3, r1, r6
 80147ba:	fb06 1313 	mls	r3, r6, r3, r1
 80147be:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80147c2:	8a99      	ldrh	r1, [r3, #20]
 80147c4:	4571      	cmp	r1, lr
 80147c6:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 80147ca:	f1a3 031c 	sub.w	r3, r3, #28
 80147ce:	bf98      	it	ls
 80147d0:	ebae 0301 	subls.w	r3, lr, r1
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	fb03 f303 	mul.w	r3, r3, r3
 80147da:	ee07 1a10 	vmov	s14, r1
 80147de:	ee07 3a90 	vmov	s15, r3
 80147e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80147e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147ea:	4584      	cmp	ip, r0
 80147ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80147f0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80147f4:	4601      	mov	r1, r0
 80147f6:	d1dd      	bne.n	80147b4 <MEMS_runMagCal+0x1b74>
 80147f8:	ee07 4a90 	vmov	s15, r4
 80147fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014800:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014b9c <MEMS_runMagCal+0x1f5c>
 8014804:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014ba0 <MEMS_runMagCal+0x1f60>
 8014808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801480c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014810:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014814:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014818:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801481c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014824:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014828:	edc5 7a00 	vstr	s15, [r5]
 801482c:	dd47      	ble.n	80148be <MEMS_runMagCal+0x1c7e>
 801482e:	eddf 7add 	vldr	s15, [pc, #884]	; 8014ba4 <MEMS_runMagCal+0x1f64>
 8014832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014836:	2302      	movs	r3, #2
 8014838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014840:	f77e aead 	ble.w	801359e <MEMS_runMagCal+0x95e>
 8014844:	2301      	movs	r3, #1
 8014846:	f88b 3001 	strb.w	r3, [fp, #1]
 801484a:	f7fe bea8 	b.w	801359e <MEMS_runMagCal+0x95e>
 801484e:	ee1c 0a10 	vmov	r0, s24
 8014852:	eeb0 0a49 	vmov.f32	s0, s18
 8014856:	4649      	mov	r1, r9
 8014858:	f7f7 fb28 	bl	800beac <MEMS_updateMagBufferIndex>
 801485c:	f7fe bf0d 	b.w	801367a <MEMS_runMagCal+0xa3a>
 8014860:	9b02      	ldr	r3, [sp, #8]
 8014862:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014866:	f8db 100c 	ldr.w	r1, [fp, #12]
 801486a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801486e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014872:	4413      	add	r3, r2
 8014874:	4299      	cmp	r1, r3
 8014876:	f4bf ad99 	bcs.w	80143ac <MEMS_runMagCal+0x176c>
 801487a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801487c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014880:	fb03 f301 	mul.w	r3, r3, r1
 8014884:	3364      	adds	r3, #100	; 0x64
 8014886:	4293      	cmp	r3, r2
 8014888:	bf38      	it	cc
 801488a:	4613      	movcc	r3, r2
 801488c:	2200      	movs	r2, #0
 801488e:	f8cb 300c 	str.w	r3, [fp, #12]
 8014892:	f88b 2000 	strb.w	r2, [fp]
 8014896:	f7fe be0e 	b.w	80134b6 <MEMS_runMagCal+0x876>
 801489a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801489e:	f7ff ba6f 	b.w	8013d80 <MEMS_runMagCal+0x1140>
 80148a2:	9b03      	ldr	r3, [sp, #12]
 80148a4:	e65c      	b.n	8014560 <MEMS_runMagCal+0x1920>
 80148a6:	4619      	mov	r1, r3
 80148a8:	9b02      	ldr	r3, [sp, #8]
 80148aa:	3301      	adds	r3, #1
 80148ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80148b0:	fb01 3212 	mls	r2, r1, r2, r3
 80148b4:	9304      	str	r3, [sp, #16]
 80148b6:	b212      	sxth	r2, r2
 80148b8:	4689      	mov	r9, r1
 80148ba:	f7ff ba11 	b.w	8013ce0 <MEMS_runMagCal+0x10a0>
 80148be:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014ba8 <MEMS_runMagCal+0x1f68>
 80148c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014ba4 <MEMS_runMagCal+0x1f64>
 80148ce:	d434      	bmi.n	801493a <MEMS_runMagCal+0x1cfa>
 80148d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d8:	bfc4      	itt	gt
 80148da:	2301      	movgt	r3, #1
 80148dc:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80148e0:	f7ff b892 	b.w	8013a08 <MEMS_runMagCal+0xdc8>
 80148e4:	9b05      	ldr	r3, [sp, #20]
 80148e6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80148ea:	ed93 0a01 	vldr	s0, [r3, #4]
 80148ee:	f7fe bd84 	b.w	80133fa <MEMS_runMagCal+0x7ba>
 80148f2:	2303      	movs	r3, #3
 80148f4:	9303      	str	r3, [sp, #12]
 80148f6:	f7fe bdd4 	b.w	80134a2 <MEMS_runMagCal+0x862>
 80148fa:	4619      	mov	r1, r3
 80148fc:	f7ff ba78 	b.w	8013df0 <MEMS_runMagCal+0x11b0>
 8014900:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014904:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014908:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014910:	f73f ad4c 	bgt.w	80143ac <MEMS_runMagCal+0x176c>
 8014914:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014918:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	f73f ad44 	bgt.w	80143ac <MEMS_runMagCal+0x176c>
 8014924:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014928:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014930:	f77f aaaf 	ble.w	8013e92 <MEMS_runMagCal+0x1252>
 8014934:	e53a      	b.n	80143ac <MEMS_runMagCal+0x176c>
 8014936:	2303      	movs	r3, #3
 8014938:	e612      	b.n	8014560 <MEMS_runMagCal+0x1920>
 801493a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801493e:	2300      	movs	r3, #0
 8014940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014944:	f88b 3001 	strb.w	r3, [fp, #1]
 8014948:	f04f 0103 	mov.w	r1, #3
 801494c:	bfc8      	it	gt
 801494e:	2301      	movgt	r3, #1
 8014950:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014954:	bfc8      	it	gt
 8014956:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801495a:	f7ff b858 	b.w	8013a0e <MEMS_runMagCal+0xdce>
 801495e:	2303      	movs	r3, #3
 8014960:	f88b c001 	strb.w	ip, [fp, #1]
 8014964:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014968:	f7ff b851 	b.w	8013a0e <MEMS_runMagCal+0xdce>
 801496c:	9b04      	ldr	r3, [sp, #16]
 801496e:	fb93 f7f9 	sdiv	r7, r3, r9
 8014972:	fb09 3717 	mls	r7, r9, r7, r3
 8014976:	b23f      	sxth	r7, r7
 8014978:	f7ff ba9a 	b.w	8013eb0 <MEMS_runMagCal+0x1270>
 801497c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014bac <MEMS_runMagCal+0x1f6c>
 8014980:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014984:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014988:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801498c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014990:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014994:	ee17 2a90 	vmov	r2, s15
 8014998:	b291      	uxth	r1, r2
 801499a:	b113      	cbz	r3, 80149a2 <MEMS_runMagCal+0x1d62>
 801499c:	3b01      	subs	r3, #1
 801499e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80149a2:	ee1c 0a10 	vmov	r0, s24
 80149a6:	f7f7 fa81 	bl	800beac <MEMS_updateMagBufferIndex>
 80149aa:	eddd 7a08 	vldr	s15, [sp, #32]
 80149ae:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80149b2:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014bb0 <MEMS_runMagCal+0x1f70>
 80149b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149ba:	f001 f8b5 	bl	8015b28 <roundf>
 80149be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80149c2:	2300      	movs	r3, #0
 80149c4:	ed8b 0a01 	vstr	s0, [fp, #4]
 80149c8:	f88b 3000 	strb.w	r3, [fp]
 80149cc:	f7fe bd73 	b.w	80134b6 <MEMS_runMagCal+0x876>
 80149d0:	fb93 f2f6 	sdiv	r2, r3, r6
 80149d4:	fb06 3312 	mls	r3, r6, r2, r3
 80149d8:	b21a      	sxth	r2, r3
 80149da:	4630      	mov	r0, r6
 80149dc:	f7ff bb00 	b.w	8013fe0 <MEMS_runMagCal+0x13a0>
 80149e0:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 80149e4:	f001 f8a0 	bl	8015b28 <roundf>
 80149e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80149ec:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80149f0:	ee17 3a90 	vmov	r3, s15
 80149f4:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 80149f8:	f8a9 3000 	strh.w	r3, [r9]
 80149fc:	f001 f894 	bl	8015b28 <roundf>
 8014a00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014a04:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014a08:	ee17 3a90 	vmov	r3, s15
 8014a0c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014a10:	f001 f88a 	bl	8015b28 <roundf>
 8014a14:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014a18:	ac0f      	add	r4, sp, #60	; 0x3c
 8014a1a:	ee17 5a90 	vmov	r5, s15
 8014a1e:	9400      	str	r4, [sp, #0]
 8014a20:	ee1c 0a10 	vmov	r0, s24
 8014a24:	4649      	mov	r1, r9
 8014a26:	ab10      	add	r3, sp, #64	; 0x40
 8014a28:	eeb0 0a48 	vmov.f32	s0, s16
 8014a2c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014a30:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014a34:	f7f7 fadc 	bl	800bff0 <getMagStats.constprop.0>
 8014a38:	ed94 7a00 	vldr	s14, [r4]
 8014a3c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014bb4 <MEMS_runMagCal+0x1f74>
 8014a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a48:	d50e      	bpl.n	8014a68 <MEMS_runMagCal+0x1e28>
 8014a4a:	b968      	cbnz	r0, 8014a68 <MEMS_runMagCal+0x1e28>
 8014a4c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014a50:	b32b      	cbz	r3, 8014a9e <MEMS_runMagCal+0x1e5e>
 8014a52:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014a56:	ee07 3a90 	vmov	s15, r3
 8014a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a66:	dc1a      	bgt.n	8014a9e <MEMS_runMagCal+0x1e5e>
 8014a68:	2300      	movs	r3, #0
 8014a6a:	f8c9 3000 	str.w	r3, [r9]
 8014a6e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014a72:	f7ff ba97 	b.w	8013fa4 <MEMS_runMagCal+0x1364>
 8014a76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a7a:	f7ff bbea 	b.w	8014252 <MEMS_runMagCal+0x1612>
 8014a7e:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014bb8 <MEMS_runMagCal+0x1f78>
 8014a82:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014a86:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014a8a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014a8e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014a92:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014a96:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014a9a:	f7ff bb2e 	b.w	80140fa <MEMS_runMagCal+0x14ba>
 8014a9e:	eddd 7a08 	vldr	s15, [sp, #32]
 8014aa2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014aa6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014bb0 <MEMS_runMagCal+0x1f70>
 8014aaa:	2303      	movs	r3, #3
 8014aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ab0:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014ab4:	e781      	b.n	80149ba <MEMS_runMagCal+0x1d7a>
 8014ab6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014bbc <MEMS_runMagCal+0x1f7c>
 8014aba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac2:	f77e ab1b 	ble.w	80130fc <MEMS_runMagCal+0x4bc>
 8014ac6:	f7fe bb21 	b.w	801310c <MEMS_runMagCal+0x4cc>
 8014aca:	2224      	movs	r2, #36	; 0x24
 8014acc:	2100      	movs	r1, #0
 8014ace:	a82d      	add	r0, sp, #180	; 0xb4
 8014ad0:	f002 fe54 	bl	801777c <memset>
 8014ad4:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014bc0 <MEMS_runMagCal+0x1f80>
 8014ad8:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014adc:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014ae0:	4627      	mov	r7, r4
 8014ae2:	ae2d      	add	r6, sp, #180	; 0xb4
 8014ae4:	2500      	movs	r5, #0
 8014ae6:	3501      	adds	r5, #1
 8014ae8:	ecb7 0a01 	vldmia	r7!, {s0}
 8014aec:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014af0:	f001 f81a 	bl	8015b28 <roundf>
 8014af4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014af8:	4633      	mov	r3, r6
 8014afa:	edc3 9a00 	vstr	s19, [r3]
 8014afe:	ee10 3a10 	vmov	r3, s0
 8014b02:	2d03      	cmp	r5, #3
 8014b04:	f829 3b02 	strh.w	r3, [r9], #2
 8014b08:	f106 0610 	add.w	r6, r6, #16
 8014b0c:	d1eb      	bne.n	8014ae6 <MEMS_runMagCal+0x1ea6>
 8014b0e:	ad12      	add	r5, sp, #72	; 0x48
 8014b10:	9500      	str	r5, [sp, #0]
 8014b12:	ab2b      	add	r3, sp, #172	; 0xac
 8014b14:	eeb0 0a48 	vmov.f32	s0, s16
 8014b18:	ee1c 0a10 	vmov	r0, s24
 8014b1c:	a915      	add	r1, sp, #84	; 0x54
 8014b1e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014b20:	f7f7 fa66 	bl	800bff0 <getMagStats.constprop.0>
 8014b24:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014bc0 <MEMS_runMagCal+0x1f80>
 8014b28:	ed94 4a03 	vldr	s8, [r4, #12]
 8014b2c:	edd5 7a00 	vldr	s15, [r5]
 8014b30:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014b34:	edd4 6a06 	vldr	s13, [r4, #24]
 8014b38:	edd4 4a00 	vldr	s9, [r4]
 8014b3c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014b40:	edd4 5a02 	vldr	s11, [r4, #8]
 8014b44:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014b48:	ad2e      	add	r5, sp, #184	; 0xb8
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	e9c5 3300 	strd	r3, r3, [r5]
 8014b50:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014b54:	60ab      	str	r3, [r5, #8]
 8014b56:	61ab      	str	r3, [r5, #24]
 8014b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014b5c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b64:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014b68:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014b6c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014b70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014b74:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014b78:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014b7c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014b80:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014b84:	d405      	bmi.n	8014b92 <MEMS_runMagCal+0x1f52>
 8014b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8e:	f57e aa9b 	bpl.w	80130c8 <MEMS_runMagCal+0x488>
 8014b92:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014bc4 <MEMS_runMagCal+0x1f84>
 8014b96:	f7fe ba9d 	b.w	80130d4 <MEMS_runMagCal+0x494>
 8014b9a:	bf00      	nop
 8014b9c:	3c23d70a 	.word	0x3c23d70a
 8014ba0:	4b095440 	.word	0x4b095440
 8014ba4:	481c4000 	.word	0x481c4000
 8014ba8:	471c4000 	.word	0x471c4000
 8014bac:	433d0000 	.word	0x433d0000
 8014bb0:	3a83126f 	.word	0x3a83126f
 8014bb4:	3ff4cccd 	.word	0x3ff4cccd
 8014bb8:	7f800000 	.word	0x7f800000
 8014bbc:	3ee66666 	.word	0x3ee66666
 8014bc0:	423c0000 	.word	0x423c0000
 8014bc4:	00000000 	.word	0x00000000
 8014bc8:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	f67e acac 	bls.w	801352a <MEMS_runMagCal+0x8ea>
 8014bd2:	f7fe bca0 	b.w	8013516 <MEMS_runMagCal+0x8d6>
 8014bd6:	bf00      	nop

08014bd8 <MotionFX_GetStateSize>:
 8014bd8:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop

08014be0 <MotionFX_initialize>:
 8014be0:	4a3b      	ldr	r2, [pc, #236]	; (8014cd0 <MotionFX_initialize+0xf0>)
 8014be2:	493c      	ldr	r1, [pc, #240]	; (8014cd4 <MotionFX_initialize+0xf4>)
 8014be4:	6813      	ldr	r3, [r2, #0]
 8014be6:	f023 0301 	bic.w	r3, r3, #1
 8014bea:	b530      	push	{r4, r5, lr}
 8014bec:	6013      	str	r3, [r2, #0]
 8014bee:	680b      	ldr	r3, [r1, #0]
 8014bf0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014bf4:	4013      	ands	r3, r2
 8014bf6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014bfa:	42ab      	cmp	r3, r5
 8014bfc:	b085      	sub	sp, #20
 8014bfe:	4604      	mov	r4, r0
 8014c00:	d013      	beq.n	8014c2a <MotionFX_initialize+0x4a>
 8014c02:	680b      	ldr	r3, [r1, #0]
 8014c04:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014c08:	4013      	ands	r3, r2
 8014c0a:	428b      	cmp	r3, r1
 8014c0c:	d00d      	beq.n	8014c2a <MotionFX_initialize+0x4a>
 8014c0e:	4b32      	ldr	r3, [pc, #200]	; (8014cd8 <MotionFX_initialize+0xf8>)
 8014c10:	2201      	movs	r2, #1
 8014c12:	601a      	str	r2, [r3, #0]
 8014c14:	681a      	ldr	r2, [r3, #0]
 8014c16:	2a00      	cmp	r2, #0
 8014c18:	d1fc      	bne.n	8014c14 <MotionFX_initialize+0x34>
 8014c1a:	4b30      	ldr	r3, [pc, #192]	; (8014cdc <MotionFX_initialize+0xfc>)
 8014c1c:	4a30      	ldr	r2, [pc, #192]	; (8014ce0 <MotionFX_initialize+0x100>)
 8014c1e:	601a      	str	r2, [r3, #0]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	4b30      	ldr	r3, [pc, #192]	; (8014ce4 <MotionFX_initialize+0x104>)
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d01f      	beq.n	8014c68 <MotionFX_initialize+0x88>
 8014c28:	e7fe      	b.n	8014c28 <MotionFX_initialize+0x48>
 8014c2a:	4b2f      	ldr	r3, [pc, #188]	; (8014ce8 <MotionFX_initialize+0x108>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1ed      	bne.n	8014c0e <MotionFX_initialize+0x2e>
 8014c32:	4a2e      	ldr	r2, [pc, #184]	; (8014cec <MotionFX_initialize+0x10c>)
 8014c34:	6813      	ldr	r3, [r2, #0]
 8014c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c3a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014c3e:	d006      	beq.n	8014c4e <MotionFX_initialize+0x6e>
 8014c40:	6813      	ldr	r3, [r2, #0]
 8014c42:	f240 4283 	movw	r2, #1155	; 0x483
 8014c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d1df      	bne.n	8014c0e <MotionFX_initialize+0x2e>
 8014c4e:	4b28      	ldr	r3, [pc, #160]	; (8014cf0 <MotionFX_initialize+0x110>)
 8014c50:	2201      	movs	r2, #1
 8014c52:	601a      	str	r2, [r3, #0]
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	2a00      	cmp	r2, #0
 8014c58:	d1fc      	bne.n	8014c54 <MotionFX_initialize+0x74>
 8014c5a:	4b26      	ldr	r3, [pc, #152]	; (8014cf4 <MotionFX_initialize+0x114>)
 8014c5c:	4a20      	ldr	r2, [pc, #128]	; (8014ce0 <MotionFX_initialize+0x100>)
 8014c5e:	601a      	str	r2, [r3, #0]
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	4b20      	ldr	r3, [pc, #128]	; (8014ce4 <MotionFX_initialize+0x104>)
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d1df      	bne.n	8014c28 <MotionFX_initialize+0x48>
 8014c68:	4b23      	ldr	r3, [pc, #140]	; (8014cf8 <MotionFX_initialize+0x118>)
 8014c6a:	4a24      	ldr	r2, [pc, #144]	; (8014cfc <MotionFX_initialize+0x11c>)
 8014c6c:	9301      	str	r3, [sp, #4]
 8014c6e:	2501      	movs	r5, #1
 8014c70:	4620      	mov	r0, r4
 8014c72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c76:	7115      	strb	r5, [r2, #4]
 8014c78:	f7f7 faa0 	bl	800c1bc <MFX_emptyAttitude>
 8014c7c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014c80:	a901      	add	r1, sp, #4
 8014c82:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014c86:	f7f6 fdc3 	bl	800b810 <updateOrientation>
 8014c8a:	a903      	add	r1, sp, #12
 8014c8c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014c90:	f7f6 fdbe 	bl	800b810 <updateOrientation>
 8014c94:	a902      	add	r1, sp, #8
 8014c96:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014c9a:	f7f6 fdb9 	bl	800b810 <updateOrientation>
 8014c9e:	4818      	ldr	r0, [pc, #96]	; (8014d00 <MotionFX_initialize+0x120>)
 8014ca0:	4918      	ldr	r1, [pc, #96]	; (8014d04 <MotionFX_initialize+0x124>)
 8014ca2:	4a19      	ldr	r2, [pc, #100]	; (8014d08 <MotionFX_initialize+0x128>)
 8014ca4:	4b19      	ldr	r3, [pc, #100]	; (8014d0c <MotionFX_initialize+0x12c>)
 8014ca6:	7365      	strb	r5, [r4, #13]
 8014ca8:	4d19      	ldr	r5, [pc, #100]	; (8014d10 <MotionFX_initialize+0x130>)
 8014caa:	62a0      	str	r0, [r4, #40]	; 0x28
 8014cac:	6361      	str	r1, [r4, #52]	; 0x34
 8014cae:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014cb2:	2100      	movs	r1, #0
 8014cb4:	61a2      	str	r2, [r4, #24]
 8014cb6:	61e3      	str	r3, [r4, #28]
 8014cb8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014cbc:	f240 1301 	movw	r3, #257	; 0x101
 8014cc0:	6225      	str	r5, [r4, #32]
 8014cc2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014cc4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014cc8:	80a2      	strh	r2, [r4, #4]
 8014cca:	81e3      	strh	r3, [r4, #14]
 8014ccc:	b005      	add	sp, #20
 8014cce:	bd30      	pop	{r4, r5, pc}
 8014cd0:	e0002000 	.word	0xe0002000
 8014cd4:	e000ed00 	.word	0xe000ed00
 8014cd8:	40023008 	.word	0x40023008
 8014cdc:	40023000 	.word	0x40023000
 8014ce0:	f407a5c2 	.word	0xf407a5c2
 8014ce4:	b5e8b5cd 	.word	0xb5e8b5cd
 8014ce8:	e0042000 	.word	0xe0042000
 8014cec:	5c001000 	.word	0x5c001000
 8014cf0:	58024c08 	.word	0x58024c08
 8014cf4:	58024c00 	.word	0x58024c00
 8014cf8:	00756e65 	.word	0x00756e65
 8014cfc:	200002e0 	.word	0x200002e0
 8014d00:	3f666666 	.word	0x3f666666
 8014d04:	3f2ac083 	.word	0x3f2ac083
 8014d08:	3a51b717 	.word	0x3a51b717
 8014d0c:	3a378034 	.word	0x3a378034
 8014d10:	3b378034 	.word	0x3b378034

08014d14 <MotionFX_setKnobs>:
 8014d14:	4b23      	ldr	r3, [pc, #140]	; (8014da4 <MotionFX_setKnobs+0x90>)
 8014d16:	791b      	ldrb	r3, [r3, #4]
 8014d18:	b903      	cbnz	r3, 8014d1c <MotionFX_setKnobs+0x8>
 8014d1a:	4770      	bx	lr
 8014d1c:	2900      	cmp	r1, #0
 8014d1e:	d0fc      	beq.n	8014d1a <MotionFX_setKnobs+0x6>
 8014d20:	b570      	push	{r4, r5, r6, lr}
 8014d22:	4604      	mov	r4, r0
 8014d24:	684a      	ldr	r2, [r1, #4]
 8014d26:	6808      	ldr	r0, [r1, #0]
 8014d28:	688b      	ldr	r3, [r1, #8]
 8014d2a:	6363      	str	r3, [r4, #52]	; 0x34
 8014d2c:	62a0      	str	r0, [r4, #40]	; 0x28
 8014d2e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014d30:	7b0b      	ldrb	r3, [r1, #12]
 8014d32:	7163      	strb	r3, [r4, #5]
 8014d34:	6908      	ldr	r0, [r1, #16]
 8014d36:	694a      	ldr	r2, [r1, #20]
 8014d38:	698b      	ldr	r3, [r1, #24]
 8014d3a:	6223      	str	r3, [r4, #32]
 8014d3c:	61e2      	str	r2, [r4, #28]
 8014d3e:	61a0      	str	r0, [r4, #24]
 8014d40:	7f0b      	ldrb	r3, [r1, #28]
 8014d42:	7123      	strb	r3, [r4, #4]
 8014d44:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014d48:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014d4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014d4e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014d52:	460a      	mov	r2, r1
 8014d54:	460b      	mov	r3, r1
 8014d56:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014d5a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014d5e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014d62:	7889      	ldrb	r1, [r1, #2]
 8014d64:	7892      	ldrb	r2, [r2, #2]
 8014d66:	789b      	ldrb	r3, [r3, #2]
 8014d68:	b084      	sub	sp, #16
 8014d6a:	f88d 1006 	strb.w	r1, [sp, #6]
 8014d6e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014d72:	a901      	add	r1, sp, #4
 8014d74:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014d78:	f88d 200a 	strb.w	r2, [sp, #10]
 8014d7c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014d80:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014d84:	f88d 300e 	strb.w	r3, [sp, #14]
 8014d88:	f7f6 fd42 	bl	800b810 <updateOrientation>
 8014d8c:	a903      	add	r1, sp, #12
 8014d8e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014d92:	f7f6 fd3d 	bl	800b810 <updateOrientation>
 8014d96:	a902      	add	r1, sp, #8
 8014d98:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014d9c:	f7f6 fd38 	bl	800b810 <updateOrientation>
 8014da0:	b004      	add	sp, #16
 8014da2:	bd70      	pop	{r4, r5, r6, pc}
 8014da4:	200002e0 	.word	0x200002e0

08014da8 <MotionFX_getKnobs>:
 8014da8:	4b1c      	ldr	r3, [pc, #112]	; (8014e1c <MotionFX_getKnobs+0x74>)
 8014daa:	791b      	ldrb	r3, [r3, #4]
 8014dac:	b903      	cbnz	r3, 8014db0 <MotionFX_getKnobs+0x8>
 8014dae:	4770      	bx	lr
 8014db0:	460a      	mov	r2, r1
 8014db2:	2900      	cmp	r1, #0
 8014db4:	d0fb      	beq.n	8014dae <MotionFX_getKnobs+0x6>
 8014db6:	b510      	push	{r4, lr}
 8014db8:	4604      	mov	r4, r0
 8014dba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014dbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dc0:	6093      	str	r3, [r2, #8]
 8014dc2:	6010      	str	r0, [r2, #0]
 8014dc4:	6051      	str	r1, [r2, #4]
 8014dc6:	7963      	ldrb	r3, [r4, #5]
 8014dc8:	7313      	strb	r3, [r2, #12]
 8014dca:	69a0      	ldr	r0, [r4, #24]
 8014dcc:	69e1      	ldr	r1, [r4, #28]
 8014dce:	6a23      	ldr	r3, [r4, #32]
 8014dd0:	6193      	str	r3, [r2, #24]
 8014dd2:	6110      	str	r0, [r2, #16]
 8014dd4:	6151      	str	r1, [r2, #20]
 8014dd6:	7923      	ldrb	r3, [r4, #4]
 8014dd8:	7713      	strb	r3, [r2, #28]
 8014dda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014dde:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014de2:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014de8:	f102 011d 	add.w	r1, r2, #29
 8014dec:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014df0:	f7f6 fb68 	bl	800b4c4 <findAxis>
 8014df4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014df8:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014dfc:	f7f6 fb62 	bl	800b4c4 <findAxis>
 8014e00:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014e04:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014e08:	f7f6 fb5c 	bl	800b4c4 <findAxis>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	f882 3020 	strb.w	r3, [r2, #32]
 8014e12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014e16:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014e1a:	bd10      	pop	{r4, pc}
 8014e1c:	200002e0 	.word	0x200002e0

08014e20 <MotionFX_enable_6X>:
 8014e20:	4b0e      	ldr	r3, [pc, #56]	; (8014e5c <MotionFX_enable_6X+0x3c>)
 8014e22:	791b      	ldrb	r3, [r3, #4]
 8014e24:	b903      	cbnz	r3, 8014e28 <MotionFX_enable_6X+0x8>
 8014e26:	4770      	bx	lr
 8014e28:	2900      	cmp	r1, #0
 8014e2a:	d0fc      	beq.n	8014e26 <MotionFX_enable_6X+0x6>
 8014e2c:	b530      	push	{r4, r5, lr}
 8014e2e:	1d05      	adds	r5, r0, #4
 8014e30:	b099      	sub	sp, #100	; 0x64
 8014e32:	4604      	mov	r4, r0
 8014e34:	4629      	mov	r1, r5
 8014e36:	225c      	movs	r2, #92	; 0x5c
 8014e38:	a801      	add	r0, sp, #4
 8014e3a:	f002 fc77 	bl	801772c <memcpy>
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f7f7 f9bc 	bl	800c1bc <MFX_emptyAttitude>
 8014e44:	a901      	add	r1, sp, #4
 8014e46:	4628      	mov	r0, r5
 8014e48:	225c      	movs	r2, #92	; 0x5c
 8014e4a:	f002 fc6f 	bl	801772c <memcpy>
 8014e4e:	2300      	movs	r3, #0
 8014e50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014e54:	7363      	strb	r3, [r4, #13]
 8014e56:	b019      	add	sp, #100	; 0x64
 8014e58:	bd30      	pop	{r4, r5, pc}
 8014e5a:	bf00      	nop
 8014e5c:	200002e0 	.word	0x200002e0

08014e60 <MotionFX_enable_9X>:
 8014e60:	4b0e      	ldr	r3, [pc, #56]	; (8014e9c <MotionFX_enable_9X+0x3c>)
 8014e62:	791b      	ldrb	r3, [r3, #4]
 8014e64:	b903      	cbnz	r3, 8014e68 <MotionFX_enable_9X+0x8>
 8014e66:	4770      	bx	lr
 8014e68:	2900      	cmp	r1, #0
 8014e6a:	d0fc      	beq.n	8014e66 <MotionFX_enable_9X+0x6>
 8014e6c:	b530      	push	{r4, r5, lr}
 8014e6e:	1d05      	adds	r5, r0, #4
 8014e70:	b099      	sub	sp, #100	; 0x64
 8014e72:	4604      	mov	r4, r0
 8014e74:	4629      	mov	r1, r5
 8014e76:	225c      	movs	r2, #92	; 0x5c
 8014e78:	a801      	add	r0, sp, #4
 8014e7a:	f002 fc57 	bl	801772c <memcpy>
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f7f7 f99c 	bl	800c1bc <MFX_emptyAttitude>
 8014e84:	a901      	add	r1, sp, #4
 8014e86:	4628      	mov	r0, r5
 8014e88:	225c      	movs	r2, #92	; 0x5c
 8014e8a:	f002 fc4f 	bl	801772c <memcpy>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014e94:	7363      	strb	r3, [r4, #13]
 8014e96:	b019      	add	sp, #100	; 0x64
 8014e98:	bd30      	pop	{r4, r5, pc}
 8014e9a:	bf00      	nop
 8014e9c:	200002e0 	.word	0x200002e0

08014ea0 <MotionFX_update>:
 8014ea0:	b470      	push	{r4, r5, r6}
 8014ea2:	4c06      	ldr	r4, [pc, #24]	; (8014ebc <MotionFX_update+0x1c>)
 8014ea4:	9e03      	ldr	r6, [sp, #12]
 8014ea6:	7925      	ldrb	r5, [r4, #4]
 8014ea8:	b90d      	cbnz	r5, 8014eae <MotionFX_update+0xe>
 8014eaa:	bc70      	pop	{r4, r5, r6}
 8014eac:	4770      	bx	lr
 8014eae:	461c      	mov	r4, r3
 8014eb0:	ed94 0a00 	vldr	s0, [r4]
 8014eb4:	4633      	mov	r3, r6
 8014eb6:	bc70      	pop	{r4, r5, r6}
 8014eb8:	f7fc bf02 	b.w	8011cc0 <iNemoEngine_API_Update>
 8014ebc:	200002e0 	.word	0x200002e0

08014ec0 <MotionFX_propagate>:
 8014ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ec4:	ed2d 8b06 	vpush	{d8-d10}
 8014ec8:	4ca3      	ldr	r4, [pc, #652]	; (8015158 <MotionFX_propagate+0x298>)
 8014eca:	7927      	ldrb	r7, [r4, #4]
 8014ecc:	b0a0      	sub	sp, #128	; 0x80
 8014ece:	b927      	cbnz	r7, 8014eda <MotionFX_propagate+0x1a>
 8014ed0:	b020      	add	sp, #128	; 0x80
 8014ed2:	ecbd 8b06 	vpop	{d8-d10}
 8014ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eda:	4616      	mov	r6, r2
 8014edc:	4604      	mov	r4, r0
 8014ede:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014ee2:	edd3 9a00 	vldr	s19, [r3]
 8014ee6:	460d      	mov	r5, r1
 8014ee8:	6851      	ldr	r1, [r2, #4]
 8014eea:	6892      	ldr	r2, [r2, #8]
 8014eec:	ab13      	add	r3, sp, #76	; 0x4c
 8014eee:	c307      	stmia	r3!, {r0, r1, r2}
 8014ef0:	6830      	ldr	r0, [r6, #0]
 8014ef2:	6871      	ldr	r1, [r6, #4]
 8014ef4:	68b2      	ldr	r2, [r6, #8]
 8014ef6:	ab10      	add	r3, sp, #64	; 0x40
 8014ef8:	c307      	stmia	r3!, {r0, r1, r2}
 8014efa:	4637      	mov	r7, r6
 8014efc:	ab16      	add	r3, sp, #88	; 0x58
 8014efe:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014f02:	6879      	ldr	r1, [r7, #4]
 8014f04:	68ba      	ldr	r2, [r7, #8]
 8014f06:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8014f0a:	c307      	stmia	r3!, {r0, r1, r2}
 8014f0c:	aa13      	add	r2, sp, #76	; 0x4c
 8014f0e:	4651      	mov	r1, sl
 8014f10:	a803      	add	r0, sp, #12
 8014f12:	f7f6 fa75 	bl	800b400 <rotVect>
 8014f16:	aa16      	add	r2, sp, #88	; 0x58
 8014f18:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014f1c:	a806      	add	r0, sp, #24
 8014f1e:	f7f6 fa6f 	bl	800b400 <rotVect>
 8014f22:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014f26:	2b09      	cmp	r3, #9
 8014f28:	d829      	bhi.n	8014f7e <MotionFX_propagate+0xbe>
 8014f2a:	eddd 8a04 	vldr	s17, [sp, #16]
 8014f2e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014f32:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014f36:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014f3a:	eee9 7a09 	vfma.f32	s15, s18, s18
 8014f3e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014f42:	ee17 0a90 	vmov	r0, s15
 8014f46:	f7eb faff 	bl	8000548 <__aeabi_f2d>
 8014f4a:	ec41 0b10 	vmov	d0, r0, r1
 8014f4e:	f000 fe7d 	bl	8015c4c <sqrt>
 8014f52:	ec51 0b10 	vmov	r0, r1, d0
 8014f56:	f7eb fe27 	bl	8000ba8 <__aeabi_d2f>
 8014f5a:	ee07 0a90 	vmov	s15, r0
 8014f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f62:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014f66:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014f6a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014f6e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f72:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014f76:	edcd 8a04 	vstr	s17, [sp, #16]
 8014f7a:	ed8d 8a05 	vstr	s16, [sp, #20]
 8014f7e:	7923      	ldrb	r3, [r4, #4]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f000 80d3 	beq.w	801512c <MotionFX_propagate+0x26c>
 8014f86:	ee07 3a90 	vmov	s15, r3
 8014f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f96:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8014f9a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8014f9e:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8014fa2:	edd2 7a00 	vldr	s15, [r2]
 8014fa6:	eddd 8a06 	vldr	s17, [sp, #24]
 8014faa:	ed9d 6a07 	vldr	s12, [sp, #28]
 8014fae:	ed9d 8a08 	vldr	s16, [sp, #32]
 8014fb2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801515c <MotionFX_propagate+0x29c>
 8014fb6:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8015160 <MotionFX_propagate+0x2a0>
 8014fba:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8014fbe:	ee26 9a07 	vmul.f32	s18, s12, s14
 8014fc2:	edc2 7a00 	vstr	s15, [r2]
 8014fc6:	edd3 7a00 	vldr	s15, [r3]
 8014fca:	ed8d 9a07 	vstr	s18, [sp, #28]
 8014fce:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014fd2:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014fd6:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014fda:	edc3 7a00 	vstr	s15, [r3]
 8014fde:	edd2 7a00 	vldr	s15, [r2]
 8014fe2:	edcd 8a06 	vstr	s17, [sp, #24]
 8014fe6:	eee6 7a88 	vfma.f32	s15, s13, s16
 8014fea:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8014fee:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014ff2:	edc2 7a00 	vstr	s15, [r2]
 8014ff6:	edd3 7a00 	vldr	s15, [r3]
 8014ffa:	ed8d 8a08 	vstr	s16, [sp, #32]
 8014ffe:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8015002:	ed93 7a00 	vldr	s14, [r3]
 8015006:	ee39 9a67 	vsub.f32	s18, s18, s15
 801500a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801500e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8015012:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8015016:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801501a:	ed93 7a00 	vldr	s14, [r3]
 801501e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8015022:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015026:	eee8 7a08 	vfma.f32	s15, s16, s16
 801502a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801502e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	dd7e      	ble.n	8015136 <MotionFX_propagate+0x276>
 8015038:	eeb1 aae7 	vsqrt.f32	s20, s15
 801503c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8015040:	eeb0 0a69 	vmov.f32	s0, s19
 8015044:	f000 fd96 	bl	8015b74 <sinf>
 8015048:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 801504c:	eeb0 0a69 	vmov.f32	s0, s19
 8015050:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015054:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015058:	ee28 8a27 	vmul.f32	s16, s16, s15
 801505c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8015060:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8015064:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015068:	f000 fd1e 	bl	8015aa8 <cosf>
 801506c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8015070:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8015074:	a809      	add	r0, sp, #36	; 0x24
 8015076:	4632      	mov	r2, r6
 8015078:	4631      	mov	r1, r6
 801507a:	f7f6 fc55 	bl	800b928 <qmult>
 801507e:	edd8 7a00 	vldr	s15, [r8]
 8015082:	ed96 7a00 	vldr	s14, [r6]
 8015086:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801508a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 801508e:	edd9 6a00 	vldr	s13, [r9]
 8015092:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015096:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 801509a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801509e:	3301      	adds	r3, #1
 80150a0:	aa13      	add	r2, sp, #76	; 0x4c
 80150a2:	edd7 6a00 	vldr	s13, [r7]
 80150a6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80150aa:	4651      	mov	r1, sl
 80150ac:	a809      	add	r0, sp, #36	; 0x24
 80150ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80150b2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80150b6:	eef1 6ae7 	vsqrt.f32	s13, s15
 80150ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80150be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80150c2:	ed86 7a00 	vstr	s14, [r6]
 80150c6:	ed99 7a00 	vldr	s14, [r9]
 80150ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80150ce:	ed89 7a00 	vstr	s14, [r9]
 80150d2:	ed98 7a00 	vldr	s14, [r8]
 80150d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80150da:	ed88 7a00 	vstr	s14, [r8]
 80150de:	ed97 7a00 	vldr	s14, [r7]
 80150e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150e6:	edc7 7a00 	vstr	s15, [r7]
 80150ea:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 80150ee:	f7f6 f987 	bl	800b400 <rotVect>
 80150f2:	f8d9 0000 	ldr.w	r0, [r9]
 80150f6:	f8d8 1000 	ldr.w	r1, [r8]
 80150fa:	683a      	ldr	r2, [r7, #0]
 80150fc:	6833      	ldr	r3, [r6, #0]
 80150fe:	60eb      	str	r3, [r5, #12]
 8015100:	6128      	str	r0, [r5, #16]
 8015102:	6169      	str	r1, [r5, #20]
 8015104:	61aa      	str	r2, [r5, #24]
 8015106:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801510a:	9301      	str	r3, [sp, #4]
 801510c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	a909      	add	r1, sp, #36	; 0x24
 8015114:	f105 031c 	add.w	r3, r5, #28
 8015118:	462a      	mov	r2, r5
 801511a:	f105 000c 	add.w	r0, r5, #12
 801511e:	f7f7 fc2b 	bl	800c978 <output_update>
 8015122:	b020      	add	sp, #128	; 0x80
 8015124:	ecbd 8b06 	vpop	{d8-d10}
 8015128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512c:	2301      	movs	r3, #1
 801512e:	7123      	strb	r3, [r4, #4]
 8015130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015134:	e72f      	b.n	8014f96 <MotionFX_propagate+0xd6>
 8015136:	ee68 8a80 	vmul.f32	s17, s17, s0
 801513a:	ee29 9a00 	vmul.f32	s18, s18, s0
 801513e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8015142:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015146:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801514a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801514e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015152:	930c      	str	r3, [sp, #48]	; 0x30
 8015154:	e78c      	b.n	8015070 <MotionFX_propagate+0x1b0>
 8015156:	bf00      	nop
 8015158:	200002e0 	.word	0x200002e0
 801515c:	3c8efa35 	.word	0x3c8efa35
 8015160:	38d1b718 	.word	0x38d1b718

08015164 <MotionFX_MagCal_init>:
 8015164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015166:	4c44      	ldr	r4, [pc, #272]	; (8015278 <MotionFX_MagCal_init+0x114>)
 8015168:	7923      	ldrb	r3, [r4, #4]
 801516a:	b903      	cbnz	r3, 801516e <MotionFX_MagCal_init+0xa>
 801516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516e:	1e43      	subs	r3, r0, #1
 8015170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015174:	4605      	mov	r5, r0
 8015176:	d2f9      	bcs.n	801516c <MotionFX_MagCal_init+0x8>
 8015178:	2900      	cmp	r1, #0
 801517a:	d139      	bne.n	80151f0 <MotionFX_MagCal_init+0x8c>
 801517c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8015180:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015184:	4a3d      	ldr	r2, [pc, #244]	; (801527c <MotionFX_MagCal_init+0x118>)
 8015186:	1b5b      	subs	r3, r3, r5
 8015188:	ee07 3a90 	vmov	s15, r3
 801518c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015190:	23c8      	movs	r3, #200	; 0xc8
 8015192:	eef0 7ae7 	vabs.f32	s15, s15
 8015196:	fb93 f3f5 	sdiv	r3, r3, r5
 801519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	2b0f      	cmp	r3, #15
 80151a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80151a6:	bf28      	it	cs
 80151a8:	230f      	movcs	r3, #15
 80151aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ae:	6015      	str	r5, [r2, #0]
 80151b0:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 80151b4:	b22d      	sxth	r5, r5
 80151b6:	dc0e      	bgt.n	80151d6 <MotionFX_MagCal_init+0x72>
 80151b8:	edd4 7a03 	vldr	s15, [r4, #12]
 80151bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015280 <MotionFX_MagCal_init+0x11c>
 80151c0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8015284 <MotionFX_MagCal_init+0x120>
 80151c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80151c8:	eef0 7ae7 	vabs.f32	s15, s15
 80151cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80151d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d4:	dd08      	ble.n	80151e8 <MotionFX_MagCal_init+0x84>
 80151d6:	2300      	movs	r3, #0
 80151d8:	492b      	ldr	r1, [pc, #172]	; (8015288 <MotionFX_MagCal_init+0x124>)
 80151da:	8165      	strh	r5, [r4, #10]
 80151dc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80151e0:	60e1      	str	r1, [r4, #12]
 80151e2:	8223      	strh	r3, [r4, #16]
 80151e4:	6163      	str	r3, [r4, #20]
 80151e6:	8122      	strh	r2, [r4, #8]
 80151e8:	2300      	movs	r3, #0
 80151ea:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 80151ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151f0:	2600      	movs	r6, #0
 80151f2:	4826      	ldr	r0, [pc, #152]	; (801528c <MotionFX_MagCal_init+0x128>)
 80151f4:	61a0      	str	r0, [r4, #24]
 80151f6:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 80151fa:	4631      	mov	r1, r6
 80151fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015200:	6122      	str	r2, [r4, #16]
 8015202:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8015206:	f44f 7248 	mov.w	r2, #800	; 0x320
 801520a:	6166      	str	r6, [r4, #20]
 801520c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8015210:	6566      	str	r6, [r4, #84]	; 0x54
 8015212:	83a6      	strh	r6, [r4, #28]
 8015214:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8015218:	f002 fab0 	bl	801777c <memset>
 801521c:	23ff      	movs	r3, #255	; 0xff
 801521e:	225f      	movs	r2, #95	; 0x5f
 8015220:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8015224:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8015228:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801522c:	2200      	movs	r2, #0
 801522e:	2300      	movs	r3, #0
 8015230:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015234:	f44f 7780 	mov.w	r7, #256	; 0x100
 8015238:	4631      	mov	r1, r6
 801523a:	62a6      	str	r6, [r4, #40]	; 0x28
 801523c:	2230      	movs	r2, #48	; 0x30
 801523e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8015242:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8015246:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 801524a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801524c:	f002 fa96 	bl	801777c <memset>
 8015250:	f1a5 030a 	sub.w	r3, r5, #10
 8015254:	b29b      	uxth	r3, r3
 8015256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801525a:	2b32      	cmp	r3, #50	; 0x32
 801525c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8015260:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8015264:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8015268:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801526c:	d888      	bhi.n	8015180 <MotionFX_MagCal_init+0x1c>
 801526e:	2301      	movs	r3, #1
 8015270:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8015274:	e784      	b.n	8015180 <MotionFX_MagCal_init+0x1c>
 8015276:	bf00      	nop
 8015278:	200002e0 	.word	0x200002e0
 801527c:	20000000 	.word	0x20000000
 8015280:	3dcccccd 	.word	0x3dcccccd
 8015284:	3c23d70a 	.word	0x3c23d70a
 8015288:	3dcccccd 	.word	0x3dcccccd
 801528c:	200015d4 	.word	0x200015d4

08015290 <MotionFX_MagCal_run>:
 8015290:	4a3e      	ldr	r2, [pc, #248]	; (801538c <MotionFX_MagCal_run+0xfc>)
 8015292:	7913      	ldrb	r3, [r2, #4]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d077      	beq.n	8015388 <MotionFX_MagCal_run+0xf8>
 8015298:	ed90 7a00 	vldr	s14, [r0]
 801529c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015390 <MotionFX_MagCal_run+0x100>
 80152a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80152a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a8:	bfb4      	ite	lt
 80152aa:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80152ae:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80152b2:	eee7 7a26 	vfma.f32	s15, s14, s13
 80152b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152b8:	ed90 7a01 	vldr	s14, [r0, #4]
 80152bc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015390 <MotionFX_MagCal_run+0x100>
 80152c0:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80152c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80152cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d0:	ee17 1a90 	vmov	r1, s15
 80152d4:	bfb4      	ite	lt
 80152d6:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80152da:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80152de:	eee7 7a26 	vfma.f32	s15, s14, s13
 80152e2:	ed90 7a02 	vldr	s14, [r0, #8]
 80152e6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015390 <MotionFX_MagCal_run+0x100>
 80152ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80152f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f6:	ee17 4a90 	vmov	r4, s15
 80152fa:	bfac      	ite	ge
 80152fc:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015300:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015304:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801530c:	ee17 7a90 	vmov	r7, s15
 8015310:	b383      	cbz	r3, 8015374 <MotionFX_MagCal_run+0xe4>
 8015312:	4820      	ldr	r0, [pc, #128]	; (8015394 <MotionFX_MagCal_run+0x104>)
 8015314:	6805      	ldr	r5, [r0, #0]
 8015316:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 801531a:	fb15 f503 	smulbb	r5, r5, r3
 801531e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8015322:	00dd      	lsls	r5, r3, #3
 8015324:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8015328:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015398 <MotionFX_MagCal_run+0x108>
 801532c:	42b1      	cmp	r1, r6
 801532e:	bfa8      	it	ge
 8015330:	4631      	movge	r1, r6
 8015332:	42b7      	cmp	r7, r6
 8015334:	bfa8      	it	ge
 8015336:	4637      	movge	r7, r6
 8015338:	4561      	cmp	r1, ip
 801533a:	4608      	mov	r0, r1
 801533c:	bfb8      	it	lt
 801533e:	4660      	movlt	r0, ip
 8015340:	4564      	cmp	r4, ip
 8015342:	db1f      	blt.n	8015384 <MotionFX_MagCal_run+0xf4>
 8015344:	42b4      	cmp	r4, r6
 8015346:	bfa8      	it	ge
 8015348:	4634      	movge	r4, r6
 801534a:	b224      	sxth	r4, r4
 801534c:	4e12      	ldr	r6, [pc, #72]	; (8015398 <MotionFX_MagCal_run+0x108>)
 801534e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8015352:	3301      	adds	r3, #1
 8015354:	4415      	add	r5, r2
 8015356:	b2db      	uxtb	r3, r3
 8015358:	42b7      	cmp	r7, r6
 801535a:	bfb8      	it	lt
 801535c:	4637      	movlt	r7, r6
 801535e:	428b      	cmp	r3, r1
 8015360:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8015364:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8015368:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 801536c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8015370:	d014      	beq.n	801539c <MotionFX_MagCal_run+0x10c>
 8015372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015374:	68c0      	ldr	r0, [r0, #12]
 8015376:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 801537a:	2001      	movs	r0, #1
 801537c:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8015380:	461d      	mov	r5, r3
 8015382:	e7cf      	b.n	8015324 <MotionFX_MagCal_run+0x94>
 8015384:	4634      	mov	r4, r6
 8015386:	e7e1      	b.n	801534c <MotionFX_MagCal_run+0xbc>
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	200002e0 	.word	0x200002e0
 8015390:	43fa0000 	.word	0x43fa0000
 8015394:	20000000 	.word	0x20000000
 8015398:	ffff8002 	.word	0xffff8002
 801539c:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 80153a0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 80153a4:	2000      	movs	r0, #0
 80153a6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	f000 8159 	beq.w	8015662 <MotionFX_MagCal_run+0x3d2>
 80153b0:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80153b4:	8a57      	ldrh	r7, [r2, #18]
 80153b6:	8a13      	ldrh	r3, [r2, #16]
 80153b8:	2900      	cmp	r1, #0
 80153ba:	f000 8150 	beq.w	801565e <MotionFX_MagCal_run+0x3ce>
 80153be:	2f00      	cmp	r7, #0
 80153c0:	f000 814d 	beq.w	801565e <MotionFX_MagCal_run+0x3ce>
 80153c4:	42bb      	cmp	r3, r7
 80153c6:	bf28      	it	cs
 80153c8:	463b      	movcs	r3, r7
 80153ca:	3301      	adds	r3, #1
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	42bb      	cmp	r3, r7
 80153d0:	bf28      	it	cs
 80153d2:	463b      	movcs	r3, r7
 80153d4:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80153d8:	191d      	adds	r5, r3, r4
 80153da:	f04f 0c01 	mov.w	ip, #1
 80153de:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 80153e2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80153e6:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 80153ea:	f8c5 e002 	str.w	lr, [r5, #2]
 80153ee:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80153f2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80153f6:	4561      	cmp	r1, ip
 80153f8:	f000 812a 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 80153fc:	4463      	add	r3, ip
 80153fe:	b29b      	uxth	r3, r3
 8015400:	42bb      	cmp	r3, r7
 8015402:	bf28      	it	cs
 8015404:	463b      	movcs	r3, r7
 8015406:	eb03 0e04 	add.w	lr, r3, r4
 801540a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801540e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015412:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8015416:	f8c5 e002 	str.w	lr, [r5, #2]
 801541a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 801541e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015422:	2902      	cmp	r1, #2
 8015424:	f000 8114 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 8015428:	4463      	add	r3, ip
 801542a:	b29b      	uxth	r3, r3
 801542c:	42bb      	cmp	r3, r7
 801542e:	bf28      	it	cs
 8015430:	463b      	movcs	r3, r7
 8015432:	eb03 0e04 	add.w	lr, r3, r4
 8015436:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801543a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801543e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8015442:	f8c5 e002 	str.w	lr, [r5, #2]
 8015446:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 801544a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801544e:	2903      	cmp	r1, #3
 8015450:	f000 80fe 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 8015454:	4463      	add	r3, ip
 8015456:	b29b      	uxth	r3, r3
 8015458:	42bb      	cmp	r3, r7
 801545a:	bf28      	it	cs
 801545c:	463b      	movcs	r3, r7
 801545e:	eb03 0e04 	add.w	lr, r3, r4
 8015462:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015466:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801546a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 801546e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015472:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8015476:	f8a5 e006 	strh.w	lr, [r5, #6]
 801547a:	2904      	cmp	r1, #4
 801547c:	f000 80e8 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 8015480:	4463      	add	r3, ip
 8015482:	b29b      	uxth	r3, r3
 8015484:	42bb      	cmp	r3, r7
 8015486:	bf28      	it	cs
 8015488:	463b      	movcs	r3, r7
 801548a:	eb03 0e04 	add.w	lr, r3, r4
 801548e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015492:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015496:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801549a:	f8c5 e002 	str.w	lr, [r5, #2]
 801549e:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 80154a2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80154a6:	2905      	cmp	r1, #5
 80154a8:	f000 80d2 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 80154ac:	4463      	add	r3, ip
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	42bb      	cmp	r3, r7
 80154b2:	bf28      	it	cs
 80154b4:	463b      	movcs	r3, r7
 80154b6:	441c      	add	r4, r3
 80154b8:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80154bc:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 80154c0:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 80154c4:	f8c5 4002 	str.w	r4, [r5, #2]
 80154c8:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 80154cc:	80ec      	strh	r4, [r5, #6]
 80154ce:	2906      	cmp	r1, #6
 80154d0:	f000 80be 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 80154d4:	4463      	add	r3, ip
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	42bb      	cmp	r3, r7
 80154da:	bf28      	it	cs
 80154dc:	463b      	movcs	r3, r7
 80154de:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80154e2:	eb03 0c04 	add.w	ip, r3, r4
 80154e6:	2501      	movs	r5, #1
 80154e8:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 80154ec:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80154f0:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 80154f4:	f8cc e002 	str.w	lr, [ip, #2]
 80154f8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80154fc:	f8ac e006 	strh.w	lr, [ip, #6]
 8015500:	2907      	cmp	r1, #7
 8015502:	f000 80a5 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 8015506:	442b      	add	r3, r5
 8015508:	b29b      	uxth	r3, r3
 801550a:	42bb      	cmp	r3, r7
 801550c:	bf28      	it	cs
 801550e:	463b      	movcs	r3, r7
 8015510:	eb03 0e04 	add.w	lr, r3, r4
 8015514:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015518:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801551c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8015520:	f8cc e002 	str.w	lr, [ip, #2]
 8015524:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8015528:	f8ac e006 	strh.w	lr, [ip, #6]
 801552c:	2908      	cmp	r1, #8
 801552e:	f000 808f 	beq.w	8015650 <MotionFX_MagCal_run+0x3c0>
 8015532:	442b      	add	r3, r5
 8015534:	b29b      	uxth	r3, r3
 8015536:	42bb      	cmp	r3, r7
 8015538:	bf28      	it	cs
 801553a:	463b      	movcs	r3, r7
 801553c:	eb03 0e04 	add.w	lr, r3, r4
 8015540:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015544:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015548:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 801554c:	f8cc e002 	str.w	lr, [ip, #2]
 8015550:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8015554:	f8ac e006 	strh.w	lr, [ip, #6]
 8015558:	2909      	cmp	r1, #9
 801555a:	d079      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 801555c:	442b      	add	r3, r5
 801555e:	b29b      	uxth	r3, r3
 8015560:	42bb      	cmp	r3, r7
 8015562:	bf28      	it	cs
 8015564:	463b      	movcs	r3, r7
 8015566:	eb03 0e04 	add.w	lr, r3, r4
 801556a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801556e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015572:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8015576:	f8cc e002 	str.w	lr, [ip, #2]
 801557a:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 801557e:	f8ac e006 	strh.w	lr, [ip, #6]
 8015582:	290a      	cmp	r1, #10
 8015584:	d064      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 8015586:	442b      	add	r3, r5
 8015588:	b29b      	uxth	r3, r3
 801558a:	42bb      	cmp	r3, r7
 801558c:	bf28      	it	cs
 801558e:	463b      	movcs	r3, r7
 8015590:	eb03 0e04 	add.w	lr, r3, r4
 8015594:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015598:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801559c:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 80155a0:	f8cc e002 	str.w	lr, [ip, #2]
 80155a4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80155a8:	f8ac e006 	strh.w	lr, [ip, #6]
 80155ac:	290b      	cmp	r1, #11
 80155ae:	d04f      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 80155b0:	442b      	add	r3, r5
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	42bb      	cmp	r3, r7
 80155b6:	bf28      	it	cs
 80155b8:	463b      	movcs	r3, r7
 80155ba:	eb03 0e04 	add.w	lr, r3, r4
 80155be:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80155c2:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80155c6:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 80155ca:	f8cc e002 	str.w	lr, [ip, #2]
 80155ce:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 80155d2:	f8ac e006 	strh.w	lr, [ip, #6]
 80155d6:	290c      	cmp	r1, #12
 80155d8:	d03a      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 80155da:	442b      	add	r3, r5
 80155dc:	b29b      	uxth	r3, r3
 80155de:	42bb      	cmp	r3, r7
 80155e0:	bf28      	it	cs
 80155e2:	463b      	movcs	r3, r7
 80155e4:	eb03 0e04 	add.w	lr, r3, r4
 80155e8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80155ec:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80155f0:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 80155f4:	f8cc e002 	str.w	lr, [ip, #2]
 80155f8:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80155fc:	f8ac e006 	strh.w	lr, [ip, #6]
 8015600:	290d      	cmp	r1, #13
 8015602:	d025      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 8015604:	442b      	add	r3, r5
 8015606:	b29b      	uxth	r3, r3
 8015608:	42bb      	cmp	r3, r7
 801560a:	bf28      	it	cs
 801560c:	463b      	movcs	r3, r7
 801560e:	eb03 0e04 	add.w	lr, r3, r4
 8015612:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015616:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801561a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 801561e:	f8cc e002 	str.w	lr, [ip, #2]
 8015622:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8015626:	f8ac e006 	strh.w	lr, [ip, #6]
 801562a:	290e      	cmp	r1, #14
 801562c:	d010      	beq.n	8015650 <MotionFX_MagCal_run+0x3c0>
 801562e:	442b      	add	r3, r5
 8015630:	b29b      	uxth	r3, r3
 8015632:	42bb      	cmp	r3, r7
 8015634:	bf28      	it	cs
 8015636:	463b      	movcs	r3, r7
 8015638:	441c      	add	r4, r3
 801563a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 801563e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8015642:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8015646:	f8c7 0002 	str.w	r0, [r7, #2]
 801564a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801564e:	80f8      	strh	r0, [r7, #6]
 8015650:	3901      	subs	r1, #1
 8015652:	b2c9      	uxtb	r1, r1
 8015654:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015658:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801565c:	4434      	add	r4, r6
 801565e:	8213      	strh	r3, [r2, #16]
 8015660:	6154      	str	r4, [r2, #20]
 8015662:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8015666:	2b00      	cmp	r3, #0
 8015668:	f43f ae83 	beq.w	8015372 <MotionFX_MagCal_run+0xe2>
 801566c:	8a11      	ldrh	r1, [r2, #16]
 801566e:	8a53      	ldrh	r3, [r2, #18]
 8015670:	428b      	cmp	r3, r1
 8015672:	d022      	beq.n	80156ba <MotionFX_MagCal_run+0x42a>
 8015674:	b341      	cbz	r1, 80156c8 <MotionFX_MagCal_run+0x438>
 8015676:	6953      	ldr	r3, [r2, #20]
 8015678:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801567c:	3301      	adds	r3, #1
 801567e:	4403      	add	r3, r0
 8015680:	1c58      	adds	r0, r3, #1
 8015682:	d021      	beq.n	80156c8 <MotionFX_MagCal_run+0x438>
 8015684:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015688:	3410      	adds	r4, #16
 801568a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801568c:	42a0      	cmp	r0, r4
 801568e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8015692:	bf84      	itt	hi
 8015694:	6553      	strhi	r3, [r2, #84]	; 0x54
 8015696:	4618      	movhi	r0, r3
 8015698:	4420      	add	r0, r4
 801569a:	4283      	cmp	r3, r0
 801569c:	f4ff ae69 	bcc.w	8015372 <MotionFX_MagCal_run+0xe2>
 80156a0:	b131      	cbz	r1, 80156b0 <MotionFX_MagCal_run+0x420>
 80156a2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80156a6:	6952      	ldr	r2, [r2, #20]
 80156a8:	3901      	subs	r1, #1
 80156aa:	fb00 2111 	mls	r1, r0, r1, r2
 80156ae:	b289      	uxth	r1, r1
 80156b0:	1a5b      	subs	r3, r3, r1
 80156b2:	b21b      	sxth	r3, r3
 80156b4:	42a3      	cmp	r3, r4
 80156b6:	f6ff ae5c 	blt.w	8015372 <MotionFX_MagCal_run+0xe2>
 80156ba:	4905      	ldr	r1, [pc, #20]	; (80156d0 <MotionFX_MagCal_run+0x440>)
 80156bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156c0:	f101 0014 	add.w	r0, r1, #20
 80156c4:	f7fd babc 	b.w	8012c40 <MEMS_runMagCal>
 80156c8:	f242 7410 	movw	r4, #10000	; 0x2710
 80156cc:	2300      	movs	r3, #0
 80156ce:	e7dc      	b.n	801568a <MotionFX_MagCal_run+0x3fa>
 80156d0:	200002e8 	.word	0x200002e8

080156d4 <MotionFX_MagCal_getParams>:
 80156d4:	b4f0      	push	{r4, r5, r6, r7}
 80156d6:	4f1b      	ldr	r7, [pc, #108]	; (8015744 <MotionFX_MagCal_getParams+0x70>)
 80156d8:	793b      	ldrb	r3, [r7, #4]
 80156da:	b08e      	sub	sp, #56	; 0x38
 80156dc:	b373      	cbz	r3, 801573c <MotionFX_MagCal_getParams+0x68>
 80156de:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80156e2:	4606      	mov	r6, r0
 80156e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156e6:	ac01      	add	r4, sp, #4
 80156e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156f0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80156f4:	eddd 6a02 	vldr	s13, [sp, #8]
 80156f8:	eddd 7a04 	vldr	s15, [sp, #16]
 80156fc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015748 <MotionFX_MagCal_getParams+0x74>
 8015700:	682d      	ldr	r5, [r5, #0]
 8015702:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8015706:	7337      	strb	r7, [r6, #12]
 8015708:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801570c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801571a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801571e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015722:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015726:	ee66 6a86 	vmul.f32	s13, s13, s12
 801572a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801572e:	6025      	str	r5, [r4, #0]
 8015730:	edc6 6a00 	vstr	s13, [r6]
 8015734:	ed86 7a01 	vstr	s14, [r6, #4]
 8015738:	edc6 7a02 	vstr	s15, [r6, #8]
 801573c:	b00e      	add	sp, #56	; 0x38
 801573e:	bcf0      	pop	{r4, r5, r6, r7}
 8015740:	4770      	bx	lr
 8015742:	bf00      	nop
 8015744:	200002e0 	.word	0x200002e0
 8015748:	3b03126f 	.word	0x3b03126f

0801574c <_Znwj>:
 801574c:	2801      	cmp	r0, #1
 801574e:	bf38      	it	cc
 8015750:	2001      	movcc	r0, #1
 8015752:	b510      	push	{r4, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	4620      	mov	r0, r4
 8015758:	f001 ffd8 	bl	801770c <malloc>
 801575c:	b930      	cbnz	r0, 801576c <_Znwj+0x20>
 801575e:	f000 f88b 	bl	8015878 <_ZSt15get_new_handlerv>
 8015762:	b908      	cbnz	r0, 8015768 <_Znwj+0x1c>
 8015764:	f001 ffa0 	bl	80176a8 <abort>
 8015768:	4780      	blx	r0
 801576a:	e7f4      	b.n	8015756 <_Znwj+0xa>
 801576c:	bd10      	pop	{r4, pc}

0801576e <_ZNSaIcEC1Ev>:
 801576e:	4770      	bx	lr

08015770 <_ZNSaIcED1Ev>:
 8015770:	4770      	bx	lr

08015772 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8015772:	b10a      	cbz	r2, 8015778 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8015774:	f001 bfda 	b.w	801772c <memcpy>
 8015778:	4770      	bx	lr
	...

0801577c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801577c:	b508      	push	{r3, lr}
 801577e:	680b      	ldr	r3, [r1, #0]
 8015780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015784:	d302      	bcc.n	801578c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015786:	480d      	ldr	r0, [pc, #52]	; (80157bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015788:	f000 f884 	bl	8015894 <_ZSt20__throw_length_errorPKc>
 801578c:	4293      	cmp	r3, r2
 801578e:	d90b      	bls.n	80157a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015790:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015794:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015798:	d206      	bcs.n	80157a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801579a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801579e:	bf2a      	itet	cs
 80157a0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80157a4:	6008      	strcc	r0, [r1, #0]
 80157a6:	600b      	strcs	r3, [r1, #0]
 80157a8:	6808      	ldr	r0, [r1, #0]
 80157aa:	3001      	adds	r0, #1
 80157ac:	d501      	bpl.n	80157b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80157ae:	f000 f86b 	bl	8015888 <_ZSt17__throw_bad_allocv>
 80157b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80157b6:	f7ff bfc9 	b.w	801574c <_Znwj>
 80157ba:	bf00      	nop
 80157bc:	0801a738 	.word	0x0801a738

080157c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80157c0:	f850 3b08 	ldr.w	r3, [r0], #8
 80157c4:	4283      	cmp	r3, r0
 80157c6:	d002      	beq.n	80157ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80157c8:	4618      	mov	r0, r3
 80157ca:	f000 b853 	b.w	8015874 <_ZdlPv>
 80157ce:	4770      	bx	lr

080157d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80157d0:	2a01      	cmp	r2, #1
 80157d2:	b510      	push	{r4, lr}
 80157d4:	d102      	bne.n	80157dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80157d6:	780a      	ldrb	r2, [r1, #0]
 80157d8:	7002      	strb	r2, [r0, #0]
 80157da:	bd10      	pop	{r4, pc}
 80157dc:	f7ff ffc9 	bl	8015772 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80157e0:	e7fb      	b.n	80157da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080157e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80157e2:	b508      	push	{r3, lr}
 80157e4:	1a52      	subs	r2, r2, r1
 80157e6:	f7ff fff3 	bl	80157d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80157ea:	bd08      	pop	{r3, pc}

080157ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80157ec:	b510      	push	{r4, lr}
 80157ee:	4604      	mov	r4, r0
 80157f0:	f7ff ffe6 	bl	80157c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80157f4:	4620      	mov	r0, r4
 80157f6:	bd10      	pop	{r4, pc}

080157f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80157f8:	6840      	ldr	r0, [r0, #4]
 80157fa:	4770      	bx	lr

080157fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80157fc:	6800      	ldr	r0, [r0, #0]
 80157fe:	4770      	bx	lr

08015800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015800:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015802:	4604      	mov	r4, r0
 8015804:	4616      	mov	r6, r2
 8015806:	460d      	mov	r5, r1
 8015808:	b919      	cbnz	r1, 8015812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801580a:	b112      	cbz	r2, 8015812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801580c:	480d      	ldr	r0, [pc, #52]	; (8015844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801580e:	f000 f83e 	bl	801588e <_ZSt19__throw_logic_errorPKc>
 8015812:	1b73      	subs	r3, r6, r5
 8015814:	2b0f      	cmp	r3, #15
 8015816:	9301      	str	r3, [sp, #4]
 8015818:	d907      	bls.n	801582a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801581a:	2200      	movs	r2, #0
 801581c:	a901      	add	r1, sp, #4
 801581e:	4620      	mov	r0, r4
 8015820:	f7ff ffac 	bl	801577c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015824:	9b01      	ldr	r3, [sp, #4]
 8015826:	6020      	str	r0, [r4, #0]
 8015828:	60a3      	str	r3, [r4, #8]
 801582a:	4632      	mov	r2, r6
 801582c:	4629      	mov	r1, r5
 801582e:	6820      	ldr	r0, [r4, #0]
 8015830:	f7ff ffd7 	bl	80157e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015834:	9b01      	ldr	r3, [sp, #4]
 8015836:	6822      	ldr	r2, [r4, #0]
 8015838:	6063      	str	r3, [r4, #4]
 801583a:	2100      	movs	r1, #0
 801583c:	54d1      	strb	r1, [r2, r3]
 801583e:	b002      	add	sp, #8
 8015840:	bd70      	pop	{r4, r5, r6, pc}
 8015842:	bf00      	nop
 8015844:	0801a750 	.word	0x0801a750

08015848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8015848:	b538      	push	{r3, r4, r5, lr}
 801584a:	f100 0308 	add.w	r3, r0, #8
 801584e:	4604      	mov	r4, r0
 8015850:	6003      	str	r3, [r0, #0]
 8015852:	460d      	mov	r5, r1
 8015854:	b159      	cbz	r1, 801586e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8015856:	4608      	mov	r0, r1
 8015858:	f7ea fd0a 	bl	8000270 <strlen>
 801585c:	182a      	adds	r2, r5, r0
 801585e:	4620      	mov	r0, r4
 8015860:	f04f 0300 	mov.w	r3, #0
 8015864:	4629      	mov	r1, r5
 8015866:	f7ff ffcb 	bl	8015800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801586a:	4620      	mov	r0, r4
 801586c:	bd38      	pop	{r3, r4, r5, pc}
 801586e:	f04f 32ff 	mov.w	r2, #4294967295
 8015872:	e7f4      	b.n	801585e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08015874 <_ZdlPv>:
 8015874:	f001 bf52 	b.w	801771c <free>

08015878 <_ZSt15get_new_handlerv>:
 8015878:	4b02      	ldr	r3, [pc, #8]	; (8015884 <_ZSt15get_new_handlerv+0xc>)
 801587a:	6818      	ldr	r0, [r3, #0]
 801587c:	f3bf 8f5b 	dmb	ish
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	200011b4 	.word	0x200011b4

08015888 <_ZSt17__throw_bad_allocv>:
 8015888:	b508      	push	{r3, lr}
 801588a:	f001 ff0d 	bl	80176a8 <abort>

0801588e <_ZSt19__throw_logic_errorPKc>:
 801588e:	b508      	push	{r3, lr}
 8015890:	f001 ff0a 	bl	80176a8 <abort>

08015894 <_ZSt20__throw_length_errorPKc>:
 8015894:	b508      	push	{r3, lr}
 8015896:	f001 ff07 	bl	80176a8 <abort>
 801589a:	0000      	movs	r0, r0
 801589c:	0000      	movs	r0, r0
	...

080158a0 <ceil>:
 80158a0:	ec51 0b10 	vmov	r0, r1, d0
 80158a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80158ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80158b0:	2e13      	cmp	r6, #19
 80158b2:	ee10 5a10 	vmov	r5, s0
 80158b6:	ee10 8a10 	vmov	r8, s0
 80158ba:	460c      	mov	r4, r1
 80158bc:	dc30      	bgt.n	8015920 <ceil+0x80>
 80158be:	2e00      	cmp	r6, #0
 80158c0:	da12      	bge.n	80158e8 <ceil+0x48>
 80158c2:	a335      	add	r3, pc, #212	; (adr r3, 8015998 <ceil+0xf8>)
 80158c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c8:	f7ea fce0 	bl	800028c <__adddf3>
 80158cc:	2200      	movs	r2, #0
 80158ce:	2300      	movs	r3, #0
 80158d0:	f7eb f922 	bl	8000b18 <__aeabi_dcmpgt>
 80158d4:	b128      	cbz	r0, 80158e2 <ceil+0x42>
 80158d6:	2c00      	cmp	r4, #0
 80158d8:	db55      	blt.n	8015986 <ceil+0xe6>
 80158da:	432c      	orrs	r4, r5
 80158dc:	d057      	beq.n	801598e <ceil+0xee>
 80158de:	4c30      	ldr	r4, [pc, #192]	; (80159a0 <ceil+0x100>)
 80158e0:	2500      	movs	r5, #0
 80158e2:	4621      	mov	r1, r4
 80158e4:	4628      	mov	r0, r5
 80158e6:	e025      	b.n	8015934 <ceil+0x94>
 80158e8:	4f2e      	ldr	r7, [pc, #184]	; (80159a4 <ceil+0x104>)
 80158ea:	4137      	asrs	r7, r6
 80158ec:	ea01 0307 	and.w	r3, r1, r7
 80158f0:	4303      	orrs	r3, r0
 80158f2:	d01f      	beq.n	8015934 <ceil+0x94>
 80158f4:	a328      	add	r3, pc, #160	; (adr r3, 8015998 <ceil+0xf8>)
 80158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fa:	f7ea fcc7 	bl	800028c <__adddf3>
 80158fe:	2200      	movs	r2, #0
 8015900:	2300      	movs	r3, #0
 8015902:	f7eb f909 	bl	8000b18 <__aeabi_dcmpgt>
 8015906:	2800      	cmp	r0, #0
 8015908:	d0eb      	beq.n	80158e2 <ceil+0x42>
 801590a:	2c00      	cmp	r4, #0
 801590c:	bfc2      	ittt	gt
 801590e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015912:	fa43 f606 	asrgt.w	r6, r3, r6
 8015916:	19a4      	addgt	r4, r4, r6
 8015918:	ea24 0407 	bic.w	r4, r4, r7
 801591c:	2500      	movs	r5, #0
 801591e:	e7e0      	b.n	80158e2 <ceil+0x42>
 8015920:	2e33      	cmp	r6, #51	; 0x33
 8015922:	dd0b      	ble.n	801593c <ceil+0x9c>
 8015924:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015928:	d104      	bne.n	8015934 <ceil+0x94>
 801592a:	ee10 2a10 	vmov	r2, s0
 801592e:	460b      	mov	r3, r1
 8015930:	f7ea fcac 	bl	800028c <__adddf3>
 8015934:	ec41 0b10 	vmov	d0, r0, r1
 8015938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801593c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015940:	f04f 33ff 	mov.w	r3, #4294967295
 8015944:	fa23 f707 	lsr.w	r7, r3, r7
 8015948:	4207      	tst	r7, r0
 801594a:	d0f3      	beq.n	8015934 <ceil+0x94>
 801594c:	a312      	add	r3, pc, #72	; (adr r3, 8015998 <ceil+0xf8>)
 801594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015952:	f7ea fc9b 	bl	800028c <__adddf3>
 8015956:	2200      	movs	r2, #0
 8015958:	2300      	movs	r3, #0
 801595a:	f7eb f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 801595e:	2800      	cmp	r0, #0
 8015960:	d0bf      	beq.n	80158e2 <ceil+0x42>
 8015962:	2c00      	cmp	r4, #0
 8015964:	dd02      	ble.n	801596c <ceil+0xcc>
 8015966:	2e14      	cmp	r6, #20
 8015968:	d103      	bne.n	8015972 <ceil+0xd2>
 801596a:	3401      	adds	r4, #1
 801596c:	ea25 0507 	bic.w	r5, r5, r7
 8015970:	e7b7      	b.n	80158e2 <ceil+0x42>
 8015972:	2301      	movs	r3, #1
 8015974:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015978:	fa03 f606 	lsl.w	r6, r3, r6
 801597c:	4435      	add	r5, r6
 801597e:	4545      	cmp	r5, r8
 8015980:	bf38      	it	cc
 8015982:	18e4      	addcc	r4, r4, r3
 8015984:	e7f2      	b.n	801596c <ceil+0xcc>
 8015986:	2500      	movs	r5, #0
 8015988:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801598c:	e7a9      	b.n	80158e2 <ceil+0x42>
 801598e:	4625      	mov	r5, r4
 8015990:	e7a7      	b.n	80158e2 <ceil+0x42>
 8015992:	bf00      	nop
 8015994:	f3af 8000 	nop.w
 8015998:	8800759c 	.word	0x8800759c
 801599c:	7e37e43c 	.word	0x7e37e43c
 80159a0:	3ff00000 	.word	0x3ff00000
 80159a4:	000fffff 	.word	0x000fffff

080159a8 <floor>:
 80159a8:	ec51 0b10 	vmov	r0, r1, d0
 80159ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80159b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80159b8:	2e13      	cmp	r6, #19
 80159ba:	ee10 5a10 	vmov	r5, s0
 80159be:	ee10 8a10 	vmov	r8, s0
 80159c2:	460c      	mov	r4, r1
 80159c4:	dc32      	bgt.n	8015a2c <floor+0x84>
 80159c6:	2e00      	cmp	r6, #0
 80159c8:	da14      	bge.n	80159f4 <floor+0x4c>
 80159ca:	a333      	add	r3, pc, #204	; (adr r3, 8015a98 <floor+0xf0>)
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	f7ea fc5c 	bl	800028c <__adddf3>
 80159d4:	2200      	movs	r2, #0
 80159d6:	2300      	movs	r3, #0
 80159d8:	f7eb f89e 	bl	8000b18 <__aeabi_dcmpgt>
 80159dc:	b138      	cbz	r0, 80159ee <floor+0x46>
 80159de:	2c00      	cmp	r4, #0
 80159e0:	da57      	bge.n	8015a92 <floor+0xea>
 80159e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80159e6:	431d      	orrs	r5, r3
 80159e8:	d001      	beq.n	80159ee <floor+0x46>
 80159ea:	4c2d      	ldr	r4, [pc, #180]	; (8015aa0 <floor+0xf8>)
 80159ec:	2500      	movs	r5, #0
 80159ee:	4621      	mov	r1, r4
 80159f0:	4628      	mov	r0, r5
 80159f2:	e025      	b.n	8015a40 <floor+0x98>
 80159f4:	4f2b      	ldr	r7, [pc, #172]	; (8015aa4 <floor+0xfc>)
 80159f6:	4137      	asrs	r7, r6
 80159f8:	ea01 0307 	and.w	r3, r1, r7
 80159fc:	4303      	orrs	r3, r0
 80159fe:	d01f      	beq.n	8015a40 <floor+0x98>
 8015a00:	a325      	add	r3, pc, #148	; (adr r3, 8015a98 <floor+0xf0>)
 8015a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a06:	f7ea fc41 	bl	800028c <__adddf3>
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	f7eb f883 	bl	8000b18 <__aeabi_dcmpgt>
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0eb      	beq.n	80159ee <floor+0x46>
 8015a16:	2c00      	cmp	r4, #0
 8015a18:	bfbe      	ittt	lt
 8015a1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015a1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015a22:	19a4      	addlt	r4, r4, r6
 8015a24:	ea24 0407 	bic.w	r4, r4, r7
 8015a28:	2500      	movs	r5, #0
 8015a2a:	e7e0      	b.n	80159ee <floor+0x46>
 8015a2c:	2e33      	cmp	r6, #51	; 0x33
 8015a2e:	dd0b      	ble.n	8015a48 <floor+0xa0>
 8015a30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015a34:	d104      	bne.n	8015a40 <floor+0x98>
 8015a36:	ee10 2a10 	vmov	r2, s0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	f7ea fc26 	bl	800028c <__adddf3>
 8015a40:	ec41 0b10 	vmov	d0, r0, r1
 8015a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a50:	fa23 f707 	lsr.w	r7, r3, r7
 8015a54:	4207      	tst	r7, r0
 8015a56:	d0f3      	beq.n	8015a40 <floor+0x98>
 8015a58:	a30f      	add	r3, pc, #60	; (adr r3, 8015a98 <floor+0xf0>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	f7ea fc15 	bl	800028c <__adddf3>
 8015a62:	2200      	movs	r2, #0
 8015a64:	2300      	movs	r3, #0
 8015a66:	f7eb f857 	bl	8000b18 <__aeabi_dcmpgt>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d0bf      	beq.n	80159ee <floor+0x46>
 8015a6e:	2c00      	cmp	r4, #0
 8015a70:	da02      	bge.n	8015a78 <floor+0xd0>
 8015a72:	2e14      	cmp	r6, #20
 8015a74:	d103      	bne.n	8015a7e <floor+0xd6>
 8015a76:	3401      	adds	r4, #1
 8015a78:	ea25 0507 	bic.w	r5, r5, r7
 8015a7c:	e7b7      	b.n	80159ee <floor+0x46>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015a84:	fa03 f606 	lsl.w	r6, r3, r6
 8015a88:	4435      	add	r5, r6
 8015a8a:	4545      	cmp	r5, r8
 8015a8c:	bf38      	it	cc
 8015a8e:	18e4      	addcc	r4, r4, r3
 8015a90:	e7f2      	b.n	8015a78 <floor+0xd0>
 8015a92:	2500      	movs	r5, #0
 8015a94:	462c      	mov	r4, r5
 8015a96:	e7aa      	b.n	80159ee <floor+0x46>
 8015a98:	8800759c 	.word	0x8800759c
 8015a9c:	7e37e43c 	.word	0x7e37e43c
 8015aa0:	bff00000 	.word	0xbff00000
 8015aa4:	000fffff 	.word	0x000fffff

08015aa8 <cosf>:
 8015aa8:	ee10 3a10 	vmov	r3, s0
 8015aac:	b507      	push	{r0, r1, r2, lr}
 8015aae:	4a1c      	ldr	r2, [pc, #112]	; (8015b20 <cosf+0x78>)
 8015ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	dc04      	bgt.n	8015ac2 <cosf+0x1a>
 8015ab8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015b24 <cosf+0x7c>
 8015abc:	f000 fe9e 	bl	80167fc <__kernel_cosf>
 8015ac0:	e004      	b.n	8015acc <cosf+0x24>
 8015ac2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ac6:	db04      	blt.n	8015ad2 <cosf+0x2a>
 8015ac8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015acc:	b003      	add	sp, #12
 8015ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ad2:	4668      	mov	r0, sp
 8015ad4:	f000 fd52 	bl	801657c <__ieee754_rem_pio2f>
 8015ad8:	f000 0003 	and.w	r0, r0, #3
 8015adc:	2801      	cmp	r0, #1
 8015ade:	d007      	beq.n	8015af0 <cosf+0x48>
 8015ae0:	2802      	cmp	r0, #2
 8015ae2:	d00e      	beq.n	8015b02 <cosf+0x5a>
 8015ae4:	b9a0      	cbnz	r0, 8015b10 <cosf+0x68>
 8015ae6:	eddd 0a01 	vldr	s1, [sp, #4]
 8015aea:	ed9d 0a00 	vldr	s0, [sp]
 8015aee:	e7e5      	b.n	8015abc <cosf+0x14>
 8015af0:	eddd 0a01 	vldr	s1, [sp, #4]
 8015af4:	ed9d 0a00 	vldr	s0, [sp]
 8015af8:	f001 f96a 	bl	8016dd0 <__kernel_sinf>
 8015afc:	eeb1 0a40 	vneg.f32	s0, s0
 8015b00:	e7e4      	b.n	8015acc <cosf+0x24>
 8015b02:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b06:	ed9d 0a00 	vldr	s0, [sp]
 8015b0a:	f000 fe77 	bl	80167fc <__kernel_cosf>
 8015b0e:	e7f5      	b.n	8015afc <cosf+0x54>
 8015b10:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b14:	ed9d 0a00 	vldr	s0, [sp]
 8015b18:	2001      	movs	r0, #1
 8015b1a:	f001 f959 	bl	8016dd0 <__kernel_sinf>
 8015b1e:	e7d5      	b.n	8015acc <cosf+0x24>
 8015b20:	3f490fd8 	.word	0x3f490fd8
 8015b24:	00000000 	.word	0x00000000

08015b28 <roundf>:
 8015b28:	ee10 0a10 	vmov	r0, s0
 8015b2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015b30:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015b34:	2a16      	cmp	r2, #22
 8015b36:	dc15      	bgt.n	8015b64 <roundf+0x3c>
 8015b38:	2a00      	cmp	r2, #0
 8015b3a:	da08      	bge.n	8015b4e <roundf+0x26>
 8015b3c:	3201      	adds	r2, #1
 8015b3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015b42:	d101      	bne.n	8015b48 <roundf+0x20>
 8015b44:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015b48:	ee00 3a10 	vmov	s0, r3
 8015b4c:	4770      	bx	lr
 8015b4e:	4908      	ldr	r1, [pc, #32]	; (8015b70 <roundf+0x48>)
 8015b50:	4111      	asrs	r1, r2
 8015b52:	4208      	tst	r0, r1
 8015b54:	d0fa      	beq.n	8015b4c <roundf+0x24>
 8015b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015b5a:	4113      	asrs	r3, r2
 8015b5c:	4403      	add	r3, r0
 8015b5e:	ea23 0301 	bic.w	r3, r3, r1
 8015b62:	e7f1      	b.n	8015b48 <roundf+0x20>
 8015b64:	2a80      	cmp	r2, #128	; 0x80
 8015b66:	d1f1      	bne.n	8015b4c <roundf+0x24>
 8015b68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	007fffff 	.word	0x007fffff

08015b74 <sinf>:
 8015b74:	ee10 3a10 	vmov	r3, s0
 8015b78:	b507      	push	{r0, r1, r2, lr}
 8015b7a:	4a1d      	ldr	r2, [pc, #116]	; (8015bf0 <sinf+0x7c>)
 8015b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b80:	4293      	cmp	r3, r2
 8015b82:	dc05      	bgt.n	8015b90 <sinf+0x1c>
 8015b84:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015bf4 <sinf+0x80>
 8015b88:	2000      	movs	r0, #0
 8015b8a:	f001 f921 	bl	8016dd0 <__kernel_sinf>
 8015b8e:	e004      	b.n	8015b9a <sinf+0x26>
 8015b90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b94:	db04      	blt.n	8015ba0 <sinf+0x2c>
 8015b96:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015b9a:	b003      	add	sp, #12
 8015b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ba0:	4668      	mov	r0, sp
 8015ba2:	f000 fceb 	bl	801657c <__ieee754_rem_pio2f>
 8015ba6:	f000 0003 	and.w	r0, r0, #3
 8015baa:	2801      	cmp	r0, #1
 8015bac:	d008      	beq.n	8015bc0 <sinf+0x4c>
 8015bae:	2802      	cmp	r0, #2
 8015bb0:	d00d      	beq.n	8015bce <sinf+0x5a>
 8015bb2:	b9b0      	cbnz	r0, 8015be2 <sinf+0x6e>
 8015bb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8015bb8:	ed9d 0a00 	vldr	s0, [sp]
 8015bbc:	2001      	movs	r0, #1
 8015bbe:	e7e4      	b.n	8015b8a <sinf+0x16>
 8015bc0:	eddd 0a01 	vldr	s1, [sp, #4]
 8015bc4:	ed9d 0a00 	vldr	s0, [sp]
 8015bc8:	f000 fe18 	bl	80167fc <__kernel_cosf>
 8015bcc:	e7e5      	b.n	8015b9a <sinf+0x26>
 8015bce:	eddd 0a01 	vldr	s1, [sp, #4]
 8015bd2:	ed9d 0a00 	vldr	s0, [sp]
 8015bd6:	2001      	movs	r0, #1
 8015bd8:	f001 f8fa 	bl	8016dd0 <__kernel_sinf>
 8015bdc:	eeb1 0a40 	vneg.f32	s0, s0
 8015be0:	e7db      	b.n	8015b9a <sinf+0x26>
 8015be2:	eddd 0a01 	vldr	s1, [sp, #4]
 8015be6:	ed9d 0a00 	vldr	s0, [sp]
 8015bea:	f000 fe07 	bl	80167fc <__kernel_cosf>
 8015bee:	e7f5      	b.n	8015bdc <sinf+0x68>
 8015bf0:	3f490fd8 	.word	0x3f490fd8
 8015bf4:	00000000 	.word	0x00000000

08015bf8 <tanf>:
 8015bf8:	ee10 3a10 	vmov	r3, s0
 8015bfc:	b507      	push	{r0, r1, r2, lr}
 8015bfe:	4a10      	ldr	r2, [pc, #64]	; (8015c40 <tanf+0x48>)
 8015c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c04:	4293      	cmp	r3, r2
 8015c06:	dc05      	bgt.n	8015c14 <tanf+0x1c>
 8015c08:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015c44 <tanf+0x4c>
 8015c0c:	2001      	movs	r0, #1
 8015c0e:	f001 f927 	bl	8016e60 <__kernel_tanf>
 8015c12:	e004      	b.n	8015c1e <tanf+0x26>
 8015c14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c18:	db04      	blt.n	8015c24 <tanf+0x2c>
 8015c1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015c1e:	b003      	add	sp, #12
 8015c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c24:	4668      	mov	r0, sp
 8015c26:	f000 fca9 	bl	801657c <__ieee754_rem_pio2f>
 8015c2a:	0040      	lsls	r0, r0, #1
 8015c2c:	f000 0002 	and.w	r0, r0, #2
 8015c30:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c34:	ed9d 0a00 	vldr	s0, [sp]
 8015c38:	f1c0 0001 	rsb	r0, r0, #1
 8015c3c:	e7e7      	b.n	8015c0e <tanf+0x16>
 8015c3e:	bf00      	nop
 8015c40:	3f490fda 	.word	0x3f490fda
 8015c44:	00000000 	.word	0x00000000

08015c48 <atan2>:
 8015c48:	f000 b89a 	b.w	8015d80 <__ieee754_atan2>

08015c4c <sqrt>:
 8015c4c:	b538      	push	{r3, r4, r5, lr}
 8015c4e:	ed2d 8b02 	vpush	{d8}
 8015c52:	ec55 4b10 	vmov	r4, r5, d0
 8015c56:	f000 f95d 	bl	8015f14 <__ieee754_sqrt>
 8015c5a:	4b15      	ldr	r3, [pc, #84]	; (8015cb0 <sqrt+0x64>)
 8015c5c:	eeb0 8a40 	vmov.f32	s16, s0
 8015c60:	eef0 8a60 	vmov.f32	s17, s1
 8015c64:	f993 3000 	ldrsb.w	r3, [r3]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	d019      	beq.n	8015ca0 <sqrt+0x54>
 8015c6c:	4622      	mov	r2, r4
 8015c6e:	462b      	mov	r3, r5
 8015c70:	4620      	mov	r0, r4
 8015c72:	4629      	mov	r1, r5
 8015c74:	f7ea ff5a 	bl	8000b2c <__aeabi_dcmpun>
 8015c78:	b990      	cbnz	r0, 8015ca0 <sqrt+0x54>
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	4620      	mov	r0, r4
 8015c80:	4629      	mov	r1, r5
 8015c82:	f7ea ff2b 	bl	8000adc <__aeabi_dcmplt>
 8015c86:	b158      	cbz	r0, 8015ca0 <sqrt+0x54>
 8015c88:	f001 fd16 	bl	80176b8 <__errno>
 8015c8c:	2321      	movs	r3, #33	; 0x21
 8015c8e:	6003      	str	r3, [r0, #0]
 8015c90:	2200      	movs	r2, #0
 8015c92:	2300      	movs	r3, #0
 8015c94:	4610      	mov	r0, r2
 8015c96:	4619      	mov	r1, r3
 8015c98:	f7ea fdd8 	bl	800084c <__aeabi_ddiv>
 8015c9c:	ec41 0b18 	vmov	d8, r0, r1
 8015ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8015ca4:	eef0 0a68 	vmov.f32	s1, s17
 8015ca8:	ecbd 8b02 	vpop	{d8}
 8015cac:	bd38      	pop	{r3, r4, r5, pc}
 8015cae:	bf00      	nop
 8015cb0:	200000ed 	.word	0x200000ed

08015cb4 <acosf>:
 8015cb4:	b508      	push	{r3, lr}
 8015cb6:	ed2d 8b02 	vpush	{d8}
 8015cba:	eeb0 8a40 	vmov.f32	s16, s0
 8015cbe:	f000 f9dd 	bl	801607c <__ieee754_acosf>
 8015cc2:	4b13      	ldr	r3, [pc, #76]	; (8015d10 <acosf+0x5c>)
 8015cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	eef0 8a40 	vmov.f32	s17, s0
 8015cce:	d01a      	beq.n	8015d06 <acosf+0x52>
 8015cd0:	eeb4 8a48 	vcmp.f32	s16, s16
 8015cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd8:	d615      	bvs.n	8015d06 <acosf+0x52>
 8015cda:	eeb0 0a48 	vmov.f32	s0, s16
 8015cde:	f001 fc21 	bl	8017524 <fabsf>
 8015ce2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ce6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cee:	dd0a      	ble.n	8015d06 <acosf+0x52>
 8015cf0:	f001 fce2 	bl	80176b8 <__errno>
 8015cf4:	ecbd 8b02 	vpop	{d8}
 8015cf8:	2321      	movs	r3, #33	; 0x21
 8015cfa:	6003      	str	r3, [r0, #0]
 8015cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015d00:	4804      	ldr	r0, [pc, #16]	; (8015d14 <acosf+0x60>)
 8015d02:	f001 bc59 	b.w	80175b8 <nanf>
 8015d06:	eeb0 0a68 	vmov.f32	s0, s17
 8015d0a:	ecbd 8b02 	vpop	{d8}
 8015d0e:	bd08      	pop	{r3, pc}
 8015d10:	200000ed 	.word	0x200000ed
 8015d14:	0801aed0 	.word	0x0801aed0

08015d18 <asinf>:
 8015d18:	b508      	push	{r3, lr}
 8015d1a:	ed2d 8b02 	vpush	{d8}
 8015d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8015d22:	f000 faa5 	bl	8016270 <__ieee754_asinf>
 8015d26:	4b13      	ldr	r3, [pc, #76]	; (8015d74 <asinf+0x5c>)
 8015d28:	f993 3000 	ldrsb.w	r3, [r3]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	eef0 8a40 	vmov.f32	s17, s0
 8015d32:	d01a      	beq.n	8015d6a <asinf+0x52>
 8015d34:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d3c:	d615      	bvs.n	8015d6a <asinf+0x52>
 8015d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8015d42:	f001 fbef 	bl	8017524 <fabsf>
 8015d46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d52:	dd0a      	ble.n	8015d6a <asinf+0x52>
 8015d54:	f001 fcb0 	bl	80176b8 <__errno>
 8015d58:	ecbd 8b02 	vpop	{d8}
 8015d5c:	2321      	movs	r3, #33	; 0x21
 8015d5e:	6003      	str	r3, [r0, #0]
 8015d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015d64:	4804      	ldr	r0, [pc, #16]	; (8015d78 <asinf+0x60>)
 8015d66:	f001 bc27 	b.w	80175b8 <nanf>
 8015d6a:	eeb0 0a68 	vmov.f32	s0, s17
 8015d6e:	ecbd 8b02 	vpop	{d8}
 8015d72:	bd08      	pop	{r3, pc}
 8015d74:	200000ed 	.word	0x200000ed
 8015d78:	0801aed0 	.word	0x0801aed0

08015d7c <atan2f>:
 8015d7c:	f000 bb5e 	b.w	801643c <__ieee754_atan2f>

08015d80 <__ieee754_atan2>:
 8015d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d84:	ec57 6b11 	vmov	r6, r7, d1
 8015d88:	4273      	negs	r3, r6
 8015d8a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015f10 <__ieee754_atan2+0x190>
 8015d8e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015d92:	4333      	orrs	r3, r6
 8015d94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015d98:	4573      	cmp	r3, lr
 8015d9a:	ec51 0b10 	vmov	r0, r1, d0
 8015d9e:	ee11 8a10 	vmov	r8, s2
 8015da2:	d80a      	bhi.n	8015dba <__ieee754_atan2+0x3a>
 8015da4:	4244      	negs	r4, r0
 8015da6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015daa:	4304      	orrs	r4, r0
 8015dac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015db0:	4574      	cmp	r4, lr
 8015db2:	ee10 9a10 	vmov	r9, s0
 8015db6:	468c      	mov	ip, r1
 8015db8:	d907      	bls.n	8015dca <__ieee754_atan2+0x4a>
 8015dba:	4632      	mov	r2, r6
 8015dbc:	463b      	mov	r3, r7
 8015dbe:	f7ea fa65 	bl	800028c <__adddf3>
 8015dc2:	ec41 0b10 	vmov	d0, r0, r1
 8015dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015dce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015dd2:	4334      	orrs	r4, r6
 8015dd4:	d103      	bne.n	8015dde <__ieee754_atan2+0x5e>
 8015dd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dda:	f001 b925 	b.w	8017028 <atan>
 8015dde:	17bc      	asrs	r4, r7, #30
 8015de0:	f004 0402 	and.w	r4, r4, #2
 8015de4:	ea53 0909 	orrs.w	r9, r3, r9
 8015de8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015dec:	d107      	bne.n	8015dfe <__ieee754_atan2+0x7e>
 8015dee:	2c02      	cmp	r4, #2
 8015df0:	d060      	beq.n	8015eb4 <__ieee754_atan2+0x134>
 8015df2:	2c03      	cmp	r4, #3
 8015df4:	d1e5      	bne.n	8015dc2 <__ieee754_atan2+0x42>
 8015df6:	a142      	add	r1, pc, #264	; (adr r1, 8015f00 <__ieee754_atan2+0x180>)
 8015df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dfc:	e7e1      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015dfe:	ea52 0808 	orrs.w	r8, r2, r8
 8015e02:	d106      	bne.n	8015e12 <__ieee754_atan2+0x92>
 8015e04:	f1bc 0f00 	cmp.w	ip, #0
 8015e08:	da5f      	bge.n	8015eca <__ieee754_atan2+0x14a>
 8015e0a:	a13f      	add	r1, pc, #252	; (adr r1, 8015f08 <__ieee754_atan2+0x188>)
 8015e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e10:	e7d7      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e12:	4572      	cmp	r2, lr
 8015e14:	d10f      	bne.n	8015e36 <__ieee754_atan2+0xb6>
 8015e16:	4293      	cmp	r3, r2
 8015e18:	f104 34ff 	add.w	r4, r4, #4294967295
 8015e1c:	d107      	bne.n	8015e2e <__ieee754_atan2+0xae>
 8015e1e:	2c02      	cmp	r4, #2
 8015e20:	d84c      	bhi.n	8015ebc <__ieee754_atan2+0x13c>
 8015e22:	4b35      	ldr	r3, [pc, #212]	; (8015ef8 <__ieee754_atan2+0x178>)
 8015e24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015e28:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015e2c:	e7c9      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e2e:	2c02      	cmp	r4, #2
 8015e30:	d848      	bhi.n	8015ec4 <__ieee754_atan2+0x144>
 8015e32:	4b32      	ldr	r3, [pc, #200]	; (8015efc <__ieee754_atan2+0x17c>)
 8015e34:	e7f6      	b.n	8015e24 <__ieee754_atan2+0xa4>
 8015e36:	4573      	cmp	r3, lr
 8015e38:	d0e4      	beq.n	8015e04 <__ieee754_atan2+0x84>
 8015e3a:	1a9b      	subs	r3, r3, r2
 8015e3c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015e40:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015e44:	da1e      	bge.n	8015e84 <__ieee754_atan2+0x104>
 8015e46:	2f00      	cmp	r7, #0
 8015e48:	da01      	bge.n	8015e4e <__ieee754_atan2+0xce>
 8015e4a:	323c      	adds	r2, #60	; 0x3c
 8015e4c:	db1e      	blt.n	8015e8c <__ieee754_atan2+0x10c>
 8015e4e:	4632      	mov	r2, r6
 8015e50:	463b      	mov	r3, r7
 8015e52:	f7ea fcfb 	bl	800084c <__aeabi_ddiv>
 8015e56:	ec41 0b10 	vmov	d0, r0, r1
 8015e5a:	f001 fa85 	bl	8017368 <fabs>
 8015e5e:	f001 f8e3 	bl	8017028 <atan>
 8015e62:	ec51 0b10 	vmov	r0, r1, d0
 8015e66:	2c01      	cmp	r4, #1
 8015e68:	d013      	beq.n	8015e92 <__ieee754_atan2+0x112>
 8015e6a:	2c02      	cmp	r4, #2
 8015e6c:	d015      	beq.n	8015e9a <__ieee754_atan2+0x11a>
 8015e6e:	2c00      	cmp	r4, #0
 8015e70:	d0a7      	beq.n	8015dc2 <__ieee754_atan2+0x42>
 8015e72:	a319      	add	r3, pc, #100	; (adr r3, 8015ed8 <__ieee754_atan2+0x158>)
 8015e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e78:	f7ea fa06 	bl	8000288 <__aeabi_dsub>
 8015e7c:	a318      	add	r3, pc, #96	; (adr r3, 8015ee0 <__ieee754_atan2+0x160>)
 8015e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e82:	e014      	b.n	8015eae <__ieee754_atan2+0x12e>
 8015e84:	a118      	add	r1, pc, #96	; (adr r1, 8015ee8 <__ieee754_atan2+0x168>)
 8015e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e8a:	e7ec      	b.n	8015e66 <__ieee754_atan2+0xe6>
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	2100      	movs	r1, #0
 8015e90:	e7e9      	b.n	8015e66 <__ieee754_atan2+0xe6>
 8015e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015e96:	4619      	mov	r1, r3
 8015e98:	e793      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015e9a:	a30f      	add	r3, pc, #60	; (adr r3, 8015ed8 <__ieee754_atan2+0x158>)
 8015e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea0:	f7ea f9f2 	bl	8000288 <__aeabi_dsub>
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	460b      	mov	r3, r1
 8015ea8:	a10d      	add	r1, pc, #52	; (adr r1, 8015ee0 <__ieee754_atan2+0x160>)
 8015eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015eae:	f7ea f9eb 	bl	8000288 <__aeabi_dsub>
 8015eb2:	e786      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015eb4:	a10a      	add	r1, pc, #40	; (adr r1, 8015ee0 <__ieee754_atan2+0x160>)
 8015eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015eba:	e782      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015ebc:	a10c      	add	r1, pc, #48	; (adr r1, 8015ef0 <__ieee754_atan2+0x170>)
 8015ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ec2:	e77e      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	2100      	movs	r1, #0
 8015ec8:	e77b      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015eca:	a107      	add	r1, pc, #28	; (adr r1, 8015ee8 <__ieee754_atan2+0x168>)
 8015ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ed0:	e777      	b.n	8015dc2 <__ieee754_atan2+0x42>
 8015ed2:	bf00      	nop
 8015ed4:	f3af 8000 	nop.w
 8015ed8:	33145c07 	.word	0x33145c07
 8015edc:	3ca1a626 	.word	0x3ca1a626
 8015ee0:	54442d18 	.word	0x54442d18
 8015ee4:	400921fb 	.word	0x400921fb
 8015ee8:	54442d18 	.word	0x54442d18
 8015eec:	3ff921fb 	.word	0x3ff921fb
 8015ef0:	54442d18 	.word	0x54442d18
 8015ef4:	3fe921fb 	.word	0x3fe921fb
 8015ef8:	0801a780 	.word	0x0801a780
 8015efc:	0801a798 	.word	0x0801a798
 8015f00:	54442d18 	.word	0x54442d18
 8015f04:	c00921fb 	.word	0xc00921fb
 8015f08:	54442d18 	.word	0x54442d18
 8015f0c:	bff921fb 	.word	0xbff921fb
 8015f10:	7ff00000 	.word	0x7ff00000

08015f14 <__ieee754_sqrt>:
 8015f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f18:	ec55 4b10 	vmov	r4, r5, d0
 8015f1c:	4e56      	ldr	r6, [pc, #344]	; (8016078 <__ieee754_sqrt+0x164>)
 8015f1e:	43ae      	bics	r6, r5
 8015f20:	ee10 0a10 	vmov	r0, s0
 8015f24:	ee10 3a10 	vmov	r3, s0
 8015f28:	4629      	mov	r1, r5
 8015f2a:	462a      	mov	r2, r5
 8015f2c:	d110      	bne.n	8015f50 <__ieee754_sqrt+0x3c>
 8015f2e:	ee10 2a10 	vmov	r2, s0
 8015f32:	462b      	mov	r3, r5
 8015f34:	f7ea fb60 	bl	80005f8 <__aeabi_dmul>
 8015f38:	4602      	mov	r2, r0
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	4629      	mov	r1, r5
 8015f40:	f7ea f9a4 	bl	800028c <__adddf3>
 8015f44:	4604      	mov	r4, r0
 8015f46:	460d      	mov	r5, r1
 8015f48:	ec45 4b10 	vmov	d0, r4, r5
 8015f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	dc10      	bgt.n	8015f76 <__ieee754_sqrt+0x62>
 8015f54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015f58:	4330      	orrs	r0, r6
 8015f5a:	d0f5      	beq.n	8015f48 <__ieee754_sqrt+0x34>
 8015f5c:	b15d      	cbz	r5, 8015f76 <__ieee754_sqrt+0x62>
 8015f5e:	ee10 2a10 	vmov	r2, s0
 8015f62:	462b      	mov	r3, r5
 8015f64:	ee10 0a10 	vmov	r0, s0
 8015f68:	f7ea f98e 	bl	8000288 <__aeabi_dsub>
 8015f6c:	4602      	mov	r2, r0
 8015f6e:	460b      	mov	r3, r1
 8015f70:	f7ea fc6c 	bl	800084c <__aeabi_ddiv>
 8015f74:	e7e6      	b.n	8015f44 <__ieee754_sqrt+0x30>
 8015f76:	1509      	asrs	r1, r1, #20
 8015f78:	d076      	beq.n	8016068 <__ieee754_sqrt+0x154>
 8015f7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015f7e:	07ce      	lsls	r6, r1, #31
 8015f80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015f84:	bf5e      	ittt	pl
 8015f86:	0fda      	lsrpl	r2, r3, #31
 8015f88:	005b      	lslpl	r3, r3, #1
 8015f8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015f8e:	0fda      	lsrs	r2, r3, #31
 8015f90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015f94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015f98:	2000      	movs	r0, #0
 8015f9a:	106d      	asrs	r5, r5, #1
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	f04f 0e16 	mov.w	lr, #22
 8015fa2:	4684      	mov	ip, r0
 8015fa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015fa8:	eb0c 0401 	add.w	r4, ip, r1
 8015fac:	4294      	cmp	r4, r2
 8015fae:	bfde      	ittt	le
 8015fb0:	1b12      	suble	r2, r2, r4
 8015fb2:	eb04 0c01 	addle.w	ip, r4, r1
 8015fb6:	1840      	addle	r0, r0, r1
 8015fb8:	0052      	lsls	r2, r2, #1
 8015fba:	f1be 0e01 	subs.w	lr, lr, #1
 8015fbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015fc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015fca:	d1ed      	bne.n	8015fa8 <__ieee754_sqrt+0x94>
 8015fcc:	4671      	mov	r1, lr
 8015fce:	2720      	movs	r7, #32
 8015fd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015fd4:	4562      	cmp	r2, ip
 8015fd6:	eb04 060e 	add.w	r6, r4, lr
 8015fda:	dc02      	bgt.n	8015fe2 <__ieee754_sqrt+0xce>
 8015fdc:	d113      	bne.n	8016006 <__ieee754_sqrt+0xf2>
 8015fde:	429e      	cmp	r6, r3
 8015fe0:	d811      	bhi.n	8016006 <__ieee754_sqrt+0xf2>
 8015fe2:	2e00      	cmp	r6, #0
 8015fe4:	eb06 0e04 	add.w	lr, r6, r4
 8015fe8:	da43      	bge.n	8016072 <__ieee754_sqrt+0x15e>
 8015fea:	f1be 0f00 	cmp.w	lr, #0
 8015fee:	db40      	blt.n	8016072 <__ieee754_sqrt+0x15e>
 8015ff0:	f10c 0801 	add.w	r8, ip, #1
 8015ff4:	eba2 020c 	sub.w	r2, r2, ip
 8015ff8:	429e      	cmp	r6, r3
 8015ffa:	bf88      	it	hi
 8015ffc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016000:	1b9b      	subs	r3, r3, r6
 8016002:	4421      	add	r1, r4
 8016004:	46c4      	mov	ip, r8
 8016006:	0052      	lsls	r2, r2, #1
 8016008:	3f01      	subs	r7, #1
 801600a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801600e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016016:	d1dd      	bne.n	8015fd4 <__ieee754_sqrt+0xc0>
 8016018:	4313      	orrs	r3, r2
 801601a:	d006      	beq.n	801602a <__ieee754_sqrt+0x116>
 801601c:	1c4c      	adds	r4, r1, #1
 801601e:	bf13      	iteet	ne
 8016020:	3101      	addne	r1, #1
 8016022:	3001      	addeq	r0, #1
 8016024:	4639      	moveq	r1, r7
 8016026:	f021 0101 	bicne.w	r1, r1, #1
 801602a:	1043      	asrs	r3, r0, #1
 801602c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016030:	0849      	lsrs	r1, r1, #1
 8016032:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016036:	07c2      	lsls	r2, r0, #31
 8016038:	bf48      	it	mi
 801603a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801603e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016042:	460c      	mov	r4, r1
 8016044:	463d      	mov	r5, r7
 8016046:	e77f      	b.n	8015f48 <__ieee754_sqrt+0x34>
 8016048:	0ada      	lsrs	r2, r3, #11
 801604a:	3815      	subs	r0, #21
 801604c:	055b      	lsls	r3, r3, #21
 801604e:	2a00      	cmp	r2, #0
 8016050:	d0fa      	beq.n	8016048 <__ieee754_sqrt+0x134>
 8016052:	02d7      	lsls	r7, r2, #11
 8016054:	d50a      	bpl.n	801606c <__ieee754_sqrt+0x158>
 8016056:	f1c1 0420 	rsb	r4, r1, #32
 801605a:	fa23 f404 	lsr.w	r4, r3, r4
 801605e:	1e4d      	subs	r5, r1, #1
 8016060:	408b      	lsls	r3, r1
 8016062:	4322      	orrs	r2, r4
 8016064:	1b41      	subs	r1, r0, r5
 8016066:	e788      	b.n	8015f7a <__ieee754_sqrt+0x66>
 8016068:	4608      	mov	r0, r1
 801606a:	e7f0      	b.n	801604e <__ieee754_sqrt+0x13a>
 801606c:	0052      	lsls	r2, r2, #1
 801606e:	3101      	adds	r1, #1
 8016070:	e7ef      	b.n	8016052 <__ieee754_sqrt+0x13e>
 8016072:	46e0      	mov	r8, ip
 8016074:	e7be      	b.n	8015ff4 <__ieee754_sqrt+0xe0>
 8016076:	bf00      	nop
 8016078:	7ff00000 	.word	0x7ff00000

0801607c <__ieee754_acosf>:
 801607c:	b508      	push	{r3, lr}
 801607e:	ee10 3a10 	vmov	r3, s0
 8016082:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016086:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801608a:	ed2d 8b0c 	vpush	{d8-d13}
 801608e:	d10a      	bne.n	80160a6 <__ieee754_acosf+0x2a>
 8016090:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801622c <__ieee754_acosf+0x1b0>
 8016094:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8016230 <__ieee754_acosf+0x1b4>
 8016098:	2b00      	cmp	r3, #0
 801609a:	bfd8      	it	le
 801609c:	eeb0 0a48 	vmovle.f32	s0, s16
 80160a0:	ecbd 8b0c 	vpop	{d8-d13}
 80160a4:	bd08      	pop	{r3, pc}
 80160a6:	dd04      	ble.n	80160b2 <__ieee754_acosf+0x36>
 80160a8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80160ac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80160b0:	e7f6      	b.n	80160a0 <__ieee754_acosf+0x24>
 80160b2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80160b6:	da3e      	bge.n	8016136 <__ieee754_acosf+0xba>
 80160b8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80160bc:	f340 80b3 	ble.w	8016226 <__ieee754_acosf+0x1aa>
 80160c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80160c4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8016234 <__ieee754_acosf+0x1b8>
 80160c8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8016238 <__ieee754_acosf+0x1bc>
 80160cc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801623c <__ieee754_acosf+0x1c0>
 80160d0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8016240 <__ieee754_acosf+0x1c4>
 80160d4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80160d8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8016244 <__ieee754_acosf+0x1c8>
 80160dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80160e0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8016248 <__ieee754_acosf+0x1cc>
 80160e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80160e8:	eddf 6a58 	vldr	s13, [pc, #352]	; 801624c <__ieee754_acosf+0x1d0>
 80160ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80160f0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8016250 <__ieee754_acosf+0x1d4>
 80160f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80160f8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8016254 <__ieee754_acosf+0x1d8>
 80160fc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016100:	eddf 6a55 	vldr	s13, [pc, #340]	; 8016258 <__ieee754_acosf+0x1dc>
 8016104:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016108:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801625c <__ieee754_acosf+0x1e0>
 801610c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016114:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016118:	ee27 7a27 	vmul.f32	s14, s14, s15
 801611c:	eef0 7a66 	vmov.f32	s15, s13
 8016120:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016124:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016260 <__ieee754_acosf+0x1e4>
 8016128:	eea0 8a66 	vfms.f32	s16, s0, s13
 801612c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016130:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016134:	e7b4      	b.n	80160a0 <__ieee754_acosf+0x24>
 8016136:	2b00      	cmp	r3, #0
 8016138:	eddf da3e 	vldr	s27, [pc, #248]	; 8016234 <__ieee754_acosf+0x1b8>
 801613c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8016238 <__ieee754_acosf+0x1bc>
 8016140:	ed9f ca40 	vldr	s24, [pc, #256]	; 8016244 <__ieee754_acosf+0x1c8>
 8016144:	eddf ba40 	vldr	s23, [pc, #256]	; 8016248 <__ieee754_acosf+0x1cc>
 8016148:	ed9f ba40 	vldr	s22, [pc, #256]	; 801624c <__ieee754_acosf+0x1d0>
 801614c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8016250 <__ieee754_acosf+0x1d4>
 8016150:	ed9f da40 	vldr	s26, [pc, #256]	; 8016254 <__ieee754_acosf+0x1d8>
 8016154:	eddf aa39 	vldr	s21, [pc, #228]	; 801623c <__ieee754_acosf+0x1c0>
 8016158:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8016258 <__ieee754_acosf+0x1dc>
 801615c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801625c <__ieee754_acosf+0x1e0>
 8016160:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016164:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016168:	da28      	bge.n	80161bc <__ieee754_acosf+0x140>
 801616a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801616e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016172:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8016176:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801617a:	eeac ca80 	vfma.f32	s24, s25, s0
 801617e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016182:	eeec ba00 	vfma.f32	s23, s24, s0
 8016186:	eeea 9a00 	vfma.f32	s19, s20, s0
 801618a:	eeab ba80 	vfma.f32	s22, s23, s0
 801618e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8016192:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8016196:	ee68 8a80 	vmul.f32	s17, s17, s0
 801619a:	f000 fb2b 	bl	80167f4 <__ieee754_sqrtf>
 801619e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80161a2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8016264 <__ieee754_acosf+0x1e8>
 80161a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80161aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80161ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80161b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016268 <__ieee754_acosf+0x1ec>
 80161b6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80161ba:	e771      	b.n	80160a0 <__ieee754_acosf+0x24>
 80161bc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80161c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80161c4:	eeb0 0a48 	vmov.f32	s0, s16
 80161c8:	f000 fb14 	bl	80167f4 <__ieee754_sqrtf>
 80161cc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80161d0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80161d4:	eeac ca88 	vfma.f32	s24, s25, s16
 80161d8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80161dc:	eeec ba08 	vfma.f32	s23, s24, s16
 80161e0:	ee10 3a10 	vmov	r3, s0
 80161e4:	eeab ba88 	vfma.f32	s22, s23, s16
 80161e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80161ec:	f023 030f 	bic.w	r3, r3, #15
 80161f0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80161f4:	ee07 3a90 	vmov	s15, r3
 80161f8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80161fc:	eeb0 6a48 	vmov.f32	s12, s16
 8016200:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016204:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016208:	ee70 6a27 	vadd.f32	s13, s0, s15
 801620c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016210:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016214:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016218:	eea0 7a26 	vfma.f32	s14, s0, s13
 801621c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016220:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016224:	e73c      	b.n	80160a0 <__ieee754_acosf+0x24>
 8016226:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801626c <__ieee754_acosf+0x1f0>
 801622a:	e739      	b.n	80160a0 <__ieee754_acosf+0x24>
 801622c:	00000000 	.word	0x00000000
 8016230:	40490fdb 	.word	0x40490fdb
 8016234:	3811ef08 	.word	0x3811ef08
 8016238:	3a4f7f04 	.word	0x3a4f7f04
 801623c:	bf303361 	.word	0xbf303361
 8016240:	33a22168 	.word	0x33a22168
 8016244:	bd241146 	.word	0xbd241146
 8016248:	3e4e0aa8 	.word	0x3e4e0aa8
 801624c:	bea6b090 	.word	0xbea6b090
 8016250:	3e2aaaab 	.word	0x3e2aaaab
 8016254:	3d9dc62e 	.word	0x3d9dc62e
 8016258:	4001572d 	.word	0x4001572d
 801625c:	c019d139 	.word	0xc019d139
 8016260:	3fc90fda 	.word	0x3fc90fda
 8016264:	b3a22168 	.word	0xb3a22168
 8016268:	40490fda 	.word	0x40490fda
 801626c:	3fc90fdb 	.word	0x3fc90fdb

08016270 <__ieee754_asinf>:
 8016270:	b538      	push	{r3, r4, r5, lr}
 8016272:	ee10 5a10 	vmov	r5, s0
 8016276:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801627a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801627e:	ed2d 8b04 	vpush	{d8-d9}
 8016282:	d10c      	bne.n	801629e <__ieee754_asinf+0x2e>
 8016284:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80163fc <__ieee754_asinf+0x18c>
 8016288:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016400 <__ieee754_asinf+0x190>
 801628c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016290:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016294:	eeb0 0a67 	vmov.f32	s0, s15
 8016298:	ecbd 8b04 	vpop	{d8-d9}
 801629c:	bd38      	pop	{r3, r4, r5, pc}
 801629e:	dd04      	ble.n	80162aa <__ieee754_asinf+0x3a>
 80162a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80162a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80162a8:	e7f6      	b.n	8016298 <__ieee754_asinf+0x28>
 80162aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80162ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80162b2:	da0b      	bge.n	80162cc <__ieee754_asinf+0x5c>
 80162b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80162b8:	da52      	bge.n	8016360 <__ieee754_asinf+0xf0>
 80162ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016404 <__ieee754_asinf+0x194>
 80162be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80162c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80162c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ca:	dce5      	bgt.n	8016298 <__ieee754_asinf+0x28>
 80162cc:	f001 f92a 	bl	8017524 <fabsf>
 80162d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80162d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80162d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80162dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016408 <__ieee754_asinf+0x198>
 80162e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801640c <__ieee754_asinf+0x19c>
 80162e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016410 <__ieee754_asinf+0x1a0>
 80162e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80162ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016414 <__ieee754_asinf+0x1a4>
 80162f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80162f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016418 <__ieee754_asinf+0x1a8>
 80162f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80162fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 801641c <__ieee754_asinf+0x1ac>
 8016300:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016304:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016420 <__ieee754_asinf+0x1b0>
 8016308:	eea7 9a88 	vfma.f32	s18, s15, s16
 801630c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016424 <__ieee754_asinf+0x1b4>
 8016310:	eee8 7a07 	vfma.f32	s15, s16, s14
 8016314:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016428 <__ieee754_asinf+0x1b8>
 8016318:	eea7 7a88 	vfma.f32	s14, s15, s16
 801631c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801642c <__ieee754_asinf+0x1bc>
 8016320:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016324:	eeb0 0a48 	vmov.f32	s0, s16
 8016328:	eee7 8a88 	vfma.f32	s17, s15, s16
 801632c:	f000 fa62 	bl	80167f4 <__ieee754_sqrtf>
 8016330:	4b3f      	ldr	r3, [pc, #252]	; (8016430 <__ieee754_asinf+0x1c0>)
 8016332:	ee29 9a08 	vmul.f32	s18, s18, s16
 8016336:	429c      	cmp	r4, r3
 8016338:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801633c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016340:	dd3d      	ble.n	80163be <__ieee754_asinf+0x14e>
 8016342:	eea0 0a06 	vfma.f32	s0, s0, s12
 8016346:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016434 <__ieee754_asinf+0x1c4>
 801634a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801634e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016400 <__ieee754_asinf+0x190>
 8016352:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016356:	2d00      	cmp	r5, #0
 8016358:	bfd8      	it	le
 801635a:	eeb1 0a40 	vnegle.f32	s0, s0
 801635e:	e79b      	b.n	8016298 <__ieee754_asinf+0x28>
 8016360:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016364:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016408 <__ieee754_asinf+0x198>
 8016368:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801640c <__ieee754_asinf+0x19c>
 801636c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016420 <__ieee754_asinf+0x1b0>
 8016370:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016374:	eddf 6a27 	vldr	s13, [pc, #156]	; 8016414 <__ieee754_asinf+0x1a4>
 8016378:	eee7 6a27 	vfma.f32	s13, s14, s15
 801637c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016418 <__ieee754_asinf+0x1a8>
 8016380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016384:	eddf 6a25 	vldr	s13, [pc, #148]	; 801641c <__ieee754_asinf+0x1ac>
 8016388:	eee7 6a27 	vfma.f32	s13, s14, s15
 801638c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016410 <__ieee754_asinf+0x1a0>
 8016390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016394:	eddf 6a23 	vldr	s13, [pc, #140]	; 8016424 <__ieee754_asinf+0x1b4>
 8016398:	eee7 6a86 	vfma.f32	s13, s15, s12
 801639c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8016428 <__ieee754_asinf+0x1b8>
 80163a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80163a4:	eddf 6a21 	vldr	s13, [pc, #132]	; 801642c <__ieee754_asinf+0x1bc>
 80163a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80163ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80163b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80163b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80163b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80163bc:	e76c      	b.n	8016298 <__ieee754_asinf+0x28>
 80163be:	ee10 3a10 	vmov	r3, s0
 80163c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80163c6:	f023 030f 	bic.w	r3, r3, #15
 80163ca:	ee07 3a10 	vmov	s14, r3
 80163ce:	eea7 8a47 	vfms.f32	s16, s14, s14
 80163d2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80163d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163da:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80163de:	eddf 7a07 	vldr	s15, [pc, #28]	; 80163fc <__ieee754_asinf+0x18c>
 80163e2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80163e6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80163ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8016438 <__ieee754_asinf+0x1c8>
 80163ee:	eeb0 6a40 	vmov.f32	s12, s0
 80163f2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80163f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80163fa:	e7aa      	b.n	8016352 <__ieee754_asinf+0xe2>
 80163fc:	b33bbd2e 	.word	0xb33bbd2e
 8016400:	3fc90fdb 	.word	0x3fc90fdb
 8016404:	7149f2ca 	.word	0x7149f2ca
 8016408:	3811ef08 	.word	0x3811ef08
 801640c:	3a4f7f04 	.word	0x3a4f7f04
 8016410:	3e2aaaab 	.word	0x3e2aaaab
 8016414:	bd241146 	.word	0xbd241146
 8016418:	3e4e0aa8 	.word	0x3e4e0aa8
 801641c:	bea6b090 	.word	0xbea6b090
 8016420:	3d9dc62e 	.word	0x3d9dc62e
 8016424:	bf303361 	.word	0xbf303361
 8016428:	4001572d 	.word	0x4001572d
 801642c:	c019d139 	.word	0xc019d139
 8016430:	3f799999 	.word	0x3f799999
 8016434:	333bbd2e 	.word	0x333bbd2e
 8016438:	3f490fdb 	.word	0x3f490fdb

0801643c <__ieee754_atan2f>:
 801643c:	ee10 2a90 	vmov	r2, s1
 8016440:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016444:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016448:	b510      	push	{r4, lr}
 801644a:	eef0 7a40 	vmov.f32	s15, s0
 801644e:	dc06      	bgt.n	801645e <__ieee754_atan2f+0x22>
 8016450:	ee10 0a10 	vmov	r0, s0
 8016454:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016458:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801645c:	dd04      	ble.n	8016468 <__ieee754_atan2f+0x2c>
 801645e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016462:	eeb0 0a67 	vmov.f32	s0, s15
 8016466:	bd10      	pop	{r4, pc}
 8016468:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801646c:	d103      	bne.n	8016476 <__ieee754_atan2f+0x3a>
 801646e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016472:	f000 bf83 	b.w	801737c <atanf>
 8016476:	1794      	asrs	r4, r2, #30
 8016478:	f004 0402 	and.w	r4, r4, #2
 801647c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016480:	b943      	cbnz	r3, 8016494 <__ieee754_atan2f+0x58>
 8016482:	2c02      	cmp	r4, #2
 8016484:	d05e      	beq.n	8016544 <__ieee754_atan2f+0x108>
 8016486:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016558 <__ieee754_atan2f+0x11c>
 801648a:	2c03      	cmp	r4, #3
 801648c:	bf08      	it	eq
 801648e:	eef0 7a47 	vmoveq.f32	s15, s14
 8016492:	e7e6      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016494:	b941      	cbnz	r1, 80164a8 <__ieee754_atan2f+0x6c>
 8016496:	eddf 7a31 	vldr	s15, [pc, #196]	; 801655c <__ieee754_atan2f+0x120>
 801649a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016560 <__ieee754_atan2f+0x124>
 801649e:	2800      	cmp	r0, #0
 80164a0:	bfb8      	it	lt
 80164a2:	eef0 7a40 	vmovlt.f32	s15, s0
 80164a6:	e7dc      	b.n	8016462 <__ieee754_atan2f+0x26>
 80164a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80164ac:	d110      	bne.n	80164d0 <__ieee754_atan2f+0x94>
 80164ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80164b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80164b6:	d107      	bne.n	80164c8 <__ieee754_atan2f+0x8c>
 80164b8:	2c02      	cmp	r4, #2
 80164ba:	d846      	bhi.n	801654a <__ieee754_atan2f+0x10e>
 80164bc:	4b29      	ldr	r3, [pc, #164]	; (8016564 <__ieee754_atan2f+0x128>)
 80164be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80164c2:	edd4 7a00 	vldr	s15, [r4]
 80164c6:	e7cc      	b.n	8016462 <__ieee754_atan2f+0x26>
 80164c8:	2c02      	cmp	r4, #2
 80164ca:	d841      	bhi.n	8016550 <__ieee754_atan2f+0x114>
 80164cc:	4b26      	ldr	r3, [pc, #152]	; (8016568 <__ieee754_atan2f+0x12c>)
 80164ce:	e7f6      	b.n	80164be <__ieee754_atan2f+0x82>
 80164d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80164d4:	d0df      	beq.n	8016496 <__ieee754_atan2f+0x5a>
 80164d6:	1a5b      	subs	r3, r3, r1
 80164d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80164dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80164e0:	da1a      	bge.n	8016518 <__ieee754_atan2f+0xdc>
 80164e2:	2a00      	cmp	r2, #0
 80164e4:	da01      	bge.n	80164ea <__ieee754_atan2f+0xae>
 80164e6:	313c      	adds	r1, #60	; 0x3c
 80164e8:	db19      	blt.n	801651e <__ieee754_atan2f+0xe2>
 80164ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80164ee:	f001 f819 	bl	8017524 <fabsf>
 80164f2:	f000 ff43 	bl	801737c <atanf>
 80164f6:	eef0 7a40 	vmov.f32	s15, s0
 80164fa:	2c01      	cmp	r4, #1
 80164fc:	d012      	beq.n	8016524 <__ieee754_atan2f+0xe8>
 80164fe:	2c02      	cmp	r4, #2
 8016500:	d017      	beq.n	8016532 <__ieee754_atan2f+0xf6>
 8016502:	2c00      	cmp	r4, #0
 8016504:	d0ad      	beq.n	8016462 <__ieee754_atan2f+0x26>
 8016506:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801656c <__ieee754_atan2f+0x130>
 801650a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801650e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016570 <__ieee754_atan2f+0x134>
 8016512:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016516:	e7a4      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016518:	eddf 7a10 	vldr	s15, [pc, #64]	; 801655c <__ieee754_atan2f+0x120>
 801651c:	e7ed      	b.n	80164fa <__ieee754_atan2f+0xbe>
 801651e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016574 <__ieee754_atan2f+0x138>
 8016522:	e7ea      	b.n	80164fa <__ieee754_atan2f+0xbe>
 8016524:	ee17 3a90 	vmov	r3, s15
 8016528:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801652c:	ee07 3a90 	vmov	s15, r3
 8016530:	e797      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016532:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801656c <__ieee754_atan2f+0x130>
 8016536:	ee77 7a80 	vadd.f32	s15, s15, s0
 801653a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016570 <__ieee754_atan2f+0x134>
 801653e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016542:	e78e      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016544:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016570 <__ieee754_atan2f+0x134>
 8016548:	e78b      	b.n	8016462 <__ieee754_atan2f+0x26>
 801654a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016578 <__ieee754_atan2f+0x13c>
 801654e:	e788      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016550:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016574 <__ieee754_atan2f+0x138>
 8016554:	e785      	b.n	8016462 <__ieee754_atan2f+0x26>
 8016556:	bf00      	nop
 8016558:	c0490fdb 	.word	0xc0490fdb
 801655c:	3fc90fdb 	.word	0x3fc90fdb
 8016560:	bfc90fdb 	.word	0xbfc90fdb
 8016564:	0801a7b0 	.word	0x0801a7b0
 8016568:	0801a7bc 	.word	0x0801a7bc
 801656c:	33bbbd2e 	.word	0x33bbbd2e
 8016570:	40490fdb 	.word	0x40490fdb
 8016574:	00000000 	.word	0x00000000
 8016578:	3f490fdb 	.word	0x3f490fdb

0801657c <__ieee754_rem_pio2f>:
 801657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801657e:	ee10 6a10 	vmov	r6, s0
 8016582:	4b8e      	ldr	r3, [pc, #568]	; (80167bc <__ieee754_rem_pio2f+0x240>)
 8016584:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016588:	429d      	cmp	r5, r3
 801658a:	b087      	sub	sp, #28
 801658c:	eef0 7a40 	vmov.f32	s15, s0
 8016590:	4604      	mov	r4, r0
 8016592:	dc05      	bgt.n	80165a0 <__ieee754_rem_pio2f+0x24>
 8016594:	2300      	movs	r3, #0
 8016596:	ed80 0a00 	vstr	s0, [r0]
 801659a:	6043      	str	r3, [r0, #4]
 801659c:	2000      	movs	r0, #0
 801659e:	e01a      	b.n	80165d6 <__ieee754_rem_pio2f+0x5a>
 80165a0:	4b87      	ldr	r3, [pc, #540]	; (80167c0 <__ieee754_rem_pio2f+0x244>)
 80165a2:	429d      	cmp	r5, r3
 80165a4:	dc46      	bgt.n	8016634 <__ieee754_rem_pio2f+0xb8>
 80165a6:	2e00      	cmp	r6, #0
 80165a8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80167c4 <__ieee754_rem_pio2f+0x248>
 80165ac:	4b86      	ldr	r3, [pc, #536]	; (80167c8 <__ieee754_rem_pio2f+0x24c>)
 80165ae:	f025 050f 	bic.w	r5, r5, #15
 80165b2:	dd1f      	ble.n	80165f4 <__ieee754_rem_pio2f+0x78>
 80165b4:	429d      	cmp	r5, r3
 80165b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80165ba:	d00e      	beq.n	80165da <__ieee754_rem_pio2f+0x5e>
 80165bc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80167cc <__ieee754_rem_pio2f+0x250>
 80165c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80165c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80165c8:	ed80 0a00 	vstr	s0, [r0]
 80165cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165d0:	2001      	movs	r0, #1
 80165d2:	edc4 7a01 	vstr	s15, [r4, #4]
 80165d6:	b007      	add	sp, #28
 80165d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165da:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80167d0 <__ieee754_rem_pio2f+0x254>
 80165de:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80167d4 <__ieee754_rem_pio2f+0x258>
 80165e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80165e6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80165ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80165ee:	edc0 6a00 	vstr	s13, [r0]
 80165f2:	e7eb      	b.n	80165cc <__ieee754_rem_pio2f+0x50>
 80165f4:	429d      	cmp	r5, r3
 80165f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80165fa:	d00e      	beq.n	801661a <__ieee754_rem_pio2f+0x9e>
 80165fc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80167cc <__ieee754_rem_pio2f+0x250>
 8016600:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016604:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016608:	ed80 0a00 	vstr	s0, [r0]
 801660c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016610:	f04f 30ff 	mov.w	r0, #4294967295
 8016614:	edc4 7a01 	vstr	s15, [r4, #4]
 8016618:	e7dd      	b.n	80165d6 <__ieee754_rem_pio2f+0x5a>
 801661a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80167d0 <__ieee754_rem_pio2f+0x254>
 801661e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80167d4 <__ieee754_rem_pio2f+0x258>
 8016622:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016626:	ee77 6a87 	vadd.f32	s13, s15, s14
 801662a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801662e:	edc0 6a00 	vstr	s13, [r0]
 8016632:	e7eb      	b.n	801660c <__ieee754_rem_pio2f+0x90>
 8016634:	4b68      	ldr	r3, [pc, #416]	; (80167d8 <__ieee754_rem_pio2f+0x25c>)
 8016636:	429d      	cmp	r5, r3
 8016638:	dc72      	bgt.n	8016720 <__ieee754_rem_pio2f+0x1a4>
 801663a:	f000 ff73 	bl	8017524 <fabsf>
 801663e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80167dc <__ieee754_rem_pio2f+0x260>
 8016642:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016646:	eee0 7a07 	vfma.f32	s15, s0, s14
 801664a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801664e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016652:	ee17 0a90 	vmov	r0, s15
 8016656:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80167c4 <__ieee754_rem_pio2f+0x248>
 801665a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801665e:	281f      	cmp	r0, #31
 8016660:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80167cc <__ieee754_rem_pio2f+0x250>
 8016664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016668:	eeb1 6a47 	vneg.f32	s12, s14
 801666c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016670:	ee16 2a90 	vmov	r2, s13
 8016674:	dc1c      	bgt.n	80166b0 <__ieee754_rem_pio2f+0x134>
 8016676:	495a      	ldr	r1, [pc, #360]	; (80167e0 <__ieee754_rem_pio2f+0x264>)
 8016678:	1e47      	subs	r7, r0, #1
 801667a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801667e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016682:	428b      	cmp	r3, r1
 8016684:	d014      	beq.n	80166b0 <__ieee754_rem_pio2f+0x134>
 8016686:	6022      	str	r2, [r4, #0]
 8016688:	ed94 7a00 	vldr	s14, [r4]
 801668c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016690:	2e00      	cmp	r6, #0
 8016692:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016696:	ed84 0a01 	vstr	s0, [r4, #4]
 801669a:	da9c      	bge.n	80165d6 <__ieee754_rem_pio2f+0x5a>
 801669c:	eeb1 7a47 	vneg.f32	s14, s14
 80166a0:	eeb1 0a40 	vneg.f32	s0, s0
 80166a4:	ed84 7a00 	vstr	s14, [r4]
 80166a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80166ac:	4240      	negs	r0, r0
 80166ae:	e792      	b.n	80165d6 <__ieee754_rem_pio2f+0x5a>
 80166b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80166b4:	15eb      	asrs	r3, r5, #23
 80166b6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80166ba:	2d08      	cmp	r5, #8
 80166bc:	dde3      	ble.n	8016686 <__ieee754_rem_pio2f+0x10a>
 80166be:	eddf 7a44 	vldr	s15, [pc, #272]	; 80167d0 <__ieee754_rem_pio2f+0x254>
 80166c2:	eef0 6a40 	vmov.f32	s13, s0
 80166c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80166ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80166ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 80166d2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80167d4 <__ieee754_rem_pio2f+0x258>
 80166d6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80166da:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80166de:	eef0 7a40 	vmov.f32	s15, s0
 80166e2:	ee15 2a90 	vmov	r2, s11
 80166e6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80166ea:	1a5b      	subs	r3, r3, r1
 80166ec:	2b19      	cmp	r3, #25
 80166ee:	dc04      	bgt.n	80166fa <__ieee754_rem_pio2f+0x17e>
 80166f0:	edc4 5a00 	vstr	s11, [r4]
 80166f4:	eeb0 0a66 	vmov.f32	s0, s13
 80166f8:	e7c6      	b.n	8016688 <__ieee754_rem_pio2f+0x10c>
 80166fa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80167e4 <__ieee754_rem_pio2f+0x268>
 80166fe:	eeb0 0a66 	vmov.f32	s0, s13
 8016702:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016706:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801670a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80167e8 <__ieee754_rem_pio2f+0x26c>
 801670e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016712:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016716:	ee30 7a67 	vsub.f32	s14, s0, s15
 801671a:	ed84 7a00 	vstr	s14, [r4]
 801671e:	e7b3      	b.n	8016688 <__ieee754_rem_pio2f+0x10c>
 8016720:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016724:	db06      	blt.n	8016734 <__ieee754_rem_pio2f+0x1b8>
 8016726:	ee70 7a40 	vsub.f32	s15, s0, s0
 801672a:	edc0 7a01 	vstr	s15, [r0, #4]
 801672e:	edc0 7a00 	vstr	s15, [r0]
 8016732:	e733      	b.n	801659c <__ieee754_rem_pio2f+0x20>
 8016734:	15ea      	asrs	r2, r5, #23
 8016736:	3a86      	subs	r2, #134	; 0x86
 8016738:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801673c:	ee07 3a90 	vmov	s15, r3
 8016740:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016744:	eddf 6a29 	vldr	s13, [pc, #164]	; 80167ec <__ieee754_rem_pio2f+0x270>
 8016748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801674c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016750:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016758:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801675c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016764:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801676c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016774:	edcd 7a05 	vstr	s15, [sp, #20]
 8016778:	d11e      	bne.n	80167b8 <__ieee754_rem_pio2f+0x23c>
 801677a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801677e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016782:	bf14      	ite	ne
 8016784:	2302      	movne	r3, #2
 8016786:	2301      	moveq	r3, #1
 8016788:	4919      	ldr	r1, [pc, #100]	; (80167f0 <__ieee754_rem_pio2f+0x274>)
 801678a:	9101      	str	r1, [sp, #4]
 801678c:	2102      	movs	r1, #2
 801678e:	9100      	str	r1, [sp, #0]
 8016790:	a803      	add	r0, sp, #12
 8016792:	4621      	mov	r1, r4
 8016794:	f000 f892 	bl	80168bc <__kernel_rem_pio2f>
 8016798:	2e00      	cmp	r6, #0
 801679a:	f6bf af1c 	bge.w	80165d6 <__ieee754_rem_pio2f+0x5a>
 801679e:	edd4 7a00 	vldr	s15, [r4]
 80167a2:	eef1 7a67 	vneg.f32	s15, s15
 80167a6:	edc4 7a00 	vstr	s15, [r4]
 80167aa:	edd4 7a01 	vldr	s15, [r4, #4]
 80167ae:	eef1 7a67 	vneg.f32	s15, s15
 80167b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80167b6:	e779      	b.n	80166ac <__ieee754_rem_pio2f+0x130>
 80167b8:	2303      	movs	r3, #3
 80167ba:	e7e5      	b.n	8016788 <__ieee754_rem_pio2f+0x20c>
 80167bc:	3f490fd8 	.word	0x3f490fd8
 80167c0:	4016cbe3 	.word	0x4016cbe3
 80167c4:	3fc90f80 	.word	0x3fc90f80
 80167c8:	3fc90fd0 	.word	0x3fc90fd0
 80167cc:	37354443 	.word	0x37354443
 80167d0:	37354400 	.word	0x37354400
 80167d4:	2e85a308 	.word	0x2e85a308
 80167d8:	43490f80 	.word	0x43490f80
 80167dc:	3f22f984 	.word	0x3f22f984
 80167e0:	0801a7c8 	.word	0x0801a7c8
 80167e4:	2e85a300 	.word	0x2e85a300
 80167e8:	248d3132 	.word	0x248d3132
 80167ec:	43800000 	.word	0x43800000
 80167f0:	0801a848 	.word	0x0801a848

080167f4 <__ieee754_sqrtf>:
 80167f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80167f8:	4770      	bx	lr
	...

080167fc <__kernel_cosf>:
 80167fc:	ee10 3a10 	vmov	r3, s0
 8016800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016804:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801680c:	da05      	bge.n	801681a <__kernel_cosf+0x1e>
 801680e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016812:	ee17 2a90 	vmov	r2, s15
 8016816:	2a00      	cmp	r2, #0
 8016818:	d03d      	beq.n	8016896 <__kernel_cosf+0x9a>
 801681a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801681e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801689c <__kernel_cosf+0xa0>
 8016822:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80168a0 <__kernel_cosf+0xa4>
 8016826:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80168a4 <__kernel_cosf+0xa8>
 801682a:	4a1f      	ldr	r2, [pc, #124]	; (80168a8 <__kernel_cosf+0xac>)
 801682c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016830:	4293      	cmp	r3, r2
 8016832:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80168ac <__kernel_cosf+0xb0>
 8016836:	eee7 7a25 	vfma.f32	s15, s14, s11
 801683a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80168b0 <__kernel_cosf+0xb4>
 801683e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016842:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80168b4 <__kernel_cosf+0xb8>
 8016846:	eee7 7a25 	vfma.f32	s15, s14, s11
 801684a:	eeb0 7a66 	vmov.f32	s14, s13
 801684e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016852:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016856:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801685a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801685e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8016862:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016866:	dc04      	bgt.n	8016872 <__kernel_cosf+0x76>
 8016868:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801686c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016870:	4770      	bx	lr
 8016872:	4a11      	ldr	r2, [pc, #68]	; (80168b8 <__kernel_cosf+0xbc>)
 8016874:	4293      	cmp	r3, r2
 8016876:	bfda      	itte	le
 8016878:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801687c:	ee06 3a90 	vmovle	s13, r3
 8016880:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016884:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016888:	ee36 0a66 	vsub.f32	s0, s12, s13
 801688c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016890:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016894:	4770      	bx	lr
 8016896:	eeb0 0a46 	vmov.f32	s0, s12
 801689a:	4770      	bx	lr
 801689c:	ad47d74e 	.word	0xad47d74e
 80168a0:	310f74f6 	.word	0x310f74f6
 80168a4:	3d2aaaab 	.word	0x3d2aaaab
 80168a8:	3e999999 	.word	0x3e999999
 80168ac:	b493f27c 	.word	0xb493f27c
 80168b0:	37d00d01 	.word	0x37d00d01
 80168b4:	bab60b61 	.word	0xbab60b61
 80168b8:	3f480000 	.word	0x3f480000

080168bc <__kernel_rem_pio2f>:
 80168bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c0:	ed2d 8b04 	vpush	{d8-d9}
 80168c4:	b0d7      	sub	sp, #348	; 0x15c
 80168c6:	4616      	mov	r6, r2
 80168c8:	4698      	mov	r8, r3
 80168ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80168cc:	4bbb      	ldr	r3, [pc, #748]	; (8016bbc <__kernel_rem_pio2f+0x300>)
 80168ce:	9001      	str	r0, [sp, #4]
 80168d0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80168d4:	1d33      	adds	r3, r6, #4
 80168d6:	460d      	mov	r5, r1
 80168d8:	f108 39ff 	add.w	r9, r8, #4294967295
 80168dc:	db29      	blt.n	8016932 <__kernel_rem_pio2f+0x76>
 80168de:	1ef1      	subs	r1, r6, #3
 80168e0:	bf48      	it	mi
 80168e2:	1d31      	addmi	r1, r6, #4
 80168e4:	10c9      	asrs	r1, r1, #3
 80168e6:	1c4c      	adds	r4, r1, #1
 80168e8:	00e3      	lsls	r3, r4, #3
 80168ea:	9302      	str	r3, [sp, #8]
 80168ec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80168ee:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016bcc <__kernel_rem_pio2f+0x310>
 80168f2:	eba1 0009 	sub.w	r0, r1, r9
 80168f6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80168fa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80168fe:	eb07 0c09 	add.w	ip, r7, r9
 8016902:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016906:	2300      	movs	r3, #0
 8016908:	4563      	cmp	r3, ip
 801690a:	dd14      	ble.n	8016936 <__kernel_rem_pio2f+0x7a>
 801690c:	ab1a      	add	r3, sp, #104	; 0x68
 801690e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016912:	46cc      	mov	ip, r9
 8016914:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016918:	f1c8 0b01 	rsb	fp, r8, #1
 801691c:	eb0b 020c 	add.w	r2, fp, ip
 8016920:	4297      	cmp	r7, r2
 8016922:	db27      	blt.n	8016974 <__kernel_rem_pio2f+0xb8>
 8016924:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016928:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016bcc <__kernel_rem_pio2f+0x310>
 801692c:	4618      	mov	r0, r3
 801692e:	2200      	movs	r2, #0
 8016930:	e016      	b.n	8016960 <__kernel_rem_pio2f+0xa4>
 8016932:	2100      	movs	r1, #0
 8016934:	e7d7      	b.n	80168e6 <__kernel_rem_pio2f+0x2a>
 8016936:	42d8      	cmn	r0, r3
 8016938:	bf5d      	ittte	pl
 801693a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801693e:	ee07 2a90 	vmovpl	s15, r2
 8016942:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016946:	eef0 7a47 	vmovmi.f32	s15, s14
 801694a:	ecea 7a01 	vstmia	sl!, {s15}
 801694e:	3301      	adds	r3, #1
 8016950:	e7da      	b.n	8016908 <__kernel_rem_pio2f+0x4c>
 8016952:	ecfe 6a01 	vldmia	lr!, {s13}
 8016956:	ed90 7a00 	vldr	s14, [r0]
 801695a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801695e:	3201      	adds	r2, #1
 8016960:	454a      	cmp	r2, r9
 8016962:	f1a0 0004 	sub.w	r0, r0, #4
 8016966:	ddf4      	ble.n	8016952 <__kernel_rem_pio2f+0x96>
 8016968:	ecea 7a01 	vstmia	sl!, {s15}
 801696c:	3304      	adds	r3, #4
 801696e:	f10c 0c01 	add.w	ip, ip, #1
 8016972:	e7d3      	b.n	801691c <__kernel_rem_pio2f+0x60>
 8016974:	ab06      	add	r3, sp, #24
 8016976:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801697a:	9304      	str	r3, [sp, #16]
 801697c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801697e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016bc8 <__kernel_rem_pio2f+0x30c>
 8016982:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016bc4 <__kernel_rem_pio2f+0x308>
 8016986:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801698a:	9303      	str	r3, [sp, #12]
 801698c:	46ba      	mov	sl, r7
 801698e:	ab56      	add	r3, sp, #344	; 0x158
 8016990:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016994:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016998:	ab06      	add	r3, sp, #24
 801699a:	4618      	mov	r0, r3
 801699c:	4652      	mov	r2, sl
 801699e:	2a00      	cmp	r2, #0
 80169a0:	dc51      	bgt.n	8016a46 <__kernel_rem_pio2f+0x18a>
 80169a2:	4620      	mov	r0, r4
 80169a4:	9305      	str	r3, [sp, #20]
 80169a6:	f000 fe0d 	bl	80175c4 <scalbnf>
 80169aa:	eeb0 8a40 	vmov.f32	s16, s0
 80169ae:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80169b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80169b6:	f000 fdbd 	bl	8017534 <floorf>
 80169ba:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80169be:	eea0 8a67 	vfms.f32	s16, s0, s15
 80169c2:	2c00      	cmp	r4, #0
 80169c4:	9b05      	ldr	r3, [sp, #20]
 80169c6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80169ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80169ce:	edcd 7a00 	vstr	s15, [sp]
 80169d2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80169d6:	dd4b      	ble.n	8016a70 <__kernel_rem_pio2f+0x1b4>
 80169d8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80169dc:	aa06      	add	r2, sp, #24
 80169de:	f1c4 0e08 	rsb	lr, r4, #8
 80169e2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80169e6:	ee17 1a90 	vmov	r1, s15
 80169ea:	fa42 f00e 	asr.w	r0, r2, lr
 80169ee:	4401      	add	r1, r0
 80169f0:	9100      	str	r1, [sp, #0]
 80169f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80169f6:	a906      	add	r1, sp, #24
 80169f8:	1a12      	subs	r2, r2, r0
 80169fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80169fe:	f1c4 0007 	rsb	r0, r4, #7
 8016a02:	fa42 fb00 	asr.w	fp, r2, r0
 8016a06:	f1bb 0f00 	cmp.w	fp, #0
 8016a0a:	dd43      	ble.n	8016a94 <__kernel_rem_pio2f+0x1d8>
 8016a0c:	9a00      	ldr	r2, [sp, #0]
 8016a0e:	f04f 0e00 	mov.w	lr, #0
 8016a12:	3201      	adds	r2, #1
 8016a14:	9200      	str	r2, [sp, #0]
 8016a16:	4670      	mov	r0, lr
 8016a18:	45f2      	cmp	sl, lr
 8016a1a:	dc6c      	bgt.n	8016af6 <__kernel_rem_pio2f+0x23a>
 8016a1c:	2c00      	cmp	r4, #0
 8016a1e:	dd04      	ble.n	8016a2a <__kernel_rem_pio2f+0x16e>
 8016a20:	2c01      	cmp	r4, #1
 8016a22:	d079      	beq.n	8016b18 <__kernel_rem_pio2f+0x25c>
 8016a24:	2c02      	cmp	r4, #2
 8016a26:	f000 8082 	beq.w	8016b2e <__kernel_rem_pio2f+0x272>
 8016a2a:	f1bb 0f02 	cmp.w	fp, #2
 8016a2e:	d131      	bne.n	8016a94 <__kernel_rem_pio2f+0x1d8>
 8016a30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016a34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016a38:	b360      	cbz	r0, 8016a94 <__kernel_rem_pio2f+0x1d8>
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	f000 fdc2 	bl	80175c4 <scalbnf>
 8016a40:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016a44:	e026      	b.n	8016a94 <__kernel_rem_pio2f+0x1d8>
 8016a46:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016a4a:	3a01      	subs	r2, #1
 8016a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a50:	a942      	add	r1, sp, #264	; 0x108
 8016a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a56:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016a5a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016a5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a62:	eca0 0a01 	vstmia	r0!, {s0}
 8016a66:	ed9c 0a00 	vldr	s0, [ip]
 8016a6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016a6e:	e796      	b.n	801699e <__kernel_rem_pio2f+0xe2>
 8016a70:	d107      	bne.n	8016a82 <__kernel_rem_pio2f+0x1c6>
 8016a72:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016a76:	a906      	add	r1, sp, #24
 8016a78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016a7c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016a80:	e7c1      	b.n	8016a06 <__kernel_rem_pio2f+0x14a>
 8016a82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016a86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8e:	da2f      	bge.n	8016af0 <__kernel_rem_pio2f+0x234>
 8016a90:	f04f 0b00 	mov.w	fp, #0
 8016a94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a9c:	f040 8098 	bne.w	8016bd0 <__kernel_rem_pio2f+0x314>
 8016aa0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016aa4:	469c      	mov	ip, r3
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	45bc      	cmp	ip, r7
 8016aaa:	da48      	bge.n	8016b3e <__kernel_rem_pio2f+0x282>
 8016aac:	2a00      	cmp	r2, #0
 8016aae:	d05f      	beq.n	8016b70 <__kernel_rem_pio2f+0x2b4>
 8016ab0:	aa06      	add	r2, sp, #24
 8016ab2:	3c08      	subs	r4, #8
 8016ab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016ab8:	2900      	cmp	r1, #0
 8016aba:	d07d      	beq.n	8016bb8 <__kernel_rem_pio2f+0x2fc>
 8016abc:	4620      	mov	r0, r4
 8016abe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016ac2:	9301      	str	r3, [sp, #4]
 8016ac4:	f000 fd7e 	bl	80175c4 <scalbnf>
 8016ac8:	9b01      	ldr	r3, [sp, #4]
 8016aca:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016bc8 <__kernel_rem_pio2f+0x30c>
 8016ace:	4619      	mov	r1, r3
 8016ad0:	2900      	cmp	r1, #0
 8016ad2:	f280 80af 	bge.w	8016c34 <__kernel_rem_pio2f+0x378>
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	2400      	movs	r4, #0
 8016ada:	2800      	cmp	r0, #0
 8016adc:	f2c0 80d0 	blt.w	8016c80 <__kernel_rem_pio2f+0x3c4>
 8016ae0:	a942      	add	r1, sp, #264	; 0x108
 8016ae2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016ae6:	4a36      	ldr	r2, [pc, #216]	; (8016bc0 <__kernel_rem_pio2f+0x304>)
 8016ae8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016bcc <__kernel_rem_pio2f+0x310>
 8016aec:	2100      	movs	r1, #0
 8016aee:	e0bb      	b.n	8016c68 <__kernel_rem_pio2f+0x3ac>
 8016af0:	f04f 0b02 	mov.w	fp, #2
 8016af4:	e78a      	b.n	8016a0c <__kernel_rem_pio2f+0x150>
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	b948      	cbnz	r0, 8016b0e <__kernel_rem_pio2f+0x252>
 8016afa:	b11a      	cbz	r2, 8016b04 <__kernel_rem_pio2f+0x248>
 8016afc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016b00:	601a      	str	r2, [r3, #0]
 8016b02:	2201      	movs	r2, #1
 8016b04:	f10e 0e01 	add.w	lr, lr, #1
 8016b08:	3304      	adds	r3, #4
 8016b0a:	4610      	mov	r0, r2
 8016b0c:	e784      	b.n	8016a18 <__kernel_rem_pio2f+0x15c>
 8016b0e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016b12:	601a      	str	r2, [r3, #0]
 8016b14:	4602      	mov	r2, r0
 8016b16:	e7f5      	b.n	8016b04 <__kernel_rem_pio2f+0x248>
 8016b18:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016b1c:	ab06      	add	r3, sp, #24
 8016b1e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b26:	aa06      	add	r2, sp, #24
 8016b28:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016b2c:	e77d      	b.n	8016a2a <__kernel_rem_pio2f+0x16e>
 8016b2e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016b32:	ab06      	add	r3, sp, #24
 8016b34:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b3c:	e7f3      	b.n	8016b26 <__kernel_rem_pio2f+0x26a>
 8016b3e:	a906      	add	r1, sp, #24
 8016b40:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016b48:	4302      	orrs	r2, r0
 8016b4a:	e7ad      	b.n	8016aa8 <__kernel_rem_pio2f+0x1ec>
 8016b4c:	3001      	adds	r0, #1
 8016b4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016b52:	2a00      	cmp	r2, #0
 8016b54:	d0fa      	beq.n	8016b4c <__kernel_rem_pio2f+0x290>
 8016b56:	a91a      	add	r1, sp, #104	; 0x68
 8016b58:	eb0a 0208 	add.w	r2, sl, r8
 8016b5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016b60:	f10a 0301 	add.w	r3, sl, #1
 8016b64:	eb0a 0100 	add.w	r1, sl, r0
 8016b68:	4299      	cmp	r1, r3
 8016b6a:	da04      	bge.n	8016b76 <__kernel_rem_pio2f+0x2ba>
 8016b6c:	468a      	mov	sl, r1
 8016b6e:	e70e      	b.n	801698e <__kernel_rem_pio2f+0xd2>
 8016b70:	9b04      	ldr	r3, [sp, #16]
 8016b72:	2001      	movs	r0, #1
 8016b74:	e7eb      	b.n	8016b4e <__kernel_rem_pio2f+0x292>
 8016b76:	9803      	ldr	r0, [sp, #12]
 8016b78:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016b7c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016b80:	9000      	str	r0, [sp, #0]
 8016b82:	ee07 0a90 	vmov	s15, r0
 8016b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	ece2 7a01 	vstmia	r2!, {s15}
 8016b90:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016bcc <__kernel_rem_pio2f+0x310>
 8016b94:	4696      	mov	lr, r2
 8016b96:	4548      	cmp	r0, r9
 8016b98:	dd06      	ble.n	8016ba8 <__kernel_rem_pio2f+0x2ec>
 8016b9a:	a842      	add	r0, sp, #264	; 0x108
 8016b9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016ba0:	edc0 7a00 	vstr	s15, [r0]
 8016ba4:	3301      	adds	r3, #1
 8016ba6:	e7df      	b.n	8016b68 <__kernel_rem_pio2f+0x2ac>
 8016ba8:	ecfc 6a01 	vldmia	ip!, {s13}
 8016bac:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016bb0:	3001      	adds	r0, #1
 8016bb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016bb6:	e7ee      	b.n	8016b96 <__kernel_rem_pio2f+0x2da>
 8016bb8:	3b01      	subs	r3, #1
 8016bba:	e779      	b.n	8016ab0 <__kernel_rem_pio2f+0x1f4>
 8016bbc:	0801ab8c 	.word	0x0801ab8c
 8016bc0:	0801ab60 	.word	0x0801ab60
 8016bc4:	43800000 	.word	0x43800000
 8016bc8:	3b800000 	.word	0x3b800000
 8016bcc:	00000000 	.word	0x00000000
 8016bd0:	9b02      	ldr	r3, [sp, #8]
 8016bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8016bd6:	1b98      	subs	r0, r3, r6
 8016bd8:	f000 fcf4 	bl	80175c4 <scalbnf>
 8016bdc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016bc4 <__kernel_rem_pio2f+0x308>
 8016be0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be8:	db1b      	blt.n	8016c22 <__kernel_rem_pio2f+0x366>
 8016bea:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016bc8 <__kernel_rem_pio2f+0x30c>
 8016bee:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016bf2:	aa06      	add	r2, sp, #24
 8016bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016bf8:	a906      	add	r1, sp, #24
 8016bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bfe:	3408      	adds	r4, #8
 8016c00:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016c0c:	ee10 3a10 	vmov	r3, s0
 8016c10:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016c14:	ee17 2a90 	vmov	r2, s15
 8016c18:	f10a 0301 	add.w	r3, sl, #1
 8016c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016c20:	e74c      	b.n	8016abc <__kernel_rem_pio2f+0x200>
 8016c22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016c26:	aa06      	add	r2, sp, #24
 8016c28:	ee10 3a10 	vmov	r3, s0
 8016c2c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016c30:	4653      	mov	r3, sl
 8016c32:	e743      	b.n	8016abc <__kernel_rem_pio2f+0x200>
 8016c34:	aa42      	add	r2, sp, #264	; 0x108
 8016c36:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016c3a:	aa06      	add	r2, sp, #24
 8016c3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016c40:	9201      	str	r2, [sp, #4]
 8016c42:	ee07 2a90 	vmov	s15, r2
 8016c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c4a:	3901      	subs	r1, #1
 8016c4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016c50:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016c54:	edc0 7a00 	vstr	s15, [r0]
 8016c58:	e73a      	b.n	8016ad0 <__kernel_rem_pio2f+0x214>
 8016c5a:	ecf2 6a01 	vldmia	r2!, {s13}
 8016c5e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016c62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016c66:	3101      	adds	r1, #1
 8016c68:	42b9      	cmp	r1, r7
 8016c6a:	dc01      	bgt.n	8016c70 <__kernel_rem_pio2f+0x3b4>
 8016c6c:	428c      	cmp	r4, r1
 8016c6e:	daf4      	bge.n	8016c5a <__kernel_rem_pio2f+0x39e>
 8016c70:	aa56      	add	r2, sp, #344	; 0x158
 8016c72:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016c76:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016c7a:	3801      	subs	r0, #1
 8016c7c:	3401      	adds	r4, #1
 8016c7e:	e72c      	b.n	8016ada <__kernel_rem_pio2f+0x21e>
 8016c80:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016c82:	2a02      	cmp	r2, #2
 8016c84:	dc0a      	bgt.n	8016c9c <__kernel_rem_pio2f+0x3e0>
 8016c86:	2a00      	cmp	r2, #0
 8016c88:	dc61      	bgt.n	8016d4e <__kernel_rem_pio2f+0x492>
 8016c8a:	d03c      	beq.n	8016d06 <__kernel_rem_pio2f+0x44a>
 8016c8c:	9b00      	ldr	r3, [sp, #0]
 8016c8e:	f003 0007 	and.w	r0, r3, #7
 8016c92:	b057      	add	sp, #348	; 0x15c
 8016c94:	ecbd 8b04 	vpop	{d8-d9}
 8016c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016c9e:	2a03      	cmp	r2, #3
 8016ca0:	d1f4      	bne.n	8016c8c <__kernel_rem_pio2f+0x3d0>
 8016ca2:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ca4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016ca8:	4608      	mov	r0, r1
 8016caa:	461c      	mov	r4, r3
 8016cac:	2c00      	cmp	r4, #0
 8016cae:	f1a0 0004 	sub.w	r0, r0, #4
 8016cb2:	dc59      	bgt.n	8016d68 <__kernel_rem_pio2f+0x4ac>
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	2801      	cmp	r0, #1
 8016cb8:	f1a1 0104 	sub.w	r1, r1, #4
 8016cbc:	dc64      	bgt.n	8016d88 <__kernel_rem_pio2f+0x4cc>
 8016cbe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016bcc <__kernel_rem_pio2f+0x310>
 8016cc2:	2b01      	cmp	r3, #1
 8016cc4:	dc70      	bgt.n	8016da8 <__kernel_rem_pio2f+0x4ec>
 8016cc6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016cca:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016cce:	f1bb 0f00 	cmp.w	fp, #0
 8016cd2:	d172      	bne.n	8016dba <__kernel_rem_pio2f+0x4fe>
 8016cd4:	edc5 6a00 	vstr	s13, [r5]
 8016cd8:	ed85 7a01 	vstr	s14, [r5, #4]
 8016cdc:	edc5 7a02 	vstr	s15, [r5, #8]
 8016ce0:	e7d4      	b.n	8016c8c <__kernel_rem_pio2f+0x3d0>
 8016ce2:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ce4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016ce8:	ed91 7a00 	vldr	s14, [r1]
 8016cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016cf0:	3b01      	subs	r3, #1
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	daf5      	bge.n	8016ce2 <__kernel_rem_pio2f+0x426>
 8016cf6:	f1bb 0f00 	cmp.w	fp, #0
 8016cfa:	d001      	beq.n	8016d00 <__kernel_rem_pio2f+0x444>
 8016cfc:	eef1 7a67 	vneg.f32	s15, s15
 8016d00:	edc5 7a00 	vstr	s15, [r5]
 8016d04:	e7c2      	b.n	8016c8c <__kernel_rem_pio2f+0x3d0>
 8016d06:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016bcc <__kernel_rem_pio2f+0x310>
 8016d0a:	e7f2      	b.n	8016cf2 <__kernel_rem_pio2f+0x436>
 8016d0c:	aa2e      	add	r2, sp, #184	; 0xb8
 8016d0e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016d12:	edd0 7a00 	vldr	s15, [r0]
 8016d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d1a:	3901      	subs	r1, #1
 8016d1c:	2900      	cmp	r1, #0
 8016d1e:	daf5      	bge.n	8016d0c <__kernel_rem_pio2f+0x450>
 8016d20:	f1bb 0f00 	cmp.w	fp, #0
 8016d24:	d017      	beq.n	8016d56 <__kernel_rem_pio2f+0x49a>
 8016d26:	eef1 7a47 	vneg.f32	s15, s14
 8016d2a:	edc5 7a00 	vstr	s15, [r5]
 8016d2e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d36:	a82f      	add	r0, sp, #188	; 0xbc
 8016d38:	2101      	movs	r1, #1
 8016d3a:	428b      	cmp	r3, r1
 8016d3c:	da0e      	bge.n	8016d5c <__kernel_rem_pio2f+0x4a0>
 8016d3e:	f1bb 0f00 	cmp.w	fp, #0
 8016d42:	d001      	beq.n	8016d48 <__kernel_rem_pio2f+0x48c>
 8016d44:	eef1 7a67 	vneg.f32	s15, s15
 8016d48:	edc5 7a01 	vstr	s15, [r5, #4]
 8016d4c:	e79e      	b.n	8016c8c <__kernel_rem_pio2f+0x3d0>
 8016d4e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016bcc <__kernel_rem_pio2f+0x310>
 8016d52:	4619      	mov	r1, r3
 8016d54:	e7e2      	b.n	8016d1c <__kernel_rem_pio2f+0x460>
 8016d56:	eef0 7a47 	vmov.f32	s15, s14
 8016d5a:	e7e6      	b.n	8016d2a <__kernel_rem_pio2f+0x46e>
 8016d5c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016d60:	3101      	adds	r1, #1
 8016d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d66:	e7e8      	b.n	8016d3a <__kernel_rem_pio2f+0x47e>
 8016d68:	edd0 7a00 	vldr	s15, [r0]
 8016d6c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016d70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016d74:	3c01      	subs	r4, #1
 8016d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d7a:	ed80 7a00 	vstr	s14, [r0]
 8016d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d82:	edc0 7a01 	vstr	s15, [r0, #4]
 8016d86:	e791      	b.n	8016cac <__kernel_rem_pio2f+0x3f0>
 8016d88:	edd1 7a00 	vldr	s15, [r1]
 8016d8c:	edd1 6a01 	vldr	s13, [r1, #4]
 8016d90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016d94:	3801      	subs	r0, #1
 8016d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d9a:	ed81 7a00 	vstr	s14, [r1]
 8016d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016da2:	edc1 7a01 	vstr	s15, [r1, #4]
 8016da6:	e786      	b.n	8016cb6 <__kernel_rem_pio2f+0x3fa>
 8016da8:	aa2e      	add	r2, sp, #184	; 0xb8
 8016daa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016dae:	ed91 7a00 	vldr	s14, [r1]
 8016db2:	3b01      	subs	r3, #1
 8016db4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016db8:	e783      	b.n	8016cc2 <__kernel_rem_pio2f+0x406>
 8016dba:	eef1 6a66 	vneg.f32	s13, s13
 8016dbe:	eeb1 7a47 	vneg.f32	s14, s14
 8016dc2:	edc5 6a00 	vstr	s13, [r5]
 8016dc6:	ed85 7a01 	vstr	s14, [r5, #4]
 8016dca:	eef1 7a67 	vneg.f32	s15, s15
 8016dce:	e785      	b.n	8016cdc <__kernel_rem_pio2f+0x420>

08016dd0 <__kernel_sinf>:
 8016dd0:	ee10 3a10 	vmov	r3, s0
 8016dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016dd8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016ddc:	da04      	bge.n	8016de8 <__kernel_sinf+0x18>
 8016dde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016de2:	ee17 3a90 	vmov	r3, s15
 8016de6:	b35b      	cbz	r3, 8016e40 <__kernel_sinf+0x70>
 8016de8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016dec:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016e44 <__kernel_sinf+0x74>
 8016df0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016e48 <__kernel_sinf+0x78>
 8016df4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016df8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016e4c <__kernel_sinf+0x7c>
 8016dfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016e00:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016e50 <__kernel_sinf+0x80>
 8016e04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016e08:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016e54 <__kernel_sinf+0x84>
 8016e0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016e10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016e14:	b930      	cbnz	r0, 8016e24 <__kernel_sinf+0x54>
 8016e16:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016e58 <__kernel_sinf+0x88>
 8016e1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016e1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016e22:	4770      	bx	lr
 8016e24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016e28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016e2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016e30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016e34:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016e5c <__kernel_sinf+0x8c>
 8016e38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016e3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016e40:	4770      	bx	lr
 8016e42:	bf00      	nop
 8016e44:	2f2ec9d3 	.word	0x2f2ec9d3
 8016e48:	b2d72f34 	.word	0xb2d72f34
 8016e4c:	3638ef1b 	.word	0x3638ef1b
 8016e50:	b9500d01 	.word	0xb9500d01
 8016e54:	3c088889 	.word	0x3c088889
 8016e58:	be2aaaab 	.word	0xbe2aaaab
 8016e5c:	3e2aaaab 	.word	0x3e2aaaab

08016e60 <__kernel_tanf>:
 8016e60:	b508      	push	{r3, lr}
 8016e62:	ee10 3a10 	vmov	r3, s0
 8016e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016e6a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016e6e:	eef0 7a40 	vmov.f32	s15, s0
 8016e72:	da17      	bge.n	8016ea4 <__kernel_tanf+0x44>
 8016e74:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016e78:	ee17 1a10 	vmov	r1, s14
 8016e7c:	bb41      	cbnz	r1, 8016ed0 <__kernel_tanf+0x70>
 8016e7e:	1c43      	adds	r3, r0, #1
 8016e80:	4313      	orrs	r3, r2
 8016e82:	d108      	bne.n	8016e96 <__kernel_tanf+0x36>
 8016e84:	f000 fb4e 	bl	8017524 <fabsf>
 8016e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016e90:	eeb0 0a67 	vmov.f32	s0, s15
 8016e94:	bd08      	pop	{r3, pc}
 8016e96:	2801      	cmp	r0, #1
 8016e98:	d0fa      	beq.n	8016e90 <__kernel_tanf+0x30>
 8016e9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016e9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016ea2:	e7f5      	b.n	8016e90 <__kernel_tanf+0x30>
 8016ea4:	494d      	ldr	r1, [pc, #308]	; (8016fdc <__kernel_tanf+0x17c>)
 8016ea6:	428a      	cmp	r2, r1
 8016ea8:	db12      	blt.n	8016ed0 <__kernel_tanf+0x70>
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	bfb8      	it	lt
 8016eae:	eef1 7a40 	vneglt.f32	s15, s0
 8016eb2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016fe0 <__kernel_tanf+0x180>
 8016eb6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016eba:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016fe4 <__kernel_tanf+0x184>
 8016ebe:	bfb8      	it	lt
 8016ec0:	eef1 0a60 	vneglt.f32	s1, s1
 8016ec4:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016ec8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016ecc:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016fe8 <__kernel_tanf+0x188>
 8016ed0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016fec <__kernel_tanf+0x18c>
 8016ed4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016ff0 <__kernel_tanf+0x190>
 8016ed8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016ff4 <__kernel_tanf+0x194>
 8016edc:	493f      	ldr	r1, [pc, #252]	; (8016fdc <__kernel_tanf+0x17c>)
 8016ede:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016ee2:	428a      	cmp	r2, r1
 8016ee4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016ee8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016eec:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016ff8 <__kernel_tanf+0x198>
 8016ef0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016ef4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8016ffc <__kernel_tanf+0x19c>
 8016ef8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016efc:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017000 <__kernel_tanf+0x1a0>
 8016f00:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016f04:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8017004 <__kernel_tanf+0x1a4>
 8016f08:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016f0c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017008 <__kernel_tanf+0x1a8>
 8016f10:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016f14:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801700c <__kernel_tanf+0x1ac>
 8016f18:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016f1c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8017010 <__kernel_tanf+0x1b0>
 8016f20:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016f24:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8017014 <__kernel_tanf+0x1b4>
 8016f28:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016f2c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8017018 <__kernel_tanf+0x1b8>
 8016f30:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016f34:	eeb0 7a65 	vmov.f32	s14, s11
 8016f38:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016f3c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016f40:	eeb0 7a46 	vmov.f32	s14, s12
 8016f44:	eeb0 6a60 	vmov.f32	s12, s1
 8016f48:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016f4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801701c <__kernel_tanf+0x1bc>
 8016f50:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016f54:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016f58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016f5c:	db1d      	blt.n	8016f9a <__kernel_tanf+0x13a>
 8016f5e:	ee06 0a90 	vmov	s13, r0
 8016f62:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016f66:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016f6a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016f6e:	179b      	asrs	r3, r3, #30
 8016f70:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016f74:	f003 0302 	and.w	r3, r3, #2
 8016f78:	f1c3 0301 	rsb	r3, r3, #1
 8016f7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016f80:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016f84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016f88:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016f8c:	ee07 3a90 	vmov	s15, r3
 8016f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f94:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016f98:	e77a      	b.n	8016e90 <__kernel_tanf+0x30>
 8016f9a:	2801      	cmp	r0, #1
 8016f9c:	d01b      	beq.n	8016fd6 <__kernel_tanf+0x176>
 8016f9e:	4b20      	ldr	r3, [pc, #128]	; (8017020 <__kernel_tanf+0x1c0>)
 8016fa0:	ee17 2a10 	vmov	r2, s14
 8016fa4:	401a      	ands	r2, r3
 8016fa6:	ee06 2a10 	vmov	s12, r2
 8016faa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016fae:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016fb2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016fb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016fbe:	ee16 2a90 	vmov	r2, s13
 8016fc2:	4013      	ands	r3, r2
 8016fc4:	ee07 3a90 	vmov	s15, r3
 8016fc8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016fcc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016fd0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016fd4:	e75c      	b.n	8016e90 <__kernel_tanf+0x30>
 8016fd6:	eef0 7a47 	vmov.f32	s15, s14
 8016fda:	e759      	b.n	8016e90 <__kernel_tanf+0x30>
 8016fdc:	3f2ca140 	.word	0x3f2ca140
 8016fe0:	3f490fda 	.word	0x3f490fda
 8016fe4:	33222168 	.word	0x33222168
 8016fe8:	00000000 	.word	0x00000000
 8016fec:	b79bae5f 	.word	0xb79bae5f
 8016ff0:	38a3f445 	.word	0x38a3f445
 8016ff4:	37d95384 	.word	0x37d95384
 8016ff8:	3a1a26c8 	.word	0x3a1a26c8
 8016ffc:	3b6b6916 	.word	0x3b6b6916
 8017000:	3cb327a4 	.word	0x3cb327a4
 8017004:	3e088889 	.word	0x3e088889
 8017008:	3895c07a 	.word	0x3895c07a
 801700c:	398137b9 	.word	0x398137b9
 8017010:	3abede48 	.word	0x3abede48
 8017014:	3c11371f 	.word	0x3c11371f
 8017018:	3d5d0dd1 	.word	0x3d5d0dd1
 801701c:	3eaaaaab 	.word	0x3eaaaaab
 8017020:	fffff000 	.word	0xfffff000
 8017024:	00000000 	.word	0x00000000

08017028 <atan>:
 8017028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702c:	ec55 4b10 	vmov	r4, r5, d0
 8017030:	4bc3      	ldr	r3, [pc, #780]	; (8017340 <atan+0x318>)
 8017032:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017036:	429e      	cmp	r6, r3
 8017038:	46ab      	mov	fp, r5
 801703a:	dd18      	ble.n	801706e <atan+0x46>
 801703c:	4bc1      	ldr	r3, [pc, #772]	; (8017344 <atan+0x31c>)
 801703e:	429e      	cmp	r6, r3
 8017040:	dc01      	bgt.n	8017046 <atan+0x1e>
 8017042:	d109      	bne.n	8017058 <atan+0x30>
 8017044:	b144      	cbz	r4, 8017058 <atan+0x30>
 8017046:	4622      	mov	r2, r4
 8017048:	462b      	mov	r3, r5
 801704a:	4620      	mov	r0, r4
 801704c:	4629      	mov	r1, r5
 801704e:	f7e9 f91d 	bl	800028c <__adddf3>
 8017052:	4604      	mov	r4, r0
 8017054:	460d      	mov	r5, r1
 8017056:	e006      	b.n	8017066 <atan+0x3e>
 8017058:	f1bb 0f00 	cmp.w	fp, #0
 801705c:	f300 8131 	bgt.w	80172c2 <atan+0x29a>
 8017060:	a59b      	add	r5, pc, #620	; (adr r5, 80172d0 <atan+0x2a8>)
 8017062:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017066:	ec45 4b10 	vmov	d0, r4, r5
 801706a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801706e:	4bb6      	ldr	r3, [pc, #728]	; (8017348 <atan+0x320>)
 8017070:	429e      	cmp	r6, r3
 8017072:	dc14      	bgt.n	801709e <atan+0x76>
 8017074:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017078:	429e      	cmp	r6, r3
 801707a:	dc0d      	bgt.n	8017098 <atan+0x70>
 801707c:	a396      	add	r3, pc, #600	; (adr r3, 80172d8 <atan+0x2b0>)
 801707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017082:	ee10 0a10 	vmov	r0, s0
 8017086:	4629      	mov	r1, r5
 8017088:	f7e9 f900 	bl	800028c <__adddf3>
 801708c:	4baf      	ldr	r3, [pc, #700]	; (801734c <atan+0x324>)
 801708e:	2200      	movs	r2, #0
 8017090:	f7e9 fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8017094:	2800      	cmp	r0, #0
 8017096:	d1e6      	bne.n	8017066 <atan+0x3e>
 8017098:	f04f 3aff 	mov.w	sl, #4294967295
 801709c:	e02b      	b.n	80170f6 <atan+0xce>
 801709e:	f000 f963 	bl	8017368 <fabs>
 80170a2:	4bab      	ldr	r3, [pc, #684]	; (8017350 <atan+0x328>)
 80170a4:	429e      	cmp	r6, r3
 80170a6:	ec55 4b10 	vmov	r4, r5, d0
 80170aa:	f300 80bf 	bgt.w	801722c <atan+0x204>
 80170ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80170b2:	429e      	cmp	r6, r3
 80170b4:	f300 80a0 	bgt.w	80171f8 <atan+0x1d0>
 80170b8:	ee10 2a10 	vmov	r2, s0
 80170bc:	ee10 0a10 	vmov	r0, s0
 80170c0:	462b      	mov	r3, r5
 80170c2:	4629      	mov	r1, r5
 80170c4:	f7e9 f8e2 	bl	800028c <__adddf3>
 80170c8:	4ba0      	ldr	r3, [pc, #640]	; (801734c <atan+0x324>)
 80170ca:	2200      	movs	r2, #0
 80170cc:	f7e9 f8dc 	bl	8000288 <__aeabi_dsub>
 80170d0:	2200      	movs	r2, #0
 80170d2:	4606      	mov	r6, r0
 80170d4:	460f      	mov	r7, r1
 80170d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80170da:	4620      	mov	r0, r4
 80170dc:	4629      	mov	r1, r5
 80170de:	f7e9 f8d5 	bl	800028c <__adddf3>
 80170e2:	4602      	mov	r2, r0
 80170e4:	460b      	mov	r3, r1
 80170e6:	4630      	mov	r0, r6
 80170e8:	4639      	mov	r1, r7
 80170ea:	f7e9 fbaf 	bl	800084c <__aeabi_ddiv>
 80170ee:	f04f 0a00 	mov.w	sl, #0
 80170f2:	4604      	mov	r4, r0
 80170f4:	460d      	mov	r5, r1
 80170f6:	4622      	mov	r2, r4
 80170f8:	462b      	mov	r3, r5
 80170fa:	4620      	mov	r0, r4
 80170fc:	4629      	mov	r1, r5
 80170fe:	f7e9 fa7b 	bl	80005f8 <__aeabi_dmul>
 8017102:	4602      	mov	r2, r0
 8017104:	460b      	mov	r3, r1
 8017106:	4680      	mov	r8, r0
 8017108:	4689      	mov	r9, r1
 801710a:	f7e9 fa75 	bl	80005f8 <__aeabi_dmul>
 801710e:	a374      	add	r3, pc, #464	; (adr r3, 80172e0 <atan+0x2b8>)
 8017110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017114:	4606      	mov	r6, r0
 8017116:	460f      	mov	r7, r1
 8017118:	f7e9 fa6e 	bl	80005f8 <__aeabi_dmul>
 801711c:	a372      	add	r3, pc, #456	; (adr r3, 80172e8 <atan+0x2c0>)
 801711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017122:	f7e9 f8b3 	bl	800028c <__adddf3>
 8017126:	4632      	mov	r2, r6
 8017128:	463b      	mov	r3, r7
 801712a:	f7e9 fa65 	bl	80005f8 <__aeabi_dmul>
 801712e:	a370      	add	r3, pc, #448	; (adr r3, 80172f0 <atan+0x2c8>)
 8017130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017134:	f7e9 f8aa 	bl	800028c <__adddf3>
 8017138:	4632      	mov	r2, r6
 801713a:	463b      	mov	r3, r7
 801713c:	f7e9 fa5c 	bl	80005f8 <__aeabi_dmul>
 8017140:	a36d      	add	r3, pc, #436	; (adr r3, 80172f8 <atan+0x2d0>)
 8017142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017146:	f7e9 f8a1 	bl	800028c <__adddf3>
 801714a:	4632      	mov	r2, r6
 801714c:	463b      	mov	r3, r7
 801714e:	f7e9 fa53 	bl	80005f8 <__aeabi_dmul>
 8017152:	a36b      	add	r3, pc, #428	; (adr r3, 8017300 <atan+0x2d8>)
 8017154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017158:	f7e9 f898 	bl	800028c <__adddf3>
 801715c:	4632      	mov	r2, r6
 801715e:	463b      	mov	r3, r7
 8017160:	f7e9 fa4a 	bl	80005f8 <__aeabi_dmul>
 8017164:	a368      	add	r3, pc, #416	; (adr r3, 8017308 <atan+0x2e0>)
 8017166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801716a:	f7e9 f88f 	bl	800028c <__adddf3>
 801716e:	4642      	mov	r2, r8
 8017170:	464b      	mov	r3, r9
 8017172:	f7e9 fa41 	bl	80005f8 <__aeabi_dmul>
 8017176:	a366      	add	r3, pc, #408	; (adr r3, 8017310 <atan+0x2e8>)
 8017178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801717c:	4680      	mov	r8, r0
 801717e:	4689      	mov	r9, r1
 8017180:	4630      	mov	r0, r6
 8017182:	4639      	mov	r1, r7
 8017184:	f7e9 fa38 	bl	80005f8 <__aeabi_dmul>
 8017188:	a363      	add	r3, pc, #396	; (adr r3, 8017318 <atan+0x2f0>)
 801718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718e:	f7e9 f87b 	bl	8000288 <__aeabi_dsub>
 8017192:	4632      	mov	r2, r6
 8017194:	463b      	mov	r3, r7
 8017196:	f7e9 fa2f 	bl	80005f8 <__aeabi_dmul>
 801719a:	a361      	add	r3, pc, #388	; (adr r3, 8017320 <atan+0x2f8>)
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	f7e9 f872 	bl	8000288 <__aeabi_dsub>
 80171a4:	4632      	mov	r2, r6
 80171a6:	463b      	mov	r3, r7
 80171a8:	f7e9 fa26 	bl	80005f8 <__aeabi_dmul>
 80171ac:	a35e      	add	r3, pc, #376	; (adr r3, 8017328 <atan+0x300>)
 80171ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b2:	f7e9 f869 	bl	8000288 <__aeabi_dsub>
 80171b6:	4632      	mov	r2, r6
 80171b8:	463b      	mov	r3, r7
 80171ba:	f7e9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80171be:	a35c      	add	r3, pc, #368	; (adr r3, 8017330 <atan+0x308>)
 80171c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c4:	f7e9 f860 	bl	8000288 <__aeabi_dsub>
 80171c8:	4632      	mov	r2, r6
 80171ca:	463b      	mov	r3, r7
 80171cc:	f7e9 fa14 	bl	80005f8 <__aeabi_dmul>
 80171d0:	4602      	mov	r2, r0
 80171d2:	460b      	mov	r3, r1
 80171d4:	4640      	mov	r0, r8
 80171d6:	4649      	mov	r1, r9
 80171d8:	f7e9 f858 	bl	800028c <__adddf3>
 80171dc:	4622      	mov	r2, r4
 80171de:	462b      	mov	r3, r5
 80171e0:	f7e9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80171e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80171e8:	4602      	mov	r2, r0
 80171ea:	460b      	mov	r3, r1
 80171ec:	d14b      	bne.n	8017286 <atan+0x25e>
 80171ee:	4620      	mov	r0, r4
 80171f0:	4629      	mov	r1, r5
 80171f2:	f7e9 f849 	bl	8000288 <__aeabi_dsub>
 80171f6:	e72c      	b.n	8017052 <atan+0x2a>
 80171f8:	ee10 0a10 	vmov	r0, s0
 80171fc:	4b53      	ldr	r3, [pc, #332]	; (801734c <atan+0x324>)
 80171fe:	2200      	movs	r2, #0
 8017200:	4629      	mov	r1, r5
 8017202:	f7e9 f841 	bl	8000288 <__aeabi_dsub>
 8017206:	4b51      	ldr	r3, [pc, #324]	; (801734c <atan+0x324>)
 8017208:	4606      	mov	r6, r0
 801720a:	460f      	mov	r7, r1
 801720c:	2200      	movs	r2, #0
 801720e:	4620      	mov	r0, r4
 8017210:	4629      	mov	r1, r5
 8017212:	f7e9 f83b 	bl	800028c <__adddf3>
 8017216:	4602      	mov	r2, r0
 8017218:	460b      	mov	r3, r1
 801721a:	4630      	mov	r0, r6
 801721c:	4639      	mov	r1, r7
 801721e:	f7e9 fb15 	bl	800084c <__aeabi_ddiv>
 8017222:	f04f 0a01 	mov.w	sl, #1
 8017226:	4604      	mov	r4, r0
 8017228:	460d      	mov	r5, r1
 801722a:	e764      	b.n	80170f6 <atan+0xce>
 801722c:	4b49      	ldr	r3, [pc, #292]	; (8017354 <atan+0x32c>)
 801722e:	429e      	cmp	r6, r3
 8017230:	da1d      	bge.n	801726e <atan+0x246>
 8017232:	ee10 0a10 	vmov	r0, s0
 8017236:	4b48      	ldr	r3, [pc, #288]	; (8017358 <atan+0x330>)
 8017238:	2200      	movs	r2, #0
 801723a:	4629      	mov	r1, r5
 801723c:	f7e9 f824 	bl	8000288 <__aeabi_dsub>
 8017240:	4b45      	ldr	r3, [pc, #276]	; (8017358 <atan+0x330>)
 8017242:	4606      	mov	r6, r0
 8017244:	460f      	mov	r7, r1
 8017246:	2200      	movs	r2, #0
 8017248:	4620      	mov	r0, r4
 801724a:	4629      	mov	r1, r5
 801724c:	f7e9 f9d4 	bl	80005f8 <__aeabi_dmul>
 8017250:	4b3e      	ldr	r3, [pc, #248]	; (801734c <atan+0x324>)
 8017252:	2200      	movs	r2, #0
 8017254:	f7e9 f81a 	bl	800028c <__adddf3>
 8017258:	4602      	mov	r2, r0
 801725a:	460b      	mov	r3, r1
 801725c:	4630      	mov	r0, r6
 801725e:	4639      	mov	r1, r7
 8017260:	f7e9 faf4 	bl	800084c <__aeabi_ddiv>
 8017264:	f04f 0a02 	mov.w	sl, #2
 8017268:	4604      	mov	r4, r0
 801726a:	460d      	mov	r5, r1
 801726c:	e743      	b.n	80170f6 <atan+0xce>
 801726e:	462b      	mov	r3, r5
 8017270:	ee10 2a10 	vmov	r2, s0
 8017274:	4939      	ldr	r1, [pc, #228]	; (801735c <atan+0x334>)
 8017276:	2000      	movs	r0, #0
 8017278:	f7e9 fae8 	bl	800084c <__aeabi_ddiv>
 801727c:	f04f 0a03 	mov.w	sl, #3
 8017280:	4604      	mov	r4, r0
 8017282:	460d      	mov	r5, r1
 8017284:	e737      	b.n	80170f6 <atan+0xce>
 8017286:	4b36      	ldr	r3, [pc, #216]	; (8017360 <atan+0x338>)
 8017288:	4e36      	ldr	r6, [pc, #216]	; (8017364 <atan+0x33c>)
 801728a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801728e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8017292:	e9da 2300 	ldrd	r2, r3, [sl]
 8017296:	f7e8 fff7 	bl	8000288 <__aeabi_dsub>
 801729a:	4622      	mov	r2, r4
 801729c:	462b      	mov	r3, r5
 801729e:	f7e8 fff3 	bl	8000288 <__aeabi_dsub>
 80172a2:	4602      	mov	r2, r0
 80172a4:	460b      	mov	r3, r1
 80172a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80172aa:	f7e8 ffed 	bl	8000288 <__aeabi_dsub>
 80172ae:	f1bb 0f00 	cmp.w	fp, #0
 80172b2:	4604      	mov	r4, r0
 80172b4:	460d      	mov	r5, r1
 80172b6:	f6bf aed6 	bge.w	8017066 <atan+0x3e>
 80172ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172be:	461d      	mov	r5, r3
 80172c0:	e6d1      	b.n	8017066 <atan+0x3e>
 80172c2:	a51d      	add	r5, pc, #116	; (adr r5, 8017338 <atan+0x310>)
 80172c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80172c8:	e6cd      	b.n	8017066 <atan+0x3e>
 80172ca:	bf00      	nop
 80172cc:	f3af 8000 	nop.w
 80172d0:	54442d18 	.word	0x54442d18
 80172d4:	bff921fb 	.word	0xbff921fb
 80172d8:	8800759c 	.word	0x8800759c
 80172dc:	7e37e43c 	.word	0x7e37e43c
 80172e0:	e322da11 	.word	0xe322da11
 80172e4:	3f90ad3a 	.word	0x3f90ad3a
 80172e8:	24760deb 	.word	0x24760deb
 80172ec:	3fa97b4b 	.word	0x3fa97b4b
 80172f0:	a0d03d51 	.word	0xa0d03d51
 80172f4:	3fb10d66 	.word	0x3fb10d66
 80172f8:	c54c206e 	.word	0xc54c206e
 80172fc:	3fb745cd 	.word	0x3fb745cd
 8017300:	920083ff 	.word	0x920083ff
 8017304:	3fc24924 	.word	0x3fc24924
 8017308:	5555550d 	.word	0x5555550d
 801730c:	3fd55555 	.word	0x3fd55555
 8017310:	2c6a6c2f 	.word	0x2c6a6c2f
 8017314:	bfa2b444 	.word	0xbfa2b444
 8017318:	52defd9a 	.word	0x52defd9a
 801731c:	3fadde2d 	.word	0x3fadde2d
 8017320:	af749a6d 	.word	0xaf749a6d
 8017324:	3fb3b0f2 	.word	0x3fb3b0f2
 8017328:	fe231671 	.word	0xfe231671
 801732c:	3fbc71c6 	.word	0x3fbc71c6
 8017330:	9998ebc4 	.word	0x9998ebc4
 8017334:	3fc99999 	.word	0x3fc99999
 8017338:	54442d18 	.word	0x54442d18
 801733c:	3ff921fb 	.word	0x3ff921fb
 8017340:	440fffff 	.word	0x440fffff
 8017344:	7ff00000 	.word	0x7ff00000
 8017348:	3fdbffff 	.word	0x3fdbffff
 801734c:	3ff00000 	.word	0x3ff00000
 8017350:	3ff2ffff 	.word	0x3ff2ffff
 8017354:	40038000 	.word	0x40038000
 8017358:	3ff80000 	.word	0x3ff80000
 801735c:	bff00000 	.word	0xbff00000
 8017360:	0801abb8 	.word	0x0801abb8
 8017364:	0801ab98 	.word	0x0801ab98

08017368 <fabs>:
 8017368:	ec51 0b10 	vmov	r0, r1, d0
 801736c:	ee10 2a10 	vmov	r2, s0
 8017370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017374:	ec43 2b10 	vmov	d0, r2, r3
 8017378:	4770      	bx	lr
	...

0801737c <atanf>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	ee10 5a10 	vmov	r5, s0
 8017382:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017386:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801738a:	eef0 7a40 	vmov.f32	s15, s0
 801738e:	db10      	blt.n	80173b2 <atanf+0x36>
 8017390:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017394:	dd04      	ble.n	80173a0 <atanf+0x24>
 8017396:	ee70 7a00 	vadd.f32	s15, s0, s0
 801739a:	eeb0 0a67 	vmov.f32	s0, s15
 801739e:	bd38      	pop	{r3, r4, r5, pc}
 80173a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80174d8 <atanf+0x15c>
 80173a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80174dc <atanf+0x160>
 80173a8:	2d00      	cmp	r5, #0
 80173aa:	bfd8      	it	le
 80173ac:	eef0 7a40 	vmovle.f32	s15, s0
 80173b0:	e7f3      	b.n	801739a <atanf+0x1e>
 80173b2:	4b4b      	ldr	r3, [pc, #300]	; (80174e0 <atanf+0x164>)
 80173b4:	429c      	cmp	r4, r3
 80173b6:	dc10      	bgt.n	80173da <atanf+0x5e>
 80173b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80173bc:	da0a      	bge.n	80173d4 <atanf+0x58>
 80173be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80174e4 <atanf+0x168>
 80173c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80173c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80173ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80173ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d2:	dce2      	bgt.n	801739a <atanf+0x1e>
 80173d4:	f04f 33ff 	mov.w	r3, #4294967295
 80173d8:	e013      	b.n	8017402 <atanf+0x86>
 80173da:	f000 f8a3 	bl	8017524 <fabsf>
 80173de:	4b42      	ldr	r3, [pc, #264]	; (80174e8 <atanf+0x16c>)
 80173e0:	429c      	cmp	r4, r3
 80173e2:	dc4f      	bgt.n	8017484 <atanf+0x108>
 80173e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80173e8:	429c      	cmp	r4, r3
 80173ea:	dc41      	bgt.n	8017470 <atanf+0xf4>
 80173ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80173f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80173f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80173f8:	2300      	movs	r3, #0
 80173fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80173fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017402:	1c5a      	adds	r2, r3, #1
 8017404:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017408:	eddf 5a38 	vldr	s11, [pc, #224]	; 80174ec <atanf+0x170>
 801740c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80174f0 <atanf+0x174>
 8017410:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80174f4 <atanf+0x178>
 8017414:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80174f8 <atanf+0x17c>
 8017418:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801741c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017420:	eddf 5a36 	vldr	s11, [pc, #216]	; 80174fc <atanf+0x180>
 8017424:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017428:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017500 <atanf+0x184>
 801742c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017430:	eddf 5a34 	vldr	s11, [pc, #208]	; 8017504 <atanf+0x188>
 8017434:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017438:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017508 <atanf+0x18c>
 801743c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017440:	eddf 5a32 	vldr	s11, [pc, #200]	; 801750c <atanf+0x190>
 8017444:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017448:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8017510 <atanf+0x194>
 801744c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017450:	eddf 5a30 	vldr	s11, [pc, #192]	; 8017514 <atanf+0x198>
 8017454:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017458:	eea5 0a87 	vfma.f32	s0, s11, s14
 801745c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017460:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017464:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017468:	d121      	bne.n	80174ae <atanf+0x132>
 801746a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801746e:	e794      	b.n	801739a <atanf+0x1e>
 8017470:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017474:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017478:	ee30 0a27 	vadd.f32	s0, s0, s15
 801747c:	2301      	movs	r3, #1
 801747e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017482:	e7be      	b.n	8017402 <atanf+0x86>
 8017484:	4b24      	ldr	r3, [pc, #144]	; (8017518 <atanf+0x19c>)
 8017486:	429c      	cmp	r4, r3
 8017488:	dc0b      	bgt.n	80174a2 <atanf+0x126>
 801748a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801748e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017492:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017496:	2302      	movs	r3, #2
 8017498:	ee70 6a67 	vsub.f32	s13, s0, s15
 801749c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80174a0:	e7af      	b.n	8017402 <atanf+0x86>
 80174a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80174a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80174aa:	2303      	movs	r3, #3
 80174ac:	e7a9      	b.n	8017402 <atanf+0x86>
 80174ae:	4a1b      	ldr	r2, [pc, #108]	; (801751c <atanf+0x1a0>)
 80174b0:	491b      	ldr	r1, [pc, #108]	; (8017520 <atanf+0x1a4>)
 80174b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80174b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80174ba:	ed93 7a00 	vldr	s14, [r3]
 80174be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80174c2:	2d00      	cmp	r5, #0
 80174c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80174c8:	ed92 0a00 	vldr	s0, [r2]
 80174cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80174d0:	bfb8      	it	lt
 80174d2:	eef1 7a67 	vneglt.f32	s15, s15
 80174d6:	e760      	b.n	801739a <atanf+0x1e>
 80174d8:	3fc90fdb 	.word	0x3fc90fdb
 80174dc:	bfc90fdb 	.word	0xbfc90fdb
 80174e0:	3edfffff 	.word	0x3edfffff
 80174e4:	7149f2ca 	.word	0x7149f2ca
 80174e8:	3f97ffff 	.word	0x3f97ffff
 80174ec:	3c8569d7 	.word	0x3c8569d7
 80174f0:	3d4bda59 	.word	0x3d4bda59
 80174f4:	bd15a221 	.word	0xbd15a221
 80174f8:	be4ccccd 	.word	0xbe4ccccd
 80174fc:	3d886b35 	.word	0x3d886b35
 8017500:	3dba2e6e 	.word	0x3dba2e6e
 8017504:	3e124925 	.word	0x3e124925
 8017508:	3eaaaaab 	.word	0x3eaaaaab
 801750c:	bd6ef16b 	.word	0xbd6ef16b
 8017510:	bd9d8795 	.word	0xbd9d8795
 8017514:	bde38e38 	.word	0xbde38e38
 8017518:	401bffff 	.word	0x401bffff
 801751c:	0801abd8 	.word	0x0801abd8
 8017520:	0801abe8 	.word	0x0801abe8

08017524 <fabsf>:
 8017524:	ee10 3a10 	vmov	r3, s0
 8017528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801752c:	ee00 3a10 	vmov	s0, r3
 8017530:	4770      	bx	lr
	...

08017534 <floorf>:
 8017534:	ee10 3a10 	vmov	r3, s0
 8017538:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801753c:	3a7f      	subs	r2, #127	; 0x7f
 801753e:	2a16      	cmp	r2, #22
 8017540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017544:	dc2a      	bgt.n	801759c <floorf+0x68>
 8017546:	2a00      	cmp	r2, #0
 8017548:	da11      	bge.n	801756e <floorf+0x3a>
 801754a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80175ac <floorf+0x78>
 801754e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017552:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755a:	dd05      	ble.n	8017568 <floorf+0x34>
 801755c:	2b00      	cmp	r3, #0
 801755e:	da23      	bge.n	80175a8 <floorf+0x74>
 8017560:	4a13      	ldr	r2, [pc, #76]	; (80175b0 <floorf+0x7c>)
 8017562:	2900      	cmp	r1, #0
 8017564:	bf18      	it	ne
 8017566:	4613      	movne	r3, r2
 8017568:	ee00 3a10 	vmov	s0, r3
 801756c:	4770      	bx	lr
 801756e:	4911      	ldr	r1, [pc, #68]	; (80175b4 <floorf+0x80>)
 8017570:	4111      	asrs	r1, r2
 8017572:	420b      	tst	r3, r1
 8017574:	d0fa      	beq.n	801756c <floorf+0x38>
 8017576:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80175ac <floorf+0x78>
 801757a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801757e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017586:	ddef      	ble.n	8017568 <floorf+0x34>
 8017588:	2b00      	cmp	r3, #0
 801758a:	bfbe      	ittt	lt
 801758c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017590:	fa40 f202 	asrlt.w	r2, r0, r2
 8017594:	189b      	addlt	r3, r3, r2
 8017596:	ea23 0301 	bic.w	r3, r3, r1
 801759a:	e7e5      	b.n	8017568 <floorf+0x34>
 801759c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80175a0:	d3e4      	bcc.n	801756c <floorf+0x38>
 80175a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80175a6:	4770      	bx	lr
 80175a8:	2300      	movs	r3, #0
 80175aa:	e7dd      	b.n	8017568 <floorf+0x34>
 80175ac:	7149f2ca 	.word	0x7149f2ca
 80175b0:	bf800000 	.word	0xbf800000
 80175b4:	007fffff 	.word	0x007fffff

080175b8 <nanf>:
 80175b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80175c0 <nanf+0x8>
 80175bc:	4770      	bx	lr
 80175be:	bf00      	nop
 80175c0:	7fc00000 	.word	0x7fc00000

080175c4 <scalbnf>:
 80175c4:	ee10 3a10 	vmov	r3, s0
 80175c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80175cc:	d025      	beq.n	801761a <scalbnf+0x56>
 80175ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175d2:	d302      	bcc.n	80175da <scalbnf+0x16>
 80175d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80175d8:	4770      	bx	lr
 80175da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80175de:	d122      	bne.n	8017626 <scalbnf+0x62>
 80175e0:	4b2a      	ldr	r3, [pc, #168]	; (801768c <scalbnf+0xc8>)
 80175e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017690 <scalbnf+0xcc>
 80175e6:	4298      	cmp	r0, r3
 80175e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80175ec:	db16      	blt.n	801761c <scalbnf+0x58>
 80175ee:	ee10 3a10 	vmov	r3, s0
 80175f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80175f6:	3a19      	subs	r2, #25
 80175f8:	4402      	add	r2, r0
 80175fa:	2afe      	cmp	r2, #254	; 0xfe
 80175fc:	dd15      	ble.n	801762a <scalbnf+0x66>
 80175fe:	ee10 3a10 	vmov	r3, s0
 8017602:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017694 <scalbnf+0xd0>
 8017606:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017698 <scalbnf+0xd4>
 801760a:	2b00      	cmp	r3, #0
 801760c:	eeb0 7a67 	vmov.f32	s14, s15
 8017610:	bfb8      	it	lt
 8017612:	eef0 7a66 	vmovlt.f32	s15, s13
 8017616:	ee27 0a27 	vmul.f32	s0, s14, s15
 801761a:	4770      	bx	lr
 801761c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801769c <scalbnf+0xd8>
 8017620:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017624:	4770      	bx	lr
 8017626:	0dd2      	lsrs	r2, r2, #23
 8017628:	e7e6      	b.n	80175f8 <scalbnf+0x34>
 801762a:	2a00      	cmp	r2, #0
 801762c:	dd06      	ble.n	801763c <scalbnf+0x78>
 801762e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017632:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017636:	ee00 3a10 	vmov	s0, r3
 801763a:	4770      	bx	lr
 801763c:	f112 0f16 	cmn.w	r2, #22
 8017640:	da1a      	bge.n	8017678 <scalbnf+0xb4>
 8017642:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017646:	4298      	cmp	r0, r3
 8017648:	ee10 3a10 	vmov	r3, s0
 801764c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017650:	dd0a      	ble.n	8017668 <scalbnf+0xa4>
 8017652:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017694 <scalbnf+0xd0>
 8017656:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017698 <scalbnf+0xd4>
 801765a:	eef0 7a40 	vmov.f32	s15, s0
 801765e:	2b00      	cmp	r3, #0
 8017660:	bf18      	it	ne
 8017662:	eeb0 0a47 	vmovne.f32	s0, s14
 8017666:	e7db      	b.n	8017620 <scalbnf+0x5c>
 8017668:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801769c <scalbnf+0xd8>
 801766c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80176a0 <scalbnf+0xdc>
 8017670:	eef0 7a40 	vmov.f32	s15, s0
 8017674:	2b00      	cmp	r3, #0
 8017676:	e7f3      	b.n	8017660 <scalbnf+0x9c>
 8017678:	3219      	adds	r2, #25
 801767a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801767e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017682:	eddf 7a08 	vldr	s15, [pc, #32]	; 80176a4 <scalbnf+0xe0>
 8017686:	ee07 3a10 	vmov	s14, r3
 801768a:	e7c4      	b.n	8017616 <scalbnf+0x52>
 801768c:	ffff3cb0 	.word	0xffff3cb0
 8017690:	4c000000 	.word	0x4c000000
 8017694:	7149f2ca 	.word	0x7149f2ca
 8017698:	f149f2ca 	.word	0xf149f2ca
 801769c:	0da24260 	.word	0x0da24260
 80176a0:	8da24260 	.word	0x8da24260
 80176a4:	33000000 	.word	0x33000000

080176a8 <abort>:
 80176a8:	b508      	push	{r3, lr}
 80176aa:	2006      	movs	r0, #6
 80176ac:	f000 fdd2 	bl	8018254 <raise>
 80176b0:	2001      	movs	r0, #1
 80176b2:	f7eb f883 	bl	80027bc <_exit>
	...

080176b8 <__errno>:
 80176b8:	4b01      	ldr	r3, [pc, #4]	; (80176c0 <__errno+0x8>)
 80176ba:	6818      	ldr	r0, [r3, #0]
 80176bc:	4770      	bx	lr
 80176be:	bf00      	nop
 80176c0:	200000f0 	.word	0x200000f0

080176c4 <__libc_init_array>:
 80176c4:	b570      	push	{r4, r5, r6, lr}
 80176c6:	4d0d      	ldr	r5, [pc, #52]	; (80176fc <__libc_init_array+0x38>)
 80176c8:	4c0d      	ldr	r4, [pc, #52]	; (8017700 <__libc_init_array+0x3c>)
 80176ca:	1b64      	subs	r4, r4, r5
 80176cc:	10a4      	asrs	r4, r4, #2
 80176ce:	2600      	movs	r6, #0
 80176d0:	42a6      	cmp	r6, r4
 80176d2:	d109      	bne.n	80176e8 <__libc_init_array+0x24>
 80176d4:	4d0b      	ldr	r5, [pc, #44]	; (8017704 <__libc_init_array+0x40>)
 80176d6:	4c0c      	ldr	r4, [pc, #48]	; (8017708 <__libc_init_array+0x44>)
 80176d8:	f002 ff02 	bl	801a4e0 <_init>
 80176dc:	1b64      	subs	r4, r4, r5
 80176de:	10a4      	asrs	r4, r4, #2
 80176e0:	2600      	movs	r6, #0
 80176e2:	42a6      	cmp	r6, r4
 80176e4:	d105      	bne.n	80176f2 <__libc_init_array+0x2e>
 80176e6:	bd70      	pop	{r4, r5, r6, pc}
 80176e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80176ec:	4798      	blx	r3
 80176ee:	3601      	adds	r6, #1
 80176f0:	e7ee      	b.n	80176d0 <__libc_init_array+0xc>
 80176f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80176f6:	4798      	blx	r3
 80176f8:	3601      	adds	r6, #1
 80176fa:	e7f2      	b.n	80176e2 <__libc_init_array+0x1e>
 80176fc:	0801afe4 	.word	0x0801afe4
 8017700:	0801afe4 	.word	0x0801afe4
 8017704:	0801afe4 	.word	0x0801afe4
 8017708:	0801afe8 	.word	0x0801afe8

0801770c <malloc>:
 801770c:	4b02      	ldr	r3, [pc, #8]	; (8017718 <malloc+0xc>)
 801770e:	4601      	mov	r1, r0
 8017710:	6818      	ldr	r0, [r3, #0]
 8017712:	f000 b88b 	b.w	801782c <_malloc_r>
 8017716:	bf00      	nop
 8017718:	200000f0 	.word	0x200000f0

0801771c <free>:
 801771c:	4b02      	ldr	r3, [pc, #8]	; (8017728 <free+0xc>)
 801771e:	4601      	mov	r1, r0
 8017720:	6818      	ldr	r0, [r3, #0]
 8017722:	f000 b833 	b.w	801778c <_free_r>
 8017726:	bf00      	nop
 8017728:	200000f0 	.word	0x200000f0

0801772c <memcpy>:
 801772c:	440a      	add	r2, r1
 801772e:	4291      	cmp	r1, r2
 8017730:	f100 33ff 	add.w	r3, r0, #4294967295
 8017734:	d100      	bne.n	8017738 <memcpy+0xc>
 8017736:	4770      	bx	lr
 8017738:	b510      	push	{r4, lr}
 801773a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801773e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017742:	4291      	cmp	r1, r2
 8017744:	d1f9      	bne.n	801773a <memcpy+0xe>
 8017746:	bd10      	pop	{r4, pc}

08017748 <memmove>:
 8017748:	4288      	cmp	r0, r1
 801774a:	b510      	push	{r4, lr}
 801774c:	eb01 0402 	add.w	r4, r1, r2
 8017750:	d902      	bls.n	8017758 <memmove+0x10>
 8017752:	4284      	cmp	r4, r0
 8017754:	4623      	mov	r3, r4
 8017756:	d807      	bhi.n	8017768 <memmove+0x20>
 8017758:	1e43      	subs	r3, r0, #1
 801775a:	42a1      	cmp	r1, r4
 801775c:	d008      	beq.n	8017770 <memmove+0x28>
 801775e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017766:	e7f8      	b.n	801775a <memmove+0x12>
 8017768:	4402      	add	r2, r0
 801776a:	4601      	mov	r1, r0
 801776c:	428a      	cmp	r2, r1
 801776e:	d100      	bne.n	8017772 <memmove+0x2a>
 8017770:	bd10      	pop	{r4, pc}
 8017772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801777a:	e7f7      	b.n	801776c <memmove+0x24>

0801777c <memset>:
 801777c:	4402      	add	r2, r0
 801777e:	4603      	mov	r3, r0
 8017780:	4293      	cmp	r3, r2
 8017782:	d100      	bne.n	8017786 <memset+0xa>
 8017784:	4770      	bx	lr
 8017786:	f803 1b01 	strb.w	r1, [r3], #1
 801778a:	e7f9      	b.n	8017780 <memset+0x4>

0801778c <_free_r>:
 801778c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801778e:	2900      	cmp	r1, #0
 8017790:	d048      	beq.n	8017824 <_free_r+0x98>
 8017792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017796:	9001      	str	r0, [sp, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	f1a1 0404 	sub.w	r4, r1, #4
 801779e:	bfb8      	it	lt
 80177a0:	18e4      	addlt	r4, r4, r3
 80177a2:	f001 fd3f 	bl	8019224 <__malloc_lock>
 80177a6:	4a20      	ldr	r2, [pc, #128]	; (8017828 <_free_r+0x9c>)
 80177a8:	9801      	ldr	r0, [sp, #4]
 80177aa:	6813      	ldr	r3, [r2, #0]
 80177ac:	4615      	mov	r5, r2
 80177ae:	b933      	cbnz	r3, 80177be <_free_r+0x32>
 80177b0:	6063      	str	r3, [r4, #4]
 80177b2:	6014      	str	r4, [r2, #0]
 80177b4:	b003      	add	sp, #12
 80177b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177ba:	f001 bd39 	b.w	8019230 <__malloc_unlock>
 80177be:	42a3      	cmp	r3, r4
 80177c0:	d90b      	bls.n	80177da <_free_r+0x4e>
 80177c2:	6821      	ldr	r1, [r4, #0]
 80177c4:	1862      	adds	r2, r4, r1
 80177c6:	4293      	cmp	r3, r2
 80177c8:	bf04      	itt	eq
 80177ca:	681a      	ldreq	r2, [r3, #0]
 80177cc:	685b      	ldreq	r3, [r3, #4]
 80177ce:	6063      	str	r3, [r4, #4]
 80177d0:	bf04      	itt	eq
 80177d2:	1852      	addeq	r2, r2, r1
 80177d4:	6022      	streq	r2, [r4, #0]
 80177d6:	602c      	str	r4, [r5, #0]
 80177d8:	e7ec      	b.n	80177b4 <_free_r+0x28>
 80177da:	461a      	mov	r2, r3
 80177dc:	685b      	ldr	r3, [r3, #4]
 80177de:	b10b      	cbz	r3, 80177e4 <_free_r+0x58>
 80177e0:	42a3      	cmp	r3, r4
 80177e2:	d9fa      	bls.n	80177da <_free_r+0x4e>
 80177e4:	6811      	ldr	r1, [r2, #0]
 80177e6:	1855      	adds	r5, r2, r1
 80177e8:	42a5      	cmp	r5, r4
 80177ea:	d10b      	bne.n	8017804 <_free_r+0x78>
 80177ec:	6824      	ldr	r4, [r4, #0]
 80177ee:	4421      	add	r1, r4
 80177f0:	1854      	adds	r4, r2, r1
 80177f2:	42a3      	cmp	r3, r4
 80177f4:	6011      	str	r1, [r2, #0]
 80177f6:	d1dd      	bne.n	80177b4 <_free_r+0x28>
 80177f8:	681c      	ldr	r4, [r3, #0]
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	6053      	str	r3, [r2, #4]
 80177fe:	4421      	add	r1, r4
 8017800:	6011      	str	r1, [r2, #0]
 8017802:	e7d7      	b.n	80177b4 <_free_r+0x28>
 8017804:	d902      	bls.n	801780c <_free_r+0x80>
 8017806:	230c      	movs	r3, #12
 8017808:	6003      	str	r3, [r0, #0]
 801780a:	e7d3      	b.n	80177b4 <_free_r+0x28>
 801780c:	6825      	ldr	r5, [r4, #0]
 801780e:	1961      	adds	r1, r4, r5
 8017810:	428b      	cmp	r3, r1
 8017812:	bf04      	itt	eq
 8017814:	6819      	ldreq	r1, [r3, #0]
 8017816:	685b      	ldreq	r3, [r3, #4]
 8017818:	6063      	str	r3, [r4, #4]
 801781a:	bf04      	itt	eq
 801781c:	1949      	addeq	r1, r1, r5
 801781e:	6021      	streq	r1, [r4, #0]
 8017820:	6054      	str	r4, [r2, #4]
 8017822:	e7c7      	b.n	80177b4 <_free_r+0x28>
 8017824:	b003      	add	sp, #12
 8017826:	bd30      	pop	{r4, r5, pc}
 8017828:	200011b8 	.word	0x200011b8

0801782c <_malloc_r>:
 801782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801782e:	1ccd      	adds	r5, r1, #3
 8017830:	f025 0503 	bic.w	r5, r5, #3
 8017834:	3508      	adds	r5, #8
 8017836:	2d0c      	cmp	r5, #12
 8017838:	bf38      	it	cc
 801783a:	250c      	movcc	r5, #12
 801783c:	2d00      	cmp	r5, #0
 801783e:	4606      	mov	r6, r0
 8017840:	db01      	blt.n	8017846 <_malloc_r+0x1a>
 8017842:	42a9      	cmp	r1, r5
 8017844:	d903      	bls.n	801784e <_malloc_r+0x22>
 8017846:	230c      	movs	r3, #12
 8017848:	6033      	str	r3, [r6, #0]
 801784a:	2000      	movs	r0, #0
 801784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801784e:	f001 fce9 	bl	8019224 <__malloc_lock>
 8017852:	4921      	ldr	r1, [pc, #132]	; (80178d8 <_malloc_r+0xac>)
 8017854:	680a      	ldr	r2, [r1, #0]
 8017856:	4614      	mov	r4, r2
 8017858:	b99c      	cbnz	r4, 8017882 <_malloc_r+0x56>
 801785a:	4f20      	ldr	r7, [pc, #128]	; (80178dc <_malloc_r+0xb0>)
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	b923      	cbnz	r3, 801786a <_malloc_r+0x3e>
 8017860:	4621      	mov	r1, r4
 8017862:	4630      	mov	r0, r6
 8017864:	f000 fcbe 	bl	80181e4 <_sbrk_r>
 8017868:	6038      	str	r0, [r7, #0]
 801786a:	4629      	mov	r1, r5
 801786c:	4630      	mov	r0, r6
 801786e:	f000 fcb9 	bl	80181e4 <_sbrk_r>
 8017872:	1c43      	adds	r3, r0, #1
 8017874:	d123      	bne.n	80178be <_malloc_r+0x92>
 8017876:	230c      	movs	r3, #12
 8017878:	6033      	str	r3, [r6, #0]
 801787a:	4630      	mov	r0, r6
 801787c:	f001 fcd8 	bl	8019230 <__malloc_unlock>
 8017880:	e7e3      	b.n	801784a <_malloc_r+0x1e>
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	1b5b      	subs	r3, r3, r5
 8017886:	d417      	bmi.n	80178b8 <_malloc_r+0x8c>
 8017888:	2b0b      	cmp	r3, #11
 801788a:	d903      	bls.n	8017894 <_malloc_r+0x68>
 801788c:	6023      	str	r3, [r4, #0]
 801788e:	441c      	add	r4, r3
 8017890:	6025      	str	r5, [r4, #0]
 8017892:	e004      	b.n	801789e <_malloc_r+0x72>
 8017894:	6863      	ldr	r3, [r4, #4]
 8017896:	42a2      	cmp	r2, r4
 8017898:	bf0c      	ite	eq
 801789a:	600b      	streq	r3, [r1, #0]
 801789c:	6053      	strne	r3, [r2, #4]
 801789e:	4630      	mov	r0, r6
 80178a0:	f001 fcc6 	bl	8019230 <__malloc_unlock>
 80178a4:	f104 000b 	add.w	r0, r4, #11
 80178a8:	1d23      	adds	r3, r4, #4
 80178aa:	f020 0007 	bic.w	r0, r0, #7
 80178ae:	1ac2      	subs	r2, r0, r3
 80178b0:	d0cc      	beq.n	801784c <_malloc_r+0x20>
 80178b2:	1a1b      	subs	r3, r3, r0
 80178b4:	50a3      	str	r3, [r4, r2]
 80178b6:	e7c9      	b.n	801784c <_malloc_r+0x20>
 80178b8:	4622      	mov	r2, r4
 80178ba:	6864      	ldr	r4, [r4, #4]
 80178bc:	e7cc      	b.n	8017858 <_malloc_r+0x2c>
 80178be:	1cc4      	adds	r4, r0, #3
 80178c0:	f024 0403 	bic.w	r4, r4, #3
 80178c4:	42a0      	cmp	r0, r4
 80178c6:	d0e3      	beq.n	8017890 <_malloc_r+0x64>
 80178c8:	1a21      	subs	r1, r4, r0
 80178ca:	4630      	mov	r0, r6
 80178cc:	f000 fc8a 	bl	80181e4 <_sbrk_r>
 80178d0:	3001      	adds	r0, #1
 80178d2:	d1dd      	bne.n	8017890 <_malloc_r+0x64>
 80178d4:	e7cf      	b.n	8017876 <_malloc_r+0x4a>
 80178d6:	bf00      	nop
 80178d8:	200011b8 	.word	0x200011b8
 80178dc:	200011bc 	.word	0x200011bc

080178e0 <__cvt>:
 80178e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178e4:	ec55 4b10 	vmov	r4, r5, d0
 80178e8:	2d00      	cmp	r5, #0
 80178ea:	460e      	mov	r6, r1
 80178ec:	4619      	mov	r1, r3
 80178ee:	462b      	mov	r3, r5
 80178f0:	bfbb      	ittet	lt
 80178f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80178f6:	461d      	movlt	r5, r3
 80178f8:	2300      	movge	r3, #0
 80178fa:	232d      	movlt	r3, #45	; 0x2d
 80178fc:	700b      	strb	r3, [r1, #0]
 80178fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017900:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017904:	4691      	mov	r9, r2
 8017906:	f023 0820 	bic.w	r8, r3, #32
 801790a:	bfbc      	itt	lt
 801790c:	4622      	movlt	r2, r4
 801790e:	4614      	movlt	r4, r2
 8017910:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017914:	d005      	beq.n	8017922 <__cvt+0x42>
 8017916:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801791a:	d100      	bne.n	801791e <__cvt+0x3e>
 801791c:	3601      	adds	r6, #1
 801791e:	2102      	movs	r1, #2
 8017920:	e000      	b.n	8017924 <__cvt+0x44>
 8017922:	2103      	movs	r1, #3
 8017924:	ab03      	add	r3, sp, #12
 8017926:	9301      	str	r3, [sp, #4]
 8017928:	ab02      	add	r3, sp, #8
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	ec45 4b10 	vmov	d0, r4, r5
 8017930:	4653      	mov	r3, sl
 8017932:	4632      	mov	r2, r6
 8017934:	f000 fd8c 	bl	8018450 <_dtoa_r>
 8017938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801793c:	4607      	mov	r7, r0
 801793e:	d102      	bne.n	8017946 <__cvt+0x66>
 8017940:	f019 0f01 	tst.w	r9, #1
 8017944:	d022      	beq.n	801798c <__cvt+0xac>
 8017946:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801794a:	eb07 0906 	add.w	r9, r7, r6
 801794e:	d110      	bne.n	8017972 <__cvt+0x92>
 8017950:	783b      	ldrb	r3, [r7, #0]
 8017952:	2b30      	cmp	r3, #48	; 0x30
 8017954:	d10a      	bne.n	801796c <__cvt+0x8c>
 8017956:	2200      	movs	r2, #0
 8017958:	2300      	movs	r3, #0
 801795a:	4620      	mov	r0, r4
 801795c:	4629      	mov	r1, r5
 801795e:	f7e9 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8017962:	b918      	cbnz	r0, 801796c <__cvt+0x8c>
 8017964:	f1c6 0601 	rsb	r6, r6, #1
 8017968:	f8ca 6000 	str.w	r6, [sl]
 801796c:	f8da 3000 	ldr.w	r3, [sl]
 8017970:	4499      	add	r9, r3
 8017972:	2200      	movs	r2, #0
 8017974:	2300      	movs	r3, #0
 8017976:	4620      	mov	r0, r4
 8017978:	4629      	mov	r1, r5
 801797a:	f7e9 f8a5 	bl	8000ac8 <__aeabi_dcmpeq>
 801797e:	b108      	cbz	r0, 8017984 <__cvt+0xa4>
 8017980:	f8cd 900c 	str.w	r9, [sp, #12]
 8017984:	2230      	movs	r2, #48	; 0x30
 8017986:	9b03      	ldr	r3, [sp, #12]
 8017988:	454b      	cmp	r3, r9
 801798a:	d307      	bcc.n	801799c <__cvt+0xbc>
 801798c:	9b03      	ldr	r3, [sp, #12]
 801798e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017990:	1bdb      	subs	r3, r3, r7
 8017992:	4638      	mov	r0, r7
 8017994:	6013      	str	r3, [r2, #0]
 8017996:	b004      	add	sp, #16
 8017998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801799c:	1c59      	adds	r1, r3, #1
 801799e:	9103      	str	r1, [sp, #12]
 80179a0:	701a      	strb	r2, [r3, #0]
 80179a2:	e7f0      	b.n	8017986 <__cvt+0xa6>

080179a4 <__exponent>:
 80179a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179a6:	4603      	mov	r3, r0
 80179a8:	2900      	cmp	r1, #0
 80179aa:	bfb8      	it	lt
 80179ac:	4249      	neglt	r1, r1
 80179ae:	f803 2b02 	strb.w	r2, [r3], #2
 80179b2:	bfb4      	ite	lt
 80179b4:	222d      	movlt	r2, #45	; 0x2d
 80179b6:	222b      	movge	r2, #43	; 0x2b
 80179b8:	2909      	cmp	r1, #9
 80179ba:	7042      	strb	r2, [r0, #1]
 80179bc:	dd2a      	ble.n	8017a14 <__exponent+0x70>
 80179be:	f10d 0407 	add.w	r4, sp, #7
 80179c2:	46a4      	mov	ip, r4
 80179c4:	270a      	movs	r7, #10
 80179c6:	46a6      	mov	lr, r4
 80179c8:	460a      	mov	r2, r1
 80179ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80179ce:	fb07 1516 	mls	r5, r7, r6, r1
 80179d2:	3530      	adds	r5, #48	; 0x30
 80179d4:	2a63      	cmp	r2, #99	; 0x63
 80179d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80179da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80179de:	4631      	mov	r1, r6
 80179e0:	dcf1      	bgt.n	80179c6 <__exponent+0x22>
 80179e2:	3130      	adds	r1, #48	; 0x30
 80179e4:	f1ae 0502 	sub.w	r5, lr, #2
 80179e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80179ec:	1c44      	adds	r4, r0, #1
 80179ee:	4629      	mov	r1, r5
 80179f0:	4561      	cmp	r1, ip
 80179f2:	d30a      	bcc.n	8017a0a <__exponent+0x66>
 80179f4:	f10d 0209 	add.w	r2, sp, #9
 80179f8:	eba2 020e 	sub.w	r2, r2, lr
 80179fc:	4565      	cmp	r5, ip
 80179fe:	bf88      	it	hi
 8017a00:	2200      	movhi	r2, #0
 8017a02:	4413      	add	r3, r2
 8017a04:	1a18      	subs	r0, r3, r0
 8017a06:	b003      	add	sp, #12
 8017a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017a12:	e7ed      	b.n	80179f0 <__exponent+0x4c>
 8017a14:	2330      	movs	r3, #48	; 0x30
 8017a16:	3130      	adds	r1, #48	; 0x30
 8017a18:	7083      	strb	r3, [r0, #2]
 8017a1a:	70c1      	strb	r1, [r0, #3]
 8017a1c:	1d03      	adds	r3, r0, #4
 8017a1e:	e7f1      	b.n	8017a04 <__exponent+0x60>

08017a20 <_printf_float>:
 8017a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a24:	ed2d 8b02 	vpush	{d8}
 8017a28:	b08d      	sub	sp, #52	; 0x34
 8017a2a:	460c      	mov	r4, r1
 8017a2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017a30:	4616      	mov	r6, r2
 8017a32:	461f      	mov	r7, r3
 8017a34:	4605      	mov	r5, r0
 8017a36:	f001 fbed 	bl	8019214 <_localeconv_r>
 8017a3a:	f8d0 a000 	ldr.w	sl, [r0]
 8017a3e:	4650      	mov	r0, sl
 8017a40:	f7e8 fc16 	bl	8000270 <strlen>
 8017a44:	2300      	movs	r3, #0
 8017a46:	930a      	str	r3, [sp, #40]	; 0x28
 8017a48:	6823      	ldr	r3, [r4, #0]
 8017a4a:	9305      	str	r3, [sp, #20]
 8017a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017a54:	3307      	adds	r3, #7
 8017a56:	f023 0307 	bic.w	r3, r3, #7
 8017a5a:	f103 0208 	add.w	r2, r3, #8
 8017a5e:	f8c8 2000 	str.w	r2, [r8]
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017a6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017a6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017a72:	9307      	str	r3, [sp, #28]
 8017a74:	f8cd 8018 	str.w	r8, [sp, #24]
 8017a78:	ee08 0a10 	vmov	s16, r0
 8017a7c:	4b9f      	ldr	r3, [pc, #636]	; (8017cfc <_printf_float+0x2dc>)
 8017a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a82:	f04f 32ff 	mov.w	r2, #4294967295
 8017a86:	f7e9 f851 	bl	8000b2c <__aeabi_dcmpun>
 8017a8a:	bb88      	cbnz	r0, 8017af0 <_printf_float+0xd0>
 8017a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a90:	4b9a      	ldr	r3, [pc, #616]	; (8017cfc <_printf_float+0x2dc>)
 8017a92:	f04f 32ff 	mov.w	r2, #4294967295
 8017a96:	f7e9 f82b 	bl	8000af0 <__aeabi_dcmple>
 8017a9a:	bb48      	cbnz	r0, 8017af0 <_printf_float+0xd0>
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	4640      	mov	r0, r8
 8017aa2:	4649      	mov	r1, r9
 8017aa4:	f7e9 f81a 	bl	8000adc <__aeabi_dcmplt>
 8017aa8:	b110      	cbz	r0, 8017ab0 <_printf_float+0x90>
 8017aaa:	232d      	movs	r3, #45	; 0x2d
 8017aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ab0:	4b93      	ldr	r3, [pc, #588]	; (8017d00 <_printf_float+0x2e0>)
 8017ab2:	4894      	ldr	r0, [pc, #592]	; (8017d04 <_printf_float+0x2e4>)
 8017ab4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017ab8:	bf94      	ite	ls
 8017aba:	4698      	movls	r8, r3
 8017abc:	4680      	movhi	r8, r0
 8017abe:	2303      	movs	r3, #3
 8017ac0:	6123      	str	r3, [r4, #16]
 8017ac2:	9b05      	ldr	r3, [sp, #20]
 8017ac4:	f023 0204 	bic.w	r2, r3, #4
 8017ac8:	6022      	str	r2, [r4, #0]
 8017aca:	f04f 0900 	mov.w	r9, #0
 8017ace:	9700      	str	r7, [sp, #0]
 8017ad0:	4633      	mov	r3, r6
 8017ad2:	aa0b      	add	r2, sp, #44	; 0x2c
 8017ad4:	4621      	mov	r1, r4
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	f000 f9d8 	bl	8017e8c <_printf_common>
 8017adc:	3001      	adds	r0, #1
 8017ade:	f040 8090 	bne.w	8017c02 <_printf_float+0x1e2>
 8017ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ae6:	b00d      	add	sp, #52	; 0x34
 8017ae8:	ecbd 8b02 	vpop	{d8}
 8017aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af0:	4642      	mov	r2, r8
 8017af2:	464b      	mov	r3, r9
 8017af4:	4640      	mov	r0, r8
 8017af6:	4649      	mov	r1, r9
 8017af8:	f7e9 f818 	bl	8000b2c <__aeabi_dcmpun>
 8017afc:	b140      	cbz	r0, 8017b10 <_printf_float+0xf0>
 8017afe:	464b      	mov	r3, r9
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	bfbc      	itt	lt
 8017b04:	232d      	movlt	r3, #45	; 0x2d
 8017b06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017b0a:	487f      	ldr	r0, [pc, #508]	; (8017d08 <_printf_float+0x2e8>)
 8017b0c:	4b7f      	ldr	r3, [pc, #508]	; (8017d0c <_printf_float+0x2ec>)
 8017b0e:	e7d1      	b.n	8017ab4 <_printf_float+0x94>
 8017b10:	6863      	ldr	r3, [r4, #4]
 8017b12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017b16:	9206      	str	r2, [sp, #24]
 8017b18:	1c5a      	adds	r2, r3, #1
 8017b1a:	d13f      	bne.n	8017b9c <_printf_float+0x17c>
 8017b1c:	2306      	movs	r3, #6
 8017b1e:	6063      	str	r3, [r4, #4]
 8017b20:	9b05      	ldr	r3, [sp, #20]
 8017b22:	6861      	ldr	r1, [r4, #4]
 8017b24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017b28:	2300      	movs	r3, #0
 8017b2a:	9303      	str	r3, [sp, #12]
 8017b2c:	ab0a      	add	r3, sp, #40	; 0x28
 8017b2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017b32:	ab09      	add	r3, sp, #36	; 0x24
 8017b34:	ec49 8b10 	vmov	d0, r8, r9
 8017b38:	9300      	str	r3, [sp, #0]
 8017b3a:	6022      	str	r2, [r4, #0]
 8017b3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017b40:	4628      	mov	r0, r5
 8017b42:	f7ff fecd 	bl	80178e0 <__cvt>
 8017b46:	9b06      	ldr	r3, [sp, #24]
 8017b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b4a:	2b47      	cmp	r3, #71	; 0x47
 8017b4c:	4680      	mov	r8, r0
 8017b4e:	d108      	bne.n	8017b62 <_printf_float+0x142>
 8017b50:	1cc8      	adds	r0, r1, #3
 8017b52:	db02      	blt.n	8017b5a <_printf_float+0x13a>
 8017b54:	6863      	ldr	r3, [r4, #4]
 8017b56:	4299      	cmp	r1, r3
 8017b58:	dd41      	ble.n	8017bde <_printf_float+0x1be>
 8017b5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8017b5e:	fa5f fb8b 	uxtb.w	fp, fp
 8017b62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017b66:	d820      	bhi.n	8017baa <_printf_float+0x18a>
 8017b68:	3901      	subs	r1, #1
 8017b6a:	465a      	mov	r2, fp
 8017b6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017b70:	9109      	str	r1, [sp, #36]	; 0x24
 8017b72:	f7ff ff17 	bl	80179a4 <__exponent>
 8017b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b78:	1813      	adds	r3, r2, r0
 8017b7a:	2a01      	cmp	r2, #1
 8017b7c:	4681      	mov	r9, r0
 8017b7e:	6123      	str	r3, [r4, #16]
 8017b80:	dc02      	bgt.n	8017b88 <_printf_float+0x168>
 8017b82:	6822      	ldr	r2, [r4, #0]
 8017b84:	07d2      	lsls	r2, r2, #31
 8017b86:	d501      	bpl.n	8017b8c <_printf_float+0x16c>
 8017b88:	3301      	adds	r3, #1
 8017b8a:	6123      	str	r3, [r4, #16]
 8017b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d09c      	beq.n	8017ace <_printf_float+0xae>
 8017b94:	232d      	movs	r3, #45	; 0x2d
 8017b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b9a:	e798      	b.n	8017ace <_printf_float+0xae>
 8017b9c:	9a06      	ldr	r2, [sp, #24]
 8017b9e:	2a47      	cmp	r2, #71	; 0x47
 8017ba0:	d1be      	bne.n	8017b20 <_printf_float+0x100>
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1bc      	bne.n	8017b20 <_printf_float+0x100>
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	e7b9      	b.n	8017b1e <_printf_float+0xfe>
 8017baa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017bae:	d118      	bne.n	8017be2 <_printf_float+0x1c2>
 8017bb0:	2900      	cmp	r1, #0
 8017bb2:	6863      	ldr	r3, [r4, #4]
 8017bb4:	dd0b      	ble.n	8017bce <_printf_float+0x1ae>
 8017bb6:	6121      	str	r1, [r4, #16]
 8017bb8:	b913      	cbnz	r3, 8017bc0 <_printf_float+0x1a0>
 8017bba:	6822      	ldr	r2, [r4, #0]
 8017bbc:	07d0      	lsls	r0, r2, #31
 8017bbe:	d502      	bpl.n	8017bc6 <_printf_float+0x1a6>
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	440b      	add	r3, r1
 8017bc4:	6123      	str	r3, [r4, #16]
 8017bc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8017bc8:	f04f 0900 	mov.w	r9, #0
 8017bcc:	e7de      	b.n	8017b8c <_printf_float+0x16c>
 8017bce:	b913      	cbnz	r3, 8017bd6 <_printf_float+0x1b6>
 8017bd0:	6822      	ldr	r2, [r4, #0]
 8017bd2:	07d2      	lsls	r2, r2, #31
 8017bd4:	d501      	bpl.n	8017bda <_printf_float+0x1ba>
 8017bd6:	3302      	adds	r3, #2
 8017bd8:	e7f4      	b.n	8017bc4 <_printf_float+0x1a4>
 8017bda:	2301      	movs	r3, #1
 8017bdc:	e7f2      	b.n	8017bc4 <_printf_float+0x1a4>
 8017bde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017be4:	4299      	cmp	r1, r3
 8017be6:	db05      	blt.n	8017bf4 <_printf_float+0x1d4>
 8017be8:	6823      	ldr	r3, [r4, #0]
 8017bea:	6121      	str	r1, [r4, #16]
 8017bec:	07d8      	lsls	r0, r3, #31
 8017bee:	d5ea      	bpl.n	8017bc6 <_printf_float+0x1a6>
 8017bf0:	1c4b      	adds	r3, r1, #1
 8017bf2:	e7e7      	b.n	8017bc4 <_printf_float+0x1a4>
 8017bf4:	2900      	cmp	r1, #0
 8017bf6:	bfd4      	ite	le
 8017bf8:	f1c1 0202 	rsble	r2, r1, #2
 8017bfc:	2201      	movgt	r2, #1
 8017bfe:	4413      	add	r3, r2
 8017c00:	e7e0      	b.n	8017bc4 <_printf_float+0x1a4>
 8017c02:	6823      	ldr	r3, [r4, #0]
 8017c04:	055a      	lsls	r2, r3, #21
 8017c06:	d407      	bmi.n	8017c18 <_printf_float+0x1f8>
 8017c08:	6923      	ldr	r3, [r4, #16]
 8017c0a:	4642      	mov	r2, r8
 8017c0c:	4631      	mov	r1, r6
 8017c0e:	4628      	mov	r0, r5
 8017c10:	47b8      	blx	r7
 8017c12:	3001      	adds	r0, #1
 8017c14:	d12c      	bne.n	8017c70 <_printf_float+0x250>
 8017c16:	e764      	b.n	8017ae2 <_printf_float+0xc2>
 8017c18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017c1c:	f240 80e0 	bls.w	8017de0 <_printf_float+0x3c0>
 8017c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017c24:	2200      	movs	r2, #0
 8017c26:	2300      	movs	r3, #0
 8017c28:	f7e8 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d034      	beq.n	8017c9a <_printf_float+0x27a>
 8017c30:	4a37      	ldr	r2, [pc, #220]	; (8017d10 <_printf_float+0x2f0>)
 8017c32:	2301      	movs	r3, #1
 8017c34:	4631      	mov	r1, r6
 8017c36:	4628      	mov	r0, r5
 8017c38:	47b8      	blx	r7
 8017c3a:	3001      	adds	r0, #1
 8017c3c:	f43f af51 	beq.w	8017ae2 <_printf_float+0xc2>
 8017c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017c44:	429a      	cmp	r2, r3
 8017c46:	db02      	blt.n	8017c4e <_printf_float+0x22e>
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	07d8      	lsls	r0, r3, #31
 8017c4c:	d510      	bpl.n	8017c70 <_printf_float+0x250>
 8017c4e:	ee18 3a10 	vmov	r3, s16
 8017c52:	4652      	mov	r2, sl
 8017c54:	4631      	mov	r1, r6
 8017c56:	4628      	mov	r0, r5
 8017c58:	47b8      	blx	r7
 8017c5a:	3001      	adds	r0, #1
 8017c5c:	f43f af41 	beq.w	8017ae2 <_printf_float+0xc2>
 8017c60:	f04f 0800 	mov.w	r8, #0
 8017c64:	f104 091a 	add.w	r9, r4, #26
 8017c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c6a:	3b01      	subs	r3, #1
 8017c6c:	4543      	cmp	r3, r8
 8017c6e:	dc09      	bgt.n	8017c84 <_printf_float+0x264>
 8017c70:	6823      	ldr	r3, [r4, #0]
 8017c72:	079b      	lsls	r3, r3, #30
 8017c74:	f100 8105 	bmi.w	8017e82 <_printf_float+0x462>
 8017c78:	68e0      	ldr	r0, [r4, #12]
 8017c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c7c:	4298      	cmp	r0, r3
 8017c7e:	bfb8      	it	lt
 8017c80:	4618      	movlt	r0, r3
 8017c82:	e730      	b.n	8017ae6 <_printf_float+0xc6>
 8017c84:	2301      	movs	r3, #1
 8017c86:	464a      	mov	r2, r9
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	47b8      	blx	r7
 8017c8e:	3001      	adds	r0, #1
 8017c90:	f43f af27 	beq.w	8017ae2 <_printf_float+0xc2>
 8017c94:	f108 0801 	add.w	r8, r8, #1
 8017c98:	e7e6      	b.n	8017c68 <_printf_float+0x248>
 8017c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	dc39      	bgt.n	8017d14 <_printf_float+0x2f4>
 8017ca0:	4a1b      	ldr	r2, [pc, #108]	; (8017d10 <_printf_float+0x2f0>)
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	4631      	mov	r1, r6
 8017ca6:	4628      	mov	r0, r5
 8017ca8:	47b8      	blx	r7
 8017caa:	3001      	adds	r0, #1
 8017cac:	f43f af19 	beq.w	8017ae2 <_printf_float+0xc2>
 8017cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017cb4:	4313      	orrs	r3, r2
 8017cb6:	d102      	bne.n	8017cbe <_printf_float+0x29e>
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	07d9      	lsls	r1, r3, #31
 8017cbc:	d5d8      	bpl.n	8017c70 <_printf_float+0x250>
 8017cbe:	ee18 3a10 	vmov	r3, s16
 8017cc2:	4652      	mov	r2, sl
 8017cc4:	4631      	mov	r1, r6
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	47b8      	blx	r7
 8017cca:	3001      	adds	r0, #1
 8017ccc:	f43f af09 	beq.w	8017ae2 <_printf_float+0xc2>
 8017cd0:	f04f 0900 	mov.w	r9, #0
 8017cd4:	f104 0a1a 	add.w	sl, r4, #26
 8017cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cda:	425b      	negs	r3, r3
 8017cdc:	454b      	cmp	r3, r9
 8017cde:	dc01      	bgt.n	8017ce4 <_printf_float+0x2c4>
 8017ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ce2:	e792      	b.n	8017c0a <_printf_float+0x1ea>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	4652      	mov	r2, sl
 8017ce8:	4631      	mov	r1, r6
 8017cea:	4628      	mov	r0, r5
 8017cec:	47b8      	blx	r7
 8017cee:	3001      	adds	r0, #1
 8017cf0:	f43f aef7 	beq.w	8017ae2 <_printf_float+0xc2>
 8017cf4:	f109 0901 	add.w	r9, r9, #1
 8017cf8:	e7ee      	b.n	8017cd8 <_printf_float+0x2b8>
 8017cfa:	bf00      	nop
 8017cfc:	7fefffff 	.word	0x7fefffff
 8017d00:	0801abfc 	.word	0x0801abfc
 8017d04:	0801ac00 	.word	0x0801ac00
 8017d08:	0801ac08 	.word	0x0801ac08
 8017d0c:	0801ac04 	.word	0x0801ac04
 8017d10:	0801ac0c 	.word	0x0801ac0c
 8017d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	bfa8      	it	ge
 8017d1c:	461a      	movge	r2, r3
 8017d1e:	2a00      	cmp	r2, #0
 8017d20:	4691      	mov	r9, r2
 8017d22:	dc37      	bgt.n	8017d94 <_printf_float+0x374>
 8017d24:	f04f 0b00 	mov.w	fp, #0
 8017d28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d2c:	f104 021a 	add.w	r2, r4, #26
 8017d30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d32:	9305      	str	r3, [sp, #20]
 8017d34:	eba3 0309 	sub.w	r3, r3, r9
 8017d38:	455b      	cmp	r3, fp
 8017d3a:	dc33      	bgt.n	8017da4 <_printf_float+0x384>
 8017d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d40:	429a      	cmp	r2, r3
 8017d42:	db3b      	blt.n	8017dbc <_printf_float+0x39c>
 8017d44:	6823      	ldr	r3, [r4, #0]
 8017d46:	07da      	lsls	r2, r3, #31
 8017d48:	d438      	bmi.n	8017dbc <_printf_float+0x39c>
 8017d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d4c:	9b05      	ldr	r3, [sp, #20]
 8017d4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d50:	1ad3      	subs	r3, r2, r3
 8017d52:	eba2 0901 	sub.w	r9, r2, r1
 8017d56:	4599      	cmp	r9, r3
 8017d58:	bfa8      	it	ge
 8017d5a:	4699      	movge	r9, r3
 8017d5c:	f1b9 0f00 	cmp.w	r9, #0
 8017d60:	dc35      	bgt.n	8017dce <_printf_float+0x3ae>
 8017d62:	f04f 0800 	mov.w	r8, #0
 8017d66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017d6a:	f104 0a1a 	add.w	sl, r4, #26
 8017d6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d72:	1a9b      	subs	r3, r3, r2
 8017d74:	eba3 0309 	sub.w	r3, r3, r9
 8017d78:	4543      	cmp	r3, r8
 8017d7a:	f77f af79 	ble.w	8017c70 <_printf_float+0x250>
 8017d7e:	2301      	movs	r3, #1
 8017d80:	4652      	mov	r2, sl
 8017d82:	4631      	mov	r1, r6
 8017d84:	4628      	mov	r0, r5
 8017d86:	47b8      	blx	r7
 8017d88:	3001      	adds	r0, #1
 8017d8a:	f43f aeaa 	beq.w	8017ae2 <_printf_float+0xc2>
 8017d8e:	f108 0801 	add.w	r8, r8, #1
 8017d92:	e7ec      	b.n	8017d6e <_printf_float+0x34e>
 8017d94:	4613      	mov	r3, r2
 8017d96:	4631      	mov	r1, r6
 8017d98:	4642      	mov	r2, r8
 8017d9a:	4628      	mov	r0, r5
 8017d9c:	47b8      	blx	r7
 8017d9e:	3001      	adds	r0, #1
 8017da0:	d1c0      	bne.n	8017d24 <_printf_float+0x304>
 8017da2:	e69e      	b.n	8017ae2 <_printf_float+0xc2>
 8017da4:	2301      	movs	r3, #1
 8017da6:	4631      	mov	r1, r6
 8017da8:	4628      	mov	r0, r5
 8017daa:	9205      	str	r2, [sp, #20]
 8017dac:	47b8      	blx	r7
 8017dae:	3001      	adds	r0, #1
 8017db0:	f43f ae97 	beq.w	8017ae2 <_printf_float+0xc2>
 8017db4:	9a05      	ldr	r2, [sp, #20]
 8017db6:	f10b 0b01 	add.w	fp, fp, #1
 8017dba:	e7b9      	b.n	8017d30 <_printf_float+0x310>
 8017dbc:	ee18 3a10 	vmov	r3, s16
 8017dc0:	4652      	mov	r2, sl
 8017dc2:	4631      	mov	r1, r6
 8017dc4:	4628      	mov	r0, r5
 8017dc6:	47b8      	blx	r7
 8017dc8:	3001      	adds	r0, #1
 8017dca:	d1be      	bne.n	8017d4a <_printf_float+0x32a>
 8017dcc:	e689      	b.n	8017ae2 <_printf_float+0xc2>
 8017dce:	9a05      	ldr	r2, [sp, #20]
 8017dd0:	464b      	mov	r3, r9
 8017dd2:	4442      	add	r2, r8
 8017dd4:	4631      	mov	r1, r6
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	47b8      	blx	r7
 8017dda:	3001      	adds	r0, #1
 8017ddc:	d1c1      	bne.n	8017d62 <_printf_float+0x342>
 8017dde:	e680      	b.n	8017ae2 <_printf_float+0xc2>
 8017de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017de2:	2a01      	cmp	r2, #1
 8017de4:	dc01      	bgt.n	8017dea <_printf_float+0x3ca>
 8017de6:	07db      	lsls	r3, r3, #31
 8017de8:	d538      	bpl.n	8017e5c <_printf_float+0x43c>
 8017dea:	2301      	movs	r3, #1
 8017dec:	4642      	mov	r2, r8
 8017dee:	4631      	mov	r1, r6
 8017df0:	4628      	mov	r0, r5
 8017df2:	47b8      	blx	r7
 8017df4:	3001      	adds	r0, #1
 8017df6:	f43f ae74 	beq.w	8017ae2 <_printf_float+0xc2>
 8017dfa:	ee18 3a10 	vmov	r3, s16
 8017dfe:	4652      	mov	r2, sl
 8017e00:	4631      	mov	r1, r6
 8017e02:	4628      	mov	r0, r5
 8017e04:	47b8      	blx	r7
 8017e06:	3001      	adds	r0, #1
 8017e08:	f43f ae6b 	beq.w	8017ae2 <_printf_float+0xc2>
 8017e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e10:	2200      	movs	r2, #0
 8017e12:	2300      	movs	r3, #0
 8017e14:	f7e8 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e18:	b9d8      	cbnz	r0, 8017e52 <_printf_float+0x432>
 8017e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e1c:	f108 0201 	add.w	r2, r8, #1
 8017e20:	3b01      	subs	r3, #1
 8017e22:	4631      	mov	r1, r6
 8017e24:	4628      	mov	r0, r5
 8017e26:	47b8      	blx	r7
 8017e28:	3001      	adds	r0, #1
 8017e2a:	d10e      	bne.n	8017e4a <_printf_float+0x42a>
 8017e2c:	e659      	b.n	8017ae2 <_printf_float+0xc2>
 8017e2e:	2301      	movs	r3, #1
 8017e30:	4652      	mov	r2, sl
 8017e32:	4631      	mov	r1, r6
 8017e34:	4628      	mov	r0, r5
 8017e36:	47b8      	blx	r7
 8017e38:	3001      	adds	r0, #1
 8017e3a:	f43f ae52 	beq.w	8017ae2 <_printf_float+0xc2>
 8017e3e:	f108 0801 	add.w	r8, r8, #1
 8017e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e44:	3b01      	subs	r3, #1
 8017e46:	4543      	cmp	r3, r8
 8017e48:	dcf1      	bgt.n	8017e2e <_printf_float+0x40e>
 8017e4a:	464b      	mov	r3, r9
 8017e4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017e50:	e6dc      	b.n	8017c0c <_printf_float+0x1ec>
 8017e52:	f04f 0800 	mov.w	r8, #0
 8017e56:	f104 0a1a 	add.w	sl, r4, #26
 8017e5a:	e7f2      	b.n	8017e42 <_printf_float+0x422>
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	4642      	mov	r2, r8
 8017e60:	e7df      	b.n	8017e22 <_printf_float+0x402>
 8017e62:	2301      	movs	r3, #1
 8017e64:	464a      	mov	r2, r9
 8017e66:	4631      	mov	r1, r6
 8017e68:	4628      	mov	r0, r5
 8017e6a:	47b8      	blx	r7
 8017e6c:	3001      	adds	r0, #1
 8017e6e:	f43f ae38 	beq.w	8017ae2 <_printf_float+0xc2>
 8017e72:	f108 0801 	add.w	r8, r8, #1
 8017e76:	68e3      	ldr	r3, [r4, #12]
 8017e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e7a:	1a5b      	subs	r3, r3, r1
 8017e7c:	4543      	cmp	r3, r8
 8017e7e:	dcf0      	bgt.n	8017e62 <_printf_float+0x442>
 8017e80:	e6fa      	b.n	8017c78 <_printf_float+0x258>
 8017e82:	f04f 0800 	mov.w	r8, #0
 8017e86:	f104 0919 	add.w	r9, r4, #25
 8017e8a:	e7f4      	b.n	8017e76 <_printf_float+0x456>

08017e8c <_printf_common>:
 8017e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e90:	4616      	mov	r6, r2
 8017e92:	4699      	mov	r9, r3
 8017e94:	688a      	ldr	r2, [r1, #8]
 8017e96:	690b      	ldr	r3, [r1, #16]
 8017e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e9c:	4293      	cmp	r3, r2
 8017e9e:	bfb8      	it	lt
 8017ea0:	4613      	movlt	r3, r2
 8017ea2:	6033      	str	r3, [r6, #0]
 8017ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ea8:	4607      	mov	r7, r0
 8017eaa:	460c      	mov	r4, r1
 8017eac:	b10a      	cbz	r2, 8017eb2 <_printf_common+0x26>
 8017eae:	3301      	adds	r3, #1
 8017eb0:	6033      	str	r3, [r6, #0]
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	0699      	lsls	r1, r3, #26
 8017eb6:	bf42      	ittt	mi
 8017eb8:	6833      	ldrmi	r3, [r6, #0]
 8017eba:	3302      	addmi	r3, #2
 8017ebc:	6033      	strmi	r3, [r6, #0]
 8017ebe:	6825      	ldr	r5, [r4, #0]
 8017ec0:	f015 0506 	ands.w	r5, r5, #6
 8017ec4:	d106      	bne.n	8017ed4 <_printf_common+0x48>
 8017ec6:	f104 0a19 	add.w	sl, r4, #25
 8017eca:	68e3      	ldr	r3, [r4, #12]
 8017ecc:	6832      	ldr	r2, [r6, #0]
 8017ece:	1a9b      	subs	r3, r3, r2
 8017ed0:	42ab      	cmp	r3, r5
 8017ed2:	dc26      	bgt.n	8017f22 <_printf_common+0x96>
 8017ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ed8:	1e13      	subs	r3, r2, #0
 8017eda:	6822      	ldr	r2, [r4, #0]
 8017edc:	bf18      	it	ne
 8017ede:	2301      	movne	r3, #1
 8017ee0:	0692      	lsls	r2, r2, #26
 8017ee2:	d42b      	bmi.n	8017f3c <_printf_common+0xb0>
 8017ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ee8:	4649      	mov	r1, r9
 8017eea:	4638      	mov	r0, r7
 8017eec:	47c0      	blx	r8
 8017eee:	3001      	adds	r0, #1
 8017ef0:	d01e      	beq.n	8017f30 <_printf_common+0xa4>
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	68e5      	ldr	r5, [r4, #12]
 8017ef6:	6832      	ldr	r2, [r6, #0]
 8017ef8:	f003 0306 	and.w	r3, r3, #6
 8017efc:	2b04      	cmp	r3, #4
 8017efe:	bf08      	it	eq
 8017f00:	1aad      	subeq	r5, r5, r2
 8017f02:	68a3      	ldr	r3, [r4, #8]
 8017f04:	6922      	ldr	r2, [r4, #16]
 8017f06:	bf0c      	ite	eq
 8017f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f0c:	2500      	movne	r5, #0
 8017f0e:	4293      	cmp	r3, r2
 8017f10:	bfc4      	itt	gt
 8017f12:	1a9b      	subgt	r3, r3, r2
 8017f14:	18ed      	addgt	r5, r5, r3
 8017f16:	2600      	movs	r6, #0
 8017f18:	341a      	adds	r4, #26
 8017f1a:	42b5      	cmp	r5, r6
 8017f1c:	d11a      	bne.n	8017f54 <_printf_common+0xc8>
 8017f1e:	2000      	movs	r0, #0
 8017f20:	e008      	b.n	8017f34 <_printf_common+0xa8>
 8017f22:	2301      	movs	r3, #1
 8017f24:	4652      	mov	r2, sl
 8017f26:	4649      	mov	r1, r9
 8017f28:	4638      	mov	r0, r7
 8017f2a:	47c0      	blx	r8
 8017f2c:	3001      	adds	r0, #1
 8017f2e:	d103      	bne.n	8017f38 <_printf_common+0xac>
 8017f30:	f04f 30ff 	mov.w	r0, #4294967295
 8017f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f38:	3501      	adds	r5, #1
 8017f3a:	e7c6      	b.n	8017eca <_printf_common+0x3e>
 8017f3c:	18e1      	adds	r1, r4, r3
 8017f3e:	1c5a      	adds	r2, r3, #1
 8017f40:	2030      	movs	r0, #48	; 0x30
 8017f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f46:	4422      	add	r2, r4
 8017f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f50:	3302      	adds	r3, #2
 8017f52:	e7c7      	b.n	8017ee4 <_printf_common+0x58>
 8017f54:	2301      	movs	r3, #1
 8017f56:	4622      	mov	r2, r4
 8017f58:	4649      	mov	r1, r9
 8017f5a:	4638      	mov	r0, r7
 8017f5c:	47c0      	blx	r8
 8017f5e:	3001      	adds	r0, #1
 8017f60:	d0e6      	beq.n	8017f30 <_printf_common+0xa4>
 8017f62:	3601      	adds	r6, #1
 8017f64:	e7d9      	b.n	8017f1a <_printf_common+0x8e>
	...

08017f68 <_printf_i>:
 8017f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f6c:	460c      	mov	r4, r1
 8017f6e:	4691      	mov	r9, r2
 8017f70:	7e27      	ldrb	r7, [r4, #24]
 8017f72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017f74:	2f78      	cmp	r7, #120	; 0x78
 8017f76:	4680      	mov	r8, r0
 8017f78:	469a      	mov	sl, r3
 8017f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f7e:	d807      	bhi.n	8017f90 <_printf_i+0x28>
 8017f80:	2f62      	cmp	r7, #98	; 0x62
 8017f82:	d80a      	bhi.n	8017f9a <_printf_i+0x32>
 8017f84:	2f00      	cmp	r7, #0
 8017f86:	f000 80d8 	beq.w	801813a <_printf_i+0x1d2>
 8017f8a:	2f58      	cmp	r7, #88	; 0x58
 8017f8c:	f000 80a3 	beq.w	80180d6 <_printf_i+0x16e>
 8017f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f98:	e03a      	b.n	8018010 <_printf_i+0xa8>
 8017f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f9e:	2b15      	cmp	r3, #21
 8017fa0:	d8f6      	bhi.n	8017f90 <_printf_i+0x28>
 8017fa2:	a001      	add	r0, pc, #4	; (adr r0, 8017fa8 <_printf_i+0x40>)
 8017fa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017fa8:	08018001 	.word	0x08018001
 8017fac:	08018015 	.word	0x08018015
 8017fb0:	08017f91 	.word	0x08017f91
 8017fb4:	08017f91 	.word	0x08017f91
 8017fb8:	08017f91 	.word	0x08017f91
 8017fbc:	08017f91 	.word	0x08017f91
 8017fc0:	08018015 	.word	0x08018015
 8017fc4:	08017f91 	.word	0x08017f91
 8017fc8:	08017f91 	.word	0x08017f91
 8017fcc:	08017f91 	.word	0x08017f91
 8017fd0:	08017f91 	.word	0x08017f91
 8017fd4:	08018121 	.word	0x08018121
 8017fd8:	08018045 	.word	0x08018045
 8017fdc:	08018103 	.word	0x08018103
 8017fe0:	08017f91 	.word	0x08017f91
 8017fe4:	08017f91 	.word	0x08017f91
 8017fe8:	08018143 	.word	0x08018143
 8017fec:	08017f91 	.word	0x08017f91
 8017ff0:	08018045 	.word	0x08018045
 8017ff4:	08017f91 	.word	0x08017f91
 8017ff8:	08017f91 	.word	0x08017f91
 8017ffc:	0801810b 	.word	0x0801810b
 8018000:	680b      	ldr	r3, [r1, #0]
 8018002:	1d1a      	adds	r2, r3, #4
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	600a      	str	r2, [r1, #0]
 8018008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801800c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018010:	2301      	movs	r3, #1
 8018012:	e0a3      	b.n	801815c <_printf_i+0x1f4>
 8018014:	6825      	ldr	r5, [r4, #0]
 8018016:	6808      	ldr	r0, [r1, #0]
 8018018:	062e      	lsls	r6, r5, #24
 801801a:	f100 0304 	add.w	r3, r0, #4
 801801e:	d50a      	bpl.n	8018036 <_printf_i+0xce>
 8018020:	6805      	ldr	r5, [r0, #0]
 8018022:	600b      	str	r3, [r1, #0]
 8018024:	2d00      	cmp	r5, #0
 8018026:	da03      	bge.n	8018030 <_printf_i+0xc8>
 8018028:	232d      	movs	r3, #45	; 0x2d
 801802a:	426d      	negs	r5, r5
 801802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018030:	485e      	ldr	r0, [pc, #376]	; (80181ac <_printf_i+0x244>)
 8018032:	230a      	movs	r3, #10
 8018034:	e019      	b.n	801806a <_printf_i+0x102>
 8018036:	f015 0f40 	tst.w	r5, #64	; 0x40
 801803a:	6805      	ldr	r5, [r0, #0]
 801803c:	600b      	str	r3, [r1, #0]
 801803e:	bf18      	it	ne
 8018040:	b22d      	sxthne	r5, r5
 8018042:	e7ef      	b.n	8018024 <_printf_i+0xbc>
 8018044:	680b      	ldr	r3, [r1, #0]
 8018046:	6825      	ldr	r5, [r4, #0]
 8018048:	1d18      	adds	r0, r3, #4
 801804a:	6008      	str	r0, [r1, #0]
 801804c:	0628      	lsls	r0, r5, #24
 801804e:	d501      	bpl.n	8018054 <_printf_i+0xec>
 8018050:	681d      	ldr	r5, [r3, #0]
 8018052:	e002      	b.n	801805a <_printf_i+0xf2>
 8018054:	0669      	lsls	r1, r5, #25
 8018056:	d5fb      	bpl.n	8018050 <_printf_i+0xe8>
 8018058:	881d      	ldrh	r5, [r3, #0]
 801805a:	4854      	ldr	r0, [pc, #336]	; (80181ac <_printf_i+0x244>)
 801805c:	2f6f      	cmp	r7, #111	; 0x6f
 801805e:	bf0c      	ite	eq
 8018060:	2308      	moveq	r3, #8
 8018062:	230a      	movne	r3, #10
 8018064:	2100      	movs	r1, #0
 8018066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801806a:	6866      	ldr	r6, [r4, #4]
 801806c:	60a6      	str	r6, [r4, #8]
 801806e:	2e00      	cmp	r6, #0
 8018070:	bfa2      	ittt	ge
 8018072:	6821      	ldrge	r1, [r4, #0]
 8018074:	f021 0104 	bicge.w	r1, r1, #4
 8018078:	6021      	strge	r1, [r4, #0]
 801807a:	b90d      	cbnz	r5, 8018080 <_printf_i+0x118>
 801807c:	2e00      	cmp	r6, #0
 801807e:	d04d      	beq.n	801811c <_printf_i+0x1b4>
 8018080:	4616      	mov	r6, r2
 8018082:	fbb5 f1f3 	udiv	r1, r5, r3
 8018086:	fb03 5711 	mls	r7, r3, r1, r5
 801808a:	5dc7      	ldrb	r7, [r0, r7]
 801808c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018090:	462f      	mov	r7, r5
 8018092:	42bb      	cmp	r3, r7
 8018094:	460d      	mov	r5, r1
 8018096:	d9f4      	bls.n	8018082 <_printf_i+0x11a>
 8018098:	2b08      	cmp	r3, #8
 801809a:	d10b      	bne.n	80180b4 <_printf_i+0x14c>
 801809c:	6823      	ldr	r3, [r4, #0]
 801809e:	07df      	lsls	r7, r3, #31
 80180a0:	d508      	bpl.n	80180b4 <_printf_i+0x14c>
 80180a2:	6923      	ldr	r3, [r4, #16]
 80180a4:	6861      	ldr	r1, [r4, #4]
 80180a6:	4299      	cmp	r1, r3
 80180a8:	bfde      	ittt	le
 80180aa:	2330      	movle	r3, #48	; 0x30
 80180ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80180b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80180b4:	1b92      	subs	r2, r2, r6
 80180b6:	6122      	str	r2, [r4, #16]
 80180b8:	f8cd a000 	str.w	sl, [sp]
 80180bc:	464b      	mov	r3, r9
 80180be:	aa03      	add	r2, sp, #12
 80180c0:	4621      	mov	r1, r4
 80180c2:	4640      	mov	r0, r8
 80180c4:	f7ff fee2 	bl	8017e8c <_printf_common>
 80180c8:	3001      	adds	r0, #1
 80180ca:	d14c      	bne.n	8018166 <_printf_i+0x1fe>
 80180cc:	f04f 30ff 	mov.w	r0, #4294967295
 80180d0:	b004      	add	sp, #16
 80180d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180d6:	4835      	ldr	r0, [pc, #212]	; (80181ac <_printf_i+0x244>)
 80180d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	680e      	ldr	r6, [r1, #0]
 80180e0:	061f      	lsls	r7, r3, #24
 80180e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80180e6:	600e      	str	r6, [r1, #0]
 80180e8:	d514      	bpl.n	8018114 <_printf_i+0x1ac>
 80180ea:	07d9      	lsls	r1, r3, #31
 80180ec:	bf44      	itt	mi
 80180ee:	f043 0320 	orrmi.w	r3, r3, #32
 80180f2:	6023      	strmi	r3, [r4, #0]
 80180f4:	b91d      	cbnz	r5, 80180fe <_printf_i+0x196>
 80180f6:	6823      	ldr	r3, [r4, #0]
 80180f8:	f023 0320 	bic.w	r3, r3, #32
 80180fc:	6023      	str	r3, [r4, #0]
 80180fe:	2310      	movs	r3, #16
 8018100:	e7b0      	b.n	8018064 <_printf_i+0xfc>
 8018102:	6823      	ldr	r3, [r4, #0]
 8018104:	f043 0320 	orr.w	r3, r3, #32
 8018108:	6023      	str	r3, [r4, #0]
 801810a:	2378      	movs	r3, #120	; 0x78
 801810c:	4828      	ldr	r0, [pc, #160]	; (80181b0 <_printf_i+0x248>)
 801810e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018112:	e7e3      	b.n	80180dc <_printf_i+0x174>
 8018114:	065e      	lsls	r6, r3, #25
 8018116:	bf48      	it	mi
 8018118:	b2ad      	uxthmi	r5, r5
 801811a:	e7e6      	b.n	80180ea <_printf_i+0x182>
 801811c:	4616      	mov	r6, r2
 801811e:	e7bb      	b.n	8018098 <_printf_i+0x130>
 8018120:	680b      	ldr	r3, [r1, #0]
 8018122:	6826      	ldr	r6, [r4, #0]
 8018124:	6960      	ldr	r0, [r4, #20]
 8018126:	1d1d      	adds	r5, r3, #4
 8018128:	600d      	str	r5, [r1, #0]
 801812a:	0635      	lsls	r5, r6, #24
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	d501      	bpl.n	8018134 <_printf_i+0x1cc>
 8018130:	6018      	str	r0, [r3, #0]
 8018132:	e002      	b.n	801813a <_printf_i+0x1d2>
 8018134:	0671      	lsls	r1, r6, #25
 8018136:	d5fb      	bpl.n	8018130 <_printf_i+0x1c8>
 8018138:	8018      	strh	r0, [r3, #0]
 801813a:	2300      	movs	r3, #0
 801813c:	6123      	str	r3, [r4, #16]
 801813e:	4616      	mov	r6, r2
 8018140:	e7ba      	b.n	80180b8 <_printf_i+0x150>
 8018142:	680b      	ldr	r3, [r1, #0]
 8018144:	1d1a      	adds	r2, r3, #4
 8018146:	600a      	str	r2, [r1, #0]
 8018148:	681e      	ldr	r6, [r3, #0]
 801814a:	6862      	ldr	r2, [r4, #4]
 801814c:	2100      	movs	r1, #0
 801814e:	4630      	mov	r0, r6
 8018150:	f7e8 f83e 	bl	80001d0 <memchr>
 8018154:	b108      	cbz	r0, 801815a <_printf_i+0x1f2>
 8018156:	1b80      	subs	r0, r0, r6
 8018158:	6060      	str	r0, [r4, #4]
 801815a:	6863      	ldr	r3, [r4, #4]
 801815c:	6123      	str	r3, [r4, #16]
 801815e:	2300      	movs	r3, #0
 8018160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018164:	e7a8      	b.n	80180b8 <_printf_i+0x150>
 8018166:	6923      	ldr	r3, [r4, #16]
 8018168:	4632      	mov	r2, r6
 801816a:	4649      	mov	r1, r9
 801816c:	4640      	mov	r0, r8
 801816e:	47d0      	blx	sl
 8018170:	3001      	adds	r0, #1
 8018172:	d0ab      	beq.n	80180cc <_printf_i+0x164>
 8018174:	6823      	ldr	r3, [r4, #0]
 8018176:	079b      	lsls	r3, r3, #30
 8018178:	d413      	bmi.n	80181a2 <_printf_i+0x23a>
 801817a:	68e0      	ldr	r0, [r4, #12]
 801817c:	9b03      	ldr	r3, [sp, #12]
 801817e:	4298      	cmp	r0, r3
 8018180:	bfb8      	it	lt
 8018182:	4618      	movlt	r0, r3
 8018184:	e7a4      	b.n	80180d0 <_printf_i+0x168>
 8018186:	2301      	movs	r3, #1
 8018188:	4632      	mov	r2, r6
 801818a:	4649      	mov	r1, r9
 801818c:	4640      	mov	r0, r8
 801818e:	47d0      	blx	sl
 8018190:	3001      	adds	r0, #1
 8018192:	d09b      	beq.n	80180cc <_printf_i+0x164>
 8018194:	3501      	adds	r5, #1
 8018196:	68e3      	ldr	r3, [r4, #12]
 8018198:	9903      	ldr	r1, [sp, #12]
 801819a:	1a5b      	subs	r3, r3, r1
 801819c:	42ab      	cmp	r3, r5
 801819e:	dcf2      	bgt.n	8018186 <_printf_i+0x21e>
 80181a0:	e7eb      	b.n	801817a <_printf_i+0x212>
 80181a2:	2500      	movs	r5, #0
 80181a4:	f104 0619 	add.w	r6, r4, #25
 80181a8:	e7f5      	b.n	8018196 <_printf_i+0x22e>
 80181aa:	bf00      	nop
 80181ac:	0801ac0e 	.word	0x0801ac0e
 80181b0:	0801ac1f 	.word	0x0801ac1f

080181b4 <iprintf>:
 80181b4:	b40f      	push	{r0, r1, r2, r3}
 80181b6:	4b0a      	ldr	r3, [pc, #40]	; (80181e0 <iprintf+0x2c>)
 80181b8:	b513      	push	{r0, r1, r4, lr}
 80181ba:	681c      	ldr	r4, [r3, #0]
 80181bc:	b124      	cbz	r4, 80181c8 <iprintf+0x14>
 80181be:	69a3      	ldr	r3, [r4, #24]
 80181c0:	b913      	cbnz	r3, 80181c8 <iprintf+0x14>
 80181c2:	4620      	mov	r0, r4
 80181c4:	f000 ff88 	bl	80190d8 <__sinit>
 80181c8:	ab05      	add	r3, sp, #20
 80181ca:	9a04      	ldr	r2, [sp, #16]
 80181cc:	68a1      	ldr	r1, [r4, #8]
 80181ce:	9301      	str	r3, [sp, #4]
 80181d0:	4620      	mov	r0, r4
 80181d2:	f001 fd45 	bl	8019c60 <_vfiprintf_r>
 80181d6:	b002      	add	sp, #8
 80181d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181dc:	b004      	add	sp, #16
 80181de:	4770      	bx	lr
 80181e0:	200000f0 	.word	0x200000f0

080181e4 <_sbrk_r>:
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	4d06      	ldr	r5, [pc, #24]	; (8018200 <_sbrk_r+0x1c>)
 80181e8:	2300      	movs	r3, #0
 80181ea:	4604      	mov	r4, r0
 80181ec:	4608      	mov	r0, r1
 80181ee:	602b      	str	r3, [r5, #0]
 80181f0:	f7ea fb5c 	bl	80028ac <_sbrk>
 80181f4:	1c43      	adds	r3, r0, #1
 80181f6:	d102      	bne.n	80181fe <_sbrk_r+0x1a>
 80181f8:	682b      	ldr	r3, [r5, #0]
 80181fa:	b103      	cbz	r3, 80181fe <_sbrk_r+0x1a>
 80181fc:	6023      	str	r3, [r4, #0]
 80181fe:	bd38      	pop	{r3, r4, r5, pc}
 8018200:	20001a04 	.word	0x20001a04

08018204 <_raise_r>:
 8018204:	291f      	cmp	r1, #31
 8018206:	b538      	push	{r3, r4, r5, lr}
 8018208:	4604      	mov	r4, r0
 801820a:	460d      	mov	r5, r1
 801820c:	d904      	bls.n	8018218 <_raise_r+0x14>
 801820e:	2316      	movs	r3, #22
 8018210:	6003      	str	r3, [r0, #0]
 8018212:	f04f 30ff 	mov.w	r0, #4294967295
 8018216:	bd38      	pop	{r3, r4, r5, pc}
 8018218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801821a:	b112      	cbz	r2, 8018222 <_raise_r+0x1e>
 801821c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018220:	b94b      	cbnz	r3, 8018236 <_raise_r+0x32>
 8018222:	4620      	mov	r0, r4
 8018224:	f000 f830 	bl	8018288 <_getpid_r>
 8018228:	462a      	mov	r2, r5
 801822a:	4601      	mov	r1, r0
 801822c:	4620      	mov	r0, r4
 801822e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018232:	f000 b817 	b.w	8018264 <_kill_r>
 8018236:	2b01      	cmp	r3, #1
 8018238:	d00a      	beq.n	8018250 <_raise_r+0x4c>
 801823a:	1c59      	adds	r1, r3, #1
 801823c:	d103      	bne.n	8018246 <_raise_r+0x42>
 801823e:	2316      	movs	r3, #22
 8018240:	6003      	str	r3, [r0, #0]
 8018242:	2001      	movs	r0, #1
 8018244:	e7e7      	b.n	8018216 <_raise_r+0x12>
 8018246:	2400      	movs	r4, #0
 8018248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801824c:	4628      	mov	r0, r5
 801824e:	4798      	blx	r3
 8018250:	2000      	movs	r0, #0
 8018252:	e7e0      	b.n	8018216 <_raise_r+0x12>

08018254 <raise>:
 8018254:	4b02      	ldr	r3, [pc, #8]	; (8018260 <raise+0xc>)
 8018256:	4601      	mov	r1, r0
 8018258:	6818      	ldr	r0, [r3, #0]
 801825a:	f7ff bfd3 	b.w	8018204 <_raise_r>
 801825e:	bf00      	nop
 8018260:	200000f0 	.word	0x200000f0

08018264 <_kill_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4d07      	ldr	r5, [pc, #28]	; (8018284 <_kill_r+0x20>)
 8018268:	2300      	movs	r3, #0
 801826a:	4604      	mov	r4, r0
 801826c:	4608      	mov	r0, r1
 801826e:	4611      	mov	r1, r2
 8018270:	602b      	str	r3, [r5, #0]
 8018272:	f7ea fa93 	bl	800279c <_kill>
 8018276:	1c43      	adds	r3, r0, #1
 8018278:	d102      	bne.n	8018280 <_kill_r+0x1c>
 801827a:	682b      	ldr	r3, [r5, #0]
 801827c:	b103      	cbz	r3, 8018280 <_kill_r+0x1c>
 801827e:	6023      	str	r3, [r4, #0]
 8018280:	bd38      	pop	{r3, r4, r5, pc}
 8018282:	bf00      	nop
 8018284:	20001a04 	.word	0x20001a04

08018288 <_getpid_r>:
 8018288:	f7ea ba80 	b.w	800278c <_getpid>

0801828c <sniprintf>:
 801828c:	b40c      	push	{r2, r3}
 801828e:	b530      	push	{r4, r5, lr}
 8018290:	4b17      	ldr	r3, [pc, #92]	; (80182f0 <sniprintf+0x64>)
 8018292:	1e0c      	subs	r4, r1, #0
 8018294:	681d      	ldr	r5, [r3, #0]
 8018296:	b09d      	sub	sp, #116	; 0x74
 8018298:	da08      	bge.n	80182ac <sniprintf+0x20>
 801829a:	238b      	movs	r3, #139	; 0x8b
 801829c:	602b      	str	r3, [r5, #0]
 801829e:	f04f 30ff 	mov.w	r0, #4294967295
 80182a2:	b01d      	add	sp, #116	; 0x74
 80182a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182a8:	b002      	add	sp, #8
 80182aa:	4770      	bx	lr
 80182ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80182b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80182b4:	bf14      	ite	ne
 80182b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80182ba:	4623      	moveq	r3, r4
 80182bc:	9304      	str	r3, [sp, #16]
 80182be:	9307      	str	r3, [sp, #28]
 80182c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182c4:	9002      	str	r0, [sp, #8]
 80182c6:	9006      	str	r0, [sp, #24]
 80182c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80182ce:	ab21      	add	r3, sp, #132	; 0x84
 80182d0:	a902      	add	r1, sp, #8
 80182d2:	4628      	mov	r0, r5
 80182d4:	9301      	str	r3, [sp, #4]
 80182d6:	f001 fb99 	bl	8019a0c <_svfiprintf_r>
 80182da:	1c43      	adds	r3, r0, #1
 80182dc:	bfbc      	itt	lt
 80182de:	238b      	movlt	r3, #139	; 0x8b
 80182e0:	602b      	strlt	r3, [r5, #0]
 80182e2:	2c00      	cmp	r4, #0
 80182e4:	d0dd      	beq.n	80182a2 <sniprintf+0x16>
 80182e6:	9b02      	ldr	r3, [sp, #8]
 80182e8:	2200      	movs	r2, #0
 80182ea:	701a      	strb	r2, [r3, #0]
 80182ec:	e7d9      	b.n	80182a2 <sniprintf+0x16>
 80182ee:	bf00      	nop
 80182f0:	200000f0 	.word	0x200000f0

080182f4 <siprintf>:
 80182f4:	b40e      	push	{r1, r2, r3}
 80182f6:	b500      	push	{lr}
 80182f8:	b09c      	sub	sp, #112	; 0x70
 80182fa:	ab1d      	add	r3, sp, #116	; 0x74
 80182fc:	9002      	str	r0, [sp, #8]
 80182fe:	9006      	str	r0, [sp, #24]
 8018300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018304:	4809      	ldr	r0, [pc, #36]	; (801832c <siprintf+0x38>)
 8018306:	9107      	str	r1, [sp, #28]
 8018308:	9104      	str	r1, [sp, #16]
 801830a:	4909      	ldr	r1, [pc, #36]	; (8018330 <siprintf+0x3c>)
 801830c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018310:	9105      	str	r1, [sp, #20]
 8018312:	6800      	ldr	r0, [r0, #0]
 8018314:	9301      	str	r3, [sp, #4]
 8018316:	a902      	add	r1, sp, #8
 8018318:	f001 fb78 	bl	8019a0c <_svfiprintf_r>
 801831c:	9b02      	ldr	r3, [sp, #8]
 801831e:	2200      	movs	r2, #0
 8018320:	701a      	strb	r2, [r3, #0]
 8018322:	b01c      	add	sp, #112	; 0x70
 8018324:	f85d eb04 	ldr.w	lr, [sp], #4
 8018328:	b003      	add	sp, #12
 801832a:	4770      	bx	lr
 801832c:	200000f0 	.word	0x200000f0
 8018330:	ffff0208 	.word	0xffff0208

08018334 <quorem>:
 8018334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018338:	6903      	ldr	r3, [r0, #16]
 801833a:	690c      	ldr	r4, [r1, #16]
 801833c:	42a3      	cmp	r3, r4
 801833e:	4607      	mov	r7, r0
 8018340:	f2c0 8081 	blt.w	8018446 <quorem+0x112>
 8018344:	3c01      	subs	r4, #1
 8018346:	f101 0814 	add.w	r8, r1, #20
 801834a:	f100 0514 	add.w	r5, r0, #20
 801834e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018352:	9301      	str	r3, [sp, #4]
 8018354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801835c:	3301      	adds	r3, #1
 801835e:	429a      	cmp	r2, r3
 8018360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018368:	fbb2 f6f3 	udiv	r6, r2, r3
 801836c:	d331      	bcc.n	80183d2 <quorem+0x9e>
 801836e:	f04f 0e00 	mov.w	lr, #0
 8018372:	4640      	mov	r0, r8
 8018374:	46ac      	mov	ip, r5
 8018376:	46f2      	mov	sl, lr
 8018378:	f850 2b04 	ldr.w	r2, [r0], #4
 801837c:	b293      	uxth	r3, r2
 801837e:	fb06 e303 	mla	r3, r6, r3, lr
 8018382:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018386:	b29b      	uxth	r3, r3
 8018388:	ebaa 0303 	sub.w	r3, sl, r3
 801838c:	0c12      	lsrs	r2, r2, #16
 801838e:	f8dc a000 	ldr.w	sl, [ip]
 8018392:	fb06 e202 	mla	r2, r6, r2, lr
 8018396:	fa13 f38a 	uxtah	r3, r3, sl
 801839a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801839e:	fa1f fa82 	uxth.w	sl, r2
 80183a2:	f8dc 2000 	ldr.w	r2, [ip]
 80183a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80183aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80183ae:	b29b      	uxth	r3, r3
 80183b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80183b4:	4581      	cmp	r9, r0
 80183b6:	f84c 3b04 	str.w	r3, [ip], #4
 80183ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80183be:	d2db      	bcs.n	8018378 <quorem+0x44>
 80183c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80183c4:	b92b      	cbnz	r3, 80183d2 <quorem+0x9e>
 80183c6:	9b01      	ldr	r3, [sp, #4]
 80183c8:	3b04      	subs	r3, #4
 80183ca:	429d      	cmp	r5, r3
 80183cc:	461a      	mov	r2, r3
 80183ce:	d32e      	bcc.n	801842e <quorem+0xfa>
 80183d0:	613c      	str	r4, [r7, #16]
 80183d2:	4638      	mov	r0, r7
 80183d4:	f001 f9b0 	bl	8019738 <__mcmp>
 80183d8:	2800      	cmp	r0, #0
 80183da:	db24      	blt.n	8018426 <quorem+0xf2>
 80183dc:	3601      	adds	r6, #1
 80183de:	4628      	mov	r0, r5
 80183e0:	f04f 0c00 	mov.w	ip, #0
 80183e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80183e8:	f8d0 e000 	ldr.w	lr, [r0]
 80183ec:	b293      	uxth	r3, r2
 80183ee:	ebac 0303 	sub.w	r3, ip, r3
 80183f2:	0c12      	lsrs	r2, r2, #16
 80183f4:	fa13 f38e 	uxtah	r3, r3, lr
 80183f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80183fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018400:	b29b      	uxth	r3, r3
 8018402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018406:	45c1      	cmp	r9, r8
 8018408:	f840 3b04 	str.w	r3, [r0], #4
 801840c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018410:	d2e8      	bcs.n	80183e4 <quorem+0xb0>
 8018412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801841a:	b922      	cbnz	r2, 8018426 <quorem+0xf2>
 801841c:	3b04      	subs	r3, #4
 801841e:	429d      	cmp	r5, r3
 8018420:	461a      	mov	r2, r3
 8018422:	d30a      	bcc.n	801843a <quorem+0x106>
 8018424:	613c      	str	r4, [r7, #16]
 8018426:	4630      	mov	r0, r6
 8018428:	b003      	add	sp, #12
 801842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801842e:	6812      	ldr	r2, [r2, #0]
 8018430:	3b04      	subs	r3, #4
 8018432:	2a00      	cmp	r2, #0
 8018434:	d1cc      	bne.n	80183d0 <quorem+0x9c>
 8018436:	3c01      	subs	r4, #1
 8018438:	e7c7      	b.n	80183ca <quorem+0x96>
 801843a:	6812      	ldr	r2, [r2, #0]
 801843c:	3b04      	subs	r3, #4
 801843e:	2a00      	cmp	r2, #0
 8018440:	d1f0      	bne.n	8018424 <quorem+0xf0>
 8018442:	3c01      	subs	r4, #1
 8018444:	e7eb      	b.n	801841e <quorem+0xea>
 8018446:	2000      	movs	r0, #0
 8018448:	e7ee      	b.n	8018428 <quorem+0xf4>
 801844a:	0000      	movs	r0, r0
 801844c:	0000      	movs	r0, r0
	...

08018450 <_dtoa_r>:
 8018450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018454:	ed2d 8b02 	vpush	{d8}
 8018458:	ec57 6b10 	vmov	r6, r7, d0
 801845c:	b095      	sub	sp, #84	; 0x54
 801845e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018464:	9105      	str	r1, [sp, #20]
 8018466:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801846a:	4604      	mov	r4, r0
 801846c:	9209      	str	r2, [sp, #36]	; 0x24
 801846e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018470:	b975      	cbnz	r5, 8018490 <_dtoa_r+0x40>
 8018472:	2010      	movs	r0, #16
 8018474:	f7ff f94a 	bl	801770c <malloc>
 8018478:	4602      	mov	r2, r0
 801847a:	6260      	str	r0, [r4, #36]	; 0x24
 801847c:	b920      	cbnz	r0, 8018488 <_dtoa_r+0x38>
 801847e:	4bb2      	ldr	r3, [pc, #712]	; (8018748 <_dtoa_r+0x2f8>)
 8018480:	21ea      	movs	r1, #234	; 0xea
 8018482:	48b2      	ldr	r0, [pc, #712]	; (801874c <_dtoa_r+0x2fc>)
 8018484:	f001 fe32 	bl	801a0ec <__assert_func>
 8018488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801848c:	6005      	str	r5, [r0, #0]
 801848e:	60c5      	str	r5, [r0, #12]
 8018490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018492:	6819      	ldr	r1, [r3, #0]
 8018494:	b151      	cbz	r1, 80184ac <_dtoa_r+0x5c>
 8018496:	685a      	ldr	r2, [r3, #4]
 8018498:	604a      	str	r2, [r1, #4]
 801849a:	2301      	movs	r3, #1
 801849c:	4093      	lsls	r3, r2
 801849e:	608b      	str	r3, [r1, #8]
 80184a0:	4620      	mov	r0, r4
 80184a2:	f000 ff0b 	bl	80192bc <_Bfree>
 80184a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184a8:	2200      	movs	r2, #0
 80184aa:	601a      	str	r2, [r3, #0]
 80184ac:	1e3b      	subs	r3, r7, #0
 80184ae:	bfb9      	ittee	lt
 80184b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80184b4:	9303      	strlt	r3, [sp, #12]
 80184b6:	2300      	movge	r3, #0
 80184b8:	f8c8 3000 	strge.w	r3, [r8]
 80184bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80184c0:	4ba3      	ldr	r3, [pc, #652]	; (8018750 <_dtoa_r+0x300>)
 80184c2:	bfbc      	itt	lt
 80184c4:	2201      	movlt	r2, #1
 80184c6:	f8c8 2000 	strlt.w	r2, [r8]
 80184ca:	ea33 0309 	bics.w	r3, r3, r9
 80184ce:	d11b      	bne.n	8018508 <_dtoa_r+0xb8>
 80184d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80184d6:	6013      	str	r3, [r2, #0]
 80184d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80184dc:	4333      	orrs	r3, r6
 80184de:	f000 857a 	beq.w	8018fd6 <_dtoa_r+0xb86>
 80184e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184e4:	b963      	cbnz	r3, 8018500 <_dtoa_r+0xb0>
 80184e6:	4b9b      	ldr	r3, [pc, #620]	; (8018754 <_dtoa_r+0x304>)
 80184e8:	e024      	b.n	8018534 <_dtoa_r+0xe4>
 80184ea:	4b9b      	ldr	r3, [pc, #620]	; (8018758 <_dtoa_r+0x308>)
 80184ec:	9300      	str	r3, [sp, #0]
 80184ee:	3308      	adds	r3, #8
 80184f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80184f2:	6013      	str	r3, [r2, #0]
 80184f4:	9800      	ldr	r0, [sp, #0]
 80184f6:	b015      	add	sp, #84	; 0x54
 80184f8:	ecbd 8b02 	vpop	{d8}
 80184fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018500:	4b94      	ldr	r3, [pc, #592]	; (8018754 <_dtoa_r+0x304>)
 8018502:	9300      	str	r3, [sp, #0]
 8018504:	3303      	adds	r3, #3
 8018506:	e7f3      	b.n	80184f0 <_dtoa_r+0xa0>
 8018508:	ed9d 7b02 	vldr	d7, [sp, #8]
 801850c:	2200      	movs	r2, #0
 801850e:	ec51 0b17 	vmov	r0, r1, d7
 8018512:	2300      	movs	r3, #0
 8018514:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018518:	f7e8 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 801851c:	4680      	mov	r8, r0
 801851e:	b158      	cbz	r0, 8018538 <_dtoa_r+0xe8>
 8018520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018522:	2301      	movs	r3, #1
 8018524:	6013      	str	r3, [r2, #0]
 8018526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018528:	2b00      	cmp	r3, #0
 801852a:	f000 8551 	beq.w	8018fd0 <_dtoa_r+0xb80>
 801852e:	488b      	ldr	r0, [pc, #556]	; (801875c <_dtoa_r+0x30c>)
 8018530:	6018      	str	r0, [r3, #0]
 8018532:	1e43      	subs	r3, r0, #1
 8018534:	9300      	str	r3, [sp, #0]
 8018536:	e7dd      	b.n	80184f4 <_dtoa_r+0xa4>
 8018538:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801853c:	aa12      	add	r2, sp, #72	; 0x48
 801853e:	a913      	add	r1, sp, #76	; 0x4c
 8018540:	4620      	mov	r0, r4
 8018542:	f001 f99d 	bl	8019880 <__d2b>
 8018546:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801854a:	4683      	mov	fp, r0
 801854c:	2d00      	cmp	r5, #0
 801854e:	d07c      	beq.n	801864a <_dtoa_r+0x1fa>
 8018550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018552:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801855a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801855e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018562:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801856a:	4b7d      	ldr	r3, [pc, #500]	; (8018760 <_dtoa_r+0x310>)
 801856c:	2200      	movs	r2, #0
 801856e:	4630      	mov	r0, r6
 8018570:	4639      	mov	r1, r7
 8018572:	f7e7 fe89 	bl	8000288 <__aeabi_dsub>
 8018576:	a36e      	add	r3, pc, #440	; (adr r3, 8018730 <_dtoa_r+0x2e0>)
 8018578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857c:	f7e8 f83c 	bl	80005f8 <__aeabi_dmul>
 8018580:	a36d      	add	r3, pc, #436	; (adr r3, 8018738 <_dtoa_r+0x2e8>)
 8018582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018586:	f7e7 fe81 	bl	800028c <__adddf3>
 801858a:	4606      	mov	r6, r0
 801858c:	4628      	mov	r0, r5
 801858e:	460f      	mov	r7, r1
 8018590:	f7e7 ffc8 	bl	8000524 <__aeabi_i2d>
 8018594:	a36a      	add	r3, pc, #424	; (adr r3, 8018740 <_dtoa_r+0x2f0>)
 8018596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801859a:	f7e8 f82d 	bl	80005f8 <__aeabi_dmul>
 801859e:	4602      	mov	r2, r0
 80185a0:	460b      	mov	r3, r1
 80185a2:	4630      	mov	r0, r6
 80185a4:	4639      	mov	r1, r7
 80185a6:	f7e7 fe71 	bl	800028c <__adddf3>
 80185aa:	4606      	mov	r6, r0
 80185ac:	460f      	mov	r7, r1
 80185ae:	f7e8 fad3 	bl	8000b58 <__aeabi_d2iz>
 80185b2:	2200      	movs	r2, #0
 80185b4:	4682      	mov	sl, r0
 80185b6:	2300      	movs	r3, #0
 80185b8:	4630      	mov	r0, r6
 80185ba:	4639      	mov	r1, r7
 80185bc:	f7e8 fa8e 	bl	8000adc <__aeabi_dcmplt>
 80185c0:	b148      	cbz	r0, 80185d6 <_dtoa_r+0x186>
 80185c2:	4650      	mov	r0, sl
 80185c4:	f7e7 ffae 	bl	8000524 <__aeabi_i2d>
 80185c8:	4632      	mov	r2, r6
 80185ca:	463b      	mov	r3, r7
 80185cc:	f7e8 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80185d0:	b908      	cbnz	r0, 80185d6 <_dtoa_r+0x186>
 80185d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185d6:	f1ba 0f16 	cmp.w	sl, #22
 80185da:	d854      	bhi.n	8018686 <_dtoa_r+0x236>
 80185dc:	4b61      	ldr	r3, [pc, #388]	; (8018764 <_dtoa_r+0x314>)
 80185de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80185e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80185ea:	f7e8 fa77 	bl	8000adc <__aeabi_dcmplt>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d04b      	beq.n	801868a <_dtoa_r+0x23a>
 80185f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80185f6:	2300      	movs	r3, #0
 80185f8:	930e      	str	r3, [sp, #56]	; 0x38
 80185fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80185fc:	1b5d      	subs	r5, r3, r5
 80185fe:	1e6b      	subs	r3, r5, #1
 8018600:	9304      	str	r3, [sp, #16]
 8018602:	bf43      	ittte	mi
 8018604:	2300      	movmi	r3, #0
 8018606:	f1c5 0801 	rsbmi	r8, r5, #1
 801860a:	9304      	strmi	r3, [sp, #16]
 801860c:	f04f 0800 	movpl.w	r8, #0
 8018610:	f1ba 0f00 	cmp.w	sl, #0
 8018614:	db3b      	blt.n	801868e <_dtoa_r+0x23e>
 8018616:	9b04      	ldr	r3, [sp, #16]
 8018618:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801861c:	4453      	add	r3, sl
 801861e:	9304      	str	r3, [sp, #16]
 8018620:	2300      	movs	r3, #0
 8018622:	9306      	str	r3, [sp, #24]
 8018624:	9b05      	ldr	r3, [sp, #20]
 8018626:	2b09      	cmp	r3, #9
 8018628:	d869      	bhi.n	80186fe <_dtoa_r+0x2ae>
 801862a:	2b05      	cmp	r3, #5
 801862c:	bfc4      	itt	gt
 801862e:	3b04      	subgt	r3, #4
 8018630:	9305      	strgt	r3, [sp, #20]
 8018632:	9b05      	ldr	r3, [sp, #20]
 8018634:	f1a3 0302 	sub.w	r3, r3, #2
 8018638:	bfcc      	ite	gt
 801863a:	2500      	movgt	r5, #0
 801863c:	2501      	movle	r5, #1
 801863e:	2b03      	cmp	r3, #3
 8018640:	d869      	bhi.n	8018716 <_dtoa_r+0x2c6>
 8018642:	e8df f003 	tbb	[pc, r3]
 8018646:	4e2c      	.short	0x4e2c
 8018648:	5a4c      	.short	0x5a4c
 801864a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801864e:	441d      	add	r5, r3
 8018650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018654:	2b20      	cmp	r3, #32
 8018656:	bfc1      	itttt	gt
 8018658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801865c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018660:	fa09 f303 	lslgt.w	r3, r9, r3
 8018664:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018668:	bfda      	itte	le
 801866a:	f1c3 0320 	rsble	r3, r3, #32
 801866e:	fa06 f003 	lslle.w	r0, r6, r3
 8018672:	4318      	orrgt	r0, r3
 8018674:	f7e7 ff46 	bl	8000504 <__aeabi_ui2d>
 8018678:	2301      	movs	r3, #1
 801867a:	4606      	mov	r6, r0
 801867c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018680:	3d01      	subs	r5, #1
 8018682:	9310      	str	r3, [sp, #64]	; 0x40
 8018684:	e771      	b.n	801856a <_dtoa_r+0x11a>
 8018686:	2301      	movs	r3, #1
 8018688:	e7b6      	b.n	80185f8 <_dtoa_r+0x1a8>
 801868a:	900e      	str	r0, [sp, #56]	; 0x38
 801868c:	e7b5      	b.n	80185fa <_dtoa_r+0x1aa>
 801868e:	f1ca 0300 	rsb	r3, sl, #0
 8018692:	9306      	str	r3, [sp, #24]
 8018694:	2300      	movs	r3, #0
 8018696:	eba8 080a 	sub.w	r8, r8, sl
 801869a:	930d      	str	r3, [sp, #52]	; 0x34
 801869c:	e7c2      	b.n	8018624 <_dtoa_r+0x1d4>
 801869e:	2300      	movs	r3, #0
 80186a0:	9308      	str	r3, [sp, #32]
 80186a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	dc39      	bgt.n	801871c <_dtoa_r+0x2cc>
 80186a8:	f04f 0901 	mov.w	r9, #1
 80186ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80186b0:	464b      	mov	r3, r9
 80186b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80186b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80186b8:	2200      	movs	r2, #0
 80186ba:	6042      	str	r2, [r0, #4]
 80186bc:	2204      	movs	r2, #4
 80186be:	f102 0614 	add.w	r6, r2, #20
 80186c2:	429e      	cmp	r6, r3
 80186c4:	6841      	ldr	r1, [r0, #4]
 80186c6:	d92f      	bls.n	8018728 <_dtoa_r+0x2d8>
 80186c8:	4620      	mov	r0, r4
 80186ca:	f000 fdb7 	bl	801923c <_Balloc>
 80186ce:	9000      	str	r0, [sp, #0]
 80186d0:	2800      	cmp	r0, #0
 80186d2:	d14b      	bne.n	801876c <_dtoa_r+0x31c>
 80186d4:	4b24      	ldr	r3, [pc, #144]	; (8018768 <_dtoa_r+0x318>)
 80186d6:	4602      	mov	r2, r0
 80186d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80186dc:	e6d1      	b.n	8018482 <_dtoa_r+0x32>
 80186de:	2301      	movs	r3, #1
 80186e0:	e7de      	b.n	80186a0 <_dtoa_r+0x250>
 80186e2:	2300      	movs	r3, #0
 80186e4:	9308      	str	r3, [sp, #32]
 80186e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186e8:	eb0a 0903 	add.w	r9, sl, r3
 80186ec:	f109 0301 	add.w	r3, r9, #1
 80186f0:	2b01      	cmp	r3, #1
 80186f2:	9301      	str	r3, [sp, #4]
 80186f4:	bfb8      	it	lt
 80186f6:	2301      	movlt	r3, #1
 80186f8:	e7dd      	b.n	80186b6 <_dtoa_r+0x266>
 80186fa:	2301      	movs	r3, #1
 80186fc:	e7f2      	b.n	80186e4 <_dtoa_r+0x294>
 80186fe:	2501      	movs	r5, #1
 8018700:	2300      	movs	r3, #0
 8018702:	9305      	str	r3, [sp, #20]
 8018704:	9508      	str	r5, [sp, #32]
 8018706:	f04f 39ff 	mov.w	r9, #4294967295
 801870a:	2200      	movs	r2, #0
 801870c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018710:	2312      	movs	r3, #18
 8018712:	9209      	str	r2, [sp, #36]	; 0x24
 8018714:	e7cf      	b.n	80186b6 <_dtoa_r+0x266>
 8018716:	2301      	movs	r3, #1
 8018718:	9308      	str	r3, [sp, #32]
 801871a:	e7f4      	b.n	8018706 <_dtoa_r+0x2b6>
 801871c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018720:	f8cd 9004 	str.w	r9, [sp, #4]
 8018724:	464b      	mov	r3, r9
 8018726:	e7c6      	b.n	80186b6 <_dtoa_r+0x266>
 8018728:	3101      	adds	r1, #1
 801872a:	6041      	str	r1, [r0, #4]
 801872c:	0052      	lsls	r2, r2, #1
 801872e:	e7c6      	b.n	80186be <_dtoa_r+0x26e>
 8018730:	636f4361 	.word	0x636f4361
 8018734:	3fd287a7 	.word	0x3fd287a7
 8018738:	8b60c8b3 	.word	0x8b60c8b3
 801873c:	3fc68a28 	.word	0x3fc68a28
 8018740:	509f79fb 	.word	0x509f79fb
 8018744:	3fd34413 	.word	0x3fd34413
 8018748:	0801ac3d 	.word	0x0801ac3d
 801874c:	0801ac54 	.word	0x0801ac54
 8018750:	7ff00000 	.word	0x7ff00000
 8018754:	0801ac39 	.word	0x0801ac39
 8018758:	0801ac30 	.word	0x0801ac30
 801875c:	0801ac0d 	.word	0x0801ac0d
 8018760:	3ff80000 	.word	0x3ff80000
 8018764:	0801adb0 	.word	0x0801adb0
 8018768:	0801acb3 	.word	0x0801acb3
 801876c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801876e:	9a00      	ldr	r2, [sp, #0]
 8018770:	601a      	str	r2, [r3, #0]
 8018772:	9b01      	ldr	r3, [sp, #4]
 8018774:	2b0e      	cmp	r3, #14
 8018776:	f200 80ad 	bhi.w	80188d4 <_dtoa_r+0x484>
 801877a:	2d00      	cmp	r5, #0
 801877c:	f000 80aa 	beq.w	80188d4 <_dtoa_r+0x484>
 8018780:	f1ba 0f00 	cmp.w	sl, #0
 8018784:	dd36      	ble.n	80187f4 <_dtoa_r+0x3a4>
 8018786:	4ac3      	ldr	r2, [pc, #780]	; (8018a94 <_dtoa_r+0x644>)
 8018788:	f00a 030f 	and.w	r3, sl, #15
 801878c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018790:	ed93 7b00 	vldr	d7, [r3]
 8018794:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018798:	ea4f 172a 	mov.w	r7, sl, asr #4
 801879c:	eeb0 8a47 	vmov.f32	s16, s14
 80187a0:	eef0 8a67 	vmov.f32	s17, s15
 80187a4:	d016      	beq.n	80187d4 <_dtoa_r+0x384>
 80187a6:	4bbc      	ldr	r3, [pc, #752]	; (8018a98 <_dtoa_r+0x648>)
 80187a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80187ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80187b0:	f7e8 f84c 	bl	800084c <__aeabi_ddiv>
 80187b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187b8:	f007 070f 	and.w	r7, r7, #15
 80187bc:	2503      	movs	r5, #3
 80187be:	4eb6      	ldr	r6, [pc, #728]	; (8018a98 <_dtoa_r+0x648>)
 80187c0:	b957      	cbnz	r7, 80187d8 <_dtoa_r+0x388>
 80187c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187c6:	ec53 2b18 	vmov	r2, r3, d8
 80187ca:	f7e8 f83f 	bl	800084c <__aeabi_ddiv>
 80187ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187d2:	e029      	b.n	8018828 <_dtoa_r+0x3d8>
 80187d4:	2502      	movs	r5, #2
 80187d6:	e7f2      	b.n	80187be <_dtoa_r+0x36e>
 80187d8:	07f9      	lsls	r1, r7, #31
 80187da:	d508      	bpl.n	80187ee <_dtoa_r+0x39e>
 80187dc:	ec51 0b18 	vmov	r0, r1, d8
 80187e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80187e4:	f7e7 ff08 	bl	80005f8 <__aeabi_dmul>
 80187e8:	ec41 0b18 	vmov	d8, r0, r1
 80187ec:	3501      	adds	r5, #1
 80187ee:	107f      	asrs	r7, r7, #1
 80187f0:	3608      	adds	r6, #8
 80187f2:	e7e5      	b.n	80187c0 <_dtoa_r+0x370>
 80187f4:	f000 80a6 	beq.w	8018944 <_dtoa_r+0x4f4>
 80187f8:	f1ca 0600 	rsb	r6, sl, #0
 80187fc:	4ba5      	ldr	r3, [pc, #660]	; (8018a94 <_dtoa_r+0x644>)
 80187fe:	4fa6      	ldr	r7, [pc, #664]	; (8018a98 <_dtoa_r+0x648>)
 8018800:	f006 020f 	and.w	r2, r6, #15
 8018804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801880c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018810:	f7e7 fef2 	bl	80005f8 <__aeabi_dmul>
 8018814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018818:	1136      	asrs	r6, r6, #4
 801881a:	2300      	movs	r3, #0
 801881c:	2502      	movs	r5, #2
 801881e:	2e00      	cmp	r6, #0
 8018820:	f040 8085 	bne.w	801892e <_dtoa_r+0x4de>
 8018824:	2b00      	cmp	r3, #0
 8018826:	d1d2      	bne.n	80187ce <_dtoa_r+0x37e>
 8018828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801882a:	2b00      	cmp	r3, #0
 801882c:	f000 808c 	beq.w	8018948 <_dtoa_r+0x4f8>
 8018830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018834:	4b99      	ldr	r3, [pc, #612]	; (8018a9c <_dtoa_r+0x64c>)
 8018836:	2200      	movs	r2, #0
 8018838:	4630      	mov	r0, r6
 801883a:	4639      	mov	r1, r7
 801883c:	f7e8 f94e 	bl	8000adc <__aeabi_dcmplt>
 8018840:	2800      	cmp	r0, #0
 8018842:	f000 8081 	beq.w	8018948 <_dtoa_r+0x4f8>
 8018846:	9b01      	ldr	r3, [sp, #4]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d07d      	beq.n	8018948 <_dtoa_r+0x4f8>
 801884c:	f1b9 0f00 	cmp.w	r9, #0
 8018850:	dd3c      	ble.n	80188cc <_dtoa_r+0x47c>
 8018852:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018856:	9307      	str	r3, [sp, #28]
 8018858:	2200      	movs	r2, #0
 801885a:	4b91      	ldr	r3, [pc, #580]	; (8018aa0 <_dtoa_r+0x650>)
 801885c:	4630      	mov	r0, r6
 801885e:	4639      	mov	r1, r7
 8018860:	f7e7 feca 	bl	80005f8 <__aeabi_dmul>
 8018864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018868:	3501      	adds	r5, #1
 801886a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801886e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018872:	4628      	mov	r0, r5
 8018874:	f7e7 fe56 	bl	8000524 <__aeabi_i2d>
 8018878:	4632      	mov	r2, r6
 801887a:	463b      	mov	r3, r7
 801887c:	f7e7 febc 	bl	80005f8 <__aeabi_dmul>
 8018880:	4b88      	ldr	r3, [pc, #544]	; (8018aa4 <_dtoa_r+0x654>)
 8018882:	2200      	movs	r2, #0
 8018884:	f7e7 fd02 	bl	800028c <__adddf3>
 8018888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801888c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018890:	9303      	str	r3, [sp, #12]
 8018892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018894:	2b00      	cmp	r3, #0
 8018896:	d15c      	bne.n	8018952 <_dtoa_r+0x502>
 8018898:	4b83      	ldr	r3, [pc, #524]	; (8018aa8 <_dtoa_r+0x658>)
 801889a:	2200      	movs	r2, #0
 801889c:	4630      	mov	r0, r6
 801889e:	4639      	mov	r1, r7
 80188a0:	f7e7 fcf2 	bl	8000288 <__aeabi_dsub>
 80188a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80188a8:	4606      	mov	r6, r0
 80188aa:	460f      	mov	r7, r1
 80188ac:	f7e8 f934 	bl	8000b18 <__aeabi_dcmpgt>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	f040 8296 	bne.w	8018de2 <_dtoa_r+0x992>
 80188b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80188ba:	4630      	mov	r0, r6
 80188bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188c0:	4639      	mov	r1, r7
 80188c2:	f7e8 f90b 	bl	8000adc <__aeabi_dcmplt>
 80188c6:	2800      	cmp	r0, #0
 80188c8:	f040 8288 	bne.w	8018ddc <_dtoa_r+0x98c>
 80188cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80188d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80188d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	f2c0 8158 	blt.w	8018b8c <_dtoa_r+0x73c>
 80188dc:	f1ba 0f0e 	cmp.w	sl, #14
 80188e0:	f300 8154 	bgt.w	8018b8c <_dtoa_r+0x73c>
 80188e4:	4b6b      	ldr	r3, [pc, #428]	; (8018a94 <_dtoa_r+0x644>)
 80188e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80188ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80188ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	f280 80e3 	bge.w	8018abc <_dtoa_r+0x66c>
 80188f6:	9b01      	ldr	r3, [sp, #4]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	f300 80df 	bgt.w	8018abc <_dtoa_r+0x66c>
 80188fe:	f040 826d 	bne.w	8018ddc <_dtoa_r+0x98c>
 8018902:	4b69      	ldr	r3, [pc, #420]	; (8018aa8 <_dtoa_r+0x658>)
 8018904:	2200      	movs	r2, #0
 8018906:	4640      	mov	r0, r8
 8018908:	4649      	mov	r1, r9
 801890a:	f7e7 fe75 	bl	80005f8 <__aeabi_dmul>
 801890e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018912:	f7e8 f8f7 	bl	8000b04 <__aeabi_dcmpge>
 8018916:	9e01      	ldr	r6, [sp, #4]
 8018918:	4637      	mov	r7, r6
 801891a:	2800      	cmp	r0, #0
 801891c:	f040 8243 	bne.w	8018da6 <_dtoa_r+0x956>
 8018920:	9d00      	ldr	r5, [sp, #0]
 8018922:	2331      	movs	r3, #49	; 0x31
 8018924:	f805 3b01 	strb.w	r3, [r5], #1
 8018928:	f10a 0a01 	add.w	sl, sl, #1
 801892c:	e23f      	b.n	8018dae <_dtoa_r+0x95e>
 801892e:	07f2      	lsls	r2, r6, #31
 8018930:	d505      	bpl.n	801893e <_dtoa_r+0x4ee>
 8018932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018936:	f7e7 fe5f 	bl	80005f8 <__aeabi_dmul>
 801893a:	3501      	adds	r5, #1
 801893c:	2301      	movs	r3, #1
 801893e:	1076      	asrs	r6, r6, #1
 8018940:	3708      	adds	r7, #8
 8018942:	e76c      	b.n	801881e <_dtoa_r+0x3ce>
 8018944:	2502      	movs	r5, #2
 8018946:	e76f      	b.n	8018828 <_dtoa_r+0x3d8>
 8018948:	9b01      	ldr	r3, [sp, #4]
 801894a:	f8cd a01c 	str.w	sl, [sp, #28]
 801894e:	930c      	str	r3, [sp, #48]	; 0x30
 8018950:	e78d      	b.n	801886e <_dtoa_r+0x41e>
 8018952:	9900      	ldr	r1, [sp, #0]
 8018954:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018958:	4b4e      	ldr	r3, [pc, #312]	; (8018a94 <_dtoa_r+0x644>)
 801895a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801895e:	4401      	add	r1, r0
 8018960:	9102      	str	r1, [sp, #8]
 8018962:	9908      	ldr	r1, [sp, #32]
 8018964:	eeb0 8a47 	vmov.f32	s16, s14
 8018968:	eef0 8a67 	vmov.f32	s17, s15
 801896c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018970:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018974:	2900      	cmp	r1, #0
 8018976:	d045      	beq.n	8018a04 <_dtoa_r+0x5b4>
 8018978:	494c      	ldr	r1, [pc, #304]	; (8018aac <_dtoa_r+0x65c>)
 801897a:	2000      	movs	r0, #0
 801897c:	f7e7 ff66 	bl	800084c <__aeabi_ddiv>
 8018980:	ec53 2b18 	vmov	r2, r3, d8
 8018984:	f7e7 fc80 	bl	8000288 <__aeabi_dsub>
 8018988:	9d00      	ldr	r5, [sp, #0]
 801898a:	ec41 0b18 	vmov	d8, r0, r1
 801898e:	4639      	mov	r1, r7
 8018990:	4630      	mov	r0, r6
 8018992:	f7e8 f8e1 	bl	8000b58 <__aeabi_d2iz>
 8018996:	900c      	str	r0, [sp, #48]	; 0x30
 8018998:	f7e7 fdc4 	bl	8000524 <__aeabi_i2d>
 801899c:	4602      	mov	r2, r0
 801899e:	460b      	mov	r3, r1
 80189a0:	4630      	mov	r0, r6
 80189a2:	4639      	mov	r1, r7
 80189a4:	f7e7 fc70 	bl	8000288 <__aeabi_dsub>
 80189a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189aa:	3330      	adds	r3, #48	; 0x30
 80189ac:	f805 3b01 	strb.w	r3, [r5], #1
 80189b0:	ec53 2b18 	vmov	r2, r3, d8
 80189b4:	4606      	mov	r6, r0
 80189b6:	460f      	mov	r7, r1
 80189b8:	f7e8 f890 	bl	8000adc <__aeabi_dcmplt>
 80189bc:	2800      	cmp	r0, #0
 80189be:	d165      	bne.n	8018a8c <_dtoa_r+0x63c>
 80189c0:	4632      	mov	r2, r6
 80189c2:	463b      	mov	r3, r7
 80189c4:	4935      	ldr	r1, [pc, #212]	; (8018a9c <_dtoa_r+0x64c>)
 80189c6:	2000      	movs	r0, #0
 80189c8:	f7e7 fc5e 	bl	8000288 <__aeabi_dsub>
 80189cc:	ec53 2b18 	vmov	r2, r3, d8
 80189d0:	f7e8 f884 	bl	8000adc <__aeabi_dcmplt>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	f040 80b9 	bne.w	8018b4c <_dtoa_r+0x6fc>
 80189da:	9b02      	ldr	r3, [sp, #8]
 80189dc:	429d      	cmp	r5, r3
 80189de:	f43f af75 	beq.w	80188cc <_dtoa_r+0x47c>
 80189e2:	4b2f      	ldr	r3, [pc, #188]	; (8018aa0 <_dtoa_r+0x650>)
 80189e4:	ec51 0b18 	vmov	r0, r1, d8
 80189e8:	2200      	movs	r2, #0
 80189ea:	f7e7 fe05 	bl	80005f8 <__aeabi_dmul>
 80189ee:	4b2c      	ldr	r3, [pc, #176]	; (8018aa0 <_dtoa_r+0x650>)
 80189f0:	ec41 0b18 	vmov	d8, r0, r1
 80189f4:	2200      	movs	r2, #0
 80189f6:	4630      	mov	r0, r6
 80189f8:	4639      	mov	r1, r7
 80189fa:	f7e7 fdfd 	bl	80005f8 <__aeabi_dmul>
 80189fe:	4606      	mov	r6, r0
 8018a00:	460f      	mov	r7, r1
 8018a02:	e7c4      	b.n	801898e <_dtoa_r+0x53e>
 8018a04:	ec51 0b17 	vmov	r0, r1, d7
 8018a08:	f7e7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8018a0c:	9b02      	ldr	r3, [sp, #8]
 8018a0e:	9d00      	ldr	r5, [sp, #0]
 8018a10:	930c      	str	r3, [sp, #48]	; 0x30
 8018a12:	ec41 0b18 	vmov	d8, r0, r1
 8018a16:	4639      	mov	r1, r7
 8018a18:	4630      	mov	r0, r6
 8018a1a:	f7e8 f89d 	bl	8000b58 <__aeabi_d2iz>
 8018a1e:	9011      	str	r0, [sp, #68]	; 0x44
 8018a20:	f7e7 fd80 	bl	8000524 <__aeabi_i2d>
 8018a24:	4602      	mov	r2, r0
 8018a26:	460b      	mov	r3, r1
 8018a28:	4630      	mov	r0, r6
 8018a2a:	4639      	mov	r1, r7
 8018a2c:	f7e7 fc2c 	bl	8000288 <__aeabi_dsub>
 8018a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a32:	3330      	adds	r3, #48	; 0x30
 8018a34:	f805 3b01 	strb.w	r3, [r5], #1
 8018a38:	9b02      	ldr	r3, [sp, #8]
 8018a3a:	429d      	cmp	r5, r3
 8018a3c:	4606      	mov	r6, r0
 8018a3e:	460f      	mov	r7, r1
 8018a40:	f04f 0200 	mov.w	r2, #0
 8018a44:	d134      	bne.n	8018ab0 <_dtoa_r+0x660>
 8018a46:	4b19      	ldr	r3, [pc, #100]	; (8018aac <_dtoa_r+0x65c>)
 8018a48:	ec51 0b18 	vmov	r0, r1, d8
 8018a4c:	f7e7 fc1e 	bl	800028c <__adddf3>
 8018a50:	4602      	mov	r2, r0
 8018a52:	460b      	mov	r3, r1
 8018a54:	4630      	mov	r0, r6
 8018a56:	4639      	mov	r1, r7
 8018a58:	f7e8 f85e 	bl	8000b18 <__aeabi_dcmpgt>
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	d175      	bne.n	8018b4c <_dtoa_r+0x6fc>
 8018a60:	ec53 2b18 	vmov	r2, r3, d8
 8018a64:	4911      	ldr	r1, [pc, #68]	; (8018aac <_dtoa_r+0x65c>)
 8018a66:	2000      	movs	r0, #0
 8018a68:	f7e7 fc0e 	bl	8000288 <__aeabi_dsub>
 8018a6c:	4602      	mov	r2, r0
 8018a6e:	460b      	mov	r3, r1
 8018a70:	4630      	mov	r0, r6
 8018a72:	4639      	mov	r1, r7
 8018a74:	f7e8 f832 	bl	8000adc <__aeabi_dcmplt>
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	f43f af27 	beq.w	80188cc <_dtoa_r+0x47c>
 8018a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018a80:	1e6b      	subs	r3, r5, #1
 8018a82:	930c      	str	r3, [sp, #48]	; 0x30
 8018a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a88:	2b30      	cmp	r3, #48	; 0x30
 8018a8a:	d0f8      	beq.n	8018a7e <_dtoa_r+0x62e>
 8018a8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018a90:	e04a      	b.n	8018b28 <_dtoa_r+0x6d8>
 8018a92:	bf00      	nop
 8018a94:	0801adb0 	.word	0x0801adb0
 8018a98:	0801ad88 	.word	0x0801ad88
 8018a9c:	3ff00000 	.word	0x3ff00000
 8018aa0:	40240000 	.word	0x40240000
 8018aa4:	401c0000 	.word	0x401c0000
 8018aa8:	40140000 	.word	0x40140000
 8018aac:	3fe00000 	.word	0x3fe00000
 8018ab0:	4baf      	ldr	r3, [pc, #700]	; (8018d70 <_dtoa_r+0x920>)
 8018ab2:	f7e7 fda1 	bl	80005f8 <__aeabi_dmul>
 8018ab6:	4606      	mov	r6, r0
 8018ab8:	460f      	mov	r7, r1
 8018aba:	e7ac      	b.n	8018a16 <_dtoa_r+0x5c6>
 8018abc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018ac0:	9d00      	ldr	r5, [sp, #0]
 8018ac2:	4642      	mov	r2, r8
 8018ac4:	464b      	mov	r3, r9
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	4639      	mov	r1, r7
 8018aca:	f7e7 febf 	bl	800084c <__aeabi_ddiv>
 8018ace:	f7e8 f843 	bl	8000b58 <__aeabi_d2iz>
 8018ad2:	9002      	str	r0, [sp, #8]
 8018ad4:	f7e7 fd26 	bl	8000524 <__aeabi_i2d>
 8018ad8:	4642      	mov	r2, r8
 8018ada:	464b      	mov	r3, r9
 8018adc:	f7e7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	4639      	mov	r1, r7
 8018ae8:	f7e7 fbce 	bl	8000288 <__aeabi_dsub>
 8018aec:	9e02      	ldr	r6, [sp, #8]
 8018aee:	9f01      	ldr	r7, [sp, #4]
 8018af0:	3630      	adds	r6, #48	; 0x30
 8018af2:	f805 6b01 	strb.w	r6, [r5], #1
 8018af6:	9e00      	ldr	r6, [sp, #0]
 8018af8:	1bae      	subs	r6, r5, r6
 8018afa:	42b7      	cmp	r7, r6
 8018afc:	4602      	mov	r2, r0
 8018afe:	460b      	mov	r3, r1
 8018b00:	d137      	bne.n	8018b72 <_dtoa_r+0x722>
 8018b02:	f7e7 fbc3 	bl	800028c <__adddf3>
 8018b06:	4642      	mov	r2, r8
 8018b08:	464b      	mov	r3, r9
 8018b0a:	4606      	mov	r6, r0
 8018b0c:	460f      	mov	r7, r1
 8018b0e:	f7e8 f803 	bl	8000b18 <__aeabi_dcmpgt>
 8018b12:	b9c8      	cbnz	r0, 8018b48 <_dtoa_r+0x6f8>
 8018b14:	4642      	mov	r2, r8
 8018b16:	464b      	mov	r3, r9
 8018b18:	4630      	mov	r0, r6
 8018b1a:	4639      	mov	r1, r7
 8018b1c:	f7e7 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018b20:	b110      	cbz	r0, 8018b28 <_dtoa_r+0x6d8>
 8018b22:	9b02      	ldr	r3, [sp, #8]
 8018b24:	07d9      	lsls	r1, r3, #31
 8018b26:	d40f      	bmi.n	8018b48 <_dtoa_r+0x6f8>
 8018b28:	4620      	mov	r0, r4
 8018b2a:	4659      	mov	r1, fp
 8018b2c:	f000 fbc6 	bl	80192bc <_Bfree>
 8018b30:	2300      	movs	r3, #0
 8018b32:	702b      	strb	r3, [r5, #0]
 8018b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b36:	f10a 0001 	add.w	r0, sl, #1
 8018b3a:	6018      	str	r0, [r3, #0]
 8018b3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	f43f acd8 	beq.w	80184f4 <_dtoa_r+0xa4>
 8018b44:	601d      	str	r5, [r3, #0]
 8018b46:	e4d5      	b.n	80184f4 <_dtoa_r+0xa4>
 8018b48:	f8cd a01c 	str.w	sl, [sp, #28]
 8018b4c:	462b      	mov	r3, r5
 8018b4e:	461d      	mov	r5, r3
 8018b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b54:	2a39      	cmp	r2, #57	; 0x39
 8018b56:	d108      	bne.n	8018b6a <_dtoa_r+0x71a>
 8018b58:	9a00      	ldr	r2, [sp, #0]
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d1f7      	bne.n	8018b4e <_dtoa_r+0x6fe>
 8018b5e:	9a07      	ldr	r2, [sp, #28]
 8018b60:	9900      	ldr	r1, [sp, #0]
 8018b62:	3201      	adds	r2, #1
 8018b64:	9207      	str	r2, [sp, #28]
 8018b66:	2230      	movs	r2, #48	; 0x30
 8018b68:	700a      	strb	r2, [r1, #0]
 8018b6a:	781a      	ldrb	r2, [r3, #0]
 8018b6c:	3201      	adds	r2, #1
 8018b6e:	701a      	strb	r2, [r3, #0]
 8018b70:	e78c      	b.n	8018a8c <_dtoa_r+0x63c>
 8018b72:	4b7f      	ldr	r3, [pc, #508]	; (8018d70 <_dtoa_r+0x920>)
 8018b74:	2200      	movs	r2, #0
 8018b76:	f7e7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	4606      	mov	r6, r0
 8018b80:	460f      	mov	r7, r1
 8018b82:	f7e7 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8018b86:	2800      	cmp	r0, #0
 8018b88:	d09b      	beq.n	8018ac2 <_dtoa_r+0x672>
 8018b8a:	e7cd      	b.n	8018b28 <_dtoa_r+0x6d8>
 8018b8c:	9a08      	ldr	r2, [sp, #32]
 8018b8e:	2a00      	cmp	r2, #0
 8018b90:	f000 80c4 	beq.w	8018d1c <_dtoa_r+0x8cc>
 8018b94:	9a05      	ldr	r2, [sp, #20]
 8018b96:	2a01      	cmp	r2, #1
 8018b98:	f300 80a8 	bgt.w	8018cec <_dtoa_r+0x89c>
 8018b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018b9e:	2a00      	cmp	r2, #0
 8018ba0:	f000 80a0 	beq.w	8018ce4 <_dtoa_r+0x894>
 8018ba4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018ba8:	9e06      	ldr	r6, [sp, #24]
 8018baa:	4645      	mov	r5, r8
 8018bac:	9a04      	ldr	r2, [sp, #16]
 8018bae:	2101      	movs	r1, #1
 8018bb0:	441a      	add	r2, r3
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	4498      	add	r8, r3
 8018bb6:	9204      	str	r2, [sp, #16]
 8018bb8:	f000 fc3c 	bl	8019434 <__i2b>
 8018bbc:	4607      	mov	r7, r0
 8018bbe:	2d00      	cmp	r5, #0
 8018bc0:	dd0b      	ble.n	8018bda <_dtoa_r+0x78a>
 8018bc2:	9b04      	ldr	r3, [sp, #16]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	dd08      	ble.n	8018bda <_dtoa_r+0x78a>
 8018bc8:	42ab      	cmp	r3, r5
 8018bca:	9a04      	ldr	r2, [sp, #16]
 8018bcc:	bfa8      	it	ge
 8018bce:	462b      	movge	r3, r5
 8018bd0:	eba8 0803 	sub.w	r8, r8, r3
 8018bd4:	1aed      	subs	r5, r5, r3
 8018bd6:	1ad3      	subs	r3, r2, r3
 8018bd8:	9304      	str	r3, [sp, #16]
 8018bda:	9b06      	ldr	r3, [sp, #24]
 8018bdc:	b1fb      	cbz	r3, 8018c1e <_dtoa_r+0x7ce>
 8018bde:	9b08      	ldr	r3, [sp, #32]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	f000 809f 	beq.w	8018d24 <_dtoa_r+0x8d4>
 8018be6:	2e00      	cmp	r6, #0
 8018be8:	dd11      	ble.n	8018c0e <_dtoa_r+0x7be>
 8018bea:	4639      	mov	r1, r7
 8018bec:	4632      	mov	r2, r6
 8018bee:	4620      	mov	r0, r4
 8018bf0:	f000 fcdc 	bl	80195ac <__pow5mult>
 8018bf4:	465a      	mov	r2, fp
 8018bf6:	4601      	mov	r1, r0
 8018bf8:	4607      	mov	r7, r0
 8018bfa:	4620      	mov	r0, r4
 8018bfc:	f000 fc30 	bl	8019460 <__multiply>
 8018c00:	4659      	mov	r1, fp
 8018c02:	9007      	str	r0, [sp, #28]
 8018c04:	4620      	mov	r0, r4
 8018c06:	f000 fb59 	bl	80192bc <_Bfree>
 8018c0a:	9b07      	ldr	r3, [sp, #28]
 8018c0c:	469b      	mov	fp, r3
 8018c0e:	9b06      	ldr	r3, [sp, #24]
 8018c10:	1b9a      	subs	r2, r3, r6
 8018c12:	d004      	beq.n	8018c1e <_dtoa_r+0x7ce>
 8018c14:	4659      	mov	r1, fp
 8018c16:	4620      	mov	r0, r4
 8018c18:	f000 fcc8 	bl	80195ac <__pow5mult>
 8018c1c:	4683      	mov	fp, r0
 8018c1e:	2101      	movs	r1, #1
 8018c20:	4620      	mov	r0, r4
 8018c22:	f000 fc07 	bl	8019434 <__i2b>
 8018c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	4606      	mov	r6, r0
 8018c2c:	dd7c      	ble.n	8018d28 <_dtoa_r+0x8d8>
 8018c2e:	461a      	mov	r2, r3
 8018c30:	4601      	mov	r1, r0
 8018c32:	4620      	mov	r0, r4
 8018c34:	f000 fcba 	bl	80195ac <__pow5mult>
 8018c38:	9b05      	ldr	r3, [sp, #20]
 8018c3a:	2b01      	cmp	r3, #1
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	dd76      	ble.n	8018d2e <_dtoa_r+0x8de>
 8018c40:	2300      	movs	r3, #0
 8018c42:	9306      	str	r3, [sp, #24]
 8018c44:	6933      	ldr	r3, [r6, #16]
 8018c46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018c4a:	6918      	ldr	r0, [r3, #16]
 8018c4c:	f000 fba2 	bl	8019394 <__hi0bits>
 8018c50:	f1c0 0020 	rsb	r0, r0, #32
 8018c54:	9b04      	ldr	r3, [sp, #16]
 8018c56:	4418      	add	r0, r3
 8018c58:	f010 001f 	ands.w	r0, r0, #31
 8018c5c:	f000 8086 	beq.w	8018d6c <_dtoa_r+0x91c>
 8018c60:	f1c0 0320 	rsb	r3, r0, #32
 8018c64:	2b04      	cmp	r3, #4
 8018c66:	dd7f      	ble.n	8018d68 <_dtoa_r+0x918>
 8018c68:	f1c0 001c 	rsb	r0, r0, #28
 8018c6c:	9b04      	ldr	r3, [sp, #16]
 8018c6e:	4403      	add	r3, r0
 8018c70:	4480      	add	r8, r0
 8018c72:	4405      	add	r5, r0
 8018c74:	9304      	str	r3, [sp, #16]
 8018c76:	f1b8 0f00 	cmp.w	r8, #0
 8018c7a:	dd05      	ble.n	8018c88 <_dtoa_r+0x838>
 8018c7c:	4659      	mov	r1, fp
 8018c7e:	4642      	mov	r2, r8
 8018c80:	4620      	mov	r0, r4
 8018c82:	f000 fced 	bl	8019660 <__lshift>
 8018c86:	4683      	mov	fp, r0
 8018c88:	9b04      	ldr	r3, [sp, #16]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	dd05      	ble.n	8018c9a <_dtoa_r+0x84a>
 8018c8e:	4631      	mov	r1, r6
 8018c90:	461a      	mov	r2, r3
 8018c92:	4620      	mov	r0, r4
 8018c94:	f000 fce4 	bl	8019660 <__lshift>
 8018c98:	4606      	mov	r6, r0
 8018c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d069      	beq.n	8018d74 <_dtoa_r+0x924>
 8018ca0:	4631      	mov	r1, r6
 8018ca2:	4658      	mov	r0, fp
 8018ca4:	f000 fd48 	bl	8019738 <__mcmp>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	da63      	bge.n	8018d74 <_dtoa_r+0x924>
 8018cac:	2300      	movs	r3, #0
 8018cae:	4659      	mov	r1, fp
 8018cb0:	220a      	movs	r2, #10
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f000 fb24 	bl	8019300 <__multadd>
 8018cb8:	9b08      	ldr	r3, [sp, #32]
 8018cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018cbe:	4683      	mov	fp, r0
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f000 818f 	beq.w	8018fe4 <_dtoa_r+0xb94>
 8018cc6:	4639      	mov	r1, r7
 8018cc8:	2300      	movs	r3, #0
 8018cca:	220a      	movs	r2, #10
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f000 fb17 	bl	8019300 <__multadd>
 8018cd2:	f1b9 0f00 	cmp.w	r9, #0
 8018cd6:	4607      	mov	r7, r0
 8018cd8:	f300 808e 	bgt.w	8018df8 <_dtoa_r+0x9a8>
 8018cdc:	9b05      	ldr	r3, [sp, #20]
 8018cde:	2b02      	cmp	r3, #2
 8018ce0:	dc50      	bgt.n	8018d84 <_dtoa_r+0x934>
 8018ce2:	e089      	b.n	8018df8 <_dtoa_r+0x9a8>
 8018ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018cea:	e75d      	b.n	8018ba8 <_dtoa_r+0x758>
 8018cec:	9b01      	ldr	r3, [sp, #4]
 8018cee:	1e5e      	subs	r6, r3, #1
 8018cf0:	9b06      	ldr	r3, [sp, #24]
 8018cf2:	42b3      	cmp	r3, r6
 8018cf4:	bfbf      	itttt	lt
 8018cf6:	9b06      	ldrlt	r3, [sp, #24]
 8018cf8:	9606      	strlt	r6, [sp, #24]
 8018cfa:	1af2      	sublt	r2, r6, r3
 8018cfc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018cfe:	bfb6      	itet	lt
 8018d00:	189b      	addlt	r3, r3, r2
 8018d02:	1b9e      	subge	r6, r3, r6
 8018d04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018d06:	9b01      	ldr	r3, [sp, #4]
 8018d08:	bfb8      	it	lt
 8018d0a:	2600      	movlt	r6, #0
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	bfb5      	itete	lt
 8018d10:	eba8 0503 	sublt.w	r5, r8, r3
 8018d14:	9b01      	ldrge	r3, [sp, #4]
 8018d16:	2300      	movlt	r3, #0
 8018d18:	4645      	movge	r5, r8
 8018d1a:	e747      	b.n	8018bac <_dtoa_r+0x75c>
 8018d1c:	9e06      	ldr	r6, [sp, #24]
 8018d1e:	9f08      	ldr	r7, [sp, #32]
 8018d20:	4645      	mov	r5, r8
 8018d22:	e74c      	b.n	8018bbe <_dtoa_r+0x76e>
 8018d24:	9a06      	ldr	r2, [sp, #24]
 8018d26:	e775      	b.n	8018c14 <_dtoa_r+0x7c4>
 8018d28:	9b05      	ldr	r3, [sp, #20]
 8018d2a:	2b01      	cmp	r3, #1
 8018d2c:	dc18      	bgt.n	8018d60 <_dtoa_r+0x910>
 8018d2e:	9b02      	ldr	r3, [sp, #8]
 8018d30:	b9b3      	cbnz	r3, 8018d60 <_dtoa_r+0x910>
 8018d32:	9b03      	ldr	r3, [sp, #12]
 8018d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018d38:	b9a3      	cbnz	r3, 8018d64 <_dtoa_r+0x914>
 8018d3a:	9b03      	ldr	r3, [sp, #12]
 8018d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d40:	0d1b      	lsrs	r3, r3, #20
 8018d42:	051b      	lsls	r3, r3, #20
 8018d44:	b12b      	cbz	r3, 8018d52 <_dtoa_r+0x902>
 8018d46:	9b04      	ldr	r3, [sp, #16]
 8018d48:	3301      	adds	r3, #1
 8018d4a:	9304      	str	r3, [sp, #16]
 8018d4c:	f108 0801 	add.w	r8, r8, #1
 8018d50:	2301      	movs	r3, #1
 8018d52:	9306      	str	r3, [sp, #24]
 8018d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	f47f af74 	bne.w	8018c44 <_dtoa_r+0x7f4>
 8018d5c:	2001      	movs	r0, #1
 8018d5e:	e779      	b.n	8018c54 <_dtoa_r+0x804>
 8018d60:	2300      	movs	r3, #0
 8018d62:	e7f6      	b.n	8018d52 <_dtoa_r+0x902>
 8018d64:	9b02      	ldr	r3, [sp, #8]
 8018d66:	e7f4      	b.n	8018d52 <_dtoa_r+0x902>
 8018d68:	d085      	beq.n	8018c76 <_dtoa_r+0x826>
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	301c      	adds	r0, #28
 8018d6e:	e77d      	b.n	8018c6c <_dtoa_r+0x81c>
 8018d70:	40240000 	.word	0x40240000
 8018d74:	9b01      	ldr	r3, [sp, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	dc38      	bgt.n	8018dec <_dtoa_r+0x99c>
 8018d7a:	9b05      	ldr	r3, [sp, #20]
 8018d7c:	2b02      	cmp	r3, #2
 8018d7e:	dd35      	ble.n	8018dec <_dtoa_r+0x99c>
 8018d80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018d84:	f1b9 0f00 	cmp.w	r9, #0
 8018d88:	d10d      	bne.n	8018da6 <_dtoa_r+0x956>
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	464b      	mov	r3, r9
 8018d8e:	2205      	movs	r2, #5
 8018d90:	4620      	mov	r0, r4
 8018d92:	f000 fab5 	bl	8019300 <__multadd>
 8018d96:	4601      	mov	r1, r0
 8018d98:	4606      	mov	r6, r0
 8018d9a:	4658      	mov	r0, fp
 8018d9c:	f000 fccc 	bl	8019738 <__mcmp>
 8018da0:	2800      	cmp	r0, #0
 8018da2:	f73f adbd 	bgt.w	8018920 <_dtoa_r+0x4d0>
 8018da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018da8:	9d00      	ldr	r5, [sp, #0]
 8018daa:	ea6f 0a03 	mvn.w	sl, r3
 8018dae:	f04f 0800 	mov.w	r8, #0
 8018db2:	4631      	mov	r1, r6
 8018db4:	4620      	mov	r0, r4
 8018db6:	f000 fa81 	bl	80192bc <_Bfree>
 8018dba:	2f00      	cmp	r7, #0
 8018dbc:	f43f aeb4 	beq.w	8018b28 <_dtoa_r+0x6d8>
 8018dc0:	f1b8 0f00 	cmp.w	r8, #0
 8018dc4:	d005      	beq.n	8018dd2 <_dtoa_r+0x982>
 8018dc6:	45b8      	cmp	r8, r7
 8018dc8:	d003      	beq.n	8018dd2 <_dtoa_r+0x982>
 8018dca:	4641      	mov	r1, r8
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f000 fa75 	bl	80192bc <_Bfree>
 8018dd2:	4639      	mov	r1, r7
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	f000 fa71 	bl	80192bc <_Bfree>
 8018dda:	e6a5      	b.n	8018b28 <_dtoa_r+0x6d8>
 8018ddc:	2600      	movs	r6, #0
 8018dde:	4637      	mov	r7, r6
 8018de0:	e7e1      	b.n	8018da6 <_dtoa_r+0x956>
 8018de2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018de8:	4637      	mov	r7, r6
 8018dea:	e599      	b.n	8018920 <_dtoa_r+0x4d0>
 8018dec:	9b08      	ldr	r3, [sp, #32]
 8018dee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	f000 80fd 	beq.w	8018ff2 <_dtoa_r+0xba2>
 8018df8:	2d00      	cmp	r5, #0
 8018dfa:	dd05      	ble.n	8018e08 <_dtoa_r+0x9b8>
 8018dfc:	4639      	mov	r1, r7
 8018dfe:	462a      	mov	r2, r5
 8018e00:	4620      	mov	r0, r4
 8018e02:	f000 fc2d 	bl	8019660 <__lshift>
 8018e06:	4607      	mov	r7, r0
 8018e08:	9b06      	ldr	r3, [sp, #24]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d05c      	beq.n	8018ec8 <_dtoa_r+0xa78>
 8018e0e:	6879      	ldr	r1, [r7, #4]
 8018e10:	4620      	mov	r0, r4
 8018e12:	f000 fa13 	bl	801923c <_Balloc>
 8018e16:	4605      	mov	r5, r0
 8018e18:	b928      	cbnz	r0, 8018e26 <_dtoa_r+0x9d6>
 8018e1a:	4b80      	ldr	r3, [pc, #512]	; (801901c <_dtoa_r+0xbcc>)
 8018e1c:	4602      	mov	r2, r0
 8018e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018e22:	f7ff bb2e 	b.w	8018482 <_dtoa_r+0x32>
 8018e26:	693a      	ldr	r2, [r7, #16]
 8018e28:	3202      	adds	r2, #2
 8018e2a:	0092      	lsls	r2, r2, #2
 8018e2c:	f107 010c 	add.w	r1, r7, #12
 8018e30:	300c      	adds	r0, #12
 8018e32:	f7fe fc7b 	bl	801772c <memcpy>
 8018e36:	2201      	movs	r2, #1
 8018e38:	4629      	mov	r1, r5
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	f000 fc10 	bl	8019660 <__lshift>
 8018e40:	9b00      	ldr	r3, [sp, #0]
 8018e42:	3301      	adds	r3, #1
 8018e44:	9301      	str	r3, [sp, #4]
 8018e46:	9b00      	ldr	r3, [sp, #0]
 8018e48:	444b      	add	r3, r9
 8018e4a:	9307      	str	r3, [sp, #28]
 8018e4c:	9b02      	ldr	r3, [sp, #8]
 8018e4e:	f003 0301 	and.w	r3, r3, #1
 8018e52:	46b8      	mov	r8, r7
 8018e54:	9306      	str	r3, [sp, #24]
 8018e56:	4607      	mov	r7, r0
 8018e58:	9b01      	ldr	r3, [sp, #4]
 8018e5a:	4631      	mov	r1, r6
 8018e5c:	3b01      	subs	r3, #1
 8018e5e:	4658      	mov	r0, fp
 8018e60:	9302      	str	r3, [sp, #8]
 8018e62:	f7ff fa67 	bl	8018334 <quorem>
 8018e66:	4603      	mov	r3, r0
 8018e68:	3330      	adds	r3, #48	; 0x30
 8018e6a:	9004      	str	r0, [sp, #16]
 8018e6c:	4641      	mov	r1, r8
 8018e6e:	4658      	mov	r0, fp
 8018e70:	9308      	str	r3, [sp, #32]
 8018e72:	f000 fc61 	bl	8019738 <__mcmp>
 8018e76:	463a      	mov	r2, r7
 8018e78:	4681      	mov	r9, r0
 8018e7a:	4631      	mov	r1, r6
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	f000 fc77 	bl	8019770 <__mdiff>
 8018e82:	68c2      	ldr	r2, [r0, #12]
 8018e84:	9b08      	ldr	r3, [sp, #32]
 8018e86:	4605      	mov	r5, r0
 8018e88:	bb02      	cbnz	r2, 8018ecc <_dtoa_r+0xa7c>
 8018e8a:	4601      	mov	r1, r0
 8018e8c:	4658      	mov	r0, fp
 8018e8e:	f000 fc53 	bl	8019738 <__mcmp>
 8018e92:	9b08      	ldr	r3, [sp, #32]
 8018e94:	4602      	mov	r2, r0
 8018e96:	4629      	mov	r1, r5
 8018e98:	4620      	mov	r0, r4
 8018e9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018e9e:	f000 fa0d 	bl	80192bc <_Bfree>
 8018ea2:	9b05      	ldr	r3, [sp, #20]
 8018ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ea6:	9d01      	ldr	r5, [sp, #4]
 8018ea8:	ea43 0102 	orr.w	r1, r3, r2
 8018eac:	9b06      	ldr	r3, [sp, #24]
 8018eae:	430b      	orrs	r3, r1
 8018eb0:	9b08      	ldr	r3, [sp, #32]
 8018eb2:	d10d      	bne.n	8018ed0 <_dtoa_r+0xa80>
 8018eb4:	2b39      	cmp	r3, #57	; 0x39
 8018eb6:	d029      	beq.n	8018f0c <_dtoa_r+0xabc>
 8018eb8:	f1b9 0f00 	cmp.w	r9, #0
 8018ebc:	dd01      	ble.n	8018ec2 <_dtoa_r+0xa72>
 8018ebe:	9b04      	ldr	r3, [sp, #16]
 8018ec0:	3331      	adds	r3, #49	; 0x31
 8018ec2:	9a02      	ldr	r2, [sp, #8]
 8018ec4:	7013      	strb	r3, [r2, #0]
 8018ec6:	e774      	b.n	8018db2 <_dtoa_r+0x962>
 8018ec8:	4638      	mov	r0, r7
 8018eca:	e7b9      	b.n	8018e40 <_dtoa_r+0x9f0>
 8018ecc:	2201      	movs	r2, #1
 8018ece:	e7e2      	b.n	8018e96 <_dtoa_r+0xa46>
 8018ed0:	f1b9 0f00 	cmp.w	r9, #0
 8018ed4:	db06      	blt.n	8018ee4 <_dtoa_r+0xa94>
 8018ed6:	9905      	ldr	r1, [sp, #20]
 8018ed8:	ea41 0909 	orr.w	r9, r1, r9
 8018edc:	9906      	ldr	r1, [sp, #24]
 8018ede:	ea59 0101 	orrs.w	r1, r9, r1
 8018ee2:	d120      	bne.n	8018f26 <_dtoa_r+0xad6>
 8018ee4:	2a00      	cmp	r2, #0
 8018ee6:	ddec      	ble.n	8018ec2 <_dtoa_r+0xa72>
 8018ee8:	4659      	mov	r1, fp
 8018eea:	2201      	movs	r2, #1
 8018eec:	4620      	mov	r0, r4
 8018eee:	9301      	str	r3, [sp, #4]
 8018ef0:	f000 fbb6 	bl	8019660 <__lshift>
 8018ef4:	4631      	mov	r1, r6
 8018ef6:	4683      	mov	fp, r0
 8018ef8:	f000 fc1e 	bl	8019738 <__mcmp>
 8018efc:	2800      	cmp	r0, #0
 8018efe:	9b01      	ldr	r3, [sp, #4]
 8018f00:	dc02      	bgt.n	8018f08 <_dtoa_r+0xab8>
 8018f02:	d1de      	bne.n	8018ec2 <_dtoa_r+0xa72>
 8018f04:	07da      	lsls	r2, r3, #31
 8018f06:	d5dc      	bpl.n	8018ec2 <_dtoa_r+0xa72>
 8018f08:	2b39      	cmp	r3, #57	; 0x39
 8018f0a:	d1d8      	bne.n	8018ebe <_dtoa_r+0xa6e>
 8018f0c:	9a02      	ldr	r2, [sp, #8]
 8018f0e:	2339      	movs	r3, #57	; 0x39
 8018f10:	7013      	strb	r3, [r2, #0]
 8018f12:	462b      	mov	r3, r5
 8018f14:	461d      	mov	r5, r3
 8018f16:	3b01      	subs	r3, #1
 8018f18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018f1c:	2a39      	cmp	r2, #57	; 0x39
 8018f1e:	d050      	beq.n	8018fc2 <_dtoa_r+0xb72>
 8018f20:	3201      	adds	r2, #1
 8018f22:	701a      	strb	r2, [r3, #0]
 8018f24:	e745      	b.n	8018db2 <_dtoa_r+0x962>
 8018f26:	2a00      	cmp	r2, #0
 8018f28:	dd03      	ble.n	8018f32 <_dtoa_r+0xae2>
 8018f2a:	2b39      	cmp	r3, #57	; 0x39
 8018f2c:	d0ee      	beq.n	8018f0c <_dtoa_r+0xabc>
 8018f2e:	3301      	adds	r3, #1
 8018f30:	e7c7      	b.n	8018ec2 <_dtoa_r+0xa72>
 8018f32:	9a01      	ldr	r2, [sp, #4]
 8018f34:	9907      	ldr	r1, [sp, #28]
 8018f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018f3a:	428a      	cmp	r2, r1
 8018f3c:	d02a      	beq.n	8018f94 <_dtoa_r+0xb44>
 8018f3e:	4659      	mov	r1, fp
 8018f40:	2300      	movs	r3, #0
 8018f42:	220a      	movs	r2, #10
 8018f44:	4620      	mov	r0, r4
 8018f46:	f000 f9db 	bl	8019300 <__multadd>
 8018f4a:	45b8      	cmp	r8, r7
 8018f4c:	4683      	mov	fp, r0
 8018f4e:	f04f 0300 	mov.w	r3, #0
 8018f52:	f04f 020a 	mov.w	r2, #10
 8018f56:	4641      	mov	r1, r8
 8018f58:	4620      	mov	r0, r4
 8018f5a:	d107      	bne.n	8018f6c <_dtoa_r+0xb1c>
 8018f5c:	f000 f9d0 	bl	8019300 <__multadd>
 8018f60:	4680      	mov	r8, r0
 8018f62:	4607      	mov	r7, r0
 8018f64:	9b01      	ldr	r3, [sp, #4]
 8018f66:	3301      	adds	r3, #1
 8018f68:	9301      	str	r3, [sp, #4]
 8018f6a:	e775      	b.n	8018e58 <_dtoa_r+0xa08>
 8018f6c:	f000 f9c8 	bl	8019300 <__multadd>
 8018f70:	4639      	mov	r1, r7
 8018f72:	4680      	mov	r8, r0
 8018f74:	2300      	movs	r3, #0
 8018f76:	220a      	movs	r2, #10
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f000 f9c1 	bl	8019300 <__multadd>
 8018f7e:	4607      	mov	r7, r0
 8018f80:	e7f0      	b.n	8018f64 <_dtoa_r+0xb14>
 8018f82:	f1b9 0f00 	cmp.w	r9, #0
 8018f86:	9a00      	ldr	r2, [sp, #0]
 8018f88:	bfcc      	ite	gt
 8018f8a:	464d      	movgt	r5, r9
 8018f8c:	2501      	movle	r5, #1
 8018f8e:	4415      	add	r5, r2
 8018f90:	f04f 0800 	mov.w	r8, #0
 8018f94:	4659      	mov	r1, fp
 8018f96:	2201      	movs	r2, #1
 8018f98:	4620      	mov	r0, r4
 8018f9a:	9301      	str	r3, [sp, #4]
 8018f9c:	f000 fb60 	bl	8019660 <__lshift>
 8018fa0:	4631      	mov	r1, r6
 8018fa2:	4683      	mov	fp, r0
 8018fa4:	f000 fbc8 	bl	8019738 <__mcmp>
 8018fa8:	2800      	cmp	r0, #0
 8018faa:	dcb2      	bgt.n	8018f12 <_dtoa_r+0xac2>
 8018fac:	d102      	bne.n	8018fb4 <_dtoa_r+0xb64>
 8018fae:	9b01      	ldr	r3, [sp, #4]
 8018fb0:	07db      	lsls	r3, r3, #31
 8018fb2:	d4ae      	bmi.n	8018f12 <_dtoa_r+0xac2>
 8018fb4:	462b      	mov	r3, r5
 8018fb6:	461d      	mov	r5, r3
 8018fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018fbc:	2a30      	cmp	r2, #48	; 0x30
 8018fbe:	d0fa      	beq.n	8018fb6 <_dtoa_r+0xb66>
 8018fc0:	e6f7      	b.n	8018db2 <_dtoa_r+0x962>
 8018fc2:	9a00      	ldr	r2, [sp, #0]
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	d1a5      	bne.n	8018f14 <_dtoa_r+0xac4>
 8018fc8:	f10a 0a01 	add.w	sl, sl, #1
 8018fcc:	2331      	movs	r3, #49	; 0x31
 8018fce:	e779      	b.n	8018ec4 <_dtoa_r+0xa74>
 8018fd0:	4b13      	ldr	r3, [pc, #76]	; (8019020 <_dtoa_r+0xbd0>)
 8018fd2:	f7ff baaf 	b.w	8018534 <_dtoa_r+0xe4>
 8018fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	f47f aa86 	bne.w	80184ea <_dtoa_r+0x9a>
 8018fde:	4b11      	ldr	r3, [pc, #68]	; (8019024 <_dtoa_r+0xbd4>)
 8018fe0:	f7ff baa8 	b.w	8018534 <_dtoa_r+0xe4>
 8018fe4:	f1b9 0f00 	cmp.w	r9, #0
 8018fe8:	dc03      	bgt.n	8018ff2 <_dtoa_r+0xba2>
 8018fea:	9b05      	ldr	r3, [sp, #20]
 8018fec:	2b02      	cmp	r3, #2
 8018fee:	f73f aec9 	bgt.w	8018d84 <_dtoa_r+0x934>
 8018ff2:	9d00      	ldr	r5, [sp, #0]
 8018ff4:	4631      	mov	r1, r6
 8018ff6:	4658      	mov	r0, fp
 8018ff8:	f7ff f99c 	bl	8018334 <quorem>
 8018ffc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019000:	f805 3b01 	strb.w	r3, [r5], #1
 8019004:	9a00      	ldr	r2, [sp, #0]
 8019006:	1aaa      	subs	r2, r5, r2
 8019008:	4591      	cmp	r9, r2
 801900a:	ddba      	ble.n	8018f82 <_dtoa_r+0xb32>
 801900c:	4659      	mov	r1, fp
 801900e:	2300      	movs	r3, #0
 8019010:	220a      	movs	r2, #10
 8019012:	4620      	mov	r0, r4
 8019014:	f000 f974 	bl	8019300 <__multadd>
 8019018:	4683      	mov	fp, r0
 801901a:	e7eb      	b.n	8018ff4 <_dtoa_r+0xba4>
 801901c:	0801acb3 	.word	0x0801acb3
 8019020:	0801ac0c 	.word	0x0801ac0c
 8019024:	0801ac30 	.word	0x0801ac30

08019028 <std>:
 8019028:	2300      	movs	r3, #0
 801902a:	b510      	push	{r4, lr}
 801902c:	4604      	mov	r4, r0
 801902e:	e9c0 3300 	strd	r3, r3, [r0]
 8019032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019036:	6083      	str	r3, [r0, #8]
 8019038:	8181      	strh	r1, [r0, #12]
 801903a:	6643      	str	r3, [r0, #100]	; 0x64
 801903c:	81c2      	strh	r2, [r0, #14]
 801903e:	6183      	str	r3, [r0, #24]
 8019040:	4619      	mov	r1, r3
 8019042:	2208      	movs	r2, #8
 8019044:	305c      	adds	r0, #92	; 0x5c
 8019046:	f7fe fb99 	bl	801777c <memset>
 801904a:	4b05      	ldr	r3, [pc, #20]	; (8019060 <std+0x38>)
 801904c:	6263      	str	r3, [r4, #36]	; 0x24
 801904e:	4b05      	ldr	r3, [pc, #20]	; (8019064 <std+0x3c>)
 8019050:	62a3      	str	r3, [r4, #40]	; 0x28
 8019052:	4b05      	ldr	r3, [pc, #20]	; (8019068 <std+0x40>)
 8019054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019056:	4b05      	ldr	r3, [pc, #20]	; (801906c <std+0x44>)
 8019058:	6224      	str	r4, [r4, #32]
 801905a:	6323      	str	r3, [r4, #48]	; 0x30
 801905c:	bd10      	pop	{r4, pc}
 801905e:	bf00      	nop
 8019060:	08019ec1 	.word	0x08019ec1
 8019064:	08019ee3 	.word	0x08019ee3
 8019068:	08019f1b 	.word	0x08019f1b
 801906c:	08019f3f 	.word	0x08019f3f

08019070 <_cleanup_r>:
 8019070:	4901      	ldr	r1, [pc, #4]	; (8019078 <_cleanup_r+0x8>)
 8019072:	f000 b8af 	b.w	80191d4 <_fwalk_reent>
 8019076:	bf00      	nop
 8019078:	0801a255 	.word	0x0801a255

0801907c <__sfmoreglue>:
 801907c:	b570      	push	{r4, r5, r6, lr}
 801907e:	1e4a      	subs	r2, r1, #1
 8019080:	2568      	movs	r5, #104	; 0x68
 8019082:	4355      	muls	r5, r2
 8019084:	460e      	mov	r6, r1
 8019086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801908a:	f7fe fbcf 	bl	801782c <_malloc_r>
 801908e:	4604      	mov	r4, r0
 8019090:	b140      	cbz	r0, 80190a4 <__sfmoreglue+0x28>
 8019092:	2100      	movs	r1, #0
 8019094:	e9c0 1600 	strd	r1, r6, [r0]
 8019098:	300c      	adds	r0, #12
 801909a:	60a0      	str	r0, [r4, #8]
 801909c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80190a0:	f7fe fb6c 	bl	801777c <memset>
 80190a4:	4620      	mov	r0, r4
 80190a6:	bd70      	pop	{r4, r5, r6, pc}

080190a8 <__sfp_lock_acquire>:
 80190a8:	4801      	ldr	r0, [pc, #4]	; (80190b0 <__sfp_lock_acquire+0x8>)
 80190aa:	f000 b8b8 	b.w	801921e <__retarget_lock_acquire_recursive>
 80190ae:	bf00      	nop
 80190b0:	20001a00 	.word	0x20001a00

080190b4 <__sfp_lock_release>:
 80190b4:	4801      	ldr	r0, [pc, #4]	; (80190bc <__sfp_lock_release+0x8>)
 80190b6:	f000 b8b3 	b.w	8019220 <__retarget_lock_release_recursive>
 80190ba:	bf00      	nop
 80190bc:	20001a00 	.word	0x20001a00

080190c0 <__sinit_lock_acquire>:
 80190c0:	4801      	ldr	r0, [pc, #4]	; (80190c8 <__sinit_lock_acquire+0x8>)
 80190c2:	f000 b8ac 	b.w	801921e <__retarget_lock_acquire_recursive>
 80190c6:	bf00      	nop
 80190c8:	200019fb 	.word	0x200019fb

080190cc <__sinit_lock_release>:
 80190cc:	4801      	ldr	r0, [pc, #4]	; (80190d4 <__sinit_lock_release+0x8>)
 80190ce:	f000 b8a7 	b.w	8019220 <__retarget_lock_release_recursive>
 80190d2:	bf00      	nop
 80190d4:	200019fb 	.word	0x200019fb

080190d8 <__sinit>:
 80190d8:	b510      	push	{r4, lr}
 80190da:	4604      	mov	r4, r0
 80190dc:	f7ff fff0 	bl	80190c0 <__sinit_lock_acquire>
 80190e0:	69a3      	ldr	r3, [r4, #24]
 80190e2:	b11b      	cbz	r3, 80190ec <__sinit+0x14>
 80190e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190e8:	f7ff bff0 	b.w	80190cc <__sinit_lock_release>
 80190ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80190f0:	6523      	str	r3, [r4, #80]	; 0x50
 80190f2:	4b13      	ldr	r3, [pc, #76]	; (8019140 <__sinit+0x68>)
 80190f4:	4a13      	ldr	r2, [pc, #76]	; (8019144 <__sinit+0x6c>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80190fa:	42a3      	cmp	r3, r4
 80190fc:	bf04      	itt	eq
 80190fe:	2301      	moveq	r3, #1
 8019100:	61a3      	streq	r3, [r4, #24]
 8019102:	4620      	mov	r0, r4
 8019104:	f000 f820 	bl	8019148 <__sfp>
 8019108:	6060      	str	r0, [r4, #4]
 801910a:	4620      	mov	r0, r4
 801910c:	f000 f81c 	bl	8019148 <__sfp>
 8019110:	60a0      	str	r0, [r4, #8]
 8019112:	4620      	mov	r0, r4
 8019114:	f000 f818 	bl	8019148 <__sfp>
 8019118:	2200      	movs	r2, #0
 801911a:	60e0      	str	r0, [r4, #12]
 801911c:	2104      	movs	r1, #4
 801911e:	6860      	ldr	r0, [r4, #4]
 8019120:	f7ff ff82 	bl	8019028 <std>
 8019124:	68a0      	ldr	r0, [r4, #8]
 8019126:	2201      	movs	r2, #1
 8019128:	2109      	movs	r1, #9
 801912a:	f7ff ff7d 	bl	8019028 <std>
 801912e:	68e0      	ldr	r0, [r4, #12]
 8019130:	2202      	movs	r2, #2
 8019132:	2112      	movs	r1, #18
 8019134:	f7ff ff78 	bl	8019028 <std>
 8019138:	2301      	movs	r3, #1
 801913a:	61a3      	str	r3, [r4, #24]
 801913c:	e7d2      	b.n	80190e4 <__sinit+0xc>
 801913e:	bf00      	nop
 8019140:	0801abf8 	.word	0x0801abf8
 8019144:	08019071 	.word	0x08019071

08019148 <__sfp>:
 8019148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914a:	4607      	mov	r7, r0
 801914c:	f7ff ffac 	bl	80190a8 <__sfp_lock_acquire>
 8019150:	4b1e      	ldr	r3, [pc, #120]	; (80191cc <__sfp+0x84>)
 8019152:	681e      	ldr	r6, [r3, #0]
 8019154:	69b3      	ldr	r3, [r6, #24]
 8019156:	b913      	cbnz	r3, 801915e <__sfp+0x16>
 8019158:	4630      	mov	r0, r6
 801915a:	f7ff ffbd 	bl	80190d8 <__sinit>
 801915e:	3648      	adds	r6, #72	; 0x48
 8019160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019164:	3b01      	subs	r3, #1
 8019166:	d503      	bpl.n	8019170 <__sfp+0x28>
 8019168:	6833      	ldr	r3, [r6, #0]
 801916a:	b30b      	cbz	r3, 80191b0 <__sfp+0x68>
 801916c:	6836      	ldr	r6, [r6, #0]
 801916e:	e7f7      	b.n	8019160 <__sfp+0x18>
 8019170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019174:	b9d5      	cbnz	r5, 80191ac <__sfp+0x64>
 8019176:	4b16      	ldr	r3, [pc, #88]	; (80191d0 <__sfp+0x88>)
 8019178:	60e3      	str	r3, [r4, #12]
 801917a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801917e:	6665      	str	r5, [r4, #100]	; 0x64
 8019180:	f000 f84c 	bl	801921c <__retarget_lock_init_recursive>
 8019184:	f7ff ff96 	bl	80190b4 <__sfp_lock_release>
 8019188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801918c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019190:	6025      	str	r5, [r4, #0]
 8019192:	61a5      	str	r5, [r4, #24]
 8019194:	2208      	movs	r2, #8
 8019196:	4629      	mov	r1, r5
 8019198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801919c:	f7fe faee 	bl	801777c <memset>
 80191a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80191a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80191a8:	4620      	mov	r0, r4
 80191aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ac:	3468      	adds	r4, #104	; 0x68
 80191ae:	e7d9      	b.n	8019164 <__sfp+0x1c>
 80191b0:	2104      	movs	r1, #4
 80191b2:	4638      	mov	r0, r7
 80191b4:	f7ff ff62 	bl	801907c <__sfmoreglue>
 80191b8:	4604      	mov	r4, r0
 80191ba:	6030      	str	r0, [r6, #0]
 80191bc:	2800      	cmp	r0, #0
 80191be:	d1d5      	bne.n	801916c <__sfp+0x24>
 80191c0:	f7ff ff78 	bl	80190b4 <__sfp_lock_release>
 80191c4:	230c      	movs	r3, #12
 80191c6:	603b      	str	r3, [r7, #0]
 80191c8:	e7ee      	b.n	80191a8 <__sfp+0x60>
 80191ca:	bf00      	nop
 80191cc:	0801abf8 	.word	0x0801abf8
 80191d0:	ffff0001 	.word	0xffff0001

080191d4 <_fwalk_reent>:
 80191d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191d8:	4606      	mov	r6, r0
 80191da:	4688      	mov	r8, r1
 80191dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80191e0:	2700      	movs	r7, #0
 80191e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80191e6:	f1b9 0901 	subs.w	r9, r9, #1
 80191ea:	d505      	bpl.n	80191f8 <_fwalk_reent+0x24>
 80191ec:	6824      	ldr	r4, [r4, #0]
 80191ee:	2c00      	cmp	r4, #0
 80191f0:	d1f7      	bne.n	80191e2 <_fwalk_reent+0xe>
 80191f2:	4638      	mov	r0, r7
 80191f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191f8:	89ab      	ldrh	r3, [r5, #12]
 80191fa:	2b01      	cmp	r3, #1
 80191fc:	d907      	bls.n	801920e <_fwalk_reent+0x3a>
 80191fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019202:	3301      	adds	r3, #1
 8019204:	d003      	beq.n	801920e <_fwalk_reent+0x3a>
 8019206:	4629      	mov	r1, r5
 8019208:	4630      	mov	r0, r6
 801920a:	47c0      	blx	r8
 801920c:	4307      	orrs	r7, r0
 801920e:	3568      	adds	r5, #104	; 0x68
 8019210:	e7e9      	b.n	80191e6 <_fwalk_reent+0x12>
	...

08019214 <_localeconv_r>:
 8019214:	4800      	ldr	r0, [pc, #0]	; (8019218 <_localeconv_r+0x4>)
 8019216:	4770      	bx	lr
 8019218:	20000244 	.word	0x20000244

0801921c <__retarget_lock_init_recursive>:
 801921c:	4770      	bx	lr

0801921e <__retarget_lock_acquire_recursive>:
 801921e:	4770      	bx	lr

08019220 <__retarget_lock_release_recursive>:
 8019220:	4770      	bx	lr
	...

08019224 <__malloc_lock>:
 8019224:	4801      	ldr	r0, [pc, #4]	; (801922c <__malloc_lock+0x8>)
 8019226:	f7ff bffa 	b.w	801921e <__retarget_lock_acquire_recursive>
 801922a:	bf00      	nop
 801922c:	200019fc 	.word	0x200019fc

08019230 <__malloc_unlock>:
 8019230:	4801      	ldr	r0, [pc, #4]	; (8019238 <__malloc_unlock+0x8>)
 8019232:	f7ff bff5 	b.w	8019220 <__retarget_lock_release_recursive>
 8019236:	bf00      	nop
 8019238:	200019fc 	.word	0x200019fc

0801923c <_Balloc>:
 801923c:	b570      	push	{r4, r5, r6, lr}
 801923e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019240:	4604      	mov	r4, r0
 8019242:	460d      	mov	r5, r1
 8019244:	b976      	cbnz	r6, 8019264 <_Balloc+0x28>
 8019246:	2010      	movs	r0, #16
 8019248:	f7fe fa60 	bl	801770c <malloc>
 801924c:	4602      	mov	r2, r0
 801924e:	6260      	str	r0, [r4, #36]	; 0x24
 8019250:	b920      	cbnz	r0, 801925c <_Balloc+0x20>
 8019252:	4b18      	ldr	r3, [pc, #96]	; (80192b4 <_Balloc+0x78>)
 8019254:	4818      	ldr	r0, [pc, #96]	; (80192b8 <_Balloc+0x7c>)
 8019256:	2166      	movs	r1, #102	; 0x66
 8019258:	f000 ff48 	bl	801a0ec <__assert_func>
 801925c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019260:	6006      	str	r6, [r0, #0]
 8019262:	60c6      	str	r6, [r0, #12]
 8019264:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019266:	68f3      	ldr	r3, [r6, #12]
 8019268:	b183      	cbz	r3, 801928c <_Balloc+0x50>
 801926a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801926c:	68db      	ldr	r3, [r3, #12]
 801926e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019272:	b9b8      	cbnz	r0, 80192a4 <_Balloc+0x68>
 8019274:	2101      	movs	r1, #1
 8019276:	fa01 f605 	lsl.w	r6, r1, r5
 801927a:	1d72      	adds	r2, r6, #5
 801927c:	0092      	lsls	r2, r2, #2
 801927e:	4620      	mov	r0, r4
 8019280:	f000 fb5a 	bl	8019938 <_calloc_r>
 8019284:	b160      	cbz	r0, 80192a0 <_Balloc+0x64>
 8019286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801928a:	e00e      	b.n	80192aa <_Balloc+0x6e>
 801928c:	2221      	movs	r2, #33	; 0x21
 801928e:	2104      	movs	r1, #4
 8019290:	4620      	mov	r0, r4
 8019292:	f000 fb51 	bl	8019938 <_calloc_r>
 8019296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019298:	60f0      	str	r0, [r6, #12]
 801929a:	68db      	ldr	r3, [r3, #12]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d1e4      	bne.n	801926a <_Balloc+0x2e>
 80192a0:	2000      	movs	r0, #0
 80192a2:	bd70      	pop	{r4, r5, r6, pc}
 80192a4:	6802      	ldr	r2, [r0, #0]
 80192a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192aa:	2300      	movs	r3, #0
 80192ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192b0:	e7f7      	b.n	80192a2 <_Balloc+0x66>
 80192b2:	bf00      	nop
 80192b4:	0801ac3d 	.word	0x0801ac3d
 80192b8:	0801ad24 	.word	0x0801ad24

080192bc <_Bfree>:
 80192bc:	b570      	push	{r4, r5, r6, lr}
 80192be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80192c0:	4605      	mov	r5, r0
 80192c2:	460c      	mov	r4, r1
 80192c4:	b976      	cbnz	r6, 80192e4 <_Bfree+0x28>
 80192c6:	2010      	movs	r0, #16
 80192c8:	f7fe fa20 	bl	801770c <malloc>
 80192cc:	4602      	mov	r2, r0
 80192ce:	6268      	str	r0, [r5, #36]	; 0x24
 80192d0:	b920      	cbnz	r0, 80192dc <_Bfree+0x20>
 80192d2:	4b09      	ldr	r3, [pc, #36]	; (80192f8 <_Bfree+0x3c>)
 80192d4:	4809      	ldr	r0, [pc, #36]	; (80192fc <_Bfree+0x40>)
 80192d6:	218a      	movs	r1, #138	; 0x8a
 80192d8:	f000 ff08 	bl	801a0ec <__assert_func>
 80192dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192e0:	6006      	str	r6, [r0, #0]
 80192e2:	60c6      	str	r6, [r0, #12]
 80192e4:	b13c      	cbz	r4, 80192f6 <_Bfree+0x3a>
 80192e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80192e8:	6862      	ldr	r2, [r4, #4]
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80192f0:	6021      	str	r1, [r4, #0]
 80192f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80192f6:	bd70      	pop	{r4, r5, r6, pc}
 80192f8:	0801ac3d 	.word	0x0801ac3d
 80192fc:	0801ad24 	.word	0x0801ad24

08019300 <__multadd>:
 8019300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019304:	690e      	ldr	r6, [r1, #16]
 8019306:	4607      	mov	r7, r0
 8019308:	4698      	mov	r8, r3
 801930a:	460c      	mov	r4, r1
 801930c:	f101 0014 	add.w	r0, r1, #20
 8019310:	2300      	movs	r3, #0
 8019312:	6805      	ldr	r5, [r0, #0]
 8019314:	b2a9      	uxth	r1, r5
 8019316:	fb02 8101 	mla	r1, r2, r1, r8
 801931a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801931e:	0c2d      	lsrs	r5, r5, #16
 8019320:	fb02 c505 	mla	r5, r2, r5, ip
 8019324:	b289      	uxth	r1, r1
 8019326:	3301      	adds	r3, #1
 8019328:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801932c:	429e      	cmp	r6, r3
 801932e:	f840 1b04 	str.w	r1, [r0], #4
 8019332:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019336:	dcec      	bgt.n	8019312 <__multadd+0x12>
 8019338:	f1b8 0f00 	cmp.w	r8, #0
 801933c:	d022      	beq.n	8019384 <__multadd+0x84>
 801933e:	68a3      	ldr	r3, [r4, #8]
 8019340:	42b3      	cmp	r3, r6
 8019342:	dc19      	bgt.n	8019378 <__multadd+0x78>
 8019344:	6861      	ldr	r1, [r4, #4]
 8019346:	4638      	mov	r0, r7
 8019348:	3101      	adds	r1, #1
 801934a:	f7ff ff77 	bl	801923c <_Balloc>
 801934e:	4605      	mov	r5, r0
 8019350:	b928      	cbnz	r0, 801935e <__multadd+0x5e>
 8019352:	4602      	mov	r2, r0
 8019354:	4b0d      	ldr	r3, [pc, #52]	; (801938c <__multadd+0x8c>)
 8019356:	480e      	ldr	r0, [pc, #56]	; (8019390 <__multadd+0x90>)
 8019358:	21b5      	movs	r1, #181	; 0xb5
 801935a:	f000 fec7 	bl	801a0ec <__assert_func>
 801935e:	6922      	ldr	r2, [r4, #16]
 8019360:	3202      	adds	r2, #2
 8019362:	f104 010c 	add.w	r1, r4, #12
 8019366:	0092      	lsls	r2, r2, #2
 8019368:	300c      	adds	r0, #12
 801936a:	f7fe f9df 	bl	801772c <memcpy>
 801936e:	4621      	mov	r1, r4
 8019370:	4638      	mov	r0, r7
 8019372:	f7ff ffa3 	bl	80192bc <_Bfree>
 8019376:	462c      	mov	r4, r5
 8019378:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801937c:	3601      	adds	r6, #1
 801937e:	f8c3 8014 	str.w	r8, [r3, #20]
 8019382:	6126      	str	r6, [r4, #16]
 8019384:	4620      	mov	r0, r4
 8019386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801938a:	bf00      	nop
 801938c:	0801acb3 	.word	0x0801acb3
 8019390:	0801ad24 	.word	0x0801ad24

08019394 <__hi0bits>:
 8019394:	0c03      	lsrs	r3, r0, #16
 8019396:	041b      	lsls	r3, r3, #16
 8019398:	b9d3      	cbnz	r3, 80193d0 <__hi0bits+0x3c>
 801939a:	0400      	lsls	r0, r0, #16
 801939c:	2310      	movs	r3, #16
 801939e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80193a2:	bf04      	itt	eq
 80193a4:	0200      	lsleq	r0, r0, #8
 80193a6:	3308      	addeq	r3, #8
 80193a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80193ac:	bf04      	itt	eq
 80193ae:	0100      	lsleq	r0, r0, #4
 80193b0:	3304      	addeq	r3, #4
 80193b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80193b6:	bf04      	itt	eq
 80193b8:	0080      	lsleq	r0, r0, #2
 80193ba:	3302      	addeq	r3, #2
 80193bc:	2800      	cmp	r0, #0
 80193be:	db05      	blt.n	80193cc <__hi0bits+0x38>
 80193c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80193c4:	f103 0301 	add.w	r3, r3, #1
 80193c8:	bf08      	it	eq
 80193ca:	2320      	moveq	r3, #32
 80193cc:	4618      	mov	r0, r3
 80193ce:	4770      	bx	lr
 80193d0:	2300      	movs	r3, #0
 80193d2:	e7e4      	b.n	801939e <__hi0bits+0xa>

080193d4 <__lo0bits>:
 80193d4:	6803      	ldr	r3, [r0, #0]
 80193d6:	f013 0207 	ands.w	r2, r3, #7
 80193da:	4601      	mov	r1, r0
 80193dc:	d00b      	beq.n	80193f6 <__lo0bits+0x22>
 80193de:	07da      	lsls	r2, r3, #31
 80193e0:	d424      	bmi.n	801942c <__lo0bits+0x58>
 80193e2:	0798      	lsls	r0, r3, #30
 80193e4:	bf49      	itett	mi
 80193e6:	085b      	lsrmi	r3, r3, #1
 80193e8:	089b      	lsrpl	r3, r3, #2
 80193ea:	2001      	movmi	r0, #1
 80193ec:	600b      	strmi	r3, [r1, #0]
 80193ee:	bf5c      	itt	pl
 80193f0:	600b      	strpl	r3, [r1, #0]
 80193f2:	2002      	movpl	r0, #2
 80193f4:	4770      	bx	lr
 80193f6:	b298      	uxth	r0, r3
 80193f8:	b9b0      	cbnz	r0, 8019428 <__lo0bits+0x54>
 80193fa:	0c1b      	lsrs	r3, r3, #16
 80193fc:	2010      	movs	r0, #16
 80193fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019402:	bf04      	itt	eq
 8019404:	0a1b      	lsreq	r3, r3, #8
 8019406:	3008      	addeq	r0, #8
 8019408:	071a      	lsls	r2, r3, #28
 801940a:	bf04      	itt	eq
 801940c:	091b      	lsreq	r3, r3, #4
 801940e:	3004      	addeq	r0, #4
 8019410:	079a      	lsls	r2, r3, #30
 8019412:	bf04      	itt	eq
 8019414:	089b      	lsreq	r3, r3, #2
 8019416:	3002      	addeq	r0, #2
 8019418:	07da      	lsls	r2, r3, #31
 801941a:	d403      	bmi.n	8019424 <__lo0bits+0x50>
 801941c:	085b      	lsrs	r3, r3, #1
 801941e:	f100 0001 	add.w	r0, r0, #1
 8019422:	d005      	beq.n	8019430 <__lo0bits+0x5c>
 8019424:	600b      	str	r3, [r1, #0]
 8019426:	4770      	bx	lr
 8019428:	4610      	mov	r0, r2
 801942a:	e7e8      	b.n	80193fe <__lo0bits+0x2a>
 801942c:	2000      	movs	r0, #0
 801942e:	4770      	bx	lr
 8019430:	2020      	movs	r0, #32
 8019432:	4770      	bx	lr

08019434 <__i2b>:
 8019434:	b510      	push	{r4, lr}
 8019436:	460c      	mov	r4, r1
 8019438:	2101      	movs	r1, #1
 801943a:	f7ff feff 	bl	801923c <_Balloc>
 801943e:	4602      	mov	r2, r0
 8019440:	b928      	cbnz	r0, 801944e <__i2b+0x1a>
 8019442:	4b05      	ldr	r3, [pc, #20]	; (8019458 <__i2b+0x24>)
 8019444:	4805      	ldr	r0, [pc, #20]	; (801945c <__i2b+0x28>)
 8019446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801944a:	f000 fe4f 	bl	801a0ec <__assert_func>
 801944e:	2301      	movs	r3, #1
 8019450:	6144      	str	r4, [r0, #20]
 8019452:	6103      	str	r3, [r0, #16]
 8019454:	bd10      	pop	{r4, pc}
 8019456:	bf00      	nop
 8019458:	0801acb3 	.word	0x0801acb3
 801945c:	0801ad24 	.word	0x0801ad24

08019460 <__multiply>:
 8019460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019464:	4614      	mov	r4, r2
 8019466:	690a      	ldr	r2, [r1, #16]
 8019468:	6923      	ldr	r3, [r4, #16]
 801946a:	429a      	cmp	r2, r3
 801946c:	bfb8      	it	lt
 801946e:	460b      	movlt	r3, r1
 8019470:	460d      	mov	r5, r1
 8019472:	bfbc      	itt	lt
 8019474:	4625      	movlt	r5, r4
 8019476:	461c      	movlt	r4, r3
 8019478:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801947c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019480:	68ab      	ldr	r3, [r5, #8]
 8019482:	6869      	ldr	r1, [r5, #4]
 8019484:	eb0a 0709 	add.w	r7, sl, r9
 8019488:	42bb      	cmp	r3, r7
 801948a:	b085      	sub	sp, #20
 801948c:	bfb8      	it	lt
 801948e:	3101      	addlt	r1, #1
 8019490:	f7ff fed4 	bl	801923c <_Balloc>
 8019494:	b930      	cbnz	r0, 80194a4 <__multiply+0x44>
 8019496:	4602      	mov	r2, r0
 8019498:	4b42      	ldr	r3, [pc, #264]	; (80195a4 <__multiply+0x144>)
 801949a:	4843      	ldr	r0, [pc, #268]	; (80195a8 <__multiply+0x148>)
 801949c:	f240 115d 	movw	r1, #349	; 0x15d
 80194a0:	f000 fe24 	bl	801a0ec <__assert_func>
 80194a4:	f100 0614 	add.w	r6, r0, #20
 80194a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80194ac:	4633      	mov	r3, r6
 80194ae:	2200      	movs	r2, #0
 80194b0:	4543      	cmp	r3, r8
 80194b2:	d31e      	bcc.n	80194f2 <__multiply+0x92>
 80194b4:	f105 0c14 	add.w	ip, r5, #20
 80194b8:	f104 0314 	add.w	r3, r4, #20
 80194bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80194c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80194c4:	9202      	str	r2, [sp, #8]
 80194c6:	ebac 0205 	sub.w	r2, ip, r5
 80194ca:	3a15      	subs	r2, #21
 80194cc:	f022 0203 	bic.w	r2, r2, #3
 80194d0:	3204      	adds	r2, #4
 80194d2:	f105 0115 	add.w	r1, r5, #21
 80194d6:	458c      	cmp	ip, r1
 80194d8:	bf38      	it	cc
 80194da:	2204      	movcc	r2, #4
 80194dc:	9201      	str	r2, [sp, #4]
 80194de:	9a02      	ldr	r2, [sp, #8]
 80194e0:	9303      	str	r3, [sp, #12]
 80194e2:	429a      	cmp	r2, r3
 80194e4:	d808      	bhi.n	80194f8 <__multiply+0x98>
 80194e6:	2f00      	cmp	r7, #0
 80194e8:	dc55      	bgt.n	8019596 <__multiply+0x136>
 80194ea:	6107      	str	r7, [r0, #16]
 80194ec:	b005      	add	sp, #20
 80194ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194f2:	f843 2b04 	str.w	r2, [r3], #4
 80194f6:	e7db      	b.n	80194b0 <__multiply+0x50>
 80194f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80194fc:	f1ba 0f00 	cmp.w	sl, #0
 8019500:	d020      	beq.n	8019544 <__multiply+0xe4>
 8019502:	f105 0e14 	add.w	lr, r5, #20
 8019506:	46b1      	mov	r9, r6
 8019508:	2200      	movs	r2, #0
 801950a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801950e:	f8d9 b000 	ldr.w	fp, [r9]
 8019512:	b2a1      	uxth	r1, r4
 8019514:	fa1f fb8b 	uxth.w	fp, fp
 8019518:	fb0a b101 	mla	r1, sl, r1, fp
 801951c:	4411      	add	r1, r2
 801951e:	f8d9 2000 	ldr.w	r2, [r9]
 8019522:	0c24      	lsrs	r4, r4, #16
 8019524:	0c12      	lsrs	r2, r2, #16
 8019526:	fb0a 2404 	mla	r4, sl, r4, r2
 801952a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801952e:	b289      	uxth	r1, r1
 8019530:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019534:	45f4      	cmp	ip, lr
 8019536:	f849 1b04 	str.w	r1, [r9], #4
 801953a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801953e:	d8e4      	bhi.n	801950a <__multiply+0xaa>
 8019540:	9901      	ldr	r1, [sp, #4]
 8019542:	5072      	str	r2, [r6, r1]
 8019544:	9a03      	ldr	r2, [sp, #12]
 8019546:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801954a:	3304      	adds	r3, #4
 801954c:	f1b9 0f00 	cmp.w	r9, #0
 8019550:	d01f      	beq.n	8019592 <__multiply+0x132>
 8019552:	6834      	ldr	r4, [r6, #0]
 8019554:	f105 0114 	add.w	r1, r5, #20
 8019558:	46b6      	mov	lr, r6
 801955a:	f04f 0a00 	mov.w	sl, #0
 801955e:	880a      	ldrh	r2, [r1, #0]
 8019560:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019564:	fb09 b202 	mla	r2, r9, r2, fp
 8019568:	4492      	add	sl, r2
 801956a:	b2a4      	uxth	r4, r4
 801956c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019570:	f84e 4b04 	str.w	r4, [lr], #4
 8019574:	f851 4b04 	ldr.w	r4, [r1], #4
 8019578:	f8be 2000 	ldrh.w	r2, [lr]
 801957c:	0c24      	lsrs	r4, r4, #16
 801957e:	fb09 2404 	mla	r4, r9, r4, r2
 8019582:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019586:	458c      	cmp	ip, r1
 8019588:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801958c:	d8e7      	bhi.n	801955e <__multiply+0xfe>
 801958e:	9a01      	ldr	r2, [sp, #4]
 8019590:	50b4      	str	r4, [r6, r2]
 8019592:	3604      	adds	r6, #4
 8019594:	e7a3      	b.n	80194de <__multiply+0x7e>
 8019596:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801959a:	2b00      	cmp	r3, #0
 801959c:	d1a5      	bne.n	80194ea <__multiply+0x8a>
 801959e:	3f01      	subs	r7, #1
 80195a0:	e7a1      	b.n	80194e6 <__multiply+0x86>
 80195a2:	bf00      	nop
 80195a4:	0801acb3 	.word	0x0801acb3
 80195a8:	0801ad24 	.word	0x0801ad24

080195ac <__pow5mult>:
 80195ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195b0:	4615      	mov	r5, r2
 80195b2:	f012 0203 	ands.w	r2, r2, #3
 80195b6:	4606      	mov	r6, r0
 80195b8:	460f      	mov	r7, r1
 80195ba:	d007      	beq.n	80195cc <__pow5mult+0x20>
 80195bc:	4c25      	ldr	r4, [pc, #148]	; (8019654 <__pow5mult+0xa8>)
 80195be:	3a01      	subs	r2, #1
 80195c0:	2300      	movs	r3, #0
 80195c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195c6:	f7ff fe9b 	bl	8019300 <__multadd>
 80195ca:	4607      	mov	r7, r0
 80195cc:	10ad      	asrs	r5, r5, #2
 80195ce:	d03d      	beq.n	801964c <__pow5mult+0xa0>
 80195d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195d2:	b97c      	cbnz	r4, 80195f4 <__pow5mult+0x48>
 80195d4:	2010      	movs	r0, #16
 80195d6:	f7fe f899 	bl	801770c <malloc>
 80195da:	4602      	mov	r2, r0
 80195dc:	6270      	str	r0, [r6, #36]	; 0x24
 80195de:	b928      	cbnz	r0, 80195ec <__pow5mult+0x40>
 80195e0:	4b1d      	ldr	r3, [pc, #116]	; (8019658 <__pow5mult+0xac>)
 80195e2:	481e      	ldr	r0, [pc, #120]	; (801965c <__pow5mult+0xb0>)
 80195e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80195e8:	f000 fd80 	bl	801a0ec <__assert_func>
 80195ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80195f0:	6004      	str	r4, [r0, #0]
 80195f2:	60c4      	str	r4, [r0, #12]
 80195f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80195f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80195fc:	b94c      	cbnz	r4, 8019612 <__pow5mult+0x66>
 80195fe:	f240 2171 	movw	r1, #625	; 0x271
 8019602:	4630      	mov	r0, r6
 8019604:	f7ff ff16 	bl	8019434 <__i2b>
 8019608:	2300      	movs	r3, #0
 801960a:	f8c8 0008 	str.w	r0, [r8, #8]
 801960e:	4604      	mov	r4, r0
 8019610:	6003      	str	r3, [r0, #0]
 8019612:	f04f 0900 	mov.w	r9, #0
 8019616:	07eb      	lsls	r3, r5, #31
 8019618:	d50a      	bpl.n	8019630 <__pow5mult+0x84>
 801961a:	4639      	mov	r1, r7
 801961c:	4622      	mov	r2, r4
 801961e:	4630      	mov	r0, r6
 8019620:	f7ff ff1e 	bl	8019460 <__multiply>
 8019624:	4639      	mov	r1, r7
 8019626:	4680      	mov	r8, r0
 8019628:	4630      	mov	r0, r6
 801962a:	f7ff fe47 	bl	80192bc <_Bfree>
 801962e:	4647      	mov	r7, r8
 8019630:	106d      	asrs	r5, r5, #1
 8019632:	d00b      	beq.n	801964c <__pow5mult+0xa0>
 8019634:	6820      	ldr	r0, [r4, #0]
 8019636:	b938      	cbnz	r0, 8019648 <__pow5mult+0x9c>
 8019638:	4622      	mov	r2, r4
 801963a:	4621      	mov	r1, r4
 801963c:	4630      	mov	r0, r6
 801963e:	f7ff ff0f 	bl	8019460 <__multiply>
 8019642:	6020      	str	r0, [r4, #0]
 8019644:	f8c0 9000 	str.w	r9, [r0]
 8019648:	4604      	mov	r4, r0
 801964a:	e7e4      	b.n	8019616 <__pow5mult+0x6a>
 801964c:	4638      	mov	r0, r7
 801964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019652:	bf00      	nop
 8019654:	0801ae78 	.word	0x0801ae78
 8019658:	0801ac3d 	.word	0x0801ac3d
 801965c:	0801ad24 	.word	0x0801ad24

08019660 <__lshift>:
 8019660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019664:	460c      	mov	r4, r1
 8019666:	6849      	ldr	r1, [r1, #4]
 8019668:	6923      	ldr	r3, [r4, #16]
 801966a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801966e:	68a3      	ldr	r3, [r4, #8]
 8019670:	4607      	mov	r7, r0
 8019672:	4691      	mov	r9, r2
 8019674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019678:	f108 0601 	add.w	r6, r8, #1
 801967c:	42b3      	cmp	r3, r6
 801967e:	db0b      	blt.n	8019698 <__lshift+0x38>
 8019680:	4638      	mov	r0, r7
 8019682:	f7ff fddb 	bl	801923c <_Balloc>
 8019686:	4605      	mov	r5, r0
 8019688:	b948      	cbnz	r0, 801969e <__lshift+0x3e>
 801968a:	4602      	mov	r2, r0
 801968c:	4b28      	ldr	r3, [pc, #160]	; (8019730 <__lshift+0xd0>)
 801968e:	4829      	ldr	r0, [pc, #164]	; (8019734 <__lshift+0xd4>)
 8019690:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019694:	f000 fd2a 	bl	801a0ec <__assert_func>
 8019698:	3101      	adds	r1, #1
 801969a:	005b      	lsls	r3, r3, #1
 801969c:	e7ee      	b.n	801967c <__lshift+0x1c>
 801969e:	2300      	movs	r3, #0
 80196a0:	f100 0114 	add.w	r1, r0, #20
 80196a4:	f100 0210 	add.w	r2, r0, #16
 80196a8:	4618      	mov	r0, r3
 80196aa:	4553      	cmp	r3, sl
 80196ac:	db33      	blt.n	8019716 <__lshift+0xb6>
 80196ae:	6920      	ldr	r0, [r4, #16]
 80196b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196b4:	f104 0314 	add.w	r3, r4, #20
 80196b8:	f019 091f 	ands.w	r9, r9, #31
 80196bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196c4:	d02b      	beq.n	801971e <__lshift+0xbe>
 80196c6:	f1c9 0e20 	rsb	lr, r9, #32
 80196ca:	468a      	mov	sl, r1
 80196cc:	2200      	movs	r2, #0
 80196ce:	6818      	ldr	r0, [r3, #0]
 80196d0:	fa00 f009 	lsl.w	r0, r0, r9
 80196d4:	4302      	orrs	r2, r0
 80196d6:	f84a 2b04 	str.w	r2, [sl], #4
 80196da:	f853 2b04 	ldr.w	r2, [r3], #4
 80196de:	459c      	cmp	ip, r3
 80196e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80196e4:	d8f3      	bhi.n	80196ce <__lshift+0x6e>
 80196e6:	ebac 0304 	sub.w	r3, ip, r4
 80196ea:	3b15      	subs	r3, #21
 80196ec:	f023 0303 	bic.w	r3, r3, #3
 80196f0:	3304      	adds	r3, #4
 80196f2:	f104 0015 	add.w	r0, r4, #21
 80196f6:	4584      	cmp	ip, r0
 80196f8:	bf38      	it	cc
 80196fa:	2304      	movcc	r3, #4
 80196fc:	50ca      	str	r2, [r1, r3]
 80196fe:	b10a      	cbz	r2, 8019704 <__lshift+0xa4>
 8019700:	f108 0602 	add.w	r6, r8, #2
 8019704:	3e01      	subs	r6, #1
 8019706:	4638      	mov	r0, r7
 8019708:	612e      	str	r6, [r5, #16]
 801970a:	4621      	mov	r1, r4
 801970c:	f7ff fdd6 	bl	80192bc <_Bfree>
 8019710:	4628      	mov	r0, r5
 8019712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019716:	f842 0f04 	str.w	r0, [r2, #4]!
 801971a:	3301      	adds	r3, #1
 801971c:	e7c5      	b.n	80196aa <__lshift+0x4a>
 801971e:	3904      	subs	r1, #4
 8019720:	f853 2b04 	ldr.w	r2, [r3], #4
 8019724:	f841 2f04 	str.w	r2, [r1, #4]!
 8019728:	459c      	cmp	ip, r3
 801972a:	d8f9      	bhi.n	8019720 <__lshift+0xc0>
 801972c:	e7ea      	b.n	8019704 <__lshift+0xa4>
 801972e:	bf00      	nop
 8019730:	0801acb3 	.word	0x0801acb3
 8019734:	0801ad24 	.word	0x0801ad24

08019738 <__mcmp>:
 8019738:	b530      	push	{r4, r5, lr}
 801973a:	6902      	ldr	r2, [r0, #16]
 801973c:	690c      	ldr	r4, [r1, #16]
 801973e:	1b12      	subs	r2, r2, r4
 8019740:	d10e      	bne.n	8019760 <__mcmp+0x28>
 8019742:	f100 0314 	add.w	r3, r0, #20
 8019746:	3114      	adds	r1, #20
 8019748:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801974c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019750:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019754:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019758:	42a5      	cmp	r5, r4
 801975a:	d003      	beq.n	8019764 <__mcmp+0x2c>
 801975c:	d305      	bcc.n	801976a <__mcmp+0x32>
 801975e:	2201      	movs	r2, #1
 8019760:	4610      	mov	r0, r2
 8019762:	bd30      	pop	{r4, r5, pc}
 8019764:	4283      	cmp	r3, r0
 8019766:	d3f3      	bcc.n	8019750 <__mcmp+0x18>
 8019768:	e7fa      	b.n	8019760 <__mcmp+0x28>
 801976a:	f04f 32ff 	mov.w	r2, #4294967295
 801976e:	e7f7      	b.n	8019760 <__mcmp+0x28>

08019770 <__mdiff>:
 8019770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019774:	460c      	mov	r4, r1
 8019776:	4606      	mov	r6, r0
 8019778:	4611      	mov	r1, r2
 801977a:	4620      	mov	r0, r4
 801977c:	4617      	mov	r7, r2
 801977e:	f7ff ffdb 	bl	8019738 <__mcmp>
 8019782:	1e05      	subs	r5, r0, #0
 8019784:	d110      	bne.n	80197a8 <__mdiff+0x38>
 8019786:	4629      	mov	r1, r5
 8019788:	4630      	mov	r0, r6
 801978a:	f7ff fd57 	bl	801923c <_Balloc>
 801978e:	b930      	cbnz	r0, 801979e <__mdiff+0x2e>
 8019790:	4b39      	ldr	r3, [pc, #228]	; (8019878 <__mdiff+0x108>)
 8019792:	4602      	mov	r2, r0
 8019794:	f240 2132 	movw	r1, #562	; 0x232
 8019798:	4838      	ldr	r0, [pc, #224]	; (801987c <__mdiff+0x10c>)
 801979a:	f000 fca7 	bl	801a0ec <__assert_func>
 801979e:	2301      	movs	r3, #1
 80197a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80197a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a8:	bfa4      	itt	ge
 80197aa:	463b      	movge	r3, r7
 80197ac:	4627      	movge	r7, r4
 80197ae:	4630      	mov	r0, r6
 80197b0:	6879      	ldr	r1, [r7, #4]
 80197b2:	bfa6      	itte	ge
 80197b4:	461c      	movge	r4, r3
 80197b6:	2500      	movge	r5, #0
 80197b8:	2501      	movlt	r5, #1
 80197ba:	f7ff fd3f 	bl	801923c <_Balloc>
 80197be:	b920      	cbnz	r0, 80197ca <__mdiff+0x5a>
 80197c0:	4b2d      	ldr	r3, [pc, #180]	; (8019878 <__mdiff+0x108>)
 80197c2:	4602      	mov	r2, r0
 80197c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80197c8:	e7e6      	b.n	8019798 <__mdiff+0x28>
 80197ca:	693e      	ldr	r6, [r7, #16]
 80197cc:	60c5      	str	r5, [r0, #12]
 80197ce:	6925      	ldr	r5, [r4, #16]
 80197d0:	f107 0114 	add.w	r1, r7, #20
 80197d4:	f104 0914 	add.w	r9, r4, #20
 80197d8:	f100 0e14 	add.w	lr, r0, #20
 80197dc:	f107 0210 	add.w	r2, r7, #16
 80197e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80197e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80197e8:	46f2      	mov	sl, lr
 80197ea:	2700      	movs	r7, #0
 80197ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80197f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80197f4:	fa1f f883 	uxth.w	r8, r3
 80197f8:	fa17 f78b 	uxtah	r7, r7, fp
 80197fc:	0c1b      	lsrs	r3, r3, #16
 80197fe:	eba7 0808 	sub.w	r8, r7, r8
 8019802:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019806:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801980a:	fa1f f888 	uxth.w	r8, r8
 801980e:	141f      	asrs	r7, r3, #16
 8019810:	454d      	cmp	r5, r9
 8019812:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019816:	f84a 3b04 	str.w	r3, [sl], #4
 801981a:	d8e7      	bhi.n	80197ec <__mdiff+0x7c>
 801981c:	1b2b      	subs	r3, r5, r4
 801981e:	3b15      	subs	r3, #21
 8019820:	f023 0303 	bic.w	r3, r3, #3
 8019824:	3304      	adds	r3, #4
 8019826:	3415      	adds	r4, #21
 8019828:	42a5      	cmp	r5, r4
 801982a:	bf38      	it	cc
 801982c:	2304      	movcc	r3, #4
 801982e:	4419      	add	r1, r3
 8019830:	4473      	add	r3, lr
 8019832:	469e      	mov	lr, r3
 8019834:	460d      	mov	r5, r1
 8019836:	4565      	cmp	r5, ip
 8019838:	d30e      	bcc.n	8019858 <__mdiff+0xe8>
 801983a:	f10c 0203 	add.w	r2, ip, #3
 801983e:	1a52      	subs	r2, r2, r1
 8019840:	f022 0203 	bic.w	r2, r2, #3
 8019844:	3903      	subs	r1, #3
 8019846:	458c      	cmp	ip, r1
 8019848:	bf38      	it	cc
 801984a:	2200      	movcc	r2, #0
 801984c:	441a      	add	r2, r3
 801984e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019852:	b17b      	cbz	r3, 8019874 <__mdiff+0x104>
 8019854:	6106      	str	r6, [r0, #16]
 8019856:	e7a5      	b.n	80197a4 <__mdiff+0x34>
 8019858:	f855 8b04 	ldr.w	r8, [r5], #4
 801985c:	fa17 f488 	uxtah	r4, r7, r8
 8019860:	1422      	asrs	r2, r4, #16
 8019862:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019866:	b2a4      	uxth	r4, r4
 8019868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801986c:	f84e 4b04 	str.w	r4, [lr], #4
 8019870:	1417      	asrs	r7, r2, #16
 8019872:	e7e0      	b.n	8019836 <__mdiff+0xc6>
 8019874:	3e01      	subs	r6, #1
 8019876:	e7ea      	b.n	801984e <__mdiff+0xde>
 8019878:	0801acb3 	.word	0x0801acb3
 801987c:	0801ad24 	.word	0x0801ad24

08019880 <__d2b>:
 8019880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019884:	4689      	mov	r9, r1
 8019886:	2101      	movs	r1, #1
 8019888:	ec57 6b10 	vmov	r6, r7, d0
 801988c:	4690      	mov	r8, r2
 801988e:	f7ff fcd5 	bl	801923c <_Balloc>
 8019892:	4604      	mov	r4, r0
 8019894:	b930      	cbnz	r0, 80198a4 <__d2b+0x24>
 8019896:	4602      	mov	r2, r0
 8019898:	4b25      	ldr	r3, [pc, #148]	; (8019930 <__d2b+0xb0>)
 801989a:	4826      	ldr	r0, [pc, #152]	; (8019934 <__d2b+0xb4>)
 801989c:	f240 310a 	movw	r1, #778	; 0x30a
 80198a0:	f000 fc24 	bl	801a0ec <__assert_func>
 80198a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80198a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80198ac:	bb35      	cbnz	r5, 80198fc <__d2b+0x7c>
 80198ae:	2e00      	cmp	r6, #0
 80198b0:	9301      	str	r3, [sp, #4]
 80198b2:	d028      	beq.n	8019906 <__d2b+0x86>
 80198b4:	4668      	mov	r0, sp
 80198b6:	9600      	str	r6, [sp, #0]
 80198b8:	f7ff fd8c 	bl	80193d4 <__lo0bits>
 80198bc:	9900      	ldr	r1, [sp, #0]
 80198be:	b300      	cbz	r0, 8019902 <__d2b+0x82>
 80198c0:	9a01      	ldr	r2, [sp, #4]
 80198c2:	f1c0 0320 	rsb	r3, r0, #32
 80198c6:	fa02 f303 	lsl.w	r3, r2, r3
 80198ca:	430b      	orrs	r3, r1
 80198cc:	40c2      	lsrs	r2, r0
 80198ce:	6163      	str	r3, [r4, #20]
 80198d0:	9201      	str	r2, [sp, #4]
 80198d2:	9b01      	ldr	r3, [sp, #4]
 80198d4:	61a3      	str	r3, [r4, #24]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	bf14      	ite	ne
 80198da:	2202      	movne	r2, #2
 80198dc:	2201      	moveq	r2, #1
 80198de:	6122      	str	r2, [r4, #16]
 80198e0:	b1d5      	cbz	r5, 8019918 <__d2b+0x98>
 80198e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80198e6:	4405      	add	r5, r0
 80198e8:	f8c9 5000 	str.w	r5, [r9]
 80198ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80198f0:	f8c8 0000 	str.w	r0, [r8]
 80198f4:	4620      	mov	r0, r4
 80198f6:	b003      	add	sp, #12
 80198f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019900:	e7d5      	b.n	80198ae <__d2b+0x2e>
 8019902:	6161      	str	r1, [r4, #20]
 8019904:	e7e5      	b.n	80198d2 <__d2b+0x52>
 8019906:	a801      	add	r0, sp, #4
 8019908:	f7ff fd64 	bl	80193d4 <__lo0bits>
 801990c:	9b01      	ldr	r3, [sp, #4]
 801990e:	6163      	str	r3, [r4, #20]
 8019910:	2201      	movs	r2, #1
 8019912:	6122      	str	r2, [r4, #16]
 8019914:	3020      	adds	r0, #32
 8019916:	e7e3      	b.n	80198e0 <__d2b+0x60>
 8019918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801991c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019920:	f8c9 0000 	str.w	r0, [r9]
 8019924:	6918      	ldr	r0, [r3, #16]
 8019926:	f7ff fd35 	bl	8019394 <__hi0bits>
 801992a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801992e:	e7df      	b.n	80198f0 <__d2b+0x70>
 8019930:	0801acb3 	.word	0x0801acb3
 8019934:	0801ad24 	.word	0x0801ad24

08019938 <_calloc_r>:
 8019938:	b513      	push	{r0, r1, r4, lr}
 801993a:	434a      	muls	r2, r1
 801993c:	4611      	mov	r1, r2
 801993e:	9201      	str	r2, [sp, #4]
 8019940:	f7fd ff74 	bl	801782c <_malloc_r>
 8019944:	4604      	mov	r4, r0
 8019946:	b118      	cbz	r0, 8019950 <_calloc_r+0x18>
 8019948:	9a01      	ldr	r2, [sp, #4]
 801994a:	2100      	movs	r1, #0
 801994c:	f7fd ff16 	bl	801777c <memset>
 8019950:	4620      	mov	r0, r4
 8019952:	b002      	add	sp, #8
 8019954:	bd10      	pop	{r4, pc}

08019956 <__ssputs_r>:
 8019956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801995a:	688e      	ldr	r6, [r1, #8]
 801995c:	429e      	cmp	r6, r3
 801995e:	4682      	mov	sl, r0
 8019960:	460c      	mov	r4, r1
 8019962:	4690      	mov	r8, r2
 8019964:	461f      	mov	r7, r3
 8019966:	d838      	bhi.n	80199da <__ssputs_r+0x84>
 8019968:	898a      	ldrh	r2, [r1, #12]
 801996a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801996e:	d032      	beq.n	80199d6 <__ssputs_r+0x80>
 8019970:	6825      	ldr	r5, [r4, #0]
 8019972:	6909      	ldr	r1, [r1, #16]
 8019974:	eba5 0901 	sub.w	r9, r5, r1
 8019978:	6965      	ldr	r5, [r4, #20]
 801997a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801997e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019982:	3301      	adds	r3, #1
 8019984:	444b      	add	r3, r9
 8019986:	106d      	asrs	r5, r5, #1
 8019988:	429d      	cmp	r5, r3
 801998a:	bf38      	it	cc
 801998c:	461d      	movcc	r5, r3
 801998e:	0553      	lsls	r3, r2, #21
 8019990:	d531      	bpl.n	80199f6 <__ssputs_r+0xa0>
 8019992:	4629      	mov	r1, r5
 8019994:	f7fd ff4a 	bl	801782c <_malloc_r>
 8019998:	4606      	mov	r6, r0
 801999a:	b950      	cbnz	r0, 80199b2 <__ssputs_r+0x5c>
 801999c:	230c      	movs	r3, #12
 801999e:	f8ca 3000 	str.w	r3, [sl]
 80199a2:	89a3      	ldrh	r3, [r4, #12]
 80199a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199a8:	81a3      	strh	r3, [r4, #12]
 80199aa:	f04f 30ff 	mov.w	r0, #4294967295
 80199ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199b2:	6921      	ldr	r1, [r4, #16]
 80199b4:	464a      	mov	r2, r9
 80199b6:	f7fd feb9 	bl	801772c <memcpy>
 80199ba:	89a3      	ldrh	r3, [r4, #12]
 80199bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80199c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199c4:	81a3      	strh	r3, [r4, #12]
 80199c6:	6126      	str	r6, [r4, #16]
 80199c8:	6165      	str	r5, [r4, #20]
 80199ca:	444e      	add	r6, r9
 80199cc:	eba5 0509 	sub.w	r5, r5, r9
 80199d0:	6026      	str	r6, [r4, #0]
 80199d2:	60a5      	str	r5, [r4, #8]
 80199d4:	463e      	mov	r6, r7
 80199d6:	42be      	cmp	r6, r7
 80199d8:	d900      	bls.n	80199dc <__ssputs_r+0x86>
 80199da:	463e      	mov	r6, r7
 80199dc:	4632      	mov	r2, r6
 80199de:	6820      	ldr	r0, [r4, #0]
 80199e0:	4641      	mov	r1, r8
 80199e2:	f7fd feb1 	bl	8017748 <memmove>
 80199e6:	68a3      	ldr	r3, [r4, #8]
 80199e8:	6822      	ldr	r2, [r4, #0]
 80199ea:	1b9b      	subs	r3, r3, r6
 80199ec:	4432      	add	r2, r6
 80199ee:	60a3      	str	r3, [r4, #8]
 80199f0:	6022      	str	r2, [r4, #0]
 80199f2:	2000      	movs	r0, #0
 80199f4:	e7db      	b.n	80199ae <__ssputs_r+0x58>
 80199f6:	462a      	mov	r2, r5
 80199f8:	f000 fd02 	bl	801a400 <_realloc_r>
 80199fc:	4606      	mov	r6, r0
 80199fe:	2800      	cmp	r0, #0
 8019a00:	d1e1      	bne.n	80199c6 <__ssputs_r+0x70>
 8019a02:	6921      	ldr	r1, [r4, #16]
 8019a04:	4650      	mov	r0, sl
 8019a06:	f7fd fec1 	bl	801778c <_free_r>
 8019a0a:	e7c7      	b.n	801999c <__ssputs_r+0x46>

08019a0c <_svfiprintf_r>:
 8019a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a10:	4698      	mov	r8, r3
 8019a12:	898b      	ldrh	r3, [r1, #12]
 8019a14:	061b      	lsls	r3, r3, #24
 8019a16:	b09d      	sub	sp, #116	; 0x74
 8019a18:	4607      	mov	r7, r0
 8019a1a:	460d      	mov	r5, r1
 8019a1c:	4614      	mov	r4, r2
 8019a1e:	d50e      	bpl.n	8019a3e <_svfiprintf_r+0x32>
 8019a20:	690b      	ldr	r3, [r1, #16]
 8019a22:	b963      	cbnz	r3, 8019a3e <_svfiprintf_r+0x32>
 8019a24:	2140      	movs	r1, #64	; 0x40
 8019a26:	f7fd ff01 	bl	801782c <_malloc_r>
 8019a2a:	6028      	str	r0, [r5, #0]
 8019a2c:	6128      	str	r0, [r5, #16]
 8019a2e:	b920      	cbnz	r0, 8019a3a <_svfiprintf_r+0x2e>
 8019a30:	230c      	movs	r3, #12
 8019a32:	603b      	str	r3, [r7, #0]
 8019a34:	f04f 30ff 	mov.w	r0, #4294967295
 8019a38:	e0d1      	b.n	8019bde <_svfiprintf_r+0x1d2>
 8019a3a:	2340      	movs	r3, #64	; 0x40
 8019a3c:	616b      	str	r3, [r5, #20]
 8019a3e:	2300      	movs	r3, #0
 8019a40:	9309      	str	r3, [sp, #36]	; 0x24
 8019a42:	2320      	movs	r3, #32
 8019a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a4c:	2330      	movs	r3, #48	; 0x30
 8019a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019bf8 <_svfiprintf_r+0x1ec>
 8019a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a56:	f04f 0901 	mov.w	r9, #1
 8019a5a:	4623      	mov	r3, r4
 8019a5c:	469a      	mov	sl, r3
 8019a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a62:	b10a      	cbz	r2, 8019a68 <_svfiprintf_r+0x5c>
 8019a64:	2a25      	cmp	r2, #37	; 0x25
 8019a66:	d1f9      	bne.n	8019a5c <_svfiprintf_r+0x50>
 8019a68:	ebba 0b04 	subs.w	fp, sl, r4
 8019a6c:	d00b      	beq.n	8019a86 <_svfiprintf_r+0x7a>
 8019a6e:	465b      	mov	r3, fp
 8019a70:	4622      	mov	r2, r4
 8019a72:	4629      	mov	r1, r5
 8019a74:	4638      	mov	r0, r7
 8019a76:	f7ff ff6e 	bl	8019956 <__ssputs_r>
 8019a7a:	3001      	adds	r0, #1
 8019a7c:	f000 80aa 	beq.w	8019bd4 <_svfiprintf_r+0x1c8>
 8019a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a82:	445a      	add	r2, fp
 8019a84:	9209      	str	r2, [sp, #36]	; 0x24
 8019a86:	f89a 3000 	ldrb.w	r3, [sl]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	f000 80a2 	beq.w	8019bd4 <_svfiprintf_r+0x1c8>
 8019a90:	2300      	movs	r3, #0
 8019a92:	f04f 32ff 	mov.w	r2, #4294967295
 8019a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a9a:	f10a 0a01 	add.w	sl, sl, #1
 8019a9e:	9304      	str	r3, [sp, #16]
 8019aa0:	9307      	str	r3, [sp, #28]
 8019aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8019aa8:	4654      	mov	r4, sl
 8019aaa:	2205      	movs	r2, #5
 8019aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ab0:	4851      	ldr	r0, [pc, #324]	; (8019bf8 <_svfiprintf_r+0x1ec>)
 8019ab2:	f7e6 fb8d 	bl	80001d0 <memchr>
 8019ab6:	9a04      	ldr	r2, [sp, #16]
 8019ab8:	b9d8      	cbnz	r0, 8019af2 <_svfiprintf_r+0xe6>
 8019aba:	06d0      	lsls	r0, r2, #27
 8019abc:	bf44      	itt	mi
 8019abe:	2320      	movmi	r3, #32
 8019ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ac4:	0711      	lsls	r1, r2, #28
 8019ac6:	bf44      	itt	mi
 8019ac8:	232b      	movmi	r3, #43	; 0x2b
 8019aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ace:	f89a 3000 	ldrb.w	r3, [sl]
 8019ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8019ad4:	d015      	beq.n	8019b02 <_svfiprintf_r+0xf6>
 8019ad6:	9a07      	ldr	r2, [sp, #28]
 8019ad8:	4654      	mov	r4, sl
 8019ada:	2000      	movs	r0, #0
 8019adc:	f04f 0c0a 	mov.w	ip, #10
 8019ae0:	4621      	mov	r1, r4
 8019ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ae6:	3b30      	subs	r3, #48	; 0x30
 8019ae8:	2b09      	cmp	r3, #9
 8019aea:	d94e      	bls.n	8019b8a <_svfiprintf_r+0x17e>
 8019aec:	b1b0      	cbz	r0, 8019b1c <_svfiprintf_r+0x110>
 8019aee:	9207      	str	r2, [sp, #28]
 8019af0:	e014      	b.n	8019b1c <_svfiprintf_r+0x110>
 8019af2:	eba0 0308 	sub.w	r3, r0, r8
 8019af6:	fa09 f303 	lsl.w	r3, r9, r3
 8019afa:	4313      	orrs	r3, r2
 8019afc:	9304      	str	r3, [sp, #16]
 8019afe:	46a2      	mov	sl, r4
 8019b00:	e7d2      	b.n	8019aa8 <_svfiprintf_r+0x9c>
 8019b02:	9b03      	ldr	r3, [sp, #12]
 8019b04:	1d19      	adds	r1, r3, #4
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	9103      	str	r1, [sp, #12]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	bfbb      	ittet	lt
 8019b0e:	425b      	neglt	r3, r3
 8019b10:	f042 0202 	orrlt.w	r2, r2, #2
 8019b14:	9307      	strge	r3, [sp, #28]
 8019b16:	9307      	strlt	r3, [sp, #28]
 8019b18:	bfb8      	it	lt
 8019b1a:	9204      	strlt	r2, [sp, #16]
 8019b1c:	7823      	ldrb	r3, [r4, #0]
 8019b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8019b20:	d10c      	bne.n	8019b3c <_svfiprintf_r+0x130>
 8019b22:	7863      	ldrb	r3, [r4, #1]
 8019b24:	2b2a      	cmp	r3, #42	; 0x2a
 8019b26:	d135      	bne.n	8019b94 <_svfiprintf_r+0x188>
 8019b28:	9b03      	ldr	r3, [sp, #12]
 8019b2a:	1d1a      	adds	r2, r3, #4
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	9203      	str	r2, [sp, #12]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	bfb8      	it	lt
 8019b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b38:	3402      	adds	r4, #2
 8019b3a:	9305      	str	r3, [sp, #20]
 8019b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019c08 <_svfiprintf_r+0x1fc>
 8019b40:	7821      	ldrb	r1, [r4, #0]
 8019b42:	2203      	movs	r2, #3
 8019b44:	4650      	mov	r0, sl
 8019b46:	f7e6 fb43 	bl	80001d0 <memchr>
 8019b4a:	b140      	cbz	r0, 8019b5e <_svfiprintf_r+0x152>
 8019b4c:	2340      	movs	r3, #64	; 0x40
 8019b4e:	eba0 000a 	sub.w	r0, r0, sl
 8019b52:	fa03 f000 	lsl.w	r0, r3, r0
 8019b56:	9b04      	ldr	r3, [sp, #16]
 8019b58:	4303      	orrs	r3, r0
 8019b5a:	3401      	adds	r4, #1
 8019b5c:	9304      	str	r3, [sp, #16]
 8019b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b62:	4826      	ldr	r0, [pc, #152]	; (8019bfc <_svfiprintf_r+0x1f0>)
 8019b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b68:	2206      	movs	r2, #6
 8019b6a:	f7e6 fb31 	bl	80001d0 <memchr>
 8019b6e:	2800      	cmp	r0, #0
 8019b70:	d038      	beq.n	8019be4 <_svfiprintf_r+0x1d8>
 8019b72:	4b23      	ldr	r3, [pc, #140]	; (8019c00 <_svfiprintf_r+0x1f4>)
 8019b74:	bb1b      	cbnz	r3, 8019bbe <_svfiprintf_r+0x1b2>
 8019b76:	9b03      	ldr	r3, [sp, #12]
 8019b78:	3307      	adds	r3, #7
 8019b7a:	f023 0307 	bic.w	r3, r3, #7
 8019b7e:	3308      	adds	r3, #8
 8019b80:	9303      	str	r3, [sp, #12]
 8019b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b84:	4433      	add	r3, r6
 8019b86:	9309      	str	r3, [sp, #36]	; 0x24
 8019b88:	e767      	b.n	8019a5a <_svfiprintf_r+0x4e>
 8019b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b8e:	460c      	mov	r4, r1
 8019b90:	2001      	movs	r0, #1
 8019b92:	e7a5      	b.n	8019ae0 <_svfiprintf_r+0xd4>
 8019b94:	2300      	movs	r3, #0
 8019b96:	3401      	adds	r4, #1
 8019b98:	9305      	str	r3, [sp, #20]
 8019b9a:	4619      	mov	r1, r3
 8019b9c:	f04f 0c0a 	mov.w	ip, #10
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ba6:	3a30      	subs	r2, #48	; 0x30
 8019ba8:	2a09      	cmp	r2, #9
 8019baa:	d903      	bls.n	8019bb4 <_svfiprintf_r+0x1a8>
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d0c5      	beq.n	8019b3c <_svfiprintf_r+0x130>
 8019bb0:	9105      	str	r1, [sp, #20]
 8019bb2:	e7c3      	b.n	8019b3c <_svfiprintf_r+0x130>
 8019bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019bb8:	4604      	mov	r4, r0
 8019bba:	2301      	movs	r3, #1
 8019bbc:	e7f0      	b.n	8019ba0 <_svfiprintf_r+0x194>
 8019bbe:	ab03      	add	r3, sp, #12
 8019bc0:	9300      	str	r3, [sp, #0]
 8019bc2:	462a      	mov	r2, r5
 8019bc4:	4b0f      	ldr	r3, [pc, #60]	; (8019c04 <_svfiprintf_r+0x1f8>)
 8019bc6:	a904      	add	r1, sp, #16
 8019bc8:	4638      	mov	r0, r7
 8019bca:	f7fd ff29 	bl	8017a20 <_printf_float>
 8019bce:	1c42      	adds	r2, r0, #1
 8019bd0:	4606      	mov	r6, r0
 8019bd2:	d1d6      	bne.n	8019b82 <_svfiprintf_r+0x176>
 8019bd4:	89ab      	ldrh	r3, [r5, #12]
 8019bd6:	065b      	lsls	r3, r3, #25
 8019bd8:	f53f af2c 	bmi.w	8019a34 <_svfiprintf_r+0x28>
 8019bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bde:	b01d      	add	sp, #116	; 0x74
 8019be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be4:	ab03      	add	r3, sp, #12
 8019be6:	9300      	str	r3, [sp, #0]
 8019be8:	462a      	mov	r2, r5
 8019bea:	4b06      	ldr	r3, [pc, #24]	; (8019c04 <_svfiprintf_r+0x1f8>)
 8019bec:	a904      	add	r1, sp, #16
 8019bee:	4638      	mov	r0, r7
 8019bf0:	f7fe f9ba 	bl	8017f68 <_printf_i>
 8019bf4:	e7eb      	b.n	8019bce <_svfiprintf_r+0x1c2>
 8019bf6:	bf00      	nop
 8019bf8:	0801ae84 	.word	0x0801ae84
 8019bfc:	0801ae8e 	.word	0x0801ae8e
 8019c00:	08017a21 	.word	0x08017a21
 8019c04:	08019957 	.word	0x08019957
 8019c08:	0801ae8a 	.word	0x0801ae8a

08019c0c <__sfputc_r>:
 8019c0c:	6893      	ldr	r3, [r2, #8]
 8019c0e:	3b01      	subs	r3, #1
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	b410      	push	{r4}
 8019c14:	6093      	str	r3, [r2, #8]
 8019c16:	da08      	bge.n	8019c2a <__sfputc_r+0x1e>
 8019c18:	6994      	ldr	r4, [r2, #24]
 8019c1a:	42a3      	cmp	r3, r4
 8019c1c:	db01      	blt.n	8019c22 <__sfputc_r+0x16>
 8019c1e:	290a      	cmp	r1, #10
 8019c20:	d103      	bne.n	8019c2a <__sfputc_r+0x1e>
 8019c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c26:	f000 b98f 	b.w	8019f48 <__swbuf_r>
 8019c2a:	6813      	ldr	r3, [r2, #0]
 8019c2c:	1c58      	adds	r0, r3, #1
 8019c2e:	6010      	str	r0, [r2, #0]
 8019c30:	7019      	strb	r1, [r3, #0]
 8019c32:	4608      	mov	r0, r1
 8019c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c38:	4770      	bx	lr

08019c3a <__sfputs_r>:
 8019c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3c:	4606      	mov	r6, r0
 8019c3e:	460f      	mov	r7, r1
 8019c40:	4614      	mov	r4, r2
 8019c42:	18d5      	adds	r5, r2, r3
 8019c44:	42ac      	cmp	r4, r5
 8019c46:	d101      	bne.n	8019c4c <__sfputs_r+0x12>
 8019c48:	2000      	movs	r0, #0
 8019c4a:	e007      	b.n	8019c5c <__sfputs_r+0x22>
 8019c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c50:	463a      	mov	r2, r7
 8019c52:	4630      	mov	r0, r6
 8019c54:	f7ff ffda 	bl	8019c0c <__sfputc_r>
 8019c58:	1c43      	adds	r3, r0, #1
 8019c5a:	d1f3      	bne.n	8019c44 <__sfputs_r+0xa>
 8019c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c60 <_vfiprintf_r>:
 8019c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c64:	460d      	mov	r5, r1
 8019c66:	b09d      	sub	sp, #116	; 0x74
 8019c68:	4614      	mov	r4, r2
 8019c6a:	4698      	mov	r8, r3
 8019c6c:	4606      	mov	r6, r0
 8019c6e:	b118      	cbz	r0, 8019c78 <_vfiprintf_r+0x18>
 8019c70:	6983      	ldr	r3, [r0, #24]
 8019c72:	b90b      	cbnz	r3, 8019c78 <_vfiprintf_r+0x18>
 8019c74:	f7ff fa30 	bl	80190d8 <__sinit>
 8019c78:	4b89      	ldr	r3, [pc, #548]	; (8019ea0 <_vfiprintf_r+0x240>)
 8019c7a:	429d      	cmp	r5, r3
 8019c7c:	d11b      	bne.n	8019cb6 <_vfiprintf_r+0x56>
 8019c7e:	6875      	ldr	r5, [r6, #4]
 8019c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c82:	07d9      	lsls	r1, r3, #31
 8019c84:	d405      	bmi.n	8019c92 <_vfiprintf_r+0x32>
 8019c86:	89ab      	ldrh	r3, [r5, #12]
 8019c88:	059a      	lsls	r2, r3, #22
 8019c8a:	d402      	bmi.n	8019c92 <_vfiprintf_r+0x32>
 8019c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c8e:	f7ff fac6 	bl	801921e <__retarget_lock_acquire_recursive>
 8019c92:	89ab      	ldrh	r3, [r5, #12]
 8019c94:	071b      	lsls	r3, r3, #28
 8019c96:	d501      	bpl.n	8019c9c <_vfiprintf_r+0x3c>
 8019c98:	692b      	ldr	r3, [r5, #16]
 8019c9a:	b9eb      	cbnz	r3, 8019cd8 <_vfiprintf_r+0x78>
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	4630      	mov	r0, r6
 8019ca0:	f000 f9b6 	bl	801a010 <__swsetup_r>
 8019ca4:	b1c0      	cbz	r0, 8019cd8 <_vfiprintf_r+0x78>
 8019ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ca8:	07dc      	lsls	r4, r3, #31
 8019caa:	d50e      	bpl.n	8019cca <_vfiprintf_r+0x6a>
 8019cac:	f04f 30ff 	mov.w	r0, #4294967295
 8019cb0:	b01d      	add	sp, #116	; 0x74
 8019cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cb6:	4b7b      	ldr	r3, [pc, #492]	; (8019ea4 <_vfiprintf_r+0x244>)
 8019cb8:	429d      	cmp	r5, r3
 8019cba:	d101      	bne.n	8019cc0 <_vfiprintf_r+0x60>
 8019cbc:	68b5      	ldr	r5, [r6, #8]
 8019cbe:	e7df      	b.n	8019c80 <_vfiprintf_r+0x20>
 8019cc0:	4b79      	ldr	r3, [pc, #484]	; (8019ea8 <_vfiprintf_r+0x248>)
 8019cc2:	429d      	cmp	r5, r3
 8019cc4:	bf08      	it	eq
 8019cc6:	68f5      	ldreq	r5, [r6, #12]
 8019cc8:	e7da      	b.n	8019c80 <_vfiprintf_r+0x20>
 8019cca:	89ab      	ldrh	r3, [r5, #12]
 8019ccc:	0598      	lsls	r0, r3, #22
 8019cce:	d4ed      	bmi.n	8019cac <_vfiprintf_r+0x4c>
 8019cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cd2:	f7ff faa5 	bl	8019220 <__retarget_lock_release_recursive>
 8019cd6:	e7e9      	b.n	8019cac <_vfiprintf_r+0x4c>
 8019cd8:	2300      	movs	r3, #0
 8019cda:	9309      	str	r3, [sp, #36]	; 0x24
 8019cdc:	2320      	movs	r3, #32
 8019cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ce6:	2330      	movs	r3, #48	; 0x30
 8019ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019eac <_vfiprintf_r+0x24c>
 8019cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019cf0:	f04f 0901 	mov.w	r9, #1
 8019cf4:	4623      	mov	r3, r4
 8019cf6:	469a      	mov	sl, r3
 8019cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cfc:	b10a      	cbz	r2, 8019d02 <_vfiprintf_r+0xa2>
 8019cfe:	2a25      	cmp	r2, #37	; 0x25
 8019d00:	d1f9      	bne.n	8019cf6 <_vfiprintf_r+0x96>
 8019d02:	ebba 0b04 	subs.w	fp, sl, r4
 8019d06:	d00b      	beq.n	8019d20 <_vfiprintf_r+0xc0>
 8019d08:	465b      	mov	r3, fp
 8019d0a:	4622      	mov	r2, r4
 8019d0c:	4629      	mov	r1, r5
 8019d0e:	4630      	mov	r0, r6
 8019d10:	f7ff ff93 	bl	8019c3a <__sfputs_r>
 8019d14:	3001      	adds	r0, #1
 8019d16:	f000 80aa 	beq.w	8019e6e <_vfiprintf_r+0x20e>
 8019d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d1c:	445a      	add	r2, fp
 8019d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8019d20:	f89a 3000 	ldrb.w	r3, [sl]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	f000 80a2 	beq.w	8019e6e <_vfiprintf_r+0x20e>
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d34:	f10a 0a01 	add.w	sl, sl, #1
 8019d38:	9304      	str	r3, [sp, #16]
 8019d3a:	9307      	str	r3, [sp, #28]
 8019d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d40:	931a      	str	r3, [sp, #104]	; 0x68
 8019d42:	4654      	mov	r4, sl
 8019d44:	2205      	movs	r2, #5
 8019d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d4a:	4858      	ldr	r0, [pc, #352]	; (8019eac <_vfiprintf_r+0x24c>)
 8019d4c:	f7e6 fa40 	bl	80001d0 <memchr>
 8019d50:	9a04      	ldr	r2, [sp, #16]
 8019d52:	b9d8      	cbnz	r0, 8019d8c <_vfiprintf_r+0x12c>
 8019d54:	06d1      	lsls	r1, r2, #27
 8019d56:	bf44      	itt	mi
 8019d58:	2320      	movmi	r3, #32
 8019d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d5e:	0713      	lsls	r3, r2, #28
 8019d60:	bf44      	itt	mi
 8019d62:	232b      	movmi	r3, #43	; 0x2b
 8019d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d68:	f89a 3000 	ldrb.w	r3, [sl]
 8019d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8019d6e:	d015      	beq.n	8019d9c <_vfiprintf_r+0x13c>
 8019d70:	9a07      	ldr	r2, [sp, #28]
 8019d72:	4654      	mov	r4, sl
 8019d74:	2000      	movs	r0, #0
 8019d76:	f04f 0c0a 	mov.w	ip, #10
 8019d7a:	4621      	mov	r1, r4
 8019d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d80:	3b30      	subs	r3, #48	; 0x30
 8019d82:	2b09      	cmp	r3, #9
 8019d84:	d94e      	bls.n	8019e24 <_vfiprintf_r+0x1c4>
 8019d86:	b1b0      	cbz	r0, 8019db6 <_vfiprintf_r+0x156>
 8019d88:	9207      	str	r2, [sp, #28]
 8019d8a:	e014      	b.n	8019db6 <_vfiprintf_r+0x156>
 8019d8c:	eba0 0308 	sub.w	r3, r0, r8
 8019d90:	fa09 f303 	lsl.w	r3, r9, r3
 8019d94:	4313      	orrs	r3, r2
 8019d96:	9304      	str	r3, [sp, #16]
 8019d98:	46a2      	mov	sl, r4
 8019d9a:	e7d2      	b.n	8019d42 <_vfiprintf_r+0xe2>
 8019d9c:	9b03      	ldr	r3, [sp, #12]
 8019d9e:	1d19      	adds	r1, r3, #4
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	9103      	str	r1, [sp, #12]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	bfbb      	ittet	lt
 8019da8:	425b      	neglt	r3, r3
 8019daa:	f042 0202 	orrlt.w	r2, r2, #2
 8019dae:	9307      	strge	r3, [sp, #28]
 8019db0:	9307      	strlt	r3, [sp, #28]
 8019db2:	bfb8      	it	lt
 8019db4:	9204      	strlt	r2, [sp, #16]
 8019db6:	7823      	ldrb	r3, [r4, #0]
 8019db8:	2b2e      	cmp	r3, #46	; 0x2e
 8019dba:	d10c      	bne.n	8019dd6 <_vfiprintf_r+0x176>
 8019dbc:	7863      	ldrb	r3, [r4, #1]
 8019dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8019dc0:	d135      	bne.n	8019e2e <_vfiprintf_r+0x1ce>
 8019dc2:	9b03      	ldr	r3, [sp, #12]
 8019dc4:	1d1a      	adds	r2, r3, #4
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	9203      	str	r2, [sp, #12]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	bfb8      	it	lt
 8019dce:	f04f 33ff 	movlt.w	r3, #4294967295
 8019dd2:	3402      	adds	r4, #2
 8019dd4:	9305      	str	r3, [sp, #20]
 8019dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ebc <_vfiprintf_r+0x25c>
 8019dda:	7821      	ldrb	r1, [r4, #0]
 8019ddc:	2203      	movs	r2, #3
 8019dde:	4650      	mov	r0, sl
 8019de0:	f7e6 f9f6 	bl	80001d0 <memchr>
 8019de4:	b140      	cbz	r0, 8019df8 <_vfiprintf_r+0x198>
 8019de6:	2340      	movs	r3, #64	; 0x40
 8019de8:	eba0 000a 	sub.w	r0, r0, sl
 8019dec:	fa03 f000 	lsl.w	r0, r3, r0
 8019df0:	9b04      	ldr	r3, [sp, #16]
 8019df2:	4303      	orrs	r3, r0
 8019df4:	3401      	adds	r4, #1
 8019df6:	9304      	str	r3, [sp, #16]
 8019df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dfc:	482c      	ldr	r0, [pc, #176]	; (8019eb0 <_vfiprintf_r+0x250>)
 8019dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e02:	2206      	movs	r2, #6
 8019e04:	f7e6 f9e4 	bl	80001d0 <memchr>
 8019e08:	2800      	cmp	r0, #0
 8019e0a:	d03f      	beq.n	8019e8c <_vfiprintf_r+0x22c>
 8019e0c:	4b29      	ldr	r3, [pc, #164]	; (8019eb4 <_vfiprintf_r+0x254>)
 8019e0e:	bb1b      	cbnz	r3, 8019e58 <_vfiprintf_r+0x1f8>
 8019e10:	9b03      	ldr	r3, [sp, #12]
 8019e12:	3307      	adds	r3, #7
 8019e14:	f023 0307 	bic.w	r3, r3, #7
 8019e18:	3308      	adds	r3, #8
 8019e1a:	9303      	str	r3, [sp, #12]
 8019e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e1e:	443b      	add	r3, r7
 8019e20:	9309      	str	r3, [sp, #36]	; 0x24
 8019e22:	e767      	b.n	8019cf4 <_vfiprintf_r+0x94>
 8019e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e28:	460c      	mov	r4, r1
 8019e2a:	2001      	movs	r0, #1
 8019e2c:	e7a5      	b.n	8019d7a <_vfiprintf_r+0x11a>
 8019e2e:	2300      	movs	r3, #0
 8019e30:	3401      	adds	r4, #1
 8019e32:	9305      	str	r3, [sp, #20]
 8019e34:	4619      	mov	r1, r3
 8019e36:	f04f 0c0a 	mov.w	ip, #10
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e40:	3a30      	subs	r2, #48	; 0x30
 8019e42:	2a09      	cmp	r2, #9
 8019e44:	d903      	bls.n	8019e4e <_vfiprintf_r+0x1ee>
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d0c5      	beq.n	8019dd6 <_vfiprintf_r+0x176>
 8019e4a:	9105      	str	r1, [sp, #20]
 8019e4c:	e7c3      	b.n	8019dd6 <_vfiprintf_r+0x176>
 8019e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e52:	4604      	mov	r4, r0
 8019e54:	2301      	movs	r3, #1
 8019e56:	e7f0      	b.n	8019e3a <_vfiprintf_r+0x1da>
 8019e58:	ab03      	add	r3, sp, #12
 8019e5a:	9300      	str	r3, [sp, #0]
 8019e5c:	462a      	mov	r2, r5
 8019e5e:	4b16      	ldr	r3, [pc, #88]	; (8019eb8 <_vfiprintf_r+0x258>)
 8019e60:	a904      	add	r1, sp, #16
 8019e62:	4630      	mov	r0, r6
 8019e64:	f7fd fddc 	bl	8017a20 <_printf_float>
 8019e68:	4607      	mov	r7, r0
 8019e6a:	1c78      	adds	r0, r7, #1
 8019e6c:	d1d6      	bne.n	8019e1c <_vfiprintf_r+0x1bc>
 8019e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e70:	07d9      	lsls	r1, r3, #31
 8019e72:	d405      	bmi.n	8019e80 <_vfiprintf_r+0x220>
 8019e74:	89ab      	ldrh	r3, [r5, #12]
 8019e76:	059a      	lsls	r2, r3, #22
 8019e78:	d402      	bmi.n	8019e80 <_vfiprintf_r+0x220>
 8019e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e7c:	f7ff f9d0 	bl	8019220 <__retarget_lock_release_recursive>
 8019e80:	89ab      	ldrh	r3, [r5, #12]
 8019e82:	065b      	lsls	r3, r3, #25
 8019e84:	f53f af12 	bmi.w	8019cac <_vfiprintf_r+0x4c>
 8019e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e8a:	e711      	b.n	8019cb0 <_vfiprintf_r+0x50>
 8019e8c:	ab03      	add	r3, sp, #12
 8019e8e:	9300      	str	r3, [sp, #0]
 8019e90:	462a      	mov	r2, r5
 8019e92:	4b09      	ldr	r3, [pc, #36]	; (8019eb8 <_vfiprintf_r+0x258>)
 8019e94:	a904      	add	r1, sp, #16
 8019e96:	4630      	mov	r0, r6
 8019e98:	f7fe f866 	bl	8017f68 <_printf_i>
 8019e9c:	e7e4      	b.n	8019e68 <_vfiprintf_r+0x208>
 8019e9e:	bf00      	nop
 8019ea0:	0801ace4 	.word	0x0801ace4
 8019ea4:	0801ad04 	.word	0x0801ad04
 8019ea8:	0801acc4 	.word	0x0801acc4
 8019eac:	0801ae84 	.word	0x0801ae84
 8019eb0:	0801ae8e 	.word	0x0801ae8e
 8019eb4:	08017a21 	.word	0x08017a21
 8019eb8:	08019c3b 	.word	0x08019c3b
 8019ebc:	0801ae8a 	.word	0x0801ae8a

08019ec0 <__sread>:
 8019ec0:	b510      	push	{r4, lr}
 8019ec2:	460c      	mov	r4, r1
 8019ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ec8:	f000 fac0 	bl	801a44c <_read_r>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	bfab      	itete	ge
 8019ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8019ed4:	181b      	addge	r3, r3, r0
 8019ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019eda:	bfac      	ite	ge
 8019edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8019ede:	81a3      	strhlt	r3, [r4, #12]
 8019ee0:	bd10      	pop	{r4, pc}

08019ee2 <__swrite>:
 8019ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ee6:	461f      	mov	r7, r3
 8019ee8:	898b      	ldrh	r3, [r1, #12]
 8019eea:	05db      	lsls	r3, r3, #23
 8019eec:	4605      	mov	r5, r0
 8019eee:	460c      	mov	r4, r1
 8019ef0:	4616      	mov	r6, r2
 8019ef2:	d505      	bpl.n	8019f00 <__swrite+0x1e>
 8019ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ef8:	2302      	movs	r3, #2
 8019efa:	2200      	movs	r2, #0
 8019efc:	f000 f9f8 	bl	801a2f0 <_lseek_r>
 8019f00:	89a3      	ldrh	r3, [r4, #12]
 8019f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f0a:	81a3      	strh	r3, [r4, #12]
 8019f0c:	4632      	mov	r2, r6
 8019f0e:	463b      	mov	r3, r7
 8019f10:	4628      	mov	r0, r5
 8019f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f16:	f000 b869 	b.w	8019fec <_write_r>

08019f1a <__sseek>:
 8019f1a:	b510      	push	{r4, lr}
 8019f1c:	460c      	mov	r4, r1
 8019f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f22:	f000 f9e5 	bl	801a2f0 <_lseek_r>
 8019f26:	1c43      	adds	r3, r0, #1
 8019f28:	89a3      	ldrh	r3, [r4, #12]
 8019f2a:	bf15      	itete	ne
 8019f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8019f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019f36:	81a3      	strheq	r3, [r4, #12]
 8019f38:	bf18      	it	ne
 8019f3a:	81a3      	strhne	r3, [r4, #12]
 8019f3c:	bd10      	pop	{r4, pc}

08019f3e <__sclose>:
 8019f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f42:	f000 b8f1 	b.w	801a128 <_close_r>
	...

08019f48 <__swbuf_r>:
 8019f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f4a:	460e      	mov	r6, r1
 8019f4c:	4614      	mov	r4, r2
 8019f4e:	4605      	mov	r5, r0
 8019f50:	b118      	cbz	r0, 8019f5a <__swbuf_r+0x12>
 8019f52:	6983      	ldr	r3, [r0, #24]
 8019f54:	b90b      	cbnz	r3, 8019f5a <__swbuf_r+0x12>
 8019f56:	f7ff f8bf 	bl	80190d8 <__sinit>
 8019f5a:	4b21      	ldr	r3, [pc, #132]	; (8019fe0 <__swbuf_r+0x98>)
 8019f5c:	429c      	cmp	r4, r3
 8019f5e:	d12b      	bne.n	8019fb8 <__swbuf_r+0x70>
 8019f60:	686c      	ldr	r4, [r5, #4]
 8019f62:	69a3      	ldr	r3, [r4, #24]
 8019f64:	60a3      	str	r3, [r4, #8]
 8019f66:	89a3      	ldrh	r3, [r4, #12]
 8019f68:	071a      	lsls	r2, r3, #28
 8019f6a:	d52f      	bpl.n	8019fcc <__swbuf_r+0x84>
 8019f6c:	6923      	ldr	r3, [r4, #16]
 8019f6e:	b36b      	cbz	r3, 8019fcc <__swbuf_r+0x84>
 8019f70:	6923      	ldr	r3, [r4, #16]
 8019f72:	6820      	ldr	r0, [r4, #0]
 8019f74:	1ac0      	subs	r0, r0, r3
 8019f76:	6963      	ldr	r3, [r4, #20]
 8019f78:	b2f6      	uxtb	r6, r6
 8019f7a:	4283      	cmp	r3, r0
 8019f7c:	4637      	mov	r7, r6
 8019f7e:	dc04      	bgt.n	8019f8a <__swbuf_r+0x42>
 8019f80:	4621      	mov	r1, r4
 8019f82:	4628      	mov	r0, r5
 8019f84:	f000 f966 	bl	801a254 <_fflush_r>
 8019f88:	bb30      	cbnz	r0, 8019fd8 <__swbuf_r+0x90>
 8019f8a:	68a3      	ldr	r3, [r4, #8]
 8019f8c:	3b01      	subs	r3, #1
 8019f8e:	60a3      	str	r3, [r4, #8]
 8019f90:	6823      	ldr	r3, [r4, #0]
 8019f92:	1c5a      	adds	r2, r3, #1
 8019f94:	6022      	str	r2, [r4, #0]
 8019f96:	701e      	strb	r6, [r3, #0]
 8019f98:	6963      	ldr	r3, [r4, #20]
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	4283      	cmp	r3, r0
 8019f9e:	d004      	beq.n	8019faa <__swbuf_r+0x62>
 8019fa0:	89a3      	ldrh	r3, [r4, #12]
 8019fa2:	07db      	lsls	r3, r3, #31
 8019fa4:	d506      	bpl.n	8019fb4 <__swbuf_r+0x6c>
 8019fa6:	2e0a      	cmp	r6, #10
 8019fa8:	d104      	bne.n	8019fb4 <__swbuf_r+0x6c>
 8019faa:	4621      	mov	r1, r4
 8019fac:	4628      	mov	r0, r5
 8019fae:	f000 f951 	bl	801a254 <_fflush_r>
 8019fb2:	b988      	cbnz	r0, 8019fd8 <__swbuf_r+0x90>
 8019fb4:	4638      	mov	r0, r7
 8019fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fb8:	4b0a      	ldr	r3, [pc, #40]	; (8019fe4 <__swbuf_r+0x9c>)
 8019fba:	429c      	cmp	r4, r3
 8019fbc:	d101      	bne.n	8019fc2 <__swbuf_r+0x7a>
 8019fbe:	68ac      	ldr	r4, [r5, #8]
 8019fc0:	e7cf      	b.n	8019f62 <__swbuf_r+0x1a>
 8019fc2:	4b09      	ldr	r3, [pc, #36]	; (8019fe8 <__swbuf_r+0xa0>)
 8019fc4:	429c      	cmp	r4, r3
 8019fc6:	bf08      	it	eq
 8019fc8:	68ec      	ldreq	r4, [r5, #12]
 8019fca:	e7ca      	b.n	8019f62 <__swbuf_r+0x1a>
 8019fcc:	4621      	mov	r1, r4
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f000 f81e 	bl	801a010 <__swsetup_r>
 8019fd4:	2800      	cmp	r0, #0
 8019fd6:	d0cb      	beq.n	8019f70 <__swbuf_r+0x28>
 8019fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8019fdc:	e7ea      	b.n	8019fb4 <__swbuf_r+0x6c>
 8019fde:	bf00      	nop
 8019fe0:	0801ace4 	.word	0x0801ace4
 8019fe4:	0801ad04 	.word	0x0801ad04
 8019fe8:	0801acc4 	.word	0x0801acc4

08019fec <_write_r>:
 8019fec:	b538      	push	{r3, r4, r5, lr}
 8019fee:	4d07      	ldr	r5, [pc, #28]	; (801a00c <_write_r+0x20>)
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	4608      	mov	r0, r1
 8019ff4:	4611      	mov	r1, r2
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	602a      	str	r2, [r5, #0]
 8019ffa:	461a      	mov	r2, r3
 8019ffc:	f7e8 fc05 	bl	800280a <_write>
 801a000:	1c43      	adds	r3, r0, #1
 801a002:	d102      	bne.n	801a00a <_write_r+0x1e>
 801a004:	682b      	ldr	r3, [r5, #0]
 801a006:	b103      	cbz	r3, 801a00a <_write_r+0x1e>
 801a008:	6023      	str	r3, [r4, #0]
 801a00a:	bd38      	pop	{r3, r4, r5, pc}
 801a00c:	20001a04 	.word	0x20001a04

0801a010 <__swsetup_r>:
 801a010:	4b32      	ldr	r3, [pc, #200]	; (801a0dc <__swsetup_r+0xcc>)
 801a012:	b570      	push	{r4, r5, r6, lr}
 801a014:	681d      	ldr	r5, [r3, #0]
 801a016:	4606      	mov	r6, r0
 801a018:	460c      	mov	r4, r1
 801a01a:	b125      	cbz	r5, 801a026 <__swsetup_r+0x16>
 801a01c:	69ab      	ldr	r3, [r5, #24]
 801a01e:	b913      	cbnz	r3, 801a026 <__swsetup_r+0x16>
 801a020:	4628      	mov	r0, r5
 801a022:	f7ff f859 	bl	80190d8 <__sinit>
 801a026:	4b2e      	ldr	r3, [pc, #184]	; (801a0e0 <__swsetup_r+0xd0>)
 801a028:	429c      	cmp	r4, r3
 801a02a:	d10f      	bne.n	801a04c <__swsetup_r+0x3c>
 801a02c:	686c      	ldr	r4, [r5, #4]
 801a02e:	89a3      	ldrh	r3, [r4, #12]
 801a030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a034:	0719      	lsls	r1, r3, #28
 801a036:	d42c      	bmi.n	801a092 <__swsetup_r+0x82>
 801a038:	06dd      	lsls	r5, r3, #27
 801a03a:	d411      	bmi.n	801a060 <__swsetup_r+0x50>
 801a03c:	2309      	movs	r3, #9
 801a03e:	6033      	str	r3, [r6, #0]
 801a040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a044:	81a3      	strh	r3, [r4, #12]
 801a046:	f04f 30ff 	mov.w	r0, #4294967295
 801a04a:	e03e      	b.n	801a0ca <__swsetup_r+0xba>
 801a04c:	4b25      	ldr	r3, [pc, #148]	; (801a0e4 <__swsetup_r+0xd4>)
 801a04e:	429c      	cmp	r4, r3
 801a050:	d101      	bne.n	801a056 <__swsetup_r+0x46>
 801a052:	68ac      	ldr	r4, [r5, #8]
 801a054:	e7eb      	b.n	801a02e <__swsetup_r+0x1e>
 801a056:	4b24      	ldr	r3, [pc, #144]	; (801a0e8 <__swsetup_r+0xd8>)
 801a058:	429c      	cmp	r4, r3
 801a05a:	bf08      	it	eq
 801a05c:	68ec      	ldreq	r4, [r5, #12]
 801a05e:	e7e6      	b.n	801a02e <__swsetup_r+0x1e>
 801a060:	0758      	lsls	r0, r3, #29
 801a062:	d512      	bpl.n	801a08a <__swsetup_r+0x7a>
 801a064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a066:	b141      	cbz	r1, 801a07a <__swsetup_r+0x6a>
 801a068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a06c:	4299      	cmp	r1, r3
 801a06e:	d002      	beq.n	801a076 <__swsetup_r+0x66>
 801a070:	4630      	mov	r0, r6
 801a072:	f7fd fb8b 	bl	801778c <_free_r>
 801a076:	2300      	movs	r3, #0
 801a078:	6363      	str	r3, [r4, #52]	; 0x34
 801a07a:	89a3      	ldrh	r3, [r4, #12]
 801a07c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a080:	81a3      	strh	r3, [r4, #12]
 801a082:	2300      	movs	r3, #0
 801a084:	6063      	str	r3, [r4, #4]
 801a086:	6923      	ldr	r3, [r4, #16]
 801a088:	6023      	str	r3, [r4, #0]
 801a08a:	89a3      	ldrh	r3, [r4, #12]
 801a08c:	f043 0308 	orr.w	r3, r3, #8
 801a090:	81a3      	strh	r3, [r4, #12]
 801a092:	6923      	ldr	r3, [r4, #16]
 801a094:	b94b      	cbnz	r3, 801a0aa <__swsetup_r+0x9a>
 801a096:	89a3      	ldrh	r3, [r4, #12]
 801a098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a09c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0a0:	d003      	beq.n	801a0aa <__swsetup_r+0x9a>
 801a0a2:	4621      	mov	r1, r4
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	f000 f959 	bl	801a35c <__smakebuf_r>
 801a0aa:	89a0      	ldrh	r0, [r4, #12]
 801a0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0b0:	f010 0301 	ands.w	r3, r0, #1
 801a0b4:	d00a      	beq.n	801a0cc <__swsetup_r+0xbc>
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	60a3      	str	r3, [r4, #8]
 801a0ba:	6963      	ldr	r3, [r4, #20]
 801a0bc:	425b      	negs	r3, r3
 801a0be:	61a3      	str	r3, [r4, #24]
 801a0c0:	6923      	ldr	r3, [r4, #16]
 801a0c2:	b943      	cbnz	r3, 801a0d6 <__swsetup_r+0xc6>
 801a0c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a0c8:	d1ba      	bne.n	801a040 <__swsetup_r+0x30>
 801a0ca:	bd70      	pop	{r4, r5, r6, pc}
 801a0cc:	0781      	lsls	r1, r0, #30
 801a0ce:	bf58      	it	pl
 801a0d0:	6963      	ldrpl	r3, [r4, #20]
 801a0d2:	60a3      	str	r3, [r4, #8]
 801a0d4:	e7f4      	b.n	801a0c0 <__swsetup_r+0xb0>
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	e7f7      	b.n	801a0ca <__swsetup_r+0xba>
 801a0da:	bf00      	nop
 801a0dc:	200000f0 	.word	0x200000f0
 801a0e0:	0801ace4 	.word	0x0801ace4
 801a0e4:	0801ad04 	.word	0x0801ad04
 801a0e8:	0801acc4 	.word	0x0801acc4

0801a0ec <__assert_func>:
 801a0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a0ee:	4614      	mov	r4, r2
 801a0f0:	461a      	mov	r2, r3
 801a0f2:	4b09      	ldr	r3, [pc, #36]	; (801a118 <__assert_func+0x2c>)
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	4605      	mov	r5, r0
 801a0f8:	68d8      	ldr	r0, [r3, #12]
 801a0fa:	b14c      	cbz	r4, 801a110 <__assert_func+0x24>
 801a0fc:	4b07      	ldr	r3, [pc, #28]	; (801a11c <__assert_func+0x30>)
 801a0fe:	9100      	str	r1, [sp, #0]
 801a100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a104:	4906      	ldr	r1, [pc, #24]	; (801a120 <__assert_func+0x34>)
 801a106:	462b      	mov	r3, r5
 801a108:	f000 f8e0 	bl	801a2cc <fiprintf>
 801a10c:	f7fd facc 	bl	80176a8 <abort>
 801a110:	4b04      	ldr	r3, [pc, #16]	; (801a124 <__assert_func+0x38>)
 801a112:	461c      	mov	r4, r3
 801a114:	e7f3      	b.n	801a0fe <__assert_func+0x12>
 801a116:	bf00      	nop
 801a118:	200000f0 	.word	0x200000f0
 801a11c:	0801ae95 	.word	0x0801ae95
 801a120:	0801aea2 	.word	0x0801aea2
 801a124:	0801aed0 	.word	0x0801aed0

0801a128 <_close_r>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	4d06      	ldr	r5, [pc, #24]	; (801a144 <_close_r+0x1c>)
 801a12c:	2300      	movs	r3, #0
 801a12e:	4604      	mov	r4, r0
 801a130:	4608      	mov	r0, r1
 801a132:	602b      	str	r3, [r5, #0]
 801a134:	f7e8 fb85 	bl	8002842 <_close>
 801a138:	1c43      	adds	r3, r0, #1
 801a13a:	d102      	bne.n	801a142 <_close_r+0x1a>
 801a13c:	682b      	ldr	r3, [r5, #0]
 801a13e:	b103      	cbz	r3, 801a142 <_close_r+0x1a>
 801a140:	6023      	str	r3, [r4, #0]
 801a142:	bd38      	pop	{r3, r4, r5, pc}
 801a144:	20001a04 	.word	0x20001a04

0801a148 <__sflush_r>:
 801a148:	898a      	ldrh	r2, [r1, #12]
 801a14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a14e:	4605      	mov	r5, r0
 801a150:	0710      	lsls	r0, r2, #28
 801a152:	460c      	mov	r4, r1
 801a154:	d458      	bmi.n	801a208 <__sflush_r+0xc0>
 801a156:	684b      	ldr	r3, [r1, #4]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	dc05      	bgt.n	801a168 <__sflush_r+0x20>
 801a15c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a15e:	2b00      	cmp	r3, #0
 801a160:	dc02      	bgt.n	801a168 <__sflush_r+0x20>
 801a162:	2000      	movs	r0, #0
 801a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a16a:	2e00      	cmp	r6, #0
 801a16c:	d0f9      	beq.n	801a162 <__sflush_r+0x1a>
 801a16e:	2300      	movs	r3, #0
 801a170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a174:	682f      	ldr	r7, [r5, #0]
 801a176:	602b      	str	r3, [r5, #0]
 801a178:	d032      	beq.n	801a1e0 <__sflush_r+0x98>
 801a17a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a17c:	89a3      	ldrh	r3, [r4, #12]
 801a17e:	075a      	lsls	r2, r3, #29
 801a180:	d505      	bpl.n	801a18e <__sflush_r+0x46>
 801a182:	6863      	ldr	r3, [r4, #4]
 801a184:	1ac0      	subs	r0, r0, r3
 801a186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a188:	b10b      	cbz	r3, 801a18e <__sflush_r+0x46>
 801a18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a18c:	1ac0      	subs	r0, r0, r3
 801a18e:	2300      	movs	r3, #0
 801a190:	4602      	mov	r2, r0
 801a192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a194:	6a21      	ldr	r1, [r4, #32]
 801a196:	4628      	mov	r0, r5
 801a198:	47b0      	blx	r6
 801a19a:	1c43      	adds	r3, r0, #1
 801a19c:	89a3      	ldrh	r3, [r4, #12]
 801a19e:	d106      	bne.n	801a1ae <__sflush_r+0x66>
 801a1a0:	6829      	ldr	r1, [r5, #0]
 801a1a2:	291d      	cmp	r1, #29
 801a1a4:	d82c      	bhi.n	801a200 <__sflush_r+0xb8>
 801a1a6:	4a2a      	ldr	r2, [pc, #168]	; (801a250 <__sflush_r+0x108>)
 801a1a8:	40ca      	lsrs	r2, r1
 801a1aa:	07d6      	lsls	r6, r2, #31
 801a1ac:	d528      	bpl.n	801a200 <__sflush_r+0xb8>
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	6062      	str	r2, [r4, #4]
 801a1b2:	04d9      	lsls	r1, r3, #19
 801a1b4:	6922      	ldr	r2, [r4, #16]
 801a1b6:	6022      	str	r2, [r4, #0]
 801a1b8:	d504      	bpl.n	801a1c4 <__sflush_r+0x7c>
 801a1ba:	1c42      	adds	r2, r0, #1
 801a1bc:	d101      	bne.n	801a1c2 <__sflush_r+0x7a>
 801a1be:	682b      	ldr	r3, [r5, #0]
 801a1c0:	b903      	cbnz	r3, 801a1c4 <__sflush_r+0x7c>
 801a1c2:	6560      	str	r0, [r4, #84]	; 0x54
 801a1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1c6:	602f      	str	r7, [r5, #0]
 801a1c8:	2900      	cmp	r1, #0
 801a1ca:	d0ca      	beq.n	801a162 <__sflush_r+0x1a>
 801a1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1d0:	4299      	cmp	r1, r3
 801a1d2:	d002      	beq.n	801a1da <__sflush_r+0x92>
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	f7fd fad9 	bl	801778c <_free_r>
 801a1da:	2000      	movs	r0, #0
 801a1dc:	6360      	str	r0, [r4, #52]	; 0x34
 801a1de:	e7c1      	b.n	801a164 <__sflush_r+0x1c>
 801a1e0:	6a21      	ldr	r1, [r4, #32]
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	4628      	mov	r0, r5
 801a1e6:	47b0      	blx	r6
 801a1e8:	1c41      	adds	r1, r0, #1
 801a1ea:	d1c7      	bne.n	801a17c <__sflush_r+0x34>
 801a1ec:	682b      	ldr	r3, [r5, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d0c4      	beq.n	801a17c <__sflush_r+0x34>
 801a1f2:	2b1d      	cmp	r3, #29
 801a1f4:	d001      	beq.n	801a1fa <__sflush_r+0xb2>
 801a1f6:	2b16      	cmp	r3, #22
 801a1f8:	d101      	bne.n	801a1fe <__sflush_r+0xb6>
 801a1fa:	602f      	str	r7, [r5, #0]
 801a1fc:	e7b1      	b.n	801a162 <__sflush_r+0x1a>
 801a1fe:	89a3      	ldrh	r3, [r4, #12]
 801a200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a204:	81a3      	strh	r3, [r4, #12]
 801a206:	e7ad      	b.n	801a164 <__sflush_r+0x1c>
 801a208:	690f      	ldr	r7, [r1, #16]
 801a20a:	2f00      	cmp	r7, #0
 801a20c:	d0a9      	beq.n	801a162 <__sflush_r+0x1a>
 801a20e:	0793      	lsls	r3, r2, #30
 801a210:	680e      	ldr	r6, [r1, #0]
 801a212:	bf08      	it	eq
 801a214:	694b      	ldreq	r3, [r1, #20]
 801a216:	600f      	str	r7, [r1, #0]
 801a218:	bf18      	it	ne
 801a21a:	2300      	movne	r3, #0
 801a21c:	eba6 0807 	sub.w	r8, r6, r7
 801a220:	608b      	str	r3, [r1, #8]
 801a222:	f1b8 0f00 	cmp.w	r8, #0
 801a226:	dd9c      	ble.n	801a162 <__sflush_r+0x1a>
 801a228:	6a21      	ldr	r1, [r4, #32]
 801a22a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a22c:	4643      	mov	r3, r8
 801a22e:	463a      	mov	r2, r7
 801a230:	4628      	mov	r0, r5
 801a232:	47b0      	blx	r6
 801a234:	2800      	cmp	r0, #0
 801a236:	dc06      	bgt.n	801a246 <__sflush_r+0xfe>
 801a238:	89a3      	ldrh	r3, [r4, #12]
 801a23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a23e:	81a3      	strh	r3, [r4, #12]
 801a240:	f04f 30ff 	mov.w	r0, #4294967295
 801a244:	e78e      	b.n	801a164 <__sflush_r+0x1c>
 801a246:	4407      	add	r7, r0
 801a248:	eba8 0800 	sub.w	r8, r8, r0
 801a24c:	e7e9      	b.n	801a222 <__sflush_r+0xda>
 801a24e:	bf00      	nop
 801a250:	20400001 	.word	0x20400001

0801a254 <_fflush_r>:
 801a254:	b538      	push	{r3, r4, r5, lr}
 801a256:	690b      	ldr	r3, [r1, #16]
 801a258:	4605      	mov	r5, r0
 801a25a:	460c      	mov	r4, r1
 801a25c:	b913      	cbnz	r3, 801a264 <_fflush_r+0x10>
 801a25e:	2500      	movs	r5, #0
 801a260:	4628      	mov	r0, r5
 801a262:	bd38      	pop	{r3, r4, r5, pc}
 801a264:	b118      	cbz	r0, 801a26e <_fflush_r+0x1a>
 801a266:	6983      	ldr	r3, [r0, #24]
 801a268:	b90b      	cbnz	r3, 801a26e <_fflush_r+0x1a>
 801a26a:	f7fe ff35 	bl	80190d8 <__sinit>
 801a26e:	4b14      	ldr	r3, [pc, #80]	; (801a2c0 <_fflush_r+0x6c>)
 801a270:	429c      	cmp	r4, r3
 801a272:	d11b      	bne.n	801a2ac <_fflush_r+0x58>
 801a274:	686c      	ldr	r4, [r5, #4]
 801a276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d0ef      	beq.n	801a25e <_fflush_r+0xa>
 801a27e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a280:	07d0      	lsls	r0, r2, #31
 801a282:	d404      	bmi.n	801a28e <_fflush_r+0x3a>
 801a284:	0599      	lsls	r1, r3, #22
 801a286:	d402      	bmi.n	801a28e <_fflush_r+0x3a>
 801a288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a28a:	f7fe ffc8 	bl	801921e <__retarget_lock_acquire_recursive>
 801a28e:	4628      	mov	r0, r5
 801a290:	4621      	mov	r1, r4
 801a292:	f7ff ff59 	bl	801a148 <__sflush_r>
 801a296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a298:	07da      	lsls	r2, r3, #31
 801a29a:	4605      	mov	r5, r0
 801a29c:	d4e0      	bmi.n	801a260 <_fflush_r+0xc>
 801a29e:	89a3      	ldrh	r3, [r4, #12]
 801a2a0:	059b      	lsls	r3, r3, #22
 801a2a2:	d4dd      	bmi.n	801a260 <_fflush_r+0xc>
 801a2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2a6:	f7fe ffbb 	bl	8019220 <__retarget_lock_release_recursive>
 801a2aa:	e7d9      	b.n	801a260 <_fflush_r+0xc>
 801a2ac:	4b05      	ldr	r3, [pc, #20]	; (801a2c4 <_fflush_r+0x70>)
 801a2ae:	429c      	cmp	r4, r3
 801a2b0:	d101      	bne.n	801a2b6 <_fflush_r+0x62>
 801a2b2:	68ac      	ldr	r4, [r5, #8]
 801a2b4:	e7df      	b.n	801a276 <_fflush_r+0x22>
 801a2b6:	4b04      	ldr	r3, [pc, #16]	; (801a2c8 <_fflush_r+0x74>)
 801a2b8:	429c      	cmp	r4, r3
 801a2ba:	bf08      	it	eq
 801a2bc:	68ec      	ldreq	r4, [r5, #12]
 801a2be:	e7da      	b.n	801a276 <_fflush_r+0x22>
 801a2c0:	0801ace4 	.word	0x0801ace4
 801a2c4:	0801ad04 	.word	0x0801ad04
 801a2c8:	0801acc4 	.word	0x0801acc4

0801a2cc <fiprintf>:
 801a2cc:	b40e      	push	{r1, r2, r3}
 801a2ce:	b503      	push	{r0, r1, lr}
 801a2d0:	4601      	mov	r1, r0
 801a2d2:	ab03      	add	r3, sp, #12
 801a2d4:	4805      	ldr	r0, [pc, #20]	; (801a2ec <fiprintf+0x20>)
 801a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2da:	6800      	ldr	r0, [r0, #0]
 801a2dc:	9301      	str	r3, [sp, #4]
 801a2de:	f7ff fcbf 	bl	8019c60 <_vfiprintf_r>
 801a2e2:	b002      	add	sp, #8
 801a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2e8:	b003      	add	sp, #12
 801a2ea:	4770      	bx	lr
 801a2ec:	200000f0 	.word	0x200000f0

0801a2f0 <_lseek_r>:
 801a2f0:	b538      	push	{r3, r4, r5, lr}
 801a2f2:	4d07      	ldr	r5, [pc, #28]	; (801a310 <_lseek_r+0x20>)
 801a2f4:	4604      	mov	r4, r0
 801a2f6:	4608      	mov	r0, r1
 801a2f8:	4611      	mov	r1, r2
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	602a      	str	r2, [r5, #0]
 801a2fe:	461a      	mov	r2, r3
 801a300:	f7e8 fac6 	bl	8002890 <_lseek>
 801a304:	1c43      	adds	r3, r0, #1
 801a306:	d102      	bne.n	801a30e <_lseek_r+0x1e>
 801a308:	682b      	ldr	r3, [r5, #0]
 801a30a:	b103      	cbz	r3, 801a30e <_lseek_r+0x1e>
 801a30c:	6023      	str	r3, [r4, #0]
 801a30e:	bd38      	pop	{r3, r4, r5, pc}
 801a310:	20001a04 	.word	0x20001a04

0801a314 <__swhatbuf_r>:
 801a314:	b570      	push	{r4, r5, r6, lr}
 801a316:	460e      	mov	r6, r1
 801a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a31c:	2900      	cmp	r1, #0
 801a31e:	b096      	sub	sp, #88	; 0x58
 801a320:	4614      	mov	r4, r2
 801a322:	461d      	mov	r5, r3
 801a324:	da07      	bge.n	801a336 <__swhatbuf_r+0x22>
 801a326:	2300      	movs	r3, #0
 801a328:	602b      	str	r3, [r5, #0]
 801a32a:	89b3      	ldrh	r3, [r6, #12]
 801a32c:	061a      	lsls	r2, r3, #24
 801a32e:	d410      	bmi.n	801a352 <__swhatbuf_r+0x3e>
 801a330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a334:	e00e      	b.n	801a354 <__swhatbuf_r+0x40>
 801a336:	466a      	mov	r2, sp
 801a338:	f000 f8a8 	bl	801a48c <_fstat_r>
 801a33c:	2800      	cmp	r0, #0
 801a33e:	dbf2      	blt.n	801a326 <__swhatbuf_r+0x12>
 801a340:	9a01      	ldr	r2, [sp, #4]
 801a342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a34a:	425a      	negs	r2, r3
 801a34c:	415a      	adcs	r2, r3
 801a34e:	602a      	str	r2, [r5, #0]
 801a350:	e7ee      	b.n	801a330 <__swhatbuf_r+0x1c>
 801a352:	2340      	movs	r3, #64	; 0x40
 801a354:	2000      	movs	r0, #0
 801a356:	6023      	str	r3, [r4, #0]
 801a358:	b016      	add	sp, #88	; 0x58
 801a35a:	bd70      	pop	{r4, r5, r6, pc}

0801a35c <__smakebuf_r>:
 801a35c:	898b      	ldrh	r3, [r1, #12]
 801a35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a360:	079d      	lsls	r5, r3, #30
 801a362:	4606      	mov	r6, r0
 801a364:	460c      	mov	r4, r1
 801a366:	d507      	bpl.n	801a378 <__smakebuf_r+0x1c>
 801a368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a36c:	6023      	str	r3, [r4, #0]
 801a36e:	6123      	str	r3, [r4, #16]
 801a370:	2301      	movs	r3, #1
 801a372:	6163      	str	r3, [r4, #20]
 801a374:	b002      	add	sp, #8
 801a376:	bd70      	pop	{r4, r5, r6, pc}
 801a378:	ab01      	add	r3, sp, #4
 801a37a:	466a      	mov	r2, sp
 801a37c:	f7ff ffca 	bl	801a314 <__swhatbuf_r>
 801a380:	9900      	ldr	r1, [sp, #0]
 801a382:	4605      	mov	r5, r0
 801a384:	4630      	mov	r0, r6
 801a386:	f7fd fa51 	bl	801782c <_malloc_r>
 801a38a:	b948      	cbnz	r0, 801a3a0 <__smakebuf_r+0x44>
 801a38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a390:	059a      	lsls	r2, r3, #22
 801a392:	d4ef      	bmi.n	801a374 <__smakebuf_r+0x18>
 801a394:	f023 0303 	bic.w	r3, r3, #3
 801a398:	f043 0302 	orr.w	r3, r3, #2
 801a39c:	81a3      	strh	r3, [r4, #12]
 801a39e:	e7e3      	b.n	801a368 <__smakebuf_r+0xc>
 801a3a0:	4b0d      	ldr	r3, [pc, #52]	; (801a3d8 <__smakebuf_r+0x7c>)
 801a3a2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a3a4:	89a3      	ldrh	r3, [r4, #12]
 801a3a6:	6020      	str	r0, [r4, #0]
 801a3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a3ac:	81a3      	strh	r3, [r4, #12]
 801a3ae:	9b00      	ldr	r3, [sp, #0]
 801a3b0:	6163      	str	r3, [r4, #20]
 801a3b2:	9b01      	ldr	r3, [sp, #4]
 801a3b4:	6120      	str	r0, [r4, #16]
 801a3b6:	b15b      	cbz	r3, 801a3d0 <__smakebuf_r+0x74>
 801a3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3bc:	4630      	mov	r0, r6
 801a3be:	f000 f877 	bl	801a4b0 <_isatty_r>
 801a3c2:	b128      	cbz	r0, 801a3d0 <__smakebuf_r+0x74>
 801a3c4:	89a3      	ldrh	r3, [r4, #12]
 801a3c6:	f023 0303 	bic.w	r3, r3, #3
 801a3ca:	f043 0301 	orr.w	r3, r3, #1
 801a3ce:	81a3      	strh	r3, [r4, #12]
 801a3d0:	89a0      	ldrh	r0, [r4, #12]
 801a3d2:	4305      	orrs	r5, r0
 801a3d4:	81a5      	strh	r5, [r4, #12]
 801a3d6:	e7cd      	b.n	801a374 <__smakebuf_r+0x18>
 801a3d8:	08019071 	.word	0x08019071

0801a3dc <__ascii_mbtowc>:
 801a3dc:	b082      	sub	sp, #8
 801a3de:	b901      	cbnz	r1, 801a3e2 <__ascii_mbtowc+0x6>
 801a3e0:	a901      	add	r1, sp, #4
 801a3e2:	b142      	cbz	r2, 801a3f6 <__ascii_mbtowc+0x1a>
 801a3e4:	b14b      	cbz	r3, 801a3fa <__ascii_mbtowc+0x1e>
 801a3e6:	7813      	ldrb	r3, [r2, #0]
 801a3e8:	600b      	str	r3, [r1, #0]
 801a3ea:	7812      	ldrb	r2, [r2, #0]
 801a3ec:	1e10      	subs	r0, r2, #0
 801a3ee:	bf18      	it	ne
 801a3f0:	2001      	movne	r0, #1
 801a3f2:	b002      	add	sp, #8
 801a3f4:	4770      	bx	lr
 801a3f6:	4610      	mov	r0, r2
 801a3f8:	e7fb      	b.n	801a3f2 <__ascii_mbtowc+0x16>
 801a3fa:	f06f 0001 	mvn.w	r0, #1
 801a3fe:	e7f8      	b.n	801a3f2 <__ascii_mbtowc+0x16>

0801a400 <_realloc_r>:
 801a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a402:	4607      	mov	r7, r0
 801a404:	4614      	mov	r4, r2
 801a406:	460e      	mov	r6, r1
 801a408:	b921      	cbnz	r1, 801a414 <_realloc_r+0x14>
 801a40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a40e:	4611      	mov	r1, r2
 801a410:	f7fd ba0c 	b.w	801782c <_malloc_r>
 801a414:	b922      	cbnz	r2, 801a420 <_realloc_r+0x20>
 801a416:	f7fd f9b9 	bl	801778c <_free_r>
 801a41a:	4625      	mov	r5, r4
 801a41c:	4628      	mov	r0, r5
 801a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a420:	f000 f856 	bl	801a4d0 <_malloc_usable_size_r>
 801a424:	42a0      	cmp	r0, r4
 801a426:	d20f      	bcs.n	801a448 <_realloc_r+0x48>
 801a428:	4621      	mov	r1, r4
 801a42a:	4638      	mov	r0, r7
 801a42c:	f7fd f9fe 	bl	801782c <_malloc_r>
 801a430:	4605      	mov	r5, r0
 801a432:	2800      	cmp	r0, #0
 801a434:	d0f2      	beq.n	801a41c <_realloc_r+0x1c>
 801a436:	4631      	mov	r1, r6
 801a438:	4622      	mov	r2, r4
 801a43a:	f7fd f977 	bl	801772c <memcpy>
 801a43e:	4631      	mov	r1, r6
 801a440:	4638      	mov	r0, r7
 801a442:	f7fd f9a3 	bl	801778c <_free_r>
 801a446:	e7e9      	b.n	801a41c <_realloc_r+0x1c>
 801a448:	4635      	mov	r5, r6
 801a44a:	e7e7      	b.n	801a41c <_realloc_r+0x1c>

0801a44c <_read_r>:
 801a44c:	b538      	push	{r3, r4, r5, lr}
 801a44e:	4d07      	ldr	r5, [pc, #28]	; (801a46c <_read_r+0x20>)
 801a450:	4604      	mov	r4, r0
 801a452:	4608      	mov	r0, r1
 801a454:	4611      	mov	r1, r2
 801a456:	2200      	movs	r2, #0
 801a458:	602a      	str	r2, [r5, #0]
 801a45a:	461a      	mov	r2, r3
 801a45c:	f7e8 f9b8 	bl	80027d0 <_read>
 801a460:	1c43      	adds	r3, r0, #1
 801a462:	d102      	bne.n	801a46a <_read_r+0x1e>
 801a464:	682b      	ldr	r3, [r5, #0]
 801a466:	b103      	cbz	r3, 801a46a <_read_r+0x1e>
 801a468:	6023      	str	r3, [r4, #0]
 801a46a:	bd38      	pop	{r3, r4, r5, pc}
 801a46c:	20001a04 	.word	0x20001a04

0801a470 <__ascii_wctomb>:
 801a470:	b149      	cbz	r1, 801a486 <__ascii_wctomb+0x16>
 801a472:	2aff      	cmp	r2, #255	; 0xff
 801a474:	bf85      	ittet	hi
 801a476:	238a      	movhi	r3, #138	; 0x8a
 801a478:	6003      	strhi	r3, [r0, #0]
 801a47a:	700a      	strbls	r2, [r1, #0]
 801a47c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a480:	bf98      	it	ls
 801a482:	2001      	movls	r0, #1
 801a484:	4770      	bx	lr
 801a486:	4608      	mov	r0, r1
 801a488:	4770      	bx	lr
	...

0801a48c <_fstat_r>:
 801a48c:	b538      	push	{r3, r4, r5, lr}
 801a48e:	4d07      	ldr	r5, [pc, #28]	; (801a4ac <_fstat_r+0x20>)
 801a490:	2300      	movs	r3, #0
 801a492:	4604      	mov	r4, r0
 801a494:	4608      	mov	r0, r1
 801a496:	4611      	mov	r1, r2
 801a498:	602b      	str	r3, [r5, #0]
 801a49a:	f7e8 f9de 	bl	800285a <_fstat>
 801a49e:	1c43      	adds	r3, r0, #1
 801a4a0:	d102      	bne.n	801a4a8 <_fstat_r+0x1c>
 801a4a2:	682b      	ldr	r3, [r5, #0]
 801a4a4:	b103      	cbz	r3, 801a4a8 <_fstat_r+0x1c>
 801a4a6:	6023      	str	r3, [r4, #0]
 801a4a8:	bd38      	pop	{r3, r4, r5, pc}
 801a4aa:	bf00      	nop
 801a4ac:	20001a04 	.word	0x20001a04

0801a4b0 <_isatty_r>:
 801a4b0:	b538      	push	{r3, r4, r5, lr}
 801a4b2:	4d06      	ldr	r5, [pc, #24]	; (801a4cc <_isatty_r+0x1c>)
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	4608      	mov	r0, r1
 801a4ba:	602b      	str	r3, [r5, #0]
 801a4bc:	f7e8 f9dd 	bl	800287a <_isatty>
 801a4c0:	1c43      	adds	r3, r0, #1
 801a4c2:	d102      	bne.n	801a4ca <_isatty_r+0x1a>
 801a4c4:	682b      	ldr	r3, [r5, #0]
 801a4c6:	b103      	cbz	r3, 801a4ca <_isatty_r+0x1a>
 801a4c8:	6023      	str	r3, [r4, #0]
 801a4ca:	bd38      	pop	{r3, r4, r5, pc}
 801a4cc:	20001a04 	.word	0x20001a04

0801a4d0 <_malloc_usable_size_r>:
 801a4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4d4:	1f18      	subs	r0, r3, #4
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	bfbc      	itt	lt
 801a4da:	580b      	ldrlt	r3, [r1, r0]
 801a4dc:	18c0      	addlt	r0, r0, r3
 801a4de:	4770      	bx	lr

0801a4e0 <_init>:
 801a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4e2:	bf00      	nop
 801a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4e6:	bc08      	pop	{r3}
 801a4e8:	469e      	mov	lr, r3
 801a4ea:	4770      	bx	lr

0801a4ec <_fini>:
 801a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ee:	bf00      	nop
 801a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4f2:	bc08      	pop	{r3}
 801a4f4:	469e      	mov	lr, r3
 801a4f6:	4770      	bx	lr
