
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0801a6f8  0801a6f8  0002a6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b26c  0801b26c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b26c  0801b26c  0002b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b274  0801b274  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b274  0801b274  0002b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b278  0801b278  0002b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801b27c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801b53c  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801b53c  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f0cc  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006044  00000000  00000000  0007f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b60  00000000  00000000  00085400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002918  00000000  00000000  00087f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000312ae  00000000  00000000  0008a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b068  00000000  00000000  000bbb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001167f0  00000000  00000000  000e6b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3e0  00000000  00000000  001fd3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a6e0 	.word	0x0801a6e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a6e0 	.word	0x0801a6e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f4e:	801a      	strh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <_ZN14WobbleBoardAppC1Ev+0x98>)
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
{
}
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	3e4ccccd 	.word	0x3e4ccccd

08000fdc <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 f9d1 	bl	800638c <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fea:	f001 fda5 	bl	8002b38 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc45 	bl	8001880 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f85e 	bl	80010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ffc:	f001 f9ba 	bl	8002374 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 fa72 	bl	80024ea <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f014 fc62 	bl	80158d4 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d132      	bne.n	800107c <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8001026:	edd7 7a07 	vldr	s15, [r7, #28]
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 2a90 	vmov	r2, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8001046:	edd7 7a07 	vldr	s15, [r7, #28]
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 2a90 	vmov	r2, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001056:	edd7 7a05 	vldr	s15, [r7, #20]
 800105a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	ee17 2a90 	vmov	r2, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	615a      	str	r2, [r3, #20]

		MagCalStatus = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	721a      	strb	r2, [r3, #8]
	}

	DWTInit();
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fb5b 	bl	8001738 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001082:	f000 fe53 	bl	8001d2c <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	if(Enable6XMotionFusion == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbd9 	bl	8001850 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 800109e:	e002      	b.n	80010a6 <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbe1 	bl	8001868 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb9e 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	43fa0000 	.word	0x43fa0000

080010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 80010c0:	f000 ffde 	bl	8002080 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 80010c4:	f000 ffe4 	bl	8002090 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 80010c8:	f000 ffea 	bl	80020a0 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010e4 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 80010d0:	f001 f845 	bl	800215e <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f001 f851 	bl	800217c <BSP_SENSOR_ACC_SetFullScale>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//			HandleCMD((TMsg *)&msg_cmd);
//		}
//	}
//

	if (MagCalRequest == 1U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <_ZN14WobbleBoardApp7ProcessEv+0x44>
	{
		MagCalRequest = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	721a      	strb	r2, [r3, #8]
		MagOffset.x = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
		MagOffset.y = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
		MagOffset.z = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001126:	200a      	movs	r0, #10
 8001128:	f001 f9df 	bl	80024ea <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!IsInUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZN14WobbleBoardApp7ProcessEv+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <_ZN14WobbleBoardApp7ProcessEv+0x64>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <_ZN14WobbleBoardApp7ProcessEv+0x70>
	{
		SensorReadRequest = 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n User Calibration Mode timer counter: %d \r\n",
//			userCalbirationModeTimerCount);
//		printf("%s", DataOut);
	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(IsInUserCalibrationMode)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
	{
		CaptureMotionFXGravityXData();
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fbe8 	bl	8001938 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>

		if(HAL_GetTick() - UserCalibrationTimerTimestamp  >= USER_CALIBRATION_TIME)
 8001168:	f005 fa7a 	bl	8006660 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	bf2c      	ite	cs
 800117e:	2301      	movcs	r3, #1
 8001180:	2300      	movcc	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
		{
			ExitUserCalibrationMode(false);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fcda 	bl	8001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
		}
	}

	if (SensorReadRequest == 1U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <_ZN14WobbleBoardApp7ProcessEv+0xcc>
	{
		SensorReadRequest = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f91a 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200014a8 	.word	0x200014a8

080011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 ff9f 	bl	8002110 <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d116      	bne.n	800120a <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6999      	ldr	r1, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6a12      	ldr	r2, [r2, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	f017 f947 	bl	801848c <sniprintf>
		printf("%s", DataOut);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	334c      	adds	r3, #76	; 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001206:	f017 f8d5 	bl	80183b4 <iprintf>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0801a6f8 	.word	0x0801a6f8
 8001218:	0801a724 	.word	0x0801a724

0800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3324      	adds	r3, #36	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff7e 	bl	800212a <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001234:	2b00      	cmp	r3, #0
 8001236:	d116      	bne.n	8001266 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f017 f919 	bl	801848c <sniprintf>
		printf("%s", DataOut);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	334c      	adds	r3, #76	; 0x4c
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 8001262:	f017 f8a7 	bl	80183b4 <iprintf>
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801a728 	.word	0x0801a728
 8001274:	0801a724 	.word	0x0801a724

08001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f000 ff5d 	bl	8002144 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7a1b      	ldrb	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d16d      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	f103 020a 	add.w	r2, r3, #10
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f8e8 	bl	80024cc <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012fc:	7e3b      	ldrb	r3, [r7, #24]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d135      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	721a      	strb	r2, [r3, #8]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001338:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001368:	200a      	movs	r0, #10
 800136a:	f001 f8ca 	bl	8002502 <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	639a      	str	r2, [r3, #56]	; 0x38

	if(MotionDataVerbosityLevel == All)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	f017 f864 	bl	801848c <sniprintf>
		printf("%s", DataOut);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	334c      	adds	r3, #76	; 0x4c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013cc:	f016 fff2 	bl	80183b4 <iprintf>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	3b03126f 	.word	0x3b03126f
 80013dc:	43fa0000 	.word	0x43fa0000
 80013e0:	0801a74c 	.word	0x0801a74c
 80013e4:	0801a724 	.word	0x0801a724

080013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

MFX_output_t * WobbleBoardApp::MotionFXDataHandler()
{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b0a5      	sub	sp, #148	; 0x94
 80013ee:	af06      	add	r7, sp, #24
 80013f0:	6078      	str	r0, [r7, #4]
	// Get the 3 motion sensor data
	// and potentially write them to the terminal
	// depending on motion verbosity log level
	AccelerometerSensorHandler();
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fee4 	bl	80011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
	GyroSensorHandler();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff0f 	bl	800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
	MagnetometerSensorHandler();
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff3a 	bl	8001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

	MFX_input_t dataIn;
	MFX_input_t* pDataIn = &dataIn;
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t dataOut;
	MFX_output_t* pDataOut = &dataOut;
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	dataIn.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	dataIn.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	dataIn.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	/* Convert acceleration from [mg] to [g] */
	dataIn.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	dataIn.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	dataIn.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	dataIn.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	dataIn.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	dataIn.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	/* Run Sensor Fusion algorithm */
	DWTStart();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f93f 	bl	800176c <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pDataIn, pDataOut, MOTION_FX_ENGINE_DELTATIME);
 80014ee:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800171c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x334>
 80014f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014f6:	f000 ff95 	bl	8002424 <MotionFX_manager_run>
	uint32_t elapsed_time_us = DWTStop();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f94c 	bl	8001798 <_ZN14WobbleBoardApp7DWTStopEv>
 8001500:	66b8      	str	r0, [r7, #104]	; 0x68
//	(void)memcpy(&Msg->Data[95], (void *) & (pDataOut->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pDataOut->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x130>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 80f7 	bne.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80f3 	beq.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
			(pDataOut != nullptr))
	{
		float motionFXGravityX = pDataOut->gravity[0];
 8001520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
		if(motionFXGravityX < 0.0f)
 8001526:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d505      	bpl.n	8001540 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x158>
		{
			motionFXGravityX *= -1.0f;
 8001534:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		}

		// Only transmit the motion FX data if it's more than the deadzone
		if(motionFXGravityX > DeadZoneMotionFXGravityX)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8001546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	f340 80d8 	ble.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
		{
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155e:	68db      	ldr	r3, [r3, #12]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156c:	691b      	ldr	r3, [r3, #16]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	695b      	ldr	r3, [r3, #20]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800158e:	e9cd 4500 	strd	r4, r5, [sp]
 8001592:	4a63      	ldr	r2, [pc, #396]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	4630      	mov	r0, r6
 800159a:	f016 ff77 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	485f      	ldr	r0, [pc, #380]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015a6:	f016 ff05 	bl	80183b4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b2:	681b      	ldr	r3, [r3, #0]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	685b      	ldr	r3, [r3, #4]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	689b      	ldr	r3, [r3, #8]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015e2:	e9cd 4500 	strd	r4, r5, [sp]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x340>)
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4630      	mov	r0, r6
 80015ee:	f016 ff4d 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	334c      	adds	r3, #76	; 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	484a      	ldr	r0, [pc, #296]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015fa:	f016 fedb 	bl	80183b4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001606:	69db      	ldr	r3, [r3, #28]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001614:	6a1b      	ldr	r3, [r3, #32]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x344>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4630      	mov	r0, r6
 8001642:	f016 ff23 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	334c      	adds	r3, #76	; 0x4c
 800164a:	4619      	mov	r1, r3
 800164c:	4835      	ldr	r0, [pc, #212]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 800164e:	f016 feb1 	bl	80183b4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001686:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800168a:	e9cd 4500 	strd	r4, r5, [sp]
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4630      	mov	r0, r6
 8001696:	f016 fef9 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016a2:	f016 fe87 	bl	80183b4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->heading);
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2300 	strd	r2, r3, [sp]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x348>)
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4620      	mov	r0, r4
 80016c6:	f016 fee1 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	334c      	adds	r3, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016d2:	f016 fe6f 	bl	80183b4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->headingErr);
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9cd 2300 	strd	r2, r3, [sp]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x34c>)
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4620      	mov	r0, r4
 80016f6:	f016 fec9 	bl	801848c <sniprintf>
			printf("%s", DataOut);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 8001702:	f016 fe57 	bl	80183b4 <iprintf>
		}
	}

	return pDataOut;
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001708:	4618      	mov	r0, r3
 800170a:	377c      	adds	r7, #124	; 0x7c
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	3a83126f 	.word	0x3a83126f
 8001718:	3b03126f 	.word	0x3b03126f
 800171c:	3c23d70a 	.word	0x3c23d70a
 8001720:	0801a778 	.word	0x0801a778
 8001724:	0801a724 	.word	0x0801a724
 8001728:	0801a7b0 	.word	0x0801a7b0
 800172c:	0801a7e8 	.word	0x0801a7e8
 8001730:	0801a81c 	.word	0x0801a81c
 8001734:	0801a83c 	.word	0x0801a83c

08001738 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000edf0 	.word	0xe000edf0
 8001768:	e0001000 	.word	0xe0001000

0800176c <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e0001000 	.word	0xe0001000

08001798 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e0001000 	.word	0xe0001000
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 80017f0:	f000 fc5e 	bl	80020b0 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 80017f4:	f000 fc64 	bl	80020c0 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 80017f8:	f000 fc6a 	bl	80020d0 <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 80017fe:	f008 f9fb 	bl	8009bf8 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	SensorsEnabled = 1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200014a8 	.word	0x200014a8

0800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <_ZN14WobbleBoardApp17StopDataStreamingEv+0x30>)
 800182e:	f008 fa4b 	bl	8009cc8 <HAL_TIM_Base_Stop>

	/* Disable all sensors */
	BSP_SENSOR_ACC_Disable();
 8001832:	f000 fc55 	bl	80020e0 <BSP_SENSOR_ACC_Disable>
	BSP_SENSOR_GYR_Disable();
 8001836:	f000 fc5b 	bl	80020f0 <BSP_SENSOR_GYR_Disable>
	BSP_SENSOR_MAG_Disable();
 800183a:	f000 fc61 	bl	8002100 <BSP_SENSOR_MAG_Disable>

	SensorsEnabled = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200014a8 	.word	0x200014a8

08001850 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 8001858:	f000 fe2e 	bl	80024b8 <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 800185c:	f000 fe0e 	bl	800247c <MotionFX_manager_start_6X>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001870:	f000 fe0e 	bl	8002490 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001874:	f000 fe16 	bl	80024a4 <MotionFX_manager_start_9X>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800188a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	09db      	lsrs	r3, r3, #7
 800189c:	3b01      	subs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80018a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018ce:	f008 f93b 	bl	8009b48 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018e2:	f000 fd41 	bl	8002368 <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	10624dd3 	.word	0x10624dd3
 80018f8:	200014a8 	.word	0x200014a8

080018fc <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(ShouldStartUserCalibrationMode)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f899 	bl	8001a58 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode(true);
	}
}
 8001926:	e003      	b.n	8001930 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x34>
		ExitUserCalibrationMode(true);
 8001928:	2101      	movs	r1, #1
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f90a 	bl	8001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>:

void WobbleBoardApp::CaptureMotionFXGravityXData()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	MFX_output_t* pMotionFXData = MotionFXDataHandler();
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd51 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
 8001946:	60f8      	str	r0, [r7, #12]
	if(pMotionFXData != nullptr)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d019      	beq.n	8001982 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x4a>
	{
		MotionFXGravityXBuffer[MotionFXDataBufferIndex] = pMotionFXData->gravity[0];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	69d2      	ldr	r2, [r2, #28]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	3354      	adds	r3, #84	; 0x54
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	601a      	str	r2, [r3, #0]

		MotionFXDataBufferIndex++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

		// Make sure we don't exceed the buffer length and wrap around
		// instead to keep grabbing data
		if(MotionFXDataBufferIndex >= NUMBER_OF_MOTIONFX_DATA_SAMPLES)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001976:	2b31      	cmp	r3, #49	; 0x31
 8001978:	dd03      	ble.n	8001982 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x4a>
		{
			MotionFXDataBufferIndex = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		}
	}
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_ZN14WobbleBoardApp17CalculateDeadZoneEv>:

// Get the average motion fusion gravity X over a time period
float WobbleBoardApp::CalculateDeadZone()
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
	float accumulatedMotionFXGravityX = 0.0f;
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	dc1f      	bgt.n	80019e4 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x58>
	{
		float motionFusionGravityX = MotionFXGravityXBuffer[i];
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	3354      	adds	r3, #84	; 0x54
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]

		// It's possible that it could be negative and we want to
		// negate that so they don't cancel each other out
		// when accumulating the gravity X
		if(motionFusionGravityX < 0.0f)
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d505      	bpl.n	80019cc <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x40>
		{
			motionFusionGravityX *= -1.0f;
 80019c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c4:	eef1 7a67 	vneg.f32	s15, s15
 80019c8:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		accumulatedMotionFXGravityX += motionFusionGravityX;
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e7dc      	b.n	800199e <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x12>
	}

	float averageMotionFXGravityX = accumulatedMotionFXGravityX / NUMBER_OF_MOTIONFX_DATA_SAMPLES;
 80019e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e8:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a4c <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc0>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	edc7 7a02 	vstr	s15, [r7, #8]
	if(averageMotionFXGravityX < MIN_DEADZONE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d502      	bpl.n	8001a0e <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x82>
	{
		averageMotionFXGravityX = MIN_DEADZONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60bb      	str	r3, [r7, #8]
	}

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X DeadZone Calculated For User: %.1f\r\n",
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc4>)
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f016 fd2f 	bl	801848c <sniprintf>
			averageMotionFXGravityX);
	printf("%s", DataOut);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	334c      	adds	r3, #76	; 0x4c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc8>)
 8001a36:	f016 fcbd 	bl	80183b4 <iprintf>

	return averageMotionFXGravityX;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	ee07 3a90 	vmov	s15, r3
}
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	42480000 	.word	0x42480000
 8001a50:	0801a864 	.word	0x0801a864
 8001a54:	0801a724 	.word	0x0801a724

08001a58 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	// we will use this to compare against the new
	// elapsed time every tick cycle to see if we have passed
	// the user calibration time to end the user calibration mode
	UserCalibrationTimerTimestamp = HAL_GetTick();

	IsInUserCalibrationMode = true;
 8001a60:	466b      	mov	r3, sp
 8001a62:	461d      	mov	r5, r3
	std::string printString = "Entered User Calibration Mode\r\n";
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f013 ff80 	bl	801596e <_ZNSaIcEC1Ev>
 8001a6e:	f107 0220 	add.w	r2, r7, #32
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4931      	ldr	r1, [pc, #196]	; (8001b3c <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe4>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f013 ffe5 	bl	8015a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f013 ff74 	bl	8015970 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f013 ffb3 	bl	80159f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	1e5c      	subs	r4, r3, #1
 8001a9a:	62bc      	str	r4, [r7, #40]	; 0x28
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	00cb      	lsls	r3, r1, #3
 8001ab0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ab4:	00c2      	lsls	r2, r0, #3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00cb      	lsls	r3, r1, #3
 8001aca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ace:	00c2      	lsls	r2, r0, #3
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	3307      	adds	r3, #7
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	ebad 0d03 	sub.w	sp, sp, r3
 8001ade:	466b      	mov	r3, sp
 8001ae0:	3300      	adds	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 8001ae4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4618      	mov	r0, r3
 8001aec:	f013 ff86 	bl	80159fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4620      	mov	r0, r4
 8001af6:	f016 fcfd 	bl	80184f4 <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe8>)
 8001b06:	f008 fd53 	bl	800a5b0 <HAL_UART_Transmit>
	StopDataStreaming();
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe86 	bl	800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>
	UserCalibrationTimerTimestamp = HAL_GetTick();
 8001b10:	f004 fda6 	bl	8006660 <HAL_GetTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	IsInUserCalibrationMode = true;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	std::string printString = "Entered User Calibration Mode\r\n";
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f013 ff5e 	bl	80159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b30:	46ad      	mov	sp, r5
}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	; 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0801a8a4 	.word	0x0801a8a4
 8001b40:	20001548 	.word	0x20001548

08001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>:

void WobbleBoardApp::ExitUserCalibrationMode(bool Interrupted)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b098      	sub	sp, #96	; 0x60
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
	IsInUserCalibrationMode = false;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	ShouldStartUserCalibrationMode = false;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(!Interrupted)
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x38>
	{
		DeadZoneMotionFXGravityX = CalculateDeadZone();
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff0d 	bl	800198c <_ZN14WobbleBoardApp17CalculateDeadZoneEv>
 8001b72:	eef0 7a40 	vmov.f32	s15, s0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edc3 7a88 	vstr	s15, [r3, #544]	; 0x220
	}

	// Clear out the MotionFXGravityXBuffer
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b82:	2b31      	cmp	r3, #49	; 0x31
 8001b84:	dc0b      	bgt.n	8001b9e <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x5a>
	{
		MotionFXGravityXBuffer[i] = 0.0f;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8a:	3354      	adds	r3, #84	; 0x54
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b9c:	e7f0      	b.n	8001b80 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x3c>
	}

	if(Interrupted)
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x118>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001ba4:	466b      	mov	r3, sp
 8001ba6:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bac:	4618      	mov	r0, r3
 8001bae:	f013 fede 	bl	801596e <_ZNSaIcEC1Ev>
 8001bb2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4959      	ldr	r1, [pc, #356]	; (8001d20 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1dc>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f013 ff43 	bl	8015a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f013 fed2 	bl	8015970 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f013 ff11 	bl	80159f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
		char PrintBuffer[printStringLength];
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	1e5c      	subs	r4, r3, #1
 8001bde:	64bc      	str	r4, [r7, #72]	; 0x48
 8001be0:	4623      	mov	r3, r4
 8001be2:	3301      	adds	r3, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	00cb      	lsls	r3, r1, #3
 8001bf4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bf8:	00c2      	lsls	r2, r0, #3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00cb      	lsls	r3, r1, #3
 8001c0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c12:	00c2      	lsls	r2, r0, #3
 8001c14:	4623      	mov	r3, r4
 8001c16:	3301      	adds	r3, #1
 8001c18:	3307      	adds	r3, #7
 8001c1a:	08db      	lsrs	r3, r3, #3
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c22:	466b      	mov	r3, sp
 8001c24:	3300      	adds	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(PrintBuffer, printString.c_str());
 8001c28:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f013 fee4 	bl	80159fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4619      	mov	r1, r3
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f016 fc5b 	bl	80184f4 <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c48:	4836      	ldr	r0, [pc, #216]	; (8001d24 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e0>)
 8001c4a:	f008 fcb1 	bl	800a5b0 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 feca 	bl	80159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c58:	46ad      	mov	sp, r5
 8001c5a:	e05a      	b.n	8001d12 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1ce>
		std::string printString = "Exited User Calibration Mode\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c5c:	466b      	mov	r3, sp
 8001c5e:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode\r\n";
 8001c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c64:	4618      	mov	r0, r3
 8001c66:	f013 fe82 	bl	801596e <_ZNSaIcEC1Ev>
 8001c6a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	492d      	ldr	r1, [pc, #180]	; (8001d28 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e4>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f013 fee7 	bl	8015a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f013 fe76 	bl	8015970 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f013 feb5 	bl	80159f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	65bb      	str	r3, [r7, #88]	; 0x58
		char PrintBuffer[printStringLength];
 8001c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c94:	1e5c      	subs	r4, r3, #1
 8001c96:	657c      	str	r4, [r7, #84]	; 0x54
 8001c98:	4623      	mov	r3, r4
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	00cb      	lsls	r3, r1, #3
 8001cac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cb0:	00c2      	lsls	r2, r0, #3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	00cb      	lsls	r3, r1, #3
 8001cc6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cca:	00c2      	lsls	r2, r0, #3
 8001ccc:	4623      	mov	r3, r4
 8001cce:	3301      	adds	r3, #1
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cda:	466b      	mov	r3, sp
 8001cdc:	3300      	adds	r3, #0
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
		sprintf(PrintBuffer, printString.c_str());
 8001ce0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f013 fe88 	bl	80159fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f016 fbff 	bl	80184f4 <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001cf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d00:	4808      	ldr	r0, [pc, #32]	; (8001d24 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e0>)
 8001d02:	f008 fc55 	bl	800a5b0 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode\r\n";
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f013 fe6e 	bl	80159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d10:	46ad      	mov	sp, r5

	// Stop the user calibration timer
	//HAL_TIM_Base_Stop(&htim15);

	// Start streaming out the motion data again
	StartDataStreaming();
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fd68 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001d18:	bf00      	nop
 8001d1a:	3760      	adds	r7, #96	; 0x60
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d20:	0801a8c4 	.word	0x0801a8c4
 8001d24:	20001548 	.word	0x20001548
 8001d28:	0801a918 	.word	0x0801a918

08001d2c <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <UART_StartReceiveMsg+0x2c>)
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <UART_StartReceiveMsg+0x30>)
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <UART_StartReceiveMsg+0x2c>)
 8001d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <UART_StartReceiveMsg+0x2c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <UART_StartReceiveMsg+0x30>)
 8001d4e:	4802      	ldr	r0, [pc, #8]	; (8001d58 <UART_StartReceiveMsg+0x2c>)
 8001d50:	f008 fcc2 	bl	800a6d8 <HAL_UART_Receive_DMA>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20001548 	.word	0x20001548
 8001d5c:	200011c0 	.word	0x200011c0

08001d60 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <MX_CRC_Init+0x40>)
 8001d68:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_CRC_Init+0x3c>)
 8001d8a:	f004 fd87 	bl	800689c <HAL_CRC_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d94:	f000 fae8 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200013c8 	.word	0x200013c8
 8001da0:	40023000 	.word	0x40023000

08001da4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_CRC_MspInit+0x38>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10b      	bne.n	8001dce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_CRC_MspInit+0x3c>)
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_CRC_MspInit+0x3c>)
 8001dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc0:	6493      	str	r3, [r2, #72]	; 0x48
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_CRC_MspInit+0x3c>)
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023000 	.word	0x40023000
 8001de0:	40021000 	.word	0x40021000

08001de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_DMA_Init+0x38>)
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <MX_DMA_Init+0x38>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6493      	str	r3, [r2, #72]	; 0x48
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_DMA_Init+0x38>)
 8001df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2010      	movs	r0, #16
 8001e08:	f004 fd11 	bl	800682e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e0c:	2010      	movs	r0, #16
 8001e0e:	f004 fd2a 	bl	8006866 <HAL_NVIC_EnableIRQ>

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <MX_GPIO_Init+0xd4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2120      	movs	r1, #32
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f005 fa7d 	bl	800739c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <MX_GPIO_Init+0xd8>)
 8001eba:	f004 ffd1 	bl	8006e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f004 ffc2 	bl	8006e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f004 fca4 	bl	800682e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee6:	2028      	movs	r0, #40	; 0x28
 8001ee8:	f004 fcbd 	bl	8006866 <HAL_NVIC_EnableIRQ>

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000800 	.word	0x48000800

08001efc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <MX_I2C1_Init+0x78>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <MX_I2C1_Init+0x7c>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f38:	f005 fa60 	bl	80073fc <HAL_I2C_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f42:	f000 fa11 	bl	8002368 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f4a:	f006 f803 	bl	8007f54 <HAL_I2CEx_ConfigAnalogFilter>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f54:	f000 fa08 	bl	8002368 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_I2C1_Init+0x74>)
 8001f5c:	f006 f845 	bl	8007fea <HAL_I2CEx_ConfigDigitalFilter>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f66:	f000 f9ff 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200013ec 	.word	0x200013ec
 8001f74:	40005400 	.word	0x40005400
 8001f78:	00702991 	.word	0x00702991

08001f7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0ac      	sub	sp, #176	; 0xb0
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2288      	movs	r2, #136	; 0x88
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f015 fced 	bl	801797c <memset>
  if(i2cHandle->Instance==I2C1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_I2C_MspInit+0xb0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d13b      	bne.n	8002024 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fac:	2340      	movs	r3, #64	; 0x40
 8001fae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f006 feb3 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f000 f9d0 	bl	8002368 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002004:	4619      	mov	r1, r3
 8002006:	480b      	ldr	r0, [pc, #44]	; (8002034 <HAL_I2C_MspInit+0xb8>)
 8002008:	f004 ff2a 	bl	8006e60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 8002012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_I2C_MspInit+0xb4>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	37b0      	adds	r7, #176	; 0xb0
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40005400 	.word	0x40005400
 8002030:	40021000 	.word	0x40021000
 8002034:	48000400 	.word	0x48000400

08002038 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_I2C_MspDeInit+0x3c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10f      	bne.n	800206a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_I2C_MspDeInit+0x40>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_I2C_MspDeInit+0x40>)
 8002050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <HAL_I2C_MspDeInit+0x44>)
 800205c:	f005 f8aa 	bl	80071b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_I2C_MspDeInit+0x44>)
 8002066:	f005 f8a5 	bl	80071b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005400 	.word	0x40005400
 8002078:	40021000 	.word	0x40021000
 800207c:	48000400 	.word	0x48000400

08002080 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002084:	2102      	movs	r1, #2
 8002086:	2000      	movs	r0, #0
 8002088:	f003 fd2e 	bl	8005ae8 <IKS01A2_MOTION_SENSOR_Init>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002094:	2101      	movs	r1, #1
 8002096:	2000      	movs	r0, #0
 8002098:	f003 fd26 	bl	8005ae8 <IKS01A2_MOTION_SENSOR_Init>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80020a4:	2104      	movs	r1, #4
 80020a6:	2002      	movs	r0, #2
 80020a8:	f003 fd1e 	bl	8005ae8 <IKS01A2_MOTION_SENSOR_Init>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80020b4:	2102      	movs	r1, #2
 80020b6:	2000      	movs	r0, #0
 80020b8:	f003 fe12 	bl	8005ce0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80020c4:	2101      	movs	r1, #1
 80020c6:	2000      	movs	r0, #0
 80020c8:	f003 fe0a 	bl	8005ce0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80020d4:	2104      	movs	r1, #4
 80020d6:	2002      	movs	r0, #2
 80020d8:	f003 fe02 	bl	8005ce0 <IKS01A2_MOTION_SENSOR_Enable>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80020e4:	2102      	movs	r1, #2
 80020e6:	2000      	movs	r0, #0
 80020e8:	f003 fe3c 	bl	8005d64 <IKS01A2_MOTION_SENSOR_Disable>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80020f4:	2101      	movs	r1, #1
 80020f6:	2000      	movs	r0, #0
 80020f8:	f003 fe34 	bl	8005d64 <IKS01A2_MOTION_SENSOR_Disable>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002104:	2104      	movs	r1, #4
 8002106:	2002      	movs	r0, #2
 8002108:	f003 fe2c 	bl	8005d64 <IKS01A2_MOTION_SENSOR_Disable>
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	2102      	movs	r1, #2
 800211c:	2000      	movs	r0, #0
 800211e:	f003 fe63 	bl	8005de8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	2101      	movs	r1, #1
 8002136:	2000      	movs	r0, #0
 8002138:	f003 fe56 	bl	8005de8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	2104      	movs	r1, #4
 8002150:	2002      	movs	r0, #2
 8002152:	f003 fe49 	bl	8005de8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8002168:	ed97 0a01 	vldr	s0, [r7, #4]
 800216c:	2102      	movs	r1, #2
 800216e:	2000      	movs	r0, #0
 8002170:	f003 fe7e 	bl	8005e70 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	2102      	movs	r1, #2
 8002188:	2000      	movs	r0, #0
 800218a:	f003 feb7 	bl	8005efc <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	226e      	movs	r2, #110	; 0x6e
 80021a2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	2277      	movs	r2, #119	; 0x77
 80021aa:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3302      	adds	r3, #2
 80021b0:	2275      	movs	r2, #117	; 0x75
 80021b2:	701a      	strb	r2, [r3, #0]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	226e      	movs	r2, #110	; 0x6e
 80021cc:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3301      	adds	r3, #1
 80021d2:	2277      	movs	r2, #119	; 0x77
 80021d4:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3302      	adds	r3, #2
 80021da:	2275      	movs	r2, #117	; 0x75
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	226e      	movs	r2, #110	; 0x6e
 80021f6:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3301      	adds	r3, #1
 80021fc:	2265      	movs	r2, #101	; 0x65
 80021fe:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3302      	adds	r3, #2
 8002204:	2275      	movs	r2, #117	; 0x75
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002214:	b598      	push	{r3, r4, r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002218:	f004 f9b2 	bl	8006580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221c:	f000 f82a 	bl	8002274 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002220:	f7ff fdfe 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002224:	f7ff fdde 	bl	8001de4 <MX_DMA_Init>
  MX_CRC_Init();
 8002228:	f7ff fd9a 	bl	8001d60 <MX_CRC_Init>
  MX_RTC_Init();
 800222c:	f000 f976 	bl	800251c <MX_RTC_Init>
  MX_TIM15_Init();
 8002230:	f000 fcd0 	bl	8002bd4 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8002234:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002238:	f013 fb88 	bl	801594c <_Znwj>
 800223c:	4603      	mov	r3, r0
 800223e:	461c      	mov	r4, r3
 8002240:	4620      	mov	r0, r4
 8002242:	f7fe fe7d 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <main+0x5c>)
 8002248:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <main+0x5c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <main+0x48>
  {
	  wobbleBoardApp->Init();
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <main+0x5c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fec0 	bl	8000fdc <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <main+0x5c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0fb      	beq.n	800225c <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8002264:	4b02      	ldr	r3, [pc, #8]	; (8002270 <main+0x5c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff3d 	bl	80010e8 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 800226e:	e7f5      	b.n	800225c <main+0x48>
 8002270:	2000072c 	.word	0x2000072c

08002274 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b096      	sub	sp, #88	; 0x58
 8002278:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	2244      	movs	r2, #68	; 0x44
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f015 fb7a 	bl	801797c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800229a:	f005 ff01 	bl	80080a0 <HAL_PWREx_ControlVoltageScaling>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80022ae:	f000 f85b 	bl	8002368 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022b2:	230a      	movs	r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022bc:	2310      	movs	r3, #16
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c4:	2302      	movs	r3, #2
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80022d0:	230a      	movs	r3, #10
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022d4:	2307      	movs	r3, #7
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022dc:	2302      	movs	r3, #2
 80022de:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4618      	mov	r0, r3
 80022e6:	f005 ff31 	bl	800814c <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 80022fa:	f000 f835 	bl	8002368 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fe:	230f      	movs	r3, #15
 8002300:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002302:	2303      	movs	r3, #3
 8002304:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	2104      	movs	r1, #4
 8002316:	4618      	mov	r0, r3
 8002318:	f006 fafe 	bl	8008918 <HAL_RCC_ClockConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 800232c:	f000 f81c 	bl	8002368 <Error_Handler>
	}
}
 8002330:	bf00      	nop
 8002332:	3758      	adds	r7, #88	; 0x58
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002348:	d108      	bne.n	800235c <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_GPIO_EXTI_Callback+0x2c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fad0 	bl	80018fc <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000072c 	.word	0x2000072c

08002368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236c:	b672      	cpsid	i
}
 800236e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002370:	e7fe      	b.n	8002370 <Error_Handler+0x8>
	...

08002374 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002378:	f012 fd2e 	bl	8014dd8 <MotionFX_GetStateSize>
 800237c:	4603      	mov	r3, r0
 800237e:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8002382:	d901      	bls.n	8002388 <MotionFX_manager_init+0x14>
    Error_Handler();
 8002384:	f7ff fff0 	bl	8002368 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8002388:	4821      	ldr	r0, [pc, #132]	; (8002410 <MotionFX_manager_init+0x9c>)
 800238a:	f012 fd29 	bl	8014de0 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MotionFX_manager_init+0xa0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	481e      	ldr	r0, [pc, #120]	; (8002410 <MotionFX_manager_init+0x9c>)
 8002396:	f012 fe07 	bl	8014fa8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MotionFX_manager_init+0xa0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	331d      	adds	r3, #29
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fef8 	bl	8002196 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3321      	adds	r3, #33	; 0x21
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff07 	bl	80021c0 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3325      	adds	r3, #37	; 0x25
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff16 	bl	80021ea <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <MotionFX_manager_init+0xa4>)
 80023c4:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a14      	ldr	r2, [pc, #80]	; (800241c <MotionFX_manager_init+0xa8>)
 80023cc:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <MotionFX_manager_init+0xac>)
 80023d4:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MotionFX_manager_init+0xa0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <MotionFX_manager_init+0x9c>)
 80023f8:	f012 fd8c 	bl	8014f14 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80023fc:	2100      	movs	r1, #0
 80023fe:	4804      	ldr	r0, [pc, #16]	; (8002410 <MotionFX_manager_init+0x9c>)
 8002400:	f012 fe0e 	bl	8015020 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002404:	2100      	movs	r1, #0
 8002406:	4802      	ldr	r0, [pc, #8]	; (8002410 <MotionFX_manager_init+0x9c>)
 8002408:	f012 fe2a 	bl	8015060 <MotionFX_enable_9X>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000764 	.word	0x20000764
 8002414:	20000004 	.word	0x20000004
 8002418:	3ac88a48 	.word	0x3ac88a48
 800241c:	3b83126f 	.word	0x3b83126f
 8002420:	3b449ba6 	.word	0x3b449ba6

08002424 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MotionFX_manager_run+0x4c>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MotionFX_manager_run+0x50>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d10e      	bne.n	800245c <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <MotionFX_manager_run+0x54>)
 8002446:	f012 fe3b 	bl	80150c0 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	9200      	str	r2, [sp, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <MotionFX_manager_run+0x54>)
 8002456:	f012 fe23 	bl	80150a0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800245a:	e004      	b.n	8002466 <MotionFX_manager_run+0x42>
    discardedCount++;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <MotionFX_manager_run+0x4c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a03      	ldr	r2, [pc, #12]	; (8002470 <MotionFX_manager_run+0x4c>)
 8002464:	6013      	str	r3, [r2, #0]
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000760 	.word	0x20000760
 8002474:	20000008 	.word	0x20000008
 8002478:	20000764 	.word	0x20000764

0800247c <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002480:	2101      	movs	r1, #1
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <MotionFX_manager_start_6X+0x10>)
 8002484:	f012 fdcc 	bl	8015020 <MotionFX_enable_6X>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000764 	.word	0x20000764

08002490 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002494:	2100      	movs	r1, #0
 8002496:	4802      	ldr	r0, [pc, #8]	; (80024a0 <MotionFX_manager_stop_6X+0x10>)
 8002498:	f012 fdc2 	bl	8015020 <MotionFX_enable_6X>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000764 	.word	0x20000764

080024a4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80024a8:	2101      	movs	r1, #1
 80024aa:	4802      	ldr	r0, [pc, #8]	; (80024b4 <MotionFX_manager_start_9X+0x10>)
 80024ac:	f012 fdd8 	bl	8015060 <MotionFX_enable_9X>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000764 	.word	0x20000764

080024b8 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80024bc:	2100      	movs	r1, #0
 80024be:	4802      	ldr	r0, [pc, #8]	; (80024c8 <MotionFX_manager_stop_9X+0x10>)
 80024c0:	f012 fdce 	bl	8015060 <MotionFX_enable_9X>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000764 	.word	0x20000764

080024cc <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f012 ffda 	bl	8015490 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 80024dc:	6838      	ldr	r0, [r7, #0]
 80024de:	f013 f9f9 	bl	80158d4 <MotionFX_MagCal_getParams>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80024f2:	2101      	movs	r1, #1
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f012 ff35 	bl	8015364 <MotionFX_MagCal_init>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800250a:	2100      	movs	r1, #0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f012 ff29 	bl	8015364 <MotionFX_MagCal_init>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002530:	2300      	movs	r3, #0
 8002532:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <MX_RTC_Init+0xb0>)
 8002536:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <MX_RTC_Init+0xb4>)
 8002538:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <MX_RTC_Init+0xb0>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_RTC_Init+0xb0>)
 8002542:	227f      	movs	r2, #127	; 0x7f
 8002544:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <MX_RTC_Init+0xb0>)
 8002548:	22ff      	movs	r2, #255	; 0xff
 800254a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <MX_RTC_Init+0xb0>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <MX_RTC_Init+0xb0>)
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <MX_RTC_Init+0xb0>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_RTC_Init+0xb0>)
 8002560:	2200      	movs	r2, #0
 8002562:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002564:	4819      	ldr	r0, [pc, #100]	; (80025cc <MX_RTC_Init+0xb0>)
 8002566:	f007 f899 	bl	800969c <HAL_RTC_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002570:	f7ff fefa 	bl	8002368 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002574:	2300      	movs	r3, #0
 8002576:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002578:	2300      	movs	r3, #0
 800257a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800257c:	2300      	movs	r3, #0
 800257e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2201      	movs	r2, #1
 800258c:	4619      	mov	r1, r3
 800258e:	480f      	ldr	r0, [pc, #60]	; (80025cc <MX_RTC_Init+0xb0>)
 8002590:	f007 f8ff 	bl	8009792 <HAL_RTC_SetTime>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800259a:	f7ff fee5 	bl	8002368 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800259e:	2301      	movs	r3, #1
 80025a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80025a2:	2301      	movs	r3, #1
 80025a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_RTC_Init+0xb0>)
 80025b6:	f007 f989 	bl	80098cc <HAL_RTC_SetDate>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80025c0:	f7ff fed2 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20001438 	.word	0x20001438
 80025d0:	40002800 	.word	0x40002800

080025d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0a4      	sub	sp, #144	; 0x90
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	2288      	movs	r2, #136	; 0x88
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f015 f9c9 	bl	801797c <memset>
  if(rtcHandle->Instance==RTC)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_RTC_MspInit+0x5c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d118      	bne.n	8002626 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fb8c 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002612:	f7ff fea9 	bl	8002368 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_RTC_MspInit+0x60>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_RTC_MspInit+0x60>)
 800261e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002626:	bf00      	nop
 8002628:	3790      	adds	r7, #144	; 0x90
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40002800 	.word	0x40002800
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_MspInit+0x44>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	4a0e      	ldr	r2, [pc, #56]	; (800267c <HAL_MspInit+0x44>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6613      	str	r3, [r2, #96]	; 0x60
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_MspInit+0x44>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_MspInit+0x44>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_MspInit+0x44>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_MspInit+0x44>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <NMI_Handler+0x4>

08002686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <MemManage_Handler+0x4>

08002692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <UsageFault_Handler+0x4>

0800269e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026cc:	f003 ffb4 	bl	8006638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <DMA1_Channel6_IRQHandler+0x10>)
 80026da:	f004 fae1 	bl	8006ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20001500 	.word	0x20001500

080026e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80026ee:	f007 fb12 	bl	8009d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000145c 	.word	0x2000145c

080026fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <TIM3_IRQHandler+0x10>)
 8002702:	f007 fb08 	bl	8009d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200014a8 	.word	0x200014a8

08002710 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002714:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002718:	f004 fe58 	bl	80073cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <BSP_I2C1_Init+0x70>)
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <BSP_I2C1_Init+0x74>)
 800272e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <BSP_I2C1_Init+0x78>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	4918      	ldr	r1, [pc, #96]	; (8002798 <BSP_I2C1_Init+0x78>)
 8002738:	600a      	str	r2, [r1, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d122      	bne.n	8002784 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800273e:	4814      	ldr	r0, [pc, #80]	; (8002790 <BSP_I2C1_Init+0x70>)
 8002740:	f005 f948 	bl	80079d4 <HAL_I2C_GetState>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11c      	bne.n	8002784 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800274a:	4811      	ldr	r0, [pc, #68]	; (8002790 <BSP_I2C1_Init+0x70>)
 800274c:	f000 f8ba 	bl	80028c4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002756:	480e      	ldr	r0, [pc, #56]	; (8002790 <BSP_I2C1_Init+0x70>)
 8002758:	f7ff fbd0 	bl	8001efc <MX_I2C1_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002762:	f06f 0307 	mvn.w	r3, #7
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	e00c      	b.n	8002784 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <BSP_I2C1_Init+0x70>)
 800276e:	f005 fbf1 	bl	8007f54 <HAL_I2CEx_ConfigAnalogFilter>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002778:	f06f 0307 	mvn.w	r3, #7
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	e001      	b.n	8002784 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200013ec 	.word	0x200013ec
 8002794:	40005400 	.word	0x40005400
 8002798:	200010e4 	.word	0x200010e4

0800279c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <BSP_I2C1_DeInit+0x48>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d014      	beq.n	80027d8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <BSP_I2C1_DeInit+0x48>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <BSP_I2C1_DeInit+0x48>)
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <BSP_I2C1_DeInit+0x48>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80027c0:	4809      	ldr	r0, [pc, #36]	; (80027e8 <BSP_I2C1_DeInit+0x4c>)
 80027c2:	f000 f8c5 	bl	8002950 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <BSP_I2C1_DeInit+0x4c>)
 80027c8:	f004 fea7 	bl	800751a <HAL_I2C_DeInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80027d2:	f06f 0307 	mvn.w	r3, #7
 80027d6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80027d8:	687b      	ldr	r3, [r7, #4]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200010e4 	.word	0x200010e4
 80027e8:	200013ec 	.word	0x200013ec

080027ec <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	81fb      	strh	r3, [r7, #14]
 80027fa:	460b      	mov	r3, r1
 80027fc:	81bb      	strh	r3, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002806:	89ba      	ldrh	r2, [r7, #12]
 8002808:	89f9      	ldrh	r1, [r7, #14]
 800280a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	480c      	ldr	r0, [pc, #48]	; (800284c <BSP_I2C1_WriteReg+0x60>)
 800281c:	f004 feac 	bl	8007578 <HAL_I2C_Mem_Write>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <BSP_I2C1_WriteReg+0x60>)
 8002828:	f005 f8e2 	bl	80079f0 <HAL_I2C_GetError>
 800282c:	4603      	mov	r3, r0
 800282e:	2b04      	cmp	r3, #4
 8002830:	d103      	bne.n	800283a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002832:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e002      	b.n	8002840 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800283a:	f06f 0303 	mvn.w	r3, #3
 800283e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002840:	697b      	ldr	r3, [r7, #20]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200013ec 	.word	0x200013ec

08002850 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af04      	add	r7, sp, #16
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	81fb      	strh	r3, [r7, #14]
 800285e:	460b      	mov	r3, r1
 8002860:	81bb      	strh	r3, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800286a:	89ba      	ldrh	r2, [r7, #12]
 800286c:	89f9      	ldrh	r1, [r7, #14]
 800286e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <BSP_I2C1_ReadReg+0x60>)
 8002880:	f004 ff8e 	bl	80077a0 <HAL_I2C_Mem_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800288a:	4809      	ldr	r0, [pc, #36]	; (80028b0 <BSP_I2C1_ReadReg+0x60>)
 800288c:	f005 f8b0 	bl	80079f0 <HAL_I2C_GetError>
 8002890:	4603      	mov	r3, r0
 8002892:	2b04      	cmp	r3, #4
 8002894:	d103      	bne.n	800289e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002896:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e002      	b.n	80028a4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800289e:	f06f 0303 	mvn.w	r3, #3
 80028a2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80028a4:	697b      	ldr	r3, [r7, #20]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200013ec 	.word	0x200013ec

080028b4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028b8:	f003 fed2 	bl	8006660 <HAL_GetTick>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <I2C1_MspInit+0x84>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <I2C1_MspInit+0x84>)
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <I2C1_MspInit+0x84>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80028e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ea:	2312      	movs	r3, #18
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80028f6:	2304      	movs	r3, #4
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	4812      	ldr	r0, [pc, #72]	; (800294c <I2C1_MspInit+0x88>)
 8002902:	f004 faad 	bl	8006e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290c:	2312      	movs	r3, #18
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002918:	2304      	movs	r3, #4
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	480a      	ldr	r0, [pc, #40]	; (800294c <I2C1_MspInit+0x88>)
 8002924:	f004 fa9c 	bl	8006e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <I2C1_MspInit+0x84>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <I2C1_MspInit+0x84>)
 800292e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <I2C1_MspInit+0x84>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	48000400 	.word	0x48000400

08002950 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <I2C1_MspDeInit+0x30>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <I2C1_MspDeInit+0x30>)
 800295e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002968:	4806      	ldr	r0, [pc, #24]	; (8002984 <I2C1_MspDeInit+0x34>)
 800296a:	f004 fc23 	bl	80071b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800296e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <I2C1_MspDeInit+0x34>)
 8002974:	f004 fc1e 	bl	80071b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400

08002988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
	return 1;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_kill>:

int _kill(int pid, int sig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029a2:	f014 ff89 	bl	80178b8 <__errno>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2216      	movs	r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
	return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_exit>:

void _exit (int status)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe7 	bl	8002998 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ca:	e7fe      	b.n	80029ca <_exit+0x12>

080029cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e00a      	b.n	80029f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029de:	f3af 8000 	nop.w
 80029e2:	4601      	mov	r1, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60ba      	str	r2, [r7, #8]
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf0      	blt.n	80029de <_read+0x12>
	}

return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e009      	b.n	8002a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	60ba      	str	r2, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fd25 	bl	8006470 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dbf1      	blt.n	8002a18 <_write+0x12>
	}
	return len;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_close>:

int _close(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	return -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a66:	605a      	str	r2, [r3, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <_isatty>:

int _isatty(int file)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f014 feee 	bl	80178b8 <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20018000 	.word	0x20018000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	200010e8 	.word	0x200010e8
 8002b10:	20001a08 	.word	0x20001a08

08002b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <SystemInit+0x20>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <SystemInit+0x20>)
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <MX_TIM3_Init+0x98>)
 8002b5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b7e:	f006 ffe3 	bl	8009b48 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b88:	f7ff fbee 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b9a:	f007 f9db 	bl	8009f54 <HAL_TIM_ConfigClockSource>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba4:	f7ff fbe0 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002bb6:	f007 fbfd 	bl	800a3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bc0:	f7ff fbd2 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200014a8 	.word	0x200014a8
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <MX_TIM15_Init+0xa0>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10000 -1;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002bfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bfe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65536 - 1;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c22:	f006 ff91 	bl	8009b48 <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f7ff fb9c 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c3e:	f007 f989 	bl	8009f54 <HAL_TIM_ConfigClockSource>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002c48:	f7ff fb8e 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_TIM15_Init+0x9c>)
 8002c5a:	f007 fbab 	bl	800a3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002c64:	f7ff fb80 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2000145c 	.word	0x2000145c
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_TIM_Base_MspInit+0x78>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d114      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6593      	str	r3, [r2, #88]	; 0x58
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	201d      	movs	r0, #29
 8002ca8:	f003 fdc1 	bl	800682e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cac:	201d      	movs	r0, #29
 8002cae:	f003 fdda 	bl	8006866 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002cb2:	e018      	b.n	8002ce6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <HAL_TIM_Base_MspInit+0x80>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d113      	bne.n	8002ce6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2018      	movs	r0, #24
 8002cdc:	f003 fda7 	bl	800682e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ce0:	2018      	movs	r0, #24
 8002ce2:	f003 fdc0 	bl	8006866 <HAL_NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40014000 	.word	0x40014000

08002cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d00:	f7ff ff08 	bl	8002b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d06:	490d      	ldr	r1, [pc, #52]	; (8002d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <LoopForever+0xe>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <LoopForever+0x16>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f014 fdcb 	bl	80178c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2e:	f7ff fa71 	bl	8002214 <main>

08002d32 <LoopForever>:

LoopForever:
    b LoopForever
 8002d32:	e7fe      	b.n	8002d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002d40:	0801b27c 	.word	0x0801b27c
  ldr r2, =_sbss
 8002d44:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002d48:	20001a08 	.word	0x20001a08

08002d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC1_2_IRQHandler>
	...

08002d50 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e04d      	b.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	7b1a      	ldrb	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002da8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002dae:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e020      	b.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4798      	blx	r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e016      	b.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d112      	bne.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002dec:	2301      	movs	r3, #1
 8002dee:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	461a      	mov	r2, r3
 8002df4:	2123      	movs	r1, #35	; 0x23
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fb55 	bl	80034a6 <LSM303AGR_ACC_Write_Reg>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	e000      	b.n	8002e0a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08003cb5 	.word	0x08003cb5
 8002e18:	08003d17 	.word	0x08003d17

08002e1c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	331c      	adds	r3, #28
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f94a 	bl	80040c4 <lsm303agr_xl_block_data_update_set>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e02c      	b.n	8002e96 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	331c      	adds	r3, #28
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 faed 	bl	8004422 <lsm303agr_xl_fifo_mode_set>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	e020      	b.n	8002e96 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	331c      	adds	r3, #28
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 f84e 	bl	8003f04 <lsm303agr_xl_data_rate_set>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	e010      	b.n	8002e96 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	331c      	adds	r3, #28
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f8c4 	bl	8004008 <lsm303agr_xl_full_scale_set>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e004      	b.n	8002e96 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f87c 	bl	8002fa4 <LSM303AGR_ACC_Disable>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e008      	b.n	8002eca <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	331c      	adds	r3, #28
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 fa55 	bl	8004392 <lsm303agr_xl_device_id_get>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e000      	b.n	8002ef6 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4a06      	ldr	r2, [pc, #24]	; (8002f58 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002f40:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	43c80000 	.word	0x43c80000

08002f5c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e014      	b.n	8002f9c <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f103 021c 	add.w	r2, r3, #28
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f000 ffbf 	bl	8003f04 <lsm303agr_xl_data_rate_set>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e004      	b.n	8002f9c <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e01f      	b.n	8002ffa <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 021c 	add.w	r2, r3, #28
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	332a      	adds	r3, #42	; 0x2a
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f000 ffc2 	bl	8003f50 <lsm303agr_xl_data_rate_get>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e010      	b.n	8002ffa <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	331c      	adds	r3, #28
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 ff90 	bl	8003f04 <lsm303agr_xl_data_rate_set>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e004      	b.n	8002ffa <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	331c      	adds	r3, #28
 8003014:	f107 020b 	add.w	r2, r7, #11
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ff3e 	bl	8003e9c <lsm303agr_xl_operating_mode_get>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	e031      	b.n	8003090 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800302c:	7afb      	ldrb	r3, [r7, #11]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d01a      	beq.n	8003068 <LSM303AGR_ACC_GetSensitivity+0x66>
 8003032:	2b02      	cmp	r3, #2
 8003034:	dc22      	bgt.n	800307c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00a      	beq.n	8003054 <LSM303AGR_ACC_GetSensitivity+0x52>
 800303e:	e01d      	b.n	800307c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fca8 	bl	8003998 <LSM303AGR_ACC_GetSensitivityHR>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01a      	beq.n	8003084 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e01d      	b.n	8003090 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fce4 	bl	8003a24 <LSM303AGR_ACC_GetSensitivityNM>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	e013      	b.n	8003090 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fd20 	bl	8003ab0 <LSM303AGR_ACC_GetSensitivityLP>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e009      	b.n	8003090 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	60fb      	str	r3, [r7, #12]
      break;
 8003082:	e004      	b.n	800308e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003084:	bf00      	nop
 8003086:	e002      	b.n	800308e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800308c:	bf00      	nop
  }

  return ret;
 800308e:	68fb      	ldr	r3, [r7, #12]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	331c      	adds	r3, #28
 80030aa:	f107 020b 	add.w	r2, r7, #11
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fef3 	bl	8003e9c <lsm303agr_xl_operating_mode_get>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e09d      	b.n	80031fe <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	331c      	adds	r3, #28
 80030c6:	f107 020a 	add.w	r2, r7, #10
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 ff3f 	bl	8003f50 <lsm303agr_xl_data_rate_get>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e08f      	b.n	80031fe <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d147      	bne.n	8003174 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80030e4:	7abb      	ldrb	r3, [r7, #10]
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d840      	bhi.n	800316c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003123 	.word	0x08003123
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	08003135 	.word	0x08003135
 8003100:	0800313d 	.word	0x0800313d
 8003104:	08003145 	.word	0x08003145
 8003108:	0800314d 	.word	0x0800314d
 800310c:	08003155 	.word	0x08003155
 8003110:	0800315d 	.word	0x0800315d
 8003114:	08003165 	.word	0x08003165
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
        break;
 8003120:	e06c      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003128:	601a      	str	r2, [r3, #0]
        break;
 800312a:	e067      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a36      	ldr	r2, [pc, #216]	; (8003208 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003130:	601a      	str	r2, [r3, #0]
        break;
 8003132:	e063      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a35      	ldr	r2, [pc, #212]	; (800320c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003138:	601a      	str	r2, [r3, #0]
        break;
 800313a:	e05f      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003140:	601a      	str	r2, [r3, #0]
        break;
 8003142:	e05b      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a33      	ldr	r2, [pc, #204]	; (8003214 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003148:	601a      	str	r2, [r3, #0]
        break;
 800314a:	e057      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4a32      	ldr	r2, [pc, #200]	; (8003218 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003150:	601a      	str	r2, [r3, #0]
        break;
 8003152:	e053      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003158:	601a      	str	r2, [r3, #0]
        break;
 800315a:	e04f      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4a30      	ldr	r2, [pc, #192]	; (8003220 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8003160:	601a      	str	r2, [r3, #0]
        break;
 8003162:	e04b      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8003168:	601a      	str	r2, [r3, #0]
        break;
 800316a:	e047      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e043      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8003174:	7abb      	ldrb	r3, [r7, #10]
 8003176:	2b09      	cmp	r3, #9
 8003178:	d83c      	bhi.n	80031f4 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031a9 	.word	0x080031a9
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031cd 	.word	0x080031cd
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031dd 	.word	0x080031dd
 800319c:	080031e5 	.word	0x080031e5
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	080031ed 	.word	0x080031ed
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        break;
 80031b0:	e024      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031b8:	601a      	str	r2, [r3, #0]
        break;
 80031ba:	e01f      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80031c0:	601a      	str	r2, [r3, #0]
        break;
 80031c2:	e01b      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80031c8:	601a      	str	r2, [r3, #0]
        break;
 80031ca:	e017      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80031d0:	601a      	str	r2, [r3, #0]
        break;
 80031d2:	e013      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80031d8:	601a      	str	r2, [r3, #0]
        break;
 80031da:	e00f      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80031e0:	601a      	str	r2, [r3, #0]
        break;
 80031e2:	e00b      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4a0d      	ldr	r2, [pc, #52]	; (800321c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80031e8:	601a      	str	r2, [r3, #0]
        break;
 80031ea:	e007      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80031f0:	601a      	str	r2, [r3, #0]
        break;
 80031f2:	e003      	b.n	80031fc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	60fb      	str	r3, [r7, #12]
        break;
 80031fa:	bf00      	nop
    }
  }

  return ret;
 80031fc:	68fb      	ldr	r3, [r7, #12]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	41200000 	.word	0x41200000
 800320c:	41c80000 	.word	0x41c80000
 8003210:	42480000 	.word	0x42480000
 8003214:	42c80000 	.word	0x42c80000
 8003218:	43480000 	.word	0x43480000
 800321c:	43c80000 	.word	0x43c80000
 8003220:	44ca8000 	.word	0x44ca8000
 8003224:	45a80000 	.word	0x45a80000
 8003228:	44a80000 	.word	0x44a80000

0800322c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003242:	ed97 0a00 	vldr	s0, [r7]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fc78 	bl	8003b3c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 800324c:	4603      	mov	r3, r0
 800324e:	e005      	b.n	800325c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003250:	ed97 0a00 	vldr	s0, [r7]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fcd3 	bl	8003c00 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800325a:	4603      	mov	r3, r0
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	331c      	adds	r3, #28
 8003276:	f107 020b 	add.w	r2, r7, #11
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fee9 	bl	8004054 <lsm303agr_xl_full_scale_get>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	e023      	b.n	80032d6 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d81b      	bhi.n	80032cc <LSM303AGR_ACC_GetFullScale+0x68>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <LSM303AGR_ACC_GetFullScale+0x38>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032b5 	.word	0x080032b5
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032c5 	.word	0x080032c5
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
      break;
 80032b2:	e00f      	b.n	80032d4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2204      	movs	r2, #4
 80032b8:	601a      	str	r2, [r3, #0]
      break;
 80032ba:	e00b      	b.n	80032d4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2208      	movs	r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
      break;
 80032c2:	e007      	b.n	80032d4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	601a      	str	r2, [r3, #0]
      break;
 80032ca:	e003      	b.n	80032d4 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	60fb      	str	r3, [r7, #12]
      break;
 80032d2:	bf00      	nop
  }

  return ret;
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop

080032e0 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	dd0b      	ble.n	8003308 <LSM303AGR_ACC_SetFullScale+0x28>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	dd06      	ble.n	8003304 <LSM303AGR_ACC_SetFullScale+0x24>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	dc01      	bgt.n	8003300 <LSM303AGR_ACC_SetFullScale+0x20>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e004      	b.n	800330a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003300:	2303      	movs	r3, #3
 8003302:	e002      	b.n	800330a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003308:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800330a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	331c      	adds	r3, #28
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fe77 	bl	8004008 <lsm303agr_xl_full_scale_set>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	e000      	b.n	8003328 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	331c      	adds	r3, #28
 8003346:	f107 020f 	add.w	r2, r7, #15
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fda5 	bl	8003e9c <lsm303agr_xl_operating_mode_get>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
 800335c:	e04a      	b.n	80033f4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d00c      	beq.n	800337e <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003364:	2b02      	cmp	r3, #2
 8003366:	dc0e      	bgt.n	8003386 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <LSM303AGR_ACC_GetAxesRaw+0x42>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d003      	beq.n	8003378 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8003370:	e009      	b.n	8003386 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8003372:	2310      	movs	r3, #16
 8003374:	83fb      	strh	r3, [r7, #30]
      break;
 8003376:	e00a      	b.n	800338e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003378:	2340      	movs	r3, #64	; 0x40
 800337a:	83fb      	strh	r3, [r7, #30]
      break;
 800337c:	e007      	b.n	800338e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800337e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003382:	83fb      	strh	r3, [r7, #30]
      break;
 8003384:	e003      	b.n	800338e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	61bb      	str	r3, [r7, #24]
      break;
 800338c:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d101      	bne.n	800339a <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	e02c      	b.n	80033f4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	331c      	adds	r3, #28
 800339e:	f107 0210 	add.w	r2, r7, #16
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 feb3 	bl	8004110 <lsm303agr_acceleration_raw_get>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
 80033b4:	e01e      	b.n	80033f4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80033b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80033ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80033d8:	b21a      	sxth	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80033de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80033ec:	b21a      	sxth	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	809a      	strh	r2, [r3, #4]

  return ret;
 80033f2:	69bb      	ldr	r3, [r7, #24]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff8c 	bl	8003330 <LSM303AGR_ACC_GetAxesRaw>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e03c      	b.n	800349e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fde9 	bl	8003002 <LSM303AGR_ACC_GetSensitivity>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e030      	b.n	800349e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800343c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003448:	edd7 7a03 	vldr	s15, [r7, #12]
 800344c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003454:	ee17 2a90 	vmov	r2, s15
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800345c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003468:	edd7 7a03 	vldr	s15, [r7, #12]
 800346c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003474:	ee17 2a90 	vmov	r2, s15
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800347c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003488:	edd7 7a03 	vldr	s15, [r7, #12]
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003494:	ee17 2a90 	vmov	r2, s15
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
 80034b2:	4613      	mov	r3, r2
 80034b4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f103 001c 	add.w	r0, r3, #28
 80034bc:	1cba      	adds	r2, r7, #2
 80034be:	78f9      	ldrb	r1, [r7, #3]
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 fcd3 	bl	8003e6c <lsm303agr_write_reg>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e000      	b.n	80034d4 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e04b      	b.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	7b1a      	ldrb	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003534:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800353a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e01e      	b.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4798      	blx	r3
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e014      	b.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	331c      	adds	r3, #28
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 ff75 	bl	800446e <lsm303agr_mag_i2c_interface_set>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e000      	b.n	8003592 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	08003d79 	.word	0x08003d79
 80035a0:	08003ddb 	.word	0x08003ddb

080035a4 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	331c      	adds	r3, #28
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe7c 	bl	80042b0 <lsm303agr_mag_block_data_update_set>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e028      	b.n	8003616 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	331c      	adds	r3, #28
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fdeb 	bl	80041a6 <lsm303agr_mag_operating_mode_set>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e01c      	b.n	8003616 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	331c      	adds	r3, #28
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fe05 	bl	80041f2 <lsm303agr_mag_data_rate_set>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	e010      	b.n	8003616 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	331c      	adds	r3, #28
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 feeb 	bl	80043d6 <lsm303agr_mag_self_test_set>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e004      	b.n	8003616 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f874 	bl	8003714 <LSM303AGR_MAG_Disable>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	e004      	b.n	8003642 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	331c      	adds	r3, #28
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 feaa 	bl	80043b4 <lsm303agr_mag_device_id_get>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	e000      	b.n	800366e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2200      	movs	r2, #0
 8003698:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2232      	movs	r2, #50	; 0x32
 80036aa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80036c0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	42c80000 	.word	0x42c80000

080036d4 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e010      	b.n	800370c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	331c      	adds	r3, #28
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fd58 	bl	80041a6 <lsm303agr_mag_operating_mode_set>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	e004      	b.n	800370c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e010      	b.n	800374c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	331c      	adds	r3, #28
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd38 	bl	80041a6 <lsm303agr_mag_operating_mode_set>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	e004      	b.n	800374c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003764:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	331c      	adds	r3, #28
 8003786:	f107 020b 	add.w	r2, r7, #11
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fd57 	bl	8004240 <lsm303agr_mag_data_rate_get>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e023      	b.n	80037e6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d81b      	bhi.n	80037dc <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c5 	.word	0x080037c5
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037d5 	.word	0x080037d5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80037c0:	601a      	str	r2, [r3, #0]
      break;
 80037c2:	e00f      	b.n	80037e4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80037c8:	601a      	str	r2, [r3, #0]
      break;
 80037ca:	e00b      	b.n	80037e4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80037d0:	601a      	str	r2, [r3, #0]
      break;
 80037d2:	e007      	b.n	80037e4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80037d8:	601a      	str	r2, [r3, #0]
      break;
 80037da:	e003      	b.n	80037e4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	60fb      	str	r3, [r7, #12]
      break;
 80037e2:	bf00      	nop
  }

  return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	41200000 	.word	0x41200000
 80037f4:	41a00000 	.word	0x41a00000
 80037f8:	42480000 	.word	0x42480000
 80037fc:	42c80000 	.word	0x42c80000

08003800 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 800380c:	edd7 7a00 	vldr	s15, [r7]
 8003810:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381c:	d801      	bhi.n	8003822 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800381e:	2300      	movs	r3, #0
 8003820:	e016      	b.n	8003850 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003822:	edd7 7a00 	vldr	s15, [r7]
 8003826:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800382a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	d801      	bhi.n	8003838 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003834:	2301      	movs	r3, #1
 8003836:	e00b      	b.n	8003850 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003838:	edd7 7a00 	vldr	s15, [r7]
 800383c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003878 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d801      	bhi.n	800384e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800384a:	2302      	movs	r3, #2
 800384c:	e000      	b.n	8003850 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800384e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003850:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	331c      	adds	r3, #28
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fcc9 	bl	80041f2 <lsm303agr_mag_data_rate_set>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e000      	b.n	800386e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	42480000 	.word	0x42480000

0800387c <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2232      	movs	r2, #50	; 0x32
 800388a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	331c      	adds	r3, #28
 80038c0:	f107 0208 	add.w	r2, r7, #8
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fd18 	bl	80042fc <lsm303agr_magnetic_raw_get>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	e00c      	b.n	80038f2 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80038d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80038e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80038e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	331c      	adds	r3, #28
 8003908:	f107 0210 	add.w	r2, r7, #16
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fcf4 	bl	80042fc <lsm303agr_magnetic_raw_get>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e036      	b.n	800398e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff14 	bl	8003754 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800392c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003938:	edd7 7a03 	vldr	s15, [r7, #12]
 800393c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003944:	ee17 2a90 	vmov	r2, s15
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800394c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003958:	edd7 7a03 	vldr	s15, [r7, #12]
 800395c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003964:	ee17 2a90 	vmov	r2, s15
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800396c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003970:	ee07 3a90 	vmov	s15, r3
 8003974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003984:	ee17 2a90 	vmov	r2, s15
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	331c      	adds	r3, #28
 80039aa:	f107 020b 	add.w	r2, r7, #11
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fb4f 	bl	8004054 <lsm303agr_xl_full_scale_get>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	e023      	b.n	8003a0a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80039c2:	7afb      	ldrb	r3, [r7, #11]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e9 	.word	0x080039e9
 80039d8:	080039f1 	.word	0x080039f1
 80039dc:	080039f9 	.word	0x080039f9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80039e4:	601a      	str	r2, [r3, #0]
      break;
 80039e6:	e00f      	b.n	8003a08 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80039ec:	601a      	str	r2, [r3, #0]
      break;
 80039ee:	e00b      	b.n	8003a08 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80039f4:	601a      	str	r2, [r3, #0]
      break;
 80039f6:	e007      	b.n	8003a08 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80039fc:	601a      	str	r2, [r3, #0]
      break;
 80039fe:	e003      	b.n	8003a08 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	60fb      	str	r3, [r7, #12]
      break;
 8003a06:	bf00      	nop
  }

  return ret;
 8003a08:	68fb      	ldr	r3, [r7, #12]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	3f7ae148 	.word	0x3f7ae148
 8003a18:	3ff9999a 	.word	0x3ff9999a
 8003a1c:	4079999a 	.word	0x4079999a
 8003a20:	413b851f 	.word	0x413b851f

08003a24 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	331c      	adds	r3, #28
 8003a36:	f107 020b 	add.w	r2, r7, #11
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fb09 	bl	8004054 <lsm303agr_xl_full_scale_get>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e023      	b.n	8003a96 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d81b      	bhi.n	8003a8c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a75 	.word	0x08003a75
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003a85 	.word	0x08003a85
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003a70:	601a      	str	r2, [r3, #0]
      break;
 8003a72:	e00f      	b.n	8003a94 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4a0b      	ldr	r2, [pc, #44]	; (8003aa4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003a78:	601a      	str	r2, [r3, #0]
      break;
 8003a7a:	e00b      	b.n	8003a94 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003a80:	601a      	str	r2, [r3, #0]
      break;
 8003a82:	e007      	b.n	8003a94 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003a88:	601a      	str	r2, [r3, #0]
      break;
 8003a8a:	e003      	b.n	8003a94 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	60fb      	str	r3, [r7, #12]
      break;
 8003a92:	bf00      	nop
  }

  return ret;
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	4079999a 	.word	0x4079999a
 8003aa4:	40fa3d71 	.word	0x40fa3d71
 8003aa8:	417a147b 	.word	0x417a147b
 8003aac:	423b999a 	.word	0x423b999a

08003ab0 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	331c      	adds	r3, #28
 8003ac2:	f107 020b 	add.w	r2, r7, #11
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fac3 	bl	8004054 <lsm303agr_xl_full_scale_get>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e023      	b.n	8003b22 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d81b      	bhi.n	8003b18 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003b01 	.word	0x08003b01
 8003af0:	08003b09 	.word	0x08003b09
 8003af4:	08003b11 	.word	0x08003b11
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003afc:	601a      	str	r2, [r3, #0]
      break;
 8003afe:	e00f      	b.n	8003b20 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003b04:	601a      	str	r2, [r3, #0]
      break;
 8003b06:	e00b      	b.n	8003b20 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003b0c:	601a      	str	r2, [r3, #0]
      break;
 8003b0e:	e007      	b.n	8003b20 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003b14:	601a      	str	r2, [r3, #0]
      break;
 8003b16:	e003      	b.n	8003b20 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	60fb      	str	r3, [r7, #12]
      break;
 8003b1e:	bf00      	nop
  }

  return ret;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	417a147b 	.word	0x417a147b
 8003b30:	41fa147b 	.word	0x41fa147b
 8003b34:	427a147b 	.word	0x427a147b
 8003b38:	433b947b 	.word	0x433b947b

08003b3c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003b48:	edd7 7a00 	vldr	s15, [r7]
 8003b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b58:	d801      	bhi.n	8003b5e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e037      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b5e:	edd7 7a00 	vldr	s15, [r7]
 8003b62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	d801      	bhi.n	8003b74 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02c      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b74:	edd7 7a00 	vldr	s15, [r7]
 8003b78:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b84:	d801      	bhi.n	8003b8a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003b86:	2303      	movs	r3, #3
 8003b88:	e021      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b8a:	edd7 7a00 	vldr	s15, [r7]
 8003b8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003bf4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9a:	d801      	bhi.n	8003ba0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e016      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003ba0:	edd7 7a00 	vldr	s15, [r7]
 8003ba4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003bf8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d801      	bhi.n	8003bb6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003bb2:	2305      	movs	r3, #5
 8003bb4:	e00b      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bb6:	edd7 7a00 	vldr	s15, [r7]
 8003bba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003bfc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	d801      	bhi.n	8003bcc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003bc8:	2306      	movs	r3, #6
 8003bca:	e000      	b.n	8003bce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bcc:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003bce:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	331c      	adds	r3, #28
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f993 	bl	8003f04 <lsm303agr_xl_data_rate_set>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	e000      	b.n	8003bec <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	42480000 	.word	0x42480000
 8003bf8:	42c80000 	.word	0x42c80000
 8003bfc:	43480000 	.word	0x43480000

08003c00 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003c0c:	edd7 7a00 	vldr	s15, [r7]
 8003c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	d801      	bhi.n	8003c22 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e037      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c22:	edd7 7a00 	vldr	s15, [r7]
 8003c26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	d801      	bhi.n	8003c38 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e02c      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c38:	edd7 7a00 	vldr	s15, [r7]
 8003c3c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	d801      	bhi.n	8003c4e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e021      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c4e:	edd7 7a00 	vldr	s15, [r7]
 8003c52:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003ca8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5e:	d801      	bhi.n	8003c64 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e016      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c64:	edd7 7a00 	vldr	s15, [r7]
 8003c68:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003cac <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c74:	d801      	bhi.n	8003c7a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003c76:	2305      	movs	r3, #5
 8003c78:	e00b      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c7a:	edd7 7a00 	vldr	s15, [r7]
 8003c7e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003cb0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8a:	d801      	bhi.n	8003c90 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003c8c:	2306      	movs	r3, #6
 8003c8e:	e000      	b.n	8003c92 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c90:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	42480000 	.word	0x42480000
 8003cac:	42c80000 	.word	0x42c80000
 8003cb0:	43480000 	.word	0x43480000

08003cb4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	72fb      	strb	r3, [r7, #11]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	695c      	ldr	r4, [r3, #20]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	7b1b      	ldrb	r3, [r3, #12]
 8003cdc:	b298      	uxth	r0, r3
 8003cde:	7afb      	ldrb	r3, [r7, #11]
 8003ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	893b      	ldrh	r3, [r7, #8]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	47a0      	blx	r4
 8003cee:	4603      	mov	r3, r0
 8003cf0:	e00d      	b.n	8003d0e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	695c      	ldr	r4, [r3, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	7b1b      	ldrb	r3, [r3, #12]
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	b299      	uxth	r1, r3
 8003d06:	893b      	ldrh	r3, [r7, #8]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	47a0      	blx	r4
 8003d0c:	4603      	mov	r3, r0
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}

08003d16 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d16:	b590      	push	{r4, r7, lr}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	461a      	mov	r2, r3
 8003d22:	460b      	mov	r3, r1
 8003d24:	72fb      	strb	r3, [r7, #11]
 8003d26:	4613      	mov	r3, r2
 8003d28:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	691c      	ldr	r4, [r3, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	7b1b      	ldrb	r3, [r3, #12]
 8003d3e:	b298      	uxth	r0, r3
 8003d40:	7afb      	ldrb	r3, [r7, #11]
 8003d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	b299      	uxth	r1, r3
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	47a0      	blx	r4
 8003d50:	4603      	mov	r3, r0
 8003d52:	e00d      	b.n	8003d70 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	691c      	ldr	r4, [r3, #16]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	7b1b      	ldrb	r3, [r3, #12]
 8003d5c:	b298      	uxth	r0, r3
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	b299      	uxth	r1, r3
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	47a0      	blx	r4
 8003d6e:	4603      	mov	r3, r0
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	461a      	mov	r2, r3
 8003d84:	460b      	mov	r3, r1
 8003d86:	72fb      	strb	r3, [r7, #11]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	695c      	ldr	r4, [r3, #20]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	7b1b      	ldrb	r3, [r3, #12]
 8003da0:	b298      	uxth	r0, r3
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	b299      	uxth	r1, r3
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	47a0      	blx	r4
 8003db2:	4603      	mov	r3, r0
 8003db4:	e00d      	b.n	8003dd2 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	695c      	ldr	r4, [r3, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	7b1b      	ldrb	r3, [r3, #12]
 8003dbe:	b298      	uxth	r0, r3
 8003dc0:	7afb      	ldrb	r3, [r7, #11]
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	b299      	uxth	r1, r3
 8003dca:	893b      	ldrh	r3, [r7, #8]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	47a0      	blx	r4
 8003dd0:	4603      	mov	r3, r0
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}

08003dda <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dda:	b590      	push	{r4, r7, lr}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	461a      	mov	r2, r3
 8003de6:	460b      	mov	r3, r1
 8003de8:	72fb      	strb	r3, [r7, #11]
 8003dea:	4613      	mov	r3, r2
 8003dec:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10e      	bne.n	8003e18 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	691c      	ldr	r4, [r3, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	7b1b      	ldrb	r3, [r3, #12]
 8003e02:	b298      	uxth	r0, r3
 8003e04:	7afb      	ldrb	r3, [r7, #11]
 8003e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	b299      	uxth	r1, r3
 8003e0e:	893b      	ldrh	r3, [r7, #8]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	47a0      	blx	r4
 8003e14:	4603      	mov	r3, r0
 8003e16:	e00d      	b.n	8003e34 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	691c      	ldr	r4, [r3, #16]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	7b1b      	ldrb	r3, [r3, #12]
 8003e20:	b298      	uxth	r0, r3
 8003e22:	7afb      	ldrb	r3, [r7, #11]
 8003e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b299      	uxth	r1, r3
 8003e2c:	893b      	ldrh	r3, [r7, #8]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	47a0      	blx	r4
 8003e32:	4603      	mov	r3, r0
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	461a      	mov	r2, r3
 8003e48:	460b      	mov	r3, r1
 8003e4a:	72fb      	strb	r3, [r7, #11]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685c      	ldr	r4, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6898      	ldr	r0, [r3, #8]
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	7af9      	ldrb	r1, [r7, #11]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	47a0      	blx	r4
 8003e60:	6178      	str	r0, [r7, #20]
  return ret;
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	460b      	mov	r3, r1
 8003e7a:	72fb      	strb	r3, [r7, #11]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681c      	ldr	r4, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6898      	ldr	r0, [r3, #8]
 8003e88:	893b      	ldrh	r3, [r7, #8]
 8003e8a:	7af9      	ldrb	r1, [r7, #11]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	47a0      	blx	r4
 8003e90:	6178      	str	r0, [r7, #20]
  return ret;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}

08003e9c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ea6:	f107 020c 	add.w	r2, r7, #12
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2120      	movs	r1, #32
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffc4 	bl	8003e3c <lsm303agr_read_reg>
 8003eb4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003ebc:	f107 0210 	add.w	r2, r7, #16
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	2123      	movs	r1, #35	; 0x23
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ffb9 	bl	8003e3c <lsm303agr_read_reg>
 8003eca:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003ecc:	7b3b      	ldrb	r3, [r7, #12]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e00c      	b.n	8003efa <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003ee0:	7c3b      	ldrb	r3, [r7, #16]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003efa:	697b      	ldr	r3, [r7, #20]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f10:	f107 0208 	add.w	r2, r7, #8
 8003f14:	2301      	movs	r3, #1
 8003f16:	2120      	movs	r1, #32
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff8f 	bl	8003e3c <lsm303agr_read_reg>
 8003f1e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	7a3b      	ldrb	r3, [r7, #8]
 8003f30:	f362 1307 	bfi	r3, r2, #4, #4
 8003f34:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f36:	f107 0208 	add.w	r2, r7, #8
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff94 	bl	8003e6c <lsm303agr_write_reg>
 8003f44:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f5a:	f107 0208 	add.w	r2, r7, #8
 8003f5e:	2301      	movs	r3, #1
 8003f60:	2120      	movs	r1, #32
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff6a 	bl	8003e3c <lsm303agr_read_reg>
 8003f68:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003f6a:	7a3b      	ldrb	r3, [r7, #8]
 8003f6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	d83e      	bhi.n	8003ff4 <lsm303agr_xl_data_rate_get+0xa4>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <lsm303agr_xl_data_rate_get+0x2c>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fb5 	.word	0x08003fb5
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fc5 	.word	0x08003fc5
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fdd 	.word	0x08003fdd
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fed 	.word	0x08003fed
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
      break;
 8003faa:	e027      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	e023      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      break;
 8003fba:	e01f      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	701a      	strb	r2, [r3, #0]
      break;
 8003fc2:	e01b      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
      break;
 8003fca:	e017      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2205      	movs	r2, #5
 8003fd0:	701a      	strb	r2, [r3, #0]
      break;
 8003fd2:	e013      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2206      	movs	r2, #6
 8003fd8:	701a      	strb	r2, [r3, #0]
      break;
 8003fda:	e00f      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2207      	movs	r2, #7
 8003fe0:	701a      	strb	r2, [r3, #0]
      break;
 8003fe2:	e00b      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	701a      	strb	r2, [r3, #0]
      break;
 8003fea:	e007      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2209      	movs	r2, #9
 8003ff0:	701a      	strb	r2, [r3, #0]
      break;
 8003ff2:	e003      	b.n	8003ffc <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
      break;
 8003ffa:	bf00      	nop
  }

  return ret;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop

08004008 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004014:	f107 0208 	add.w	r2, r7, #8
 8004018:	2301      	movs	r3, #1
 800401a:	2123      	movs	r1, #35	; 0x23
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff0d 	bl	8003e3c <lsm303agr_read_reg>
 8004022:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	b2da      	uxtb	r2, r3
 8004032:	7a3b      	ldrb	r3, [r7, #8]
 8004034:	f362 1305 	bfi	r3, r2, #4, #2
 8004038:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800403a:	f107 0208 	add.w	r2, r7, #8
 800403e:	2301      	movs	r3, #1
 8004040:	2123      	movs	r1, #35	; 0x23
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff12 	bl	8003e6c <lsm303agr_write_reg>
 8004048:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800405e:	f107 0208 	add.w	r2, r7, #8
 8004062:	2301      	movs	r3, #1
 8004064:	2123      	movs	r1, #35	; 0x23
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fee8 	bl	8003e3c <lsm303agr_read_reg>
 800406c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 800406e:	7a3b      	ldrb	r3, [r7, #8]
 8004070:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b03      	cmp	r3, #3
 8004078:	d81a      	bhi.n	80040b0 <lsm303agr_xl_full_scale_get+0x5c>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <lsm303agr_xl_full_scale_get+0x2c>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	08004099 	.word	0x08004099
 8004088:	080040a1 	.word	0x080040a1
 800408c:	080040a9 	.word	0x080040a9
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	e00f      	b.n	80040b8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
      break;
 800409e:	e00b      	b.n	80040b8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e007      	b.n	80040b8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2203      	movs	r2, #3
 80040ac:	701a      	strb	r2, [r3, #0]
      break;
 80040ae:	e003      	b.n	80040b8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
      break;
 80040b6:	bf00      	nop
  }

  return ret;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80040d0:	f107 0208 	add.w	r2, r7, #8
 80040d4:	2301      	movs	r3, #1
 80040d6:	2123      	movs	r1, #35	; 0x23
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff feaf 	bl	8003e3c <lsm303agr_read_reg>
 80040de:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	7a3b      	ldrb	r3, [r7, #8]
 80040f0:	f362 13c7 	bfi	r3, r2, #7, #1
 80040f4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80040f6:	f107 0208 	add.w	r2, r7, #8
 80040fa:	2301      	movs	r3, #1
 80040fc:	2123      	movs	r1, #35	; 0x23
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff feb4 	bl	8003e6c <lsm303agr_write_reg>
 8004104:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800411a:	f107 020c 	add.w	r2, r7, #12
 800411e:	2306      	movs	r3, #6
 8004120:	2128      	movs	r1, #40	; 0x28
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe8a 	bl	8003e3c <lsm303agr_read_reg>
 8004128:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	b21a      	sxth	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004138:	b29b      	uxth	r3, r3
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	b29a      	uxth	r2, r3
 800413e:	7b3b      	ldrb	r3, [r7, #12]
 8004140:	b29b      	uxth	r3, r3
 8004142:	4413      	add	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	b21a      	sxth	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3302      	adds	r3, #2
 8004152:	b212      	sxth	r2, r2
 8004154:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	3302      	adds	r3, #2
 800415a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415e:	b29b      	uxth	r3, r3
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	b29a      	uxth	r2, r3
 8004164:	7bbb      	ldrb	r3, [r7, #14]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4413      	add	r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	3302      	adds	r3, #2
 8004170:	b212      	sxth	r2, r2
 8004172:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004174:	7c7a      	ldrb	r2, [r7, #17]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	b212      	sxth	r2, r2
 800417c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004186:	b29b      	uxth	r3, r3
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	b29a      	uxth	r2, r3
 800418c:	7c3b      	ldrb	r3, [r7, #16]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4413      	add	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3304      	adds	r3, #4
 8004198:	b212      	sxth	r2, r2
 800419a:	801a      	strh	r2, [r3, #0]
  return ret;
 800419c:	697b      	ldr	r3, [r7, #20]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041b2:	f107 0208 	add.w	r2, r7, #8
 80041b6:	2301      	movs	r3, #1
 80041b8:	2160      	movs	r1, #96	; 0x60
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fe3e 	bl	8003e3c <lsm303agr_read_reg>
 80041c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	7a3b      	ldrb	r3, [r7, #8]
 80041d2:	f362 0301 	bfi	r3, r2, #0, #2
 80041d6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041d8:	f107 0208 	add.w	r2, r7, #8
 80041dc:	2301      	movs	r3, #1
 80041de:	2160      	movs	r1, #96	; 0x60
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fe43 	bl	8003e6c <lsm303agr_write_reg>
 80041e6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80041e8:	68fb      	ldr	r3, [r7, #12]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041fe:	f107 0208 	add.w	r2, r7, #8
 8004202:	2301      	movs	r3, #1
 8004204:	2160      	movs	r1, #96	; 0x60
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe18 	bl	8003e3c <lsm303agr_read_reg>
 800420c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10f      	bne.n	8004234 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	7a3b      	ldrb	r3, [r7, #8]
 800421e:	f362 0383 	bfi	r3, r2, #2, #2
 8004222:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004224:	f107 0208 	add.w	r2, r7, #8
 8004228:	2301      	movs	r3, #1
 800422a:	2160      	movs	r1, #96	; 0x60
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fe1d 	bl	8003e6c <lsm303agr_write_reg>
 8004232:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800424a:	f107 0208 	add.w	r2, r7, #8
 800424e:	2301      	movs	r3, #1
 8004250:	2160      	movs	r1, #96	; 0x60
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fdf2 	bl	8003e3c <lsm303agr_read_reg>
 8004258:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 800425a:	7a3b      	ldrb	r3, [r7, #8]
 800425c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b03      	cmp	r3, #3
 8004264:	d81a      	bhi.n	800429c <lsm303agr_mag_data_rate_get+0x5c>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <lsm303agr_mag_data_rate_get+0x2c>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004285 	.word	0x08004285
 8004274:	0800428d 	.word	0x0800428d
 8004278:	08004295 	.word	0x08004295
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e00f      	b.n	80042a4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	e00b      	b.n	80042a4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	e007      	b.n	80042a4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
      break;
 800429a:	e003      	b.n	80042a4 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
      break;
 80042a2:	bf00      	nop
  }

  return ret;
 80042a4:	68fb      	ldr	r3, [r7, #12]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop

080042b0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042bc:	f107 0208 	add.w	r2, r7, #8
 80042c0:	2301      	movs	r3, #1
 80042c2:	2162      	movs	r1, #98	; 0x62
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fdb9 	bl	8003e3c <lsm303agr_read_reg>
 80042ca:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	7a3b      	ldrb	r3, [r7, #8]
 80042dc:	f362 1304 	bfi	r3, r2, #4, #1
 80042e0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042e2:	f107 0208 	add.w	r2, r7, #8
 80042e6:	2301      	movs	r3, #1
 80042e8:	2162      	movs	r1, #98	; 0x62
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fdbe 	bl	8003e6c <lsm303agr_write_reg>
 80042f0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004306:	f107 020c 	add.w	r2, r7, #12
 800430a:	2306      	movs	r3, #6
 800430c:	2168      	movs	r1, #104	; 0x68
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fd94 	bl	8003e3c <lsm303agr_read_reg>
 8004314:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	b21a      	sxth	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004324:	b29b      	uxth	r3, r3
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	b29a      	uxth	r2, r3
 800432a:	7b3b      	ldrb	r3, [r7, #12]
 800432c:	b29b      	uxth	r3, r3
 800432e:	4413      	add	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	b21a      	sxth	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3302      	adds	r3, #2
 800433e:	b212      	sxth	r2, r2
 8004340:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	3302      	adds	r3, #2
 8004346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800434a:	b29b      	uxth	r3, r3
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	b29a      	uxth	r2, r3
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4413      	add	r3, r2
 8004356:	b29a      	uxth	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3302      	adds	r3, #2
 800435c:	b212      	sxth	r2, r2
 800435e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004360:	7c7a      	ldrb	r2, [r7, #17]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	b212      	sxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004372:	b29b      	uxth	r3, r3
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	b29a      	uxth	r2, r3
 8004378:	7c3b      	ldrb	r3, [r7, #16]
 800437a:	b29b      	uxth	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	b29a      	uxth	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	3304      	adds	r3, #4
 8004384:	b212      	sxth	r2, r2
 8004386:	801a      	strh	r2, [r3, #0]
  return ret;
 8004388:	697b      	ldr	r3, [r7, #20]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800439c:	2301      	movs	r3, #1
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	210f      	movs	r1, #15
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fd4a 	bl	8003e3c <lsm303agr_read_reg>
 80043a8:	60f8      	str	r0, [r7, #12]
  return ret;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80043be:	2301      	movs	r3, #1
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	214f      	movs	r1, #79	; 0x4f
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fd39 	bl	8003e3c <lsm303agr_read_reg>
 80043ca:	60f8      	str	r0, [r7, #12]
  return ret;
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80043e2:	f107 0208 	add.w	r2, r7, #8
 80043e6:	2301      	movs	r3, #1
 80043e8:	2162      	movs	r1, #98	; 0x62
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fd26 	bl	8003e3c <lsm303agr_read_reg>
 80043f0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	7a3b      	ldrb	r3, [r7, #8]
 8004402:	f362 0341 	bfi	r3, r2, #1, #1
 8004406:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004408:	f107 0208 	add.w	r2, r7, #8
 800440c:	2301      	movs	r3, #1
 800440e:	2162      	movs	r1, #98	; 0x62
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fd2b 	bl	8003e6c <lsm303agr_write_reg>
 8004416:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	2301      	movs	r3, #1
 8004434:	212e      	movs	r1, #46	; 0x2e
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fd00 	bl	8003e3c <lsm303agr_read_reg>
 800443c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	b2da      	uxtb	r2, r3
 800444c:	7a3b      	ldrb	r3, [r7, #8]
 800444e:	f362 1387 	bfi	r3, r2, #6, #2
 8004452:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004454:	f107 0208 	add.w	r2, r7, #8
 8004458:	2301      	movs	r3, #1
 800445a:	212e      	movs	r1, #46	; 0x2e
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fd05 	bl	8003e6c <lsm303agr_write_reg>
 8004462:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004464:	68fb      	ldr	r3, [r7, #12]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800447a:	f107 0208 	add.w	r2, r7, #8
 800447e:	2301      	movs	r3, #1
 8004480:	2162      	movs	r1, #98	; 0x62
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fcda 	bl	8003e3c <lsm303agr_read_reg>
 8004488:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10f      	bne.n	80044b0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	7a3b      	ldrb	r3, [r7, #8]
 800449a:	f362 1345 	bfi	r3, r2, #5, #1
 800449e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2301      	movs	r3, #1
 80044a6:	2162      	movs	r1, #98	; 0x62
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fcdf 	bl	8003e6c <lsm303agr_write_reg>
 80044ae:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e04d      	b.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	7b1a      	ldrb	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <LSM6DSL_RegisterBusIO+0xc4>)
 8004514:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <LSM6DSL_RegisterBusIO+0xc8>)
 800451a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e020      	b.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4798      	blx	r3
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e016      	b.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d112      	bne.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10d      	bne.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004558:	230c      	movs	r3, #12
 800455a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	461a      	mov	r2, r3
 8004560:	2112      	movs	r1, #18
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fd2d 	bl	8004fc2 <LSM6DSL_Write_Reg>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	08005431 	.word	0x08005431
 8004584:	08005467 	.word	0x08005467

08004588 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	331c      	adds	r3, #28
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f001 fa59 	bl	8005a4e <lsm6dsl_auto_increment_set>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e054      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	331c      	adds	r3, #28
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 f980 	bl	80058b4 <lsm6dsl_block_data_update_set>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	e048      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	331c      	adds	r3, #28
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fa67 	bl	8005a9a <lsm6dsl_fifo_mode_set>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	e03c      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2204      	movs	r2, #4
 80045dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	331c      	adds	r3, #28
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 ffe6 	bl	80055b8 <lsm6dsl_xl_data_rate_set>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e02c      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	331c      	adds	r3, #28
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff7c 	bl	80054fc <lsm6dsl_xl_full_scale_set>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	e020      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2204      	movs	r2, #4
 8004614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	331c      	adds	r3, #28
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f8c0 	bl	80057a4 <lsm6dsl_gy_data_rate_set>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e010      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	331c      	adds	r3, #28
 8004634:	2106      	movs	r1, #6
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f84c 	bl	80056d4 <lsm6dsl_gy_full_scale_set>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e004      	b.n	8004652 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f888 	bl	8004778 <LSM6DSL_ACC_Disable>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	e015      	b.n	80046a0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa9a 	bl	8004bae <LSM6DSL_GYRO_Disable>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	e00c      	b.n	80046a0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	331c      	adds	r3, #28
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f9b7 	bl	8005a2c <lsm6dsl_device_id_get>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e000      	b.n	80046cc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2201      	movs	r2, #1
 80046e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80046fc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2210      	movs	r2, #16
 8004702:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	4a07      	ldr	r2, [pc, #28]	; (800472c <LSM6DSL_GetCapabilities+0x58>)
 800470e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4a06      	ldr	r2, [pc, #24]	; (800472c <LSM6DSL_GetCapabilities+0x58>)
 8004714:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	45d02000 	.word	0x45d02000

08004730 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e014      	b.n	8004770 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f103 021c 	add.w	r2, r3, #28
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 ff2f 	bl	80055b8 <lsm6dsl_xl_data_rate_set>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295
 8004764:	e004      	b.n	8004770 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e01f      	b.n	80047ce <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f103 021c 	add.w	r2, r3, #28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	332b      	adds	r3, #43	; 0x2b
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 ff32 	bl	8005604 <lsm6dsl_xl_data_rate_get>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	e010      	b.n	80047ce <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	331c      	adds	r3, #28
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff00 	bl	80055b8 <lsm6dsl_xl_data_rate_set>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	e004      	b.n	80047ce <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	331c      	adds	r3, #28
 80047ea:	f107 020b 	add.w	r2, r7, #11
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fea9 	bl	8005548 <lsm6dsl_xl_full_scale_get>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	e023      	b.n	800484a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004802:	7afb      	ldrb	r3, [r7, #11]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d81b      	bhi.n	8004840 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004821 	.word	0x08004821
 8004814:	08004839 	.word	0x08004839
 8004818:	08004829 	.word	0x08004829
 800481c:	08004831 	.word	0x08004831
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004824:	601a      	str	r2, [r3, #0]
      break;
 8004826:	e00f      	b.n	8004848 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800482c:	601a      	str	r2, [r3, #0]
      break;
 800482e:	e00b      	b.n	8004848 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004834:	601a      	str	r2, [r3, #0]
      break;
 8004836:	e007      	b.n	8004848 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800483c:	601a      	str	r2, [r3, #0]
      break;
 800483e:	e003      	b.n	8004848 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	60fb      	str	r3, [r7, #12]
      break;
 8004846:	bf00      	nop
  }

  return ret;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	3d79db23 	.word	0x3d79db23
 8004858:	3df9db23 	.word	0x3df9db23
 800485c:	3e79db23 	.word	0x3e79db23
 8004860:	3ef9db23 	.word	0x3ef9db23

08004864 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	331c      	adds	r3, #28
 8004876:	f107 020b 	add.w	r2, r7, #11
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fec1 	bl	8005604 <lsm6dsl_xl_data_rate_get>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e054      	b.n	8004938 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	2b0b      	cmp	r3, #11
 8004892:	d84c      	bhi.n	800492e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048cd 	.word	0x080048cd
 80048a0:	080048df 	.word	0x080048df
 80048a4:	080048e7 	.word	0x080048e7
 80048a8:	080048ef 	.word	0x080048ef
 80048ac:	080048f7 	.word	0x080048f7
 80048b0:	080048ff 	.word	0x080048ff
 80048b4:	08004907 	.word	0x08004907
 80048b8:	0800490f 	.word	0x0800490f
 80048bc:	08004917 	.word	0x08004917
 80048c0:	0800491f 	.word	0x0800491f
 80048c4:	08004927 	.word	0x08004927
 80048c8:	080048d7 	.word	0x080048d7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
      break;
 80048d4:	e02f      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80048da:	601a      	str	r2, [r3, #0]
      break;
 80048dc:	e02b      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80048e2:	601a      	str	r2, [r3, #0]
      break;
 80048e4:	e027      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80048ea:	601a      	str	r2, [r3, #0]
      break;
 80048ec:	e023      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	; (800494c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80048f2:	601a      	str	r2, [r3, #0]
      break;
 80048f4:	e01f      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80048fa:	601a      	str	r2, [r3, #0]
      break;
 80048fc:	e01b      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004902:	601a      	str	r2, [r3, #0]
      break;
 8004904:	e017      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800490a:	601a      	str	r2, [r3, #0]
      break;
 800490c:	e013      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4a12      	ldr	r2, [pc, #72]	; (800495c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004912:	601a      	str	r2, [r3, #0]
      break;
 8004914:	e00f      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800491a:	601a      	str	r2, [r3, #0]
      break;
 800491c:	e00b      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	4a10      	ldr	r2, [pc, #64]	; (8004964 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004922:	601a      	str	r2, [r3, #0]
      break;
 8004924:	e007      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800492a:	601a      	str	r2, [r3, #0]
      break;
 800492c:	e003      	b.n	8004936 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	60fb      	str	r3, [r7, #12]
      break;
 8004934:	bf00      	nop
  }

  return ret;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	3fcccccd 	.word	0x3fcccccd
 8004944:	41480000 	.word	0x41480000
 8004948:	41d00000 	.word	0x41d00000
 800494c:	42500000 	.word	0x42500000
 8004950:	42d00000 	.word	0x42d00000
 8004954:	43500000 	.word	0x43500000
 8004958:	43d00000 	.word	0x43d00000
 800495c:	44504000 	.word	0x44504000
 8004960:	44cf8000 	.word	0x44cf8000
 8004964:	45502000 	.word	0x45502000
 8004968:	45d02000 	.word	0x45d02000

0800496c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800497e:	2b01      	cmp	r3, #1
 8004980:	d106      	bne.n	8004990 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004982:	ed97 0a00 	vldr	s0, [r7]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fb36 	bl	8004ff8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800498c:	4603      	mov	r3, r0
 800498e:	e005      	b.n	800499c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004990:	ed97 0a00 	vldr	s0, [r7]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fbbb 	bl	8005110 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800499a:	4603      	mov	r3, r0
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	331c      	adds	r3, #28
 80049b6:	f107 020b 	add.w	r2, r7, #11
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fdc3 	bl	8005548 <lsm6dsl_xl_full_scale_get>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	e023      	b.n	8004a16 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d81b      	bhi.n	8004a0c <LSM6DSL_ACC_GetFullScale+0x68>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <LSM6DSL_ACC_GetFullScale+0x38>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	080049fd 	.word	0x080049fd
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2202      	movs	r2, #2
 80049f0:	601a      	str	r2, [r3, #0]
      break;
 80049f2:	e00f      	b.n	8004a14 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2204      	movs	r2, #4
 80049f8:	601a      	str	r2, [r3, #0]
      break;
 80049fa:	e00b      	b.n	8004a14 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2208      	movs	r2, #8
 8004a00:	601a      	str	r2, [r3, #0]
      break;
 8004a02:	e007      	b.n	8004a14 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2210      	movs	r2, #16
 8004a08:	601a      	str	r2, [r3, #0]
      break;
 8004a0a:	e003      	b.n	8004a14 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	60fb      	str	r3, [r7, #12]
      break;
 8004a12:	bf00      	nop
  }

  return ret;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop

08004a20 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	dd0b      	ble.n	8004a48 <LSM6DSL_ACC_SetFullScale+0x28>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	dd06      	ble.n	8004a44 <LSM6DSL_ACC_SetFullScale+0x24>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	dc01      	bgt.n	8004a40 <LSM6DSL_ACC_SetFullScale+0x20>
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e004      	b.n	8004a4a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e002      	b.n	8004a4a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e000      	b.n	8004a4a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a48:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004a4a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	331c      	adds	r3, #28
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fd51 	bl	80054fc <lsm6dsl_xl_full_scale_set>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	e000      	b.n	8004a68 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	331c      	adds	r3, #28
 8004a7e:	f107 0208 	add.w	r2, r7, #8
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 ff86 	bl	8005996 <lsm6dsl_acceleration_raw_get>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	e00c      	b.n	8004ab0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004a96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004a9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004aa6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	331c      	adds	r3, #28
 8004acc:	f107 0210 	add.w	r2, r7, #16
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff5f 	bl	8005996 <lsm6dsl_acceleration_raw_get>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	e03c      	b.n	8004b5e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fe74 	bl	80047d8 <LSM6DSL_ACC_GetSensitivity>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e030      	b.n	8004b5e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004afc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b14:	ee17 2a90 	vmov	r2, s15
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b54:	ee17 2a90 	vmov	r2, s15
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e014      	b.n	8004ba6 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 021c 	add.w	r2, r3, #28
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f000 fe0a 	bl	80057a4 <lsm6dsl_gy_data_rate_set>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	e004      	b.n	8004ba6 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e01f      	b.n	8004c04 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 021c 	add.w	r2, r3, #28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	332c      	adds	r3, #44	; 0x2c
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 fe0d 	bl	80057f0 <lsm6dsl_gy_data_rate_get>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	e010      	b.n	8004c04 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	331c      	adds	r3, #28
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fddb 	bl	80057a4 <lsm6dsl_gy_data_rate_set>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf8:	e004      	b.n	8004c04 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	331c      	adds	r3, #28
 8004c1e:	f107 020b 	add.w	r2, r7, #11
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fd7b 	bl	8005720 <lsm6dsl_gy_full_scale_get>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e02d      	b.n	8004c92 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d825      	bhi.n	8004c88 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c61 	.word	0x08004c61
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c89 	.word	0x08004c89
 8004c5c:	08004c81 	.word	0x08004c81
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004c64:	601a      	str	r2, [r3, #0]
      break;
 8004c66:	e013      	b.n	8004c90 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004c6c:	601a      	str	r2, [r3, #0]
      break;
 8004c6e:	e00f      	b.n	8004c90 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004c74:	601a      	str	r2, [r3, #0]
      break;
 8004c76:	e00b      	b.n	8004c90 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004c7c:	601a      	str	r2, [r3, #0]
      break;
 8004c7e:	e007      	b.n	8004c90 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004c84:	601a      	str	r2, [r3, #0]
      break;
 8004c86:	e003      	b.n	8004c90 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	60fb      	str	r3, [r7, #12]
      break;
 8004c8e:	bf00      	nop
  }

  return ret;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	408c0000 	.word	0x408c0000
 8004ca0:	410c0000 	.word	0x410c0000
 8004ca4:	418c0000 	.word	0x418c0000
 8004ca8:	420c0000 	.word	0x420c0000
 8004cac:	428c0000 	.word	0x428c0000

08004cb0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	331c      	adds	r3, #28
 8004cc2:	f107 020b 	add.w	r2, r7, #11
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fd91 	bl	80057f0 <lsm6dsl_gy_data_rate_get>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd8:	e04e      	b.n	8004d78 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	2b0a      	cmp	r3, #10
 8004cde:	d846      	bhi.n	8004d6e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d2f 	.word	0x08004d2f
 8004cf8:	08004d37 	.word	0x08004d37
 8004cfc:	08004d3f 	.word	0x08004d3f
 8004d00:	08004d47 	.word	0x08004d47
 8004d04:	08004d4f 	.word	0x08004d4f
 8004d08:	08004d57 	.word	0x08004d57
 8004d0c:	08004d5f 	.word	0x08004d5f
 8004d10:	08004d67 	.word	0x08004d67
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
      break;
 8004d1c:	e02b      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004d22:	601a      	str	r2, [r3, #0]
      break;
 8004d24:	e027      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004d2a:	601a      	str	r2, [r3, #0]
      break;
 8004d2c:	e023      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004d32:	601a      	str	r2, [r3, #0]
      break;
 8004d34:	e01f      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004d3a:	601a      	str	r2, [r3, #0]
      break;
 8004d3c:	e01b      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004d42:	601a      	str	r2, [r3, #0]
      break;
 8004d44:	e017      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004d4a:	601a      	str	r2, [r3, #0]
      break;
 8004d4c:	e013      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004d52:	601a      	str	r2, [r3, #0]
      break;
 8004d54:	e00f      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004d5a:	601a      	str	r2, [r3, #0]
      break;
 8004d5c:	e00b      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004d62:	601a      	str	r2, [r3, #0]
      break;
 8004d64:	e007      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004d6a:	601a      	str	r2, [r3, #0]
      break;
 8004d6c:	e003      	b.n	8004d76 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d72:	60fb      	str	r3, [r7, #12]
      break;
 8004d74:	bf00      	nop
  }

  return ret;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	41480000 	.word	0x41480000
 8004d84:	41d00000 	.word	0x41d00000
 8004d88:	42500000 	.word	0x42500000
 8004d8c:	42d00000 	.word	0x42d00000
 8004d90:	43500000 	.word	0x43500000
 8004d94:	43d00000 	.word	0x43d00000
 8004d98:	44504000 	.word	0x44504000
 8004d9c:	44cf8000 	.word	0x44cf8000
 8004da0:	45502000 	.word	0x45502000
 8004da4:	45d02000 	.word	0x45d02000

08004da8 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d106      	bne.n	8004dcc <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004dbe:	ed97 0a00 	vldr	s0, [r7]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa26 	bl	8005214 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e005      	b.n	8004dd8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004dcc:	ed97 0a00 	vldr	s0, [r7]
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 faab 	bl	800532c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004dd6:	4603      	mov	r3, r0
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	331c      	adds	r3, #28
 8004df2:	f107 020b 	add.w	r2, r7, #11
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fc91 	bl	8005720 <lsm6dsl_gy_full_scale_get>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
 8004e08:	e030      	b.n	8004e6c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2b06      	cmp	r3, #6
 8004e0e:	d828      	bhi.n	8004e62 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e35 	.word	0x08004e35
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e4f 	.word	0x08004e4f
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e59 	.word	0x08004e59
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	227d      	movs	r2, #125	; 0x7d
 8004e38:	601a      	str	r2, [r3, #0]
      break;
 8004e3a:	e016      	b.n	8004e6a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	22fa      	movs	r2, #250	; 0xfa
 8004e40:	601a      	str	r2, [r3, #0]
      break;
 8004e42:	e012      	b.n	8004e6a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e4a:	601a      	str	r2, [r3, #0]
      break;
 8004e4c:	e00d      	b.n	8004e6a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e54:	601a      	str	r2, [r3, #0]
      break;
 8004e56:	e008      	b.n	8004e6a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e5e:	601a      	str	r2, [r3, #0]
      break;
 8004e60:	e003      	b.n	8004e6a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	60fb      	str	r3, [r7, #12]
      break;
 8004e68:	bf00      	nop
  }

  return ret;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b7d      	cmp	r3, #125	; 0x7d
 8004e82:	dd12      	ble.n	8004eaa <LSM6DSL_GYRO_SetFullScale+0x36>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2bfa      	cmp	r3, #250	; 0xfa
 8004e88:	dd0d      	ble.n	8004ea6 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e90:	dd07      	ble.n	8004ea2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e98:	dc01      	bgt.n	8004e9e <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	e006      	b.n	8004eac <LSM6DSL_GYRO_SetFullScale+0x38>
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	e004      	b.n	8004eac <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e002      	b.n	8004eac <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <LSM6DSL_GYRO_SetFullScale+0x38>
 8004eaa:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004eac:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	331c      	adds	r3, #28
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fc0c 	bl	80056d4 <lsm6dsl_gy_full_scale_set>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	e000      	b.n	8004eca <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	331c      	adds	r3, #28
 8004ee0:	f107 0208 	add.w	r2, r7, #8
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fd0a 	bl	8005900 <lsm6dsl_angular_rate_raw_get>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	e00c      	b.n	8004f12 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ef8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004f00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004f08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	331c      	adds	r3, #28
 8004f28:	f107 0210 	add.w	r2, r7, #16
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fce6 	bl	8005900 <lsm6dsl_angular_rate_raw_get>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e03c      	b.n	8004fba <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe60 	bl	8004c0c <LSM6DSL_GYRO_GetSensitivity>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	e030      	b.n	8004fba <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004f58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f70:	ee17 2a90 	vmov	r2, s15
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f90:	ee17 2a90 	vmov	r2, s15
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004f98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	70fb      	strb	r3, [r7, #3]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 001c 	add.w	r0, r3, #28
 8004fd8:	1cba      	adds	r2, r7, #2
 8004fda:	78f9      	ldrb	r1, [r7, #3]
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f000 fa75 	bl	80054cc <lsm6dsl_write_reg>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	e000      	b.n	8004ff0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005004:	edd7 7a00 	vldr	s15, [r7]
 8005008:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800500c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d801      	bhi.n	800501a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005016:	2301      	movs	r3, #1
 8005018:	e058      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800501a:	edd7 7a00 	vldr	s15, [r7]
 800501e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	d801      	bhi.n	8005030 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800502c:	2302      	movs	r3, #2
 800502e:	e04d      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005030:	edd7 7a00 	vldr	s15, [r7]
 8005034:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80050f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	d801      	bhi.n	8005046 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005042:	2303      	movs	r3, #3
 8005044:	e042      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005046:	edd7 7a00 	vldr	s15, [r7]
 800504a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800504e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d801      	bhi.n	800505c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005058:	2304      	movs	r3, #4
 800505a:	e037      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800505c:	edd7 7a00 	vldr	s15, [r7]
 8005060:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506c:	d801      	bhi.n	8005072 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800506e:	2305      	movs	r3, #5
 8005070:	e02c      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005072:	edd7 7a00 	vldr	s15, [r7]
 8005076:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005100 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800507a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	d801      	bhi.n	8005088 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005084:	2306      	movs	r3, #6
 8005086:	e021      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005088:	edd7 7a00 	vldr	s15, [r7]
 800508c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005104 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8005090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	d801      	bhi.n	800509e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800509a:	2307      	movs	r3, #7
 800509c:	e016      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800509e:	edd7 7a00 	vldr	s15, [r7]
 80050a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005108 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80050a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d801      	bhi.n	80050b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80050b0:	2308      	movs	r3, #8
 80050b2:	e00b      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050b4:	edd7 7a00 	vldr	s15, [r7]
 80050b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800510c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80050bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d801      	bhi.n	80050ca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80050c6:	2309      	movs	r3, #9
 80050c8:	e000      	b.n	80050cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050ca:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80050cc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	331c      	adds	r3, #28
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fa6e 	bl	80055b8 <lsm6dsl_xl_data_rate_set>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295
 80050e6:	e000      	b.n	80050ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	42500000 	.word	0x42500000
 80050f8:	42d00000 	.word	0x42d00000
 80050fc:	43500000 	.word	0x43500000
 8005100:	43d00000 	.word	0x43d00000
 8005104:	44504000 	.word	0x44504000
 8005108:	44cf8000 	.word	0x44cf8000
 800510c:	45502000 	.word	0x45502000

08005110 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800511c:	edd7 7a00 	vldr	s15, [r7]
 8005120:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	d801      	bhi.n	8005132 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800512e:	2301      	movs	r3, #1
 8005130:	e058      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005132:	edd7 7a00 	vldr	s15, [r7]
 8005136:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800513a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	d801      	bhi.n	8005148 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005144:	2302      	movs	r3, #2
 8005146:	e04d      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005148:	edd7 7a00 	vldr	s15, [r7]
 800514c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80051f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005158:	d801      	bhi.n	800515e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800515a:	2303      	movs	r3, #3
 800515c:	e042      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800515e:	edd7 7a00 	vldr	s15, [r7]
 8005162:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80051fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	d801      	bhi.n	8005174 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005170:	2304      	movs	r3, #4
 8005172:	e037      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005174:	edd7 7a00 	vldr	s15, [r7]
 8005178:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800517c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	d801      	bhi.n	800518a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005186:	2305      	movs	r3, #5
 8005188:	e02c      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800518a:	edd7 7a00 	vldr	s15, [r7]
 800518e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005204 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8005192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519a:	d801      	bhi.n	80051a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800519c:	2306      	movs	r3, #6
 800519e:	e021      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051a0:	edd7 7a00 	vldr	s15, [r7]
 80051a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005208 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80051a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	d801      	bhi.n	80051b6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80051b2:	2307      	movs	r3, #7
 80051b4:	e016      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051b6:	edd7 7a00 	vldr	s15, [r7]
 80051ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800520c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80051be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	d801      	bhi.n	80051cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051c8:	2308      	movs	r3, #8
 80051ca:	e00b      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051cc:	edd7 7a00 	vldr	s15, [r7]
 80051d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005210 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80051d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	d801      	bhi.n	80051e2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051de:	2309      	movs	r3, #9
 80051e0:	e000      	b.n	80051e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051e2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	42500000 	.word	0x42500000
 80051fc:	42d00000 	.word	0x42d00000
 8005200:	43500000 	.word	0x43500000
 8005204:	43d00000 	.word	0x43d00000
 8005208:	44504000 	.word	0x44504000
 800520c:	44cf8000 	.word	0x44cf8000
 8005210:	45502000 	.word	0x45502000

08005214 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005220:	edd7 7a00 	vldr	s15, [r7]
 8005224:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d801      	bhi.n	8005236 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005232:	2301      	movs	r3, #1
 8005234:	e058      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005236:	edd7 7a00 	vldr	s15, [r7]
 800523a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800523e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005246:	d801      	bhi.n	800524c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005248:	2302      	movs	r3, #2
 800524a:	e04d      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800524c:	edd7 7a00 	vldr	s15, [r7]
 8005250:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005310 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525c:	d801      	bhi.n	8005262 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800525e:	2303      	movs	r3, #3
 8005260:	e042      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005262:	edd7 7a00 	vldr	s15, [r7]
 8005266:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005314 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800526a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005272:	d801      	bhi.n	8005278 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005274:	2304      	movs	r3, #4
 8005276:	e037      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005278:	edd7 7a00 	vldr	s15, [r7]
 800527c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	d801      	bhi.n	800528e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800528a:	2305      	movs	r3, #5
 800528c:	e02c      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800528e:	edd7 7a00 	vldr	s15, [r7]
 8005292:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800531c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	d801      	bhi.n	80052a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80052a0:	2306      	movs	r3, #6
 80052a2:	e021      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052a4:	edd7 7a00 	vldr	s15, [r7]
 80052a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005320 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b4:	d801      	bhi.n	80052ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052b6:	2307      	movs	r3, #7
 80052b8:	e016      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ba:	edd7 7a00 	vldr	s15, [r7]
 80052be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005324 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d801      	bhi.n	80052d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052cc:	2308      	movs	r3, #8
 80052ce:	e00b      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052d0:	edd7 7a00 	vldr	s15, [r7]
 80052d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005328 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	d801      	bhi.n	80052e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052e2:	2309      	movs	r3, #9
 80052e4:	e000      	b.n	80052e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052e6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80052e8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	331c      	adds	r3, #28
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fa56 	bl	80057a4 <lsm6dsl_gy_data_rate_set>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	e000      	b.n	8005306 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	42500000 	.word	0x42500000
 8005314:	42d00000 	.word	0x42d00000
 8005318:	43500000 	.word	0x43500000
 800531c:	43d00000 	.word	0x43d00000
 8005320:	44504000 	.word	0x44504000
 8005324:	44cf8000 	.word	0x44cf8000
 8005328:	45502000 	.word	0x45502000

0800532c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005338:	edd7 7a00 	vldr	s15, [r7]
 800533c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	d801      	bhi.n	800534e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800534a:	2301      	movs	r3, #1
 800534c:	e058      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800534e:	edd7 7a00 	vldr	s15, [r7]
 8005352:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535e:	d801      	bhi.n	8005364 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005360:	2302      	movs	r3, #2
 8005362:	e04d      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005364:	edd7 7a00 	vldr	s15, [r7]
 8005368:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005414 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800536c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	d801      	bhi.n	800537a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005376:	2303      	movs	r3, #3
 8005378:	e042      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800537a:	edd7 7a00 	vldr	s15, [r7]
 800537e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005418 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	d801      	bhi.n	8005390 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800538c:	2304      	movs	r3, #4
 800538e:	e037      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005390:	edd7 7a00 	vldr	s15, [r7]
 8005394:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	d801      	bhi.n	80053a6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80053a2:	2305      	movs	r3, #5
 80053a4:	e02c      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053a6:	edd7 7a00 	vldr	s15, [r7]
 80053aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005420 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	d801      	bhi.n	80053bc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053b8:	2306      	movs	r3, #6
 80053ba:	e021      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053bc:	edd7 7a00 	vldr	s15, [r7]
 80053c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005424 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053cc:	d801      	bhi.n	80053d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053ce:	2307      	movs	r3, #7
 80053d0:	e016      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053d2:	edd7 7a00 	vldr	s15, [r7]
 80053d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005428 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	d801      	bhi.n	80053e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80053e4:	2308      	movs	r3, #8
 80053e6:	e00b      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053e8:	edd7 7a00 	vldr	s15, [r7]
 80053ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800542c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80053f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	d801      	bhi.n	80053fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80053fa:	2309      	movs	r3, #9
 80053fc:	e000      	b.n	8005400 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053fe:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	42500000 	.word	0x42500000
 8005418:	42d00000 	.word	0x42d00000
 800541c:	43500000 	.word	0x43500000
 8005420:	43d00000 	.word	0x43d00000
 8005424:	44504000 	.word	0x44504000
 8005428:	44cf8000 	.word	0x44cf8000
 800542c:	45502000 	.word	0x45502000

08005430 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	460b      	mov	r3, r1
 800543e:	72fb      	strb	r3, [r7, #11]
 8005440:	4613      	mov	r3, r2
 8005442:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	695c      	ldr	r4, [r3, #20]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	7b1b      	ldrb	r3, [r3, #12]
 8005450:	b298      	uxth	r0, r3
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	b299      	uxth	r1, r3
 8005456:	893b      	ldrh	r3, [r7, #8]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	47a0      	blx	r4
 800545c:	4603      	mov	r3, r0
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}

08005466 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005466:	b590      	push	{r4, r7, lr}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	461a      	mov	r2, r3
 8005472:	460b      	mov	r3, r1
 8005474:	72fb      	strb	r3, [r7, #11]
 8005476:	4613      	mov	r3, r2
 8005478:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	691c      	ldr	r4, [r3, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	7b1b      	ldrb	r3, [r3, #12]
 8005486:	b298      	uxth	r0, r3
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	b299      	uxth	r1, r3
 800548c:	893b      	ldrh	r3, [r7, #8]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	47a0      	blx	r4
 8005492:	4603      	mov	r3, r0
}
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	460b      	mov	r3, r1
 80054aa:	72fb      	strb	r3, [r7, #11]
 80054ac:	4613      	mov	r3, r2
 80054ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685c      	ldr	r4, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6898      	ldr	r0, [r3, #8]
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	7af9      	ldrb	r1, [r7, #11]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	47a0      	blx	r4
 80054c0:	6178      	str	r0, [r7, #20]
  return ret;
 80054c2:	697b      	ldr	r3, [r7, #20]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}

080054cc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	72fb      	strb	r3, [r7, #11]
 80054dc:	4613      	mov	r3, r2
 80054de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681c      	ldr	r4, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6898      	ldr	r0, [r3, #8]
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	7af9      	ldrb	r1, [r7, #11]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	47a0      	blx	r4
 80054f0:	6178      	str	r0, [r7, #20]
  return ret;
 80054f2:	697b      	ldr	r3, [r7, #20]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}

080054fc <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005508:	f107 0208 	add.w	r2, r7, #8
 800550c:	2301      	movs	r3, #1
 800550e:	2110      	movs	r1, #16
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ffc3 	bl	800549c <lsm6dsl_read_reg>
 8005516:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	b2da      	uxtb	r2, r3
 8005526:	7a3b      	ldrb	r3, [r7, #8]
 8005528:	f362 0383 	bfi	r3, r2, #2, #2
 800552c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800552e:	f107 0208 	add.w	r2, r7, #8
 8005532:	2301      	movs	r3, #1
 8005534:	2110      	movs	r1, #16
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ffc8 	bl	80054cc <lsm6dsl_write_reg>
 800553c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005552:	f107 0208 	add.w	r2, r7, #8
 8005556:	2301      	movs	r3, #1
 8005558:	2110      	movs	r1, #16
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ff9e 	bl	800549c <lsm6dsl_read_reg>
 8005560:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8005562:	7a3b      	ldrb	r3, [r7, #8]
 8005564:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d81a      	bhi.n	80055a4 <lsm6dsl_xl_full_scale_get+0x5c>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005585 	.word	0x08005585
 8005578:	0800558d 	.word	0x0800558d
 800557c:	08005595 	.word	0x08005595
 8005580:	0800559d 	.word	0x0800559d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
      break;
 800558a:	e00f      	b.n	80055ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e00b      	b.n	80055ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e007      	b.n	80055ac <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2203      	movs	r2, #3
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	e003      	b.n	80055ac <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2204      	movs	r2, #4
 80055a8:	701a      	strb	r2, [r3, #0]
      break;
 80055aa:	bf00      	nop
  }

  return ret;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop

080055b8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	2301      	movs	r3, #1
 80055ca:	2110      	movs	r1, #16
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff65 	bl	800549c <lsm6dsl_read_reg>
 80055d2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	7a3b      	ldrb	r3, [r7, #8]
 80055e4:	f362 1307 	bfi	r3, r2, #4, #4
 80055e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80055ea:	f107 0208 	add.w	r2, r7, #8
 80055ee:	2301      	movs	r3, #1
 80055f0:	2110      	movs	r1, #16
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff ff6a 	bl	80054cc <lsm6dsl_write_reg>
 80055f8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800560e:	f107 0208 	add.w	r2, r7, #8
 8005612:	2301      	movs	r3, #1
 8005614:	2110      	movs	r1, #16
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ff40 	bl	800549c <lsm6dsl_read_reg>
 800561c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800561e:	7a3b      	ldrb	r3, [r7, #8]
 8005620:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d84a      	bhi.n	80056c0 <lsm6dsl_xl_data_rate_get+0xbc>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <lsm6dsl_xl_data_rate_get+0x2c>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005661 	.word	0x08005661
 8005634:	08005669 	.word	0x08005669
 8005638:	08005671 	.word	0x08005671
 800563c:	08005679 	.word	0x08005679
 8005640:	08005681 	.word	0x08005681
 8005644:	08005689 	.word	0x08005689
 8005648:	08005691 	.word	0x08005691
 800564c:	08005699 	.word	0x08005699
 8005650:	080056a1 	.word	0x080056a1
 8005654:	080056a9 	.word	0x080056a9
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056b9 	.word	0x080056b9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
      break;
 8005666:	e02f      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
      break;
 800566e:	e02b      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
      break;
 8005676:	e027      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2203      	movs	r2, #3
 800567c:	701a      	strb	r2, [r3, #0]
      break;
 800567e:	e023      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2204      	movs	r2, #4
 8005684:	701a      	strb	r2, [r3, #0]
      break;
 8005686:	e01f      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2205      	movs	r2, #5
 800568c:	701a      	strb	r2, [r3, #0]
      break;
 800568e:	e01b      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2206      	movs	r2, #6
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e017      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2207      	movs	r2, #7
 800569c:	701a      	strb	r2, [r3, #0]
      break;
 800569e:	e013      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2208      	movs	r2, #8
 80056a4:	701a      	strb	r2, [r3, #0]
      break;
 80056a6:	e00f      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2209      	movs	r2, #9
 80056ac:	701a      	strb	r2, [r3, #0]
      break;
 80056ae:	e00b      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	220a      	movs	r2, #10
 80056b4:	701a      	strb	r2, [r3, #0]
      break;
 80056b6:	e007      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	220b      	movs	r2, #11
 80056bc:	701a      	strb	r2, [r3, #0]
      break;
 80056be:	e003      	b.n	80056c8 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	220c      	movs	r2, #12
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	bf00      	nop
  }

  return ret;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop

080056d4 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056e0:	f107 0208 	add.w	r2, r7, #8
 80056e4:	2301      	movs	r3, #1
 80056e6:	2111      	movs	r1, #17
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fed7 	bl	800549c <lsm6dsl_read_reg>
 80056ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	7a3b      	ldrb	r3, [r7, #8]
 8005700:	f362 0343 	bfi	r3, r2, #1, #3
 8005704:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005706:	f107 0208 	add.w	r2, r7, #8
 800570a:	2301      	movs	r3, #1
 800570c:	2111      	movs	r1, #17
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff fedc 	bl	80054cc <lsm6dsl_write_reg>
 8005714:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800572a:	f107 0208 	add.w	r2, r7, #8
 800572e:	2301      	movs	r3, #1
 8005730:	2111      	movs	r1, #17
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff feb2 	bl	800549c <lsm6dsl_read_reg>
 8005738:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800573a:	7a3b      	ldrb	r3, [r7, #8]
 800573c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b06      	cmp	r3, #6
 8005744:	d824      	bhi.n	8005790 <lsm6dsl_gy_full_scale_get+0x70>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005769 	.word	0x08005769
 8005750:	08005771 	.word	0x08005771
 8005754:	08005779 	.word	0x08005779
 8005758:	08005791 	.word	0x08005791
 800575c:	08005781 	.word	0x08005781
 8005760:	08005791 	.word	0x08005791
 8005764:	08005789 	.word	0x08005789
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
      break;
 800576e:	e013      	b.n	8005798 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
      break;
 8005776:	e00f      	b.n	8005798 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2202      	movs	r2, #2
 800577c:	701a      	strb	r2, [r3, #0]
      break;
 800577e:	e00b      	b.n	8005798 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2204      	movs	r2, #4
 8005784:	701a      	strb	r2, [r3, #0]
      break;
 8005786:	e007      	b.n	8005798 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2206      	movs	r2, #6
 800578c:	701a      	strb	r2, [r3, #0]
      break;
 800578e:	e003      	b.n	8005798 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2207      	movs	r2, #7
 8005794:	701a      	strb	r2, [r3, #0]
      break;
 8005796:	bf00      	nop
  }

  return ret;
 8005798:	68fb      	ldr	r3, [r7, #12]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop

080057a4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057b0:	f107 0208 	add.w	r2, r7, #8
 80057b4:	2301      	movs	r3, #1
 80057b6:	2111      	movs	r1, #17
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fe6f 	bl	800549c <lsm6dsl_read_reg>
 80057be:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	7a3b      	ldrb	r3, [r7, #8]
 80057d0:	f362 1307 	bfi	r3, r2, #4, #4
 80057d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057d6:	f107 0208 	add.w	r2, r7, #8
 80057da:	2301      	movs	r3, #1
 80057dc:	2111      	movs	r1, #17
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fe74 	bl	80054cc <lsm6dsl_write_reg>
 80057e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057fa:	f107 0208 	add.w	r2, r7, #8
 80057fe:	2301      	movs	r3, #1
 8005800:	2111      	movs	r1, #17
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fe4a 	bl	800549c <lsm6dsl_read_reg>
 8005808:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800580a:	7a3b      	ldrb	r3, [r7, #8]
 800580c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b0a      	cmp	r3, #10
 8005814:	d844      	bhi.n	80058a0 <lsm6dsl_gy_data_rate_get+0xb0>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <lsm6dsl_gy_data_rate_get+0x2c>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005849 	.word	0x08005849
 8005820:	08005851 	.word	0x08005851
 8005824:	08005859 	.word	0x08005859
 8005828:	08005861 	.word	0x08005861
 800582c:	08005869 	.word	0x08005869
 8005830:	08005871 	.word	0x08005871
 8005834:	08005879 	.word	0x08005879
 8005838:	08005881 	.word	0x08005881
 800583c:	08005889 	.word	0x08005889
 8005840:	08005891 	.word	0x08005891
 8005844:	08005899 	.word	0x08005899
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
      break;
 800584e:	e02b      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
      break;
 8005856:	e027      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e023      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2203      	movs	r2, #3
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	e01f      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2204      	movs	r2, #4
 800586c:	701a      	strb	r2, [r3, #0]
      break;
 800586e:	e01b      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2205      	movs	r2, #5
 8005874:	701a      	strb	r2, [r3, #0]
      break;
 8005876:	e017      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2206      	movs	r2, #6
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e013      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2207      	movs	r2, #7
 8005884:	701a      	strb	r2, [r3, #0]
      break;
 8005886:	e00f      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2208      	movs	r2, #8
 800588c:	701a      	strb	r2, [r3, #0]
      break;
 800588e:	e00b      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2209      	movs	r2, #9
 8005894:	701a      	strb	r2, [r3, #0]
      break;
 8005896:	e007      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	220a      	movs	r2, #10
 800589c:	701a      	strb	r2, [r3, #0]
      break;
 800589e:	e003      	b.n	80058a8 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	220b      	movs	r2, #11
 80058a4:	701a      	strb	r2, [r3, #0]
      break;
 80058a6:	bf00      	nop
  }

  return ret;
 80058a8:	68fb      	ldr	r3, [r7, #12]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop

080058b4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058c0:	f107 0208 	add.w	r2, r7, #8
 80058c4:	2301      	movs	r3, #1
 80058c6:	2112      	movs	r1, #18
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fde7 	bl	800549c <lsm6dsl_read_reg>
 80058ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	7a3b      	ldrb	r3, [r7, #8]
 80058e0:	f362 1386 	bfi	r3, r2, #6, #1
 80058e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058e6:	f107 0208 	add.w	r2, r7, #8
 80058ea:	2301      	movs	r3, #1
 80058ec:	2112      	movs	r1, #18
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff fdec 	bl	80054cc <lsm6dsl_write_reg>
 80058f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800590a:	f107 020c 	add.w	r2, r7, #12
 800590e:	2306      	movs	r3, #6
 8005910:	2122      	movs	r1, #34	; 0x22
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fdc2 	bl	800549c <lsm6dsl_read_reg>
 8005918:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800591a:	7b7b      	ldrb	r3, [r7, #13]
 800591c:	b21a      	sxth	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005928:	b29b      	uxth	r3, r3
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	b29a      	uxth	r2, r3
 800592e:	7b3b      	ldrb	r3, [r7, #12]
 8005930:	b29b      	uxth	r3, r3
 8005932:	4413      	add	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	b21a      	sxth	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3302      	adds	r3, #2
 8005942:	b212      	sxth	r2, r2
 8005944:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3302      	adds	r3, #2
 800594a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594e:	b29b      	uxth	r3, r3
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	b29a      	uxth	r2, r3
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	b29b      	uxth	r3, r3
 8005958:	4413      	add	r3, r2
 800595a:	b29a      	uxth	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	3302      	adds	r3, #2
 8005960:	b212      	sxth	r2, r2
 8005962:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005964:	7c7a      	ldrb	r2, [r7, #17]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	3304      	adds	r3, #4
 800596a:	b212      	sxth	r2, r2
 800596c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3304      	adds	r3, #4
 8005972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005976:	b29b      	uxth	r3, r3
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	b29a      	uxth	r2, r3
 800597c:	7c3b      	ldrb	r3, [r7, #16]
 800597e:	b29b      	uxth	r3, r3
 8005980:	4413      	add	r3, r2
 8005982:	b29a      	uxth	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3304      	adds	r3, #4
 8005988:	b212      	sxth	r2, r2
 800598a:	801a      	strh	r2, [r3, #0]
  return ret;
 800598c:	697b      	ldr	r3, [r7, #20]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80059a0:	f107 020c 	add.w	r2, r7, #12
 80059a4:	2306      	movs	r3, #6
 80059a6:	2128      	movs	r1, #40	; 0x28
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fd77 	bl	800549c <lsm6dsl_read_reg>
 80059ae:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80059b0:	7b7b      	ldrb	r3, [r7, #13]
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	7b3b      	ldrb	r3, [r7, #12]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	b21a      	sxth	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	3302      	adds	r3, #2
 80059d8:	b212      	sxth	r2, r2
 80059da:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3302      	adds	r3, #2
 80059e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	3302      	adds	r3, #2
 80059f6:	b212      	sxth	r2, r2
 80059f8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80059fa:	7c7a      	ldrb	r2, [r7, #17]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	3304      	adds	r3, #4
 8005a00:	b212      	sxth	r2, r2
 8005a02:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3304      	adds	r3, #4
 8005a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	7c3b      	ldrb	r3, [r7, #16]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	b212      	sxth	r2, r2
 8005a20:	801a      	strh	r2, [r3, #0]
  return ret;
 8005a22:	697b      	ldr	r3, [r7, #20]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005a36:	2301      	movs	r3, #1
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	210f      	movs	r1, #15
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fd2d 	bl	800549c <lsm6dsl_read_reg>
 8005a42:	60f8      	str	r0, [r7, #12]
  return ret;
 8005a44:	68fb      	ldr	r3, [r7, #12]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a5a:	f107 0208 	add.w	r2, r7, #8
 8005a5e:	2301      	movs	r3, #1
 8005a60:	2112      	movs	r1, #18
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fd1a 	bl	800549c <lsm6dsl_read_reg>
 8005a68:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	7a3b      	ldrb	r3, [r7, #8]
 8005a7a:	f362 0382 	bfi	r3, r2, #2, #1
 8005a7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a80:	f107 0208 	add.w	r2, r7, #8
 8005a84:	2301      	movs	r3, #1
 8005a86:	2112      	movs	r1, #18
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fd1f 	bl	80054cc <lsm6dsl_write_reg>
 8005a8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005aa6:	f107 0208 	add.w	r2, r7, #8
 8005aaa:	2301      	movs	r3, #1
 8005aac:	210a      	movs	r1, #10
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fcf4 	bl	800549c <lsm6dsl_read_reg>
 8005ab4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10f      	bne.n	8005adc <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	7a3b      	ldrb	r3, [r7, #8]
 8005ac6:	f362 0302 	bfi	r3, r2, #0, #3
 8005aca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005acc:	f107 0208 	add.w	r2, r7, #8
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	210a      	movs	r1, #10
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fcf9 	bl	80054cc <lsm6dsl_write_reg>
 8005ada:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005adc:	68fb      	ldr	r3, [r7, #12]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08e      	sub	sp, #56	; 0x38
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005af6:	2301      	movs	r3, #1
 8005af8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d06e      	beq.n	8005be2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	f200 809d 	bhi.w	8005c46 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d032      	beq.n	8005b7e <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005b18:	e095      	b.n	8005c46 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	f000 fa32 	bl	8005f84 <LSM6DSL_0_Probe>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	e0cc      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b2c:	4a68      	ldr	r2, [pc, #416]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4967      	ldr	r1, [pc, #412]	; (8005cd4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b3e:	f107 010c 	add.w	r1, r7, #12
 8005b42:	4610      	mov	r0, r2
 8005b44:	4798      	blx	r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b4c:	f06f 0306 	mvn.w	r3, #6
 8005b50:	e0b9      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b52:	7b3b      	ldrb	r3, [r7, #12]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d103      	bne.n	8005b60 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b60:	7b7b      	ldrb	r3, [r7, #13]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d103      	bne.n	8005b6e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d16c      	bne.n	8005c4e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	f043 0304 	orr.w	r3, r3, #4
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b7c:	e067      	b.n	8005c4e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b7e:	6838      	ldr	r0, [r7, #0]
 8005b80:	f000 fabc 	bl	80060fc <LSM303AGR_ACC_0_Probe>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e09a      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b90:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	494e      	ldr	r1, [pc, #312]	; (8005cd4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ba2:	f107 010c 	add.w	r1, r7, #12
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bb0:	f06f 0306 	mvn.w	r3, #6
 8005bb4:	e087      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bb6:	7b3b      	ldrb	r3, [r7, #12]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d103      	bne.n	8005bc4 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005bc4:	7b7b      	ldrb	r3, [r7, #13]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d103      	bne.n	8005bd2 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d13c      	bne.n	8005c52 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f043 0304 	orr.w	r3, r3, #4
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005be0:	e037      	b.n	8005c52 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005be2:	6838      	ldr	r0, [r7, #0]
 8005be4:	f000 fb2e 	bl	8006244 <LSM303AGR_MAG_0_Probe>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e068      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bf4:	4a36      	ldr	r2, [pc, #216]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4935      	ldr	r1, [pc, #212]	; (8005cd4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c06:	f107 010c 	add.w	r1, r7, #12
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4798      	blx	r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c14:	f06f 0306 	mvn.w	r3, #6
 8005c18:	e055      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c1a:	7b3b      	ldrb	r3, [r7, #12]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d103      	bne.n	8005c28 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c28:	7b7b      	ldrb	r3, [r7, #13]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d103      	bne.n	8005c36 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c44:	e007      	b.n	8005c56 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005c46:	f06f 0301 	mvn.w	r3, #1
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c4c:	e004      	b.n	8005c58 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e002      	b.n	8005c58 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c56:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	e031      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c66:	e02a      	b.n	8005cbe <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d11e      	bne.n	8005cb2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	4013      	ands	r3, r2
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d118      	bne.n	8005cb2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c88:	4814      	ldr	r0, [pc, #80]	; (8005cdc <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	4413      	add	r3, r2
 8005c92:	440b      	add	r3, r1
 8005c94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	490e      	ldr	r1, [pc, #56]	; (8005cd4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4798      	blx	r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005cac:	f06f 0304 	mvn.w	r3, #4
 8005cb0:	e009      	b.n	8005cc6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	3301      	adds	r3, #1
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d9d1      	bls.n	8005c68 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3738      	adds	r7, #56	; 0x38
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20001110 	.word	0x20001110
 8005cd4:	200014f4 	.word	0x200014f4
 8005cd8:	200000d0 	.word	0x200000d0
 8005cdc:	200010ec 	.word	0x200010ec

08005ce0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d903      	bls.n	8005cf8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cf0:	f06f 0301 	mvn.w	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e028      	b.n	8005d4a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cf8:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4013      	ands	r3, r2
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d11c      	bne.n	8005d44 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d12:	4812      	ldr	r0, [pc, #72]	; (8005d5c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	490e      	ldr	r1, [pc, #56]	; (8005d60 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d36:	f06f 0304 	mvn.w	r3, #4
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e005      	b.n	8005d4a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e002      	b.n	8005d4a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d44:	f06f 0301 	mvn.w	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	2000111c 	.word	0x2000111c
 8005d58:	200000d0 	.word	0x200000d0
 8005d5c:	200010ec 	.word	0x200010ec
 8005d60:	200014f4 	.word	0x200014f4

08005d64 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d903      	bls.n	8005d7c <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d74:	f06f 0301 	mvn.w	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e028      	b.n	8005dce <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d7c:	4a16      	ldr	r2, [pc, #88]	; (8005dd8 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	4013      	ands	r3, r2
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d11c      	bne.n	8005dc8 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d96:	4812      	ldr	r0, [pc, #72]	; (8005de0 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	440b      	add	r3, r1
 8005da2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dba:	f06f 0304 	mvn.w	r3, #4
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e005      	b.n	8005dce <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e002      	b.n	8005dce <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005dc8:	f06f 0301 	mvn.w	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	2000111c 	.word	0x2000111c
 8005ddc:	200000d0 	.word	0x200000d0
 8005de0:	200010ec 	.word	0x200010ec
 8005de4:	200014f4 	.word	0x200014f4

08005de8 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d903      	bls.n	8005e02 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dfa:	f06f 0301 	mvn.w	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e029      	b.n	8005e56 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d11d      	bne.n	8005e50 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e1c:	4812      	ldr	r0, [pc, #72]	; (8005e68 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	440b      	add	r3, r1
 8005e28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	490f      	ldr	r1, [pc, #60]	; (8005e6c <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e42:	f06f 0304 	mvn.w	r3, #4
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e005      	b.n	8005e56 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e002      	b.n	8005e56 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e50:	f06f 0301 	mvn.w	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e56:	697b      	ldr	r3, [r7, #20]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000111c 	.word	0x2000111c
 8005e64:	200000d0 	.word	0x200000d0
 8005e68:	200010ec 	.word	0x200010ec
 8005e6c:	200014f4 	.word	0x200014f4

08005e70 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d903      	bls.n	8005e8c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e84:	f06f 0301 	mvn.w	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e02a      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d11e      	bne.n	8005edc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005e9e:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ea6:	4813      	ldr	r0, [pc, #76]	; (8005ef4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ec0:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ece:	f06f 0304 	mvn.w	r3, #4
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e005      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e002      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005edc:	f06f 0301 	mvn.w	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	2000111c 	.word	0x2000111c
 8005ef0:	200000d0 	.word	0x200000d0
 8005ef4:	200010ec 	.word	0x200010ec
 8005ef8:	200014f4 	.word	0x200014f4

08005efc <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d903      	bls.n	8005f16 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f0e:	f06f 0301 	mvn.w	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e029      	b.n	8005f6a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005f16:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d11d      	bne.n	8005f64 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f30:	4812      	ldr	r0, [pc, #72]	; (8005f7c <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	490f      	ldr	r1, [pc, #60]	; (8005f80 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f56:	f06f 0304 	mvn.w	r3, #4
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e005      	b.n	8005f6a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e002      	b.n	8005f6a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005f64:	f06f 0301 	mvn.w	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005f6a:	697b      	ldr	r3, [r7, #20]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000111c 	.word	0x2000111c
 8005f78:	200000d0 	.word	0x200000d0
 8005f7c:	200010ec 	.word	0x200010ec
 8005f80:	200014f4 	.word	0x200014f4

08005f84 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b092      	sub	sp, #72	; 0x48
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005f90:	2300      	movs	r3, #0
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005f94:	23d7      	movs	r3, #215	; 0xd7
 8005f96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	; (80060c4 <LSM6DSL_0_Probe+0x140>)
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	; (80060c8 <LSM6DSL_0_Probe+0x144>)
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005fa2:	4b4a      	ldr	r3, [pc, #296]	; (80060cc <LSM6DSL_0_Probe+0x148>)
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005fa6:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <LSM6DSL_0_Probe+0x14c>)
 8005fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <LSM6DSL_0_Probe+0x150>)
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4848      	ldr	r0, [pc, #288]	; (80060d8 <LSM6DSL_0_Probe+0x154>)
 8005fb6:	f7fe fa81 	bl	80044bc <LSM6DSL_RegisterBusIO>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005fc0:	f06f 0306 	mvn.w	r3, #6
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc6:	e077      	b.n	80060b8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005fc8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4842      	ldr	r0, [pc, #264]	; (80060d8 <LSM6DSL_0_Probe+0x154>)
 8005fd0:	f7fe fb6a 	bl	80046a8 <LSM6DSL_ReadID>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005fda:	f06f 0306 	mvn.w	r3, #6
 8005fde:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe0:	e06a      	b.n	80060b8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe6:	2b6a      	cmp	r3, #106	; 0x6a
 8005fe8:	d003      	beq.n	8005ff2 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005fea:	f06f 0306 	mvn.w	r3, #6
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	e062      	b.n	80060b8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4837      	ldr	r0, [pc, #220]	; (80060d8 <LSM6DSL_0_Probe+0x154>)
 8005ffa:	f7fe fb6b 	bl	80046d4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005ffe:	7a7b      	ldrb	r3, [r7, #9]
 8006000:	461a      	mov	r2, r3
 8006002:	7a3b      	ldrb	r3, [r7, #8]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	431a      	orrs	r2, r3
 8006008:	7abb      	ldrb	r3, [r7, #10]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4313      	orrs	r3, r2
 800600e:	4a33      	ldr	r2, [pc, #204]	; (80060dc <LSM6DSL_0_Probe+0x158>)
 8006010:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <LSM6DSL_0_Probe+0x15c>)
 8006014:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <LSM6DSL_0_Probe+0x154>)
 8006016:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8006018:	4b32      	ldr	r3, [pc, #200]	; (80060e4 <LSM6DSL_0_Probe+0x160>)
 800601a:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <LSM6DSL_0_Probe+0x164>)
 800601c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11d      	bne.n	8006060 <LSM6DSL_0_Probe+0xdc>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <LSM6DSL_0_Probe+0xdc>
 800602e:	7a7b      	ldrb	r3, [r7, #9]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d115      	bne.n	8006060 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <LSM6DSL_0_Probe+0x168>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <LSM6DSL_0_Probe+0x16c>)
 800603a:	492e      	ldr	r1, [pc, #184]	; (80060f4 <LSM6DSL_0_Probe+0x170>)
 800603c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006040:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <LSM6DSL_0_Probe+0x160>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a26      	ldr	r2, [pc, #152]	; (80060e0 <LSM6DSL_0_Probe+0x15c>)
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4610      	mov	r0, r2
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006054:	f06f 0304 	mvn.w	r3, #4
 8006058:	647b      	str	r3, [r7, #68]	; 0x44
 800605a:	e001      	b.n	8006060 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11d      	bne.n	80060a2 <LSM6DSL_0_Probe+0x11e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d018      	beq.n	80060a2 <LSM6DSL_0_Probe+0x11e>
 8006070:	7a3b      	ldrb	r3, [r7, #8]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d115      	bne.n	80060a2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <LSM6DSL_0_Probe+0x168>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <LSM6DSL_0_Probe+0x16c>)
 800607c:	491e      	ldr	r1, [pc, #120]	; (80060f8 <LSM6DSL_0_Probe+0x174>)
 800607e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <LSM6DSL_0_Probe+0x160>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <LSM6DSL_0_Probe+0x15c>)
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006096:	f06f 0304 	mvn.w	r3, #4
 800609a:	647b      	str	r3, [r7, #68]	; 0x44
 800609c:	e001      	b.n	80060a2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800609e:	2300      	movs	r3, #0
 80060a0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <LSM6DSL_0_Probe+0x134>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060b2:	f06f 0304 	mvn.w	r3, #4
 80060b6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80060b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3748      	adds	r7, #72	; 0x48
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08002721 	.word	0x08002721
 80060c8:	0800279d 	.word	0x0800279d
 80060cc:	08002851 	.word	0x08002851
 80060d0:	080027ed 	.word	0x080027ed
 80060d4:	080028b5 	.word	0x080028b5
 80060d8:	20001128 	.word	0x20001128
 80060dc:	2000111c 	.word	0x2000111c
 80060e0:	200014f4 	.word	0x200014f4
 80060e4:	20001110 	.word	0x20001110
 80060e8:	20000078 	.word	0x20000078
 80060ec:	200000d0 	.word	0x200000d0
 80060f0:	200010ec 	.word	0x200010ec
 80060f4:	200000ac 	.word	0x200000ac
 80060f8:	20000088 	.word	0x20000088

080060fc <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b092      	sub	sp, #72	; 0x48
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006104:	2300      	movs	r3, #0
 8006106:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006108:	2300      	movs	r3, #0
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800610c:	2333      	movs	r3, #51	; 0x33
 800610e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006112:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <LSM303AGR_ACC_0_Probe+0x114>)
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006116:	4b3f      	ldr	r3, [pc, #252]	; (8006214 <LSM303AGR_ACC_0_Probe+0x118>)
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800611a:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <LSM303AGR_ACC_0_Probe+0x11c>)
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800611e:	4b3f      	ldr	r3, [pc, #252]	; (800621c <LSM303AGR_ACC_0_Probe+0x120>)
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006122:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <LSM303AGR_ACC_0_Probe+0x124>)
 8006124:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612a:	4619      	mov	r1, r3
 800612c:	483d      	ldr	r0, [pc, #244]	; (8006224 <LSM303AGR_ACC_0_Probe+0x128>)
 800612e:	f7fc fe0f 	bl	8002d50 <LSM303AGR_ACC_RegisterBusIO>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006138:	f06f 0306 	mvn.w	r3, #6
 800613c:	647b      	str	r3, [r7, #68]	; 0x44
 800613e:	e062      	b.n	8006206 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006140:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006144:	4619      	mov	r1, r3
 8006146:	4837      	ldr	r0, [pc, #220]	; (8006224 <LSM303AGR_ACC_0_Probe+0x128>)
 8006148:	f7fc fec3 	bl	8002ed2 <LSM303AGR_ACC_ReadID>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006152:	f06f 0306 	mvn.w	r3, #6
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
 8006158:	e055      	b.n	8006206 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800615a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615e:	2b33      	cmp	r3, #51	; 0x33
 8006160:	d003      	beq.n	800616a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006162:	f06f 0306 	mvn.w	r3, #6
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
 8006168:	e04d      	b.n	8006206 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4619      	mov	r1, r3
 8006170:	482c      	ldr	r0, [pc, #176]	; (8006224 <LSM303AGR_ACC_0_Probe+0x128>)
 8006172:	f7fc fec5 	bl	8002f00 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006176:	7a7b      	ldrb	r3, [r7, #9]
 8006178:	461a      	mov	r2, r3
 800617a:	7a3b      	ldrb	r3, [r7, #8]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006180:	7abb      	ldrb	r3, [r7, #10]
 8006182:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006184:	4313      	orrs	r3, r2
 8006186:	4a28      	ldr	r2, [pc, #160]	; (8006228 <LSM303AGR_ACC_0_Probe+0x12c>)
 8006188:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800618a:	4b28      	ldr	r3, [pc, #160]	; (800622c <LSM303AGR_ACC_0_Probe+0x130>)
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <LSM303AGR_ACC_0_Probe+0x128>)
 800618e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8006190:	4b27      	ldr	r3, [pc, #156]	; (8006230 <LSM303AGR_ACC_0_Probe+0x134>)
 8006192:	4a28      	ldr	r2, [pc, #160]	; (8006234 <LSM303AGR_ACC_0_Probe+0x138>)
 8006194:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006198:	2b00      	cmp	r3, #0
 800619a:	d11e      	bne.n	80061da <LSM303AGR_ACC_0_Probe+0xde>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d019      	beq.n	80061da <LSM303AGR_ACC_0_Probe+0xde>
 80061a6:	7a3b      	ldrb	r3, [r7, #8]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d116      	bne.n	80061da <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <LSM303AGR_ACC_0_Probe+0x13c>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <LSM303AGR_ACC_0_Probe+0x140>)
 80061b2:	3303      	adds	r3, #3
 80061b4:	4922      	ldr	r1, [pc, #136]	; (8006240 <LSM303AGR_ACC_0_Probe+0x144>)
 80061b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <LSM303AGR_ACC_0_Probe+0x134>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <LSM303AGR_ACC_0_Probe+0x130>)
 80061c2:	6852      	ldr	r2, [r2, #4]
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80061ce:	f06f 0304 	mvn.w	r3, #4
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	e001      	b.n	80061da <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <LSM303AGR_ACC_0_Probe+0xf4>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80061ea:	f06f 0304 	mvn.w	r3, #4
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <LSM303AGR_ACC_0_Probe+0x10a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006200:	f06f 0304 	mvn.w	r3, #4
 8006204:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006208:	4618      	mov	r0, r3
 800620a:	3748      	adds	r7, #72	; 0x48
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	08002721 	.word	0x08002721
 8006214:	0800279d 	.word	0x0800279d
 8006218:	08002851 	.word	0x08002851
 800621c:	080027ed 	.word	0x080027ed
 8006220:	080028b5 	.word	0x080028b5
 8006224:	20001158 	.word	0x20001158
 8006228:	2000111c 	.word	0x2000111c
 800622c:	200014f4 	.word	0x200014f4
 8006230:	20001110 	.word	0x20001110
 8006234:	20000010 	.word	0x20000010
 8006238:	200000d0 	.word	0x200000d0
 800623c:	200010ec 	.word	0x200010ec
 8006240:	20000020 	.word	0x20000020

08006244 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b092      	sub	sp, #72	; 0x48
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800624c:	2300      	movs	r3, #0
 800624e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006250:	2300      	movs	r3, #0
 8006252:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006254:	233d      	movs	r3, #61	; 0x3d
 8006256:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800625a:	4b3f      	ldr	r3, [pc, #252]	; (8006358 <LSM303AGR_MAG_0_Probe+0x114>)
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800625e:	4b3f      	ldr	r3, [pc, #252]	; (800635c <LSM303AGR_MAG_0_Probe+0x118>)
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006262:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <LSM303AGR_MAG_0_Probe+0x120>)
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800626a:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <LSM303AGR_MAG_0_Probe+0x124>)
 800626c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800626e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006272:	4619      	mov	r1, r3
 8006274:	483d      	ldr	r0, [pc, #244]	; (800636c <LSM303AGR_MAG_0_Probe+0x128>)
 8006276:	f7fd f931 	bl	80034dc <LSM303AGR_MAG_RegisterBusIO>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006280:	f06f 0306 	mvn.w	r3, #6
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
 8006286:	e062      	b.n	800634e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006288:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800628c:	4619      	mov	r1, r3
 800628e:	4837      	ldr	r0, [pc, #220]	; (800636c <LSM303AGR_MAG_0_Probe+0x128>)
 8006290:	f7fd f9db 	bl	800364a <LSM303AGR_MAG_ReadID>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800629a:	f06f 0306 	mvn.w	r3, #6
 800629e:	647b      	str	r3, [r7, #68]	; 0x44
 80062a0:	e055      	b.n	800634e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80062a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d003      	beq.n	80062b2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80062aa:	f06f 0306 	mvn.w	r3, #6
 80062ae:	647b      	str	r3, [r7, #68]	; 0x44
 80062b0:	e04d      	b.n	800634e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4619      	mov	r1, r3
 80062b8:	482c      	ldr	r0, [pc, #176]	; (800636c <LSM303AGR_MAG_0_Probe+0x128>)
 80062ba:	f7fd f9dd 	bl	8003678 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80062be:	7a7b      	ldrb	r3, [r7, #9]
 80062c0:	461a      	mov	r2, r3
 80062c2:	7a3b      	ldrb	r3, [r7, #8]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80062c8:	7abb      	ldrb	r3, [r7, #10]
 80062ca:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80062cc:	4313      	orrs	r3, r2
 80062ce:	4a28      	ldr	r2, [pc, #160]	; (8006370 <LSM303AGR_MAG_0_Probe+0x12c>)
 80062d0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <LSM303AGR_MAG_0_Probe+0x130>)
 80062d4:	4a25      	ldr	r2, [pc, #148]	; (800636c <LSM303AGR_MAG_0_Probe+0x128>)
 80062d6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <LSM303AGR_MAG_0_Probe+0x134>)
 80062da:	4a28      	ldr	r2, [pc, #160]	; (800637c <LSM303AGR_MAG_0_Probe+0x138>)
 80062dc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80062de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11e      	bne.n	8006322 <LSM303AGR_MAG_0_Probe+0xde>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d019      	beq.n	8006322 <LSM303AGR_MAG_0_Probe+0xde>
 80062ee:	7abb      	ldrb	r3, [r7, #10]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d116      	bne.n	8006322 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <LSM303AGR_MAG_0_Probe+0x13c>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <LSM303AGR_MAG_0_Probe+0x140>)
 80062fa:	3306      	adds	r3, #6
 80062fc:	4922      	ldr	r1, [pc, #136]	; (8006388 <LSM303AGR_MAG_0_Probe+0x144>)
 80062fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006302:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <LSM303AGR_MAG_0_Probe+0x134>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <LSM303AGR_MAG_0_Probe+0x130>)
 800630a:	6892      	ldr	r2, [r2, #8]
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006316:	f06f 0304 	mvn.w	r3, #4
 800631a:	647b      	str	r3, [r7, #68]	; 0x44
 800631c:	e001      	b.n	8006322 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
 8006320:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006324:	2b00      	cmp	r3, #0
 8006326:	d107      	bne.n	8006338 <LSM303AGR_MAG_0_Probe+0xf4>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006332:	f06f 0304 	mvn.w	r3, #4
 8006336:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <LSM303AGR_MAG_0_Probe+0x10a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006348:	f06f 0304 	mvn.w	r3, #4
 800634c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800634e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006350:	4618      	mov	r0, r3
 8006352:	3748      	adds	r7, #72	; 0x48
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	08002721 	.word	0x08002721
 800635c:	0800279d 	.word	0x0800279d
 8006360:	08002851 	.word	0x08002851
 8006364:	080027ed 	.word	0x080027ed
 8006368:	080028b5 	.word	0x080028b5
 800636c:	20001184 	.word	0x20001184
 8006370:	2000111c 	.word	0x2000111c
 8006374:	200014f4 	.word	0x200014f4
 8006378:	20001110 	.word	0x20001110
 800637c:	20000044 	.word	0x20000044
 8006380:	200000d0 	.word	0x200000d0
 8006384:	200010ec 	.word	0x200010ec
 8006388:	20000054 	.word	0x20000054

0800638c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d903      	bls.n	80063a8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80063a0:	f06f 0301 	mvn.w	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e025      	b.n	80063f4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	79fa      	ldrb	r2, [r7, #7]
 80063ac:	4914      	ldr	r1, [pc, #80]	; (8006400 <BSP_COM_Init+0x74>)
 80063ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063b2:	4814      	ldr	r0, [pc, #80]	; (8006404 <BSP_COM_Init+0x78>)
 80063b4:	4613      	mov	r3, r2
 80063b6:	015b      	lsls	r3, r3, #5
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4403      	add	r3, r0
 80063be:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80063c0:	79fa      	ldrb	r2, [r7, #7]
 80063c2:	4613      	mov	r3, r2
 80063c4:	015b      	lsls	r3, r3, #5
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a0e      	ldr	r2, [pc, #56]	; (8006404 <BSP_COM_Init+0x78>)
 80063cc:	4413      	add	r3, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f86a 	bl	80064a8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80063d4:	79fa      	ldrb	r2, [r7, #7]
 80063d6:	4613      	mov	r3, r2
 80063d8:	015b      	lsls	r3, r3, #5
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <BSP_COM_Init+0x78>)
 80063e0:	4413      	add	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f810 	bl	8006408 <MX_USART2_UART_Init>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80063ee:	f06f 0303 	mvn.w	r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200000e4 	.word	0x200000e4
 8006404:	20001548 	.word	0x20001548

08006408 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <MX_USART2_UART_Init+0x64>)
 8006418:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006420:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	220c      	movs	r2, #12
 8006438:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f004 f854 	bl	800a500 <HAL_UART_Init>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40004400 	.word	0x40004400

08006470 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <__io_putchar+0x30>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	4613      	mov	r3, r2
 8006480:	015b      	lsls	r3, r3, #5
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <__io_putchar+0x34>)
 8006488:	1898      	adds	r0, r3, r2
 800648a:	1d39      	adds	r1, r7, #4
 800648c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006490:	2201      	movs	r2, #1
 8006492:	f004 f88d 	bl	800a5b0 <HAL_UART_Transmit>
  return ch;
 8006496:	687b      	ldr	r3, [r7, #4]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200011b0 	.word	0x200011b0
 80064a4:	20001548 	.word	0x20001548

080064a8 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80064b0:	4b30      	ldr	r3, [pc, #192]	; (8006574 <USART2_MspInit+0xcc>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <USART2_MspInit+0xcc>)
 80064b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ba:	6593      	str	r3, [r2, #88]	; 0x58
 80064bc:	4b2d      	ldr	r3, [pc, #180]	; (8006574 <USART2_MspInit+0xcc>)
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c8:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <USART2_MspInit+0xcc>)
 80064ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064cc:	4a29      	ldr	r2, [pc, #164]	; (8006574 <USART2_MspInit+0xcc>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064d4:	4b27      	ldr	r3, [pc, #156]	; (8006574 <USART2_MspInit+0xcc>)
 80064d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80064e0:	2304      	movs	r3, #4
 80064e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e4:	2302      	movs	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ec:	2303      	movs	r3, #3
 80064ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80064f0:	2307      	movs	r3, #7
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	4619      	mov	r1, r3
 80064fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064fe:	f000 fcaf 	bl	8006e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006502:	2308      	movs	r3, #8
 8006504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006506:	2302      	movs	r3, #2
 8006508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650e:	2303      	movs	r3, #3
 8006510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006512:	2307      	movs	r3, #7
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	4619      	mov	r1, r3
 800651c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006520:	f000 fc9e 	bl	8006e60 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <USART2_MspInit+0xd0>)
 8006526:	4a15      	ldr	r2, [pc, #84]	; (800657c <USART2_MspInit+0xd4>)
 8006528:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <USART2_MspInit+0xd0>)
 800652c:	2202      	movs	r2, #2
 800652e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <USART2_MspInit+0xd0>)
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <USART2_MspInit+0xd0>)
 8006538:	2200      	movs	r2, #0
 800653a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <USART2_MspInit+0xd0>)
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <USART2_MspInit+0xd0>)
 8006544:	2200      	movs	r2, #0
 8006546:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <USART2_MspInit+0xd0>)
 800654a:	2200      	movs	r2, #0
 800654c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <USART2_MspInit+0xd0>)
 8006550:	2220      	movs	r2, #32
 8006552:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <USART2_MspInit+0xd0>)
 8006556:	2200      	movs	r2, #0
 8006558:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800655a:	4807      	ldr	r0, [pc, #28]	; (8006578 <USART2_MspInit+0xd0>)
 800655c:	f000 fa88 	bl	8006a70 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a05      	ldr	r2, [pc, #20]	; (8006578 <USART2_MspInit+0xd0>)
 8006564:	671a      	str	r2, [r3, #112]	; 0x70
 8006566:	4a04      	ldr	r2, [pc, #16]	; (8006578 <USART2_MspInit+0xd0>)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800656c:	bf00      	nop
 800656e:	3728      	adds	r7, #40	; 0x28
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	20001500 	.word	0x20001500
 800657c:	4002006c 	.word	0x4002006c

08006580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <HAL_Init+0x3c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a0b      	ldr	r2, [pc, #44]	; (80065bc <HAL_Init+0x3c>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006596:	2003      	movs	r0, #3
 8006598:	f000 f93e 	bl	8006818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800659c:	2000      	movs	r0, #0
 800659e:	f000 f80f 	bl	80065c0 <HAL_InitTick>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	e001      	b.n	80065b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065ae:	f7fc f843 	bl	8002638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80065b2:	79fb      	ldrb	r3, [r7, #7]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40022000 	.word	0x40022000

080065c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_InitTick+0x6c>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d023      	beq.n	800661c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <HAL_InitTick+0x70>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_InitTick+0x6c>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 f949 	bl	8006882 <HAL_SYSTICK_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10f      	bne.n	8006616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b0f      	cmp	r3, #15
 80065fa:	d809      	bhi.n	8006610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065fc:	2200      	movs	r2, #0
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	f000 f913 	bl	800682e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006608:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <HAL_InitTick+0x74>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e007      	b.n	8006620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	e004      	b.n	8006620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e001      	b.n	8006620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200000ec 	.word	0x200000ec
 8006630:	2000000c 	.word	0x2000000c
 8006634:	200000e8 	.word	0x200000e8

08006638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_IncTick+0x20>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_IncTick+0x24>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4413      	add	r3, r2
 8006648:	4a04      	ldr	r2, [pc, #16]	; (800665c <HAL_IncTick+0x24>)
 800664a:	6013      	str	r3, [r2, #0]
}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	200000ec 	.word	0x200000ec
 800665c:	200015cc 	.word	0x200015cc

08006660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return uwTick;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_GetTick+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200015cc 	.word	0x200015cc

08006678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006688:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <__NVIC_SetPriorityGrouping+0x44>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006694:	4013      	ands	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066aa:	4a04      	ldr	r2, [pc, #16]	; (80066bc <__NVIC_SetPriorityGrouping+0x44>)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	60d3      	str	r3, [r2, #12]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	e000ed00 	.word	0xe000ed00

080066c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066c4:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <__NVIC_GetPriorityGrouping+0x18>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	0a1b      	lsrs	r3, r3, #8
 80066ca:	f003 0307 	and.w	r3, r3, #7
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	e000ed00 	.word	0xe000ed00

080066dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db0b      	blt.n	8006706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	f003 021f 	and.w	r2, r3, #31
 80066f4:	4907      	ldr	r1, [pc, #28]	; (8006714 <__NVIC_EnableIRQ+0x38>)
 80066f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2001      	movs	r0, #1
 80066fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	e000e100 	.word	0xe000e100

08006718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006728:	2b00      	cmp	r3, #0
 800672a:	db0a      	blt.n	8006742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	490c      	ldr	r1, [pc, #48]	; (8006764 <__NVIC_SetPriority+0x4c>)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	0112      	lsls	r2, r2, #4
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	440b      	add	r3, r1
 800673c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006740:	e00a      	b.n	8006758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	4908      	ldr	r1, [pc, #32]	; (8006768 <__NVIC_SetPriority+0x50>)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	3b04      	subs	r3, #4
 8006750:	0112      	lsls	r2, r2, #4
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	440b      	add	r3, r1
 8006756:	761a      	strb	r2, [r3, #24]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	e000e100 	.word	0xe000e100
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f1c3 0307 	rsb	r3, r3, #7
 8006786:	2b04      	cmp	r3, #4
 8006788:	bf28      	it	cs
 800678a:	2304      	movcs	r3, #4
 800678c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3304      	adds	r3, #4
 8006792:	2b06      	cmp	r3, #6
 8006794:	d902      	bls.n	800679c <NVIC_EncodePriority+0x30>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3b03      	subs	r3, #3
 800679a:	e000      	b.n	800679e <NVIC_EncodePriority+0x32>
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43da      	mvns	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	401a      	ands	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067b4:	f04f 31ff 	mov.w	r1, #4294967295
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	fa01 f303 	lsl.w	r3, r1, r3
 80067be:	43d9      	mvns	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067c4:	4313      	orrs	r3, r2
         );
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3724      	adds	r7, #36	; 0x24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3b01      	subs	r3, #1
 80067e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067e4:	d301      	bcc.n	80067ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067e6:	2301      	movs	r3, #1
 80067e8:	e00f      	b.n	800680a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067ea:	4a0a      	ldr	r2, [pc, #40]	; (8006814 <SysTick_Config+0x40>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067f2:	210f      	movs	r1, #15
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	f7ff ff8e 	bl	8006718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <SysTick_Config+0x40>)
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006802:	4b04      	ldr	r3, [pc, #16]	; (8006814 <SysTick_Config+0x40>)
 8006804:	2207      	movs	r2, #7
 8006806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	e000e010 	.word	0xe000e010

08006818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ff29 	bl	8006678 <__NVIC_SetPriorityGrouping>
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006840:	f7ff ff3e 	bl	80066c0 <__NVIC_GetPriorityGrouping>
 8006844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	6978      	ldr	r0, [r7, #20]
 800684c:	f7ff ff8e 	bl	800676c <NVIC_EncodePriority>
 8006850:	4602      	mov	r2, r0
 8006852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff ff5d 	bl	8006718 <__NVIC_SetPriority>
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	4603      	mov	r3, r0
 800686e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff31 	bl	80066dc <__NVIC_EnableIRQ>
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff ffa2 	bl	80067d4 <SysTick_Config>
 8006890:	4603      	mov	r3, r0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e054      	b.n	8006958 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7f5b      	ldrb	r3, [r3, #29]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb fa70 	bl	8001da4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10c      	bne.n	80068ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_CRC_Init+0xc4>)
 80068d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0218 	bic.w	r2, r2, #24
 80068e8:	609a      	str	r2, [r3, #8]
 80068ea:	e00c      	b.n	8006906 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6899      	ldr	r1, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f834 	bl	8006964 <HAL_CRCEx_Polynomial_Set>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e028      	b.n	8006958 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	795b      	ldrb	r3, [r3, #5]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	611a      	str	r2, [r3, #16]
 8006918:	e004      	b.n	8006924 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6912      	ldr	r2, [r2, #16]
 8006922:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	04c11db7 	.word	0x04c11db7

08006964 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006974:	231f      	movs	r3, #31
 8006976:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006978:	bf00      	nop
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1e5a      	subs	r2, r3, #1
 800697e:	613a      	str	r2, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <HAL_CRCEx_Polynomial_Set+0x34>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_CRCEx_Polynomial_Set+0x16>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b18      	cmp	r3, #24
 800699c:	d846      	bhi.n	8006a2c <HAL_CRCEx_Polynomial_Set+0xc8>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	08006a33 	.word	0x08006a33
 80069a8:	08006a2d 	.word	0x08006a2d
 80069ac:	08006a2d 	.word	0x08006a2d
 80069b0:	08006a2d 	.word	0x08006a2d
 80069b4:	08006a2d 	.word	0x08006a2d
 80069b8:	08006a2d 	.word	0x08006a2d
 80069bc:	08006a2d 	.word	0x08006a2d
 80069c0:	08006a2d 	.word	0x08006a2d
 80069c4:	08006a21 	.word	0x08006a21
 80069c8:	08006a2d 	.word	0x08006a2d
 80069cc:	08006a2d 	.word	0x08006a2d
 80069d0:	08006a2d 	.word	0x08006a2d
 80069d4:	08006a2d 	.word	0x08006a2d
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006a2d 	.word	0x08006a2d
 80069e0:	08006a2d 	.word	0x08006a2d
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a2d 	.word	0x08006a2d
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a09 	.word	0x08006a09
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d913      	bls.n	8006a36 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a12:	e010      	b.n	8006a36 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b07      	cmp	r3, #7
 8006a18:	d90f      	bls.n	8006a3a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a1e:	e00c      	b.n	8006a3a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b0f      	cmp	r3, #15
 8006a24:	d90b      	bls.n	8006a3e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a2a:	e008      	b.n	8006a3e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a30:	e006      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a3e:	bf00      	nop
  }
  if (status == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f023 0118 	bic.w	r1, r3, #24
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e098      	b.n	8006bb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	4b4d      	ldr	r3, [pc, #308]	; (8006bc0 <HAL_DMA_Init+0x150>)
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d80f      	bhi.n	8006aae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	4b4b      	ldr	r3, [pc, #300]	; (8006bc4 <HAL_DMA_Init+0x154>)
 8006a96:	4413      	add	r3, r2
 8006a98:	4a4b      	ldr	r2, [pc, #300]	; (8006bc8 <HAL_DMA_Init+0x158>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	009a      	lsls	r2, r3, #2
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a48      	ldr	r2, [pc, #288]	; (8006bcc <HAL_DMA_Init+0x15c>)
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8006aac:	e00e      	b.n	8006acc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b46      	ldr	r3, [pc, #280]	; (8006bd0 <HAL_DMA_Init+0x160>)
 8006ab6:	4413      	add	r3, r2
 8006ab8:	4a43      	ldr	r2, [pc, #268]	; (8006bc8 <HAL_DMA_Init+0x158>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	091b      	lsrs	r3, r3, #4
 8006ac0:	009a      	lsls	r2, r3, #2
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a42      	ldr	r2, [pc, #264]	; (8006bd4 <HAL_DMA_Init+0x164>)
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b26:	d039      	beq.n	8006b9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <HAL_DMA_Init+0x15c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d11a      	bne.n	8006b68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006b32:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <HAL_DMA_Init+0x168>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	f003 031c 	and.w	r3, r3, #28
 8006b3e:	210f      	movs	r1, #15
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	4924      	ldr	r1, [pc, #144]	; (8006bd8 <HAL_DMA_Init+0x168>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006b4c:	4b22      	ldr	r3, [pc, #136]	; (8006bd8 <HAL_DMA_Init+0x168>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	f003 031c 	and.w	r3, r3, #28
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	491d      	ldr	r1, [pc, #116]	; (8006bd8 <HAL_DMA_Init+0x168>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]
 8006b66:	e019      	b.n	8006b9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006b68:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <HAL_DMA_Init+0x16c>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b70:	f003 031c 	and.w	r3, r3, #28
 8006b74:	210f      	movs	r1, #15
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	4917      	ldr	r1, [pc, #92]	; (8006bdc <HAL_DMA_Init+0x16c>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <HAL_DMA_Init+0x16c>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f003 031c 	and.w	r3, r3, #28
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	4911      	ldr	r1, [pc, #68]	; (8006bdc <HAL_DMA_Init+0x16c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40020407 	.word	0x40020407
 8006bc4:	bffdfff8 	.word	0xbffdfff8
 8006bc8:	cccccccd 	.word	0xcccccccd
 8006bcc:	40020000 	.word	0x40020000
 8006bd0:	bffdfbf8 	.word	0xbffdfbf8
 8006bd4:	40020400 	.word	0x40020400
 8006bd8:	400200a8 	.word	0x400200a8
 8006bdc:	400204a8 	.word	0x400204a8

08006be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_DMA_Start_IT+0x20>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e04b      	b.n	8006c98 <HAL_DMA_Start_IT+0xb8>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d13a      	bne.n	8006c8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f8e0 	bl	8006dfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 020e 	orr.w	r2, r2, #14
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e00f      	b.n	8006c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0204 	bic.w	r2, r2, #4
 8006c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 020a 	orr.w	r2, r2, #10
 8006c76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e005      	b.n	8006c96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbc:	f003 031c 	and.w	r3, r3, #28
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d026      	beq.n	8006d1a <HAL_DMA_IRQHandler+0x7a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d021      	beq.n	8006d1a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d107      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0204 	bic.w	r2, r2, #4
 8006cf2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf8:	f003 021c 	and.w	r2, r3, #28
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	2104      	movs	r1, #4
 8006d02:	fa01 f202 	lsl.w	r2, r1, r2
 8006d06:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d071      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006d18:	e06c      	b.n	8006df4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f003 031c 	and.w	r3, r3, #28
 8006d22:	2202      	movs	r2, #2
 8006d24:	409a      	lsls	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d02e      	beq.n	8006d8c <HAL_DMA_IRQHandler+0xec>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d029      	beq.n	8006d8c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10b      	bne.n	8006d5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 020a 	bic.w	r2, r2, #10
 8006d54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f003 021c 	and.w	r2, r3, #28
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d038      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d8a:	e033      	b.n	8006df4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f003 031c 	and.w	r3, r3, #28
 8006d94:	2208      	movs	r2, #8
 8006d96:	409a      	lsls	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02a      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x156>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d025      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 020e 	bic.w	r2, r2, #14
 8006db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f003 021c 	and.w	r2, r3, #28
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
}
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e10:	f003 021c 	and.w	r2, r3, #28
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	2101      	movs	r1, #1
 8006e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d108      	bne.n	8006e42 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e40:	e007      	b.n	8006e52 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]
}
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e6e:	e17f      	b.n	8007170 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	2101      	movs	r1, #1
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8171 	beq.w	800716a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d005      	beq.n	8006ea0 <HAL_GPIO_Init+0x40>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d130      	bne.n	8006f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	2203      	movs	r2, #3
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0201 	and.w	r2, r3, #1
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d118      	bne.n	8006f40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006f14:	2201      	movs	r2, #1
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	08db      	lsrs	r3, r3, #3
 8006f2a:	f003 0201 	and.w	r2, r3, #1
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d017      	beq.n	8006f7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	2203      	movs	r2, #3
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4013      	ands	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d123      	bne.n	8006fd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	08da      	lsrs	r2, r3, #3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3208      	adds	r2, #8
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	220f      	movs	r2, #15
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	08da      	lsrs	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3208      	adds	r2, #8
 8006fca:	6939      	ldr	r1, [r7, #16]
 8006fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	2203      	movs	r2, #3
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f003 0203 	and.w	r2, r3, #3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80ac 	beq.w	800716a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007012:	4b5f      	ldr	r3, [pc, #380]	; (8007190 <HAL_GPIO_Init+0x330>)
 8007014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007016:	4a5e      	ldr	r2, [pc, #376]	; (8007190 <HAL_GPIO_Init+0x330>)
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	6613      	str	r3, [r2, #96]	; 0x60
 800701e:	4b5c      	ldr	r3, [pc, #368]	; (8007190 <HAL_GPIO_Init+0x330>)
 8007020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	60bb      	str	r3, [r7, #8]
 8007028:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800702a:	4a5a      	ldr	r2, [pc, #360]	; (8007194 <HAL_GPIO_Init+0x334>)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	089b      	lsrs	r3, r3, #2
 8007030:	3302      	adds	r3, #2
 8007032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007036:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	220f      	movs	r2, #15
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	43db      	mvns	r3, r3
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4013      	ands	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007054:	d025      	beq.n	80070a2 <HAL_GPIO_Init+0x242>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a4f      	ldr	r2, [pc, #316]	; (8007198 <HAL_GPIO_Init+0x338>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01f      	beq.n	800709e <HAL_GPIO_Init+0x23e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a4e      	ldr	r2, [pc, #312]	; (800719c <HAL_GPIO_Init+0x33c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d019      	beq.n	800709a <HAL_GPIO_Init+0x23a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a4d      	ldr	r2, [pc, #308]	; (80071a0 <HAL_GPIO_Init+0x340>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_GPIO_Init+0x236>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a4c      	ldr	r2, [pc, #304]	; (80071a4 <HAL_GPIO_Init+0x344>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00d      	beq.n	8007092 <HAL_GPIO_Init+0x232>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a4b      	ldr	r2, [pc, #300]	; (80071a8 <HAL_GPIO_Init+0x348>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <HAL_GPIO_Init+0x22e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a4a      	ldr	r2, [pc, #296]	; (80071ac <HAL_GPIO_Init+0x34c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_GPIO_Init+0x22a>
 8007086:	2306      	movs	r3, #6
 8007088:	e00c      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 800708a:	2307      	movs	r3, #7
 800708c:	e00a      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 800708e:	2305      	movs	r3, #5
 8007090:	e008      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 8007092:	2304      	movs	r3, #4
 8007094:	e006      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 8007096:	2303      	movs	r3, #3
 8007098:	e004      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 800709a:	2302      	movs	r3, #2
 800709c:	e002      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_GPIO_Init+0x244>
 80070a2:	2300      	movs	r3, #0
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	f002 0203 	and.w	r2, r2, #3
 80070aa:	0092      	lsls	r2, r2, #2
 80070ac:	4093      	lsls	r3, r2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80070b4:	4937      	ldr	r1, [pc, #220]	; (8007194 <HAL_GPIO_Init+0x334>)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	089b      	lsrs	r3, r3, #2
 80070ba:	3302      	adds	r3, #2
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070c2:	4b3b      	ldr	r3, [pc, #236]	; (80071b0 <HAL_GPIO_Init+0x350>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	43db      	mvns	r3, r3
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4013      	ands	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070e6:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <HAL_GPIO_Init+0x350>)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <HAL_GPIO_Init+0x350>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	43db      	mvns	r3, r3
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4013      	ands	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007110:	4a27      	ldr	r2, [pc, #156]	; (80071b0 <HAL_GPIO_Init+0x350>)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007116:	4b26      	ldr	r3, [pc, #152]	; (80071b0 <HAL_GPIO_Init+0x350>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	43db      	mvns	r3, r3
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4013      	ands	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800713a:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <HAL_GPIO_Init+0x350>)
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007140:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <HAL_GPIO_Init+0x350>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	43db      	mvns	r3, r3
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4013      	ands	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007164:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <HAL_GPIO_Init+0x350>)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	3301      	adds	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	f47f ae78 	bne.w	8006e70 <HAL_GPIO_Init+0x10>
  }
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40021000 	.word	0x40021000
 8007194:	40010000 	.word	0x40010000
 8007198:	48000400 	.word	0x48000400
 800719c:	48000800 	.word	0x48000800
 80071a0:	48000c00 	.word	0x48000c00
 80071a4:	48001000 	.word	0x48001000
 80071a8:	48001400 	.word	0x48001400
 80071ac:	48001800 	.word	0x48001800
 80071b0:	40010400 	.word	0x40010400

080071b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80071c2:	e0cd      	b.n	8007360 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80071c4:	2201      	movs	r2, #1
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	4013      	ands	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80c0 	beq.w	800735a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80071da:	4a68      	ldr	r2, [pc, #416]	; (800737c <HAL_GPIO_DeInit+0x1c8>)
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	089b      	lsrs	r3, r3, #2
 80071e0:	3302      	adds	r3, #2
 80071e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	220f      	movs	r2, #15
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4013      	ands	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007202:	d025      	beq.n	8007250 <HAL_GPIO_DeInit+0x9c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a5e      	ldr	r2, [pc, #376]	; (8007380 <HAL_GPIO_DeInit+0x1cc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01f      	beq.n	800724c <HAL_GPIO_DeInit+0x98>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a5d      	ldr	r2, [pc, #372]	; (8007384 <HAL_GPIO_DeInit+0x1d0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d019      	beq.n	8007248 <HAL_GPIO_DeInit+0x94>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_GPIO_DeInit+0x1d4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d013      	beq.n	8007244 <HAL_GPIO_DeInit+0x90>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a5b      	ldr	r2, [pc, #364]	; (800738c <HAL_GPIO_DeInit+0x1d8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00d      	beq.n	8007240 <HAL_GPIO_DeInit+0x8c>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a5a      	ldr	r2, [pc, #360]	; (8007390 <HAL_GPIO_DeInit+0x1dc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d007      	beq.n	800723c <HAL_GPIO_DeInit+0x88>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a59      	ldr	r2, [pc, #356]	; (8007394 <HAL_GPIO_DeInit+0x1e0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d101      	bne.n	8007238 <HAL_GPIO_DeInit+0x84>
 8007234:	2306      	movs	r3, #6
 8007236:	e00c      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 8007238:	2307      	movs	r3, #7
 800723a:	e00a      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 800723c:	2305      	movs	r3, #5
 800723e:	e008      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 8007240:	2304      	movs	r3, #4
 8007242:	e006      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 8007244:	2303      	movs	r3, #3
 8007246:	e004      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 8007248:	2302      	movs	r3, #2
 800724a:	e002      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <HAL_GPIO_DeInit+0x9e>
 8007250:	2300      	movs	r3, #0
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	f002 0203 	and.w	r2, r2, #3
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	4093      	lsls	r3, r2
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	429a      	cmp	r2, r3
 8007260:	d132      	bne.n	80072c8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007262:	4b4d      	ldr	r3, [pc, #308]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	43db      	mvns	r3, r3
 800726a:	494b      	ldr	r1, [pc, #300]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 800726c:	4013      	ands	r3, r2
 800726e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007270:	4b49      	ldr	r3, [pc, #292]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	43db      	mvns	r3, r3
 8007278:	4947      	ldr	r1, [pc, #284]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 800727a:	4013      	ands	r3, r2
 800727c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800727e:	4b46      	ldr	r3, [pc, #280]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	43db      	mvns	r3, r3
 8007286:	4944      	ldr	r1, [pc, #272]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 8007288:	4013      	ands	r3, r2
 800728a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800728c:	4b42      	ldr	r3, [pc, #264]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	43db      	mvns	r3, r3
 8007294:	4940      	ldr	r1, [pc, #256]	; (8007398 <HAL_GPIO_DeInit+0x1e4>)
 8007296:	4013      	ands	r3, r2
 8007298:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	220f      	movs	r2, #15
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80072aa:	4a34      	ldr	r2, [pc, #208]	; (800737c <HAL_GPIO_DeInit+0x1c8>)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	089b      	lsrs	r3, r3, #2
 80072b0:	3302      	adds	r3, #2
 80072b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	43da      	mvns	r2, r3
 80072ba:	4830      	ldr	r0, [pc, #192]	; (800737c <HAL_GPIO_DeInit+0x1c8>)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	400a      	ands	r2, r1
 80072c2:	3302      	adds	r3, #2
 80072c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	2103      	movs	r1, #3
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	08da      	lsrs	r2, r3, #3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3208      	adds	r2, #8
 80072e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	220f      	movs	r2, #15
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	08d2      	lsrs	r2, r2, #3
 80072fc:	4019      	ands	r1, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3208      	adds	r2, #8
 8007302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	2103      	movs	r1, #3
 8007310:	fa01 f303 	lsl.w	r3, r1, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	401a      	ands	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	2101      	movs	r1, #1
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	2103      	movs	r1, #3
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	43db      	mvns	r3, r3
 8007340:	401a      	ands	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	2101      	movs	r1, #1
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	401a      	ands	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	3301      	adds	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	fa22 f303 	lsr.w	r3, r2, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f af2b 	bne.w	80071c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40010000 	.word	0x40010000
 8007380:	48000400 	.word	0x48000400
 8007384:	48000800 	.word	0x48000800
 8007388:	48000c00 	.word	0x48000c00
 800738c:	48001000 	.word	0x48001000
 8007390:	48001400 	.word	0x48001400
 8007394:	48001800 	.word	0x48001800
 8007398:	40010400 	.word	0x40010400

0800739c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	807b      	strh	r3, [r7, #2]
 80073a8:	4613      	mov	r3, r2
 80073aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073ac:	787b      	ldrb	r3, [r7, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073b2:	887a      	ldrh	r2, [r7, #2]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073b8:	e002      	b.n	80073c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073ba:	887a      	ldrh	r2, [r7, #2]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80073d6:	4b08      	ldr	r3, [pc, #32]	; (80073f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	4013      	ands	r3, r2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073e2:	4a05      	ldr	r2, [pc, #20]	; (80073f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fa ffa4 	bl	8002338 <HAL_GPIO_EXTI_Callback>
  }
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40010400 	.word	0x40010400

080073fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e081      	b.n	8007512 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fa fdaa 	bl	8001f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	; 0x24
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800744c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800745c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007472:	609a      	str	r2, [r3, #8]
 8007474:	e006      	b.n	8007484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d104      	bne.n	8007496 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69d9      	ldr	r1, [r3, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e021      	b.n	8007570 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2224      	movs	r2, #36	; 0x24
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fa fd77 	bl	8002038 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	461a      	mov	r2, r3
 8007586:	4603      	mov	r3, r0
 8007588:	817b      	strh	r3, [r7, #10]
 800758a:	460b      	mov	r3, r1
 800758c:	813b      	strh	r3, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b20      	cmp	r3, #32
 800759c:	f040 80f9 	bne.w	8007792 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_I2C_Mem_Write+0x34>
 80075a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d105      	bne.n	80075b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0ed      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_I2C_Mem_Write+0x4e>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e0e6      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075ce:	f7ff f847 	bl	8006660 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2319      	movs	r3, #25
 80075da:	2201      	movs	r2, #1
 80075dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fadd 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0d1      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2221      	movs	r2, #33	; 0x21
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2240      	movs	r2, #64	; 0x40
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007618:	88f8      	ldrh	r0, [r7, #6]
 800761a:	893a      	ldrh	r2, [r7, #8]
 800761c:	8979      	ldrh	r1, [r7, #10]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4603      	mov	r3, r0
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f9ed 	bl	8007a08 <I2C_RequestMemoryWrite>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0a9      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007644:	b29b      	uxth	r3, r3
 8007646:	2bff      	cmp	r3, #255	; 0xff
 8007648:	d90e      	bls.n	8007668 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007654:	b2da      	uxtb	r2, r3
 8007656:	8979      	ldrh	r1, [r7, #10]
 8007658:	2300      	movs	r3, #0
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fc45 	bl	8007ef0 <I2C_TransferConfig>
 8007666:	e00f      	b.n	8007688 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	b2da      	uxtb	r2, r3
 8007678:	8979      	ldrh	r1, [r7, #10]
 800767a:	2300      	movs	r3, #0
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fc34 	bl	8007ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fac7 	bl	8007c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e07b      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d034      	beq.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d130      	bne.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2200      	movs	r2, #0
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa59 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e04d      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2bff      	cmp	r3, #255	; 0xff
 8007700:	d90e      	bls.n	8007720 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	8979      	ldrh	r1, [r7, #10]
 8007710:	2300      	movs	r3, #0
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fbe9 	bl	8007ef0 <I2C_TransferConfig>
 800771e:	e00f      	b.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	b2da      	uxtb	r2, r3
 8007730:	8979      	ldrh	r1, [r7, #10]
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fbd8 	bl	8007ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d19e      	bne.n	8007688 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 faa6 	bl	8007ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e01a      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2220      	movs	r2, #32
 8007764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6859      	ldr	r1, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <HAL_I2C_Mem_Write+0x224>)
 8007772:	400b      	ands	r3, r1
 8007774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	fe00e800 	.word	0xfe00e800

080077a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 80fd 	bne.w	80079c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_I2C_Mem_Read+0x34>
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0f1      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_I2C_Mem_Read+0x4e>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0ea      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077f6:	f7fe ff33 	bl	8006660 <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2319      	movs	r3, #25
 8007802:	2201      	movs	r2, #1
 8007804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f9c9 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0d5      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2222      	movs	r2, #34	; 0x22
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2240      	movs	r2, #64	; 0x40
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007840:	88f8      	ldrh	r0, [r7, #6]
 8007842:	893a      	ldrh	r2, [r7, #8]
 8007844:	8979      	ldrh	r1, [r7, #10]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4603      	mov	r3, r0
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f92d 	bl	8007ab0 <I2C_RequestMemoryRead>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0ad      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d90e      	bls.n	8007890 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	4b52      	ldr	r3, [pc, #328]	; (80079cc <HAL_I2C_Mem_Read+0x22c>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fb31 	bl	8007ef0 <I2C_TransferConfig>
 800788e:	e00f      	b.n	80078b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	4b4a      	ldr	r3, [pc, #296]	; (80079cc <HAL_I2C_Mem_Read+0x22c>)
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fb20 	bl	8007ef0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2200      	movs	r2, #0
 80078b8:	2104      	movs	r1, #4
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f970 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07c      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d034      	beq.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d130      	bne.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f941 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04d      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	2bff      	cmp	r3, #255	; 0xff
 8007930:	d90e      	bls.n	8007950 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793c:	b2da      	uxtb	r2, r3
 800793e:	8979      	ldrh	r1, [r7, #10]
 8007940:	2300      	movs	r3, #0
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fad1 	bl	8007ef0 <I2C_TransferConfig>
 800794e:	e00f      	b.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795e:	b2da      	uxtb	r2, r3
 8007960:	8979      	ldrh	r1, [r7, #10]
 8007962:	2300      	movs	r3, #0
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fac0 	bl	8007ef0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d19a      	bne.n	80078b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f98e 	bl	8007ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e01a      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2220      	movs	r2, #32
 8007994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_I2C_Mem_Read+0x230>)
 80079a2:	400b      	ands	r3, r1
 80079a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e000      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	80002400 	.word	0x80002400
 80079d0:	fe00e800 	.word	0xfe00e800

080079d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e2:	b2db      	uxtb	r3, r3
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	4608      	mov	r0, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	817b      	strh	r3, [r7, #10]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	813b      	strh	r3, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	8979      	ldrh	r1, [r7, #10]
 8007a28:	4b20      	ldr	r3, [pc, #128]	; (8007aac <I2C_RequestMemoryWrite+0xa4>)
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fa5d 	bl	8007ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f8f0 	bl	8007c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e02c      	b.n	8007aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d105      	bne.n	8007a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a50:	893b      	ldrh	r3, [r7, #8]
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	629a      	str	r2, [r3, #40]	; 0x28
 8007a5a:	e015      	b.n	8007a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a5c:	893b      	ldrh	r3, [r7, #8]
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	69b9      	ldr	r1, [r7, #24]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f8d6 	bl	8007c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e012      	b.n	8007aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a7e:	893b      	ldrh	r3, [r7, #8]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f884 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	80002000 	.word	0x80002000

08007ab0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	813b      	strh	r3, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	8979      	ldrh	r1, [r7, #10]
 8007ad0:	4b20      	ldr	r3, [pc, #128]	; (8007b54 <I2C_RequestMemoryRead+0xa4>)
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fa0a 	bl	8007ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	69b9      	ldr	r1, [r7, #24]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f89d 	bl	8007c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e02c      	b.n	8007b4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d105      	bne.n	8007b02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007af6:	893b      	ldrh	r3, [r7, #8]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
 8007b00:	e015      	b.n	8007b2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b02:	893b      	ldrh	r3, [r7, #8]
 8007b04:	0a1b      	lsrs	r3, r3, #8
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	69b9      	ldr	r1, [r7, #24]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f883 	bl	8007c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e012      	b.n	8007b4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2200      	movs	r2, #0
 8007b36:	2140      	movs	r1, #64	; 0x40
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f831 	bl	8007ba0 <I2C_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	80002000 	.word	0x80002000

08007b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d103      	bne.n	8007b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d007      	beq.n	8007b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	619a      	str	r2, [r3, #24]
  }
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bb0:	e022      	b.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d01e      	beq.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fe fd51 	bl	8006660 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d113      	bne.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd4:	f043 0220 	orr.w	r2, r3, #32
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e00f      	b.n	8007c18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4013      	ands	r3, r2
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	bf0c      	ite	eq
 8007c08:	2301      	moveq	r3, #1
 8007c0a:	2300      	movne	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d0cd      	beq.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c2c:	e02c      	b.n	8007c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f870 	bl	8007d18 <I2C_IsErrorOccurred>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e02a      	b.n	8007c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d01e      	beq.n	8007c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4a:	f7fe fd09 	bl	8006660 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d302      	bcc.n	8007c60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d113      	bne.n	8007c88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	f043 0220 	orr.w	r2, r3, #32
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e007      	b.n	8007c98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d1cb      	bne.n	8007c2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cac:	e028      	b.n	8007d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 f830 	bl	8007d18 <I2C_IsErrorOccurred>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e026      	b.n	8007d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc2:	f7fe fccd 	bl	8006660 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d302      	bcc.n	8007cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d113      	bne.n	8007d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e007      	b.n	8007d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d1cf      	bne.n	8007cae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d075      	beq.n	8007e30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d4c:	e056      	b.n	8007dfc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d052      	beq.n	8007dfc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d56:	f7fe fc83 	bl	8006660 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <I2C_IsErrorOccurred+0x54>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d147      	bne.n	8007dfc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d8e:	d12e      	bne.n	8007dee <I2C_IsErrorOccurred+0xd6>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d96:	d02a      	beq.n	8007dee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007d98:	7cfb      	ldrb	r3, [r7, #19]
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d027      	beq.n	8007dee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dac:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007dae:	f7fe fc57 	bl	8006660 <HAL_GetTick>
 8007db2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db4:	e01b      	b.n	8007dee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007db6:	f7fe fc53 	bl	8006660 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b19      	cmp	r3, #25
 8007dc2:	d914      	bls.n	8007dee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d1dc      	bne.n	8007db6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	d003      	beq.n	8007e12 <I2C_IsErrorOccurred+0xfa>
 8007e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d09d      	beq.n	8007d4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f043 0304 	orr.w	r3, r3, #4
 8007e28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f043 0308 	orr.w	r3, r3, #8
 8007e6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	f043 0302 	orr.w	r3, r3, #2
 8007e8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01c      	beq.n	8007ee0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff fe56 	bl	8007b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6859      	ldr	r1, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <I2C_IsErrorOccurred+0x1d4>)
 8007eb8:	400b      	ands	r3, r1
 8007eba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3728      	adds	r7, #40	; 0x28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	fe00e800 	.word	0xfe00e800

08007ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	817b      	strh	r3, [r7, #10]
 8007efe:	4613      	mov	r3, r2
 8007f00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f02:	897b      	ldrh	r3, [r7, #10]
 8007f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f08:	7a7b      	ldrb	r3, [r7, #9]
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f10:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f1e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	0d5b      	lsrs	r3, r3, #21
 8007f2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f2e:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <I2C_TransferConfig+0x60>)
 8007f30:	430b      	orrs	r3, r1
 8007f32:	43db      	mvns	r3, r3
 8007f34:	ea02 0103 	and.w	r1, r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	03ff63ff 	.word	0x03ff63ff

08007f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d138      	bne.n	8007fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e032      	b.n	8007fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	; 0x24
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6819      	ldr	r1, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d139      	bne.n	8008074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800800a:	2302      	movs	r3, #2
 800800c:	e033      	b.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2224      	movs	r2, #36	; 0x24
 800801a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800803c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <HAL_PWREx_GetVoltageRange+0x18>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008090:	4618      	mov	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40007000 	.word	0x40007000

080080a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ae:	d130      	bne.n	8008112 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80080b0:	4b23      	ldr	r3, [pc, #140]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d038      	beq.n	8008130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080be:	4b20      	ldr	r3, [pc, #128]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2232      	movs	r2, #50	; 0x32
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	0c9b      	lsrs	r3, r3, #18
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080e4:	e002      	b.n	80080ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080ec:	4b14      	ldr	r3, [pc, #80]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f8:	d102      	bne.n	8008100 <HAL_PWREx_ControlVoltageScaling+0x60>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f2      	bne.n	80080e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008100:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810c:	d110      	bne.n	8008130 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e00f      	b.n	8008132 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008112:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800811a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800811e:	d007      	beq.n	8008130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008128:	4a05      	ldr	r2, [pc, #20]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800812a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800812e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40007000 	.word	0x40007000
 8008144:	2000000c 	.word	0x2000000c
 8008148:	431bde83 	.word	0x431bde83

0800814c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e3d4      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800815e:	4ba1      	ldr	r3, [pc, #644]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008168:	4b9e      	ldr	r3, [pc, #632]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80e4 	beq.w	8008348 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <HAL_RCC_OscConfig+0x4a>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b0c      	cmp	r3, #12
 800818a:	f040 808b 	bne.w	80082a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b01      	cmp	r3, #1
 8008192:	f040 8087 	bne.w	80082a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008196:	4b93      	ldr	r3, [pc, #588]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_RCC_OscConfig+0x62>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e3ac      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1a      	ldr	r2, [r3, #32]
 80081b2:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <HAL_RCC_OscConfig+0x7c>
 80081be:	4b89      	ldr	r3, [pc, #548]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081c6:	e005      	b.n	80081d4 <HAL_RCC_OscConfig+0x88>
 80081c8:	4b86      	ldr	r3, [pc, #536]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d223      	bcs.n	8008220 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fd41 	bl	8008c64 <RCC_SetFlashLatencyFromMSIRange>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e38d      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ec:	4b7d      	ldr	r3, [pc, #500]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a7c      	ldr	r2, [pc, #496]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081f2:	f043 0308 	orr.w	r3, r3, #8
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	4b7a      	ldr	r3, [pc, #488]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	4977      	ldr	r1, [pc, #476]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008206:	4313      	orrs	r3, r2
 8008208:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800820a:	4b76      	ldr	r3, [pc, #472]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	4972      	ldr	r1, [pc, #456]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800821a:	4313      	orrs	r3, r2
 800821c:	604b      	str	r3, [r1, #4]
 800821e:	e025      	b.n	800826c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008220:	4b70      	ldr	r3, [pc, #448]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a6f      	ldr	r2, [pc, #444]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008226:	f043 0308 	orr.w	r3, r3, #8
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	4b6d      	ldr	r3, [pc, #436]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	496a      	ldr	r1, [pc, #424]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800823a:	4313      	orrs	r3, r2
 800823c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800823e:	4b69      	ldr	r3, [pc, #420]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	4965      	ldr	r1, [pc, #404]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800824e:	4313      	orrs	r3, r2
 8008250:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fd01 	bl	8008c64 <RCC_SetFlashLatencyFromMSIRange>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e34d      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800826c:	f000 fc36 	bl	8008adc <HAL_RCC_GetSysClockFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b5c      	ldr	r3, [pc, #368]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	495a      	ldr	r1, [pc, #360]	; (80083e8 <HAL_RCC_OscConfig+0x29c>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	fa22 f303 	lsr.w	r3, r2, r3
 8008288:	4a58      	ldr	r2, [pc, #352]	; (80083ec <HAL_RCC_OscConfig+0x2a0>)
 800828a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800828c:	4b58      	ldr	r3, [pc, #352]	; (80083f0 <HAL_RCC_OscConfig+0x2a4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe f995 	bl	80065c0 <HAL_InitTick>
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d052      	beq.n	8008346 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	e331      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d032      	beq.n	8008312 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082ac:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a4c      	ldr	r2, [pc, #304]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082b8:	f7fe f9d2 	bl	8006660 <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082c0:	f7fe f9ce 	bl	8006660 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e31a      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082d2:	4b44      	ldr	r3, [pc, #272]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082de:	4b41      	ldr	r3, [pc, #260]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a40      	ldr	r2, [pc, #256]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082e4:	f043 0308 	orr.w	r3, r3, #8
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b3e      	ldr	r3, [pc, #248]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	493b      	ldr	r1, [pc, #236]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082fc:	4b39      	ldr	r3, [pc, #228]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	4936      	ldr	r1, [pc, #216]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800830c:	4313      	orrs	r3, r2
 800830e:	604b      	str	r3, [r1, #4]
 8008310:	e01a      	b.n	8008348 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008312:	4b34      	ldr	r3, [pc, #208]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a33      	ldr	r2, [pc, #204]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800831e:	f7fe f99f 	bl	8006660 <HAL_GetTick>
 8008322:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008326:	f7fe f99b 	bl	8006660 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e2e7      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008338:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f0      	bne.n	8008326 <HAL_RCC_OscConfig+0x1da>
 8008344:	e000      	b.n	8008348 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008346:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d074      	beq.n	800843e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b08      	cmp	r3, #8
 8008358:	d005      	beq.n	8008366 <HAL_RCC_OscConfig+0x21a>
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b0c      	cmp	r3, #12
 800835e:	d10e      	bne.n	800837e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d10b      	bne.n	800837e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008366:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d064      	beq.n	800843c <HAL_RCC_OscConfig+0x2f0>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d160      	bne.n	800843c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e2c4      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008386:	d106      	bne.n	8008396 <HAL_RCC_OscConfig+0x24a>
 8008388:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a15      	ldr	r2, [pc, #84]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 800838e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	e01d      	b.n	80083d2 <HAL_RCC_OscConfig+0x286>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800839e:	d10c      	bne.n	80083ba <HAL_RCC_OscConfig+0x26e>
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a0f      	ldr	r2, [pc, #60]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	e00b      	b.n	80083d2 <HAL_RCC_OscConfig+0x286>
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a09      	ldr	r2, [pc, #36]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <HAL_RCC_OscConfig+0x298>)
 80083cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01c      	beq.n	8008414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fe f941 	bl	8006660 <HAL_GetTick>
 80083de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083e0:	e011      	b.n	8008406 <HAL_RCC_OscConfig+0x2ba>
 80083e2:	bf00      	nop
 80083e4:	40021000 	.word	0x40021000
 80083e8:	0801a984 	.word	0x0801a984
 80083ec:	2000000c 	.word	0x2000000c
 80083f0:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083f4:	f7fe f934 	bl	8006660 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b64      	cmp	r3, #100	; 0x64
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e280      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008406:	4baf      	ldr	r3, [pc, #700]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f0      	beq.n	80083f4 <HAL_RCC_OscConfig+0x2a8>
 8008412:	e014      	b.n	800843e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008414:	f7fe f924 	bl	8006660 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800841c:	f7fe f920 	bl	8006660 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b64      	cmp	r3, #100	; 0x64
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e26c      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800842e:	4ba5      	ldr	r3, [pc, #660]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f0      	bne.n	800841c <HAL_RCC_OscConfig+0x2d0>
 800843a:	e000      	b.n	800843e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800843c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d060      	beq.n	800850c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d005      	beq.n	800845c <HAL_RCC_OscConfig+0x310>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d119      	bne.n	800848a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d116      	bne.n	800848a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800845c:	4b99      	ldr	r3, [pc, #612]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_RCC_OscConfig+0x328>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e249      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008474:	4b93      	ldr	r3, [pc, #588]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	061b      	lsls	r3, r3, #24
 8008482:	4990      	ldr	r1, [pc, #576]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008484:	4313      	orrs	r3, r2
 8008486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008488:	e040      	b.n	800850c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d023      	beq.n	80084da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008492:	4b8c      	ldr	r3, [pc, #560]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a8b      	ldr	r2, [pc, #556]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849e:	f7fe f8df 	bl	8006660 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a6:	f7fe f8db 	bl	8006660 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e227      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b8:	4b82      	ldr	r3, [pc, #520]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c4:	4b7f      	ldr	r3, [pc, #508]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	497c      	ldr	r1, [pc, #496]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	604b      	str	r3, [r1, #4]
 80084d8:	e018      	b.n	800850c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084da:	4b7a      	ldr	r3, [pc, #488]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a79      	ldr	r2, [pc, #484]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80084e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e6:	f7fe f8bb 	bl	8006660 <HAL_GetTick>
 80084ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084ec:	e008      	b.n	8008500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ee:	f7fe f8b7 	bl	8006660 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e203      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008500:	4b70      	ldr	r3, [pc, #448]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f0      	bne.n	80084ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d03c      	beq.n	8008592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01c      	beq.n	800855a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008520:	4b68      	ldr	r3, [pc, #416]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008526:	4a67      	ldr	r2, [pc, #412]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fe f896 	bl	8006660 <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008538:	f7fe f892 	bl	8006660 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e1de      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800854a:	4b5e      	ldr	r3, [pc, #376]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800854c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ef      	beq.n	8008538 <HAL_RCC_OscConfig+0x3ec>
 8008558:	e01b      	b.n	8008592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800855a:	4b5a      	ldr	r3, [pc, #360]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800855c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008560:	4a58      	ldr	r2, [pc, #352]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800856a:	f7fe f879 	bl	8006660 <HAL_GetTick>
 800856e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008572:	f7fe f875 	bl	8006660 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e1c1      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008584:	4b4f      	ldr	r3, [pc, #316]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1ef      	bne.n	8008572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80a6 	beq.w	80086ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085a0:	2300      	movs	r3, #0
 80085a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085a4:	4b47      	ldr	r3, [pc, #284]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085b0:	4b44      	ldr	r3, [pc, #272]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80085b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b4:	4a43      	ldr	r2, [pc, #268]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	6593      	str	r3, [r2, #88]	; 0x58
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 80085be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c8:	2301      	movs	r3, #1
 80085ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085cc:	4b3e      	ldr	r3, [pc, #248]	; (80086c8 <HAL_RCC_OscConfig+0x57c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d118      	bne.n	800860a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d8:	4b3b      	ldr	r3, [pc, #236]	; (80086c8 <HAL_RCC_OscConfig+0x57c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3a      	ldr	r2, [pc, #232]	; (80086c8 <HAL_RCC_OscConfig+0x57c>)
 80085de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085e4:	f7fe f83c 	bl	8006660 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ec:	f7fe f838 	bl	8006660 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e184      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085fe:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <HAL_RCC_OscConfig+0x57c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d108      	bne.n	8008624 <HAL_RCC_OscConfig+0x4d8>
 8008612:	4b2c      	ldr	r3, [pc, #176]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	4a2a      	ldr	r2, [pc, #168]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008622:	e024      	b.n	800866e <HAL_RCC_OscConfig+0x522>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b05      	cmp	r3, #5
 800862a:	d110      	bne.n	800864e <HAL_RCC_OscConfig+0x502>
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	4a24      	ldr	r2, [pc, #144]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008634:	f043 0304 	orr.w	r3, r3, #4
 8008638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800863c:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800864c:	e00f      	b.n	800866e <HAL_RCC_OscConfig+0x522>
 800864e:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800865e:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	4a17      	ldr	r2, [pc, #92]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008666:	f023 0304 	bic.w	r3, r3, #4
 800866a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d016      	beq.n	80086a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008676:	f7fd fff3 	bl	8006660 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800867c:	e00a      	b.n	8008694 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800867e:	f7fd ffef 	bl	8006660 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	f241 3288 	movw	r2, #5000	; 0x1388
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e139      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <HAL_RCC_OscConfig+0x578>)
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0ed      	beq.n	800867e <HAL_RCC_OscConfig+0x532>
 80086a2:	e01a      	b.n	80086da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a4:	f7fd ffdc 	bl	8006660 <HAL_GetTick>
 80086a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086aa:	e00f      	b.n	80086cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ac:	f7fd ffd8 	bl	8006660 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d906      	bls.n	80086cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e122      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
 80086c2:	bf00      	nop
 80086c4:	40021000 	.word	0x40021000
 80086c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086cc:	4b90      	ldr	r3, [pc, #576]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80086ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e8      	bne.n	80086ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086da:	7ffb      	ldrb	r3, [r7, #31]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e0:	4b8b      	ldr	r3, [pc, #556]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	4a8a      	ldr	r2, [pc, #552]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80086e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 8108 	beq.w	8008906 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	f040 80d0 	bne.w	80088a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008700:	4b83      	ldr	r3, [pc, #524]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f003 0203 	and.w	r2, r3, #3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	429a      	cmp	r2, r3
 8008712:	d130      	bne.n	8008776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	3b01      	subs	r3, #1
 8008720:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008722:	429a      	cmp	r2, r3
 8008724:	d127      	bne.n	8008776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008730:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008732:	429a      	cmp	r2, r3
 8008734:	d11f      	bne.n	8008776 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008740:	2a07      	cmp	r2, #7
 8008742:	bf14      	ite	ne
 8008744:	2201      	movne	r2, #1
 8008746:	2200      	moveq	r2, #0
 8008748:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800874a:	4293      	cmp	r3, r2
 800874c:	d113      	bne.n	8008776 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	3b01      	subs	r3, #1
 800875c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800875e:	429a      	cmp	r2, r3
 8008760:	d109      	bne.n	8008776 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	3b01      	subs	r3, #1
 8008770:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008772:	429a      	cmp	r2, r3
 8008774:	d06e      	beq.n	8008854 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b0c      	cmp	r3, #12
 800877a:	d069      	beq.n	8008850 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800877c:	4b64      	ldr	r3, [pc, #400]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d105      	bne.n	8008794 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008788:	4b61      	ldr	r3, [pc, #388]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e0b7      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008798:	4b5d      	ldr	r3, [pc, #372]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5c      	ldr	r2, [pc, #368]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800879e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087a4:	f7fd ff5c 	bl	8006660 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ac:	f7fd ff58 	bl	8006660 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e0a4      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087be:	4b54      	ldr	r3, [pc, #336]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f0      	bne.n	80087ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087ca:	4b51      	ldr	r3, [pc, #324]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	4b51      	ldr	r3, [pc, #324]	; (8008914 <HAL_RCC_OscConfig+0x7c8>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087da:	3a01      	subs	r2, #1
 80087dc:	0112      	lsls	r2, r2, #4
 80087de:	4311      	orrs	r1, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087e4:	0212      	lsls	r2, r2, #8
 80087e6:	4311      	orrs	r1, r2
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087ec:	0852      	lsrs	r2, r2, #1
 80087ee:	3a01      	subs	r2, #1
 80087f0:	0552      	lsls	r2, r2, #21
 80087f2:	4311      	orrs	r1, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80087f8:	0852      	lsrs	r2, r2, #1
 80087fa:	3a01      	subs	r2, #1
 80087fc:	0652      	lsls	r2, r2, #25
 80087fe:	4311      	orrs	r1, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008804:	0912      	lsrs	r2, r2, #4
 8008806:	0452      	lsls	r2, r2, #17
 8008808:	430a      	orrs	r2, r1
 800880a:	4941      	ldr	r1, [pc, #260]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800880c:	4313      	orrs	r3, r2
 800880e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008810:	4b3f      	ldr	r3, [pc, #252]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a3e      	ldr	r2, [pc, #248]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800881a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800881c:	4b3c      	ldr	r3, [pc, #240]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	4a3b      	ldr	r2, [pc, #236]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008826:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008828:	f7fd ff1a 	bl	8006660 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008830:	f7fd ff16 	bl	8006660 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e062      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008842:	4b33      	ldr	r3, [pc, #204]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f0      	beq.n	8008830 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800884e:	e05a      	b.n	8008906 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e059      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008854:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d152      	bne.n	8008906 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008860:	4b2b      	ldr	r3, [pc, #172]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800886a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800886c:	4b28      	ldr	r3, [pc, #160]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4a27      	ldr	r2, [pc, #156]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008878:	f7fd fef2 	bl	8006660 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008880:	f7fd feee 	bl	8006660 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e03a      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008892:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0x734>
 800889e:	e032      	b.n	8008906 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b0c      	cmp	r3, #12
 80088a4:	d02d      	beq.n	8008902 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a6:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a19      	ldr	r2, [pc, #100]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80088b2:	4b17      	ldr	r3, [pc, #92]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80088be:	4b14      	ldr	r3, [pc, #80]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	4a13      	ldr	r2, [pc, #76]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80088ca:	4b11      	ldr	r3, [pc, #68]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	4a10      	ldr	r2, [pc, #64]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088da:	f7fd fec1 	bl	8006660 <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088e0:	e008      	b.n	80088f4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e2:	f7fd febd 	bl	8006660 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e009      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <HAL_RCC_OscConfig+0x7c4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <HAL_RCC_OscConfig+0x796>
 8008900:	e001      	b.n	8008906 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40021000 	.word	0x40021000
 8008914:	f99d808c 	.word	0xf99d808c

08008918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0c8      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800892c:	4b66      	ldr	r3, [pc, #408]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d910      	bls.n	800895c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800893a:	4b63      	ldr	r3, [pc, #396]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f023 0207 	bic.w	r2, r3, #7
 8008942:	4961      	ldr	r1, [pc, #388]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	4313      	orrs	r3, r2
 8008948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800894a:	4b5f      	ldr	r3, [pc, #380]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e0b0      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	d04c      	beq.n	8008a02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d107      	bne.n	8008980 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008970:	4b56      	ldr	r3, [pc, #344]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d121      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e09e      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b02      	cmp	r3, #2
 8008986:	d107      	bne.n	8008998 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008988:	4b50      	ldr	r3, [pc, #320]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d115      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e092      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d107      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089a0:	4b4a      	ldr	r3, [pc, #296]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e086      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089b0:	4b46      	ldr	r3, [pc, #280]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e07e      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089c0:	4b42      	ldr	r3, [pc, #264]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f023 0203 	bic.w	r2, r3, #3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	493f      	ldr	r1, [pc, #252]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d2:	f7fd fe45 	bl	8006660 <HAL_GetTick>
 80089d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d8:	e00a      	b.n	80089f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089da:	f7fd fe41 	bl	8006660 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e066      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f0:	4b36      	ldr	r3, [pc, #216]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f003 020c 	and.w	r2, r3, #12
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d1eb      	bne.n	80089da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0e:	4b2f      	ldr	r3, [pc, #188]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	492c      	ldr	r1, [pc, #176]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d210      	bcs.n	8008a50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a2e:	4b26      	ldr	r3, [pc, #152]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f023 0207 	bic.w	r2, r3, #7
 8008a36:	4924      	ldr	r1, [pc, #144]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a3e:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <HAL_RCC_ClockConfig+0x1b0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d001      	beq.n	8008a50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e036      	b.n	8008abe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d008      	beq.n	8008a6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	4918      	ldr	r1, [pc, #96]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0308 	and.w	r3, r3, #8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a7a:	4b14      	ldr	r3, [pc, #80]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	4910      	ldr	r1, [pc, #64]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a8e:	f000 f825 	bl	8008adc <HAL_RCC_GetSysClockFreq>
 8008a92:	4602      	mov	r2, r0
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <HAL_RCC_ClockConfig+0x1b4>)
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	091b      	lsrs	r3, r3, #4
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	490c      	ldr	r1, [pc, #48]	; (8008ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	5ccb      	ldrb	r3, [r1, r3]
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd fd84 	bl	80065c0 <HAL_InitTick>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	72fb      	strb	r3, [r7, #11]

  return status;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40022000 	.word	0x40022000
 8008acc:	40021000 	.word	0x40021000
 8008ad0:	0801a984 	.word	0x0801a984
 8008ad4:	2000000c 	.word	0x2000000c
 8008ad8:	200000e8 	.word	0x200000e8

08008adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b089      	sub	sp, #36	; 0x24
 8008ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aea:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 030c 	and.w	r3, r3, #12
 8008af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008af4:	4b3b      	ldr	r3, [pc, #236]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <HAL_RCC_GetSysClockFreq+0x34>
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d121      	bne.n	8008b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d11e      	bne.n	8008b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008b10:	4b34      	ldr	r3, [pc, #208]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d107      	bne.n	8008b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008b1c:	4b31      	ldr	r3, [pc, #196]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	e005      	b.n	8008b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008b2c:	4b2d      	ldr	r3, [pc, #180]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	091b      	lsrs	r3, r3, #4
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008b38:	4a2b      	ldr	r2, [pc, #172]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b4c:	e00a      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d102      	bne.n	8008b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b54:	4b25      	ldr	r3, [pc, #148]	; (8008bec <HAL_RCC_GetSysClockFreq+0x110>)
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	e004      	b.n	8008b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d101      	bne.n	8008b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b60:	4b23      	ldr	r3, [pc, #140]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b0c      	cmp	r3, #12
 8008b68:	d134      	bne.n	8008bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b6a:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d003      	beq.n	8008b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d003      	beq.n	8008b88 <HAL_RCC_GetSysClockFreq+0xac>
 8008b80:	e005      	b.n	8008b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b82:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <HAL_RCC_GetSysClockFreq+0x110>)
 8008b84:	617b      	str	r3, [r7, #20]
      break;
 8008b86:	e005      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b88:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b8a:	617b      	str	r3, [r7, #20]
      break;
 8008b8c:	e002      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	617b      	str	r3, [r7, #20]
      break;
 8008b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b94:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008ba2:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	fb02 f203 	mul.w	r2, r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	0e5b      	lsrs	r3, r3, #25
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3724      	adds	r7, #36	; 0x24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40021000 	.word	0x40021000
 8008be8:	0801a99c 	.word	0x0801a99c
 8008bec:	00f42400 	.word	0x00f42400
 8008bf0:	007a1200 	.word	0x007a1200

08008bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bf8:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	2000000c 	.word	0x2000000c

08008c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c10:	f7ff fff0 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c14:	4602      	mov	r2, r0
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	4904      	ldr	r1, [pc, #16]	; (8008c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c22:	5ccb      	ldrb	r3, [r1, r3]
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	40021000 	.word	0x40021000
 8008c34:	0801a994 	.word	0x0801a994

08008c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008c3c:	f7ff ffda 	bl	8008bf4 <HAL_RCC_GetHCLKFreq>
 8008c40:	4602      	mov	r2, r0
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	0adb      	lsrs	r3, r3, #11
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4904      	ldr	r1, [pc, #16]	; (8008c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c4e:	5ccb      	ldrb	r3, [r1, r3]
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	0801a994 	.word	0x0801a994

08008c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008c70:	4b2a      	ldr	r3, [pc, #168]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008c7c:	f7ff fa02 	bl	8008084 <HAL_PWREx_GetVoltageRange>
 8008c80:	6178      	str	r0, [r7, #20]
 8008c82:	e014      	b.n	8008cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c84:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	4a24      	ldr	r2, [pc, #144]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8008c90:	4b22      	ldr	r3, [pc, #136]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c9c:	f7ff f9f2 	bl	8008084 <HAL_PWREx_GetVoltageRange>
 8008ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ca2:	4b1e      	ldr	r3, [pc, #120]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb4:	d10b      	bne.n	8008cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b80      	cmp	r3, #128	; 0x80
 8008cba:	d919      	bls.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8008cc0:	d902      	bls.n	8008cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	e013      	b.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008cc8:	2301      	movs	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	e010      	b.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d902      	bls.n	8008cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	e00a      	b.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b80      	cmp	r3, #128	; 0x80
 8008cde:	d102      	bne.n	8008ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	e004      	b.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b70      	cmp	r3, #112	; 0x70
 8008cea:	d101      	bne.n	8008cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008cec:	2301      	movs	r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f023 0207 	bic.w	r2, r3, #7
 8008cf8:	4909      	ldr	r1, [pc, #36]	; (8008d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d001      	beq.n	8008d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	40022000 	.word	0x40022000

08008d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d30:	2300      	movs	r3, #0
 8008d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d041      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d48:	d02a      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008d4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d4e:	d824      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d54:	d008      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d5a:	d81e      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d64:	d010      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d66:	e018      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d68:	4b86      	ldr	r3, [pc, #536]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4a85      	ldr	r2, [pc, #532]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d74:	e015      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fabb 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 8008d82:	4603      	mov	r3, r0
 8008d84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d86:	e00c      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3320      	adds	r3, #32
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fba6 	bl	80094e0 <RCCEx_PLLSAI2_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d98:	e003      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8008d9e:	e000      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008da2:	7cfb      	ldrb	r3, [r7, #19]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008da8:	4b76      	ldr	r3, [pc, #472]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db6:	4973      	ldr	r1, [pc, #460]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008dbe:	e001      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc0:	7cfb      	ldrb	r3, [r7, #19]
 8008dc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d041      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dd8:	d02a      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008dda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dde:	d824      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008de4:	d008      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dea:	d81e      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008df4:	d010      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008df6:	e018      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008df8:	4b62      	ldr	r3, [pc, #392]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4a61      	ldr	r2, [pc, #388]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e04:	e015      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fa73 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e16:	e00c      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3320      	adds	r3, #32
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fb5e 	bl	80094e0 <RCCEx_PLLSAI2_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008e28:	e003      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8008e2e:	e000      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e32:	7cfb      	ldrb	r3, [r7, #19]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10b      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e38:	4b52      	ldr	r3, [pc, #328]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e46:	494f      	ldr	r1, [pc, #316]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008e4e:	e001      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e50:	7cfb      	ldrb	r3, [r7, #19]
 8008e52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80a0 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e62:	2300      	movs	r3, #0
 8008e64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e66:	4b47      	ldr	r3, [pc, #284]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00d      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7c:	4b41      	ldr	r3, [pc, #260]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	4a40      	ldr	r2, [pc, #256]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e86:	6593      	str	r3, [r2, #88]	; 0x58
 8008e88:	4b3e      	ldr	r3, [pc, #248]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e90:	60bb      	str	r3, [r7, #8]
 8008e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e94:	2301      	movs	r3, #1
 8008e96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e98:	4b3b      	ldr	r3, [pc, #236]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a3a      	ldr	r2, [pc, #232]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ea4:	f7fd fbdc 	bl	8006660 <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008eaa:	e009      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eac:	f7fd fbd8 	bl	8006660 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d902      	bls.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8008ebe:	e005      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ec0:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0ef      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008ecc:	7cfb      	ldrb	r3, [r7, #19]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d15c      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ed2:	4b2c      	ldr	r3, [pc, #176]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008edc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01f      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d019      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ef0:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008efc:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f02:	4a20      	ldr	r2, [pc, #128]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f0c:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f12:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f1c:	4a19      	ldr	r2, [pc, #100]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d016      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2e:	f7fd fb97 	bl	8006660 <HAL_GetTick>
 8008f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f34:	e00b      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f36:	f7fd fb93 	bl	8006660 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d902      	bls.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8008f4c:	e006      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0ec      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008f5c:	7cfb      	ldrb	r3, [r7, #19]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10c      	bne.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f62:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f72:	4904      	ldr	r1, [pc, #16]	; (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008f7a:	e009      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f7c:	7cfb      	ldrb	r3, [r7, #19]
 8008f7e:	74bb      	strb	r3, [r7, #18]
 8008f80:	e006      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008f82:	bf00      	nop
 8008f84:	40021000 	.word	0x40021000
 8008f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	7cfb      	ldrb	r3, [r7, #19]
 8008f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f90:	7c7b      	ldrb	r3, [r7, #17]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d105      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f96:	4b9e      	ldr	r3, [pc, #632]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9a:	4a9d      	ldr	r2, [pc, #628]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fae:	4b98      	ldr	r3, [pc, #608]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb4:	f023 0203 	bic.w	r2, r3, #3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	4994      	ldr	r1, [pc, #592]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008fd0:	4b8f      	ldr	r3, [pc, #572]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd6:	f023 020c 	bic.w	r2, r3, #12
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fde:	498c      	ldr	r1, [pc, #560]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ff2:	4b87      	ldr	r3, [pc, #540]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	4983      	ldr	r1, [pc, #524]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009014:	4b7e      	ldr	r3, [pc, #504]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009022:	497b      	ldr	r1, [pc, #492]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0310 	and.w	r3, r3, #16
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009036:	4b76      	ldr	r3, [pc, #472]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009044:	4972      	ldr	r1, [pc, #456]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009058:	4b6d      	ldr	r3, [pc, #436]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009066:	496a      	ldr	r1, [pc, #424]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800907a:	4b65      	ldr	r3, [pc, #404]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009088:	4961      	ldr	r1, [pc, #388]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800909c:	4b5c      	ldr	r3, [pc, #368]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800909e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090aa:	4959      	ldr	r1, [pc, #356]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090be:	4b54      	ldr	r3, [pc, #336]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090cc:	4950      	ldr	r1, [pc, #320]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80090e0:	4b4b      	ldr	r3, [pc, #300]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	4948      	ldr	r1, [pc, #288]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009102:	4b43      	ldr	r3, [pc, #268]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	493f      	ldr	r1, [pc, #252]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d028      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009124:	4b3a      	ldr	r3, [pc, #232]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009132:	4937      	ldr	r1, [pc, #220]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009134:	4313      	orrs	r3, r2
 8009136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009142:	d106      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009144:	4b32      	ldr	r3, [pc, #200]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4a31      	ldr	r2, [pc, #196]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800914a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800914e:	60d3      	str	r3, [r2, #12]
 8009150:	e011      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800915a:	d10c      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	2101      	movs	r1, #1
 8009162:	4618      	mov	r0, r3
 8009164:	f000 f8c8 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 8009168:	4603      	mov	r3, r0
 800916a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800916c:	7cfb      	ldrb	r3, [r7, #19]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009172:	7cfb      	ldrb	r3, [r7, #19]
 8009174:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d028      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009182:	4b23      	ldr	r3, [pc, #140]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009190:	491f      	ldr	r1, [pc, #124]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a0:	d106      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091a2:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	4a1a      	ldr	r2, [pc, #104]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091ac:	60d3      	str	r3, [r2, #12]
 80091ae:	e011      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091b8:	d10c      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3304      	adds	r3, #4
 80091be:	2101      	movs	r1, #1
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 f899 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091ca:	7cfb      	ldrb	r3, [r7, #19]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80091d0:	7cfb      	ldrb	r3, [r7, #19]
 80091d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02b      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091e0:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ee:	4908      	ldr	r1, [pc, #32]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091fe:	d109      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009200:	4b03      	ldr	r3, [pc, #12]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	4a02      	ldr	r2, [pc, #8]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800920a:	60d3      	str	r3, [r2, #12]
 800920c:	e014      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800920e:	bf00      	nop
 8009210:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800921c:	d10c      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	2101      	movs	r1, #1
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f867 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800922e:	7cfb      	ldrb	r3, [r7, #19]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009234:	7cfb      	ldrb	r3, [r7, #19]
 8009236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d02f      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009244:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009252:	4928      	ldr	r1, [pc, #160]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009254:	4313      	orrs	r3, r2
 8009256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009262:	d10d      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3304      	adds	r3, #4
 8009268:	2102      	movs	r1, #2
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f844 	bl	80092f8 <RCCEx_PLLSAI1_Config>
 8009270:	4603      	mov	r3, r0
 8009272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009274:	7cfb      	ldrb	r3, [r7, #19]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d014      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800927a:	7cfb      	ldrb	r3, [r7, #19]
 800927c:	74bb      	strb	r3, [r7, #18]
 800927e:	e011      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009288:	d10c      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3320      	adds	r3, #32
 800928e:	2102      	movs	r1, #2
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f925 	bl	80094e0 <RCCEx_PLLSAI2_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800929a:	7cfb      	ldrb	r3, [r7, #19]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80092a0:	7cfb      	ldrb	r3, [r7, #19]
 80092a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80092b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092be:	490d      	ldr	r1, [pc, #52]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e2:	4904      	ldr	r1, [pc, #16]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80092ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	40021000 	.word	0x40021000

080092f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009306:	4b75      	ldr	r3, [pc, #468]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d018      	beq.n	8009344 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009312:	4b72      	ldr	r3, [pc, #456]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f003 0203 	and.w	r2, r3, #3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d10d      	bne.n	800933e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
       ||
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800932a:	4b6c      	ldr	r3, [pc, #432]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
       ||
 800933a:	429a      	cmp	r2, r3
 800933c:	d047      	beq.n	80093ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
 8009342:	e044      	b.n	80093ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d018      	beq.n	800937e <RCCEx_PLLSAI1_Config+0x86>
 800934c:	2b03      	cmp	r3, #3
 800934e:	d825      	bhi.n	800939c <RCCEx_PLLSAI1_Config+0xa4>
 8009350:	2b01      	cmp	r3, #1
 8009352:	d002      	beq.n	800935a <RCCEx_PLLSAI1_Config+0x62>
 8009354:	2b02      	cmp	r3, #2
 8009356:	d009      	beq.n	800936c <RCCEx_PLLSAI1_Config+0x74>
 8009358:	e020      	b.n	800939c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800935a:	4b60      	ldr	r3, [pc, #384]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d11d      	bne.n	80093a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800936a:	e01a      	b.n	80093a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800936c:	4b5b      	ldr	r3, [pc, #364]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009374:	2b00      	cmp	r3, #0
 8009376:	d116      	bne.n	80093a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800937c:	e013      	b.n	80093a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800937e:	4b57      	ldr	r3, [pc, #348]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10f      	bne.n	80093aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800938a:	4b54      	ldr	r3, [pc, #336]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800939a:	e006      	b.n	80093aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
      break;
 80093a0:	e004      	b.n	80093ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093a2:	bf00      	nop
 80093a4:	e002      	b.n	80093ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093a6:	bf00      	nop
 80093a8:	e000      	b.n	80093ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093b2:	4b4a      	ldr	r3, [pc, #296]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6819      	ldr	r1, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	430b      	orrs	r3, r1
 80093c8:	4944      	ldr	r1, [pc, #272]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d17d      	bne.n	80094d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80093d4:	4b41      	ldr	r3, [pc, #260]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a40      	ldr	r2, [pc, #256]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80093da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e0:	f7fd f93e 	bl	8006660 <HAL_GetTick>
 80093e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093e6:	e009      	b.n	80093fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093e8:	f7fd f93a 	bl	8006660 <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d902      	bls.n	80093fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	73fb      	strb	r3, [r7, #15]
        break;
 80093fa:	e005      	b.n	8009408 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093fc:	4b37      	ldr	r3, [pc, #220]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1ef      	bne.n	80093e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d160      	bne.n	80094d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d111      	bne.n	8009438 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009414:	4b31      	ldr	r3, [pc, #196]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800941c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6892      	ldr	r2, [r2, #8]
 8009424:	0211      	lsls	r1, r2, #8
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	68d2      	ldr	r2, [r2, #12]
 800942a:	0912      	lsrs	r2, r2, #4
 800942c:	0452      	lsls	r2, r2, #17
 800942e:	430a      	orrs	r2, r1
 8009430:	492a      	ldr	r1, [pc, #168]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009432:	4313      	orrs	r3, r2
 8009434:	610b      	str	r3, [r1, #16]
 8009436:	e027      	b.n	8009488 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d112      	bne.n	8009464 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800943e:	4b27      	ldr	r3, [pc, #156]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009446:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6892      	ldr	r2, [r2, #8]
 800944e:	0211      	lsls	r1, r2, #8
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6912      	ldr	r2, [r2, #16]
 8009454:	0852      	lsrs	r2, r2, #1
 8009456:	3a01      	subs	r2, #1
 8009458:	0552      	lsls	r2, r2, #21
 800945a:	430a      	orrs	r2, r1
 800945c:	491f      	ldr	r1, [pc, #124]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800945e:	4313      	orrs	r3, r2
 8009460:	610b      	str	r3, [r1, #16]
 8009462:	e011      	b.n	8009488 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800946c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	6892      	ldr	r2, [r2, #8]
 8009474:	0211      	lsls	r1, r2, #8
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6952      	ldr	r2, [r2, #20]
 800947a:	0852      	lsrs	r2, r2, #1
 800947c:	3a01      	subs	r2, #1
 800947e:	0652      	lsls	r2, r2, #25
 8009480:	430a      	orrs	r2, r1
 8009482:	4916      	ldr	r1, [pc, #88]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009484:	4313      	orrs	r3, r2
 8009486:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009488:	4b14      	ldr	r3, [pc, #80]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a13      	ldr	r2, [pc, #76]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800948e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009494:	f7fd f8e4 	bl	8006660 <HAL_GetTick>
 8009498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800949a:	e009      	b.n	80094b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800949c:	f7fd f8e0 	bl	8006660 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d902      	bls.n	80094b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	73fb      	strb	r3, [r7, #15]
          break;
 80094ae:	e005      	b.n	80094bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0ef      	beq.n	800949c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	4904      	ldr	r1, [pc, #16]	; (80094dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40021000 	.word	0x40021000

080094e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094ee:	4b6a      	ldr	r3, [pc, #424]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80094fa:	4b67      	ldr	r3, [pc, #412]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f003 0203 	and.w	r2, r3, #3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d10d      	bne.n	8009526 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
       ||
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009512:	4b61      	ldr	r3, [pc, #388]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	091b      	lsrs	r3, r3, #4
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
       ||
 8009522:	429a      	cmp	r2, r3
 8009524:	d047      	beq.n	80095b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	73fb      	strb	r3, [r7, #15]
 800952a:	e044      	b.n	80095b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b03      	cmp	r3, #3
 8009532:	d018      	beq.n	8009566 <RCCEx_PLLSAI2_Config+0x86>
 8009534:	2b03      	cmp	r3, #3
 8009536:	d825      	bhi.n	8009584 <RCCEx_PLLSAI2_Config+0xa4>
 8009538:	2b01      	cmp	r3, #1
 800953a:	d002      	beq.n	8009542 <RCCEx_PLLSAI2_Config+0x62>
 800953c:	2b02      	cmp	r3, #2
 800953e:	d009      	beq.n	8009554 <RCCEx_PLLSAI2_Config+0x74>
 8009540:	e020      	b.n	8009584 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009542:	4b55      	ldr	r3, [pc, #340]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d11d      	bne.n	800958a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009552:	e01a      	b.n	800958a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009554:	4b50      	ldr	r3, [pc, #320]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955c:	2b00      	cmp	r3, #0
 800955e:	d116      	bne.n	800958e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009564:	e013      	b.n	800958e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009566:	4b4c      	ldr	r3, [pc, #304]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10f      	bne.n	8009592 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009572:	4b49      	ldr	r3, [pc, #292]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009582:	e006      	b.n	8009592 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
      break;
 8009588:	e004      	b.n	8009594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800958a:	bf00      	nop
 800958c:	e002      	b.n	8009594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800958e:	bf00      	nop
 8009590:	e000      	b.n	8009594 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009592:	bf00      	nop
    }

    if(status == HAL_OK)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10d      	bne.n	80095b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800959a:	4b3f      	ldr	r3, [pc, #252]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6819      	ldr	r1, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	430b      	orrs	r3, r1
 80095b0:	4939      	ldr	r1, [pc, #228]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d167      	bne.n	800968c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80095bc:	4b36      	ldr	r3, [pc, #216]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a35      	ldr	r2, [pc, #212]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095c8:	f7fd f84a 	bl	8006660 <HAL_GetTick>
 80095cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095ce:	e009      	b.n	80095e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095d0:	f7fd f846 	bl	8006660 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d902      	bls.n	80095e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	73fb      	strb	r3, [r7, #15]
        break;
 80095e2:	e005      	b.n	80095f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80095e4:	4b2c      	ldr	r3, [pc, #176]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ef      	bne.n	80095d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d14a      	bne.n	800968c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d111      	bne.n	8009620 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095fc:	4b26      	ldr	r3, [pc, #152]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6892      	ldr	r2, [r2, #8]
 800960c:	0211      	lsls	r1, r2, #8
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	68d2      	ldr	r2, [r2, #12]
 8009612:	0912      	lsrs	r2, r2, #4
 8009614:	0452      	lsls	r2, r2, #17
 8009616:	430a      	orrs	r2, r1
 8009618:	491f      	ldr	r1, [pc, #124]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800961a:	4313      	orrs	r3, r2
 800961c:	614b      	str	r3, [r1, #20]
 800961e:	e011      	b.n	8009644 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009620:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6892      	ldr	r2, [r2, #8]
 8009630:	0211      	lsls	r1, r2, #8
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6912      	ldr	r2, [r2, #16]
 8009636:	0852      	lsrs	r2, r2, #1
 8009638:	3a01      	subs	r2, #1
 800963a:	0652      	lsls	r2, r2, #25
 800963c:	430a      	orrs	r2, r1
 800963e:	4916      	ldr	r1, [pc, #88]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009640:	4313      	orrs	r3, r2
 8009642:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009644:	4b14      	ldr	r3, [pc, #80]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a13      	ldr	r2, [pc, #76]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800964a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800964e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009650:	f7fd f806 	bl	8006660 <HAL_GetTick>
 8009654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009656:	e009      	b.n	800966c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009658:	f7fd f802 	bl	8006660 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d902      	bls.n	800966c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	73fb      	strb	r3, [r7, #15]
          break;
 800966a:	e005      	b.n	8009678 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0ef      	beq.n	8009658 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009680:	695a      	ldr	r2, [r3, #20]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	4904      	ldr	r1, [pc, #16]	; (8009698 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009688:	4313      	orrs	r3, r2
 800968a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	40021000 	.word	0x40021000

0800969c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d06c      	beq.n	8009788 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7f8 ff86 	bl	80025d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	22ca      	movs	r2, #202	; 0xca
 80096d6:	625a      	str	r2, [r3, #36]	; 0x24
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2253      	movs	r2, #83	; 0x53
 80096de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f9a0 	bl	8009a26 <RTC_EnterInitMode>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d14b      	bne.n	8009788 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009702:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6899      	ldr	r1, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	68d2      	ldr	r2, [r2, #12]
 800972a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6919      	ldr	r1, [r3, #16]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	041a      	lsls	r2, r3, #16
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f9a3 	bl	8009a8c <RTC_ExitInitMode>
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d11b      	bne.n	8009788 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0203 	bic.w	r2, r2, #3
 800975e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69da      	ldr	r2, [r3, #28]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009792:	b590      	push	{r4, r7, lr}
 8009794:	b087      	sub	sp, #28
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <HAL_RTC_SetTime+0x1a>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e08b      	b.n	80098c4 <HAL_RTC_SetTime+0x132>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	22ca      	movs	r2, #202	; 0xca
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2253      	movs	r2, #83	; 0x53
 80097ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 f92a 	bl	8009a26 <RTC_EnterInitMode>
 80097d2:	4603      	mov	r3, r0
 80097d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80097d6:	7cfb      	ldrb	r3, [r7, #19]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d163      	bne.n	80098a4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d126      	bne.n	8009830 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f984 	bl	8009b08 <RTC_ByteToBcd2>
 8009800:	4603      	mov	r3, r0
 8009802:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	785b      	ldrb	r3, [r3, #1]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f97d 	bl	8009b08 <RTC_ByteToBcd2>
 800980e:	4603      	mov	r3, r0
 8009810:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009812:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	789b      	ldrb	r3, [r3, #2]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 f975 	bl	8009b08 <RTC_ByteToBcd2>
 800981e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009820:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	78db      	ldrb	r3, [r3, #3]
 8009828:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	e018      	b.n	8009862 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009850:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009856:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	78db      	ldrb	r3, [r3, #3]
 800985c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800986c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009870:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009880:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6899      	ldr	r1, [r3, #8]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	431a      	orrs	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f8f6 	bl	8009a8c <RTC_ExitInitMode>
 80098a0:	4603      	mov	r3, r0
 80098a2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	22ff      	movs	r2, #255	; 0xff
 80098aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80098c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd90      	pop	{r4, r7, pc}

080098cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_RTC_SetDate+0x1a>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e075      	b.n	80099d2 <HAL_RTC_SetDate+0x106>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10e      	bne.n	800991a <HAL_RTC_SetDate+0x4e>
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	785b      	ldrb	r3, [r3, #1]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	f023 0310 	bic.w	r3, r3, #16
 8009910:	b2db      	uxtb	r3, r3
 8009912:	330a      	adds	r3, #10
 8009914:	b2da      	uxtb	r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d11c      	bne.n	800995a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	78db      	ldrb	r3, [r3, #3]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f8ef 	bl	8009b08 <RTC_ByteToBcd2>
 800992a:	4603      	mov	r3, r0
 800992c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f8e8 	bl	8009b08 <RTC_ByteToBcd2>
 8009938:	4603      	mov	r3, r0
 800993a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800993c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	789b      	ldrb	r3, [r3, #2]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f8e0 	bl	8009b08 <RTC_ByteToBcd2>
 8009948:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800994a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e00e      	b.n	8009978 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	78db      	ldrb	r3, [r3, #3]
 800995e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009966:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800996c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	22ca      	movs	r2, #202	; 0xca
 800997e:	625a      	str	r2, [r3, #36]	; 0x24
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2253      	movs	r2, #83	; 0x53
 8009986:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f84c 	bl	8009a26 <RTC_EnterInitMode>
 800998e:	4603      	mov	r3, r0
 8009990:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009992:	7cfb      	ldrb	r3, [r7, #19]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10c      	bne.n	80099b2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80099a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f86f 	bl	8009a8c <RTC_ExitInitMode>
 80099ae:	4603      	mov	r3, r0
 80099b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	22ff      	movs	r2, #255	; 0xff
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80099ba:	7cfb      	ldrb	r3, [r7, #19]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d103      	bne.n	80099c8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80099d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd90      	pop	{r4, r7, pc}

080099da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80099f0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80099f2:	f7fc fe35 	bl	8006660 <HAL_GetTick>
 80099f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80099f8:	e009      	b.n	8009a0e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099fa:	f7fc fe31 	bl	8006660 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a08:	d901      	bls.n	8009a0e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e007      	b.n	8009a1e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ee      	beq.n	80099fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d120      	bne.n	8009a82 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f04f 32ff 	mov.w	r2, #4294967295
 8009a48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009a4a:	f7fc fe09 	bl	8006660 <HAL_GetTick>
 8009a4e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a50:	e00d      	b.n	8009a6e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a52:	f7fc fe05 	bl	8006660 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a60:	d905      	bls.n	8009a6e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2203      	movs	r2, #3
 8009a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <RTC_EnterInitMode+0x5c>
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d1e7      	bne.n	8009a52 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009a98:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	4a19      	ldr	r2, [pc, #100]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009aa4:	4b17      	ldr	r3, [pc, #92]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff ff92 	bl	80099da <HAL_RTC_WaitForSynchro>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01e      	beq.n	8009afa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2203      	movs	r2, #3
 8009ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	e017      	b.n	8009afa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009aca:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	4a0d      	ldr	r2, [pc, #52]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009ad0:	f023 0320 	bic.w	r3, r3, #32
 8009ad4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff ff7f 	bl	80099da <HAL_RTC_WaitForSynchro>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2203      	movs	r2, #3
 8009ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4a04      	ldr	r2, [pc, #16]	; (8009b04 <RTC_ExitInitMode+0x78>)
 8009af4:	f043 0320 	orr.w	r3, r3, #32
 8009af8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40002800 	.word	0x40002800

08009b08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009b1a:	e005      	b.n	8009b28 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	3b0a      	subs	r3, #10
 8009b26:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d8f6      	bhi.n	8009b1c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	b2db      	uxtb	r3, r3
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e049      	b.n	8009bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d106      	bne.n	8009b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7f9 f882 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f000 fae0 	bl	800a14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d001      	beq.n	8009c10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e047      	b.n	8009ca0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a23      	ldr	r2, [pc, #140]	; (8009cac <HAL_TIM_Base_Start+0xb4>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01d      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2a:	d018      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a1f      	ldr	r2, [pc, #124]	; (8009cb0 <HAL_TIM_Base_Start+0xb8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d013      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a1e      	ldr	r2, [pc, #120]	; (8009cb4 <HAL_TIM_Base_Start+0xbc>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d00e      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a1c      	ldr	r2, [pc, #112]	; (8009cb8 <HAL_TIM_Base_Start+0xc0>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d009      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a1b      	ldr	r2, [pc, #108]	; (8009cbc <HAL_TIM_Base_Start+0xc4>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d004      	beq.n	8009c5e <HAL_TIM_Base_Start+0x66>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a19      	ldr	r2, [pc, #100]	; (8009cc0 <HAL_TIM_Base_Start+0xc8>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d115      	bne.n	8009c8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	4b17      	ldr	r3, [pc, #92]	; (8009cc4 <HAL_TIM_Base_Start+0xcc>)
 8009c66:	4013      	ands	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	d015      	beq.n	8009c9c <HAL_TIM_Base_Start+0xa4>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c76:	d011      	beq.n	8009c9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c88:	e008      	b.n	8009c9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0201 	orr.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e000      	b.n	8009c9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40000c00 	.word	0x40000c00
 8009cbc:	40013400 	.word	0x40013400
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	00010007 	.word	0x00010007

08009cc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6a1a      	ldr	r2, [r3, #32]
 8009cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10f      	bne.n	8009d00 <HAL_TIM_Base_Stop+0x38>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6a1a      	ldr	r2, [r3, #32]
 8009ce6:	f240 4344 	movw	r3, #1092	; 0x444
 8009cea:	4013      	ands	r3, r2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <HAL_TIM_Base_Stop+0x38>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0201 	bic.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d122      	bne.n	8009d72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d11b      	bne.n	8009d72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f06f 0202 	mvn.w	r2, #2
 8009d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	f003 0303 	and.w	r3, r3, #3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f9d8 	bl	800a10e <HAL_TIM_IC_CaptureCallback>
 8009d5e:	e005      	b.n	8009d6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f9ca 	bl	800a0fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f9db 	bl	800a122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d122      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f003 0304 	and.w	r3, r3, #4
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	d11b      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f06f 0204 	mvn.w	r2, #4
 8009d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f9ae 	bl	800a10e <HAL_TIM_IC_CaptureCallback>
 8009db2:	e005      	b.n	8009dc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f9a0 	bl	800a0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f9b1 	bl	800a122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	2b08      	cmp	r3, #8
 8009dd2:	d122      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b08      	cmp	r3, #8
 8009de0:	d11b      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f06f 0208 	mvn.w	r2, #8
 8009dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2204      	movs	r2, #4
 8009df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f984 	bl	800a10e <HAL_TIM_IC_CaptureCallback>
 8009e06:	e005      	b.n	8009e14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f976 	bl	800a0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f987 	bl	800a122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b10      	cmp	r3, #16
 8009e26:	d122      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f003 0310 	and.w	r3, r3, #16
 8009e32:	2b10      	cmp	r3, #16
 8009e34:	d11b      	bne.n	8009e6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f06f 0210 	mvn.w	r2, #16
 8009e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2208      	movs	r2, #8
 8009e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f95a 	bl	800a10e <HAL_TIM_IC_CaptureCallback>
 8009e5a:	e005      	b.n	8009e68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f94c 	bl	800a0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f95d 	bl	800a122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d10e      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d107      	bne.n	8009e9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f06f 0201 	mvn.w	r2, #1
 8009e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f926 	bl	800a0e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea4:	2b80      	cmp	r3, #128	; 0x80
 8009ea6:	d10e      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb2:	2b80      	cmp	r3, #128	; 0x80
 8009eb4:	d107      	bne.n	8009ec6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fb09 	bl	800a4d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed4:	d10e      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee0:	2b80      	cmp	r3, #128	; 0x80
 8009ee2:	d107      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fafc 	bl	800a4ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	d10e      	bne.n	8009f20 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0c:	2b40      	cmp	r3, #64	; 0x40
 8009f0e:	d107      	bne.n	8009f20 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f90b 	bl	800a136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b20      	cmp	r3, #32
 8009f2c:	d10e      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b20      	cmp	r3, #32
 8009f3a:	d107      	bne.n	8009f4c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f06f 0220 	mvn.w	r2, #32
 8009f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fabc 	bl	800a4c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d101      	bne.n	8009f70 <HAL_TIM_ConfigClockSource+0x1c>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e0b6      	b.n	800a0de <HAL_TIM_ConfigClockSource+0x18a>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fac:	d03e      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0xd8>
 8009fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb2:	f200 8087 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fba:	f000 8086 	beq.w	800a0ca <HAL_TIM_ConfigClockSource+0x176>
 8009fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc2:	d87f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fc4:	2b70      	cmp	r3, #112	; 0x70
 8009fc6:	d01a      	beq.n	8009ffe <HAL_TIM_ConfigClockSource+0xaa>
 8009fc8:	2b70      	cmp	r3, #112	; 0x70
 8009fca:	d87b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fcc:	2b60      	cmp	r3, #96	; 0x60
 8009fce:	d050      	beq.n	800a072 <HAL_TIM_ConfigClockSource+0x11e>
 8009fd0:	2b60      	cmp	r3, #96	; 0x60
 8009fd2:	d877      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fd4:	2b50      	cmp	r3, #80	; 0x50
 8009fd6:	d03c      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0xfe>
 8009fd8:	2b50      	cmp	r3, #80	; 0x50
 8009fda:	d873      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d058      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x13e>
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d86f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fe4:	2b30      	cmp	r3, #48	; 0x30
 8009fe6:	d064      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15e>
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d86b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d060      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d867      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05c      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d05a      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x15e>
 8009ffc:	e062      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6899      	ldr	r1, [r3, #8]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f000 f9b1 	bl	800a374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	609a      	str	r2, [r3, #8]
      break;
 800a02a:	e04f      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6818      	ldr	r0, [r3, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6899      	ldr	r1, [r3, #8]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f000 f99a 	bl	800a374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a04e:	609a      	str	r2, [r3, #8]
      break;
 800a050:	e03c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	6859      	ldr	r1, [r3, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	461a      	mov	r2, r3
 800a060:	f000 f90e 	bl	800a280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2150      	movs	r1, #80	; 0x50
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f967 	bl	800a33e <TIM_ITRx_SetConfig>
      break;
 800a070:	e02c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	6859      	ldr	r1, [r3, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	461a      	mov	r2, r3
 800a080:	f000 f92d 	bl	800a2de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2160      	movs	r1, #96	; 0x60
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f957 	bl	800a33e <TIM_ITRx_SetConfig>
      break;
 800a090:	e01c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	6859      	ldr	r1, [r3, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f000 f8ee 	bl	800a280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2140      	movs	r1, #64	; 0x40
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f947 	bl	800a33e <TIM_ITRx_SetConfig>
      break;
 800a0b0:	e00c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f000 f93e 	bl	800a33e <TIM_ITRx_SetConfig>
      break;
 800a0c2:	e003      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c8:	e000      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0ee:	bf00      	nop
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a13e:	bf00      	nop
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
	...

0800a14c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a40      	ldr	r2, [pc, #256]	; (800a260 <TIM_Base_SetConfig+0x114>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d013      	beq.n	800a18c <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16a:	d00f      	beq.n	800a18c <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3d      	ldr	r2, [pc, #244]	; (800a264 <TIM_Base_SetConfig+0x118>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00b      	beq.n	800a18c <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3c      	ldr	r2, [pc, #240]	; (800a268 <TIM_Base_SetConfig+0x11c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d007      	beq.n	800a18c <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3b      	ldr	r2, [pc, #236]	; (800a26c <TIM_Base_SetConfig+0x120>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_Base_SetConfig+0x40>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a3a      	ldr	r2, [pc, #232]	; (800a270 <TIM_Base_SetConfig+0x124>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d108      	bne.n	800a19e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a2f      	ldr	r2, [pc, #188]	; (800a260 <TIM_Base_SetConfig+0x114>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d01f      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ac:	d01b      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2c      	ldr	r2, [pc, #176]	; (800a264 <TIM_Base_SetConfig+0x118>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d017      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2b      	ldr	r2, [pc, #172]	; (800a268 <TIM_Base_SetConfig+0x11c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d013      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a2a      	ldr	r2, [pc, #168]	; (800a26c <TIM_Base_SetConfig+0x120>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00f      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a29      	ldr	r2, [pc, #164]	; (800a270 <TIM_Base_SetConfig+0x124>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00b      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a28      	ldr	r2, [pc, #160]	; (800a274 <TIM_Base_SetConfig+0x128>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d007      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a27      	ldr	r2, [pc, #156]	; (800a278 <TIM_Base_SetConfig+0x12c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d003      	beq.n	800a1e6 <TIM_Base_SetConfig+0x9a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a26      	ldr	r2, [pc, #152]	; (800a27c <TIM_Base_SetConfig+0x130>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d108      	bne.n	800a1f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	689a      	ldr	r2, [r3, #8]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a10      	ldr	r2, [pc, #64]	; (800a260 <TIM_Base_SetConfig+0x114>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00f      	beq.n	800a244 <TIM_Base_SetConfig+0xf8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a12      	ldr	r2, [pc, #72]	; (800a270 <TIM_Base_SetConfig+0x124>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_Base_SetConfig+0xf8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a11      	ldr	r2, [pc, #68]	; (800a274 <TIM_Base_SetConfig+0x128>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_Base_SetConfig+0xf8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a10      	ldr	r2, [pc, #64]	; (800a278 <TIM_Base_SetConfig+0x12c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_Base_SetConfig+0xf8>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a0f      	ldr	r2, [pc, #60]	; (800a27c <TIM_Base_SetConfig+0x130>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d103      	bne.n	800a24c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	615a      	str	r2, [r3, #20]
}
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40012c00 	.word	0x40012c00
 800a264:	40000400 	.word	0x40000400
 800a268:	40000800 	.word	0x40000800
 800a26c:	40000c00 	.word	0x40000c00
 800a270:	40013400 	.word	0x40013400
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800

0800a280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f023 0201 	bic.w	r2, r3, #1
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	011b      	lsls	r3, r3, #4
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f023 030a 	bic.w	r3, r3, #10
 800a2bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b087      	sub	sp, #28
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	f023 0210 	bic.w	r2, r3, #16
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	031b      	lsls	r3, r3, #12
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a31a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	4313      	orrs	r3, r2
 800a324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	621a      	str	r2, [r3, #32]
}
 800a332:	bf00      	nop
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a33e:	b480      	push	{r7}
 800a340:	b085      	sub	sp, #20
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	f043 0307 	orr.w	r3, r3, #7
 800a360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	609a      	str	r2, [r3, #8]
}
 800a368:	bf00      	nop
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a38e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	021a      	lsls	r2, r3, #8
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	431a      	orrs	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	609a      	str	r2, [r3, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e068      	b.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a2e      	ldr	r2, [pc, #184]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a2d      	ldr	r2, [pc, #180]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d108      	bne.n	800a412 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a406:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a418:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4313      	orrs	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a1e      	ldr	r2, [pc, #120]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d01d      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43e:	d018      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a1b      	ldr	r2, [pc, #108]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d013      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00e      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a18      	ldr	r2, [pc, #96]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d009      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a13      	ldr	r2, [pc, #76]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d004      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a14      	ldr	r2, [pc, #80]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d10c      	bne.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4313      	orrs	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	40012c00 	.word	0x40012c00
 800a4b0:	40013400 	.word	0x40013400
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40014000 	.word	0x40014000

0800a4c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e040      	b.n	800a594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f83a 	bl	800a59c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2224      	movs	r2, #36	; 0x24
 800a52c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f94a 	bl	800a7d8 <UART_SetConfig>
 800a544:	4603      	mov	r3, r0
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e022      	b.n	800a594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	d002      	beq.n	800a55c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fbc8 	bl	800acec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fc4f 	bl	800ae30 <UART_CheckIdleState>
 800a592:	4603      	mov	r3, r0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	f040 8082 	bne.w	800a6ce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <HAL_UART_Transmit+0x26>
 800a5d0:	88fb      	ldrh	r3, [r7, #6]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e07a      	b.n	800a6d0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_UART_Transmit+0x38>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e073      	b.n	800a6d0 <HAL_UART_Transmit+0x120>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2221      	movs	r2, #33	; 0x21
 800a5fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5fe:	f7fc f82f 	bl	8006660 <HAL_GetTick>
 800a602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	88fa      	ldrh	r2, [r7, #6]
 800a608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61c:	d108      	bne.n	800a630 <HAL_UART_Transmit+0x80>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d104      	bne.n	800a630 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	61bb      	str	r3, [r7, #24]
 800a62e:	e003      	b.n	800a638 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a640:	e02d      	b.n	800a69e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2200      	movs	r2, #0
 800a64a:	2180      	movs	r1, #128	; 0x80
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fc38 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e039      	b.n	800a6d0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10b      	bne.n	800a67a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	881a      	ldrh	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a66e:	b292      	uxth	r2, r2
 800a670:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	3302      	adds	r3, #2
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	e008      	b.n	800a68c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	781a      	ldrb	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	b292      	uxth	r2, r2
 800a684:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	3301      	adds	r3, #1
 800a68a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a692:	b29b      	uxth	r3, r3
 800a694:	3b01      	subs	r3, #1
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1cb      	bne.n	800a642 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2140      	movs	r1, #64	; 0x40
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 fc04 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e005      	b.n	800a6d0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e000      	b.n	800a6d0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a6ce:	2302      	movs	r3, #2
  }
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	; 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	d142      	bne.n	800a774 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <HAL_UART_Receive_DMA+0x22>
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e03b      	b.n	800a776 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_UART_Receive_DMA+0x34>
 800a708:	2302      	movs	r3, #2
 800a70a:	e034      	b.n	800a776 <HAL_UART_Receive_DMA+0x9e>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a18      	ldr	r2, [pc, #96]	; (800a780 <HAL_UART_Receive_DMA+0xa8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d01f      	beq.n	800a764 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d018      	beq.n	800a764 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	613b      	str	r3, [r7, #16]
   return(result);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	623b      	str	r3, [r7, #32]
 800a752:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	69f9      	ldr	r1, [r7, #28]
 800a756:	6a3a      	ldr	r2, [r7, #32]
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	461a      	mov	r2, r3
 800a768:	68b9      	ldr	r1, [r7, #8]
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 fc6e 	bl	800b04c <UART_Start_Receive_DMA>
 800a770:	4603      	mov	r3, r0
 800a772:	e000      	b.n	800a776 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a774:	2302      	movs	r3, #2
  }
}
 800a776:	4618      	mov	r0, r3
 800a778:	3728      	adds	r7, #40	; 0x28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	40008000 	.word	0x40008000

0800a784 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7d8:	b5b0      	push	{r4, r5, r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4bad      	ldr	r3, [pc, #692]	; (800aab8 <UART_SetConfig+0x2e0>)
 800a804:	4013      	ands	r3, r2
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6812      	ldr	r2, [r2, #0]
 800a80a:	69f9      	ldr	r1, [r7, #28]
 800a80c:	430b      	orrs	r3, r1
 800a80e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4aa2      	ldr	r2, [pc, #648]	; (800aabc <UART_SetConfig+0x2e4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d004      	beq.n	800a840 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	430a      	orrs	r2, r1
 800a852:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a99      	ldr	r2, [pc, #612]	; (800aac0 <UART_SetConfig+0x2e8>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d121      	bne.n	800a8a2 <UART_SetConfig+0xca>
 800a85e:	4b99      	ldr	r3, [pc, #612]	; (800aac4 <UART_SetConfig+0x2ec>)
 800a860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d817      	bhi.n	800a89c <UART_SetConfig+0xc4>
 800a86c:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <UART_SetConfig+0x9c>)
 800a86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a872:	bf00      	nop
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a891 	.word	0x0800a891
 800a87c:	0800a88b 	.word	0x0800a88b
 800a880:	0800a897 	.word	0x0800a897
 800a884:	2301      	movs	r3, #1
 800a886:	76fb      	strb	r3, [r7, #27]
 800a888:	e0e7      	b.n	800aa5a <UART_SetConfig+0x282>
 800a88a:	2302      	movs	r3, #2
 800a88c:	76fb      	strb	r3, [r7, #27]
 800a88e:	e0e4      	b.n	800aa5a <UART_SetConfig+0x282>
 800a890:	2304      	movs	r3, #4
 800a892:	76fb      	strb	r3, [r7, #27]
 800a894:	e0e1      	b.n	800aa5a <UART_SetConfig+0x282>
 800a896:	2308      	movs	r3, #8
 800a898:	76fb      	strb	r3, [r7, #27]
 800a89a:	e0de      	b.n	800aa5a <UART_SetConfig+0x282>
 800a89c:	2310      	movs	r3, #16
 800a89e:	76fb      	strb	r3, [r7, #27]
 800a8a0:	e0db      	b.n	800aa5a <UART_SetConfig+0x282>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a88      	ldr	r2, [pc, #544]	; (800aac8 <UART_SetConfig+0x2f0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d132      	bne.n	800a912 <UART_SetConfig+0x13a>
 800a8ac:	4b85      	ldr	r3, [pc, #532]	; (800aac4 <UART_SetConfig+0x2ec>)
 800a8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b2:	f003 030c 	and.w	r3, r3, #12
 800a8b6:	2b0c      	cmp	r3, #12
 800a8b8:	d828      	bhi.n	800a90c <UART_SetConfig+0x134>
 800a8ba:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <UART_SetConfig+0xe8>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a8f5 	.word	0x0800a8f5
 800a8c4:	0800a90d 	.word	0x0800a90d
 800a8c8:	0800a90d 	.word	0x0800a90d
 800a8cc:	0800a90d 	.word	0x0800a90d
 800a8d0:	0800a901 	.word	0x0800a901
 800a8d4:	0800a90d 	.word	0x0800a90d
 800a8d8:	0800a90d 	.word	0x0800a90d
 800a8dc:	0800a90d 	.word	0x0800a90d
 800a8e0:	0800a8fb 	.word	0x0800a8fb
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a90d 	.word	0x0800a90d
 800a8ec:	0800a90d 	.word	0x0800a90d
 800a8f0:	0800a907 	.word	0x0800a907
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	76fb      	strb	r3, [r7, #27]
 800a8f8:	e0af      	b.n	800aa5a <UART_SetConfig+0x282>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	76fb      	strb	r3, [r7, #27]
 800a8fe:	e0ac      	b.n	800aa5a <UART_SetConfig+0x282>
 800a900:	2304      	movs	r3, #4
 800a902:	76fb      	strb	r3, [r7, #27]
 800a904:	e0a9      	b.n	800aa5a <UART_SetConfig+0x282>
 800a906:	2308      	movs	r3, #8
 800a908:	76fb      	strb	r3, [r7, #27]
 800a90a:	e0a6      	b.n	800aa5a <UART_SetConfig+0x282>
 800a90c:	2310      	movs	r3, #16
 800a90e:	76fb      	strb	r3, [r7, #27]
 800a910:	e0a3      	b.n	800aa5a <UART_SetConfig+0x282>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a6d      	ldr	r2, [pc, #436]	; (800aacc <UART_SetConfig+0x2f4>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d120      	bne.n	800a95e <UART_SetConfig+0x186>
 800a91c:	4b69      	ldr	r3, [pc, #420]	; (800aac4 <UART_SetConfig+0x2ec>)
 800a91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a922:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a926:	2b30      	cmp	r3, #48	; 0x30
 800a928:	d013      	beq.n	800a952 <UART_SetConfig+0x17a>
 800a92a:	2b30      	cmp	r3, #48	; 0x30
 800a92c:	d814      	bhi.n	800a958 <UART_SetConfig+0x180>
 800a92e:	2b20      	cmp	r3, #32
 800a930:	d009      	beq.n	800a946 <UART_SetConfig+0x16e>
 800a932:	2b20      	cmp	r3, #32
 800a934:	d810      	bhi.n	800a958 <UART_SetConfig+0x180>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <UART_SetConfig+0x168>
 800a93a:	2b10      	cmp	r3, #16
 800a93c:	d006      	beq.n	800a94c <UART_SetConfig+0x174>
 800a93e:	e00b      	b.n	800a958 <UART_SetConfig+0x180>
 800a940:	2300      	movs	r3, #0
 800a942:	76fb      	strb	r3, [r7, #27]
 800a944:	e089      	b.n	800aa5a <UART_SetConfig+0x282>
 800a946:	2302      	movs	r3, #2
 800a948:	76fb      	strb	r3, [r7, #27]
 800a94a:	e086      	b.n	800aa5a <UART_SetConfig+0x282>
 800a94c:	2304      	movs	r3, #4
 800a94e:	76fb      	strb	r3, [r7, #27]
 800a950:	e083      	b.n	800aa5a <UART_SetConfig+0x282>
 800a952:	2308      	movs	r3, #8
 800a954:	76fb      	strb	r3, [r7, #27]
 800a956:	e080      	b.n	800aa5a <UART_SetConfig+0x282>
 800a958:	2310      	movs	r3, #16
 800a95a:	76fb      	strb	r3, [r7, #27]
 800a95c:	e07d      	b.n	800aa5a <UART_SetConfig+0x282>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a5b      	ldr	r2, [pc, #364]	; (800aad0 <UART_SetConfig+0x2f8>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d120      	bne.n	800a9aa <UART_SetConfig+0x1d2>
 800a968:	4b56      	ldr	r3, [pc, #344]	; (800aac4 <UART_SetConfig+0x2ec>)
 800a96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a972:	2bc0      	cmp	r3, #192	; 0xc0
 800a974:	d013      	beq.n	800a99e <UART_SetConfig+0x1c6>
 800a976:	2bc0      	cmp	r3, #192	; 0xc0
 800a978:	d814      	bhi.n	800a9a4 <UART_SetConfig+0x1cc>
 800a97a:	2b80      	cmp	r3, #128	; 0x80
 800a97c:	d009      	beq.n	800a992 <UART_SetConfig+0x1ba>
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d810      	bhi.n	800a9a4 <UART_SetConfig+0x1cc>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <UART_SetConfig+0x1b4>
 800a986:	2b40      	cmp	r3, #64	; 0x40
 800a988:	d006      	beq.n	800a998 <UART_SetConfig+0x1c0>
 800a98a:	e00b      	b.n	800a9a4 <UART_SetConfig+0x1cc>
 800a98c:	2300      	movs	r3, #0
 800a98e:	76fb      	strb	r3, [r7, #27]
 800a990:	e063      	b.n	800aa5a <UART_SetConfig+0x282>
 800a992:	2302      	movs	r3, #2
 800a994:	76fb      	strb	r3, [r7, #27]
 800a996:	e060      	b.n	800aa5a <UART_SetConfig+0x282>
 800a998:	2304      	movs	r3, #4
 800a99a:	76fb      	strb	r3, [r7, #27]
 800a99c:	e05d      	b.n	800aa5a <UART_SetConfig+0x282>
 800a99e:	2308      	movs	r3, #8
 800a9a0:	76fb      	strb	r3, [r7, #27]
 800a9a2:	e05a      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	76fb      	strb	r3, [r7, #27]
 800a9a8:	e057      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a49      	ldr	r2, [pc, #292]	; (800aad4 <UART_SetConfig+0x2fc>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d125      	bne.n	800aa00 <UART_SetConfig+0x228>
 800a9b4:	4b43      	ldr	r3, [pc, #268]	; (800aac4 <UART_SetConfig+0x2ec>)
 800a9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9c2:	d017      	beq.n	800a9f4 <UART_SetConfig+0x21c>
 800a9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9c8:	d817      	bhi.n	800a9fa <UART_SetConfig+0x222>
 800a9ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9ce:	d00b      	beq.n	800a9e8 <UART_SetConfig+0x210>
 800a9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d4:	d811      	bhi.n	800a9fa <UART_SetConfig+0x222>
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <UART_SetConfig+0x20a>
 800a9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9de:	d006      	beq.n	800a9ee <UART_SetConfig+0x216>
 800a9e0:	e00b      	b.n	800a9fa <UART_SetConfig+0x222>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	76fb      	strb	r3, [r7, #27]
 800a9e6:	e038      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	76fb      	strb	r3, [r7, #27]
 800a9ec:	e035      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9ee:	2304      	movs	r3, #4
 800a9f0:	76fb      	strb	r3, [r7, #27]
 800a9f2:	e032      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	76fb      	strb	r3, [r7, #27]
 800a9f8:	e02f      	b.n	800aa5a <UART_SetConfig+0x282>
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	76fb      	strb	r3, [r7, #27]
 800a9fe:	e02c      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a2d      	ldr	r2, [pc, #180]	; (800aabc <UART_SetConfig+0x2e4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d125      	bne.n	800aa56 <UART_SetConfig+0x27e>
 800aa0a:	4b2e      	ldr	r3, [pc, #184]	; (800aac4 <UART_SetConfig+0x2ec>)
 800aa0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa18:	d017      	beq.n	800aa4a <UART_SetConfig+0x272>
 800aa1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa1e:	d817      	bhi.n	800aa50 <UART_SetConfig+0x278>
 800aa20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa24:	d00b      	beq.n	800aa3e <UART_SetConfig+0x266>
 800aa26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa2a:	d811      	bhi.n	800aa50 <UART_SetConfig+0x278>
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <UART_SetConfig+0x260>
 800aa30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa34:	d006      	beq.n	800aa44 <UART_SetConfig+0x26c>
 800aa36:	e00b      	b.n	800aa50 <UART_SetConfig+0x278>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	76fb      	strb	r3, [r7, #27]
 800aa3c:	e00d      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	76fb      	strb	r3, [r7, #27]
 800aa42:	e00a      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa44:	2304      	movs	r3, #4
 800aa46:	76fb      	strb	r3, [r7, #27]
 800aa48:	e007      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	76fb      	strb	r3, [r7, #27]
 800aa4e:	e004      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa50:	2310      	movs	r3, #16
 800aa52:	76fb      	strb	r3, [r7, #27]
 800aa54:	e001      	b.n	800aa5a <UART_SetConfig+0x282>
 800aa56:	2310      	movs	r3, #16
 800aa58:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a17      	ldr	r2, [pc, #92]	; (800aabc <UART_SetConfig+0x2e4>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	f040 8087 	bne.w	800ab74 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa66:	7efb      	ldrb	r3, [r7, #27]
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d837      	bhi.n	800aadc <UART_SetConfig+0x304>
 800aa6c:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <UART_SetConfig+0x29c>)
 800aa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800aa99 	.word	0x0800aa99
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aadd 	.word	0x0800aadd
 800aa84:	0800aaa7 	.word	0x0800aaa7
 800aa88:	0800aadd 	.word	0x0800aadd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aaaf 	.word	0x0800aaaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa98:	f7fe f8b8 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800aa9c:	6178      	str	r0, [r7, #20]
        break;
 800aa9e:	e022      	b.n	800aae6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaa0:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <UART_SetConfig+0x300>)
 800aaa2:	617b      	str	r3, [r7, #20]
        break;
 800aaa4:	e01f      	b.n	800aae6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaa6:	f7fe f819 	bl	8008adc <HAL_RCC_GetSysClockFreq>
 800aaaa:	6178      	str	r0, [r7, #20]
        break;
 800aaac:	e01b      	b.n	800aae6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab2:	617b      	str	r3, [r7, #20]
        break;
 800aab4:	e017      	b.n	800aae6 <UART_SetConfig+0x30e>
 800aab6:	bf00      	nop
 800aab8:	efff69f3 	.word	0xefff69f3
 800aabc:	40008000 	.word	0x40008000
 800aac0:	40013800 	.word	0x40013800
 800aac4:	40021000 	.word	0x40021000
 800aac8:	40004400 	.word	0x40004400
 800aacc:	40004800 	.word	0x40004800
 800aad0:	40004c00 	.word	0x40004c00
 800aad4:	40005000 	.word	0x40005000
 800aad8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	76bb      	strb	r3, [r7, #26]
        break;
 800aae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80f1 	beq.w	800acd0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d305      	bcc.n	800ab0a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d902      	bls.n	800ab10 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	76bb      	strb	r3, [r7, #26]
 800ab0e:	e0df      	b.n	800acd0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f04f 0100 	mov.w	r1, #0
 800ab18:	f04f 0200 	mov.w	r2, #0
 800ab1c:	f04f 0300 	mov.w	r3, #0
 800ab20:	020b      	lsls	r3, r1, #8
 800ab22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab26:	0202      	lsls	r2, r0, #8
 800ab28:	6879      	ldr	r1, [r7, #4]
 800ab2a:	6849      	ldr	r1, [r1, #4]
 800ab2c:	0849      	lsrs	r1, r1, #1
 800ab2e:	4608      	mov	r0, r1
 800ab30:	f04f 0100 	mov.w	r1, #0
 800ab34:	1814      	adds	r4, r2, r0
 800ab36:	eb43 0501 	adc.w	r5, r3, r1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f6 f87e 	bl	8000c48 <__aeabi_uldivmod>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4613      	mov	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab5a:	d308      	bcc.n	800ab6e <UART_SetConfig+0x396>
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab62:	d204      	bcs.n	800ab6e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	60da      	str	r2, [r3, #12]
 800ab6c:	e0b0      	b.n	800acd0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	76bb      	strb	r3, [r7, #26]
 800ab72:	e0ad      	b.n	800acd0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab7c:	d15b      	bne.n	800ac36 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800ab7e:	7efb      	ldrb	r3, [r7, #27]
 800ab80:	2b08      	cmp	r3, #8
 800ab82:	d828      	bhi.n	800abd6 <UART_SetConfig+0x3fe>
 800ab84:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <UART_SetConfig+0x3b4>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800abb1 	.word	0x0800abb1
 800ab90:	0800abb9 	.word	0x0800abb9
 800ab94:	0800abc1 	.word	0x0800abc1
 800ab98:	0800abd7 	.word	0x0800abd7
 800ab9c:	0800abc7 	.word	0x0800abc7
 800aba0:	0800abd7 	.word	0x0800abd7
 800aba4:	0800abd7 	.word	0x0800abd7
 800aba8:	0800abd7 	.word	0x0800abd7
 800abac:	0800abcf 	.word	0x0800abcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb0:	f7fe f82c 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800abb4:	6178      	str	r0, [r7, #20]
        break;
 800abb6:	e013      	b.n	800abe0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb8:	f7fe f83e 	bl	8008c38 <HAL_RCC_GetPCLK2Freq>
 800abbc:	6178      	str	r0, [r7, #20]
        break;
 800abbe:	e00f      	b.n	800abe0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc0:	4b49      	ldr	r3, [pc, #292]	; (800ace8 <UART_SetConfig+0x510>)
 800abc2:	617b      	str	r3, [r7, #20]
        break;
 800abc4:	e00c      	b.n	800abe0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc6:	f7fd ff89 	bl	8008adc <HAL_RCC_GetSysClockFreq>
 800abca:	6178      	str	r0, [r7, #20]
        break;
 800abcc:	e008      	b.n	800abe0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abd2:	617b      	str	r3, [r7, #20]
        break;
 800abd4:	e004      	b.n	800abe0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	76bb      	strb	r3, [r7, #26]
        break;
 800abde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d074      	beq.n	800acd0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	005a      	lsls	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	085b      	lsrs	r3, r3, #1
 800abf0:	441a      	add	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2b0f      	cmp	r3, #15
 800ac00:	d916      	bls.n	800ac30 <UART_SetConfig+0x458>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac08:	d212      	bcs.n	800ac30 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f023 030f 	bic.w	r3, r3, #15
 800ac12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	89fa      	ldrh	r2, [r7, #14]
 800ac2c:	60da      	str	r2, [r3, #12]
 800ac2e:	e04f      	b.n	800acd0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	76bb      	strb	r3, [r7, #26]
 800ac34:	e04c      	b.n	800acd0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac36:	7efb      	ldrb	r3, [r7, #27]
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	d828      	bhi.n	800ac8e <UART_SetConfig+0x4b6>
 800ac3c:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <UART_SetConfig+0x46c>)
 800ac3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac42:	bf00      	nop
 800ac44:	0800ac69 	.word	0x0800ac69
 800ac48:	0800ac71 	.word	0x0800ac71
 800ac4c:	0800ac79 	.word	0x0800ac79
 800ac50:	0800ac8f 	.word	0x0800ac8f
 800ac54:	0800ac7f 	.word	0x0800ac7f
 800ac58:	0800ac8f 	.word	0x0800ac8f
 800ac5c:	0800ac8f 	.word	0x0800ac8f
 800ac60:	0800ac8f 	.word	0x0800ac8f
 800ac64:	0800ac87 	.word	0x0800ac87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac68:	f7fd ffd0 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800ac6c:	6178      	str	r0, [r7, #20]
        break;
 800ac6e:	e013      	b.n	800ac98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac70:	f7fd ffe2 	bl	8008c38 <HAL_RCC_GetPCLK2Freq>
 800ac74:	6178      	str	r0, [r7, #20]
        break;
 800ac76:	e00f      	b.n	800ac98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac78:	4b1b      	ldr	r3, [pc, #108]	; (800ace8 <UART_SetConfig+0x510>)
 800ac7a:	617b      	str	r3, [r7, #20]
        break;
 800ac7c:	e00c      	b.n	800ac98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac7e:	f7fd ff2d 	bl	8008adc <HAL_RCC_GetSysClockFreq>
 800ac82:	6178      	str	r0, [r7, #20]
        break;
 800ac84:	e008      	b.n	800ac98 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac8a:	617b      	str	r3, [r7, #20]
        break;
 800ac8c:	e004      	b.n	800ac98 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	76bb      	strb	r3, [r7, #26]
        break;
 800ac96:	bf00      	nop
    }

    if (pclk != 0U)
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d018      	beq.n	800acd0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	085a      	lsrs	r2, r3, #1
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	441a      	add	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b0f      	cmp	r3, #15
 800acb6:	d909      	bls.n	800accc <UART_SetConfig+0x4f4>
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbe:	d205      	bcs.n	800accc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60da      	str	r2, [r3, #12]
 800acca:	e001      	b.n	800acd0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800acdc:	7ebb      	ldrb	r3, [r7, #26]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bdb0      	pop	{r4, r5, r7, pc}
 800ace6:	bf00      	nop
 800ace8:	00f42400 	.word	0x00f42400

0800acec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00a      	beq.n	800ad5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00a      	beq.n	800ad9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01a      	beq.n	800ae02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adea:	d10a      	bne.n	800ae02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	430a      	orrs	r2, r1
 800ae22:	605a      	str	r2, [r3, #4]
  }
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae40:	f7fb fc0e 	bl	8006660 <HAL_GetTick>
 800ae44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	2b08      	cmp	r3, #8
 800ae52:	d10e      	bne.n	800ae72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f82d 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e023      	b.n	800aeba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d10e      	bne.n	800ae9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f817 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e00d      	b.n	800aeba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b09c      	sub	sp, #112	; 0x70
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed2:	e0a5      	b.n	800b020 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	f000 80a1 	beq.w	800b020 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aede:	f7fb fbbf 	bl	8006660 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d302      	bcc.n	800aef4 <UART_WaitOnFlagUntilTimeout+0x32>
 800aeee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d13e      	bne.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af08:	667b      	str	r3, [r7, #100]	; 0x64
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e6      	bne.n	800aef4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	f023 0301 	bic.w	r3, r3, #1
 800af3c:	663b      	str	r3, [r7, #96]	; 0x60
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af46:	64ba      	str	r2, [r7, #72]	; 0x48
 800af48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e5      	bne.n	800af26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2220      	movs	r2, #32
 800af5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e067      	b.n	800b042 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0304 	and.w	r3, r3, #4
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d04f      	beq.n	800b020 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af8e:	d147      	bne.n	800b020 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb8:	637b      	str	r3, [r7, #52]	; 0x34
 800afba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e6      	bne.n	800af9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3308      	adds	r3, #8
 800afd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	613b      	str	r3, [r7, #16]
   return(result);
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	f023 0301 	bic.w	r3, r3, #1
 800afe2:	66bb      	str	r3, [r7, #104]	; 0x68
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3308      	adds	r3, #8
 800afea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afec:	623a      	str	r2, [r7, #32]
 800afee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff0:	69f9      	ldr	r1, [r7, #28]
 800aff2:	6a3a      	ldr	r2, [r7, #32]
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	61bb      	str	r3, [r7, #24]
   return(result);
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e5      	bne.n	800afcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2220      	movs	r2, #32
 800b00a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e010      	b.n	800b042 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	69da      	ldr	r2, [r3, #28]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4013      	ands	r3, r2
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bf0c      	ite	eq
 800b030:	2301      	moveq	r3, #1
 800b032:	2300      	movne	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	f43f af4a 	beq.w	800aed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3770      	adds	r7, #112	; 0x70
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b096      	sub	sp, #88	; 0x58
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	88fa      	ldrh	r2, [r7, #6]
 800b064:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2222      	movs	r2, #34	; 0x22
 800b074:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d02b      	beq.n	800b0d6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b082:	4a42      	ldr	r2, [pc, #264]	; (800b18c <UART_Start_Receive_DMA+0x140>)
 800b084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08a:	4a41      	ldr	r2, [pc, #260]	; (800b190 <UART_Start_Receive_DMA+0x144>)
 800b08c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b092:	4a40      	ldr	r2, [pc, #256]	; (800b194 <UART_Start_Receive_DMA+0x148>)
 800b094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09a:	2200      	movs	r2, #0
 800b09c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3324      	adds	r3, #36	; 0x24
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	f7fb fd95 	bl	8006be0 <HAL_DMA_Start_IT>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00c      	beq.n	800b0d6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2210      	movs	r2, #16
 800b0c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e055      	b.n	800b182 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d018      	beq.n	800b118 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0fa:	657b      	str	r3, [r7, #84]	; 0x54
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b104:	64bb      	str	r3, [r7, #72]	; 0x48
 800b106:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b10a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e6      	bne.n	800b0e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	653b      	str	r3, [r7, #80]	; 0x50
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3308      	adds	r3, #8
 800b136:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b138:	637a      	str	r2, [r7, #52]	; 0x34
 800b13a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e5      	bne.n	800b118 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3308      	adds	r3, #8
 800b152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	613b      	str	r3, [r7, #16]
   return(result);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b162:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3308      	adds	r3, #8
 800b16a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b16c:	623a      	str	r2, [r7, #32]
 800b16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	69f9      	ldr	r1, [r7, #28]
 800b172:	6a3a      	ldr	r2, [r7, #32]
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	61bb      	str	r3, [r7, #24]
   return(result);
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e5      	bne.n	800b14c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3758      	adds	r7, #88	; 0x58
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0800b2ab 	.word	0x0800b2ab
 800b190:	0800b3cf 	.word	0x0800b3cf
 800b194:	0800b407 	.word	0x0800b407

0800b198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b089      	sub	sp, #36	; 0x24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6979      	ldr	r1, [r7, #20]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b1d8:	bf00      	nop
 800b1da:	3724      	adds	r7, #36	; 0x24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b095      	sub	sp, #84	; 0x54
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f4:	e853 3f00 	ldrex	r3, [r3]
 800b1f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b200:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20a:	643b      	str	r3, [r7, #64]	; 0x40
 800b20c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b212:	e841 2300 	strex	r3, r2, [r1]
 800b216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1e6      	bne.n	800b1ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	e853 3f00 	ldrex	r3, [r3]
 800b22c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	f023 0301 	bic.w	r3, r3, #1
 800b234:	64bb      	str	r3, [r7, #72]	; 0x48
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b23e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e5      	bne.n	800b21e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b256:	2b01      	cmp	r3, #1
 800b258:	d118      	bne.n	800b28c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	60bb      	str	r3, [r7, #8]
   return(result);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f023 0310 	bic.w	r3, r3, #16
 800b26e:	647b      	str	r3, [r7, #68]	; 0x44
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6979      	ldr	r1, [r7, #20]
 800b27e:	69ba      	ldr	r2, [r7, #24]
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	613b      	str	r3, [r7, #16]
   return(result);
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e6      	bne.n	800b25a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2220      	movs	r2, #32
 800b290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b29e:	bf00      	nop
 800b2a0:	3754      	adds	r7, #84	; 0x54
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b09c      	sub	sp, #112	; 0x70
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d170      	bne.n	800b3a8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e6      	bne.n	800b2ce <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3308      	adds	r3, #8
 800b306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	667b      	str	r3, [r7, #100]	; 0x64
 800b318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3308      	adds	r3, #8
 800b31e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b320:	647a      	str	r2, [r7, #68]	; 0x44
 800b322:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e5      	bne.n	800b300 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3308      	adds	r3, #8
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	623b      	str	r3, [r7, #32]
   return(result);
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b34a:	663b      	str	r3, [r7, #96]	; 0x60
 800b34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b354:	633a      	str	r2, [r7, #48]	; 0x30
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b35a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e5      	bne.n	800b334 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b36a:	2220      	movs	r2, #32
 800b36c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b372:	2b01      	cmp	r3, #1
 800b374:	d118      	bne.n	800b3a8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	e853 3f00 	ldrex	r3, [r3]
 800b382:	60fb      	str	r3, [r7, #12]
   return(result);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0310 	bic.w	r3, r3, #16
 800b38a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	461a      	mov	r2, r3
 800b392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b398:	69b9      	ldr	r1, [r7, #24]
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	e841 2300 	strex	r3, r2, [r1]
 800b3a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1e6      	bne.n	800b376 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d107      	bne.n	800b3c0 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3ba:	f7ff fa01 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3be:	e002      	b.n	800b3c6 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b3c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3c2:	f7ff f9df 	bl	800a784 <HAL_UART_RxCpltCallback>
}
 800b3c6:	bf00      	nop
 800b3c8:	3770      	adds	r7, #112	; 0x70
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d109      	bne.n	800b3f8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7ff f9e5 	bl	800a7c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3f6:	e002      	b.n	800b3fe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff f9cd 	bl	800a798 <HAL_UART_RxHalfCpltCallback>
}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b086      	sub	sp, #24
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b412:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b418:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42a:	2b80      	cmp	r3, #128	; 0x80
 800b42c:	d109      	bne.n	800b442 <UART_DMAError+0x3c>
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2b21      	cmp	r3, #33	; 0x21
 800b432:	d106      	bne.n	800b442 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2200      	movs	r2, #0
 800b438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b43c:	6978      	ldr	r0, [r7, #20]
 800b43e:	f7ff feab 	bl	800b198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d109      	bne.n	800b464 <UART_DMAError+0x5e>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b22      	cmp	r3, #34	; 0x22
 800b454:	d106      	bne.n	800b464 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2200      	movs	r2, #0
 800b45a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b45e:	6978      	ldr	r0, [r7, #20]
 800b460:	f7ff fec0 	bl	800b1e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b46a:	f043 0210 	orr.w	r2, r3, #16
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b474:	6978      	ldr	r0, [r7, #20]
 800b476:	f7ff f999 	bl	800a7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b47a:	bf00      	nop
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <DataHist_parameters>:
 800b484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b48a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b48c:	7020      	strb	r0, [r4, #0]
 800b48e:	6808      	ldr	r0, [r1, #0]
 800b490:	6060      	str	r0, [r4, #4]
 800b492:	6848      	ldr	r0, [r1, #4]
 800b494:	60a0      	str	r0, [r4, #8]
 800b496:	6888      	ldr	r0, [r1, #8]
 800b498:	60e0      	str	r0, [r4, #12]
 800b49a:	68c8      	ldr	r0, [r1, #12]
 800b49c:	6120      	str	r0, [r4, #16]
 800b49e:	6908      	ldr	r0, [r1, #16]
 800b4a0:	6160      	str	r0, [r4, #20]
 800b4a2:	6948      	ldr	r0, [r1, #20]
 800b4a4:	61a0      	str	r0, [r4, #24]
 800b4a6:	6988      	ldr	r0, [r1, #24]
 800b4a8:	61e0      	str	r0, [r4, #28]
 800b4aa:	69c8      	ldr	r0, [r1, #28]
 800b4ac:	6220      	str	r0, [r4, #32]
 800b4ae:	6a09      	ldr	r1, [r1, #32]
 800b4b0:	6261      	str	r1, [r4, #36]	; 0x24
 800b4b2:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b4b6:	8811      	ldrh	r1, [r2, #0]
 800b4b8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b4bc:	8521      	strh	r1, [r4, #40]	; 0x28
 800b4be:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b4c2:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b4c6:	f04f 0e00 	mov.w	lr, #0
 800b4ca:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b4ce:	4641      	mov	r1, r8
 800b4d0:	f852 0b04 	ldr.w	r0, [r2], #4
 800b4d4:	f841 0b04 	str.w	r0, [r1], #4
 800b4d8:	4562      	cmp	r2, ip
 800b4da:	d1f9      	bne.n	800b4d0 <DataHist_parameters+0x4c>
 800b4dc:	f10e 0e1e 	add.w	lr, lr, #30
 800b4e0:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b4e4:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b4e8:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b4ec:	d1ed      	bne.n	800b4ca <DataHist_parameters+0x46>
 800b4ee:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b4f2:	881a      	ldrh	r2, [r3, #0]
 800b4f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b4f8:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b4fc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b500:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b504:	f04f 0c00 	mov.w	ip, #0
 800b508:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b50c:	4672      	mov	r2, lr
 800b50e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b512:	f842 1b04 	str.w	r1, [r2], #4
 800b516:	4283      	cmp	r3, r0
 800b518:	d1f9      	bne.n	800b50e <DataHist_parameters+0x8a>
 800b51a:	f10c 0c1e 	add.w	ip, ip, #30
 800b51e:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b522:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b526:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b52a:	d1ed      	bne.n	800b508 <DataHist_parameters+0x84>
 800b52c:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b530:	883b      	ldrh	r3, [r7, #0]
 800b532:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b536:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b53a:	3780      	adds	r7, #128	; 0x80
 800b53c:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b540:	2000      	movs	r0, #0
 800b542:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b546:	4662      	mov	r2, ip
 800b548:	f853 1b04 	ldr.w	r1, [r3], #4
 800b54c:	f842 1b04 	str.w	r1, [r2], #4
 800b550:	42bb      	cmp	r3, r7
 800b552:	d1f9      	bne.n	800b548 <DataHist_parameters+0xc4>
 800b554:	301e      	adds	r0, #30
 800b556:	285a      	cmp	r0, #90	; 0x5a
 800b558:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b55c:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b560:	d1ef      	bne.n	800b542 <DataHist_parameters+0xbe>
 800b562:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b566:	8833      	ldrh	r3, [r6, #0]
 800b568:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b56c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b570:	3680      	adds	r6, #128	; 0x80
 800b572:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b576:	2000      	movs	r0, #0
 800b578:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b57c:	463a      	mov	r2, r7
 800b57e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b582:	f842 1b04 	str.w	r1, [r2], #4
 800b586:	429e      	cmp	r6, r3
 800b588:	d1f9      	bne.n	800b57e <DataHist_parameters+0xfa>
 800b58a:	301e      	adds	r0, #30
 800b58c:	285a      	cmp	r0, #90	; 0x5a
 800b58e:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b592:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b596:	d1ef      	bne.n	800b578 <DataHist_parameters+0xf4>
 800b598:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b59c:	69aa      	ldr	r2, [r5, #24]
 800b59e:	f8c3 c004 	str.w	ip, [r3, #4]
 800b5a2:	782b      	ldrb	r3, [r5, #0]
 800b5a4:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b5a8:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b5ac:	619a      	str	r2, [r3, #24]
 800b5ae:	686a      	ldr	r2, [r5, #4]
 800b5b0:	605a      	str	r2, [r3, #4]
 800b5b2:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b5b6:	68a9      	ldr	r1, [r5, #8]
 800b5b8:	6011      	str	r1, [r2, #0]
 800b5ba:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b5be:	68e9      	ldr	r1, [r5, #12]
 800b5c0:	6011      	str	r1, [r2, #0]
 800b5c2:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b5c6:	6929      	ldr	r1, [r5, #16]
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b5ce:	6969      	ldr	r1, [r5, #20]
 800b5d0:	6011      	str	r1, [r2, #0]
 800b5d2:	69ea      	ldr	r2, [r5, #28]
 800b5d4:	61da      	str	r2, [r3, #28]
 800b5d6:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b5da:	6a2a      	ldr	r2, [r5, #32]
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b5e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b5ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b5f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5fa:	bf00      	nop

0800b5fc <rotVect>:
 800b5fc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b600:	ed92 5a01 	vldr	s10, [r2, #4]
 800b604:	edd2 5a00 	vldr	s11, [r2]
 800b608:	ed92 6a02 	vldr	s12, [r2, #8]
 800b60c:	ee07 3a90 	vmov	s15, r3
 800b610:	f991 3000 	ldrsb.w	r3, [r1]
 800b614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b618:	ee06 3a90 	vmov	s13, r3
 800b61c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b620:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b624:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b628:	ee07 3a10 	vmov	s14, r3
 800b62c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b630:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b634:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b638:	edc0 7a00 	vstr	s15, [r0]
 800b63c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b640:	ed92 5a01 	vldr	s10, [r2, #4]
 800b644:	edd2 5a00 	vldr	s11, [r2]
 800b648:	ed92 6a02 	vldr	s12, [r2, #8]
 800b64c:	ee07 3a90 	vmov	s15, r3
 800b650:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b658:	ee06 3a90 	vmov	s13, r3
 800b65c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b660:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b664:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b668:	ee07 3a10 	vmov	s14, r3
 800b66c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b670:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b674:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b678:	edc0 7a01 	vstr	s15, [r0, #4]
 800b67c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b680:	ed92 5a01 	vldr	s10, [r2, #4]
 800b684:	edd2 5a00 	vldr	s11, [r2]
 800b688:	ed92 6a02 	vldr	s12, [r2, #8]
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b698:	ee06 3a90 	vmov	s13, r3
 800b69c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b6a0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b6a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b6a8:	ee07 3a10 	vmov	s14, r3
 800b6ac:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b6b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b6b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b6b8:	edc0 7a02 	vstr	s15, [r0, #8]
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop

0800b6c0 <findAxis>:
 800b6c0:	f990 3000 	ldrsb.w	r3, [r0]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d027      	beq.n	800b718 <findAxis+0x58>
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	d00e      	beq.n	800b6ea <findAxis+0x2a>
 800b6cc:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d053      	beq.n	800b77c <findAxis+0xbc>
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	d048      	beq.n	800b76a <findAxis+0xaa>
 800b6d8:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d053      	beq.n	800b788 <findAxis+0xc8>
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	d104      	bne.n	800b6ee <findAxis+0x2e>
 800b6e4:	2364      	movs	r3, #100	; 0x64
 800b6e6:	700b      	strb	r3, [r1, #0]
 800b6e8:	e001      	b.n	800b6ee <findAxis+0x2e>
 800b6ea:	2377      	movs	r3, #119	; 0x77
 800b6ec:	700b      	strb	r3, [r1, #0]
 800b6ee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d016      	beq.n	800b724 <findAxis+0x64>
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	d02e      	beq.n	800b758 <findAxis+0x98>
 800b6fa:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d039      	beq.n	800b776 <findAxis+0xb6>
 800b702:	3301      	adds	r3, #1
 800b704:	d034      	beq.n	800b770 <findAxis+0xb0>
 800b706:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d03f      	beq.n	800b78e <findAxis+0xce>
 800b70e:	3301      	adds	r3, #1
 800b710:	d10a      	bne.n	800b728 <findAxis+0x68>
 800b712:	2364      	movs	r3, #100	; 0x64
 800b714:	704b      	strb	r3, [r1, #1]
 800b716:	e007      	b.n	800b728 <findAxis+0x68>
 800b718:	2365      	movs	r3, #101	; 0x65
 800b71a:	700b      	strb	r3, [r1, #0]
 800b71c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d1e8      	bne.n	800b6f6 <findAxis+0x36>
 800b724:	2365      	movs	r3, #101	; 0x65
 800b726:	704b      	strb	r3, [r1, #1]
 800b728:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d010      	beq.n	800b752 <findAxis+0x92>
 800b730:	3301      	adds	r3, #1
 800b732:	d014      	beq.n	800b75e <findAxis+0x9e>
 800b734:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d022      	beq.n	800b782 <findAxis+0xc2>
 800b73c:	3301      	adds	r3, #1
 800b73e:	d011      	beq.n	800b764 <findAxis+0xa4>
 800b740:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d025      	beq.n	800b794 <findAxis+0xd4>
 800b748:	3301      	adds	r3, #1
 800b74a:	bf04      	itt	eq
 800b74c:	2364      	moveq	r3, #100	; 0x64
 800b74e:	708b      	strbeq	r3, [r1, #2]
 800b750:	4770      	bx	lr
 800b752:	2365      	movs	r3, #101	; 0x65
 800b754:	708b      	strb	r3, [r1, #2]
 800b756:	4770      	bx	lr
 800b758:	2377      	movs	r3, #119	; 0x77
 800b75a:	704b      	strb	r3, [r1, #1]
 800b75c:	e7e4      	b.n	800b728 <findAxis+0x68>
 800b75e:	2377      	movs	r3, #119	; 0x77
 800b760:	708b      	strb	r3, [r1, #2]
 800b762:	4770      	bx	lr
 800b764:	2373      	movs	r3, #115	; 0x73
 800b766:	708b      	strb	r3, [r1, #2]
 800b768:	4770      	bx	lr
 800b76a:	2373      	movs	r3, #115	; 0x73
 800b76c:	700b      	strb	r3, [r1, #0]
 800b76e:	e7be      	b.n	800b6ee <findAxis+0x2e>
 800b770:	2373      	movs	r3, #115	; 0x73
 800b772:	704b      	strb	r3, [r1, #1]
 800b774:	e7d8      	b.n	800b728 <findAxis+0x68>
 800b776:	236e      	movs	r3, #110	; 0x6e
 800b778:	704b      	strb	r3, [r1, #1]
 800b77a:	e7d5      	b.n	800b728 <findAxis+0x68>
 800b77c:	236e      	movs	r3, #110	; 0x6e
 800b77e:	700b      	strb	r3, [r1, #0]
 800b780:	e7b5      	b.n	800b6ee <findAxis+0x2e>
 800b782:	236e      	movs	r3, #110	; 0x6e
 800b784:	708b      	strb	r3, [r1, #2]
 800b786:	4770      	bx	lr
 800b788:	2375      	movs	r3, #117	; 0x75
 800b78a:	700b      	strb	r3, [r1, #0]
 800b78c:	e7af      	b.n	800b6ee <findAxis+0x2e>
 800b78e:	2375      	movs	r3, #117	; 0x75
 800b790:	704b      	strb	r3, [r1, #1]
 800b792:	e7c9      	b.n	800b728 <findAxis+0x68>
 800b794:	2375      	movs	r3, #117	; 0x75
 800b796:	708b      	strb	r3, [r1, #2]
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	0000      	movs	r0, r0
	...

0800b7a0 <findDirection>:
 800b7a0:	b5d0      	push	{r4, r6, r7, lr}
 800b7a2:	ed2d 8b04 	vpush	{d8-d9}
 800b7a6:	eef0 8ac0 	vabs.f32	s17, s0
 800b7aa:	eeb0 8ae0 	vabs.f32	s16, s1
 800b7ae:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	eeb0 9ac1 	vabs.f32	s18, s2
 800b7bc:	dd36      	ble.n	800b82c <findDirection+0x8c>
 800b7be:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c6:	dd31      	ble.n	800b82c <findDirection+0x8c>
 800b7c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d0:	ee18 0a90 	vmov	r0, s17
 800b7d4:	f340 8094 	ble.w	800b900 <findDirection+0x160>
 800b7d8:	f7f4 feb6 	bl	8000548 <__aeabi_f2d>
 800b7dc:	4606      	mov	r6, r0
 800b7de:	ee18 0a10 	vmov	r0, s16
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	f7f4 feb0 	bl	8000548 <__aeabi_f2d>
 800b7e8:	a387      	add	r3, pc, #540	; (adr r3, 800ba08 <findDirection+0x268>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	f7f5 f98d 	bl	8000b18 <__aeabi_dcmpgt>
 800b7fe:	b188      	cbz	r0, 800b824 <findDirection+0x84>
 800b800:	ee19 0a10 	vmov	r0, s18
 800b804:	f7f4 fea0 	bl	8000548 <__aeabi_f2d>
 800b808:	a37f      	add	r3, pc, #508	; (adr r3, 800ba08 <findDirection+0x268>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fef3 	bl	80005f8 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4630      	mov	r0, r6
 800b818:	4639      	mov	r1, r7
 800b81a:	f7f5 f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800b81e:	2800      	cmp	r0, #0
 800b820:	bf18      	it	ne
 800b822:	2404      	movne	r4, #4
 800b824:	ecbd 8b04 	vpop	{d8-d9}
 800b828:	4620      	mov	r0, r4
 800b82a:	bdd0      	pop	{r4, r6, r7, pc}
 800b82c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b834:	dd32      	ble.n	800b89c <findDirection+0xfc>
 800b836:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b83e:	ee18 0a10 	vmov	r0, s16
 800b842:	f340 8086 	ble.w	800b952 <findDirection+0x1b2>
 800b846:	f7f4 fe7f 	bl	8000548 <__aeabi_f2d>
 800b84a:	4606      	mov	r6, r0
 800b84c:	ee18 0a90 	vmov	r0, s17
 800b850:	460f      	mov	r7, r1
 800b852:	f7f4 fe79 	bl	8000548 <__aeabi_f2d>
 800b856:	a36c      	add	r3, pc, #432	; (adr r3, 800ba08 <findDirection+0x268>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f7f4 fecc 	bl	80005f8 <__aeabi_dmul>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f5 f956 	bl	8000b18 <__aeabi_dcmpgt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d0d9      	beq.n	800b824 <findDirection+0x84>
 800b870:	ee19 0a10 	vmov	r0, s18
 800b874:	f7f4 fe68 	bl	8000548 <__aeabi_f2d>
 800b878:	a363      	add	r3, pc, #396	; (adr r3, 800ba08 <findDirection+0x268>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4630      	mov	r0, r6
 800b888:	4639      	mov	r1, r7
 800b88a:	f7f5 f945 	bl	8000b18 <__aeabi_dcmpgt>
 800b88e:	ecbd 8b04 	vpop	{d8-d9}
 800b892:	2800      	cmp	r0, #0
 800b894:	bf18      	it	ne
 800b896:	2401      	movne	r4, #1
 800b898:	4620      	mov	r0, r4
 800b89a:	bdd0      	pop	{r4, r6, r7, pc}
 800b89c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a4:	ee19 0a10 	vmov	r0, s18
 800b8a8:	dd7f      	ble.n	800b9aa <findDirection+0x20a>
 800b8aa:	f7f4 fe4d 	bl	8000548 <__aeabi_f2d>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	ee18 0a10 	vmov	r0, s16
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	f7f4 fe47 	bl	8000548 <__aeabi_f2d>
 800b8ba:	a353      	add	r3, pc, #332	; (adr r3, 800ba08 <findDirection+0x268>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fe9a 	bl	80005f8 <__aeabi_dmul>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	f7f5 f924 	bl	8000b18 <__aeabi_dcmpgt>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d0a7      	beq.n	800b824 <findDirection+0x84>
 800b8d4:	ee18 0a90 	vmov	r0, s17
 800b8d8:	f7f4 fe36 	bl	8000548 <__aeabi_f2d>
 800b8dc:	a34a      	add	r3, pc, #296	; (adr r3, 800ba08 <findDirection+0x268>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 fe89 	bl	80005f8 <__aeabi_dmul>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f5 f913 	bl	8000b18 <__aeabi_dcmpgt>
 800b8f2:	ecbd 8b04 	vpop	{d8-d9}
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	bf18      	it	ne
 800b8fa:	2400      	movne	r4, #0
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	bdd0      	pop	{r4, r6, r7, pc}
 800b900:	f7f4 fe22 	bl	8000548 <__aeabi_f2d>
 800b904:	4606      	mov	r6, r0
 800b906:	ee18 0a10 	vmov	r0, s16
 800b90a:	460f      	mov	r7, r1
 800b90c:	f7f4 fe1c 	bl	8000548 <__aeabi_f2d>
 800b910:	a33d      	add	r3, pc, #244	; (adr r3, 800ba08 <findDirection+0x268>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	4630      	mov	r0, r6
 800b920:	4639      	mov	r1, r7
 800b922:	f7f5 f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 800b926:	2800      	cmp	r0, #0
 800b928:	f43f af7c 	beq.w	800b824 <findDirection+0x84>
 800b92c:	ee19 0a10 	vmov	r0, s18
 800b930:	f7f4 fe0a 	bl	8000548 <__aeabi_f2d>
 800b934:	a334      	add	r3, pc, #208	; (adr r3, 800ba08 <findDirection+0x268>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fe5d 	bl	80005f8 <__aeabi_dmul>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4630      	mov	r0, r6
 800b944:	4639      	mov	r1, r7
 800b946:	f7f5 f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	bf18      	it	ne
 800b94e:	2405      	movne	r4, #5
 800b950:	e768      	b.n	800b824 <findDirection+0x84>
 800b952:	f7f4 fdf9 	bl	8000548 <__aeabi_f2d>
 800b956:	4606      	mov	r6, r0
 800b958:	ee18 0a90 	vmov	r0, s17
 800b95c:	460f      	mov	r7, r1
 800b95e:	f7f4 fdf3 	bl	8000548 <__aeabi_f2d>
 800b962:	a329      	add	r3, pc, #164	; (adr r3, 800ba08 <findDirection+0x268>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f43f af53 	beq.w	800b824 <findDirection+0x84>
 800b97e:	ee19 0a10 	vmov	r0, s18
 800b982:	f7f4 fde1 	bl	8000548 <__aeabi_f2d>
 800b986:	a320      	add	r3, pc, #128	; (adr r3, 800ba08 <findDirection+0x268>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fe34 	bl	80005f8 <__aeabi_dmul>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f5 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800b99c:	ecbd 8b04 	vpop	{d8-d9}
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	bf18      	it	ne
 800b9a4:	2403      	movne	r4, #3
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	bdd0      	pop	{r4, r6, r7, pc}
 800b9aa:	f7f4 fdcd 	bl	8000548 <__aeabi_f2d>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	ee18 0a10 	vmov	r0, s16
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	f7f4 fdc7 	bl	8000548 <__aeabi_f2d>
 800b9ba:	a313      	add	r3, pc, #76	; (adr r3, 800ba08 <findDirection+0x268>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fe1a 	bl	80005f8 <__aeabi_dmul>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f5 f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f43f af27 	beq.w	800b824 <findDirection+0x84>
 800b9d6:	ee18 0a90 	vmov	r0, s17
 800b9da:	f7f4 fdb5 	bl	8000548 <__aeabi_f2d>
 800b9de:	a30a      	add	r3, pc, #40	; (adr r3, 800ba08 <findDirection+0x268>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fe08 	bl	80005f8 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	f7f5 f892 	bl	8000b18 <__aeabi_dcmpgt>
 800b9f4:	ecbd 8b04 	vpop	{d8-d9}
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	bf18      	it	ne
 800b9fc:	2402      	movne	r4, #2
 800b9fe:	4620      	mov	r0, r4
 800ba00:	bdd0      	pop	{r4, r6, r7, pc}
 800ba02:	bf00      	nop
 800ba04:	f3af 8000 	nop.w
 800ba08:	e0000000 	.word	0xe0000000
 800ba0c:	3ff6b851 	.word	0x3ff6b851

0800ba10 <updateOrientation>:
 800ba10:	b410      	push	{r4}
 800ba12:	2300      	movs	r3, #0
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	6043      	str	r3, [r0, #4]
 800ba18:	7203      	strb	r3, [r0, #8]
 800ba1a:	780c      	ldrb	r4, [r1, #0]
 800ba1c:	784a      	ldrb	r2, [r1, #1]
 800ba1e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800ba22:	2b17      	cmp	r3, #23
 800ba24:	bf98      	it	ls
 800ba26:	3420      	addls	r4, #32
 800ba28:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800ba2c:	bf98      	it	ls
 800ba2e:	b2e4      	uxtbls	r4, r4
 800ba30:	2b17      	cmp	r3, #23
 800ba32:	788b      	ldrb	r3, [r1, #2]
 800ba34:	bf98      	it	ls
 800ba36:	3220      	addls	r2, #32
 800ba38:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800ba3c:	bf98      	it	ls
 800ba3e:	b2d2      	uxtbls	r2, r2
 800ba40:	2917      	cmp	r1, #23
 800ba42:	bf98      	it	ls
 800ba44:	3320      	addls	r3, #32
 800ba46:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800ba4a:	bf98      	it	ls
 800ba4c:	b2db      	uxtbls	r3, r3
 800ba4e:	2c13      	cmp	r4, #19
 800ba50:	d80d      	bhi.n	800ba6e <updateOrientation+0x5e>
 800ba52:	e8df f004 	tbb	[pc, r4]
 800ba56:	0a36      	.short	0x0a36
 800ba58:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba5c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba60:	0c0c0c39 	.word	0x0c0c0c39
 800ba64:	3f0c3c0c 	.word	0x3f0c3c0c
 800ba68:	420c      	.short	0x420c
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	7001      	strb	r1, [r0, #0]
 800ba6e:	3a64      	subs	r2, #100	; 0x64
 800ba70:	2a13      	cmp	r2, #19
 800ba72:	d80d      	bhi.n	800ba90 <updateOrientation+0x80>
 800ba74:	e8df f002 	tbb	[pc, r2]
 800ba78:	0c0c0a34 	.word	0x0c0c0a34
 800ba7c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba80:	0c370c0c 	.word	0x0c370c0c
 800ba84:	3a0c0c0c 	.word	0x3a0c0c0c
 800ba88:	400c3d0c 	.word	0x400c3d0c
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	7042      	strb	r2, [r0, #1]
 800ba90:	3b64      	subs	r3, #100	; 0x64
 800ba92:	2b13      	cmp	r3, #19
 800ba94:	d80d      	bhi.n	800bab2 <updateOrientation+0xa2>
 800ba96:	e8df f003 	tbb	[pc, r3]
 800ba9a:	320a      	.short	0x320a
 800ba9c:	0c0c0c0c 	.word	0x0c0c0c0c
 800baa0:	0c0c0c0c 	.word	0x0c0c0c0c
 800baa4:	0c0c0c37 	.word	0x0c0c0c37
 800baa8:	410c3c0c 	.word	0x410c3c0c
 800baac:	0f0c      	.short	0x0f0c
 800baae:	23ff      	movs	r3, #255	; 0xff
 800bab0:	7203      	strb	r3, [r0, #8]
 800bab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	23ff      	movs	r3, #255	; 0xff
 800baba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800babe:	7083      	strb	r3, [r0, #2]
 800bac0:	4770      	bx	lr
 800bac2:	21ff      	movs	r1, #255	; 0xff
 800bac4:	7181      	strb	r1, [r0, #6]
 800bac6:	e7d2      	b.n	800ba6e <updateOrientation+0x5e>
 800bac8:	2101      	movs	r1, #1
 800baca:	70c1      	strb	r1, [r0, #3]
 800bacc:	e7cf      	b.n	800ba6e <updateOrientation+0x5e>
 800bace:	21ff      	movs	r1, #255	; 0xff
 800bad0:	70c1      	strb	r1, [r0, #3]
 800bad2:	e7cc      	b.n	800ba6e <updateOrientation+0x5e>
 800bad4:	2101      	movs	r1, #1
 800bad6:	7181      	strb	r1, [r0, #6]
 800bad8:	e7c9      	b.n	800ba6e <updateOrientation+0x5e>
 800bada:	21ff      	movs	r1, #255	; 0xff
 800badc:	7001      	strb	r1, [r0, #0]
 800bade:	e7c6      	b.n	800ba6e <updateOrientation+0x5e>
 800bae0:	22ff      	movs	r2, #255	; 0xff
 800bae2:	71c2      	strb	r2, [r0, #7]
 800bae4:	e7d4      	b.n	800ba90 <updateOrientation+0x80>
 800bae6:	2201      	movs	r2, #1
 800bae8:	7102      	strb	r2, [r0, #4]
 800baea:	e7d1      	b.n	800ba90 <updateOrientation+0x80>
 800baec:	22ff      	movs	r2, #255	; 0xff
 800baee:	7102      	strb	r2, [r0, #4]
 800baf0:	e7ce      	b.n	800ba90 <updateOrientation+0x80>
 800baf2:	2201      	movs	r2, #1
 800baf4:	71c2      	strb	r2, [r0, #7]
 800baf6:	e7cb      	b.n	800ba90 <updateOrientation+0x80>
 800baf8:	22ff      	movs	r2, #255	; 0xff
 800bafa:	7042      	strb	r2, [r0, #1]
 800bafc:	e7c8      	b.n	800ba90 <updateOrientation+0x80>
 800bafe:	2301      	movs	r3, #1
 800bb00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb04:	7083      	strb	r3, [r0, #2]
 800bb06:	4770      	bx	lr
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb0e:	7143      	strb	r3, [r0, #5]
 800bb10:	4770      	bx	lr
 800bb12:	23ff      	movs	r3, #255	; 0xff
 800bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb18:	7143      	strb	r3, [r0, #5]
 800bb1a:	4770      	bx	lr
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb22:	7203      	strb	r3, [r0, #8]
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop

0800bb28 <qmult>:
 800bb28:	ed91 2a03 	vldr	s4, [r1, #12]
 800bb2c:	ed90 3a01 	vldr	s6, [r0, #4]
 800bb30:	edd0 5a02 	vldr	s11, [r0, #8]
 800bb34:	edd1 4a01 	vldr	s9, [r1, #4]
 800bb38:	ed90 4a00 	vldr	s8, [r0]
 800bb3c:	edd1 3a00 	vldr	s7, [r1]
 800bb40:	ed91 5a02 	vldr	s10, [r1, #8]
 800bb44:	edd0 2a03 	vldr	s5, [r0, #12]
 800bb48:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800bb4c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800bb50:	ee22 7a25 	vmul.f32	s14, s4, s11
 800bb54:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800bb58:	eea4 6a02 	vfma.f32	s12, s8, s4
 800bb5c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800bb60:	eea3 7a23 	vfma.f32	s14, s6, s7
 800bb64:	eee4 7a63 	vfms.f32	s15, s8, s7
 800bb68:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800bb6c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800bb70:	eea5 7a22 	vfma.f32	s14, s10, s5
 800bb74:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bb78:	eea3 6a45 	vfms.f32	s12, s6, s10
 800bb7c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800bb80:	eea4 7a64 	vfms.f32	s14, s8, s9
 800bb84:	eee5 7a65 	vfms.f32	s15, s10, s11
 800bb88:	ed82 6a00 	vstr	s12, [r2]
 800bb8c:	edc2 6a01 	vstr	s13, [r2, #4]
 800bb90:	ed82 7a02 	vstr	s14, [r2, #8]
 800bb94:	edc2 7a03 	vstr	s15, [r2, #12]
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop

0800bb9c <MEMS_setMagIndexToOne>:
 800bb9c:	291f      	cmp	r1, #31
 800bb9e:	b430      	push	{r4, r5}
 800bba0:	d920      	bls.n	800bbe4 <MEMS_setMagIndexToOne+0x48>
 800bba2:	6885      	ldr	r5, [r0, #8]
 800bba4:	3920      	subs	r1, #32
 800bba6:	2401      	movs	r4, #1
 800bba8:	fa04 f101 	lsl.w	r1, r4, r1
 800bbac:	ea21 0105 	bic.w	r1, r1, r5
 800bbb0:	4069      	eors	r1, r5
 800bbb2:	2a1f      	cmp	r2, #31
 800bbb4:	6081      	str	r1, [r0, #8]
 800bbb6:	d91f      	bls.n	800bbf8 <MEMS_setMagIndexToOne+0x5c>
 800bbb8:	6901      	ldr	r1, [r0, #16]
 800bbba:	f1a2 0420 	sub.w	r4, r2, #32
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	40a2      	lsls	r2, r4
 800bbc2:	ea22 0201 	bic.w	r2, r2, r1
 800bbc6:	404a      	eors	r2, r1
 800bbc8:	2b1f      	cmp	r3, #31
 800bbca:	6102      	str	r2, [r0, #16]
 800bbcc:	d91e      	bls.n	800bc0c <MEMS_setMagIndexToOne+0x70>
 800bbce:	69c2      	ldr	r2, [r0, #28]
 800bbd0:	f1a3 0120 	sub.w	r1, r3, #32
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	408b      	lsls	r3, r1
 800bbd8:	ea23 0302 	bic.w	r3, r3, r2
 800bbdc:	4053      	eors	r3, r2
 800bbde:	bc30      	pop	{r4, r5}
 800bbe0:	61c3      	str	r3, [r0, #28]
 800bbe2:	4770      	bx	lr
 800bbe4:	68c5      	ldr	r5, [r0, #12]
 800bbe6:	2401      	movs	r4, #1
 800bbe8:	fa04 f101 	lsl.w	r1, r4, r1
 800bbec:	ea21 0105 	bic.w	r1, r1, r5
 800bbf0:	4069      	eors	r1, r5
 800bbf2:	2a1f      	cmp	r2, #31
 800bbf4:	60c1      	str	r1, [r0, #12]
 800bbf6:	d8df      	bhi.n	800bbb8 <MEMS_setMagIndexToOne+0x1c>
 800bbf8:	6944      	ldr	r4, [r0, #20]
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	fa01 f202 	lsl.w	r2, r1, r2
 800bc00:	ea22 0204 	bic.w	r2, r2, r4
 800bc04:	4062      	eors	r2, r4
 800bc06:	2b1f      	cmp	r3, #31
 800bc08:	6142      	str	r2, [r0, #20]
 800bc0a:	d8e0      	bhi.n	800bbce <MEMS_setMagIndexToOne+0x32>
 800bc0c:	6981      	ldr	r1, [r0, #24]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	fa02 f303 	lsl.w	r3, r2, r3
 800bc14:	ea23 0301 	bic.w	r3, r3, r1
 800bc18:	404b      	eors	r3, r1
 800bc1a:	bc30      	pop	{r4, r5}
 800bc1c:	6183      	str	r3, [r0, #24]
 800bc1e:	4770      	bx	lr

0800bc20 <getRotationMatrix>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4605      	mov	r5, r0
 800bc24:	460c      	mov	r4, r1
 800bc26:	4610      	mov	r0, r2
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2224      	movs	r2, #36	; 0x24
 800bc2c:	f00b fea6 	bl	801797c <memset>
 800bc30:	edd5 5a00 	vldr	s11, [r5]
 800bc34:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bd5c <getRotationMatrix+0x13c>
 800bc38:	edc0 5a02 	vstr	s11, [r0, #8]
 800bc3c:	ed95 7a01 	vldr	s14, [r5, #4]
 800bc40:	ed80 7a05 	vstr	s14, [r0, #20]
 800bc44:	ed95 5a02 	vldr	s10, [r5, #8]
 800bc48:	ed80 5a08 	vstr	s10, [r0, #32]
 800bc4c:	ed94 4a02 	vldr	s8, [r4, #8]
 800bc50:	edd4 3a01 	vldr	s7, [r4, #4]
 800bc54:	edd4 4a00 	vldr	s9, [r4]
 800bc58:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800bc5c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800bc60:	eee3 7a85 	vfma.f32	s15, s7, s10
 800bc64:	4603      	mov	r3, r0
 800bc66:	eee4 6a87 	vfma.f32	s13, s9, s14
 800bc6a:	eeb0 7ae7 	vabs.f32	s14, s15
 800bc6e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800bc72:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800bc7e:	bfdc      	itt	le
 800bc80:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800bc84:	eeb0 7a43 	vmovle.f32	s14, s6
 800bc88:	eeb0 5ac6 	vabs.f32	s10, s12
 800bc8c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc90:	edc0 6a06 	vstr	s13, [r0, #24]
 800bc94:	bfd4      	ite	le
 800bc96:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800bc9a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800bc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca2:	ed80 6a03 	vstr	s12, [r0, #12]
 800bca6:	edc0 7a00 	vstr	s15, [r0]
 800bcaa:	d447      	bmi.n	800bd3c <getRotationMatrix+0x11c>
 800bcac:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800bcb0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800bcb4:	eef0 5a66 	vmov.f32	s11, s13
 800bcb8:	edd3 6a06 	vldr	s13, [r3, #24]
 800bcbc:	eeb0 5ae6 	vabs.f32	s10, s13
 800bcc0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc8:	d543      	bpl.n	800bd52 <getRotationMatrix+0x132>
 800bcca:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bcce:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bcd2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bcd6:	eeb0 7a45 	vmov.f32	s14, s10
 800bcda:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800bcde:	eef0 5a44 	vmov.f32	s11, s8
 800bce2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800bce6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800bcea:	ee65 5a07 	vmul.f32	s11, s10, s14
 800bcee:	edd3 3a08 	vldr	s7, [r3, #32]
 800bcf2:	edd3 4a02 	vldr	s9, [r3, #8]
 800bcf6:	ed93 4a05 	vldr	s8, [r3, #20]
 800bcfa:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800bcfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd02:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bd06:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bd0a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800bd0e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bd12:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bd16:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800bd1a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bd1e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bd22:	edc3 7a00 	vstr	s15, [r3]
 800bd26:	ed83 6a03 	vstr	s12, [r3, #12]
 800bd2a:	ed83 7a06 	vstr	s14, [r3, #24]
 800bd2e:	ed83 5a04 	vstr	s10, [r3, #16]
 800bd32:	edc3 5a01 	vstr	s11, [r3, #4]
 800bd36:	edc3 6a07 	vstr	s13, [r3, #28]
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bd40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bd44:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bd48:	eeb0 7a45 	vmov.f32	s14, s10
 800bd4c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bd50:	e7b2      	b.n	800bcb8 <getRotationMatrix+0x98>
 800bd52:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bd56:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bd5a:	e7c2      	b.n	800bce2 <getRotationMatrix+0xc2>
 800bd5c:	00000000 	.word	0x00000000

0800bd60 <b_dcm2q>:
 800bd60:	ed90 5a08 	vldr	s10, [r0, #32]
 800bd64:	edd0 7a00 	vldr	s15, [r0]
 800bd68:	edd0 6a04 	vldr	s13, [r0, #16]
 800bd6c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bd70:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bd74:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bd78:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bd7c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd84:	bfc5      	ittet	gt
 800bd86:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bd8a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bd8e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800be9c <b_dcm2q+0x13c>
 800bd92:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bd96:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bd9a:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bd9e:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bda2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdaa:	bfc5      	ittet	gt
 800bdac:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bdb0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bdb4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800be9c <b_dcm2q+0x13c>
 800bdb8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bdbc:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bdc0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc8:	dd5b      	ble.n	800be82 <b_dcm2q+0x122>
 800bdca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bdce:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bdd2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bdd6:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bdda:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bdde:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bde2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bde6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdea:	edd0 6a07 	vldr	s13, [r0, #28]
 800bdee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf6:	bf85      	ittet	hi
 800bdf8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bdfc:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800be00:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800be9c <b_dcm2q+0x13c>
 800be04:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800be08:	edd0 7a05 	vldr	s15, [r0, #20]
 800be0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be18:	d43c      	bmi.n	800be94 <b_dcm2q+0x134>
 800be1a:	bfd8      	it	le
 800be1c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800be20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be28:	ed81 7a00 	vstr	s14, [r1]
 800be2c:	edd0 7a06 	vldr	s15, [r0, #24]
 800be30:	ed90 7a02 	vldr	s14, [r0, #8]
 800be34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be40:	d425      	bmi.n	800be8e <b_dcm2q+0x12e>
 800be42:	bfd8      	it	le
 800be44:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800be48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800be50:	edc1 5a01 	vstr	s11, [r1, #4]
 800be54:	edd0 7a01 	vldr	s15, [r0, #4]
 800be58:	ed90 7a03 	vldr	s14, [r0, #12]
 800be5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	d40e      	bmi.n	800be88 <b_dcm2q+0x128>
 800be6a:	bfd8      	it	le
 800be6c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800be70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be74:	ee26 6a27 	vmul.f32	s12, s12, s15
 800be78:	edc1 4a03 	vstr	s9, [r1, #12]
 800be7c:	ed81 6a02 	vstr	s12, [r1, #8]
 800be80:	4770      	bx	lr
 800be82:	eddf 4a06 	vldr	s9, [pc, #24]	; 800be9c <b_dcm2q+0x13c>
 800be86:	e7aa      	b.n	800bdde <b_dcm2q+0x7e>
 800be88:	eeb1 6a46 	vneg.f32	s12, s12
 800be8c:	e7f0      	b.n	800be70 <b_dcm2q+0x110>
 800be8e:	eef1 5a65 	vneg.f32	s11, s11
 800be92:	e7d9      	b.n	800be48 <b_dcm2q+0xe8>
 800be94:	eeb1 7a47 	vneg.f32	s14, s14
 800be98:	e7c2      	b.n	800be20 <b_dcm2q+0xc0>
 800be9a:	bf00      	nop
 800be9c:	00000000 	.word	0x00000000

0800bea0 <q2hpr>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	ed90 7a00 	vldr	s14, [r0]
 800bea6:	edd0 6a01 	vldr	s13, [r0, #4]
 800beaa:	edd0 7a02 	vldr	s15, [r0, #8]
 800beae:	ed90 5a03 	vldr	s10, [r0, #12]
 800beb2:	ed2d 8b0a 	vpush	{d8-d12}
 800beb6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800beba:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bebe:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800bec2:	ee67 0a07 	vmul.f32	s1, s14, s14
 800bec6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800beca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bece:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bed2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bed6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800beda:	ee78 aa08 	vadd.f32	s21, s16, s16
 800bede:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800bee2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800bee6:	ee30 ca00 	vadd.f32	s24, s0, s0
 800beea:	ee36 ba06 	vadd.f32	s22, s12, s12
 800beee:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bef2:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bef6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800befa:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800befe:	460c      	mov	r4, r1
 800bf00:	bb8a      	cbnz	r2, 800bf66 <q2hpr+0xc6>
 800bf02:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bf06:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bf0a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bf0e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bf12:	f00a f833 	bl	8015f7c <atan2f>
 800bf16:	eeb0 8a40 	vmov.f32	s16, s0
 800bf1a:	ed84 8a00 	vstr	s16, [r4]
 800bf1e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bf22:	f009 fff9 	bl	8015f18 <asinf>
 800bf26:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bf2a:	eef0 8a40 	vmov.f32	s17, s0
 800bf2e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bf32:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bf36:	f00a f821 	bl	8015f7c <atan2f>
 800bf3a:	eef1 8a68 	vneg.f32	s17, s17
 800bf3e:	eeb0 9a40 	vmov.f32	s18, s0
 800bf42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4a:	ed84 9a02 	vstr	s18, [r4, #8]
 800bf4e:	edc4 8a01 	vstr	s17, [r4, #4]
 800bf52:	d505      	bpl.n	800bf60 <q2hpr+0xc0>
 800bf54:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bfac <q2hpr+0x10c>
 800bf58:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bf5c:	ed84 8a00 	vstr	s16, [r4]
 800bf60:	ecbd 8b0a 	vpop	{d8-d12}
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bf6a:	f009 ffd5 	bl	8015f18 <asinf>
 800bf6e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bf72:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bf76:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bf7a:	eeb0 9a40 	vmov.f32	s18, s0
 800bf7e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bf82:	f009 fffb 	bl	8015f7c <atan2f>
 800bf86:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bf8a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bf8e:	eef0 8a40 	vmov.f32	s17, s0
 800bf92:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bf96:	eeb1 0a48 	vneg.f32	s0, s16
 800bf9a:	f009 ffef 	bl	8015f7c <atan2f>
 800bf9e:	eef1 8a68 	vneg.f32	s17, s17
 800bfa2:	eeb0 8a40 	vmov.f32	s16, s0
 800bfa6:	ed84 0a00 	vstr	s0, [r4]
 800bfaa:	e7ca      	b.n	800bf42 <q2hpr+0xa2>
 800bfac:	40c90fdb 	.word	0x40c90fdb

0800bfb0 <llEvaluate.constprop.0>:
 800bfb0:	edd2 0a00 	vldr	s1, [r2]
 800bfb4:	ed90 1a00 	vldr	s2, [r0]
 800bfb8:	edd0 1a04 	vldr	s3, [r0, #16]
 800bfbc:	edd2 5a01 	vldr	s11, [r2, #4]
 800bfc0:	ed90 6a08 	vldr	s12, [r0, #32]
 800bfc4:	ed90 2a05 	vldr	s4, [r0, #20]
 800bfc8:	ed92 7a02 	vldr	s14, [r2, #8]
 800bfcc:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bfd0:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bfd4:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bfd8:	edd2 7a03 	vldr	s15, [r2, #12]
 800bfdc:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bfe0:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bfe4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bfe8:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	f10d 0810 	add.w	r8, sp, #16
 800bff6:	2704      	movs	r7, #4
 800bff8:	f101 0510 	add.w	r5, r1, #16
 800bffc:	2f04      	cmp	r7, #4
 800bffe:	4686      	mov	lr, r0
 800c000:	f04f 0c03 	mov.w	ip, #3
 800c004:	b27b      	sxtb	r3, r7
 800c006:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800c00a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800c00e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800c012:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800c016:	eea6 7a43 	vfms.f32	s14, s12, s6
 800c01a:	edcd 6a00 	vstr	s13, [sp]
 800c01e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800c022:	eee6 7a63 	vfms.f32	s15, s12, s7
 800c026:	ed8d 6a01 	vstr	s12, [sp, #4]
 800c02a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800c02e:	edcd 6a02 	vstr	s13, [sp, #8]
 800c032:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c036:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c03a:	ed78 7a01 	vldmdb	r8!, {s15}
 800c03e:	ed65 7a01 	vstmdb	r5!, {s15}
 800c042:	d029      	beq.n	800c098 <llEvaluate.constprop.0+0xe8>
 800c044:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800c048:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800c04c:	4432      	add	r2, r6
 800c04e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800c052:	edd2 6a00 	vldr	s13, [r2]
 800c056:	ed94 7a00 	vldr	s14, [r4]
 800c05a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c05e:	3301      	adds	r3, #1
 800c060:	b2da      	uxtb	r2, r3
 800c062:	2a04      	cmp	r2, #4
 800c064:	b25b      	sxtb	r3, r3
 800c066:	edc5 7a00 	vstr	s15, [r5]
 800c06a:	d1ed      	bne.n	800c048 <llEvaluate.constprop.0+0x98>
 800c06c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800c070:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c074:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800c078:	ed85 7a00 	vstr	s14, [r5]
 800c07c:	d013      	beq.n	800c0a6 <llEvaluate.constprop.0+0xf6>
 800c07e:	3f01      	subs	r7, #1
 800c080:	b2ff      	uxtb	r7, r7
 800c082:	ed78 7a01 	vldmdb	r8!, {s15}
 800c086:	2f04      	cmp	r7, #4
 800c088:	f1ae 0e14 	sub.w	lr, lr, #20
 800c08c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c090:	b27b      	sxtb	r3, r7
 800c092:	ed65 7a01 	vstmdb	r5!, {s15}
 800c096:	d1d5      	bne.n	800c044 <llEvaluate.constprop.0+0x94>
 800c098:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800c09c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c0a0:	ed85 7a00 	vstr	s14, [r5]
 800c0a4:	e7eb      	b.n	800c07e <llEvaluate.constprop.0+0xce>
 800c0a6:	b004      	add	sp, #16
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0ac <MEMS_updateMagBufferIndex>:
 800c0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0b0:	ed2d 8b02 	vpush	{d8}
 800c0b4:	7804      	ldrb	r4, [r0, #0]
 800c0b6:	7842      	ldrb	r2, [r0, #1]
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	4294      	cmp	r4, r2
 800c0c2:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c0c6:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800c0ca:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	f100 0001 	add.w	r0, r0, #1
 800c0d6:	f000 8083 	beq.w	800c1e0 <MEMS_updateMagBufferIndex+0x134>
 800c0da:	1b00      	subs	r0, r0, r4
 800c0dc:	fb90 f8f2 	sdiv	r8, r0, r2
 800c0e0:	fb02 0018 	mls	r0, r2, r8, r0
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	bfb6      	itet	lt
 800c0e8:	eb02 0800 	addlt.w	r8, r2, r0
 800c0ec:	fa0f f880 	sxthge.w	r8, r0
 800c0f0:	fa0f f888 	sxthlt.w	r8, r8
 800c0f4:	b934      	cbnz	r4, 800c104 <MEMS_updateMagBufferIndex+0x58>
 800c0f6:	23ff      	movs	r3, #255	; 0xff
 800c0f8:	70b3      	strb	r3, [r6, #2]
 800c0fa:	b003      	add	sp, #12
 800c0fc:	ecbd 8b02 	vpop	{d8}
 800c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c104:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c108:	2700      	movs	r7, #0
 800c10a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800c10e:	463b      	mov	r3, r7
 800c110:	e000      	b.n	800c114 <MEMS_updateMagBufferIndex+0x68>
 800c112:	7872      	ldrb	r2, [r6, #1]
 800c114:	4443      	add	r3, r8
 800c116:	fb93 f4f2 	sdiv	r4, r3, r2
 800c11a:	fb02 3314 	mls	r3, r2, r4, r3
 800c11e:	b2dc      	uxtb	r4, r3
 800c120:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c124:	3701      	adds	r7, #1
 800c126:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800c12a:	fb92 f3f5 	sdiv	r3, r2, r5
 800c12e:	fb05 2313 	mls	r3, r5, r3, r2
 800c132:	2b00      	cmp	r3, #0
 800c134:	bfb8      	it	lt
 800c136:	195b      	addlt	r3, r3, r5
 800c138:	b21b      	sxth	r3, r3
 800c13a:	ee00 3a10 	vmov	s0, r3
 800c13e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c142:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c146:	f009 fdef 	bl	8015d28 <roundf>
 800c14a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800c14e:	fb92 f3f5 	sdiv	r3, r2, r5
 800c152:	fb05 2313 	mls	r3, r5, r3, r2
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfb8      	it	lt
 800c15a:	195b      	addlt	r3, r3, r5
 800c15c:	b21b      	sxth	r3, r3
 800c15e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c162:	ee00 3a10 	vmov	s0, r3
 800c166:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c16a:	edcd 7a01 	vstr	s15, [sp, #4]
 800c16e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c172:	f009 fdd9 	bl	8015d28 <roundf>
 800c176:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800c17a:	fb92 f3f5 	sdiv	r3, r2, r5
 800c17e:	fb05 2313 	mls	r3, r5, r3, r2
 800c182:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c186:	18ea      	adds	r2, r5, r3
 800c188:	b219      	sxth	r1, r3
 800c18a:	b212      	sxth	r2, r2
 800c18c:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800c190:	edcd 7a01 	vstr	s15, [sp, #4]
 800c194:	ee00 1a10 	vmov	s0, r1
 800c198:	ee07 2a90 	vmov	s15, r2
 800c19c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c1aa:	bfb8      	it	lt
 800c1ac:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800c1b0:	f009 fdba 	bl	8015d28 <roundf>
 800c1b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c1b8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800c1bc:	edcd 7a01 	vstr	s15, [sp, #4]
 800c1c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff fce7 	bl	800bb9c <MEMS_setMagIndexToOne>
 800c1ce:	7832      	ldrb	r2, [r6, #0]
 800c1d0:	b2fb      	uxtb	r3, r7
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d89d      	bhi.n	800c112 <MEMS_updateMagBufferIndex+0x66>
 800c1d6:	b003      	add	sp, #12
 800c1d8:	ecbd 8b02 	vpop	{d8}
 800c1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1e0:	fb90 f8f4 	sdiv	r8, r0, r4
 800c1e4:	fb04 0018 	mls	r0, r4, r8, r0
 800c1e8:	fa0f f880 	sxth.w	r8, r0
 800c1ec:	e782      	b.n	800c0f4 <MEMS_updateMagBufferIndex+0x48>
 800c1ee:	bf00      	nop

0800c1f0 <getMagStats.constprop.0>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c1f6:	2400      	movs	r4, #0
 800c1f8:	4607      	mov	r7, r0
 800c1fa:	6034      	str	r4, [r6, #0]
 800c1fc:	601c      	str	r4, [r3, #0]
 800c1fe:	7800      	ldrb	r0, [r0, #0]
 800c200:	787d      	ldrb	r5, [r7, #1]
 800c202:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800c206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c20a:	42a8      	cmp	r0, r5
 800c20c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800c210:	f000 80c0 	beq.w	800c394 <getMagStats.constprop.0+0x1a4>
 800c214:	3401      	adds	r4, #1
 800c216:	eba4 0c00 	sub.w	ip, r4, r0
 800c21a:	fb9c f4f5 	sdiv	r4, ip, r5
 800c21e:	fb05 c414 	mls	r4, r5, r4, ip
 800c222:	2c00      	cmp	r4, #0
 800c224:	bfb8      	it	lt
 800c226:	1964      	addlt	r4, r4, r5
 800c228:	b224      	sxth	r4, r4
 800c22a:	ee04 0a90 	vmov	s9, r0
 800c22e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c3b0 <getMagStats.constprop.0+0x1c0>
 800c232:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c236:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c23a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c23e:	2800      	cmp	r0, #0
 800c240:	f000 80b2 	beq.w	800c3a8 <getMagStats.constprop.0+0x1b8>
 800c244:	3801      	subs	r0, #1
 800c246:	fa54 fc80 	uxtab	ip, r4, r0
 800c24a:	f8b1 9000 	ldrh.w	r9, [r1]
 800c24e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c252:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c256:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c3b4 <getMagStats.constprop.0+0x1c4>
 800c25a:	2000      	movs	r0, #0
 800c25c:	e002      	b.n	800c264 <getMagStats.constprop.0+0x74>
 800c25e:	ed93 3a00 	vldr	s6, [r3]
 800c262:	3401      	adds	r4, #1
 800c264:	fb94 f1f5 	sdiv	r1, r4, r5
 800c268:	fb05 4111 	mls	r1, r5, r1, r4
 800c26c:	b2c9      	uxtb	r1, r1
 800c26e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c272:	edd2 3a00 	vldr	s7, [r2]
 800c276:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c27a:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c27e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c280:	ed92 4a04 	vldr	s8, [r2, #16]
 800c284:	ed92 6a08 	vldr	s12, [r2, #32]
 800c288:	ebaa 0a09 	sub.w	sl, sl, r9
 800c28c:	ebab 0b08 	sub.w	fp, fp, r8
 800c290:	fa0f fa8a 	sxth.w	sl, sl
 800c294:	ee07 aa10 	vmov	s14, sl
 800c298:	fa0f fa8b 	sxth.w	sl, fp
 800c29c:	ee06 aa90 	vmov	s13, sl
 800c2a0:	eba1 010e 	sub.w	r1, r1, lr
 800c2a4:	b209      	sxth	r1, r1
 800c2a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c2ae:	ee07 1a90 	vmov	s15, r1
 800c2b2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c2b6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c2ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c2c2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c2c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c2ca:	ee16 1a90 	vmov	r1, s13
 800c2ce:	ee17 aa10 	vmov	sl, s14
 800c2d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d6:	fb11 f101 	smulbb	r1, r1, r1
 800c2da:	fa0f fa8a 	sxth.w	sl, sl
 800c2de:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c2e2:	ee17 1a90 	vmov	r1, s15
 800c2e6:	b209      	sxth	r1, r1
 800c2e8:	fb01 a101 	mla	r1, r1, r1, sl
 800c2ec:	ee07 1a90 	vmov	s15, r1
 800c2f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2f4:	f100 0a01 	add.w	sl, r0, #1
 800c2f8:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c2fc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c300:	ee17 1a90 	vmov	r1, s15
 800c304:	b209      	sxth	r1, r1
 800c306:	ee07 1a10 	vmov	s14, r1
 800c30a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c30e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c312:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c316:	eef0 7ae7 	vabs.f32	s15, s15
 800c31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c31e:	ed83 7a00 	vstr	s14, [r3]
 800c322:	ee17 1a90 	vmov	r1, s15
 800c326:	b209      	sxth	r1, r1
 800c328:	fb01 fb01 	mul.w	fp, r1, r1
 800c32c:	ee07 ba90 	vmov	s15, fp
 800c330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c334:	ee07 1a90 	vmov	s15, r1
 800c338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c340:	edd6 7a00 	vldr	s15, [r6]
 800c344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c34c:	bf48      	it	mi
 800c34e:	fa5f f08a 	uxtbmi.w	r0, sl
 800c352:	45a4      	cmp	ip, r4
 800c354:	edc6 7a00 	vstr	s15, [r6]
 800c358:	d181      	bne.n	800c25e <getMagStats.constprop.0+0x6e>
 800c35a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c35e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c3b8 <getMagStats.constprop.0+0x1c8>
 800c362:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c366:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c36a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c36e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c376:	bfb8      	it	lt
 800c378:	eef0 7a47 	vmovlt.f32	s15, s14
 800c37c:	edc6 7a00 	vstr	s15, [r6]
 800c380:	edd3 7a00 	vldr	s15, [r3]
 800c384:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c388:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c38c:	edc3 7a00 	vstr	s15, [r3]
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	1c65      	adds	r5, r4, #1
 800c396:	fb95 f4f0 	sdiv	r4, r5, r0
 800c39a:	fb00 5414 	mls	r4, r0, r4, r5
 800c39e:	ee04 0a90 	vmov	s9, r0
 800c3a2:	b224      	sxth	r4, r4
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	e742      	b.n	800c22e <getMagStats.constprop.0+0x3e>
 800c3a8:	edd6 7a00 	vldr	s15, [r6]
 800c3ac:	e7d5      	b.n	800c35a <getMagStats.constprop.0+0x16a>
 800c3ae:	bf00      	nop
 800c3b0:	423c0000 	.word	0x423c0000
 800c3b4:	00000000 	.word	0x00000000
 800c3b8:	3f59999a 	.word	0x3f59999a

0800c3bc <MFX_emptyAttitude>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	ed2d 8b10 	vpush	{d8-d15}
 800c3c4:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c3c8:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c3cc:	f04f 0a00 	mov.w	sl, #0
 800c3d0:	4fef      	ldr	r7, [pc, #956]	; (800c790 <MFX_emptyAttitude+0x3d4>)
 800c3d2:	f8c4 a008 	str.w	sl, [r4, #8]
 800c3d6:	e9c4 aa00 	strd	sl, sl, [r4]
 800c3da:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c3de:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c3e2:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c3e6:	4680      	mov	r8, r0
 800c3e8:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c3ec:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c3f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c3f4:	0c1b      	lsrs	r3, r3, #16
 800c3f6:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c3fa:	ab27      	add	r3, sp, #156	; 0x9c
 800c3fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c400:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c404:	ab2d      	add	r3, sp, #180	; 0xb4
 800c406:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c40a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c40e:	ab30      	add	r3, sp, #192	; 0xc0
 800c410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c414:	ab33      	add	r3, sp, #204	; 0xcc
 800c416:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c41a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c41e:	f04f 0c00 	mov.w	ip, #0
 800c422:	ab36      	add	r3, sp, #216	; 0xd8
 800c424:	f04f 0b00 	mov.w	fp, #0
 800c428:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c42c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c434:	4628      	mov	r0, r5
 800c436:	2224      	movs	r2, #36	; 0x24
 800c438:	f00b faa0 	bl	801797c <memset>
 800c43c:	4651      	mov	r1, sl
 800c43e:	4620      	mov	r0, r4
 800c440:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c444:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c794 <MFX_emptyAttitude+0x3d8>
 800c448:	eddf ead3 	vldr	s29, [pc, #844]	; 800c798 <MFX_emptyAttitude+0x3dc>
 800c44c:	f00b fa96 	bl	801797c <memset>
 800c450:	edd5 4a00 	vldr	s9, [r5]
 800c454:	ed95 5a01 	vldr	s10, [r5, #4]
 800c458:	edd5 5a02 	vldr	s11, [r5, #8]
 800c45c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c460:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c464:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c468:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c46c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c470:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c474:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c478:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c47c:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c480:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c484:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c488:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c48c:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c490:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c494:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c498:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c49c:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c4a0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c4a4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c4a8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c4ac:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c4b0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c4b4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c4b8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c4bc:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c4c0:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c4c4:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c4c8:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c4cc:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c4d0:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c4d4:	ed95 6a03 	vldr	s12, [r5, #12]
 800c4d8:	edd5 6a04 	vldr	s13, [r5, #16]
 800c4dc:	ed95 7a05 	vldr	s14, [r5, #20]
 800c4e0:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c4e4:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c4e8:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c4ec:	edcd 6a07 	vstr	s13, [sp, #28]
 800c4f0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c4f4:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c4f8:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c4fc:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c500:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c504:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c508:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c50c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c510:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c514:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c518:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c51c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c520:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c524:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c528:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c52c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c530:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c534:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c538:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c53c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c540:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c544:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c548:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c54c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c550:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c554:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c558:	edd5 7a06 	vldr	s15, [r5, #24]
 800c55c:	edd5 fa07 	vldr	s31, [r5, #28]
 800c560:	ed95 fa08 	vldr	s30, [r5, #32]
 800c564:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c568:	edcd 7a05 	vstr	s15, [sp, #20]
 800c56c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c570:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c574:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c578:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c57c:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c580:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c584:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c588:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c58c:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c590:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c594:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c598:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c59c:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c5a0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c5a4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c5a8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c5ac:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c5b0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c5b4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c5b8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c5bc:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c5c0:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c5c4:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c5c8:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c5cc:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c5d0:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c5d4:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c5d8:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c5dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c5de:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c5e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c5e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	f8cc 3000 	str.w	r3, [ip]
 800c5f2:	4651      	mov	r1, sl
 800c5f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c5fe:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c602:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c606:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c60a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c60e:	f00b f9b5 	bl	801797c <memset>
 800c612:	4621      	mov	r1, r4
 800c614:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c618:	a898      	add	r0, sp, #608	; 0x260
 800c61a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c61e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c622:	f00b f983 	bl	801792c <memcpy>
 800c626:	4651      	mov	r1, sl
 800c628:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c62c:	4620      	mov	r0, r4
 800c62e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c632:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c636:	f00b f9a1 	bl	801797c <memset>
 800c63a:	4621      	mov	r1, r4
 800c63c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c640:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c642:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c646:	f00b f971 	bl	801792c <memcpy>
 800c64a:	4651      	mov	r1, sl
 800c64c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c650:	4620      	mov	r0, r4
 800c652:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c656:	f00b f991 	bl	801797c <memset>
 800c65a:	4621      	mov	r1, r4
 800c65c:	8037      	strh	r7, [r6, #0]
 800c65e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c662:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c666:	f00b f961 	bl	801792c <memcpy>
 800c66a:	4651      	mov	r1, sl
 800c66c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c670:	4620      	mov	r0, r4
 800c672:	ed86 8a01 	vstr	s16, [r6, #4]
 800c676:	f00b f981 	bl	801797c <memset>
 800c67a:	4621      	mov	r1, r4
 800c67c:	802f      	strh	r7, [r5, #0]
 800c67e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c682:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c686:	f00b f951 	bl	801792c <memcpy>
 800c68a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c68e:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c692:	2701      	movs	r7, #1
 800c694:	9600      	str	r6, [sp, #0]
 800c696:	9403      	str	r4, [sp, #12]
 800c698:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c79c <MFX_emptyAttitude+0x3e0>
 800c69c:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c7a0 <MFX_emptyAttitude+0x3e4>
 800c6a0:	ed85 8a01 	vstr	s16, [r5, #4]
 800c6a4:	483f      	ldr	r0, [pc, #252]	; (800c7a4 <MFX_emptyAttitude+0x3e8>)
 800c6a6:	4d40      	ldr	r5, [pc, #256]	; (800c7a8 <MFX_emptyAttitude+0x3ec>)
 800c6a8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c7cc <MFX_emptyAttitude+0x410>
 800c6ac:	951c      	str	r5, [sp, #112]	; 0x70
 800c6ae:	abf2      	add	r3, sp, #968	; 0x3c8
 800c6b0:	aa96      	add	r2, sp, #600	; 0x258
 800c6b2:	a90d      	add	r1, sp, #52	; 0x34
 800c6b4:	9017      	str	r0, [sp, #92]	; 0x5c
 800c6b6:	4d3d      	ldr	r5, [pc, #244]	; (800c7ac <MFX_emptyAttitude+0x3f0>)
 800c6b8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c6bc:	4638      	mov	r0, r7
 800c6be:	ae27      	add	r6, sp, #156	; 0x9c
 800c6c0:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c6c4:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c6c8:	951b      	str	r5, [sp, #108]	; 0x6c
 800c6ca:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c6ce:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c6d2:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c6d6:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c6da:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c6de:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c6e2:	f7fe fecf 	bl	800b484 <DataHist_parameters>
 800c6e6:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c6e8:	4b31      	ldr	r3, [pc, #196]	; (800c7b0 <MFX_emptyAttitude+0x3f4>)
 800c6ea:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c6ee:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c6f2:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c6f6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c6fa:	f8c8 300c 	str.w	r3, [r8, #12]
 800c6fe:	4b2d      	ldr	r3, [pc, #180]	; (800c7b4 <MFX_emptyAttitude+0x3f8>)
 800c700:	f8c8 3014 	str.w	r3, [r8, #20]
 800c704:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c708:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c7b8 <MFX_emptyAttitude+0x3fc>
 800c70c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c7bc <MFX_emptyAttitude+0x400>
 800c710:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c7c0 <MFX_emptyAttitude+0x404>
 800c714:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c7c4 <MFX_emptyAttitude+0x408>
 800c718:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c7c8 <MFX_emptyAttitude+0x40c>
 800c71c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c720:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c7d0 <MFX_emptyAttitude+0x414>
 800c724:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c7d4 <MFX_emptyAttitude+0x418>
 800c728:	edc8 2a06 	vstr	s5, [r8, #24]
 800c72c:	f04f 0b00 	mov.w	fp, #0
 800c730:	f04f 0c00 	mov.w	ip, #0
 800c734:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c738:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c73c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c740:	ad2d      	add	r5, sp, #180	; 0xb4
 800c742:	469b      	mov	fp, r3
 800c744:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c7d8 <MFX_emptyAttitude+0x41c>
 800c748:	ed88 3a07 	vstr	s6, [r8, #28]
 800c74c:	f240 1301 	movw	r3, #257	; 0x101
 800c750:	edc8 3a08 	vstr	s7, [r8, #32]
 800c754:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c758:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c75c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c760:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c764:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c768:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c76c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c770:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c774:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c778:	f8c8 3000 	str.w	r3, [r8]
 800c77c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c780:	ed88 8a02 	vstr	s16, [r8, #8]
 800c784:	ed88 8a04 	vstr	s16, [r8, #16]
 800c788:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c78c:	e028      	b.n	800c7e0 <MFX_emptyAttitude+0x424>
 800c78e:	bf00      	nop
 800c790:	0801a938 	.word	0x0801a938
 800c794:	00000000 	.word	0x00000000
 800c798:	447a0000 	.word	0x447a0000
 800c79c:	3e93ffa3 	.word	0x3e93ffa3
 800c7a0:	3e5cec8f 	.word	0x3e5cec8f
 800c7a4:	3ea25c13 	.word	0x3ea25c13
 800c7a8:	40a00000 	.word	0x40a00000
 800c7ac:	3d57bb3d 	.word	0x3d57bb3d
 800c7b0:	01010100 	.word	0x01010100
 800c7b4:	41200000 	.word	0x41200000
 800c7b8:	3a9d4952 	.word	0x3a9d4952
 800c7bc:	3ac49ba6 	.word	0x3ac49ba6
 800c7c0:	3b03126f 	.word	0x3b03126f
 800c7c4:	402ab021 	.word	0x402ab021
 800c7c8:	3a83126f 	.word	0x3a83126f
 800c7cc:	3e006d36 	.word	0x3e006d36
 800c7d0:	3f639581 	.word	0x3f639581
 800c7d4:	3f13f7cf 	.word	0x3f13f7cf
 800c7d8:	3f2ac083 	.word	0x3f2ac083
 800c7dc:	3f4ccccd 	.word	0x3f4ccccd
 800c7e0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c7e2:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c7e6:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c7ea:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c7ee:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c7f2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c7f6:	ab33      	add	r3, sp, #204	; 0xcc
 800c7f8:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c7fc:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c800:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c804:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c806:	ab36      	add	r3, sp, #216	; 0xd8
 800c808:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c80c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c810:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c814:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c816:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c7dc <MFX_emptyAttitude+0x420>
 800c81a:	4bd6      	ldr	r3, [pc, #856]	; (800cb74 <MFX_emptyAttitude+0x7b8>)
 800c81c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c820:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c824:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c828:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c82c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c830:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c834:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c838:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c83c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c840:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c844:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c848:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c84c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c850:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c854:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c858:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c85c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c860:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c864:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c868:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c86c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c870:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c874:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c878:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c87c:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c880:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c884:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c888:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c88c:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c890:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c894:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c898:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c89c:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c8a0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c8a4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c8a8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c8ac:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c8b0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c8b4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c8b8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c8bc:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c8c0:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c8c4:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c8c8:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c8cc:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c8d0:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c8d4:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c8d8:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c8dc:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c8e0:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c8e4:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c8e8:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c8ec:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c8f0:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c8f4:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c8f8:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c8fc:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c900:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c904:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c908:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c90c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c910:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c914:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c918:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c91c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c920:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c924:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c928:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c92c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c930:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c934:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c938:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c93c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c940:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c944:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c948:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c94c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c950:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c954:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c958:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c95c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c960:	eddd 6a07 	vldr	s13, [sp, #28]
 800c964:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c968:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c96c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c970:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c974:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c978:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c97c:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c980:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c984:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c988:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c98c:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c990:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c994:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c998:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c99c:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c9a0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c9a4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c9a8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c9ac:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c9b0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c9b4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c9b8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c9bc:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c9c0:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c9c4:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c9c8:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c9cc:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c9d0:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c9d4:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c9d8:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c9dc:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c9e0:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c9e4:	eddd 7a05 	vldr	s15, [sp, #20]
 800c9e8:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c9ec:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c9f0:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c9f4:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c9f8:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c9fc:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800ca00:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800ca04:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800ca08:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800ca0c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800ca10:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800ca14:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800ca18:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800ca1c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800ca20:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800ca24:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800ca28:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800ca2c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800ca30:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800ca34:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800ca38:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800ca3c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800ca40:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800ca44:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800ca48:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800ca4c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800ca50:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800ca54:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800ca58:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800ca5c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800ca60:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800ca64:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800ca68:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800ca6c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800ca70:	7820      	ldrb	r0, [r4, #0]
 800ca72:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800ca76:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800ca7a:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800ca7e:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800ca82:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800ca86:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800ca8a:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800ca8e:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800ca92:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800ca96:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800ca9a:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800ca9e:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800caa2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800caa6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800caaa:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800caae:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800cab2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800cab6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800caba:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800cabe:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800cac2:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800cac6:	f8cd e00c 	str.w	lr, [sp, #12]
 800caca:	9500      	str	r5, [sp, #0]
 800cacc:	f7fe fcda 	bl	800b484 <DataHist_parameters>
 800cad0:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800cad4:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800cad8:	9205      	str	r2, [sp, #20]
 800cada:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800cade:	ed8b ba00 	vstr	s22, [fp]
 800cae2:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800cae6:	ed83 ba00 	vstr	s22, [r3]
 800caea:	9b05      	ldr	r3, [sp, #20]
 800caec:	9106      	str	r1, [sp, #24]
 800caee:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800caf2:	ed89 ba00 	vstr	s22, [r9]
 800caf6:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800cafa:	ed83 8a00 	vstr	s16, [r3]
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	9207      	str	r2, [sp, #28]
 800cb02:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800cb06:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800cb0a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800cb0e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800cb12:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800cb16:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800cb1a:	ed8e ba00 	vstr	s22, [lr]
 800cb1e:	ed8c ba00 	vstr	s22, [ip]
 800cb22:	ed87 ba00 	vstr	s22, [r7]
 800cb26:	ed86 ba00 	vstr	s22, [r6]
 800cb2a:	ed85 ba00 	vstr	s22, [r5]
 800cb2e:	ed84 ba00 	vstr	s22, [r4]
 800cb32:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800cb36:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800cb3a:	ed83 ba00 	vstr	s22, [r3]
 800cb3e:	9b07      	ldr	r3, [sp, #28]
 800cb40:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800cb44:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800cb48:	ed80 8a00 	vstr	s16, [r0]
 800cb4c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800cb50:	ed81 ba00 	vstr	s22, [r1]
 800cb54:	ed83 ba00 	vstr	s22, [r3]
 800cb58:	230a      	movs	r3, #10
 800cb5a:	ed82 ba00 	vstr	s22, [r2]
 800cb5e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800cb62:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800cb66:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800cb6a:	ecbd 8b10 	vpop	{d8-d15}
 800cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb72:	bf00      	nop
 800cb74:	3f333333 	.word	0x3f333333

0800cb78 <output_update>:
 800cb78:	ed90 7a00 	vldr	s14, [r0]
 800cb7c:	edd0 7a01 	vldr	s15, [r0, #4]
 800cb80:	ed90 5a03 	vldr	s10, [r0, #12]
 800cb84:	edd0 5a02 	vldr	s11, [r0, #8]
 800cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cb90:	ee27 6a07 	vmul.f32	s12, s14, s14
 800cb94:	ee67 6a05 	vmul.f32	s13, s14, s10
 800cb98:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cb9c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800cba0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cba4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cba8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800cbac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cbb0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800cbb4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cbb8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cbbc:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800cbc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cbc4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800cbc8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cbcc:	460f      	mov	r7, r1
 800cbce:	4615      	mov	r5, r2
 800cbd0:	461e      	mov	r6, r3
 800cbd2:	f1bc 0f00 	cmp.w	ip, #0
 800cbd6:	d146      	bne.n	800cc66 <output_update+0xee>
 800cbd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbdc:	eef1 6a66 	vneg.f32	s13, s13
 800cbe0:	edc3 7a01 	vstr	s15, [r3, #4]
 800cbe4:	edc3 6a00 	vstr	s13, [r3]
 800cbe8:	ed83 5a02 	vstr	s10, [r3, #8]
 800cbec:	4662      	mov	r2, ip
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	f7ff f955 	bl	800bea0 <q2hpr>
 800cbf6:	edd5 6a01 	vldr	s13, [r5, #4]
 800cbfa:	ed95 7a00 	vldr	s14, [r5]
 800cbfe:	edd5 7a02 	vldr	s15, [r5, #8]
 800cc02:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800cd14 <output_update+0x19c>
 800cc06:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc0a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800cc0e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800cc12:	ed85 7a00 	vstr	s14, [r5]
 800cc16:	edc5 6a01 	vstr	s13, [r5, #4]
 800cc1a:	edc5 7a02 	vstr	s15, [r5, #8]
 800cc1e:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc22:	edd6 7a00 	vldr	s15, [r6]
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc2c:	edc8 7a00 	vstr	s15, [r8]
 800cc30:	ed97 7a00 	vldr	s14, [r7]
 800cc34:	edd6 7a01 	vldr	s15, [r6, #4]
 800cc38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc3c:	edc8 7a01 	vstr	s15, [r8, #4]
 800cc40:	edd6 7a02 	vldr	s15, [r6, #8]
 800cc44:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc4c:	edc8 7a02 	vstr	s15, [r8, #8]
 800cc50:	edd4 7a02 	vldr	s15, [r4, #8]
 800cc54:	6863      	ldr	r3, [r4, #4]
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	eef1 7a67 	vneg.f32	s15, s15
 800cc5c:	6062      	str	r2, [r4, #4]
 800cc5e:	edc4 7a02 	vstr	s15, [r4, #8]
 800cc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc66:	f1bc 0f01 	cmp.w	ip, #1
 800cc6a:	d015      	beq.n	800cc98 <output_update+0x120>
 800cc6c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cd14 <output_update+0x19c>
 800cc70:	edd2 6a00 	vldr	s13, [r2]
 800cc74:	ed92 7a01 	vldr	s14, [r2, #4]
 800cc78:	edd2 7a02 	vldr	s15, [r2, #8]
 800cc7c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc80:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc84:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc88:	edc2 6a00 	vstr	s13, [r2]
 800cc8c:	ed82 7a01 	vstr	s14, [r2, #4]
 800cc90:	edc2 7a02 	vstr	s15, [r2, #8]
 800cc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc9c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800cca0:	eef1 6a66 	vneg.f32	s13, s13
 800cca4:	edc3 7a00 	vstr	s15, [r3]
 800cca8:	ed83 6a02 	vstr	s12, [r3, #8]
 800ccac:	edc3 6a01 	vstr	s13, [r3, #4]
 800ccb0:	4662      	mov	r2, ip
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	f7ff f8f4 	bl	800bea0 <q2hpr>
 800ccb8:	edd5 6a00 	vldr	s13, [r5]
 800ccbc:	ed95 7a01 	vldr	s14, [r5, #4]
 800ccc0:	edd5 7a02 	vldr	s15, [r5, #8]
 800ccc4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cd14 <output_update+0x19c>
 800ccc8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cccc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ccd0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ccd4:	ed85 7a01 	vstr	s14, [r5, #4]
 800ccd8:	edc5 6a00 	vstr	s13, [r5]
 800ccdc:	edc5 7a02 	vstr	s15, [r5, #8]
 800cce0:	ed97 7a00 	vldr	s14, [r7]
 800cce4:	edd6 7a00 	vldr	s15, [r6]
 800cce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccec:	edc8 7a00 	vstr	s15, [r8]
 800ccf0:	ed97 7a01 	vldr	s14, [r7, #4]
 800ccf4:	edd6 7a01 	vldr	s15, [r6, #4]
 800ccf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccfc:	edc8 7a01 	vstr	s15, [r8, #4]
 800cd00:	edd6 7a02 	vldr	s15, [r6, #8]
 800cd04:	ed97 7a02 	vldr	s14, [r7, #8]
 800cd08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd0c:	edc8 7a02 	vstr	s15, [r8, #8]
 800cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd14:	42652ee1 	.word	0x42652ee1

0800cd18 <kalman_3gyro.constprop.0>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ed2d 8b10 	vpush	{d8-d15}
 800cd20:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800cd24:	edd2 9a02 	vldr	s19, [r2, #8]
 800cd28:	edd2 8a03 	vldr	s17, [r2, #12]
 800cd2c:	edd2 6a04 	vldr	s13, [r2, #16]
 800cd30:	ed92 6a05 	vldr	s12, [r2, #20]
 800cd34:	6854      	ldr	r4, [r2, #4]
 800cd36:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800cd3a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cd3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd42:	4683      	mov	fp, r0
 800cd44:	edd2 7a00 	vldr	s15, [r2]
 800cd48:	48e3      	ldr	r0, [pc, #908]	; (800d0d8 <kalman_3gyro.constprop.0+0x3c0>)
 800cd4a:	9108      	str	r1, [sp, #32]
 800cd4c:	904a      	str	r0, [sp, #296]	; 0x128
 800cd4e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800cd52:	460d      	mov	r5, r1
 800cd54:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800cd58:	2100      	movs	r1, #0
 800cd5a:	9328      	str	r3, [sp, #160]	; 0xa0
 800cd5c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800cd60:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800cd64:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cd68:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800cd6c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800cd70:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800cd74:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800cd78:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800cd7c:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800cd80:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800cd84:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800cd88:	946f      	str	r4, [sp, #444]	; 0x1bc
 800cd8a:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cd8c:	9471      	str	r4, [sp, #452]	; 0x1c4
 800cd8e:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800cd92:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800cd96:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800cd9a:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800cd9e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cda2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cda6:	eeb0 8a60 	vmov.f32	s16, s1
 800cdaa:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800cdae:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800cdb2:	ed8d 1a07 	vstr	s2, [sp, #28]
 800cdb6:	f00a fde1 	bl	801797c <memset>
 800cdba:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800cdbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cdc2:	600b      	str	r3, [r1, #0]
 800cdc4:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cdc8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cdcc:	600b      	str	r3, [r1, #0]
 800cdce:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cdd2:	600b      	str	r3, [r1, #0]
 800cdd4:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cdd8:	600b      	str	r3, [r1, #0]
 800cdda:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cdde:	600b      	str	r3, [r1, #0]
 800cde0:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cde4:	600b      	str	r3, [r1, #0]
 800cde6:	2a00      	cmp	r2, #0
 800cde8:	f001 82c2 	beq.w	800e370 <kalman_3gyro.constprop.0+0x1658>
 800cdec:	ed95 5a02 	vldr	s10, [r5, #8]
 800cdf0:	edd5 5a01 	vldr	s11, [r5, #4]
 800cdf4:	ed95 3a00 	vldr	s6, [r5]
 800cdf8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cdfc:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800ce00:	ee35 4a05 	vadd.f32	s8, s10, s10
 800ce04:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800ce08:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ce0c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ce10:	ee33 3a03 	vadd.f32	s6, s6, s6
 800ce14:	9b08      	ldr	r3, [sp, #32]
 800ce16:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800ce1a:	ed82 4a00 	vstr	s8, [r2]
 800ce1e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800ce22:	edc2 4a00 	vstr	s9, [r2]
 800ce26:	ed93 6a05 	vldr	s12, [r3, #20]
 800ce2a:	edd3 6a04 	vldr	s13, [r3, #16]
 800ce2e:	ed93 7a03 	vldr	s14, [r3, #12]
 800ce32:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800ce36:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800ce3a:	ed82 5a00 	vstr	s10, [r2]
 800ce3e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800ce42:	ed82 3a00 	vstr	s6, [r2]
 800ce46:	eef1 3a46 	vneg.f32	s7, s12
 800ce4a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800ce4e:	edc2 5a00 	vstr	s11, [r2]
 800ce52:	eeb1 4a66 	vneg.f32	s8, s13
 800ce56:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800ce5a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800ce5e:	edc2 7a00 	vstr	s15, [r2]
 800ce62:	ee34 3a04 	vadd.f32	s6, s8, s8
 800ce66:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800ce6a:	eef1 4a47 	vneg.f32	s9, s14
 800ce6e:	ed82 5a00 	vstr	s10, [r2]
 800ce72:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800ce76:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800ce7a:	ed81 3a00 	vstr	s6, [r1]
 800ce7e:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800ce82:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800ce86:	ed81 5a00 	vstr	s10, [r1]
 800ce8a:	ee77 7a07 	vadd.f32	s15, s14, s14
 800ce8e:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800ce92:	edc1 5a00 	vstr	s11, [r1]
 800ce96:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800ce9a:	edc1 7a00 	vstr	s15, [r1]
 800ce9e:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800cea2:	2300      	movs	r3, #0
 800cea4:	600b      	str	r3, [r1, #0]
 800cea6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800ceaa:	ee76 2a06 	vadd.f32	s5, s12, s12
 800ceae:	600b      	str	r3, [r1, #0]
 800ceb0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800ceb4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800ceb8:	600b      	str	r3, [r1, #0]
 800ceba:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800cebe:	edc2 2a00 	vstr	s5, [r2]
 800cec2:	600b      	str	r3, [r1, #0]
 800cec4:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800cec8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800cecc:	600b      	str	r3, [r1, #0]
 800cece:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ced2:	a87b      	add	r0, sp, #492	; 0x1ec
 800ced4:	600b      	str	r3, [r1, #0]
 800ced6:	2230      	movs	r2, #48	; 0x30
 800ced8:	2100      	movs	r1, #0
 800ceda:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800cede:	934b      	str	r3, [sp, #300]	; 0x12c
 800cee0:	934f      	str	r3, [sp, #316]	; 0x13c
 800cee2:	9353      	str	r3, [sp, #332]	; 0x14c
 800cee4:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800cee8:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800ceec:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800cef0:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800cef4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800cef8:	942c      	str	r4, [sp, #176]	; 0xb0
 800cefa:	f00a fd3f 	bl	801797c <memset>
 800cefe:	eddb 6a06 	vldr	s13, [fp, #24]
 800cf02:	ed9b 7a07 	vldr	s14, [fp, #28]
 800cf06:	eddb 7a08 	vldr	s15, [fp, #32]
 800cf0a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800cf0e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800cf12:	ee28 7a07 	vmul.f32	s14, s16, s14
 800cf16:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cf1a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800cf1e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800cf22:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f043 84a8 	bne.w	801087c <kalman_3gyro.constprop.0+0x3b64>
 800cf2c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f043 81e7 	bne.w	8010304 <kalman_3gyro.constprop.0+0x35ec>
 800cf36:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800cf40:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cf44:	9310      	str	r3, [sp, #64]	; 0x40
 800cf46:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cf4a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cf4e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800cf52:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf54:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cf58:	edd0 7a00 	vldr	s15, [r0]
 800cf5c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cf60:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cf64:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cf68:	ed93 6a00 	vldr	s12, [r3]
 800cf6c:	ed91 7a00 	vldr	s14, [r1]
 800cf70:	edd2 6a00 	vldr	s13, [r2]
 800cf74:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cf78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf82:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cf86:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cf8a:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cf8e:	933a      	str	r3, [sp, #232]	; 0xe8
 800cf90:	933b      	str	r3, [sp, #236]	; 0xec
 800cf92:	933c      	str	r3, [sp, #240]	; 0xf0
 800cf94:	933d      	str	r3, [sp, #244]	; 0xf4
 800cf96:	d14e      	bne.n	800d036 <kalman_3gyro.constprop.0+0x31e>
 800cf98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa0:	d149      	bne.n	800d036 <kalman_3gyro.constprop.0+0x31e>
 800cfa2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfaa:	d144      	bne.n	800d036 <kalman_3gyro.constprop.0+0x31e>
 800cfac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	d13f      	bne.n	800d036 <kalman_3gyro.constprop.0+0x31e>
 800cfb6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cfb8:	9336      	str	r3, [sp, #216]	; 0xd8
 800cfba:	7802      	ldrb	r2, [r0, #0]
 800cfbc:	9337      	str	r3, [sp, #220]	; 0xdc
 800cfbe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cfc2:	9338      	str	r3, [sp, #224]	; 0xe0
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	ed90 7a03 	vldr	s14, [r0, #12]
 800cfca:	edd0 6a01 	vldr	s13, [r0, #4]
 800cfce:	edd0 7a02 	vldr	s15, [r0, #8]
 800cfd2:	9139      	str	r1, [sp, #228]	; 0xe4
 800cfd4:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cfd8:	2a00      	cmp	r2, #0
 800cfda:	f003 8568 	beq.w	8010aae <kalman_3gyro.constprop.0+0x3d96>
 800cfde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cfe2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cfe6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cfea:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cfee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cff2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cff6:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cffa:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cffe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800d002:	2100      	movs	r1, #0
 800d004:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800d008:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800d00c:	f00a fcb6 	bl	801797c <memset>
 800d010:	4b32      	ldr	r3, [pc, #200]	; (800d0dc <kalman_3gyro.constprop.0+0x3c4>)
 800d012:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800d016:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800d01a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800d01e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800d022:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800d026:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800d02a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800d02e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800d032:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800d036:	9b08      	ldr	r3, [sp, #32]
 800d038:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800d0e0 <kalman_3gyro.constprop.0+0x3c8>
 800d03c:	ed93 7a01 	vldr	s14, [r3, #4]
 800d040:	edd3 5a00 	vldr	s11, [r3]
 800d044:	edd3 7a02 	vldr	s15, [r3, #8]
 800d048:	ee67 6a07 	vmul.f32	s13, s14, s14
 800d04c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d050:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800d054:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05c:	f101 8127 	bmi.w	800e2ae <kalman_3gyro.constprop.0+0x1596>
 800d060:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800d064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d068:	ee79 6a66 	vsub.f32	s13, s18, s13
 800d06c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800d070:	eef0 6ae6 	vabs.f32	s13, s13
 800d074:	ee76 aaea 	vsub.f32	s21, s13, s21
 800d078:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800d07c:	ed93 5a04 	vldr	s10, [r3, #16]
 800d080:	ed93 3a03 	vldr	s6, [r3, #12]
 800d084:	edd3 1a05 	vldr	s3, [r3, #20]
 800d088:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d0e0 <kalman_3gyro.constprop.0+0x3c8>
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	ed95 ca00 	vldr	s24, [r5]
 800d092:	ed93 ba00 	vldr	s22, [r3]
 800d096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d09a:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800d09e:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800d0a2:	461e      	mov	r6, r3
 800d0a4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800d0a8:	9502      	str	r5, [sp, #8]
 800d0aa:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800d0ae:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800d0b2:	9327      	str	r3, [sp, #156]	; 0x9c
 800d0b4:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800d0b8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800d0bc:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800d0c0:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800d0c4:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800d0c8:	9501      	str	r5, [sp, #4]
 800d0ca:	ee65 6a05 	vmul.f32	s13, s10, s10
 800d0ce:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800d0d2:	eee3 6a03 	vfma.f32	s13, s6, s6
 800d0d6:	e009      	b.n	800d0ec <kalman_3gyro.constprop.0+0x3d4>
 800d0d8:	3a9d4952 	.word	0x3a9d4952
 800d0dc:	40a00000 	.word	0x40a00000
 800d0e0:	3c23d70a 	.word	0x3c23d70a
 800d0e4:	3dcccccd 	.word	0x3dcccccd
 800d0e8:	4b000000 	.word	0x4b000000
 800d0ec:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800d0f0:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800d0f4:	ee25 8a82 	vmul.f32	s16, s11, s4
 800d0f8:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800d0fc:	950c      	str	r5, [sp, #48]	; 0x30
 800d0fe:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800d102:	ee67 fa02 	vmul.f32	s31, s14, s4
 800d106:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10e:	bf58      	it	pl
 800d110:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800d114:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800d118:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800d11c:	bf48      	it	mi
 800d11e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800d0e4 <kalman_3gyro.constprop.0+0x3cc>
 800d122:	ed96 6a00 	vldr	s12, [r6]
 800d126:	edda 4a00 	vldr	s9, [sl]
 800d12a:	ed93 fa00 	vldr	s30, [r3]
 800d12e:	ed90 ea00 	vldr	s28, [r0]
 800d132:	edd4 3a00 	vldr	s7, [r4]
 800d136:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800d13a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800d13e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800d142:	9617      	str	r6, [sp, #92]	; 0x5c
 800d144:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800d148:	961a      	str	r6, [sp, #104]	; 0x68
 800d14a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800d14e:	9611      	str	r6, [sp, #68]	; 0x44
 800d150:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800d154:	9618      	str	r6, [sp, #96]	; 0x60
 800d156:	9e02      	ldr	r6, [sp, #8]
 800d158:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800d162:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d166:	ee23 3a26 	vmul.f32	s6, s6, s13
 800d16a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d16e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d172:	edd1 6a00 	vldr	s13, [r1]
 800d176:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800d17a:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800d17e:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800d182:	edcd 6a05 	vstr	s13, [sp, #20]
 800d186:	ed8d 6a06 	vstr	s12, [sp, #24]
 800d18a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800d18e:	ed92 6a00 	vldr	s12, [r2]
 800d192:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800d196:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800d19a:	edd6 2a00 	vldr	s5, [r6]
 800d19e:	eddc 4a00 	vldr	s9, [ip]
 800d1a2:	9e01      	ldr	r6, [sp, #4]
 800d1a4:	edd0 ca00 	vldr	s25, [r0]
 800d1a8:	ed96 1a00 	vldr	s2, [r6]
 800d1ac:	9803      	ldr	r0, [sp, #12]
 800d1ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d1b0:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800d1b4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800d1b8:	eddc 0a00 	vldr	s1, [ip]
 800d1bc:	ed96 da00 	vldr	s26, [r6]
 800d1c0:	edd0 4a00 	vldr	s9, [r0]
 800d1c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d1c6:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800d1ca:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800d1ce:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800d1d2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800d1d6:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800d1da:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800d1de:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800d1e2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d1e6:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800d1ea:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800d1ee:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800d1f2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800d1f6:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800d1fa:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800d1fe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d202:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800d206:	edd6 4a00 	vldr	s9, [r6]
 800d20a:	edd9 6a00 	vldr	s13, [r9]
 800d20e:	edde ba00 	vldr	s23, [lr]
 800d212:	ed95 4a00 	vldr	s8, [r5]
 800d216:	ed94 0a00 	vldr	s0, [r4]
 800d21a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800d21e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800d222:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800d226:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800d22a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800d22e:	edd9 ea00 	vldr	s29, [r9]
 800d232:	edd1 2a00 	vldr	s5, [r1]
 800d236:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800d23a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800d23e:	ed92 1a00 	vldr	s2, [r2]
 800d242:	edd3 ca00 	vldr	s25, [r3]
 800d246:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d24a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800d24e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d250:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d252:	edd3 4a00 	vldr	s9, [r3]
 800d256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d258:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d25c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d260:	edd3 fa00 	vldr	s31, [r3]
 800d264:	eef0 4a6f 	vmov.f32	s9, s31
 800d268:	edd6 fa00 	vldr	s31, [r6]
 800d26c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d26e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d272:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d276:	ed96 3a00 	vldr	s6, [r6]
 800d27a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d27c:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d280:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d284:	eddd 5a06 	vldr	s11, [sp, #24]
 800d288:	edd6 fa00 	vldr	s31, [r6]
 800d28c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d28e:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d292:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d296:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d29a:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d29e:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d2a2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d2a6:	edd8 5a00 	vldr	s11, [r8]
 800d2aa:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d2ae:	eef0 5a44 	vmov.f32	s11, s8
 800d2b2:	ed97 4a00 	vldr	s8, [r7]
 800d2b6:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d2ba:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d2be:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d2c2:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d2c6:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d2ca:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d2ce:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d2d2:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d2d6:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d2da:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d2de:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d2e2:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d2e6:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d2ea:	edd6 ca00 	vldr	s25, [r6]
 800d2ee:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d2f2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d2f4:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d2f8:	ed96 ea00 	vldr	s28, [r6]
 800d2fc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d2fe:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d302:	ed96 da00 	vldr	s26, [r6]
 800d306:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d308:	ee7f faac 	vadd.f32	s31, s31, s25
 800d30c:	edd6 ca00 	vldr	s25, [r6]
 800d310:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d314:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d318:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d31a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d31e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d322:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d326:	eddd ba05 	vldr	s23, [sp, #20]
 800d32a:	ed96 0a00 	vldr	s0, [r6]
 800d32e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d330:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d334:	eeee fa03 	vfma.f32	s31, s28, s6
 800d338:	eead 6a03 	vfma.f32	s12, s26, s6
 800d33c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d340:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d344:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d348:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800d0e4 <kalman_3gyro.constprop.0+0x3cc>
 800d34c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d350:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d354:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d358:	ed96 1a00 	vldr	s2, [r6]
 800d35c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d360:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d364:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d368:	ee6f faab 	vmul.f32	s31, s31, s23
 800d36c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d370:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d374:	eddc 0a00 	vldr	s1, [ip]
 800d378:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d37c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d380:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d384:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d388:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d38c:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d390:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d394:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d398:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d39c:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d3a0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d3a4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d3a8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d3ac:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d3b0:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d3b4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d3b8:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d3bc:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800d0e8 <kalman_3gyro.constprop.0+0x3d0>
 800d3c0:	eef0 4ac8 	vabs.f32	s9, s16
 800d3c4:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3cc:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d3d0:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d3d4:	eef1 caef 	vsqrt.f32	s25, s31
 800d3d8:	eef1 bae6 	vsqrt.f32	s23, s13
 800d3dc:	ee67 daad 	vmul.f32	s27, s15, s27
 800d3e0:	eeb0 ca45 	vmov.f32	s24, s10
 800d3e4:	d517      	bpl.n	800d416 <kalman_3gyro.constprop.0+0x6fe>
 800d3e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f2:	f2c1 806f 	blt.w	800e4d4 <kalman_3gyro.constprop.0+0x17bc>
 800d3f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d3fa:	ee17 0a90 	vmov	r0, s15
 800d3fe:	f7f3 f8a3 	bl	8000548 <__aeabi_f2d>
 800d402:	ec41 0b10 	vmov	d0, r0, r1
 800d406:	f008 fbcf 	bl	8015ba8 <floor>
 800d40a:	ec51 0b10 	vmov	r0, r1, d0
 800d40e:	f7f3 fbcb 	bl	8000ba8 <__aeabi_d2f>
 800d412:	ee08 0a10 	vmov	s16, r0
 800d416:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800d0e8 <kalman_3gyro.constprop.0+0x3d0>
 800d41a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d41e:	eef0 6ace 	vabs.f32	s13, s28
 800d422:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42a:	d517      	bpl.n	800d45c <kalman_3gyro.constprop.0+0x744>
 800d42c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d430:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d438:	f2c1 8040 	blt.w	800e4bc <kalman_3gyro.constprop.0+0x17a4>
 800d43c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d440:	ee17 0a90 	vmov	r0, s15
 800d444:	f7f3 f880 	bl	8000548 <__aeabi_f2d>
 800d448:	ec41 0b10 	vmov	d0, r0, r1
 800d44c:	f008 fbac 	bl	8015ba8 <floor>
 800d450:	ec51 0b10 	vmov	r0, r1, d0
 800d454:	f7f3 fba8 	bl	8000ba8 <__aeabi_d2f>
 800d458:	ee0e 0a10 	vmov	s28, r0
 800d45c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800d0e8 <kalman_3gyro.constprop.0+0x3d0>
 800d460:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d464:	eeb0 7aed 	vabs.f32	s14, s27
 800d468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	d517      	bpl.n	800d4a2 <kalman_3gyro.constprop.0+0x78a>
 800d472:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d476:	eef4 dae7 	vcmpe.f32	s27, s15
 800d47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47e:	f2c1 8011 	blt.w	800e4a4 <kalman_3gyro.constprop.0+0x178c>
 800d482:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d486:	ee17 0a90 	vmov	r0, s15
 800d48a:	f7f3 f85d 	bl	8000548 <__aeabi_f2d>
 800d48e:	ec41 0b10 	vmov	d0, r0, r1
 800d492:	f008 fb89 	bl	8015ba8 <floor>
 800d496:	ec51 0b10 	vmov	r0, r1, d0
 800d49a:	f7f3 fb85 	bl	8000ba8 <__aeabi_d2f>
 800d49e:	ee0d 0a90 	vmov	s27, r0
 800d4a2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d4a6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d4aa:	1e61      	subs	r1, r4, #1
 800d4ac:	b249      	sxtb	r1, r1
 800d4ae:	2900      	cmp	r1, #0
 800d4b0:	dd1a      	ble.n	800d4e8 <kalman_3gyro.constprop.0+0x7d0>
 800d4b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d4b6:	1ea0      	subs	r0, r4, #2
 800d4b8:	0089      	lsls	r1, r1, #2
 800d4ba:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d4be:	b2c0      	uxtb	r0, r0
 800d4c0:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d4c4:	440a      	add	r2, r1
 800d4c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d4ca:	445b      	add	r3, fp
 800d4cc:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d4d0:	6819      	ldr	r1, [r3, #0]
 800d4d2:	6858      	ldr	r0, [r3, #4]
 800d4d4:	60d9      	str	r1, [r3, #12]
 800d4d6:	6899      	ldr	r1, [r3, #8]
 800d4d8:	6118      	str	r0, [r3, #16]
 800d4da:	6159      	str	r1, [r3, #20]
 800d4dc:	3b0c      	subs	r3, #12
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d1f6      	bne.n	800d4d0 <kalman_3gyro.constprop.0+0x7b8>
 800d4e2:	9b04      	ldr	r3, [sp, #16]
 800d4e4:	ed93 ba00 	vldr	s22, [r3]
 800d4e8:	ed88 8a00 	vstr	s16, [r8]
 800d4ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d4f0:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d4f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d4f6:	ed83 ea00 	vstr	s28, [r3]
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d500:	edc3 da00 	vstr	s27, [r3]
 800d504:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d508:	3301      	adds	r3, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	429c      	cmp	r4, r3
 800d50e:	bf28      	it	cs
 800d510:	461c      	movcs	r4, r3
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d518:	edd3 da03 	vldr	s27, [r3, #12]
 800d51c:	ed93 ba04 	vldr	s22, [r3, #16]
 800d520:	edd3 6a05 	vldr	s13, [r3, #20]
 800d524:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d528:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d52c:	eeb0 7aed 	vabs.f32	s14, s27
 800d530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d538:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d53c:	d517      	bpl.n	800d56e <kalman_3gyro.constprop.0+0x856>
 800d53e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d542:	eef4 dae7 	vcmpe.f32	s27, s15
 800d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54a:	f2c0 879f 	blt.w	800e48c <kalman_3gyro.constprop.0+0x1774>
 800d54e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d552:	ee17 0a90 	vmov	r0, s15
 800d556:	f7f2 fff7 	bl	8000548 <__aeabi_f2d>
 800d55a:	ec41 0b10 	vmov	d0, r0, r1
 800d55e:	f008 fb23 	bl	8015ba8 <floor>
 800d562:	ec51 0b10 	vmov	r0, r1, d0
 800d566:	f7f3 fb1f 	bl	8000ba8 <__aeabi_d2f>
 800d56a:	ee0d 0a90 	vmov	s27, r0
 800d56e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d572:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d576:	eeb0 7acb 	vabs.f32	s14, s22
 800d57a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d582:	d517      	bpl.n	800d5b4 <kalman_3gyro.constprop.0+0x89c>
 800d584:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d588:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d590:	f2c0 8770 	blt.w	800e474 <kalman_3gyro.constprop.0+0x175c>
 800d594:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d598:	ee17 0a90 	vmov	r0, s15
 800d59c:	f7f2 ffd4 	bl	8000548 <__aeabi_f2d>
 800d5a0:	ec41 0b10 	vmov	d0, r0, r1
 800d5a4:	f008 fb00 	bl	8015ba8 <floor>
 800d5a8:	ec51 0b10 	vmov	r0, r1, d0
 800d5ac:	f7f3 fafc 	bl	8000ba8 <__aeabi_d2f>
 800d5b0:	ee0b 0a10 	vmov	s22, r0
 800d5b4:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d5b8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d5bc:	eeb0 7ac8 	vabs.f32	s14, s16
 800d5c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c8:	d517      	bpl.n	800d5fa <kalman_3gyro.constprop.0+0x8e2>
 800d5ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d5ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d6:	f2c0 8741 	blt.w	800e45c <kalman_3gyro.constprop.0+0x1744>
 800d5da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d5de:	ee17 0a90 	vmov	r0, s15
 800d5e2:	f7f2 ffb1 	bl	8000548 <__aeabi_f2d>
 800d5e6:	ec41 0b10 	vmov	d0, r0, r1
 800d5ea:	f008 fadd 	bl	8015ba8 <floor>
 800d5ee:	ec51 0b10 	vmov	r0, r1, d0
 800d5f2:	f7f3 fad9 	bl	8000ba8 <__aeabi_d2f>
 800d5f6:	ee08 0a10 	vmov	s16, r0
 800d5fa:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d5fe:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d602:	1e61      	subs	r1, r4, #1
 800d604:	b249      	sxtb	r1, r1
 800d606:	2900      	cmp	r1, #0
 800d608:	dd17      	ble.n	800d63a <kalman_3gyro.constprop.0+0x922>
 800d60a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d60e:	1ea2      	subs	r2, r4, #2
 800d610:	0089      	lsls	r1, r1, #2
 800d612:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d61c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d620:	4401      	add	r1, r0
 800d622:	445b      	add	r3, fp
 800d624:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	6858      	ldr	r0, [r3, #4]
 800d62c:	60da      	str	r2, [r3, #12]
 800d62e:	689a      	ldr	r2, [r3, #8]
 800d630:	6118      	str	r0, [r3, #16]
 800d632:	615a      	str	r2, [r3, #20]
 800d634:	3b0c      	subs	r3, #12
 800d636:	4299      	cmp	r1, r3
 800d638:	d1f6      	bne.n	800d628 <kalman_3gyro.constprop.0+0x910>
 800d63a:	9b02      	ldr	r3, [sp, #8]
 800d63c:	edc7 da00 	vstr	s27, [r7]
 800d640:	ed83 ba00 	vstr	s22, [r3]
 800d644:	9b03      	ldr	r3, [sp, #12]
 800d646:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d64a:	ed83 8a00 	vstr	s16, [r3]
 800d64e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d652:	3301      	adds	r3, #1
 800d654:	b2db      	uxtb	r3, r3
 800d656:	429c      	cmp	r4, r3
 800d658:	bf28      	it	cs
 800d65a:	461c      	movcs	r4, r3
 800d65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d65e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d662:	ed93 7a00 	vldr	s14, [r3]
 800d666:	9b08      	ldr	r3, [sp, #32]
 800d668:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d66c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d670:	edd3 da06 	vldr	s27, [r3, #24]
 800d674:	ed93 ba07 	vldr	s22, [r3, #28]
 800d678:	edd3 6a08 	vldr	s13, [r3, #32]
 800d67c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d680:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d684:	eeb0 7aed 	vabs.f32	s14, s27
 800d688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d690:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d694:	d517      	bpl.n	800d6c6 <kalman_3gyro.constprop.0+0x9ae>
 800d696:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d69a:	eef4 dae7 	vcmpe.f32	s27, s15
 800d69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a2:	f2c0 86cf 	blt.w	800e444 <kalman_3gyro.constprop.0+0x172c>
 800d6a6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d6aa:	ee17 0a90 	vmov	r0, s15
 800d6ae:	f7f2 ff4b 	bl	8000548 <__aeabi_f2d>
 800d6b2:	ec41 0b10 	vmov	d0, r0, r1
 800d6b6:	f008 fa77 	bl	8015ba8 <floor>
 800d6ba:	ec51 0b10 	vmov	r0, r1, d0
 800d6be:	f7f3 fa73 	bl	8000ba8 <__aeabi_d2f>
 800d6c2:	ee0d 0a90 	vmov	s27, r0
 800d6c6:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d6ca:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d6ce:	eeb0 7acb 	vabs.f32	s14, s22
 800d6d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6da:	d517      	bpl.n	800d70c <kalman_3gyro.constprop.0+0x9f4>
 800d6dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d6e0:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e8:	f2c0 86a0 	blt.w	800e42c <kalman_3gyro.constprop.0+0x1714>
 800d6ec:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d6f0:	ee17 0a90 	vmov	r0, s15
 800d6f4:	f7f2 ff28 	bl	8000548 <__aeabi_f2d>
 800d6f8:	ec41 0b10 	vmov	d0, r0, r1
 800d6fc:	f008 fa54 	bl	8015ba8 <floor>
 800d700:	ec51 0b10 	vmov	r0, r1, d0
 800d704:	f7f3 fa50 	bl	8000ba8 <__aeabi_d2f>
 800d708:	ee0b 0a10 	vmov	s22, r0
 800d70c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d794 <kalman_3gyro.constprop.0+0xa7c>
 800d710:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d714:	eeb0 7ac8 	vabs.f32	s14, s16
 800d718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	d517      	bpl.n	800d752 <kalman_3gyro.constprop.0+0xa3a>
 800d722:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d726:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	f2c0 8671 	blt.w	800e414 <kalman_3gyro.constprop.0+0x16fc>
 800d732:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d736:	ee17 0a90 	vmov	r0, s15
 800d73a:	f7f2 ff05 	bl	8000548 <__aeabi_f2d>
 800d73e:	ec41 0b10 	vmov	d0, r0, r1
 800d742:	f008 fa31 	bl	8015ba8 <floor>
 800d746:	ec51 0b10 	vmov	r0, r1, d0
 800d74a:	f7f3 fa2d 	bl	8000ba8 <__aeabi_d2f>
 800d74e:	ee08 0a10 	vmov	s16, r0
 800d752:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d756:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d75a:	1e63      	subs	r3, r4, #1
 800d75c:	b25b      	sxtb	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	dd1c      	ble.n	800d79c <kalman_3gyro.constprop.0+0xa84>
 800d762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d766:	1ea2      	subs	r2, r4, #2
 800d768:	0099      	lsls	r1, r3, #2
 800d76a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d76e:	b2d2      	uxtb	r2, r2
 800d770:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d774:	4408      	add	r0, r1
 800d776:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d77a:	445b      	add	r3, fp
 800d77c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	6859      	ldr	r1, [r3, #4]
 800d784:	60da      	str	r2, [r3, #12]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	6119      	str	r1, [r3, #16]
 800d78a:	615a      	str	r2, [r3, #20]
 800d78c:	3b0c      	subs	r3, #12
 800d78e:	4283      	cmp	r3, r0
 800d790:	d1f6      	bne.n	800d780 <kalman_3gyro.constprop.0+0xa68>
 800d792:	e003      	b.n	800d79c <kalman_3gyro.constprop.0+0xa84>
 800d794:	4b000000 	.word	0x4b000000
 800d798:	00000000 	.word	0x00000000
 800d79c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d79e:	edc3 da00 	vstr	s27, [r3]
 800d7a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7a4:	ed83 ba00 	vstr	s22, [r3]
 800d7a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7aa:	ed83 8a00 	vstr	s16, [r3]
 800d7ae:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	429c      	cmp	r4, r3
 800d7b8:	bf28      	it	cs
 800d7ba:	461c      	movcs	r4, r3
 800d7bc:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d7c0:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d7c4:	aa54      	add	r2, sp, #336	; 0x150
 800d7c6:	a92d      	add	r1, sp, #180	; 0xb4
 800d7c8:	a830      	add	r0, sp, #192	; 0xc0
 800d7ca:	461c      	mov	r4, r3
 800d7cc:	9314      	str	r3, [sp, #80]	; 0x50
 800d7ce:	f7fe fa27 	bl	800bc20 <getRotationMatrix>
 800d7d2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d7d6:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d7da:	6820      	ldr	r0, [r4, #0]
 800d7dc:	6861      	ldr	r1, [r4, #4]
 800d7de:	68a2      	ldr	r2, [r4, #8]
 800d7e0:	68e3      	ldr	r3, [r4, #12]
 800d7e2:	4635      	mov	r5, r6
 800d7e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7e6:	3410      	adds	r4, #16
 800d7e8:	42bc      	cmp	r4, r7
 800d7ea:	462e      	mov	r6, r5
 800d7ec:	d1f5      	bne.n	800d7da <kalman_3gyro.constprop.0+0xac2>
 800d7ee:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d7f2:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d7f6:	6820      	ldr	r0, [r4, #0]
 800d7f8:	6028      	str	r0, [r5, #0]
 800d7fa:	eef0 7ae7 	vabs.f32	s15, s15
 800d7fe:	eeb0 7ac7 	vabs.f32	s14, s14
 800d802:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80a:	f140 85a4 	bpl.w	800e356 <kalman_3gyro.constprop.0+0x163e>
 800d80e:	2303      	movs	r3, #3
 800d810:	2706      	movs	r7, #6
 800d812:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d816:	2604      	movs	r6, #4
 800d818:	2400      	movs	r4, #0
 800d81a:	eef0 7a47 	vmov.f32	s15, s14
 800d81e:	4632      	mov	r2, r6
 800d820:	46a2      	mov	sl, r4
 800d822:	2107      	movs	r1, #7
 800d824:	f04f 0c01 	mov.w	ip, #1
 800d828:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d82c:	eeb0 7ac7 	vabs.f32	s14, s14
 800d830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d838:	f340 85ae 	ble.w	800e398 <kalman_3gyro.constprop.0+0x1680>
 800d83c:	2304      	movs	r3, #4
 800d83e:	2007      	movs	r0, #7
 800d840:	2108      	movs	r1, #8
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	461c      	mov	r4, r3
 800d846:	9002      	str	r0, [sp, #8]
 800d848:	460a      	mov	r2, r1
 800d84a:	2306      	movs	r3, #6
 800d84c:	2003      	movs	r0, #3
 800d84e:	2605      	movs	r6, #5
 800d850:	f04f 0800 	mov.w	r8, #0
 800d854:	f04f 0a01 	mov.w	sl, #1
 800d858:	f04f 0c02 	mov.w	ip, #2
 800d85c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d85e:	442c      	add	r4, r5
 800d860:	442a      	add	r2, r5
 800d862:	edd4 6a00 	vldr	s13, [r4]
 800d866:	ed92 7a00 	vldr	s14, [r2]
 800d86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d86e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d872:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d876:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d87a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d87e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d882:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d886:	970c      	str	r7, [sp, #48]	; 0x30
 800d888:	9f01      	ldr	r7, [sp, #4]
 800d88a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d88e:	00b6      	lsls	r6, r6, #2
 800d890:	960a      	str	r6, [sp, #40]	; 0x28
 800d892:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d896:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d89a:	edc4 7a00 	vstr	s15, [r4]
 800d89e:	edd2 7a00 	vldr	s15, [r2]
 800d8a2:	ed99 7a00 	vldr	s14, [r9]
 800d8a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d8aa:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d8ae:	9204      	str	r2, [sp, #16]
 800d8b0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d8b4:	9205      	str	r2, [sp, #20]
 800d8b6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d8ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d8bc:	00ba      	lsls	r2, r7, #2
 800d8be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d8c0:	9206      	str	r2, [sp, #24]
 800d8c2:	0080      	lsls	r0, r0, #2
 800d8c4:	9003      	str	r0, [sp, #12]
 800d8c6:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d8ca:	0089      	lsls	r1, r1, #2
 800d8cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d8ce:	edc9 6a00 	vstr	s13, [r9]
 800d8d2:	ed94 6a00 	vldr	s12, [r4]
 800d8d6:	ed97 7a00 	vldr	s14, [r7]
 800d8da:	edd5 7a00 	vldr	s15, [r5]
 800d8de:	9902      	ldr	r1, [sp, #8]
 800d8e0:	9a02      	ldr	r2, [sp, #8]
 800d8e2:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d8e6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d8ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d8ee:	0092      	lsls	r2, r2, #2
 800d8f0:	edc5 7a00 	vstr	s15, [r5]
 800d8f4:	ed97 7a00 	vldr	s14, [r7]
 800d8f8:	edde 7a00 	vldr	s15, [lr]
 800d8fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	edce 7a00 	vstr	s15, [lr]
 800d906:	edd0 5a00 	vldr	s11, [r0]
 800d90a:	ed91 7a00 	vldr	s14, [r1]
 800d90e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d912:	eef0 7ae7 	vabs.f32	s15, s15
 800d916:	ed81 7a00 	vstr	s14, [r1]
 800d91a:	ed90 6a00 	vldr	s12, [r0]
 800d91e:	ed96 7a00 	vldr	s14, [r6]
 800d922:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d926:	ed86 7a00 	vstr	s14, [r6]
 800d92a:	ed95 7a00 	vldr	s14, [r5]
 800d92e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d932:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	dd10      	ble.n	800d95e <kalman_3gyro.constprop.0+0xc46>
 800d93c:	4652      	mov	r2, sl
 800d93e:	46c2      	mov	sl, r8
 800d940:	4690      	mov	r8, r2
 800d942:	461a      	mov	r2, r3
 800d944:	9b01      	ldr	r3, [sp, #4]
 800d946:	9902      	ldr	r1, [sp, #8]
 800d948:	9803      	ldr	r0, [sp, #12]
 800d94a:	9006      	str	r0, [sp, #24]
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	9303      	str	r3, [sp, #12]
 800d950:	008b      	lsls	r3, r1, #2
 800d952:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d956:	9105      	str	r1, [sp, #20]
 800d958:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d95c:	9104      	str	r1, [sp, #16]
 800d95e:	9903      	ldr	r1, [sp, #12]
 800d960:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d964:	4401      	add	r1, r0
 800d966:	460c      	mov	r4, r1
 800d968:	9906      	ldr	r1, [sp, #24]
 800d96a:	ed94 7a00 	vldr	s14, [r4]
 800d96e:	4401      	add	r1, r0
 800d970:	edd1 7a00 	vldr	s15, [r1]
 800d974:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d978:	4608      	mov	r0, r1
 800d97a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d97e:	440a      	add	r2, r1
 800d980:	440b      	add	r3, r1
 800d982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d984:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d988:	4429      	add	r1, r5
 800d98a:	460d      	mov	r5, r1
 800d98c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d98e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d992:	4431      	add	r1, r6
 800d994:	468e      	mov	lr, r1
 800d996:	ed84 3a00 	vstr	s6, [r4]
 800d99a:	ed92 7a00 	vldr	s14, [r2]
 800d99e:	edd3 7a00 	vldr	s15, [r3]
 800d9a2:	9904      	ldr	r1, [sp, #16]
 800d9a4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d9a8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d9ac:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d9b0:	440e      	add	r6, r1
 800d9b2:	1879      	adds	r1, r7, r1
 800d9b4:	edc3 7a00 	vstr	s15, [r3]
 800d9b8:	9101      	str	r1, [sp, #4]
 800d9ba:	9b05      	ldr	r3, [sp, #20]
 800d9bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9be:	edd2 0a00 	vldr	s1, [r2]
 800d9c2:	ed95 1a00 	vldr	s2, [r5]
 800d9c6:	ed9e 2a00 	vldr	s4, [lr]
 800d9ca:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d9ce:	edd6 6a00 	vldr	s13, [r6]
 800d9d2:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d9d6:	1874      	adds	r4, r6, r1
 800d9d8:	18f7      	adds	r7, r6, r3
 800d9da:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d9de:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d9e2:	eb06 0903 	add.w	r9, r6, r3
 800d9e6:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d9ea:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d9ee:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d9f2:	4633      	mov	r3, r6
 800d9f4:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d9f8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d9fc:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800da00:	448c      	add	ip, r1
 800da02:	9901      	ldr	r1, [sp, #4]
 800da04:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800da08:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800da0c:	ed94 7a00 	vldr	s14, [r4]
 800da10:	ed93 6a00 	vldr	s12, [r3]
 800da14:	edd0 7a00 	vldr	s15, [r0]
 800da18:	ed99 8a00 	vldr	s16, [r9]
 800da1c:	ed91 ba00 	vldr	s22, [r1]
 800da20:	ed97 4a00 	vldr	s8, [r7]
 800da24:	edd6 4a00 	vldr	s9, [r6]
 800da28:	eddc da00 	vldr	s27, [ip]
 800da2c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800da30:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800da34:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800da38:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800da3c:	46a2      	mov	sl, r4
 800da3e:	4613      	mov	r3, r2
 800da40:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800da44:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800da48:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800da4c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800da50:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800da54:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800da58:	eea8 4a47 	vfms.f32	s8, s16, s14
 800da5c:	ed94 5a00 	vldr	s10, [r4]
 800da60:	edda 3a00 	vldr	s7, [sl]
 800da64:	edd2 5a00 	vldr	s11, [r2]
 800da68:	edd3 7a00 	vldr	s15, [r3]
 800da6c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800da70:	eee8 5a64 	vfms.f32	s11, s16, s9
 800da74:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800da78:	eee6 7a48 	vfms.f32	s15, s12, s16
 800da7c:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800da80:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800da84:	eee3 5a45 	vfms.f32	s11, s6, s10
 800da88:	eee3 7a63 	vfms.f32	s15, s6, s7
 800da8c:	ee20 4a04 	vmul.f32	s8, s0, s8
 800da90:	ee60 5a25 	vmul.f32	s11, s0, s11
 800da94:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da98:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800da9c:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800daa0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800daa4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800daa8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800daac:	eee1 4a65 	vfms.f32	s9, s2, s11
 800dab0:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800dab4:	ee21 5a85 	vmul.f32	s10, s3, s10
 800dab8:	eea2 7a66 	vfms.f32	s14, s4, s13
 800dabc:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800dac0:	eee2 4a45 	vfms.f32	s9, s4, s10
 800dac4:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800dac8:	ee28 7a07 	vmul.f32	s14, s16, s14
 800dacc:	ee37 3a85 	vadd.f32	s6, s15, s10
 800dad0:	ee68 4a24 	vmul.f32	s9, s16, s9
 800dad4:	ee26 8a08 	vmul.f32	s16, s12, s16
 800dad8:	ee37 6a43 	vsub.f32	s12, s14, s6
 800dadc:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800dae0:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800daec:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800daf0:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800daf4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800daf8:	bfc8      	it	gt
 800dafa:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800dafe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800db02:	bfcc      	ite	gt
 800db04:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800db08:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d798 <kalman_3gyro.constprop.0+0xa80>
 800db0c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800db10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db14:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800db18:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800db1c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800db20:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800db24:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800db28:	f100 84e4 	bmi.w	800e4f4 <kalman_3gyro.constprop.0+0x17dc>
 800db2c:	bfd8      	it	le
 800db2e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800db32:	ee37 6a87 	vadd.f32	s12, s15, s14
 800db36:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800db3a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800db3e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800db42:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800db46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800db4e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800db52:	bf84      	itt	hi
 800db54:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800db58:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800db5c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800db60:	bf8c      	ite	hi
 800db62:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800db66:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800dee8 <kalman_3gyro.constprop.0+0x11d0>
 800db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6e:	f100 84bd 	bmi.w	800e4ec <kalman_3gyro.constprop.0+0x17d4>
 800db72:	bfd8      	it	le
 800db74:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800db78:	ee37 7a05 	vadd.f32	s14, s14, s10
 800db7c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800db80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db84:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800db88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db90:	bf84      	itt	hi
 800db92:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800db96:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800db9a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800db9e:	bf8c      	ite	hi
 800dba0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800dba4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800dee8 <kalman_3gyro.constprop.0+0x11d0>
 800dba8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb0:	ee63 3a86 	vmul.f32	s7, s7, s12
 800dbb4:	f102 8399 	bmi.w	80102ea <kalman_3gyro.constprop.0+0x35d2>
 800dbb8:	bfd8      	it	le
 800dbba:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800dbbe:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800dbc2:	1e53      	subs	r3, r2, #1
 800dbc4:	b25b      	sxtb	r3, r3
 800dbc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbd0:	dd1c      	ble.n	800dc0c <kalman_3gyro.constprop.0+0xef4>
 800dbd2:	3a02      	subs	r2, #2
 800dbd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbd8:	b2d2      	uxtb	r2, r2
 800dbda:	f1ab 000c 	sub.w	r0, fp, #12
 800dbde:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dbe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dbe6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800dbea:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800dbee:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800dbf2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800dbf6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800dbfa:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800dbfe:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800dc02:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800dc06:	3b0c      	subs	r3, #12
 800dc08:	4283      	cmp	r3, r0
 800dc0a:	d1f0      	bne.n	800dbee <kalman_3gyro.constprop.0+0xed6>
 800dc0c:	eddd 6a07 	vldr	s13, [sp, #28]
 800dc10:	4ab6      	ldr	r2, [pc, #728]	; (800deec <kalman_3gyro.constprop.0+0x11d4>)
 800dc12:	4bb7      	ldr	r3, [pc, #732]	; (800def0 <kalman_3gyro.constprop.0+0x11d8>)
 800dc14:	ed92 8a00 	vldr	s16, [r2]
 800dc18:	ed93 ba00 	vldr	s22, [r3]
 800dc1c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800dc20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc24:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dc28:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800dc2c:	f1c1 0101 	rsb	r1, r1, #1
 800dc30:	910c      	str	r1, [sp, #48]	; 0x30
 800dc32:	a92d      	add	r1, sp, #180	; 0xb4
 800dc34:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800dc38:	9123      	str	r1, [sp, #140]	; 0x8c
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	9109      	str	r1, [sp, #36]	; 0x24
 800dc3e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800dc42:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800dc46:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800dc4a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800dc4e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800dc52:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800dc56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc5a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc5e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800dc62:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800dc66:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800dc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dc70:	3301      	adds	r3, #1
 800dc72:	9309      	str	r3, [sp, #36]	; 0x24
 800dc74:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dc78:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800dc7c:	18e0      	adds	r0, r4, r3
 800dc7e:	f803 0f01 	strb.w	r0, [r3, #1]!
 800dc82:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800dc86:	f841 0b04 	str.w	r0, [r1], #4
 800dc8a:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800dc8e:	4298      	cmp	r0, r3
 800dc90:	f102 020c 	add.w	r2, r2, #12
 800dc94:	d1f2      	bne.n	800dc7c <kalman_3gyro.constprop.0+0xf64>
 800dc96:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dc9a:	ed93 7a00 	vldr	s14, [r3]
 800dc9e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800dca2:	edd3 7a00 	vldr	s15, [r3]
 800dca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcae:	bf84      	itt	hi
 800dcb0:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800dcb4:	f8a9 3000 	strhhi.w	r3, [r9]
 800dcb8:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800dcbc:	ed93 7a00 	vldr	s14, [r3]
 800dcc0:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800dcc4:	edd3 7a00 	vldr	s15, [r3]
 800dcc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd0:	bf84      	itt	hi
 800dcd2:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800dcd6:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800dcda:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800dcde:	ed93 7a00 	vldr	s14, [r3]
 800dce2:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dce6:	edd3 7a00 	vldr	s15, [r3]
 800dcea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf2:	bf84      	itt	hi
 800dcf4:	f240 5306 	movwhi	r3, #1286	; 0x506
 800dcf8:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800dcfc:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800dd00:	ed93 7a00 	vldr	s14, [r3]
 800dd04:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800dd08:	edd3 7a00 	vldr	s15, [r3]
 800dd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd14:	bf84      	itt	hi
 800dd16:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800dd1a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800dd1e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800dd22:	ed93 7a00 	vldr	s14, [r3]
 800dd26:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800dd2a:	edd3 7a00 	vldr	s15, [r3]
 800dd2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	bf84      	itt	hi
 800dd38:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800dd3c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800dd40:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800dd44:	ed93 7a00 	vldr	s14, [r3]
 800dd48:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800dd4c:	edd3 7a00 	vldr	s15, [r3]
 800dd50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd58:	bf84      	itt	hi
 800dd5a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800dd5e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800dd62:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800dd66:	ed93 7a00 	vldr	s14, [r3]
 800dd6a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800dd6e:	edd3 7a00 	vldr	s15, [r3]
 800dd72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7a:	bf84      	itt	hi
 800dd7c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800dd80:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800dd84:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800dd88:	ed93 7a00 	vldr	s14, [r3]
 800dd8c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800dd90:	edd3 7a00 	vldr	s15, [r3]
 800dd94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	bf84      	itt	hi
 800dd9e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800dda2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800dda6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800ddaa:	ed93 7a00 	vldr	s14, [r3]
 800ddae:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800ddb2:	edd3 7a00 	vldr	s15, [r3]
 800ddb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbe:	bf84      	itt	hi
 800ddc0:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800ddc4:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800ddc8:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800ddcc:	ed93 7a00 	vldr	s14, [r3]
 800ddd0:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800ddd4:	edd3 7a00 	vldr	s15, [r3]
 800ddd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde0:	bf84      	itt	hi
 800dde2:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800dde6:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800ddea:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800ddee:	ed93 7a00 	vldr	s14, [r3]
 800ddf2:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800ddf6:	edd3 7a00 	vldr	s15, [r3]
 800ddfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	bf84      	itt	hi
 800de04:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800de08:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800de0c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800de10:	ed93 7a00 	vldr	s14, [r3]
 800de14:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800de18:	edd3 7a00 	vldr	s15, [r3]
 800de1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	bf84      	itt	hi
 800de26:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800de2a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800de2e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800de32:	ed93 7a00 	vldr	s14, [r3]
 800de36:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800de3a:	edd3 7a00 	vldr	s15, [r3]
 800de3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de46:	bf84      	itt	hi
 800de48:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800de4c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800de50:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800de54:	ed93 7a00 	vldr	s14, [r3]
 800de58:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800de5c:	edd3 7a00 	vldr	s15, [r3]
 800de60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	bf84      	itt	hi
 800de6a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800de6e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800de72:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800de76:	ed93 7a00 	vldr	s14, [r3]
 800de7a:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800de7e:	edd3 7a00 	vldr	s15, [r3]
 800de82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8a:	bf84      	itt	hi
 800de8c:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800de90:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800de94:	221e      	movs	r2, #30
 800de96:	2101      	movs	r1, #1
 800de98:	4650      	mov	r0, sl
 800de9a:	f009 fd6f 	bl	801797c <memset>
 800de9e:	2304      	movs	r3, #4
 800dea0:	9307      	str	r3, [sp, #28]
 800dea2:	2302      	movs	r3, #2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	9b05      	ldr	r3, [sp, #20]
 800dea8:	9306      	str	r3, [sp, #24]
 800deaa:	1c5f      	adds	r7, r3, #1
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	9305      	str	r3, [sp, #20]
 800deb0:	f04f 0b01 	mov.w	fp, #1
 800deb4:	9b05      	ldr	r3, [sp, #20]
 800deb6:	f8cd b004 	str.w	fp, [sp, #4]
 800deba:	445b      	add	r3, fp
 800debc:	2b1f      	cmp	r3, #31
 800debe:	bfa8      	it	ge
 800dec0:	231f      	movge	r3, #31
 800dec2:	465a      	mov	r2, fp
 800dec4:	eba3 0802 	sub.w	r8, r3, r2
 800dec8:	f1b8 0f00 	cmp.w	r8, #0
 800decc:	469b      	mov	fp, r3
 800dece:	f107 35ff 	add.w	r5, r7, #4294967295
 800ded2:	dd44      	ble.n	800df5e <kalman_3gyro.constprop.0+0x1246>
 800ded4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ded8:	9302      	str	r3, [sp, #8]
 800deda:	f1ab 0302 	sub.w	r3, fp, #2
 800dede:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800dee2:	4616      	mov	r6, r2
 800dee4:	2400      	movs	r4, #0
 800dee6:	e00f      	b.n	800df08 <kalman_3gyro.constprop.0+0x11f0>
 800dee8:	00000000 	.word	0x00000000
 800deec:	200019e4 	.word	0x200019e4
 800def0:	200019f4 	.word	0x200019f4
 800def4:	3f333333 	.word	0x3f333333
 800def8:	3f4ccccd 	.word	0x3f4ccccd
 800defc:	3f666666 	.word	0x3f666666
 800df00:	3ecccccc 	.word	0x3ecccccc
 800df04:	3dcccccd 	.word	0x3dcccccd
 800df08:	1e71      	subs	r1, r6, #1
 800df0a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800df0e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800df12:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800df16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df1a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800df1e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800df22:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800df26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2e:	f105 0c02 	add.w	ip, r5, #2
 800df32:	f105 0801 	add.w	r8, r5, #1
 800df36:	f240 81d3 	bls.w	800e2e0 <kalman_3gyro.constprop.0+0x15c8>
 800df3a:	45e3      	cmp	fp, ip
 800df3c:	f80a 0004 	strb.w	r0, [sl, r4]
 800df40:	f000 81bf 	beq.w	800e2c2 <kalman_3gyro.constprop.0+0x15aa>
 800df44:	4645      	mov	r5, r8
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	3401      	adds	r4, #1
 800df4a:	42a3      	cmp	r3, r4
 800df4c:	dcdc      	bgt.n	800df08 <kalman_3gyro.constprop.0+0x11f0>
 800df4e:	4698      	mov	r8, r3
 800df50:	9b01      	ldr	r3, [sp, #4]
 800df52:	1e58      	subs	r0, r3, #1
 800df54:	4448      	add	r0, r9
 800df56:	4642      	mov	r2, r8
 800df58:	4651      	mov	r1, sl
 800df5a:	f009 fce7 	bl	801792c <memcpy>
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	eb0b 0703 	add.w	r7, fp, r3
 800df64:	2f1e      	cmp	r7, #30
 800df66:	dda5      	ble.n	800deb4 <kalman_3gyro.constprop.0+0x119c>
 800df68:	9b07      	ldr	r3, [sp, #28]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	9307      	str	r3, [sp, #28]
 800df6e:	d19a      	bne.n	800dea6 <kalman_3gyro.constprop.0+0x118e>
 800df70:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800df74:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800df78:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800df7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800df80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800df84:	ed52 7a01 	vldr	s15, [r2, #-4]
 800df88:	ed13 7a01 	vldr	s14, [r3, #-4]
 800df8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df94:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df98:	460a      	mov	r2, r1
 800df9a:	bf4c      	ite	mi
 800df9c:	2201      	movmi	r2, #1
 800df9e:	2200      	movpl	r2, #0
 800dfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa4:	bf4c      	ite	mi
 800dfa6:	2301      	movmi	r3, #1
 800dfa8:	2300      	movpl	r3, #0
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	f000 81b4 	beq.w	800e318 <kalman_3gyro.constprop.0+0x1600>
 800dfb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dfb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfbe:	ece3 7a01 	vstmia	r3!, {s15}
 800dfc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	930a      	str	r3, [sp, #40]	; 0x28
 800dfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	f47f ae4c 	bne.w	800dc6a <kalman_3gyro.constprop.0+0xf52>
 800dfd2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800dfd6:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800dfda:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800dfde:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800def4 <kalman_3gyro.constprop.0+0x11dc>
 800dfe2:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800dfe6:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800def8 <kalman_3gyro.constprop.0+0x11e0>
 800dfea:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800dfee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dff2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800dff6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800dffa:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800dffe:	eee6 7a06 	vfma.f32	s15, s12, s12
 800e002:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800e006:	eeb0 6a67 	vmov.f32	s12, s15
 800e00a:	edcd 7a03 	vstr	s15, [sp, #12]
 800e00e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800e012:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800e016:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800e01a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800e01e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800e022:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800e026:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800e02a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e02e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800e032:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800e036:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800e03a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e03e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800e042:	ee64 7a27 	vmul.f32	s15, s8, s15
 800e046:	ee25 7a07 	vmul.f32	s14, s10, s14
 800e04a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800e04e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800e052:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800e056:	2b00      	cmp	r3, #0
 800e058:	f040 81a4 	bne.w	800e3a4 <kalman_3gyro.constprop.0+0x168c>
 800e05c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e060:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800e064:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800e068:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800e06c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800e070:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800e074:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800e078:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800e07c:	f8c8 3020 	str.w	r3, [r8, #32]
 800e080:	ed88 7a07 	vstr	s14, [r8, #28]
 800e084:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800e088:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800e08c:	ed93 7a00 	vldr	s14, [r3]
 800e090:	ed92 8a00 	vldr	s16, [r2]
 800e094:	eddb ea02 	vldr	s29, [fp, #8]
 800e098:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800e09c:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800e0a0:	ed92 5a00 	vldr	s10, [r2]
 800e0a4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800e0a8:	ed93 7a00 	vldr	s14, [r3]
 800e0ac:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e0b0:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800e0b4:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800e0b8:	ed92 5a00 	vldr	s10, [r2]
 800e0bc:	ed93 7a00 	vldr	s14, [r3]
 800e0c0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e0c4:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800e0c8:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800e0cc:	ed92 5a00 	vldr	s10, [r2]
 800e0d0:	ed93 7a00 	vldr	s14, [r3]
 800e0d4:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e0d8:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800e0dc:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800e0e0:	ed92 5a00 	vldr	s10, [r2]
 800e0e4:	ed93 7a00 	vldr	s14, [r3]
 800e0e8:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e0f4:	f340 8232 	ble.w	800e55c <kalman_3gyro.constprop.0+0x1844>
 800e0f8:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800e0fc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e104:	f100 815e 	bmi.w	800e3c4 <kalman_3gyro.constprop.0+0x16ac>
 800e108:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800e10c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800e110:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e118:	f142 84bd 	bpl.w	8010a96 <kalman_3gyro.constprop.0+0x3d7e>
 800e11c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800e120:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	f342 850a 	ble.w	8010b40 <kalman_3gyro.constprop.0+0x3e28>
 800e12c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800e130:	eef4 2ac8 	vcmpe.f32	s5, s16
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	f342 86c5 	ble.w	8010ec6 <kalman_3gyro.constprop.0+0x41ae>
 800e13c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800e140:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800e144:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800e148:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e14c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e150:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800e154:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e158:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e15c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e164:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e168:	f202 86c5 	bhi.w	8010ef6 <kalman_3gyro.constprop.0+0x41de>
 800e16c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800e170:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e178:	f342 86c5 	ble.w	8010f06 <kalman_3gyro.constprop.0+0x41ee>
 800e17c:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800e180:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800e184:	ee38 3a64 	vsub.f32	s6, s16, s9
 800e188:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e18c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e190:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e194:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800e198:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e19c:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800e1a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	f202 86c5 	bhi.w	8010f36 <kalman_3gyro.constprop.0+0x421e>
 800e1ac:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800e1b0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b8:	f343 8371 	ble.w	801189e <kalman_3gyro.constprop.0+0x4b86>
 800e1bc:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800e1c0:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800e1c4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1c8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e1cc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e1d0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e1d4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e1d8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e1dc:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800e1e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e8:	f202 86c5 	bhi.w	8010f76 <kalman_3gyro.constprop.0+0x425e>
 800e1ec:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800e1f0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f8:	f343 8359 	ble.w	80118ae <kalman_3gyro.constprop.0+0x4b96>
 800e1fc:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800e200:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800e204:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e208:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e20c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e210:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e214:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e218:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e21c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800e220:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e228:	f2c2 86c5 	blt.w	8010fb6 <kalman_3gyro.constprop.0+0x429e>
 800e22c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800e230:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e238:	f143 832d 	bpl.w	8011896 <kalman_3gyro.constprop.0+0x4b7e>
 800e23c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800e240:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800e244:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e248:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e24c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e250:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e254:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e258:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e25c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e260:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e268:	f2c2 86c5 	blt.w	8010ff6 <kalman_3gyro.constprop.0+0x42de>
 800e26c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e270:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	f142 86c5 	bpl.w	8011006 <kalman_3gyro.constprop.0+0x42ee>
 800e27c:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e280:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e284:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e288:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e28c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e290:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e294:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e298:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e29c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e2a0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e2a4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e2a8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e2ac:	e15a      	b.n	800e564 <kalman_3gyro.constprop.0+0x184c>
 800e2ae:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800defc <kalman_3gyro.constprop.0+0x11e4>
 800e2b2:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800df00 <kalman_3gyro.constprop.0+0x11e8>
 800e2b6:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800df04 <kalman_3gyro.constprop.0+0x11ec>
 800e2ba:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e2be:	f7fe bedd 	b.w	800d07c <kalman_3gyro.constprop.0+0x364>
 800e2c2:	1c60      	adds	r0, r4, #1
 800e2c4:	42be      	cmp	r6, r7
 800e2c6:	eba7 0206 	sub.w	r2, r7, r6
 800e2ca:	4449      	add	r1, r9
 800e2cc:	4450      	add	r0, sl
 800e2ce:	f6bf ae39 	bge.w	800df44 <kalman_3gyro.constprop.0+0x122c>
 800e2d2:	443c      	add	r4, r7
 800e2d4:	1ba4      	subs	r4, r4, r6
 800e2d6:	f009 fb29 	bl	801792c <memcpy>
 800e2da:	463e      	mov	r6, r7
 800e2dc:	4645      	mov	r5, r8
 800e2de:	e632      	b.n	800df46 <kalman_3gyro.constprop.0+0x122e>
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	42be      	cmp	r6, r7
 800e2e4:	f80a 2004 	strb.w	r2, [sl, r4]
 800e2e8:	f47f ae2d 	bne.w	800df46 <kalman_3gyro.constprop.0+0x122e>
 800e2ec:	9b02      	ldr	r3, [sp, #8]
 800e2ee:	f105 0801 	add.w	r8, r5, #1
 800e2f2:	1c60      	adds	r0, r4, #1
 800e2f4:	45c3      	cmp	fp, r8
 800e2f6:	eba3 0205 	sub.w	r2, r3, r5
 800e2fa:	eb09 0105 	add.w	r1, r9, r5
 800e2fe:	4450      	add	r0, sl
 800e300:	f77f ae21 	ble.w	800df46 <kalman_3gyro.constprop.0+0x122e>
 800e304:	f009 fb12 	bl	801792c <memcpy>
 800e308:	9b02      	ldr	r3, [sp, #8]
 800e30a:	441c      	add	r4, r3
 800e30c:	9b04      	ldr	r3, [sp, #16]
 800e30e:	1b5a      	subs	r2, r3, r5
 800e310:	1b64      	subs	r4, r4, r5
 800e312:	eb02 0508 	add.w	r5, r2, r8
 800e316:	e616      	b.n	800df46 <kalman_3gyro.constprop.0+0x122e>
 800e318:	eef4 7a48 	vcmp.f32	s15, s16
 800e31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e320:	f43f ae46 	beq.w	800dfb0 <kalman_3gyro.constprop.0+0x1298>
 800e324:	eef4 7a4b 	vcmp.f32	s15, s22
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	f43f ae40 	beq.w	800dfb0 <kalman_3gyro.constprop.0+0x1298>
 800e330:	eeb4 7a48 	vcmp.f32	s14, s16
 800e334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e338:	f43f ae3a 	beq.w	800dfb0 <kalman_3gyro.constprop.0+0x1298>
 800e33c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e344:	f43f ae34 	beq.w	800dfb0 <kalman_3gyro.constprop.0+0x1298>
 800e348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e34c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e350:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e354:	e632      	b.n	800dfbc <kalman_3gyro.constprop.0+0x12a4>
 800e356:	2304      	movs	r3, #4
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	461c      	mov	r4, r3
 800e35e:	2307      	movs	r3, #7
 800e360:	4694      	mov	ip, r2
 800e362:	2106      	movs	r1, #6
 800e364:	9302      	str	r3, [sp, #8]
 800e366:	2603      	movs	r6, #3
 800e368:	f04f 0a01 	mov.w	sl, #1
 800e36c:	f7ff ba5c 	b.w	800d828 <kalman_3gyro.constprop.0+0xb10>
 800e370:	9a08      	ldr	r2, [sp, #32]
 800e372:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e4fc <kalman_3gyro.constprop.0+0x17e4>
 800e376:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e500 <kalman_3gyro.constprop.0+0x17e8>
 800e37a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e504 <kalman_3gyro.constprop.0+0x17ec>
 800e37e:	4b62      	ldr	r3, [pc, #392]	; (800e508 <kalman_3gyro.constprop.0+0x17f0>)
 800e380:	edc2 7a00 	vstr	s15, [r2]
 800e384:	eeb0 4a65 	vmov.f32	s8, s11
 800e388:	eeb0 3a67 	vmov.f32	s6, s15
 800e38c:	eef0 4a45 	vmov.f32	s9, s10
 800e390:	6053      	str	r3, [r2, #4]
 800e392:	6093      	str	r3, [r2, #8]
 800e394:	f7fe bd3e 	b.w	800ce14 <kalman_3gyro.constprop.0+0xfc>
 800e398:	2308      	movs	r3, #8
 800e39a:	2005      	movs	r0, #5
 800e39c:	f04f 0802 	mov.w	r8, #2
 800e3a0:	f7ff ba5c 	b.w	800d85c <kalman_3gyro.constprop.0+0xb44>
 800e3a4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e3ae:	ed88 7a07 	vstr	s14, [r8, #28]
 800e3b2:	ed88 7a08 	vstr	s14, [r8, #32]
 800e3b6:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e3ba:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e3be:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e3c2:	e65f      	b.n	800e084 <kalman_3gyro.constprop.0+0x136c>
 800e3c4:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e3c8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d0:	f342 83b2 	ble.w	8010b38 <kalman_3gyro.constprop.0+0x3e20>
 800e3d4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3dc:	f2c2 86e9 	blt.w	80111b2 <kalman_3gyro.constprop.0+0x449a>
 800e3e0:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e3e4:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ec:	f342 8712 	ble.w	8011214 <kalman_3gyro.constprop.0+0x44fc>
 800e3f0:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e3f4:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e3f8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e3fc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e400:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e404:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e408:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e40c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e410:	f002 bed8 	b.w	80111c4 <kalman_3gyro.constprop.0+0x44ac>
 800e414:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e418:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e420:	f342 84bd 	ble.w	8010d9e <kalman_3gyro.constprop.0+0x4086>
 800e424:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e428:	f7ff b993 	b.w	800d752 <kalman_3gyro.constprop.0+0xa3a>
 800e42c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e430:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e438:	f342 849f 	ble.w	8010d7a <kalman_3gyro.constprop.0+0x4062>
 800e43c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e440:	f7ff b964 	b.w	800d70c <kalman_3gyro.constprop.0+0x9f4>
 800e444:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e448:	eef4 dac7 	vcmpe.f32	s27, s14
 800e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e450:	f342 84b7 	ble.w	8010dc2 <kalman_3gyro.constprop.0+0x40aa>
 800e454:	eddf da2d 	vldr	s27, [pc, #180]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e458:	f7ff b935 	b.w	800d6c6 <kalman_3gyro.constprop.0+0x9ae>
 800e45c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e460:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e468:	f342 8475 	ble.w	8010d56 <kalman_3gyro.constprop.0+0x403e>
 800e46c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e470:	f7ff b8c3 	b.w	800d5fa <kalman_3gyro.constprop.0+0x8e2>
 800e474:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e478:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e480:	f342 83a0 	ble.w	8010bc4 <kalman_3gyro.constprop.0+0x3eac>
 800e484:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e488:	f7ff b894 	b.w	800d5b4 <kalman_3gyro.constprop.0+0x89c>
 800e48c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e490:	eef4 dac7 	vcmpe.f32	s27, s14
 800e494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e498:	f342 8382 	ble.w	8010ba0 <kalman_3gyro.constprop.0+0x3e88>
 800e49c:	eddf da1b 	vldr	s27, [pc, #108]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e4a0:	f7ff b865 	b.w	800d56e <kalman_3gyro.constprop.0+0x856>
 800e4a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e4a8:	eef4 dac7 	vcmpe.f32	s27, s14
 800e4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b0:	f342 8364 	ble.w	8010b7c <kalman_3gyro.constprop.0+0x3e64>
 800e4b4:	eddf da15 	vldr	s27, [pc, #84]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e4b8:	f7fe bff3 	b.w	800d4a2 <kalman_3gyro.constprop.0+0x78a>
 800e4bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e4c0:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	f342 8346 	ble.w	8010b58 <kalman_3gyro.constprop.0+0x3e40>
 800e4cc:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e4d0:	f7fe bfc4 	b.w	800d45c <kalman_3gyro.constprop.0+0x744>
 800e4d4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e4d8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e0:	f342 839e 	ble.w	8010c20 <kalman_3gyro.constprop.0+0x3f08>
 800e4e4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e50c <kalman_3gyro.constprop.0+0x17f4>
 800e4e8:	f7fe bf95 	b.w	800d416 <kalman_3gyro.constprop.0+0x6fe>
 800e4ec:	eef1 3a63 	vneg.f32	s7, s7
 800e4f0:	f7ff bb42 	b.w	800db78 <kalman_3gyro.constprop.0+0xe60>
 800e4f4:	eef1 3a63 	vneg.f32	s7, s7
 800e4f8:	f7ff bb1b 	b.w	800db32 <kalman_3gyro.constprop.0+0xe1a>
 800e4fc:	00000000 	.word	0x00000000
 800e500:	3fb33333 	.word	0x3fb33333
 800e504:	bfb33333 	.word	0xbfb33333
 800e508:	3f333333 	.word	0x3f333333
 800e50c:	80000000 	.word	0x80000000
 800e510:	3fb77778 	.word	0x3fb77778
 800e514:	3f99999a 	.word	0x3f99999a
 800e518:	3f4ccccd 	.word	0x3f4ccccd
 800e51c:	42d40000 	.word	0x42d40000
 800e520:	46979000 	.word	0x46979000
 800e524:	4415c000 	.word	0x4415c000
 800e528:	3ba3d70a 	.word	0x3ba3d70a
 800e52c:	3b449ba6 	.word	0x3b449ba6
 800e530:	3c75c28f 	.word	0x3c75c28f
 800e534:	3c23d70a 	.word	0x3c23d70a
 800e538:	3d4cccc0 	.word	0x3d4cccc0
 800e53c:	43480000 	.word	0x43480000
 800e540:	3d4ccccd 	.word	0x3d4ccccd
 800e544:	3cf5c28f 	.word	0x3cf5c28f
 800e548:	3eb33334 	.word	0x3eb33334
 800e54c:	3f933333 	.word	0x3f933333
 800e550:	4247ffff 	.word	0x4247ffff
 800e554:	3dcccccd 	.word	0x3dcccccd
 800e558:	3e4ccccd 	.word	0x3e4ccccd
 800e55c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e560:	eeb0 ba4e 	vmov.f32	s22, s28
 800e564:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e568:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e56c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e554 <kalman_3gyro.constprop.0+0x183c>
 800e570:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e574:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e578:	eef0 daed 	vabs.f32	s27, s27
 800e57c:	eeb0 5ac5 	vabs.f32	s10, s10
 800e580:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e584:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58c:	f340 821c 	ble.w	800e9c8 <kalman_3gyro.constprop.0+0x1cb0>
 800e590:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e510 <kalman_3gyro.constprop.0+0x17f8>
 800e594:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59c:	f302 828b 	bgt.w	8010ab6 <kalman_3gyro.constprop.0+0x3d9e>
 800e5a0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e5a4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e5a8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e5ac:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e5b0:	eeb0 5a64 	vmov.f32	s10, s9
 800e5b4:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5bc:	f89b 3000 	ldrb.w	r3, [fp]
 800e5c0:	bfb8      	it	lt
 800e5c2:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e5c6:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 81f9 	beq.w	800e9c2 <kalman_3gyro.constprop.0+0x1caa>
 800e5d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f000 81de 	beq.w	800e996 <kalman_3gyro.constprop.0+0x1c7e>
 800e5da:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e5de:	2300      	movs	r3, #0
 800e5e0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e5e4:	eeb0 6a61 	vmov.f32	s12, s3
 800e5e8:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e5ec:	9908      	ldr	r1, [sp, #32]
 800e5ee:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e5f2:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e5f6:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e5fa:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e5fe:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e602:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e606:	2200      	movs	r2, #0
 800e608:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e60c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e610:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e614:	9233      	str	r2, [sp, #204]	; 0xcc
 800e616:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e61a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e61e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e622:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e626:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e62a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e62e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e632:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e636:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e63a:	eeb0 3a42 	vmov.f32	s6, s4
 800e63e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e642:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e646:	eef0 aa46 	vmov.f32	s21, s12
 800e64a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e64e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e652:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e656:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e65a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e65e:	eef0 2a44 	vmov.f32	s5, s8
 800e662:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e666:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e66a:	eeb0 fa64 	vmov.f32	s30, s9
 800e66e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e672:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e676:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e67a:	eeb0 1a6a 	vmov.f32	s2, s21
 800e67e:	eef0 aa66 	vmov.f32	s21, s13
 800e682:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e686:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e68a:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e68e:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e692:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e696:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e69a:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e69e:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e6a2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e6a6:	eef0 3a64 	vmov.f32	s7, s9
 800e6aa:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e6ae:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e6b2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e6b6:	edd1 5a02 	vldr	s11, [r1, #8]
 800e6ba:	ed91 5a05 	vldr	s10, [r1, #20]
 800e6be:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e6c2:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e6c6:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e6ca:	edd1 1a01 	vldr	s3, [r1, #4]
 800e6ce:	edd1 fa00 	vldr	s31, [r1]
 800e6d2:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e6d6:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e6da:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e6de:	edd1 5a03 	vldr	s11, [r1, #12]
 800e6e2:	edd1 1a04 	vldr	s3, [r1, #16]
 800e6e6:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e514 <kalman_3gyro.constprop.0+0x17fc>
 800e6ea:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e6ee:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e6f2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e6f6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e6fa:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e6fe:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e706:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e70a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e70e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e712:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e716:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e71a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e71e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e722:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e726:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e72a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e72e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e732:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e736:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e73a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e73e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e742:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e746:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e74a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e74e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e752:	d506      	bpl.n	800e762 <kalman_3gyro.constprop.0+0x1a4a>
 800e754:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e518 <kalman_3gyro.constprop.0+0x1800>
 800e758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e760:	dc01      	bgt.n	800e766 <kalman_3gyro.constprop.0+0x1a4e>
 800e762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e766:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e76a:	eef0 7ae7 	vabs.f32	s15, s15
 800e76e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77a:	f340 8141 	ble.w	800ea00 <kalman_3gyro.constprop.0+0x1ce8>
 800e77e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e782:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78a:	f142 8198 	bpl.w	8010abe <kalman_3gyro.constprop.0+0x3da6>
 800e78e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e528 <kalman_3gyro.constprop.0+0x1810>
 800e792:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e796:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e534 <kalman_3gyro.constprop.0+0x181c>
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7a2:	f102 8221 	bmi.w	8010be8 <kalman_3gyro.constprop.0+0x3ed0>
 800e7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7aa:	f142 8221 	bpl.w	8010bf0 <kalman_3gyro.constprop.0+0x3ed8>
 800e7ae:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e530 <kalman_3gyro.constprop.0+0x1818>
 800e7b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ba:	f282 84a4 	bge.w	8011106 <kalman_3gyro.constprop.0+0x43ee>
 800e7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e7c2:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e544 <kalman_3gyro.constprop.0+0x182c>
 800e7c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ce:	f2c2 84b0 	blt.w	8011132 <kalman_3gyro.constprop.0+0x441a>
 800e7d2:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e540 <kalman_3gyro.constprop.0+0x1828>
 800e7d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7de:	f142 84b0 	bpl.w	8011142 <kalman_3gyro.constprop.0+0x442a>
 800e7e2:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e544 <kalman_3gyro.constprop.0+0x182c>
 800e7e6:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e550 <kalman_3gyro.constprop.0+0x1838>
 800e7ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e7ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e7f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e7f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e7fa:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7fe:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e554 <kalman_3gyro.constprop.0+0x183c>
 800e802:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	f2c2 84b0 	blt.w	801116e <kalman_3gyro.constprop.0+0x4456>
 800e80e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e558 <kalman_3gyro.constprop.0+0x1840>
 800e812:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81a:	f142 84b0 	bpl.w	801117e <kalman_3gyro.constprop.0+0x4466>
 800e81e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e554 <kalman_3gyro.constprop.0+0x183c>
 800e822:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e51c <kalman_3gyro.constprop.0+0x1804>
 800e826:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e82a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e82e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e832:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e836:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e83a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e83e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e846:	db0d      	blt.n	800e864 <kalman_3gyro.constprop.0+0x1b4c>
 800e848:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e84c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e520 <kalman_3gyro.constprop.0+0x1808>
 800e850:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e524 <kalman_3gyro.constprop.0+0x180c>
 800e854:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e858:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e85c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e860:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e868:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e86c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e870:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e874:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e530 <kalman_3gyro.constprop.0+0x1818>
 800e878:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e528 <kalman_3gyro.constprop.0+0x1810>
 800e87c:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e534 <kalman_3gyro.constprop.0+0x181c>
 800e880:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e52c <kalman_3gyro.constprop.0+0x1814>
 800e884:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e890:	bfb8      	it	lt
 800e892:	eef0 4a46 	vmovlt.f32	s9, s12
 800e896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89a:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e89e:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e8a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8a6:	f142 841f 	bpl.w	80110e8 <kalman_3gyro.constprop.0+0x43d0>
 800e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ae:	f2c2 841f 	blt.w	80110f0 <kalman_3gyro.constprop.0+0x43d8>
 800e8b2:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e530 <kalman_3gyro.constprop.0+0x1818>
 800e8b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8be:	f142 83ba 	bpl.w	8011036 <kalman_3gyro.constprop.0+0x431e>
 800e8c2:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e534 <kalman_3gyro.constprop.0+0x181c>
 800e8c6:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e538 <kalman_3gyro.constprop.0+0x1820>
 800e8ca:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e53c <kalman_3gyro.constprop.0+0x1824>
 800e8ce:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8d6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e8da:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e8de:	eeb0 ca66 	vmov.f32	s24, s13
 800e8e2:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e544 <kalman_3gyro.constprop.0+0x182c>
 800e8e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ee:	f2c2 83ba 	blt.w	8011066 <kalman_3gyro.constprop.0+0x434e>
 800e8f2:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e540 <kalman_3gyro.constprop.0+0x1828>
 800e8f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fe:	f142 83ba 	bpl.w	8011076 <kalman_3gyro.constprop.0+0x435e>
 800e902:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e544 <kalman_3gyro.constprop.0+0x182c>
 800e906:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e548 <kalman_3gyro.constprop.0+0x1830>
 800e90a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e550 <kalman_3gyro.constprop.0+0x1838>
 800e90e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e54c <kalman_3gyro.constprop.0+0x1834>
 800e912:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e916:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e91a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e91e:	eeb0 ca66 	vmov.f32	s24, s13
 800e922:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e554 <kalman_3gyro.constprop.0+0x183c>
 800e926:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	f2c2 83ba 	blt.w	80110a6 <kalman_3gyro.constprop.0+0x438e>
 800e932:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e558 <kalman_3gyro.constprop.0+0x1840>
 800e936:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93e:	f142 83ba 	bpl.w	80110b6 <kalman_3gyro.constprop.0+0x439e>
 800e942:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e9d0 <kalman_3gyro.constprop.0+0x1cb8>
 800e946:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e9d4 <kalman_3gyro.constprop.0+0x1cbc>
 800e94a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e94e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e952:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e956:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e95a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e95e:	eeb0 ca66 	vmov.f32	s24, s13
 800e962:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e966:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96e:	f2c2 80b0 	blt.w	8010ad2 <kalman_3gyro.constprop.0+0x3dba>
 800e972:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e976:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e97a:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e9d8 <kalman_3gyro.constprop.0+0x1cc0>
 800e97e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e9dc <kalman_3gyro.constprop.0+0x1cc4>
 800e982:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e986:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e98a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e98e:	eeb0 ca66 	vmov.f32	s24, s13
 800e992:	f002 b89e 	b.w	8010ad2 <kalman_3gyro.constprop.0+0x3dba>
 800e996:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e99a:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e99e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e9a2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e9a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e9aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e9ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e9b2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e9b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9be:	f102 8246 	bmi.w	8010e4e <kalman_3gyro.constprop.0+0x4136>
 800e9c2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e9c6:	e60b      	b.n	800e5e0 <kalman_3gyro.constprop.0+0x18c8>
 800e9c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e9cc:	e5f2      	b.n	800e5b4 <kalman_3gyro.constprop.0+0x189c>
 800e9ce:	bf00      	nop
 800e9d0:	3dcccccd 	.word	0x3dcccccd
 800e9d4:	410c0000 	.word	0x410c0000
 800e9d8:	42c80000 	.word	0x42c80000
 800e9dc:	424a0000 	.word	0x424a0000
 800e9e0:	3c23d70a 	.word	0x3c23d70a
 800e9e4:	3b449ba6 	.word	0x3b449ba6
 800e9e8:	3fb33333 	.word	0x3fb33333
 800e9ec:	3ecccccd 	.word	0x3ecccccd
 800e9f0:	3f8f5c29 	.word	0x3f8f5c29
 800e9f4:	3f59999a 	.word	0x3f59999a
 800e9f8:	3e4ccccd 	.word	0x3e4ccccd
 800e9fc:	3f99999a 	.word	0x3f99999a
 800ea00:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800ea04:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e9e0 <kalman_3gyro.constprop.0+0x1cc8>
 800ea08:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e9e4 <kalman_3gyro.constprop.0+0x1ccc>
 800ea0c:	eeb0 7a4c 	vmov.f32	s14, s24
 800ea10:	eef0 4a4c 	vmov.f32	s9, s24
 800ea14:	eddd 6a01 	vldr	s13, [sp, #4]
 800ea18:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800ea1c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800ea20:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800ea24:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800ea28:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800ea2c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800ea30:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800ea34:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800ea38:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800ea3c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800ea40:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800ea44:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800ea48:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800ea4c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ea50:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800ea54:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800ea58:	ee63 3a87 	vmul.f32	s7, s7, s14
 800ea5c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ea60:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800ea64:	ee2e ea02 	vmul.f32	s28, s28, s4
 800ea68:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800ea6c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800ea70:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ea74:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800ea78:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800ea7c:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800ea80:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800ea84:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800ea88:	2a00      	cmp	r2, #0
 800ea8a:	f001 8411 	beq.w	80102b0 <kalman_3gyro.constprop.0+0x3598>
 800ea8e:	ee77 2a07 	vadd.f32	s5, s14, s14
 800ea92:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800ea96:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800ea9a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800ea9e:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800eaa2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800eaa6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800eaaa:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800eaae:	ee29 7a87 	vmul.f32	s14, s19, s14
 800eab2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eab6:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800eaba:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800eabe:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800eac2:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800eac6:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800eaca:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800eace:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800ead2:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ead6:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800eada:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800eade:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800eae2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800eae6:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800eaea:	b159      	cbz	r1, 800eb04 <kalman_3gyro.constprop.0+0x1dec>
 800eaec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf8:	dd04      	ble.n	800eb04 <kalman_3gyro.constprop.0+0x1dec>
 800eafa:	2000      	movs	r0, #0
 800eafc:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800eb00:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800eb04:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800eb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb0c:	dd09      	ble.n	800eb22 <kalman_3gyro.constprop.0+0x1e0a>
 800eb0e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800eb12:	eef4 7ac8 	vcmpe.f32	s15, s16
 800eb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1a:	db02      	blt.n	800eb22 <kalman_3gyro.constprop.0+0x1e0a>
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f002 8001 	beq.w	8010b24 <kalman_3gyro.constprop.0+0x3e0c>
 800eb22:	b132      	cbz	r2, 800eb32 <kalman_3gyro.constprop.0+0x1e1a>
 800eb24:	f240 1001 	movw	r0, #257	; 0x101
 800eb28:	2301      	movs	r3, #1
 800eb2a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800eb2e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb32:	2301      	movs	r3, #1
 800eb34:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eb38:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eb3c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e9e8 <kalman_3gyro.constprop.0+0x1cd0>
 800eb40:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb48:	dc09      	bgt.n	800eb5e <kalman_3gyro.constprop.0+0x1e46>
 800eb4a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e9ec <kalman_3gyro.constprop.0+0x1cd4>
 800eb4e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb56:	d402      	bmi.n	800eb5e <kalman_3gyro.constprop.0+0x1e46>
 800eb58:	2a00      	cmp	r2, #0
 800eb5a:	f042 80e4 	bne.w	8010d26 <kalman_3gyro.constprop.0+0x400e>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eb64:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb68:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eb6c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eb70:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e9f0 <kalman_3gyro.constprop.0+0x1cd8>
 800eb74:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7c:	dc09      	bgt.n	800eb92 <kalman_3gyro.constprop.0+0x1e7a>
 800eb7e:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e9f4 <kalman_3gyro.constprop.0+0x1cdc>
 800eb82:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8a:	d402      	bmi.n	800eb92 <kalman_3gyro.constprop.0+0x1e7a>
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	f042 8097 	bne.w	8010cc0 <kalman_3gyro.constprop.0+0x3fa8>
 800eb92:	2300      	movs	r3, #0
 800eb94:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800eb98:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800eb9c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eba0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800eba4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eba8:	eef4 dae7 	vcmpe.f32	s27, s15
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	f341 836b 	ble.w	801028a <kalman_3gyro.constprop.0+0x3572>
 800ebb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ebb8:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ebbc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800ebc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800ebca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ebd2:	eef4 dac7 	vcmpe.f32	s27, s14
 800ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebda:	bfc4      	itt	gt
 800ebdc:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800ebe0:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800ebe4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800ebe8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800ebec:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800ebf0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800ebf4:	2b0e      	cmp	r3, #14
 800ebf6:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800ebfa:	dc02      	bgt.n	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 800ebfc:	3305      	adds	r3, #5
 800ebfe:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800ec02:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ec06:	eef4 7acd 	vcmpe.f32	s15, s26
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	f340 82e9 	ble.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec12:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ec16:	eef4 7aeb 	vcmpe.f32	s15, s23
 800ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1e:	f340 82e1 	ble.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec22:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ec26:	eef4 7aec 	vcmpe.f32	s15, s25
 800ec2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2e:	f340 82d9 	ble.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec32:	9b08      	ldr	r3, [sp, #32]
 800ec34:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e9f8 <kalman_3gyro.constprop.0+0x1ce0>
 800ec38:	ed93 7a06 	vldr	s14, [r3, #24]
 800ec3c:	eef0 6ac7 	vabs.f32	s13, s14
 800ec40:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ec44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec48:	f140 82cc 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec4c:	edd3 6a07 	vldr	s13, [r3, #28]
 800ec50:	eeb0 6ae6 	vabs.f32	s12, s13
 800ec54:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ec58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5c:	f140 82c2 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec60:	ed93 6a08 	vldr	s12, [r3, #32]
 800ec64:	eef0 4ac6 	vabs.f32	s9, s12
 800ec68:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec70:	f140 82b8 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec74:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e9fc <kalman_3gyro.constprop.0+0x1ce4>
 800ec78:	eef0 5ae5 	vabs.f32	s11, s11
 800ec7c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ec80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec84:	f140 82ae 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec88:	eef0 1ae1 	vabs.f32	s3, s3
 800ec8c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ec90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec94:	f140 82a6 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ec98:	eeb0 5ac5 	vabs.f32	s10, s10
 800ec9c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca4:	f140 829e 	bpl.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800eca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecaa:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800ecae:	edd3 5a00 	vldr	s11, [r3]
 800ecb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecb4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ecb6:	ed93 5a00 	vldr	s10, [r3]
 800ecba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ecbc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800ecc0:	2a09      	cmp	r2, #9
 800ecc2:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800ecc6:	ed93 4a00 	vldr	s8, [r3]
 800ecca:	edd4 3a00 	vldr	s7, [r4]
 800ecce:	bf8c      	ite	hi
 800ecd0:	230a      	movhi	r3, #10
 800ecd2:	2305      	movls	r3, #5
 800ecd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd8:	bfb4      	ite	lt
 800ecda:	eef0 7a45 	vmovlt.f32	s15, s10
 800ecde:	eef0 7a65 	vmovge.f32	s15, s11
 800ece2:	bf8c      	ite	hi
 800ece4:	eef0 4a45 	vmovhi.f32	s9, s10
 800ece8:	eef0 4a65 	vmovls.f32	s9, s11
 800ecec:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf4:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ecf8:	bfb8      	it	lt
 800ecfa:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	bf88      	it	hi
 800ed04:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed08:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed10:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ed14:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed18:	edd1 5a00 	vldr	s11, [r1]
 800ed1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ed1e:	bfb8      	it	lt
 800ed20:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed28:	bf88      	it	hi
 800ed2a:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed2e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ed32:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ed3e:	bfb8      	it	lt
 800ed40:	eef0 7a65 	vmovlt.f32	s15, s11
 800ed44:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4c:	bf88      	it	hi
 800ed4e:	eef0 4a65 	vmovhi.f32	s9, s11
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	ee35 5a25 	vadd.f32	s10, s10, s11
 800ed58:	edd1 5a00 	vldr	s11, [r1]
 800ed5c:	d065      	beq.n	800ee2a <kalman_3gyro.constprop.0+0x2112>
 800ed5e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800ed62:	edd1 3a00 	vldr	s7, [r1]
 800ed66:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800ed6a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed6e:	ed91 4a00 	vldr	s8, [r1]
 800ed72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed76:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed7a:	bfb8      	it	lt
 800ed7c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed84:	bf88      	it	hi
 800ed86:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed8a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed8e:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800ed92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed96:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed9a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed9e:	edd1 3a00 	vldr	s7, [r1]
 800eda2:	bfb8      	it	lt
 800eda4:	eef0 7a44 	vmovlt.f32	s15, s8
 800eda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edac:	bf88      	it	hi
 800edae:	eef0 4a44 	vmovhi.f32	s9, s8
 800edb2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800edb6:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800edba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800edc2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800edc6:	ed91 4a00 	vldr	s8, [r1]
 800edca:	bfb8      	it	lt
 800edcc:	eef0 7a63 	vmovlt.f32	s15, s7
 800edd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd4:	bf88      	it	hi
 800edd6:	eef0 4a63 	vmovhi.f32	s9, s7
 800edda:	eef4 7ac4 	vcmpe.f32	s15, s8
 800edde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ede6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800edea:	bfb8      	it	lt
 800edec:	eef0 7a44 	vmovlt.f32	s15, s8
 800edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf4:	bf88      	it	hi
 800edf6:	eef0 4a44 	vmovhi.f32	s9, s8
 800edfa:	2b0a      	cmp	r3, #10
 800edfc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee00:	d113      	bne.n	800ee2a <kalman_3gyro.constprop.0+0x2112>
 800ee02:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ee06:	ed91 4a00 	vldr	s8, [r1]
 800ee0a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee12:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ee16:	bfb8      	it	lt
 800ee18:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee1c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee24:	bf88      	it	hi
 800ee26:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee2a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ee2e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800f1cc <kalman_3gyro.constprop.0+0x24b4>
 800ee32:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800f1d0 <kalman_3gyro.constprop.0+0x24b8>
 800ee36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ee3a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ee3e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee46:	f300 81cd 	bgt.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ee4a:	eef0 7ac5 	vabs.f32	s15, s10
 800ee4e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ee52:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800f1d4 <kalman_3gyro.constprop.0+0x24bc>
 800ee56:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	f300 81c1 	bgt.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800ee62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ee64:	ed91 5a00 	vldr	s10, [r1]
 800ee68:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee6a:	ed91 4a00 	vldr	s8, [r1]
 800ee6e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ee70:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ee74:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800ee78:	ed90 3a00 	vldr	s6, [r0]
 800ee7c:	edd1 3a00 	vldr	s7, [r1]
 800ee80:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee86:	bfb4      	ite	lt
 800ee88:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee8c:	eef0 7a45 	vmovge.f32	s15, s10
 800ee90:	bf8c      	ite	hi
 800ee92:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee96:	eef0 4a45 	vmovls.f32	s9, s10
 800ee9a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ee9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800eea6:	bfb8      	it	lt
 800eea8:	eef0 7a43 	vmovlt.f32	s15, s6
 800eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb0:	bf88      	it	hi
 800eeb2:	eef0 4a43 	vmovhi.f32	s9, s6
 800eeb6:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eec2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eec6:	ed91 4a00 	vldr	s8, [r1]
 800eeca:	bfb8      	it	lt
 800eecc:	eef0 7a63 	vmovlt.f32	s15, s7
 800eed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed4:	bf88      	it	hi
 800eed6:	eef0 4a63 	vmovhi.f32	s9, s7
 800eeda:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eede:	ee35 5a03 	vadd.f32	s10, s10, s6
 800eee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee6:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eeea:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eeee:	bfb8      	it	lt
 800eef0:	eef0 7a44 	vmovlt.f32	s15, s8
 800eef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef8:	bf88      	it	hi
 800eefa:	eef0 4a44 	vmovhi.f32	s9, s8
 800eefe:	2b05      	cmp	r3, #5
 800ef00:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef04:	d065      	beq.n	800efd2 <kalman_3gyro.constprop.0+0x22ba>
 800ef06:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800ef0a:	edd1 3a00 	vldr	s7, [r1]
 800ef0e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ef12:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ef16:	ed91 4a00 	vldr	s8, [r1]
 800ef1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ef22:	bfb8      	it	lt
 800ef24:	eef0 7a63 	vmovlt.f32	s15, s7
 800ef28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2c:	bf88      	it	hi
 800ef2e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ef32:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef36:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800ef3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ef42:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef46:	edd1 3a00 	vldr	s7, [r1]
 800ef4a:	bfb8      	it	lt
 800ef4c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	bf88      	it	hi
 800ef56:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef5a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ef5e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef66:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef6a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ef6e:	ed91 4a00 	vldr	s8, [r1]
 800ef72:	bfb8      	it	lt
 800ef74:	eef0 7a63 	vmovlt.f32	s15, s7
 800ef78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7c:	bf88      	it	hi
 800ef7e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ef82:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ef92:	bfb8      	it	lt
 800ef94:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9c:	bf88      	it	hi
 800ef9e:	eef0 4a44 	vmovhi.f32	s9, s8
 800efa2:	2b0a      	cmp	r3, #10
 800efa4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800efa8:	d113      	bne.n	800efd2 <kalman_3gyro.constprop.0+0x22ba>
 800efaa:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800efae:	ed91 4a00 	vldr	s8, [r1]
 800efb2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	eef4 4ac4 	vcmpe.f32	s9, s8
 800efbe:	bfb8      	it	lt
 800efc0:	eef0 7a44 	vmovlt.f32	s15, s8
 800efc4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800efc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efcc:	bf88      	it	hi
 800efce:	eef0 4a44 	vmovhi.f32	s9, s8
 800efd2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800efd6:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800f1cc <kalman_3gyro.constprop.0+0x24b4>
 800efda:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800f1d0 <kalman_3gyro.constprop.0+0x24b8>
 800efde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800efe2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800efe6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	f300 80f9 	bgt.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800eff2:	eef0 7ac5 	vabs.f32	s15, s10
 800eff6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800effa:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800f1d4 <kalman_3gyro.constprop.0+0x24bc>
 800effe:	eef4 7ac5 	vcmpe.f32	s15, s10
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	f300 80ed 	bgt.w	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800f00a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f00c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800f00e:	edd1 4a00 	vldr	s9, [r1]
 800f012:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f014:	ed91 3a00 	vldr	s6, [r1]
 800f018:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f01a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800f01e:	ed91 4a00 	vldr	s8, [r1]
 800f022:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800f026:	edd1 3a00 	vldr	s7, [r1]
 800f02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02e:	bfb4      	ite	lt
 800f030:	eef0 7a43 	vmovlt.f32	s15, s6
 800f034:	eef0 7a64 	vmovge.f32	s15, s9
 800f038:	bf8c      	ite	hi
 800f03a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800f03e:	eeb0 5a64 	vmovls.f32	s10, s9
 800f042:	eef4 3ae7 	vcmpe.f32	s7, s15
 800f046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800f04e:	bfa8      	it	ge
 800f050:	eef0 7a63 	vmovge.f32	s15, s7
 800f054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f058:	bf98      	it	ls
 800f05a:	eeb0 5a63 	vmovls.f32	s10, s7
 800f05e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	ee34 3a83 	vadd.f32	s6, s9, s6
 800f06a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800f06e:	edd5 4a00 	vldr	s9, [r5]
 800f072:	bfa8      	it	ge
 800f074:	eef0 7a44 	vmovge.f32	s15, s8
 800f078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07c:	bf98      	it	ls
 800f07e:	eeb0 5a44 	vmovls.f32	s10, s8
 800f082:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f086:	ee73 3a83 	vadd.f32	s7, s7, s6
 800f08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800f092:	bfb8      	it	lt
 800f094:	eef0 7a64 	vmovlt.f32	s15, s9
 800f098:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	bf98      	it	ls
 800f0a2:	eeb0 5a64 	vmovls.f32	s10, s9
 800f0a6:	2b05      	cmp	r3, #5
 800f0a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f0ac:	d065      	beq.n	800f17a <kalman_3gyro.constprop.0+0x2462>
 800f0ae:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800f0b2:	ed95 4a00 	vldr	s8, [r5]
 800f0b6:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800f0ba:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f0be:	ed95 3a00 	vldr	s6, [r5]
 800f0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c6:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f0ca:	bfb8      	it	lt
 800f0cc:	eef0 7a44 	vmovlt.f32	s15, s8
 800f0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d4:	bf88      	it	hi
 800f0d6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f0da:	eef4 7ac3 	vcmpe.f32	s15, s6
 800f0de:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800f0e2:	edd5 3a00 	vldr	s7, [r5]
 800f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ea:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800f0ee:	bfb8      	it	lt
 800f0f0:	eef0 7a43 	vmovlt.f32	s15, s6
 800f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f8:	bf88      	it	hi
 800f0fa:	eeb0 5a43 	vmovhi.f32	s10, s6
 800f0fe:	eef4 7ae3 	vcmpe.f32	s15, s7
 800f102:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800f10e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800f112:	edd5 4a00 	vldr	s9, [r5]
 800f116:	bfb8      	it	lt
 800f118:	eef0 7a63 	vmovlt.f32	s15, s7
 800f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f120:	bf88      	it	hi
 800f122:	eeb0 5a63 	vmovhi.f32	s10, s7
 800f126:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f12a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800f12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f132:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800f136:	bfb8      	it	lt
 800f138:	eef0 7a64 	vmovlt.f32	s15, s9
 800f13c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f144:	bf88      	it	hi
 800f146:	eeb0 5a64 	vmovhi.f32	s10, s9
 800f14a:	2b0a      	cmp	r3, #10
 800f14c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800f150:	d113      	bne.n	800f17a <kalman_3gyro.constprop.0+0x2462>
 800f152:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800f156:	ed93 4a00 	vldr	s8, [r3]
 800f15a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f162:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f166:	bfb8      	it	lt
 800f168:	eef0 7a44 	vmovlt.f32	s15, s8
 800f16c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f174:	bf88      	it	hi
 800f176:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f17a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f17e:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800f1cc <kalman_3gyro.constprop.0+0x24b4>
 800f182:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f1d0 <kalman_3gyro.constprop.0+0x24b8>
 800f186:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f18a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f18e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	dc25      	bgt.n	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800f198:	eef0 7ae4 	vabs.f32	s15, s9
 800f19c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f1a0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800f1d4 <kalman_3gyro.constprop.0+0x24bc>
 800f1a4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ac:	dc1a      	bgt.n	800f1e4 <kalman_3gyro.constprop.0+0x24cc>
 800f1ae:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800f1b2:	2d00      	cmp	r5, #0
 800f1b4:	f000 80e0 	beq.w	800f378 <kalman_3gyro.constprop.0+0x2660>
 800f1b8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	f002 8439 	beq.w	8011a34 <kalman_3gyro.constprop.0+0x4d1c>
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	9201      	str	r2, [sp, #4]
 800f1c8:	e01c      	b.n	800f204 <kalman_3gyro.constprop.0+0x24ec>
 800f1ca:	bf00      	nop
 800f1cc:	3be56041 	.word	0x3be56041
 800f1d0:	3dcccccd 	.word	0x3dcccccd
 800f1d4:	3e333333 	.word	0x3e333333
 800f1d8:	3d088889 	.word	0x3d088889
 800f1dc:	42480000 	.word	0x42480000
 800f1e0:	00000000 	.word	0x00000000
 800f1e4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f1ee:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 80c1 	beq.w	800f37a <kalman_3gyro.constprop.0+0x2662>
 800f1f8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f1fc:	2a01      	cmp	r2, #1
 800f1fe:	f001 8615 	beq.w	8010e2c <kalman_3gyro.constprop.0+0x4114>
 800f202:	9101      	str	r1, [sp, #4]
 800f204:	2b02      	cmp	r3, #2
 800f206:	f041 87d2 	bne.w	80111ae <kalman_3gyro.constprop.0+0x4496>
 800f20a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f20e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800f212:	f240 1301 	movw	r3, #257	; 0x101
 800f216:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800f21a:	2301      	movs	r3, #1
 800f21c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800f220:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f224:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800f228:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800f22c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f230:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800f234:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800f238:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800f23c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800f240:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800f244:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f248:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	f2c2 809a 	blt.w	8011388 <kalman_3gyro.constprop.0+0x4670>
 800f254:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f258:	2a00      	cmp	r2, #0
 800f25a:	f002 83db 	beq.w	8011a14 <kalman_3gyro.constprop.0+0x4cfc>
 800f25e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f262:	3301      	adds	r3, #1
 800f264:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f268:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f26c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f274:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f278:	f002 84da 	beq.w	8011c30 <kalman_3gyro.constprop.0+0x4f18>
 800f27c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f280:	f002 80d0 	beq.w	8011424 <kalman_3gyro.constprop.0+0x470c>
 800f284:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f288:	2a00      	cmp	r2, #0
 800f28a:	f042 80d0 	bne.w	801142e <kalman_3gyro.constprop.0+0x4716>
 800f28e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f290:	a830      	add	r0, sp, #192	; 0xc0
 800f292:	f04f 31ff 	mov.w	r1, #4294967295
 800f296:	4613      	mov	r3, r2
 800f298:	edd2 7a00 	vldr	s15, [r2]
 800f29c:	3101      	adds	r1, #1
 800f29e:	330c      	adds	r3, #12
 800f2a0:	3204      	adds	r2, #4
 800f2a2:	461c      	mov	r4, r3
 800f2a4:	ed94 7a00 	vldr	s14, [r4]
 800f2a8:	330c      	adds	r3, #12
 800f2aa:	4598      	cmp	r8, r3
 800f2ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f2b0:	d1f7      	bne.n	800f2a2 <kalman_3gyro.constprop.0+0x258a>
 800f2b2:	2902      	cmp	r1, #2
 800f2b4:	ece0 7a01 	vstmia	r0!, {s15}
 800f2b8:	f108 0804 	add.w	r8, r8, #4
 800f2bc:	d1eb      	bne.n	800f296 <kalman_3gyro.constprop.0+0x257e>
 800f2be:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f1d8 <kalman_3gyro.constprop.0+0x24c0>
 800f2c2:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f2c6:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f2ca:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f2ce:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f2d0:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f2d4:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f2d8:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f2dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f2e0:	460a      	mov	r2, r1
 800f2e2:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f2e6:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f2ea:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f2ee:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f2f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fa:	f103 030c 	add.w	r3, r3, #12
 800f2fe:	bf88      	it	hi
 800f300:	eef0 7a47 	vmovhi.f32	s15, s14
 800f304:	4293      	cmp	r3, r2
 800f306:	d1f2      	bne.n	800f2ee <kalman_3gyro.constprop.0+0x25d6>
 800f308:	1d1a      	adds	r2, r3, #4
 800f30a:	4290      	cmp	r0, r2
 800f30c:	ece4 7a01 	vstmia	r4!, {s15}
 800f310:	d1e9      	bne.n	800f2e6 <kalman_3gyro.constprop.0+0x25ce>
 800f312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f314:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f318:	edd3 7a00 	vldr	s15, [r3]
 800f31c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f320:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f324:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f328:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f32c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f330:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f334:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f338:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f33c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f340:	b14b      	cbz	r3, 800f356 <kalman_3gyro.constprop.0+0x263e>
 800f342:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f346:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f34a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f352:	f102 8553 	bmi.w	8011dfc <kalman_3gyro.constprop.0+0x50e4>
 800f356:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f35a:	2a1e      	cmp	r2, #30
 800f35c:	f002 84dd 	beq.w	8011d1a <kalman_3gyro.constprop.0+0x5002>
 800f360:	1c53      	adds	r3, r2, #1
 800f362:	2aff      	cmp	r2, #255	; 0xff
 800f364:	bf14      	ite	ne
 800f366:	b2db      	uxtbne	r3, r3
 800f368:	23ff      	moveq	r3, #255	; 0xff
 800f36a:	2200      	movs	r2, #0
 800f36c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f370:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f374:	9b01      	ldr	r3, [sp, #4]
 800f376:	e012      	b.n	800f39e <kalman_3gyro.constprop.0+0x2686>
 800f378:	2301      	movs	r3, #1
 800f37a:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f37e:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f382:	9181      	str	r1, [sp, #516]	; 0x204
 800f384:	9282      	str	r2, [sp, #520]	; 0x208
 800f386:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f38a:	9183      	str	r1, [sp, #524]	; 0x20c
 800f38c:	2200      	movs	r2, #0
 800f38e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f392:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f396:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f39a:	f88b 2001 	strb.w	r2, [fp, #1]
 800f39e:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800f1dc <kalman_3gyro.constprop.0+0x24c4>
 800f3a2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3aa:	f2c0 875f 	blt.w	801026c <kalman_3gyro.constprop.0+0x3554>
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f3b4:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f3b8:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d125      	bne.n	800f40c <kalman_3gyro.constprop.0+0x26f4>
 800f3c0:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f3c4:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f3c8:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f3cc:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f3d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f3d4:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f3d8:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f3dc:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f3e0:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f3e4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f3e8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f3ec:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f3f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f3f4:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f3f8:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f3fc:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f400:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f404:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f408:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f40c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f410:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f414:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f418:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f41c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f420:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f424:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f428:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f42c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f430:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f434:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f438:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f43c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f440:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f444:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f448:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f44c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f450:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f454:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f458:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f45c:	9301      	str	r3, [sp, #4]
 800f45e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f462:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f466:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f46a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f46e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f472:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f476:	2500      	movs	r5, #0
 800f478:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f47c:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f480:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f484:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f488:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f48c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f490:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f494:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f49c:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f4a0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f4a4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f4a8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f4ac:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f4b0:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f4b4:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f4b8:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f4bc:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f4c0:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f4c4:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f4c8:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f4cc:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f4d0:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f4d4:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f4d8:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f4dc:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f4e0:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f4e4:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800f1e0 <kalman_3gyro.constprop.0+0x24c8>
 800f4e8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f4ec:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f4f0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f4f4:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f4f8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f4fc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f500:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f504:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f508:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f50c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f510:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f514:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f518:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f51c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f520:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f524:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f528:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f52c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f530:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f534:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f538:	e005      	b.n	800f546 <kalman_3gyro.constprop.0+0x282e>
 800f53a:	3501      	adds	r5, #1
 800f53c:	2d0c      	cmp	r5, #12
 800f53e:	f104 0404 	add.w	r4, r4, #4
 800f542:	f000 84fe 	beq.w	800ff42 <kalman_3gyro.constprop.0+0x322a>
 800f546:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d0f5      	beq.n	800f53a <kalman_3gyro.constprop.0+0x2822>
 800f54e:	edd4 da00 	vldr	s27, [r4]
 800f552:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f556:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f55a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f55e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f562:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f566:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f56a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f56e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f572:	9b01      	ldr	r3, [sp, #4]
 800f574:	ed89 8a00 	vstr	s16, [r9]
 800f578:	ed89 8a01 	vstr	s16, [r9, #4]
 800f57c:	ed89 8a02 	vstr	s16, [r9, #8]
 800f580:	ed89 8a03 	vstr	s16, [r9, #12]
 800f584:	ed89 8a04 	vstr	s16, [r9, #16]
 800f588:	ed89 8a05 	vstr	s16, [r9, #20]
 800f58c:	ed89 8a06 	vstr	s16, [r9, #24]
 800f590:	ed89 8a07 	vstr	s16, [r9, #28]
 800f594:	ed89 8a08 	vstr	s16, [r9, #32]
 800f598:	464e      	mov	r6, r9
 800f59a:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f59e:	464a      	mov	r2, r9
 800f5a0:	ecb3 7a01 	vldmia	r3!, {s14}
 800f5a4:	ecf2 7a01 	vldmia	r2!, {s15}
 800f5a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b0:	d006      	beq.n	800f5c0 <kalman_3gyro.constprop.0+0x28a8>
 800f5b2:	eef5 da40 	vcmp.f32	s27, #0.0
 800f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ba:	bf18      	it	ne
 800f5bc:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f5c0:	ed93 7a08 	vldr	s14, [r3, #32]
 800f5c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5cc:	d006      	beq.n	800f5dc <kalman_3gyro.constprop.0+0x28c4>
 800f5ce:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d6:	bf18      	it	ne
 800f5d8:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f5dc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f5e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e8:	d006      	beq.n	800f5f8 <kalman_3gyro.constprop.0+0x28e0>
 800f5ea:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	bf18      	it	ne
 800f5f4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f5f8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f5fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f604:	d006      	beq.n	800f614 <kalman_3gyro.constprop.0+0x28fc>
 800f606:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60e:	bf18      	it	ne
 800f610:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f614:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f618:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f620:	d006      	beq.n	800f630 <kalman_3gyro.constprop.0+0x2918>
 800f622:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	bf18      	it	ne
 800f62c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f630:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f634:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	d006      	beq.n	800f64c <kalman_3gyro.constprop.0+0x2934>
 800f63e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f646:	bf18      	it	ne
 800f648:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f64c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f650:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	d006      	beq.n	800f668 <kalman_3gyro.constprop.0+0x2950>
 800f65a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f662:	bf18      	it	ne
 800f664:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f668:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f66c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f674:	d006      	beq.n	800f684 <kalman_3gyro.constprop.0+0x296c>
 800f676:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	bf18      	it	ne
 800f680:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f684:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f688:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f690:	d006      	beq.n	800f6a0 <kalman_3gyro.constprop.0+0x2988>
 800f692:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69a:	bf18      	it	ne
 800f69c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f6a0:	428b      	cmp	r3, r1
 800f6a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f6a6:	f47f af7b 	bne.w	800f5a0 <kalman_3gyro.constprop.0+0x2888>
 800f6aa:	eef5 da40 	vcmp.f32	s27, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	edd9 8a00 	vldr	s17, [r9]
 800f6b6:	f040 8543 	bne.w	8010140 <kalman_3gyro.constprop.0+0x3428>
 800f6ba:	eef0 7a6d 	vmov.f32	s15, s27
 800f6be:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c6:	ed99 9a01 	vldr	s18, [r9, #4]
 800f6ca:	d006      	beq.n	800f6da <kalman_3gyro.constprop.0+0x29c2>
 800f6cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d4:	bf18      	it	ne
 800f6d6:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f6da:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e2:	edd9 aa02 	vldr	s21, [r9, #8]
 800f6e6:	d006      	beq.n	800f6f6 <kalman_3gyro.constprop.0+0x29de>
 800f6e8:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f0:	bf18      	it	ne
 800f6f2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f6f6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fe:	edd9 ba03 	vldr	s23, [r9, #12]
 800f702:	d006      	beq.n	800f712 <kalman_3gyro.constprop.0+0x29fa>
 800f704:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	bf18      	it	ne
 800f70e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f712:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	edd9 ca04 	vldr	s25, [r9, #16]
 800f71e:	d006      	beq.n	800f72e <kalman_3gyro.constprop.0+0x2a16>
 800f720:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f728:	bf18      	it	ne
 800f72a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f72e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	ed99 ca05 	vldr	s24, [r9, #20]
 800f73a:	d006      	beq.n	800f74a <kalman_3gyro.constprop.0+0x2a32>
 800f73c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	bf18      	it	ne
 800f746:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f74a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f752:	ed99 da06 	vldr	s26, [r9, #24]
 800f756:	d006      	beq.n	800f766 <kalman_3gyro.constprop.0+0x2a4e>
 800f758:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f760:	bf18      	it	ne
 800f762:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f766:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76e:	ed99 aa07 	vldr	s20, [r9, #28]
 800f772:	d006      	beq.n	800f782 <kalman_3gyro.constprop.0+0x2a6a>
 800f774:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77c:	bf18      	it	ne
 800f77e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f782:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78a:	ed99 ba08 	vldr	s22, [r9, #32]
 800f78e:	d006      	beq.n	800f79e <kalman_3gyro.constprop.0+0x2a86>
 800f790:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f798:	bf18      	it	ne
 800f79a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f79e:	ab87      	add	r3, sp, #540	; 0x21c
 800f7a0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f7a4:	ed92 7a00 	vldr	s14, [r2]
 800f7a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7ac:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f7b0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f7b4:	2d05      	cmp	r5, #5
 800f7b6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f7ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f7be:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f7c2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f7c6:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f7ca:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f7ce:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f7d2:	ee2d da27 	vmul.f32	s26, s26, s15
 800f7d6:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f7da:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f7de:	edc9 8a00 	vstr	s17, [r9]
 800f7e2:	ed89 9a01 	vstr	s18, [r9, #4]
 800f7e6:	edc9 aa02 	vstr	s21, [r9, #8]
 800f7ea:	edc9 ba03 	vstr	s23, [r9, #12]
 800f7ee:	edc9 ca04 	vstr	s25, [r9, #16]
 800f7f2:	ed89 ca05 	vstr	s24, [r9, #20]
 800f7f6:	ed89 da06 	vstr	s26, [r9, #24]
 800f7fa:	ed89 aa07 	vstr	s20, [r9, #28]
 800f7fe:	ed89 ba08 	vstr	s22, [r9, #32]
 800f802:	f340 8497 	ble.w	8010134 <kalman_3gyro.constprop.0+0x341c>
 800f806:	eef5 da40 	vcmp.f32	s27, #0.0
 800f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80e:	f000 8510 	beq.w	8010232 <kalman_3gyro.constprop.0+0x351a>
 800f812:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f816:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81e:	d001      	beq.n	800f824 <kalman_3gyro.constprop.0+0x2b0c>
 800f820:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f824:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82c:	d008      	beq.n	800f840 <kalman_3gyro.constprop.0+0x2b28>
 800f82e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f832:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83a:	bf18      	it	ne
 800f83c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f840:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f848:	d008      	beq.n	800f85c <kalman_3gyro.constprop.0+0x2b44>
 800f84a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f84e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f856:	bf18      	it	ne
 800f858:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f85c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f864:	d008      	beq.n	800f878 <kalman_3gyro.constprop.0+0x2b60>
 800f866:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f86a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f872:	bf18      	it	ne
 800f874:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f878:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f880:	d008      	beq.n	800f894 <kalman_3gyro.constprop.0+0x2b7c>
 800f882:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f886:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f88e:	bf18      	it	ne
 800f890:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f894:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f89c:	d008      	beq.n	800f8b0 <kalman_3gyro.constprop.0+0x2b98>
 800f89e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f8a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8aa:	bf18      	it	ne
 800f8ac:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f8b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b8:	d008      	beq.n	800f8cc <kalman_3gyro.constprop.0+0x2bb4>
 800f8ba:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f8be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c6:	bf18      	it	ne
 800f8c8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f8cc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	d008      	beq.n	800f8e8 <kalman_3gyro.constprop.0+0x2bd0>
 800f8d6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f8da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e2:	bf18      	it	ne
 800f8e4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f8e8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f0:	d008      	beq.n	800f904 <kalman_3gyro.constprop.0+0x2bec>
 800f8f2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f8f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fe:	bf18      	it	ne
 800f900:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f904:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f906:	4413      	add	r3, r2
 800f908:	edd3 9a00 	vldr	s19, [r3]
 800f90c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f910:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f914:	2100      	movs	r1, #0
 800f916:	4650      	mov	r0, sl
 800f918:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f91c:	edcd 5a04 	vstr	s11, [sp, #16]
 800f920:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f924:	edcd 6a02 	vstr	s13, [sp, #8]
 800f928:	f008 f828 	bl	801797c <memset>
 800f92c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f930:	eddd 5a04 	vldr	s11, [sp, #16]
 800f934:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f938:	eddd 6a02 	vldr	s13, [sp, #8]
 800f93c:	4651      	mov	r1, sl
 800f93e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f942:	4653      	mov	r3, sl
 800f944:	ecf6 7a01 	vldmia	r6!, {s15}
 800f948:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	d062      	beq.n	800fa18 <kalman_3gyro.constprop.0+0x2d00>
 800f952:	eef5 da40 	vcmp.f32	s27, #0.0
 800f956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95a:	d005      	beq.n	800f968 <kalman_3gyro.constprop.0+0x2c50>
 800f95c:	ed93 7a00 	vldr	s14, [r3]
 800f960:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f964:	ed83 7a00 	vstr	s14, [r3]
 800f968:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	d005      	beq.n	800f97e <kalman_3gyro.constprop.0+0x2c66>
 800f972:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f976:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f97a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f97e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f986:	d005      	beq.n	800f994 <kalman_3gyro.constprop.0+0x2c7c>
 800f988:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f98c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f990:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f994:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99c:	d005      	beq.n	800f9aa <kalman_3gyro.constprop.0+0x2c92>
 800f99e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f9a2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f9a6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f9aa:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b2:	d005      	beq.n	800f9c0 <kalman_3gyro.constprop.0+0x2ca8>
 800f9b4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f9b8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f9bc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f9c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c8:	d005      	beq.n	800f9d6 <kalman_3gyro.constprop.0+0x2cbe>
 800f9ca:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f9ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f9d2:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f9d6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9de:	d005      	beq.n	800f9ec <kalman_3gyro.constprop.0+0x2cd4>
 800f9e0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f9e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f9e8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f9ec:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f4:	d005      	beq.n	800fa02 <kalman_3gyro.constprop.0+0x2cea>
 800f9f6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f9fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f9fe:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800fa02:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0a:	d005      	beq.n	800fa18 <kalman_3gyro.constprop.0+0x2d00>
 800fa0c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800fa10:	eea5 7a27 	vfma.f32	s14, s10, s15
 800fa14:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800fa18:	4296      	cmp	r6, r2
 800fa1a:	f103 0304 	add.w	r3, r3, #4
 800fa1e:	d191      	bne.n	800f944 <kalman_3gyro.constprop.0+0x2c2c>
 800fa20:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800fa24:	4656      	mov	r6, sl
 800fa26:	463b      	mov	r3, r7
 800fa28:	2208      	movs	r2, #8
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa30:	e074      	b.n	800fb1c <kalman_3gyro.constprop.0+0x2e04>
 800fa32:	edd6 7a00 	vldr	s15, [r6]
 800fa36:	ed83 8a01 	vstr	s16, [r3, #4]
 800fa3a:	eef1 7a67 	vneg.f32	s15, s15
 800fa3e:	2801      	cmp	r0, #1
 800fa40:	edc6 7a00 	vstr	s15, [r6]
 800fa44:	f1a2 0c07 	sub.w	ip, r2, #7
 800fa48:	f000 831e 	beq.w	8010088 <kalman_3gyro.constprop.0+0x3370>
 800fa4c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa50:	eddc 7a00 	vldr	s15, [ip]
 800fa54:	ed83 8a02 	vstr	s16, [r3, #8]
 800fa58:	eef1 7a67 	vneg.f32	s15, s15
 800fa5c:	2802      	cmp	r0, #2
 800fa5e:	edcc 7a00 	vstr	s15, [ip]
 800fa62:	f1a2 0c06 	sub.w	ip, r2, #6
 800fa66:	f000 82f8 	beq.w	801005a <kalman_3gyro.constprop.0+0x3342>
 800fa6a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa6e:	eddc 7a00 	vldr	s15, [ip]
 800fa72:	ed83 8a03 	vstr	s16, [r3, #12]
 800fa76:	eef1 7a67 	vneg.f32	s15, s15
 800fa7a:	2803      	cmp	r0, #3
 800fa7c:	edcc 7a00 	vstr	s15, [ip]
 800fa80:	f1a2 0c05 	sub.w	ip, r2, #5
 800fa84:	d170      	bne.n	800fb68 <kalman_3gyro.constprop.0+0x2e50>
 800fa86:	edd6 7a03 	vldr	s15, [r6, #12]
 800fa8a:	ed83 8a04 	vstr	s16, [r3, #16]
 800fa8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa92:	f1a2 0e04 	sub.w	lr, r2, #4
 800fa96:	edc6 7a03 	vstr	s15, [r6, #12]
 800fa9a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fa9e:	edde 7a00 	vldr	s15, [lr]
 800faa2:	ed83 8a05 	vstr	s16, [r3, #20]
 800faa6:	eef1 7a67 	vneg.f32	s15, s15
 800faaa:	f1a2 0c03 	sub.w	ip, r2, #3
 800faae:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fab2:	edce 7a00 	vstr	s15, [lr]
 800fab6:	eddc 7a00 	vldr	s15, [ip]
 800faba:	ed83 8a06 	vstr	s16, [r3, #24]
 800fabe:	eef1 7a67 	vneg.f32	s15, s15
 800fac2:	edcc 7a00 	vstr	s15, [ip]
 800fac6:	f1a2 0c02 	sub.w	ip, r2, #2
 800faca:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800face:	eddc 7a00 	vldr	s15, [ip]
 800fad2:	ed83 8a07 	vstr	s16, [r3, #28]
 800fad6:	eef1 7a67 	vneg.f32	s15, s15
 800fada:	2807      	cmp	r0, #7
 800fadc:	edcc 7a00 	vstr	s15, [ip]
 800fae0:	f102 3cff 	add.w	ip, r2, #4294967295
 800fae4:	f040 80a2 	bne.w	800fc2c <kalman_3gyro.constprop.0+0x2f14>
 800fae8:	edd6 7a07 	vldr	s15, [r6, #28]
 800faec:	ed83 8a08 	vstr	s16, [r3, #32]
 800faf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800faf4:	edc6 7a07 	vstr	s15, [r6, #28]
 800faf8:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800fafc:	eddc 7a00 	vldr	s15, [ip]
 800fb00:	3001      	adds	r0, #1
 800fb02:	eef1 7a67 	vneg.f32	s15, s15
 800fb06:	2809      	cmp	r0, #9
 800fb08:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fb0c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800fb10:	f102 0209 	add.w	r2, r2, #9
 800fb14:	edcc 7a00 	vstr	s15, [ip]
 800fb18:	f000 809f 	beq.w	800fc5a <kalman_3gyro.constprop.0+0x2f42>
 800fb1c:	ed83 8a00 	vstr	s16, [r3]
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d186      	bne.n	800fa32 <kalman_3gyro.constprop.0+0x2d1a>
 800fb24:	edda 7a00 	vldr	s15, [sl]
 800fb28:	ed83 8a01 	vstr	s16, [r3, #4]
 800fb2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb30:	f1a2 0e07 	sub.w	lr, r2, #7
 800fb34:	edc6 7a00 	vstr	s15, [r6]
 800fb38:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fb3c:	edde 7a00 	vldr	s15, [lr]
 800fb40:	ed83 8a02 	vstr	s16, [r3, #8]
 800fb44:	eef1 7a67 	vneg.f32	s15, s15
 800fb48:	f1a2 0c06 	sub.w	ip, r2, #6
 800fb4c:	edce 7a00 	vstr	s15, [lr]
 800fb50:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb54:	eddc 7a00 	vldr	s15, [ip]
 800fb58:	ed83 8a03 	vstr	s16, [r3, #12]
 800fb5c:	eef1 7a67 	vneg.f32	s15, s15
 800fb60:	edcc 7a00 	vstr	s15, [ip]
 800fb64:	f1a2 0c05 	sub.w	ip, r2, #5
 800fb68:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb6c:	eddc 7a00 	vldr	s15, [ip]
 800fb70:	ed83 8a04 	vstr	s16, [r3, #16]
 800fb74:	eef1 7a67 	vneg.f32	s15, s15
 800fb78:	2804      	cmp	r0, #4
 800fb7a:	edcc 7a00 	vstr	s15, [ip]
 800fb7e:	f1a2 0c04 	sub.w	ip, r2, #4
 800fb82:	d031      	beq.n	800fbe8 <kalman_3gyro.constprop.0+0x2ed0>
 800fb84:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb88:	eddc 7a00 	vldr	s15, [ip]
 800fb8c:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb90:	eef1 7a67 	vneg.f32	s15, s15
 800fb94:	2805      	cmp	r0, #5
 800fb96:	edcc 7a00 	vstr	s15, [ip]
 800fb9a:	f1a2 0c03 	sub.w	ip, r2, #3
 800fb9e:	f000 8245 	beq.w	801002c <kalman_3gyro.constprop.0+0x3314>
 800fba2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fba6:	eddc 7a00 	vldr	s15, [ip]
 800fbaa:	ed83 8a06 	vstr	s16, [r3, #24]
 800fbae:	eef1 7a67 	vneg.f32	s15, s15
 800fbb2:	2806      	cmp	r0, #6
 800fbb4:	edcc 7a00 	vstr	s15, [ip]
 800fbb8:	f1a2 0c02 	sub.w	ip, r2, #2
 800fbbc:	d185      	bne.n	800faca <kalman_3gyro.constprop.0+0x2db2>
 800fbbe:	edd6 7a06 	vldr	s15, [r6, #24]
 800fbc2:	ed83 8a07 	vstr	s16, [r3, #28]
 800fbc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbca:	f102 3cff 	add.w	ip, r2, #4294967295
 800fbce:	edc6 7a06 	vstr	s15, [r6, #24]
 800fbd2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fbd6:	eddc 7a00 	vldr	s15, [ip]
 800fbda:	ed83 8a08 	vstr	s16, [r3, #32]
 800fbde:	eef1 7a67 	vneg.f32	s15, s15
 800fbe2:	edcc 7a00 	vstr	s15, [ip]
 800fbe6:	e787      	b.n	800faf8 <kalman_3gyro.constprop.0+0x2de0>
 800fbe8:	edd6 7a04 	vldr	s15, [r6, #16]
 800fbec:	ed83 8a05 	vstr	s16, [r3, #20]
 800fbf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbf4:	f1a2 0e03 	sub.w	lr, r2, #3
 800fbf8:	edc6 7a04 	vstr	s15, [r6, #16]
 800fbfc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fc00:	edde 7a00 	vldr	s15, [lr]
 800fc04:	ed83 8a06 	vstr	s16, [r3, #24]
 800fc08:	eef1 7a67 	vneg.f32	s15, s15
 800fc0c:	f1a2 0c02 	sub.w	ip, r2, #2
 800fc10:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fc14:	edce 7a00 	vstr	s15, [lr]
 800fc18:	eddc 7a00 	vldr	s15, [ip]
 800fc1c:	ed83 8a07 	vstr	s16, [r3, #28]
 800fc20:	eef1 7a67 	vneg.f32	s15, s15
 800fc24:	edcc 7a00 	vstr	s15, [ip]
 800fc28:	f102 3cff 	add.w	ip, r2, #4294967295
 800fc2c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fc30:	eddc 7a00 	vldr	s15, [ip]
 800fc34:	ed83 8a08 	vstr	s16, [r3, #32]
 800fc38:	eef1 7a67 	vneg.f32	s15, s15
 800fc3c:	2808      	cmp	r0, #8
 800fc3e:	edcc 7a00 	vstr	s15, [ip]
 800fc42:	f47f af59 	bne.w	800faf8 <kalman_3gyro.constprop.0+0x2de0>
 800fc46:	ed96 7a08 	vldr	s14, [r6, #32]
 800fc4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc52:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fc56:	edc2 7a00 	vstr	s15, [r2]
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fc60:	ecb1 3a01 	vldmia	r1!, {s6}
 800fc64:	edd1 3a08 	vldr	s7, [r1, #32]
 800fc68:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fc6c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fc70:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fc74:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fc78:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fc7c:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fc80:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fc84:	465a      	mov	r2, fp
 800fc86:	463b      	mov	r3, r7
 800fc88:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc90:	d00c      	beq.n	800fcac <kalman_3gyro.constprop.0+0x2f94>
 800fc92:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fc96:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9e:	d005      	beq.n	800fcac <kalman_3gyro.constprop.0+0x2f94>
 800fca0:	edd3 7a00 	vldr	s15, [r3]
 800fca4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800fca8:	edc3 7a00 	vstr	s15, [r3]
 800fcac:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb4:	d00c      	beq.n	800fcd0 <kalman_3gyro.constprop.0+0x2fb8>
 800fcb6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800fcba:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc2:	d005      	beq.n	800fcd0 <kalman_3gyro.constprop.0+0x2fb8>
 800fcc4:	edd3 7a00 	vldr	s15, [r3]
 800fcc8:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800fccc:	edc3 7a00 	vstr	s15, [r3]
 800fcd0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	d00c      	beq.n	800fcf4 <kalman_3gyro.constprop.0+0x2fdc>
 800fcda:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fcde:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	d005      	beq.n	800fcf4 <kalman_3gyro.constprop.0+0x2fdc>
 800fce8:	edd3 7a00 	vldr	s15, [r3]
 800fcec:	eee4 7a22 	vfma.f32	s15, s8, s5
 800fcf0:	edc3 7a00 	vstr	s15, [r3]
 800fcf4:	eef5 4a40 	vcmp.f32	s9, #0.0
 800fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfc:	d00c      	beq.n	800fd18 <kalman_3gyro.constprop.0+0x3000>
 800fcfe:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fd02:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0a:	d005      	beq.n	800fd18 <kalman_3gyro.constprop.0+0x3000>
 800fd0c:	edd3 7a00 	vldr	s15, [r3]
 800fd10:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fd14:	edc3 7a00 	vstr	s15, [r3]
 800fd18:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd20:	d00c      	beq.n	800fd3c <kalman_3gyro.constprop.0+0x3024>
 800fd22:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fd26:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2e:	d005      	beq.n	800fd3c <kalman_3gyro.constprop.0+0x3024>
 800fd30:	edd3 7a00 	vldr	s15, [r3]
 800fd34:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fd38:	edc3 7a00 	vstr	s15, [r3]
 800fd3c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd44:	d00c      	beq.n	800fd60 <kalman_3gyro.constprop.0+0x3048>
 800fd46:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fd4a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	d005      	beq.n	800fd60 <kalman_3gyro.constprop.0+0x3048>
 800fd54:	edd3 7a00 	vldr	s15, [r3]
 800fd58:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fd5c:	edc3 7a00 	vstr	s15, [r3]
 800fd60:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd68:	d00c      	beq.n	800fd84 <kalman_3gyro.constprop.0+0x306c>
 800fd6a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fd6e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd76:	d005      	beq.n	800fd84 <kalman_3gyro.constprop.0+0x306c>
 800fd78:	edd3 7a00 	vldr	s15, [r3]
 800fd7c:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fd80:	edc3 7a00 	vstr	s15, [r3]
 800fd84:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd8c:	d00c      	beq.n	800fda8 <kalman_3gyro.constprop.0+0x3090>
 800fd8e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fd92:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	d005      	beq.n	800fda8 <kalman_3gyro.constprop.0+0x3090>
 800fd9c:	edd3 7a00 	vldr	s15, [r3]
 800fda0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fda4:	edc3 7a00 	vstr	s15, [r3]
 800fda8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb0:	d00c      	beq.n	800fdcc <kalman_3gyro.constprop.0+0x30b4>
 800fdb2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fdb6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbe:	d005      	beq.n	800fdcc <kalman_3gyro.constprop.0+0x30b4>
 800fdc0:	edd3 7a00 	vldr	s15, [r3]
 800fdc4:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fdc8:	edc3 7a00 	vstr	s15, [r3]
 800fdcc:	3224      	adds	r2, #36	; 0x24
 800fdce:	4296      	cmp	r6, r2
 800fdd0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fdd4:	f47f af58 	bne.w	800fc88 <kalman_3gyro.constprop.0+0x2f70>
 800fdd8:	3001      	adds	r0, #1
 800fdda:	2809      	cmp	r0, #9
 800fddc:	f107 0704 	add.w	r7, r7, #4
 800fde0:	f47f af3e 	bne.w	800fc60 <kalman_3gyro.constprop.0+0x2f48>
 800fde4:	9801      	ldr	r0, [sp, #4]
 800fde6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fdea:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fdee:	f007 fd9d 	bl	801792c <memcpy>
 800fdf2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfa:	f000 817c 	beq.w	80100f6 <kalman_3gyro.constprop.0+0x33de>
 800fdfe:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe06:	f000 8176 	beq.w	80100f6 <kalman_3gyro.constprop.0+0x33de>
 800fe0a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fe0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe12:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fe16:	f040 8212 	bne.w	801023e <kalman_3gyro.constprop.0+0x3526>
 800fe1a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	f000 8177 	beq.w	8010114 <kalman_3gyro.constprop.0+0x33fc>
 800fe26:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fe32:	f040 81cb 	bne.w	80101cc <kalman_3gyro.constprop.0+0x34b4>
 800fe36:	eef0 ba47 	vmov.f32	s23, s14
 800fe3a:	eef0 aa49 	vmov.f32	s21, s18
 800fe3e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	f000 8138 	beq.w	80100ba <kalman_3gyro.constprop.0+0x33a2>
 800fe4a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe52:	f000 824e 	beq.w	80102f2 <kalman_3gyro.constprop.0+0x35da>
 800fe56:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fe5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe5e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fe62:	eef0 7a48 	vmov.f32	s15, s16
 800fe66:	f040 81c5 	bne.w	80101f4 <kalman_3gyro.constprop.0+0x34dc>
 800fe6a:	eeb0 ca47 	vmov.f32	s24, s14
 800fe6e:	eef0 ca67 	vmov.f32	s25, s15
 800fe72:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fe76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7a:	f000 8179 	beq.w	8010170 <kalman_3gyro.constprop.0+0x3458>
 800fe7e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe86:	f000 8125 	beq.w	80100d4 <kalman_3gyro.constprop.0+0x33bc>
 800fe8a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fe8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe92:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fe96:	eef0 7a48 	vmov.f32	s15, s16
 800fe9a:	f040 81be 	bne.w	801021a <kalman_3gyro.constprop.0+0x3502>
 800fe9e:	eeb0 aa47 	vmov.f32	s20, s14
 800fea2:	eeb0 da67 	vmov.f32	s26, s15
 800fea6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800feaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feae:	f000 811f 	beq.w	80100f0 <kalman_3gyro.constprop.0+0x33d8>
 800feb2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	f000 821d 	beq.w	80102f8 <kalman_3gyro.constprop.0+0x35e0>
 800febe:	eef0 7a48 	vmov.f32	s15, s16
 800fec2:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fec6:	eef0 9a67 	vmov.f32	s19, s15
 800feca:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fece:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fed2:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fed6:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800feda:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fede:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fee2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fee6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800feea:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800feee:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fef2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fef6:	ee74 baab 	vadd.f32	s23, s9, s23
 800fefa:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fefe:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800ff02:	ee36 da0d 	vadd.f32	s26, s12, s26
 800ff06:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800ff0a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800ff0e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800ff12:	3501      	adds	r5, #1
 800ff14:	2d0c      	cmp	r5, #12
 800ff16:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800ff1a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800ff1e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800ff22:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800ff26:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800ff2a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800ff2e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800ff32:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800ff36:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800ff3a:	f104 0404 	add.w	r4, r4, #4
 800ff3e:	f47f ab02 	bne.w	800f546 <kalman_3gyro.constprop.0+0x282e>
 800ff42:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800ff46:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800ff4a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800ff4e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800ff52:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ff56:	eee6 7a06 	vfma.f32	s15, s12, s12
 800ff5a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ff5e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ff62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff66:	f100 81b5 	bmi.w	80102d4 <kalman_3gyro.constprop.0+0x35bc>
 800ff6a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800ff6e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8010300 <kalman_3gyro.constprop.0+0x35e8>
 800ff72:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800ff76:	ee67 4a86 	vmul.f32	s9, s15, s12
 800ff7a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800ff7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff82:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800ff86:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800ff8a:	aa36      	add	r2, sp, #216	; 0xd8
 800ff8c:	edc3 4a00 	vstr	s9, [r3]
 800ff90:	edc3 5a01 	vstr	s11, [r3, #4]
 800ff94:	edc3 7a02 	vstr	s15, [r3, #8]
 800ff98:	ed83 5a03 	vstr	s10, [r3, #12]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800ffa4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800ffa8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800ffac:	f7fb fdbc 	bl	800bb28 <qmult>
 800ffb0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800ffb4:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800ffb8:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800ffbc:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800ffc0:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800ffc4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ffc6:	ee66 7a06 	vmul.f32	s15, s12, s12
 800ffca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ffce:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ffd2:	ae54      	add	r6, sp, #336	; 0x150
 800ffd4:	af5c      	add	r7, sp, #368	; 0x170
 800ffd6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ffda:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ffde:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ffe2:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ffe6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ffea:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ffee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fff6:	edc3 5a00 	vstr	s11, [r3]
 800fffa:	ed83 6a01 	vstr	s12, [r3, #4]
 800fffe:	edc3 6a02 	vstr	s13, [r3, #8]
 8010002:	ed83 7a03 	vstr	s14, [r3, #12]
 8010006:	4634      	mov	r4, r6
 8010008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801000a:	42bc      	cmp	r4, r7
 801000c:	6028      	str	r0, [r5, #0]
 801000e:	6069      	str	r1, [r5, #4]
 8010010:	60aa      	str	r2, [r5, #8]
 8010012:	60eb      	str	r3, [r5, #12]
 8010014:	4626      	mov	r6, r4
 8010016:	f105 0510 	add.w	r5, r5, #16
 801001a:	d1f4      	bne.n	8010006 <kalman_3gyro.constprop.0+0x32ee>
 801001c:	6820      	ldr	r0, [r4, #0]
 801001e:	6028      	str	r0, [r5, #0]
 8010020:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 8010024:	ecbd 8b10 	vpop	{d8-d15}
 8010028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002c:	edd6 7a05 	vldr	s15, [r6, #20]
 8010030:	ed83 8a06 	vstr	s16, [r3, #24]
 8010034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010038:	f1a2 0e02 	sub.w	lr, r2, #2
 801003c:	edc6 7a05 	vstr	s15, [r6, #20]
 8010040:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8010044:	edde 7a00 	vldr	s15, [lr]
 8010048:	ed83 8a07 	vstr	s16, [r3, #28]
 801004c:	eef1 7a67 	vneg.f32	s15, s15
 8010050:	f102 3cff 	add.w	ip, r2, #4294967295
 8010054:	edce 7a00 	vstr	s15, [lr]
 8010058:	e5bb      	b.n	800fbd2 <kalman_3gyro.constprop.0+0x2eba>
 801005a:	edd6 7a02 	vldr	s15, [r6, #8]
 801005e:	ed83 8a03 	vstr	s16, [r3, #12]
 8010062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010066:	f1a2 0c05 	sub.w	ip, r2, #5
 801006a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801006e:	edc6 7a02 	vstr	s15, [r6, #8]
 8010072:	eddc 7a00 	vldr	s15, [ip]
 8010076:	ed83 8a04 	vstr	s16, [r3, #16]
 801007a:	eef1 7a67 	vneg.f32	s15, s15
 801007e:	edcc 7a00 	vstr	s15, [ip]
 8010082:	f1a2 0c04 	sub.w	ip, r2, #4
 8010086:	e57d      	b.n	800fb84 <kalman_3gyro.constprop.0+0x2e6c>
 8010088:	edd6 7a01 	vldr	s15, [r6, #4]
 801008c:	ed83 8a02 	vstr	s16, [r3, #8]
 8010090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010094:	f1a2 0c06 	sub.w	ip, r2, #6
 8010098:	edc6 7a01 	vstr	s15, [r6, #4]
 801009c:	e558      	b.n	800fb50 <kalman_3gyro.constprop.0+0x2e38>
 801009e:	eef5 ca40 	vcmp.f32	s25, #0.0
 80100a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a6:	ee69 7aab 	vmul.f32	s15, s19, s23
 80100aa:	eeb0 7a48 	vmov.f32	s14, s16
 80100ae:	f040 8097 	bne.w	80101e0 <kalman_3gyro.constprop.0+0x34c8>
 80100b2:	eef0 ca67 	vmov.f32	s25, s15
 80100b6:	eef0 ba47 	vmov.f32	s23, s14
 80100ba:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	f43f aed6 	beq.w	800fe72 <kalman_3gyro.constprop.0+0x315a>
 80100c6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	d142      	bne.n	8010156 <kalman_3gyro.constprop.0+0x343e>
 80100d0:	eeb0 ca69 	vmov.f32	s24, s19
 80100d4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	f040 80ba 	bne.w	8010254 <kalman_3gyro.constprop.0+0x353c>
 80100e0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80100e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e8:	eeb0 da4a 	vmov.f32	s26, s20
 80100ec:	f47f aee1 	bne.w	800feb2 <kalman_3gyro.constprop.0+0x319a>
 80100f0:	eef0 9a4b 	vmov.f32	s19, s22
 80100f4:	e6e9      	b.n	800feca <kalman_3gyro.constprop.0+0x31b2>
 80100f6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80100fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fe:	d051      	beq.n	80101a4 <kalman_3gyro.constprop.0+0x348c>
 8010100:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010108:	f040 8097 	bne.w	801023a <kalman_3gyro.constprop.0+0x3522>
 801010c:	eef0 aa69 	vmov.f32	s21, s19
 8010110:	eef0 8a69 	vmov.f32	s17, s19
 8010114:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	f43f ae8f 	beq.w	800fe3e <kalman_3gyro.constprop.0+0x3126>
 8010120:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010128:	d1b9      	bne.n	801009e <kalman_3gyro.constprop.0+0x3386>
 801012a:	eef0 ca69 	vmov.f32	s25, s19
 801012e:	eef0 ba69 	vmov.f32	s23, s19
 8010132:	e7c2      	b.n	80100ba <kalman_3gyro.constprop.0+0x33a2>
 8010134:	aa7b      	add	r2, sp, #492	; 0x1ec
 8010136:	4413      	add	r3, r2
 8010138:	edd3 9a00 	vldr	s19, [r3]
 801013c:	f7ff bbe8 	b.w	800f910 <kalman_3gyro.constprop.0+0x2bf8>
 8010140:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010148:	bf14      	ite	ne
 801014a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 801014e:	eef0 7a68 	vmoveq.f32	s15, s17
 8010152:	f7ff bab4 	b.w	800f6be <kalman_3gyro.constprop.0+0x29a6>
 8010156:	eeb5 da40 	vcmp.f32	s26, #0.0
 801015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8010162:	eeb0 7a48 	vmov.f32	s14, s16
 8010166:	d14e      	bne.n	8010206 <kalman_3gyro.constprop.0+0x34ee>
 8010168:	eeb0 da67 	vmov.f32	s26, s15
 801016c:	eeb0 ca47 	vmov.f32	s24, s14
 8010170:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010178:	f43f ae95 	beq.w	800fea6 <kalman_3gyro.constprop.0+0x318e>
 801017c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010184:	f000 84bd 	beq.w	8010b02 <kalman_3gyro.constprop.0+0x3dea>
 8010188:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801018c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010190:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8010194:	eeb0 7a48 	vmov.f32	s14, s16
 8010198:	d148      	bne.n	801022c <kalman_3gyro.constprop.0+0x3514>
 801019a:	eef0 9a67 	vmov.f32	s19, s15
 801019e:	eeb0 aa47 	vmov.f32	s20, s14
 80101a2:	e692      	b.n	800feca <kalman_3gyro.constprop.0+0x31b2>
 80101a4:	eef5 aa40 	vcmp.f32	s21, #0.0
 80101a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ac:	d05b      	beq.n	8010266 <kalman_3gyro.constprop.0+0x354e>
 80101ae:	eef5 9a40 	vcmp.f32	s19, #0.0
 80101b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b6:	d0a9      	beq.n	801010c <kalman_3gyro.constprop.0+0x33f4>
 80101b8:	eef5 ba40 	vcmp.f32	s23, #0.0
 80101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c0:	ee29 7aaa 	vmul.f32	s14, s19, s21
 80101c4:	eef0 8a49 	vmov.f32	s17, s18
 80101c8:	f43f ae35 	beq.w	800fe36 <kalman_3gyro.constprop.0+0x311e>
 80101cc:	eef5 ca40 	vcmp.f32	s25, #0.0
 80101d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d4:	ee69 7aab 	vmul.f32	s15, s19, s23
 80101d8:	eef0 aa49 	vmov.f32	s21, s18
 80101dc:	f43f af69 	beq.w	80100b2 <kalman_3gyro.constprop.0+0x339a>
 80101e0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80101e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e8:	eef0 ba47 	vmov.f32	s23, s14
 80101ec:	ee29 7aac 	vmul.f32	s14, s19, s25
 80101f0:	f43f ae3b 	beq.w	800fe6a <kalman_3gyro.constprop.0+0x3152>
 80101f4:	eeb5 da40 	vcmp.f32	s26, #0.0
 80101f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fc:	eef0 ca67 	vmov.f32	s25, s15
 8010200:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8010204:	d0b0      	beq.n	8010168 <kalman_3gyro.constprop.0+0x3450>
 8010206:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	eeb0 ca47 	vmov.f32	s24, s14
 8010212:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8010216:	f43f ae42 	beq.w	800fe9e <kalman_3gyro.constprop.0+0x3186>
 801021a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010222:	eeb0 da67 	vmov.f32	s26, s15
 8010226:	ee69 7a8a 	vmul.f32	s15, s19, s20
 801022a:	d0b6      	beq.n	801019a <kalman_3gyro.constprop.0+0x3482>
 801022c:	eeb0 aa47 	vmov.f32	s20, s14
 8010230:	e647      	b.n	800fec2 <kalman_3gyro.constprop.0+0x31aa>
 8010232:	eef0 7a6d 	vmov.f32	s15, s27
 8010236:	f7ff baf5 	b.w	800f824 <kalman_3gyro.constprop.0+0x2b0c>
 801023a:	eef0 8a48 	vmov.f32	s17, s16
 801023e:	eef5 aa40 	vcmp.f32	s21, #0.0
 8010242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010246:	ee29 9a29 	vmul.f32	s18, s18, s19
 801024a:	f47f adec 	bne.w	800fe26 <kalman_3gyro.constprop.0+0x310e>
 801024e:	eef0 aa49 	vmov.f32	s21, s18
 8010252:	e75f      	b.n	8010114 <kalman_3gyro.constprop.0+0x33fc>
 8010254:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8010300 <kalman_3gyro.constprop.0+0x35e8>
 8010258:	eef0 9a48 	vmov.f32	s19, s16
 801025c:	eeb0 aa48 	vmov.f32	s20, s16
 8010260:	eeb0 da48 	vmov.f32	s26, s16
 8010264:	e631      	b.n	800feca <kalman_3gyro.constprop.0+0x31b2>
 8010266:	eef0 8a6a 	vmov.f32	s17, s21
 801026a:	e753      	b.n	8010114 <kalman_3gyro.constprop.0+0x33fc>
 801026c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8010270:	2a31      	cmp	r2, #49	; 0x31
 8010272:	f63f a8a3 	bhi.w	800f3bc <kalman_3gyro.constprop.0+0x26a4>
 8010276:	2100      	movs	r1, #0
 8010278:	3201      	adds	r2, #1
 801027a:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801027e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8010282:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8010286:	f7ff b899 	b.w	800f3bc <kalman_3gyro.constprop.0+0x26a4>
 801028a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801028e:	2b00      	cmp	r3, #0
 8010290:	f340 8423 	ble.w	8010ada <kalman_3gyro.constprop.0+0x3dc2>
 8010294:	3b01      	subs	r3, #1
 8010296:	2200      	movs	r2, #0
 8010298:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801029c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 80102a0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80102a4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 80102a8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 80102ac:	f7fe bca9 	b.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 80102b0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80102b4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80102b8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80102bc:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80102c0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80102c4:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 80102c8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80102cc:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 80102d0:	f7fe bc18 	b.w	800eb04 <kalman_3gyro.constprop.0+0x1dec>
 80102d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80102d8:	eef0 4a46 	vmov.f32	s9, s12
 80102dc:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80102e0:	eef0 7a47 	vmov.f32	s15, s14
 80102e4:	eef0 5a66 	vmov.f32	s11, s13
 80102e8:	e64b      	b.n	800ff82 <kalman_3gyro.constprop.0+0x326a>
 80102ea:	eeb1 7a47 	vneg.f32	s14, s14
 80102ee:	f7fd bc66 	b.w	800dbbe <kalman_3gyro.constprop.0+0xea6>
 80102f2:	eef0 ca69 	vmov.f32	s25, s19
 80102f6:	e6e0      	b.n	80100ba <kalman_3gyro.constprop.0+0x33a2>
 80102f8:	eeb0 ba69 	vmov.f32	s22, s19
 80102fc:	e5e5      	b.n	800feca <kalman_3gyro.constprop.0+0x31b2>
 80102fe:	bf00      	nop
 8010300:	00000000 	.word	0x00000000
 8010304:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8010308:	49dc      	ldr	r1, [pc, #880]	; (801067c <kalman_3gyro.constprop.0+0x3964>)
 801030a:	4bdd      	ldr	r3, [pc, #884]	; (8010680 <kalman_3gyro.constprop.0+0x3968>)
 801030c:	4add      	ldr	r2, [pc, #884]	; (8010684 <kalman_3gyro.constprop.0+0x396c>)
 801030e:	2000      	movs	r0, #0
 8010310:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8010314:	6029      	str	r1, [r5, #0]
 8010316:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 801031a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801031e:	6002      	str	r2, [r0, #0]
 8010320:	600b      	str	r3, [r1, #0]
 8010322:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8010326:	9004      	str	r0, [sp, #16]
 8010328:	9110      	str	r1, [sp, #64]	; 0x40
 801032a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 80b4 	beq.w	801049c <kalman_3gyro.constprop.0+0x3784>
 8010334:	240c      	movs	r4, #12
 8010336:	eddf bad4 	vldr	s23, [pc, #848]	; 8010688 <kalman_3gyro.constprop.0+0x3970>
 801033a:	ed9f bad4 	vldr	s22, [pc, #848]	; 801068c <kalman_3gyro.constprop.0+0x3974>
 801033e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010690 <kalman_3gyro.constprop.0+0x3978>
 8010342:	ed9f aad4 	vldr	s20, [pc, #848]	; 8010694 <kalman_3gyro.constprop.0+0x397c>
 8010346:	eddf aad4 	vldr	s21, [pc, #848]	; 8010698 <kalman_3gyro.constprop.0+0x3980>
 801034a:	9f08      	ldr	r7, [sp, #32]
 801034c:	fb14 8403 	smlabb	r4, r4, r3, r8
 8010350:	4646      	mov	r6, r8
 8010352:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010356:	e06b      	b.n	8010430 <kalman_3gyro.constprop.0+0x3718>
 8010358:	eeb4 7aca 	vcmpe.f32	s14, s20
 801035c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010360:	f300 815a 	bgt.w	8010618 <kalman_3gyro.constprop.0+0x3900>
 8010364:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010368:	ee17 0a90 	vmov	r0, s15
 801036c:	f7f0 f8ec 	bl	8000548 <__aeabi_f2d>
 8010370:	ec41 0b10 	vmov	d0, r0, r1
 8010374:	f005 fb94 	bl	8015aa0 <ceil>
 8010378:	ec51 0b10 	vmov	r0, r1, d0
 801037c:	f7f0 fc14 	bl	8000ba8 <__aeabi_d2f>
 8010380:	ee07 0a90 	vmov	s15, r0
 8010384:	edc6 7a00 	vstr	s15, [r6]
 8010388:	ed97 7a01 	vldr	s14, [r7, #4]
 801038c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010390:	eef0 6ae7 	vabs.f32	s13, s15
 8010394:	eef4 6acb 	vcmpe.f32	s13, s22
 8010398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039c:	d51b      	bpl.n	80103d6 <kalman_3gyro.constprop.0+0x36be>
 801039e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a6:	f280 8120 	bge.w	80105ea <kalman_3gyro.constprop.0+0x38d2>
 80103aa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	f300 812e 	bgt.w	8010612 <kalman_3gyro.constprop.0+0x38fa>
 80103b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80103ba:	ee17 0a90 	vmov	r0, s15
 80103be:	f7f0 f8c3 	bl	8000548 <__aeabi_f2d>
 80103c2:	ec41 0b10 	vmov	d0, r0, r1
 80103c6:	f005 fb6b 	bl	8015aa0 <ceil>
 80103ca:	ec51 0b10 	vmov	r0, r1, d0
 80103ce:	f7f0 fbeb 	bl	8000ba8 <__aeabi_d2f>
 80103d2:	ee07 0a90 	vmov	s15, r0
 80103d6:	edc6 7a01 	vstr	s15, [r6, #4]
 80103da:	ed97 7a02 	vldr	s14, [r7, #8]
 80103de:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80103e2:	eef0 6ae7 	vabs.f32	s13, s15
 80103e6:	eef4 6acb 	vcmpe.f32	s13, s22
 80103ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ee:	d51a      	bpl.n	8010426 <kalman_3gyro.constprop.0+0x370e>
 80103f0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f8:	da3b      	bge.n	8010472 <kalman_3gyro.constprop.0+0x375a>
 80103fa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80103fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010402:	f300 8103 	bgt.w	801060c <kalman_3gyro.constprop.0+0x38f4>
 8010406:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801040a:	ee17 0a90 	vmov	r0, s15
 801040e:	f7f0 f89b 	bl	8000548 <__aeabi_f2d>
 8010412:	ec41 0b10 	vmov	d0, r0, r1
 8010416:	f005 fb43 	bl	8015aa0 <ceil>
 801041a:	ec51 0b10 	vmov	r0, r1, d0
 801041e:	f7f0 fbc3 	bl	8000ba8 <__aeabi_d2f>
 8010422:	ee07 0a90 	vmov	s15, r0
 8010426:	edc6 7a02 	vstr	s15, [r6, #8]
 801042a:	360c      	adds	r6, #12
 801042c:	42b4      	cmp	r4, r6
 801042e:	d035      	beq.n	801049c <kalman_3gyro.constprop.0+0x3784>
 8010430:	ed97 7a00 	vldr	s14, [r7]
 8010434:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010438:	eef0 6ae7 	vabs.f32	s13, s15
 801043c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010444:	d59e      	bpl.n	8010384 <kalman_3gyro.constprop.0+0x366c>
 8010446:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801044a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044e:	db83      	blt.n	8010358 <kalman_3gyro.constprop.0+0x3640>
 8010450:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010454:	ee17 0a90 	vmov	r0, s15
 8010458:	f7f0 f876 	bl	8000548 <__aeabi_f2d>
 801045c:	ec41 0b10 	vmov	d0, r0, r1
 8010460:	f005 fba2 	bl	8015ba8 <floor>
 8010464:	ec51 0b10 	vmov	r0, r1, d0
 8010468:	f7f0 fb9e 	bl	8000ba8 <__aeabi_d2f>
 801046c:	ee07 0a90 	vmov	s15, r0
 8010470:	e788      	b.n	8010384 <kalman_3gyro.constprop.0+0x366c>
 8010472:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010476:	360c      	adds	r6, #12
 8010478:	ee17 0a90 	vmov	r0, s15
 801047c:	f7f0 f864 	bl	8000548 <__aeabi_f2d>
 8010480:	ec41 0b10 	vmov	d0, r0, r1
 8010484:	f005 fb90 	bl	8015ba8 <floor>
 8010488:	ec51 0b10 	vmov	r0, r1, d0
 801048c:	f7f0 fb8c 	bl	8000ba8 <__aeabi_d2f>
 8010490:	ee07 0a90 	vmov	s15, r0
 8010494:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010498:	42b4      	cmp	r4, r6
 801049a:	d1c9      	bne.n	8010430 <kalman_3gyro.constprop.0+0x3718>
 801049c:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 80104a0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f000 80cf 	beq.w	8010648 <kalman_3gyro.constprop.0+0x3930>
 80104aa:	240c      	movs	r4, #12
 80104ac:	eddf ba7b 	vldr	s23, [pc, #492]	; 801069c <kalman_3gyro.constprop.0+0x3984>
 80104b0:	ed9f ba76 	vldr	s22, [pc, #472]	; 801068c <kalman_3gyro.constprop.0+0x3974>
 80104b4:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80106a0 <kalman_3gyro.constprop.0+0x3988>
 80104b8:	ed9f aa7a 	vldr	s20, [pc, #488]	; 80106a4 <kalman_3gyro.constprop.0+0x398c>
 80104bc:	eddf aa76 	vldr	s21, [pc, #472]	; 8010698 <kalman_3gyro.constprop.0+0x3980>
 80104c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80104c4:	fb14 7403 	smlabb	r4, r4, r3, r7
 80104c8:	463e      	mov	r6, r7
 80104ca:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80104ce:	e06b      	b.n	80105a8 <kalman_3gyro.constprop.0+0x3890>
 80104d0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d8:	f300 81a2 	bgt.w	8010820 <kalman_3gyro.constprop.0+0x3b08>
 80104dc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104e0:	ee17 0a90 	vmov	r0, s15
 80104e4:	f7f0 f830 	bl	8000548 <__aeabi_f2d>
 80104e8:	ec41 0b10 	vmov	d0, r0, r1
 80104ec:	f005 fad8 	bl	8015aa0 <ceil>
 80104f0:	ec51 0b10 	vmov	r0, r1, d0
 80104f4:	f7f0 fb58 	bl	8000ba8 <__aeabi_d2f>
 80104f8:	ee07 0a90 	vmov	s15, r0
 80104fc:	edc6 7a00 	vstr	s15, [r6]
 8010500:	ed99 7a04 	vldr	s14, [r9, #16]
 8010504:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010508:	eef0 6ae7 	vabs.f32	s13, s15
 801050c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010514:	d51b      	bpl.n	801054e <kalman_3gyro.constprop.0+0x3836>
 8010516:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051e:	f280 8168 	bge.w	80107f2 <kalman_3gyro.constprop.0+0x3ada>
 8010522:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052a:	f300 8176 	bgt.w	801081a <kalman_3gyro.constprop.0+0x3b02>
 801052e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010532:	ee17 0a90 	vmov	r0, s15
 8010536:	f7f0 f807 	bl	8000548 <__aeabi_f2d>
 801053a:	ec41 0b10 	vmov	d0, r0, r1
 801053e:	f005 faaf 	bl	8015aa0 <ceil>
 8010542:	ec51 0b10 	vmov	r0, r1, d0
 8010546:	f7f0 fb2f 	bl	8000ba8 <__aeabi_d2f>
 801054a:	ee07 0a90 	vmov	s15, r0
 801054e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010552:	ed99 7a05 	vldr	s14, [r9, #20]
 8010556:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801055a:	eef0 6ae7 	vabs.f32	s13, s15
 801055e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010566:	d51a      	bpl.n	801059e <kalman_3gyro.constprop.0+0x3886>
 8010568:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010570:	da55      	bge.n	801061e <kalman_3gyro.constprop.0+0x3906>
 8010572:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057a:	f300 814b 	bgt.w	8010814 <kalman_3gyro.constprop.0+0x3afc>
 801057e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010582:	ee17 0a90 	vmov	r0, s15
 8010586:	f7ef ffdf 	bl	8000548 <__aeabi_f2d>
 801058a:	ec41 0b10 	vmov	d0, r0, r1
 801058e:	f005 fa87 	bl	8015aa0 <ceil>
 8010592:	ec51 0b10 	vmov	r0, r1, d0
 8010596:	f7f0 fb07 	bl	8000ba8 <__aeabi_d2f>
 801059a:	ee07 0a90 	vmov	s15, r0
 801059e:	edc6 7a02 	vstr	s15, [r6, #8]
 80105a2:	360c      	adds	r6, #12
 80105a4:	42b4      	cmp	r4, r6
 80105a6:	d04f      	beq.n	8010648 <kalman_3gyro.constprop.0+0x3930>
 80105a8:	ed99 7a03 	vldr	s14, [r9, #12]
 80105ac:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80105b0:	eef0 6ae7 	vabs.f32	s13, s15
 80105b4:	eef4 6acb 	vcmpe.f32	s13, s22
 80105b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105bc:	d59e      	bpl.n	80104fc <kalman_3gyro.constprop.0+0x37e4>
 80105be:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80105c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c6:	db83      	blt.n	80104d0 <kalman_3gyro.constprop.0+0x37b8>
 80105c8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105cc:	ee17 0a90 	vmov	r0, s15
 80105d0:	f7ef ffba 	bl	8000548 <__aeabi_f2d>
 80105d4:	ec41 0b10 	vmov	d0, r0, r1
 80105d8:	f005 fae6 	bl	8015ba8 <floor>
 80105dc:	ec51 0b10 	vmov	r0, r1, d0
 80105e0:	f7f0 fae2 	bl	8000ba8 <__aeabi_d2f>
 80105e4:	ee07 0a90 	vmov	s15, r0
 80105e8:	e788      	b.n	80104fc <kalman_3gyro.constprop.0+0x37e4>
 80105ea:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105ee:	ee17 0a90 	vmov	r0, s15
 80105f2:	f7ef ffa9 	bl	8000548 <__aeabi_f2d>
 80105f6:	ec41 0b10 	vmov	d0, r0, r1
 80105fa:	f005 fad5 	bl	8015ba8 <floor>
 80105fe:	ec51 0b10 	vmov	r0, r1, d0
 8010602:	f7f0 fad1 	bl	8000ba8 <__aeabi_d2f>
 8010606:	ee07 0a90 	vmov	s15, r0
 801060a:	e6e4      	b.n	80103d6 <kalman_3gyro.constprop.0+0x36be>
 801060c:	eef0 7a6a 	vmov.f32	s15, s21
 8010610:	e709      	b.n	8010426 <kalman_3gyro.constprop.0+0x370e>
 8010612:	eef0 7a6a 	vmov.f32	s15, s21
 8010616:	e6de      	b.n	80103d6 <kalman_3gyro.constprop.0+0x36be>
 8010618:	eef0 7a6a 	vmov.f32	s15, s21
 801061c:	e6b2      	b.n	8010384 <kalman_3gyro.constprop.0+0x366c>
 801061e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010622:	360c      	adds	r6, #12
 8010624:	ee17 0a90 	vmov	r0, s15
 8010628:	f7ef ff8e 	bl	8000548 <__aeabi_f2d>
 801062c:	ec41 0b10 	vmov	d0, r0, r1
 8010630:	f005 faba 	bl	8015ba8 <floor>
 8010634:	ec51 0b10 	vmov	r0, r1, d0
 8010638:	f7f0 fab6 	bl	8000ba8 <__aeabi_d2f>
 801063c:	ee07 0a90 	vmov	s15, r0
 8010640:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010644:	42b4      	cmp	r4, r6
 8010646:	d1af      	bne.n	80105a8 <kalman_3gyro.constprop.0+0x3890>
 8010648:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 801064c:	2b00      	cmp	r3, #0
 801064e:	f43c ac7e 	beq.w	800cf4e <kalman_3gyro.constprop.0+0x236>
 8010652:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 8010656:	240c      	movs	r4, #12
 8010658:	eddf ba13 	vldr	s23, [pc, #76]	; 80106a8 <kalman_3gyro.constprop.0+0x3990>
 801065c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 801068c <kalman_3gyro.constprop.0+0x3974>
 8010660:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80106ac <kalman_3gyro.constprop.0+0x3994>
 8010664:	ed9f aa12 	vldr	s20, [pc, #72]	; 80106b0 <kalman_3gyro.constprop.0+0x3998>
 8010668:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010698 <kalman_3gyro.constprop.0+0x3980>
 801066c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010670:	960f      	str	r6, [sp, #60]	; 0x3c
 8010672:	fb14 6403 	smlabb	r4, r4, r3, r6
 8010676:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801067a:	e099      	b.n	80107b0 <kalman_3gyro.constprop.0+0x3a98>
 801067c:	3a7001e0 	.word	0x3a7001e0
 8010680:	3a8c0118 	.word	0x3a8c0118
 8010684:	3a000100 	.word	0x3a000100
 8010688:	44888777 	.word	0x44888777
 801068c:	4b000000 	.word	0x4b000000
 8010690:	39f001e1 	.word	0x39f001e1
 8010694:	b9f001e1 	.word	0xb9f001e1
 8010698:	80000000 	.word	0x80000000
 801069c:	44fffe00 	.word	0x44fffe00
 80106a0:	39800100 	.word	0x39800100
 80106a4:	b9800100 	.word	0xb9800100
 80106a8:	446a0ccd 	.word	0x446a0ccd
 80106ac:	3a0c0118 	.word	0x3a0c0118
 80106b0:	ba0c0118 	.word	0xba0c0118
 80106b4:	bf666666 	.word	0xbf666666
 80106b8:	3d072b02 	.word	0x3d072b02
 80106bc:	3cb43958 	.word	0x3cb43958
 80106c0:	3cf5c28f 	.word	0x3cf5c28f
 80106c4:	3d75c28f 	.word	0x3d75c28f
 80106c8:	3d23d70a 	.word	0x3d23d70a
 80106cc:	3ca3d70a 	.word	0x3ca3d70a
 80106d0:	3d4ccccd 	.word	0x3d4ccccd
 80106d4:	3d8f5c29 	.word	0x3d8f5c29
 80106d8:	eeb4 7aca 	vcmpe.f32	s14, s20
 80106dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e0:	f300 80c6 	bgt.w	8010870 <kalman_3gyro.constprop.0+0x3b58>
 80106e4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80106e8:	ee17 0a90 	vmov	r0, s15
 80106ec:	f7ef ff2c 	bl	8000548 <__aeabi_f2d>
 80106f0:	ec41 0b10 	vmov	d0, r0, r1
 80106f4:	f005 f9d4 	bl	8015aa0 <ceil>
 80106f8:	ec51 0b10 	vmov	r0, r1, d0
 80106fc:	f7f0 fa54 	bl	8000ba8 <__aeabi_d2f>
 8010700:	ee07 0a90 	vmov	s15, r0
 8010704:	edc6 7a00 	vstr	s15, [r6]
 8010708:	ed99 7a07 	vldr	s14, [r9, #28]
 801070c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010710:	eef0 6ae7 	vabs.f32	s13, s15
 8010714:	eef4 6acb 	vcmpe.f32	s13, s22
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	d51b      	bpl.n	8010756 <kalman_3gyro.constprop.0+0x3a3e>
 801071e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010726:	f280 808f 	bge.w	8010848 <kalman_3gyro.constprop.0+0x3b30>
 801072a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010732:	f300 809a 	bgt.w	801086a <kalman_3gyro.constprop.0+0x3b52>
 8010736:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801073a:	ee17 0a90 	vmov	r0, s15
 801073e:	f7ef ff03 	bl	8000548 <__aeabi_f2d>
 8010742:	ec41 0b10 	vmov	d0, r0, r1
 8010746:	f005 f9ab 	bl	8015aa0 <ceil>
 801074a:	ec51 0b10 	vmov	r0, r1, d0
 801074e:	f7f0 fa2b 	bl	8000ba8 <__aeabi_d2f>
 8010752:	ee07 0a90 	vmov	s15, r0
 8010756:	edc6 7a01 	vstr	s15, [r6, #4]
 801075a:	ed99 7a08 	vldr	s14, [r9, #32]
 801075e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010762:	eef0 6ae7 	vabs.f32	s13, s15
 8010766:	eef4 6acb 	vcmpe.f32	s13, s22
 801076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076e:	d519      	bpl.n	80107a4 <kalman_3gyro.constprop.0+0x3a8c>
 8010770:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010778:	da55      	bge.n	8010826 <kalman_3gyro.constprop.0+0x3b0e>
 801077a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	dc78      	bgt.n	8010876 <kalman_3gyro.constprop.0+0x3b5e>
 8010784:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010788:	ee17 0a90 	vmov	r0, s15
 801078c:	f7ef fedc 	bl	8000548 <__aeabi_f2d>
 8010790:	ec41 0b10 	vmov	d0, r0, r1
 8010794:	f005 f984 	bl	8015aa0 <ceil>
 8010798:	ec51 0b10 	vmov	r0, r1, d0
 801079c:	f7f0 fa04 	bl	8000ba8 <__aeabi_d2f>
 80107a0:	ee07 0a90 	vmov	s15, r0
 80107a4:	edc6 7a02 	vstr	s15, [r6, #8]
 80107a8:	360c      	adds	r6, #12
 80107aa:	42b4      	cmp	r4, r6
 80107ac:	f43c abd2 	beq.w	800cf54 <kalman_3gyro.constprop.0+0x23c>
 80107b0:	ed99 7a06 	vldr	s14, [r9, #24]
 80107b4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80107b8:	eef0 6ae7 	vabs.f32	s13, s15
 80107bc:	eef4 6acb 	vcmpe.f32	s13, s22
 80107c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c4:	d59e      	bpl.n	8010704 <kalman_3gyro.constprop.0+0x39ec>
 80107c6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80107ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ce:	db83      	blt.n	80106d8 <kalman_3gyro.constprop.0+0x39c0>
 80107d0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107d4:	ee17 0a90 	vmov	r0, s15
 80107d8:	f7ef feb6 	bl	8000548 <__aeabi_f2d>
 80107dc:	ec41 0b10 	vmov	d0, r0, r1
 80107e0:	f005 f9e2 	bl	8015ba8 <floor>
 80107e4:	ec51 0b10 	vmov	r0, r1, d0
 80107e8:	f7f0 f9de 	bl	8000ba8 <__aeabi_d2f>
 80107ec:	ee07 0a90 	vmov	s15, r0
 80107f0:	e788      	b.n	8010704 <kalman_3gyro.constprop.0+0x39ec>
 80107f2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107f6:	ee17 0a90 	vmov	r0, s15
 80107fa:	f7ef fea5 	bl	8000548 <__aeabi_f2d>
 80107fe:	ec41 0b10 	vmov	d0, r0, r1
 8010802:	f005 f9d1 	bl	8015ba8 <floor>
 8010806:	ec51 0b10 	vmov	r0, r1, d0
 801080a:	f7f0 f9cd 	bl	8000ba8 <__aeabi_d2f>
 801080e:	ee07 0a90 	vmov	s15, r0
 8010812:	e69c      	b.n	801054e <kalman_3gyro.constprop.0+0x3836>
 8010814:	eef0 7a6a 	vmov.f32	s15, s21
 8010818:	e6c1      	b.n	801059e <kalman_3gyro.constprop.0+0x3886>
 801081a:	eef0 7a6a 	vmov.f32	s15, s21
 801081e:	e696      	b.n	801054e <kalman_3gyro.constprop.0+0x3836>
 8010820:	eef0 7a6a 	vmov.f32	s15, s21
 8010824:	e66a      	b.n	80104fc <kalman_3gyro.constprop.0+0x37e4>
 8010826:	ee77 7a89 	vadd.f32	s15, s15, s18
 801082a:	ee17 0a90 	vmov	r0, s15
 801082e:	f7ef fe8b 	bl	8000548 <__aeabi_f2d>
 8010832:	ec41 0b10 	vmov	d0, r0, r1
 8010836:	f005 f9b7 	bl	8015ba8 <floor>
 801083a:	ec51 0b10 	vmov	r0, r1, d0
 801083e:	f7f0 f9b3 	bl	8000ba8 <__aeabi_d2f>
 8010842:	ee07 0a90 	vmov	s15, r0
 8010846:	e7ad      	b.n	80107a4 <kalman_3gyro.constprop.0+0x3a8c>
 8010848:	ee77 7a89 	vadd.f32	s15, s15, s18
 801084c:	ee17 0a90 	vmov	r0, s15
 8010850:	f7ef fe7a 	bl	8000548 <__aeabi_f2d>
 8010854:	ec41 0b10 	vmov	d0, r0, r1
 8010858:	f005 f9a6 	bl	8015ba8 <floor>
 801085c:	ec51 0b10 	vmov	r0, r1, d0
 8010860:	f7f0 f9a2 	bl	8000ba8 <__aeabi_d2f>
 8010864:	ee07 0a90 	vmov	s15, r0
 8010868:	e775      	b.n	8010756 <kalman_3gyro.constprop.0+0x3a3e>
 801086a:	eef0 7a6a 	vmov.f32	s15, s21
 801086e:	e772      	b.n	8010756 <kalman_3gyro.constprop.0+0x3a3e>
 8010870:	eef0 7a6a 	vmov.f32	s15, s21
 8010874:	e746      	b.n	8010704 <kalman_3gyro.constprop.0+0x39ec>
 8010876:	eef0 7a6a 	vmov.f32	s15, s21
 801087a:	e793      	b.n	80107a4 <kalman_3gyro.constprop.0+0x3a8c>
 801087c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801087e:	7813      	ldrb	r3, [r2, #0]
 8010880:	ed92 7a03 	vldr	s14, [r2, #12]
 8010884:	edd2 6a01 	vldr	s13, [r2, #4]
 8010888:	edd2 7a02 	vldr	s15, [r2, #8]
 801088c:	2200      	movs	r2, #0
 801088e:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8010892:	2b00      	cmp	r3, #0
 8010894:	f040 813b 	bne.w	8010b0e <kalman_3gyro.constprop.0+0x3df6>
 8010898:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80106b4 <kalman_3gyro.constprop.0+0x399c>
 801089c:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80108a0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80108a4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80108a8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80108ac:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80108b0:	2100      	movs	r1, #0
 80108b2:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80108b6:	f007 f861 	bl	801797c <memset>
 80108ba:	eddb 7a02 	vldr	s15, [fp, #8]
 80108be:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 80106b8 <kalman_3gyro.constprop.0+0x39a0>
 80108c2:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 80106bc <kalman_3gyro.constprop.0+0x39a4>
 80108c6:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 80106c0 <kalman_3gyro.constprop.0+0x39a8>
 80108ca:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 80106c4 <kalman_3gyro.constprop.0+0x39ac>
 80108ce:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 80106c8 <kalman_3gyro.constprop.0+0x39b0>
 80108d2:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80106cc <kalman_3gyro.constprop.0+0x39b4>
 80108d6:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 80106d0 <kalman_3gyro.constprop.0+0x39b8>
 80108da:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 80106d4 <kalman_3gyro.constprop.0+0x39bc>
 80108de:	4bd9      	ldr	r3, [pc, #868]	; (8010c44 <kalman_3gyro.constprop.0+0x3f2c>)
 80108e0:	49d9      	ldr	r1, [pc, #868]	; (8010c48 <kalman_3gyro.constprop.0+0x3f30>)
 80108e2:	4dda      	ldr	r5, [pc, #872]	; (8010c4c <kalman_3gyro.constprop.0+0x3f34>)
 80108e4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010c50 <kalman_3gyro.constprop.0+0x3f38>
 80108e8:	48da      	ldr	r0, [pc, #872]	; (8010c54 <kalman_3gyro.constprop.0+0x3f3c>)
 80108ea:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 80108ee:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80108f2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80108f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80108fa:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80108fe:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010c58 <kalman_3gyro.constprop.0+0x3f40>
 8010902:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 8010906:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801090a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 801090e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 8010912:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010c5c <kalman_3gyro.constprop.0+0x3f44>
 8010916:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010c60 <kalman_3gyro.constprop.0+0x3f48>
 801091a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 801091e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010922:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010926:	ee27 5a85 	vmul.f32	s10, s15, s10
 801092a:	ee27 4a84 	vmul.f32	s8, s15, s8
 801092e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010932:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010936:	2200      	movs	r2, #0
 8010938:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 801093c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010940:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8010944:	4cc7      	ldr	r4, [pc, #796]	; (8010c64 <kalman_3gyro.constprop.0+0x3f4c>)
 8010946:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 801094a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 801094e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010c68 <kalman_3gyro.constprop.0+0x3f50>
 8010952:	49c6      	ldr	r1, [pc, #792]	; (8010c6c <kalman_3gyro.constprop.0+0x3f54>)
 8010954:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010958:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801095c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010c70 <kalman_3gyro.constprop.0+0x3f58>
 8010960:	4bc4      	ldr	r3, [pc, #784]	; (8010c74 <kalman_3gyro.constprop.0+0x3f5c>)
 8010962:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8010966:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 801096a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 801096e:	4ac2      	ldr	r2, [pc, #776]	; (8010c78 <kalman_3gyro.constprop.0+0x3f60>)
 8010970:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8010974:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010978:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 801097c:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010980:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010984:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010988:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801098c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010990:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010994:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010998:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801099c:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80109a0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80109a4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80109a8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80109ac:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80109b0:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80109b4:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80109b8:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80109bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80109c0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80109c4:	4cad      	ldr	r4, [pc, #692]	; (8010c7c <kalman_3gyro.constprop.0+0x3f64>)
 80109c6:	48ae      	ldr	r0, [pc, #696]	; (8010c80 <kalman_3gyro.constprop.0+0x3f68>)
 80109c8:	49ae      	ldr	r1, [pc, #696]	; (8010c84 <kalman_3gyro.constprop.0+0x3f6c>)
 80109ca:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 80109ce:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 80109d2:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 80109d6:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 80109da:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 80109de:	ee27 6a83 	vmul.f32	s12, s15, s6
 80109e2:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 80109e6:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 80109ea:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80109ee:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80109f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80109f6:	4aa4      	ldr	r2, [pc, #656]	; (8010c88 <kalman_3gyro.constprop.0+0x3f70>)
 80109f8:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80109fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010a00:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010a04:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010a08:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8010a0c:	4e9f      	ldr	r6, [pc, #636]	; (8010c8c <kalman_3gyro.constprop.0+0x3f74>)
 8010a0e:	4da0      	ldr	r5, [pc, #640]	; (8010c90 <kalman_3gyro.constprop.0+0x3f78>)
 8010a10:	49a0      	ldr	r1, [pc, #640]	; (8010c94 <kalman_3gyro.constprop.0+0x3f7c>)
 8010a12:	4aa1      	ldr	r2, [pc, #644]	; (8010c98 <kalman_3gyro.constprop.0+0x3f80>)
 8010a14:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010a18:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8010a1c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010a20:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010a24:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010a28:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 8010a2c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010a30:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010a34:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010a38:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 8010a3c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010a40:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010a44:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010a48:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8010a4c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010a50:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010a54:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010a58:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 8010a5c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010a60:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010a64:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010a68:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8010a6c:	b973      	cbnz	r3, 8010a8c <kalman_3gyro.constprop.0+0x3d74>
 8010a6e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010a72:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010a76:	6811      	ldr	r1, [r2, #0]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8010a7e:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010a88:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010a92:	f7fc ba4b 	b.w	800cf2c <kalman_3gyro.constprop.0+0x214>
 8010a96:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010a9a:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8010a9e:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010aa2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010aa6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010aaa:	f7fd bd5b 	b.w	800e564 <kalman_3gyro.constprop.0+0x184c>
 8010aae:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010c9c <kalman_3gyro.constprop.0+0x3f84>
 8010ab2:	f7fc ba9e 	b.w	800cff2 <kalman_3gyro.constprop.0+0x2da>
 8010ab6:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8010aba:	f7fd bd7b 	b.w	800e5b4 <kalman_3gyro.constprop.0+0x189c>
 8010abe:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010ca0 <kalman_3gyro.constprop.0+0x3f88>
 8010ac2:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010ca4 <kalman_3gyro.constprop.0+0x3f8c>
 8010ac6:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010ca8 <kalman_3gyro.constprop.0+0x3f90>
 8010aca:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010cac <kalman_3gyro.constprop.0+0x3f94>
 8010ace:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010cb0 <kalman_3gyro.constprop.0+0x3f98>
 8010ad2:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010ad6:	f7fd bf9d 	b.w	800ea14 <kalman_3gyro.constprop.0+0x1cfc>
 8010ada:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8010ade:	2a00      	cmp	r2, #0
 8010ae0:	f340 8181 	ble.w	8010de6 <kalman_3gyro.constprop.0+0x40ce>
 8010ae4:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010ae8:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8010aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af4:	f340 8177 	ble.w	8010de6 <kalman_3gyro.constprop.0+0x40ce>
 8010af8:	3a01      	subs	r2, #1
 8010afa:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8010afe:	f7fe b880 	b.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 8010b02:	eeb0 aa69 	vmov.f32	s20, s19
 8010b06:	eeb0 ba69 	vmov.f32	s22, s19
 8010b0a:	f7ff b9de 	b.w	800feca <kalman_3gyro.constprop.0+0x31b2>
 8010b0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010b12:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010b16:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010b1a:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b22:	e6bb      	b.n	801089c <kalman_3gyro.constprop.0+0x3b84>
 8010b24:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010b28:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8010b2c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010b30:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010b34:	f7fe b802 	b.w	800eb3c <kalman_3gyro.constprop.0+0x1e24>
 8010b38:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8010b3c:	f7fd bae6 	b.w	800e10c <kalman_3gyro.constprop.0+0x13f4>
 8010b40:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010b44:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010b48:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010b4c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010b50:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010b54:	f7fd bd06 	b.w	800e564 <kalman_3gyro.constprop.0+0x184c>
 8010b58:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8010b5c:	ee17 0a90 	vmov	r0, s15
 8010b60:	f7ef fcf2 	bl	8000548 <__aeabi_f2d>
 8010b64:	ec41 0b10 	vmov	d0, r0, r1
 8010b68:	f004 ff9a 	bl	8015aa0 <ceil>
 8010b6c:	ec51 0b10 	vmov	r0, r1, d0
 8010b70:	f7f0 f81a 	bl	8000ba8 <__aeabi_d2f>
 8010b74:	ee0e 0a10 	vmov	s28, r0
 8010b78:	f7fc bc70 	b.w	800d45c <kalman_3gyro.constprop.0+0x744>
 8010b7c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010b80:	ee17 0a90 	vmov	r0, s15
 8010b84:	f7ef fce0 	bl	8000548 <__aeabi_f2d>
 8010b88:	ec41 0b10 	vmov	d0, r0, r1
 8010b8c:	f004 ff88 	bl	8015aa0 <ceil>
 8010b90:	ec51 0b10 	vmov	r0, r1, d0
 8010b94:	f7f0 f808 	bl	8000ba8 <__aeabi_d2f>
 8010b98:	ee0d 0a90 	vmov	s27, r0
 8010b9c:	f7fc bc81 	b.w	800d4a2 <kalman_3gyro.constprop.0+0x78a>
 8010ba0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010ba4:	ee17 0a90 	vmov	r0, s15
 8010ba8:	f7ef fcce 	bl	8000548 <__aeabi_f2d>
 8010bac:	ec41 0b10 	vmov	d0, r0, r1
 8010bb0:	f004 ff76 	bl	8015aa0 <ceil>
 8010bb4:	ec51 0b10 	vmov	r0, r1, d0
 8010bb8:	f7ef fff6 	bl	8000ba8 <__aeabi_d2f>
 8010bbc:	ee0d 0a90 	vmov	s27, r0
 8010bc0:	f7fc bcd5 	b.w	800d56e <kalman_3gyro.constprop.0+0x856>
 8010bc4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010bc8:	ee17 0a90 	vmov	r0, s15
 8010bcc:	f7ef fcbc 	bl	8000548 <__aeabi_f2d>
 8010bd0:	ec41 0b10 	vmov	d0, r0, r1
 8010bd4:	f004 ff64 	bl	8015aa0 <ceil>
 8010bd8:	ec51 0b10 	vmov	r0, r1, d0
 8010bdc:	f7ef ffe4 	bl	8000ba8 <__aeabi_d2f>
 8010be0:	ee0b 0a10 	vmov	s22, r0
 8010be4:	f7fc bce6 	b.w	800d5b4 <kalman_3gyro.constprop.0+0x89c>
 8010be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bec:	f6fd addf 	blt.w	800e7ae <kalman_3gyro.constprop.0+0x1a96>
 8010bf0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010ca8 <kalman_3gyro.constprop.0+0x3f90>
 8010bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	f140 8283 	bpl.w	8011106 <kalman_3gyro.constprop.0+0x43ee>
 8010c00:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010cb4 <kalman_3gyro.constprop.0+0x3f9c>
 8010c04:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010cb8 <kalman_3gyro.constprop.0+0x3fa0>
 8010c08:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010cbc <kalman_3gyro.constprop.0+0x3fa4>
 8010c0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c14:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010c18:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010c1c:	f7fd bdd1 	b.w	800e7c2 <kalman_3gyro.constprop.0+0x1aaa>
 8010c20:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010c24:	ee17 0a90 	vmov	r0, s15
 8010c28:	f7ef fc8e 	bl	8000548 <__aeabi_f2d>
 8010c2c:	ec41 0b10 	vmov	d0, r0, r1
 8010c30:	f004 ff36 	bl	8015aa0 <ceil>
 8010c34:	ec51 0b10 	vmov	r0, r1, d0
 8010c38:	f7ef ffb6 	bl	8000ba8 <__aeabi_d2f>
 8010c3c:	ee08 0a10 	vmov	s16, r0
 8010c40:	f7fc bbe9 	b.w	800d416 <kalman_3gyro.constprop.0+0x6fe>
 8010c44:	3eb33333 	.word	0x3eb33333
 8010c48:	3ee66666 	.word	0x3ee66666
 8010c4c:	3f866666 	.word	0x3f866666
 8010c50:	3ecccccd 	.word	0x3ecccccd
 8010c54:	3f933333 	.word	0x3f933333
 8010c58:	3dcccccd 	.word	0x3dcccccd
 8010c5c:	3e4ccccd 	.word	0x3e4ccccd
 8010c60:	3e99999a 	.word	0x3e99999a
 8010c64:	3f8ccccd 	.word	0x3f8ccccd
 8010c68:	3f4ccccd 	.word	0x3f4ccccd
 8010c6c:	3ebd70a4 	.word	0x3ebd70a4
 8010c70:	3f666666 	.word	0x3f666666
 8010c74:	40a00000 	.word	0x40a00000
 8010c78:	3f99999a 	.word	0x3f99999a
 8010c7c:	3f19999a 	.word	0x3f19999a
 8010c80:	3fb9999a 	.word	0x3fb9999a
 8010c84:	3fe66666 	.word	0x3fe66666
 8010c88:	3f333333 	.word	0x3f333333
 8010c8c:	3fa66666 	.word	0x3fa66666
 8010c90:	3fcccccd 	.word	0x3fcccccd
 8010c94:	40200000 	.word	0x40200000
 8010c98:	40400000 	.word	0x40400000
 8010c9c:	bf666666 	.word	0xbf666666
 8010ca0:	391d4951 	.word	0x391d4951
 8010ca4:	383cbe62 	.word	0x383cbe62
 8010ca8:	3c75c28f 	.word	0x3c75c28f
 8010cac:	469c3e00 	.word	0x469c3e00
 8010cb0:	43168000 	.word	0x43168000
 8010cb4:	3c23d70a 	.word	0x3c23d70a
 8010cb8:	3f19999a 	.word	0x3f19999a
 8010cbc:	43480000 	.word	0x43480000
 8010cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cc4:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010cc8:	eef0 7aca 	vabs.f32	s15, s20
 8010ccc:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010cd0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd8:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010cdc:	bfb8      	it	lt
 8010cde:	eef0 7a66 	vmovlt.f32	s15, s13
 8010ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010cea:	f77d af5b 	ble.w	800eba4 <kalman_3gyro.constprop.0+0x1e8c>
 8010cee:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010cf2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010cf6:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	f77d af51 	ble.w	800eba4 <kalman_3gyro.constprop.0+0x1e8c>
 8010d02:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010d06:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010d0a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010d0e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010d12:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010d16:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010d1a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010d1e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010d22:	f7fd bf3f 	b.w	800eba4 <kalman_3gyro.constprop.0+0x1e8c>
 8010d26:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010d2a:	2a01      	cmp	r2, #1
 8010d2c:	d002      	beq.n	8010d34 <kalman_3gyro.constprop.0+0x401c>
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	f47d af1e 	bne.w	800eb70 <kalman_3gyro.constprop.0+0x1e58>
 8010d34:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010d38:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d40:	bfa8      	it	ge
 8010d42:	eeb0 3a67 	vmovge.f32	s6, s15
 8010d46:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010d4a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010d4e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010d52:	f7fd bf0d 	b.w	800eb70 <kalman_3gyro.constprop.0+0x1e58>
 8010d56:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010d5a:	ee17 0a90 	vmov	r0, s15
 8010d5e:	f7ef fbf3 	bl	8000548 <__aeabi_f2d>
 8010d62:	ec41 0b10 	vmov	d0, r0, r1
 8010d66:	f004 fe9b 	bl	8015aa0 <ceil>
 8010d6a:	ec51 0b10 	vmov	r0, r1, d0
 8010d6e:	f7ef ff1b 	bl	8000ba8 <__aeabi_d2f>
 8010d72:	ee08 0a10 	vmov	s16, r0
 8010d76:	f7fc bc40 	b.w	800d5fa <kalman_3gyro.constprop.0+0x8e2>
 8010d7a:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010d7e:	ee17 0a90 	vmov	r0, s15
 8010d82:	f7ef fbe1 	bl	8000548 <__aeabi_f2d>
 8010d86:	ec41 0b10 	vmov	d0, r0, r1
 8010d8a:	f004 fe89 	bl	8015aa0 <ceil>
 8010d8e:	ec51 0b10 	vmov	r0, r1, d0
 8010d92:	f7ef ff09 	bl	8000ba8 <__aeabi_d2f>
 8010d96:	ee0b 0a10 	vmov	s22, r0
 8010d9a:	f7fc bcb7 	b.w	800d70c <kalman_3gyro.constprop.0+0x9f4>
 8010d9e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010da2:	ee17 0a90 	vmov	r0, s15
 8010da6:	f7ef fbcf 	bl	8000548 <__aeabi_f2d>
 8010daa:	ec41 0b10 	vmov	d0, r0, r1
 8010dae:	f004 fe77 	bl	8015aa0 <ceil>
 8010db2:	ec51 0b10 	vmov	r0, r1, d0
 8010db6:	f7ef fef7 	bl	8000ba8 <__aeabi_d2f>
 8010dba:	ee08 0a10 	vmov	s16, r0
 8010dbe:	f7fc bcc8 	b.w	800d752 <kalman_3gyro.constprop.0+0xa3a>
 8010dc2:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010dc6:	ee17 0a90 	vmov	r0, s15
 8010dca:	f7ef fbbd 	bl	8000548 <__aeabi_f2d>
 8010dce:	ec41 0b10 	vmov	d0, r0, r1
 8010dd2:	f004 fe65 	bl	8015aa0 <ceil>
 8010dd6:	ec51 0b10 	vmov	r0, r1, d0
 8010dda:	f7ef fee5 	bl	8000ba8 <__aeabi_d2f>
 8010dde:	ee0d 0a90 	vmov	s27, r0
 8010de2:	f7fc bc70 	b.w	800d6c6 <kalman_3gyro.constprop.0+0x9ae>
 8010de6:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010dea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010df2:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfa:	f77d af02 	ble.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 8010dfe:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e06:	eef4 7aec 	vcmpe.f32	s15, s25
 8010e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0e:	f77d aef8 	ble.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 8010e12:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010e16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010e1a:	eef4 7acd 	vcmpe.f32	s15, s26
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	f140 8711 	bpl.w	8011c48 <kalman_3gyro.constprop.0+0x4f30>
 8010e26:	3303      	adds	r3, #3
 8010e28:	f7ff ba35 	b.w	8010296 <kalman_3gyro.constprop.0+0x357e>
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010e32:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010e36:	9181      	str	r1, [sp, #516]	; 0x204
 8010e38:	9282      	str	r2, [sp, #520]	; 0x208
 8010e3a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010e3e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010e40:	2200      	movs	r2, #0
 8010e42:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010e46:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010e4a:	f7fe baa8 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8010e4e:	a936      	add	r1, sp, #216	; 0xd8
 8010e50:	a854      	add	r0, sp, #336	; 0x150
 8010e52:	f7fa ff85 	bl	800bd60 <b_dcm2q>
 8010e56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010e60:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010e64:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010e68:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010e6c:	f006 fd86 	bl	801797c <memset>
 8010e70:	4bd8      	ldr	r3, [pc, #864]	; (80111d4 <kalman_3gyro.constprop.0+0x44bc>)
 8010e72:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010e76:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010e7a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010e7e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010e82:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010e86:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010e8a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010e8e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010e92:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010e96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010e98:	781a      	ldrb	r2, [r3, #0]
 8010e9a:	ee07 2a90 	vmov	s15, r2
 8010e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eaa:	f040 84dc 	bne.w	8011866 <kalman_3gyro.constprop.0+0x4b4e>
 8010eae:	eeb0 7a4c 	vmov.f32	s14, s24
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	f88b 3000 	strb.w	r3, [fp]
 8010eb8:	eddb ea02 	vldr	s29, [fp, #8]
 8010ebc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	f7fd bb8d 	b.w	800e5e0 <kalman_3gyro.constprop.0+0x18c8>
 8010ec6:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010eca:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed2:	f340 85da 	ble.w	8011a8a <kalman_3gyro.constprop.0+0x4d72>
 8010ed6:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010eda:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010ede:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010ee2:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010ee6:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010eea:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010eee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010ef2:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010ef6:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010efa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	f63d a94b 	bhi.w	800e19c <kalman_3gyro.constprop.0+0x1484>
 8010f06:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010f0a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f12:	f340 84bc 	ble.w	801188e <kalman_3gyro.constprop.0+0x4b76>
 8010f16:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010f1a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010f1e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f22:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f26:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f2a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f2e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f32:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f36:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010f3a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	f63d a94b 	bhi.w	800e1dc <kalman_3gyro.constprop.0+0x14c4>
 8010f46:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010f4a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	f340 84a8 	ble.w	80118a6 <kalman_3gyro.constprop.0+0x4b8e>
 8010f56:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010f5a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010f5e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f62:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f66:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f6a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f6e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f72:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f76:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010f7a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f82:	f63d a94b 	bhi.w	800e21c <kalman_3gyro.constprop.0+0x1504>
 8010f86:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010f8a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f92:	f340 8490 	ble.w	80118b6 <kalman_3gyro.constprop.0+0x4b9e>
 8010f96:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010f9a:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010f9e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fa2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fa6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010faa:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010fae:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010fb2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010fb6:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010fba:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc2:	f6fd a94b 	blt.w	800e25c <kalman_3gyro.constprop.0+0x1544>
 8010fc6:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010fca:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd2:	f57d a94b 	bpl.w	800e26c <kalman_3gyro.constprop.0+0x1554>
 8010fd6:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010fda:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010fde:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fe2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fe6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010fea:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010fee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010ff2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ff6:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010ffa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	f6fd a94b 	blt.w	800e29c <kalman_3gyro.constprop.0+0x1584>
 8011006:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100e:	f57d a945 	bpl.w	800e29c <kalman_3gyro.constprop.0+0x1584>
 8011012:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8011016:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 801101a:	ee78 3a47 	vsub.f32	s7, s16, s14
 801101e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8011022:	ee35 7a47 	vsub.f32	s14, s10, s14
 8011026:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801102a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 801102e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8011032:	f7fd b933 	b.w	800e29c <kalman_3gyro.constprop.0+0x1584>
 8011036:	eddf 6a68 	vldr	s13, [pc, #416]	; 80111d8 <kalman_3gyro.constprop.0+0x44c0>
 801103a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011042:	f57d ac56 	bpl.w	800e8f2 <kalman_3gyro.constprop.0+0x1bda>
 8011046:	eddf 3a65 	vldr	s7, [pc, #404]	; 80111dc <kalman_3gyro.constprop.0+0x44c4>
 801104a:	eddf 2a65 	vldr	s5, [pc, #404]	; 80111e0 <kalman_3gyro.constprop.0+0x44c8>
 801104e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 80111e4 <kalman_3gyro.constprop.0+0x44cc>
 8011052:	eddf 6a65 	vldr	s13, [pc, #404]	; 80111e8 <kalman_3gyro.constprop.0+0x44d0>
 8011056:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801105a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801105e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011062:	eeb0 ca66 	vmov.f32	s24, s13
 8011066:	eddf 6a61 	vldr	s13, [pc, #388]	; 80111ec <kalman_3gyro.constprop.0+0x44d4>
 801106a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011072:	f6fd ac56 	blt.w	800e922 <kalman_3gyro.constprop.0+0x1c0a>
 8011076:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80111f0 <kalman_3gyro.constprop.0+0x44d8>
 801107a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011082:	f57d ac56 	bpl.w	800e932 <kalman_3gyro.constprop.0+0x1c1a>
 8011086:	eddf 3a59 	vldr	s7, [pc, #356]	; 80111ec <kalman_3gyro.constprop.0+0x44d4>
 801108a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801108e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8011092:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8011096:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 801109a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801109e:	eee3 6a83 	vfma.f32	s13, s7, s6
 80110a2:	eeb0 ca66 	vmov.f32	s24, s13
 80110a6:	eddf 6a53 	vldr	s13, [pc, #332]	; 80111f4 <kalman_3gyro.constprop.0+0x44dc>
 80110aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	f6fd ac56 	blt.w	800e962 <kalman_3gyro.constprop.0+0x1c4a>
 80110b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80110ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	f57d ac56 	bpl.w	800e972 <kalman_3gyro.constprop.0+0x1c5a>
 80110c6:	eddf 3a4b 	vldr	s7, [pc, #300]	; 80111f4 <kalman_3gyro.constprop.0+0x44dc>
 80110ca:	eddf 2a4b 	vldr	s5, [pc, #300]	; 80111f8 <kalman_3gyro.constprop.0+0x44e0>
 80110ce:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 80111fc <kalman_3gyro.constprop.0+0x44e4>
 80110d2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80110d6:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 80110da:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80110de:	eee3 6a83 	vfma.f32	s13, s7, s6
 80110e2:	eeb0 ca66 	vmov.f32	s24, s13
 80110e6:	e4f4      	b.n	8010ad2 <kalman_3gyro.constprop.0+0x3dba>
 80110e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ec:	f57d abe1 	bpl.w	800e8b2 <kalman_3gyro.constprop.0+0x1b9a>
 80110f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80111dc <kalman_3gyro.constprop.0+0x44c4>
 80110f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fc:	da9b      	bge.n	8011036 <kalman_3gyro.constprop.0+0x431e>
 80110fe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011102:	f7fd bbee 	b.w	800e8e2 <kalman_3gyro.constprop.0+0x1bca>
 8011106:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80111d8 <kalman_3gyro.constprop.0+0x44c0>
 801110a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011112:	f57d ab5e 	bpl.w	800e7d2 <kalman_3gyro.constprop.0+0x1aba>
 8011116:	eddf 6a31 	vldr	s13, [pc, #196]	; 80111dc <kalman_3gyro.constprop.0+0x44c4>
 801111a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8011200 <kalman_3gyro.constprop.0+0x44e8>
 801111e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80111e4 <kalman_3gyro.constprop.0+0x44cc>
 8011122:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011204 <kalman_3gyro.constprop.0+0x44ec>
 8011126:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801112a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801112e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011132:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80111ec <kalman_3gyro.constprop.0+0x44d4>
 8011136:	eef4 7ae6 	vcmpe.f32	s15, s13
 801113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113e:	f6fd ab5e 	blt.w	800e7fe <kalman_3gyro.constprop.0+0x1ae6>
 8011142:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80111f0 <kalman_3gyro.constprop.0+0x44d8>
 8011146:	eef4 7ac7 	vcmpe.f32	s15, s14
 801114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114e:	f57d ab5e 	bpl.w	800e80e <kalman_3gyro.constprop.0+0x1af6>
 8011152:	eddf 6a26 	vldr	s13, [pc, #152]	; 80111ec <kalman_3gyro.constprop.0+0x44d4>
 8011156:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801115a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801115e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011162:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8011166:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801116a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801116e:	eddf 6a21 	vldr	s13, [pc, #132]	; 80111f4 <kalman_3gyro.constprop.0+0x44dc>
 8011172:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117a:	f6fd ab5e 	blt.w	800e83a <kalman_3gyro.constprop.0+0x1b22>
 801117e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	f57d ab5d 	bpl.w	800e848 <kalman_3gyro.constprop.0+0x1b30>
 801118e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80111f4 <kalman_3gyro.constprop.0+0x44dc>
 8011192:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8011208 <kalman_3gyro.constprop.0+0x44f0>
 8011196:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80111fc <kalman_3gyro.constprop.0+0x44e4>
 801119a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801120c <kalman_3gyro.constprop.0+0x44f4>
 801119e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80111a2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80111a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80111aa:	f7fd bb5b 	b.w	800e864 <kalman_3gyro.constprop.0+0x1b4c>
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	e63d      	b.n	8010e2e <kalman_3gyro.constprop.0+0x4116>
 80111b2:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 80111b6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111be:	da2b      	bge.n	8011218 <kalman_3gyro.constprop.0+0x4500>
 80111c0:	ed9f ba13 	vldr	s22, [pc, #76]	; 8011210 <kalman_3gyro.constprop.0+0x44f8>
 80111c4:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 80111c8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d0:	db3a      	blt.n	8011248 <kalman_3gyro.constprop.0+0x4530>
 80111d2:	e386      	b.n	80118e2 <kalman_3gyro.constprop.0+0x4bca>
 80111d4:	40a00000 	.word	0x40a00000
 80111d8:	3cf5c28f 	.word	0x3cf5c28f
 80111dc:	3c75c28f 	.word	0x3c75c28f
 80111e0:	3dccccd0 	.word	0x3dccccd0
 80111e4:	42855556 	.word	0x42855556
 80111e8:	3f866666 	.word	0x3f866666
 80111ec:	3d4ccccd 	.word	0x3d4ccccd
 80111f0:	3dcccccd 	.word	0x3dcccccd
 80111f4:	3e4ccccd 	.word	0x3e4ccccd
 80111f8:	42200000 	.word	0x42200000
 80111fc:	40555555 	.word	0x40555555
 8011200:	3ecccccc 	.word	0x3ecccccc
 8011204:	3fcccccd 	.word	0x3fcccccd
 8011208:	43f00000 	.word	0x43f00000
 801120c:	42ee0000 	.word	0x42ee0000
 8011210:	00000000 	.word	0x00000000
 8011214:	eeb0 7a64 	vmov.f32	s14, s9
 8011218:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 801121c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011224:	f140 8359 	bpl.w	80118da <kalman_3gyro.constprop.0+0x4bc2>
 8011228:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 801122c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8011230:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011234:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011238:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801123c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011240:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011244:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011248:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 801124c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011254:	f2c0 835d 	blt.w	8011912 <kalman_3gyro.constprop.0+0x4bfa>
 8011258:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801125c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011264:	f140 8402 	bpl.w	8011a6c <kalman_3gyro.constprop.0+0x4d54>
 8011268:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801126c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8011270:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011274:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011278:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801127c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011280:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011284:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011288:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 801128c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011294:	f200 835d 	bhi.w	8011952 <kalman_3gyro.constprop.0+0x4c3a>
 8011298:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 801129c:	eef4 4ac8 	vcmpe.f32	s9, s16
 80112a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a4:	f340 83e8 	ble.w	8011a78 <kalman_3gyro.constprop.0+0x4d60>
 80112a8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80112ac:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80112b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80112b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80112b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80112bc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80112c0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80112c4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80112c8:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 80112cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	f200 835d 	bhi.w	8011992 <kalman_3gyro.constprop.0+0x4c7a>
 80112d8:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 80112dc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80112e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e4:	f340 83b4 	ble.w	8011a50 <kalman_3gyro.constprop.0+0x4d38>
 80112e8:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 80112ec:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 80112f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80112f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80112f8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80112fc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011300:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011304:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011308:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 801130c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011314:	f2c0 835c 	blt.w	80119d0 <kalman_3gyro.constprop.0+0x4cb8>
 8011318:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801131c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011324:	f140 835c 	bpl.w	80119e0 <kalman_3gyro.constprop.0+0x4cc8>
 8011328:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 801132c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011330:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011334:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011338:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801133c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8011340:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8011344:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011348:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801134c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011354:	f6fc aeda 	blt.w	800e10c <kalman_3gyro.constprop.0+0x13f4>
 8011358:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011360:	f57c aed4 	bpl.w	800e10c <kalman_3gyro.constprop.0+0x13f4>
 8011364:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8011368:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801136c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8011370:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8011374:	ee35 7a47 	vsub.f32	s14, s10, s14
 8011378:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801137c:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011380:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011384:	f7fc bec2 	b.w	800e10c <kalman_3gyro.constprop.0+0x13f4>
 8011388:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801138c:	eef4 7acd 	vcmpe.f32	s15, s26
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	dd2c      	ble.n	80113f0 <kalman_3gyro.constprop.0+0x46d8>
 8011396:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801139a:	eef4 7aeb 	vcmpe.f32	s15, s23
 801139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a2:	dd25      	ble.n	80113f0 <kalman_3gyro.constprop.0+0x46d8>
 80113a4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80113a8:	eef4 7aec 	vcmpe.f32	s15, s25
 80113ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b0:	dd1e      	ble.n	80113f0 <kalman_3gyro.constprop.0+0x46d8>
 80113b2:	eddd 5a03 	vldr	s11, [sp, #12]
 80113b6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80113ba:	eef4 5ae7 	vcmpe.f32	s11, s15
 80113be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c2:	d515      	bpl.n	80113f0 <kalman_3gyro.constprop.0+0x46d8>
 80113c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80113c8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80113cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80113d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d8:	d50a      	bpl.n	80113f0 <kalman_3gyro.constprop.0+0x46d8>
 80113da:	2300      	movs	r3, #0
 80113dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80113e0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80113e4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80113e8:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80113ec:	f7fd bf4c 	b.w	800f288 <kalman_3gyro.constprop.0+0x2570>
 80113f0:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 80113f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80113f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113fc:	dd0b      	ble.n	8011416 <kalman_3gyro.constprop.0+0x46fe>
 80113fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140a:	f100 843f 	bmi.w	8011c8c <kalman_3gyro.constprop.0+0x4f74>
 801140e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011412:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011416:	2300      	movs	r3, #0
 8011418:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 801141c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011420:	f7fd bf32 	b.w	800f288 <kalman_3gyro.constprop.0+0x2570>
 8011424:	2301      	movs	r3, #1
 8011426:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801142a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 801142e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8011432:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8011436:	edd2 5a00 	vldr	s11, [r2]
 801143a:	ed93 7a00 	vldr	s14, [r3]
 801143e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8011442:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8011446:	ed92 5a00 	vldr	s10, [r2]
 801144a:	edd3 6a00 	vldr	s13, [r3]
 801144e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8011452:	ee67 4a07 	vmul.f32	s9, s14, s14
 8011456:	eea5 4a05 	vfma.f32	s8, s10, s10
 801145a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801145e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8011462:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8011466:	aa5d      	add	r2, sp, #372	; 0x174
 8011468:	a833      	add	r0, sp, #204	; 0xcc
 801146a:	ed91 6a00 	vldr	s12, [r1]
 801146e:	edd3 7a00 	vldr	s15, [r3]
 8011472:	eea6 4a06 	vfma.f32	s8, s12, s12
 8011476:	a92d      	add	r1, sp, #180	; 0xb4
 8011478:	ad5d      	add	r5, sp, #372	; 0x174
 801147a:	eee7 4aa7 	vfma.f32	s9, s15, s15
 801147e:	ac66      	add	r4, sp, #408	; 0x198
 8011480:	eef1 2ac4 	vsqrt.f32	s5, s8
 8011484:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011488:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801148c:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011490:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8011494:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011498:	ee27 7a24 	vmul.f32	s14, s14, s9
 801149c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80114a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80114a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80114a8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80114ac:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 80114b0:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80114b4:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 80114b8:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 80114bc:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 80114c0:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 80114c4:	f7fa fbac 	bl	800bc20 <getRotationMatrix>
 80114c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114d0:	682e      	ldr	r6, [r5, #0]
 80114d2:	6026      	str	r6, [r4, #0]
 80114d4:	ad66      	add	r5, sp, #408	; 0x198
 80114d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114d8:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80114dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114e2:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 80114e6:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 80114ea:	6026      	str	r6, [r4, #0]
 80114ec:	eef0 7ae7 	vabs.f32	s15, s15
 80114f0:	eeb0 7ac7 	vabs.f32	s14, s14
 80114f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fc:	f100 81df 	bmi.w	80118be <kalman_3gyro.constprop.0+0x4ba6>
 8011500:	2307      	movs	r3, #7
 8011502:	f04f 0c04 	mov.w	ip, #4
 8011506:	9305      	str	r3, [sp, #20]
 8011508:	2300      	movs	r3, #0
 801150a:	4662      	mov	r2, ip
 801150c:	2003      	movs	r0, #3
 801150e:	2706      	movs	r7, #6
 8011510:	f04f 0e01 	mov.w	lr, #1
 8011514:	9304      	str	r3, [sp, #16]
 8011516:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 801151a:	eeb0 7ac7 	vabs.f32	s14, s14
 801151e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	f340 8296 	ble.w	8011a56 <kalman_3gyro.constprop.0+0x4d3e>
 801152a:	2306      	movs	r3, #6
 801152c:	930a      	str	r3, [sp, #40]	; 0x28
 801152e:	2307      	movs	r3, #7
 8011530:	9305      	str	r3, [sp, #20]
 8011532:	2300      	movs	r3, #0
 8011534:	2708      	movs	r7, #8
 8011536:	f04f 0c04 	mov.w	ip, #4
 801153a:	9302      	str	r3, [sp, #8]
 801153c:	2302      	movs	r3, #2
 801153e:	9707      	str	r7, [sp, #28]
 8011540:	4662      	mov	r2, ip
 8011542:	2005      	movs	r0, #5
 8011544:	f04f 0e01 	mov.w	lr, #1
 8011548:	9304      	str	r3, [sp, #16]
 801154a:	ab66      	add	r3, sp, #408	; 0x198
 801154c:	441a      	add	r2, r3
 801154e:	9b07      	ldr	r3, [sp, #28]
 8011550:	edd2 6a00 	vldr	s13, [r2]
 8011554:	9a02      	ldr	r2, [sp, #8]
 8011556:	a966      	add	r1, sp, #408	; 0x198
 8011558:	440b      	add	r3, r1
 801155a:	ed93 7a00 	vldr	s14, [r3]
 801155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011562:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011566:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801156a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801156e:	9a04      	ldr	r2, [sp, #16]
 8011570:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8011574:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801157c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011580:	0080      	lsls	r0, r0, #2
 8011582:	900e      	str	r0, [sp, #56]	; 0x38
 8011584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011586:	940d      	str	r4, [sp, #52]	; 0x34
 8011588:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801158c:	edc3 7a00 	vstr	s15, [r3]
 8011590:	ed96 7a00 	vldr	s14, [r6]
 8011594:	edd1 7a00 	vldr	s15, [r1]
 8011598:	930c      	str	r3, [sp, #48]	; 0x30
 801159a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801159e:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80115a2:	0080      	lsls	r0, r0, #2
 80115a4:	9006      	str	r0, [sp, #24]
 80115a6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80115aa:	00bf      	lsls	r7, r7, #2
 80115ac:	9711      	str	r7, [sp, #68]	; 0x44
 80115ae:	9f05      	ldr	r7, [sp, #20]
 80115b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115b2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80115b6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80115ba:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	9307      	str	r3, [sp, #28]
 80115c2:	9b02      	ldr	r3, [sp, #8]
 80115c4:	edc6 6a00 	vstr	s13, [r6]
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80115cc:	9b04      	ldr	r3, [sp, #16]
 80115ce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	9312      	str	r3, [sp, #72]	; 0x48
 80115d4:	9b05      	ldr	r3, [sp, #20]
 80115d6:	ed96 7a00 	vldr	s14, [r6]
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	9309      	str	r3, [sp, #36]	; 0x24
 80115de:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80115e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115e4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80115e8:	ed93 6a00 	vldr	s12, [r3]
 80115ec:	edd2 7a00 	vldr	s15, [r2]
 80115f0:	eee6 7a47 	vfms.f32	s15, s12, s14
 80115f4:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80115f8:	950a      	str	r5, [sp, #40]	; 0x28
 80115fa:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80115fe:	edc2 7a00 	vstr	s15, [r2]
 8011602:	ed96 7a00 	vldr	s14, [r6]
 8011606:	edd4 7a00 	vldr	s15, [r4]
 801160a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801160e:	edc4 7a00 	vstr	s15, [r4]
 8011612:	edd0 5a00 	vldr	s11, [r0]
 8011616:	ed97 7a00 	vldr	s14, [r7]
 801161a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801161e:	eef0 7ae7 	vabs.f32	s15, s15
 8011622:	ed87 7a00 	vstr	s14, [r7]
 8011626:	ed90 6a00 	vldr	s12, [r0]
 801162a:	ed91 7a00 	vldr	s14, [r1]
 801162e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011632:	ed81 7a00 	vstr	s14, [r1]
 8011636:	ed92 7a00 	vldr	s14, [r2]
 801163a:	eeb0 7ac7 	vabs.f32	s14, s14
 801163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011646:	dd12      	ble.n	801166e <kalman_3gyro.constprop.0+0x4956>
 8011648:	9a07      	ldr	r2, [sp, #28]
 801164a:	9f05      	ldr	r7, [sp, #20]
 801164c:	9806      	ldr	r0, [sp, #24]
 801164e:	9209      	str	r2, [sp, #36]	; 0x24
 8011650:	4673      	mov	r3, lr
 8011652:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	9206      	str	r2, [sp, #24]
 8011660:	930b      	str	r3, [sp, #44]	; 0x2c
 8011662:	00ba      	lsls	r2, r7, #2
 8011664:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011668:	4605      	mov	r5, r0
 801166a:	9207      	str	r2, [sp, #28]
 801166c:	930a      	str	r3, [sp, #40]	; 0x28
 801166e:	9b06      	ldr	r3, [sp, #24]
 8011670:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011672:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011676:	4413      	add	r3, r2
 8011678:	461c      	mov	r4, r3
 801167a:	462b      	mov	r3, r5
 801167c:	4413      	add	r3, r2
 801167e:	ed94 7a00 	vldr	s14, [r4]
 8011682:	edd3 7a00 	vldr	s15, [r3]
 8011686:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801168a:	4618      	mov	r0, r3
 801168c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801168e:	4413      	add	r3, r2
 8011690:	461a      	mov	r2, r3
 8011692:	9b07      	ldr	r3, [sp, #28]
 8011694:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011698:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801169c:	440b      	add	r3, r1
 801169e:	4619      	mov	r1, r3
 80116a0:	442e      	add	r6, r5
 80116a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116a4:	9607      	str	r6, [sp, #28]
 80116a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80116a8:	ed84 2a00 	vstr	s4, [r4]
 80116ac:	442b      	add	r3, r5
 80116ae:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80116b2:	9306      	str	r3, [sp, #24]
 80116b4:	19bb      	adds	r3, r7, r6
 80116b6:	ed92 7a00 	vldr	s14, [r2]
 80116ba:	edd1 7a00 	vldr	s15, [r1]
 80116be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80116c0:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80116c4:	edd3 3a00 	vldr	s7, [r3]
 80116c8:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80116cc:	eee2 7a47 	vfms.f32	s15, s4, s14
 80116d0:	4423      	add	r3, r4
 80116d2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80116d6:	ed93 5a00 	vldr	s10, [r3]
 80116da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116dc:	edc1 7a00 	vstr	s15, [r1]
 80116e0:	462f      	mov	r7, r5
 80116e2:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 80116e6:	4629      	mov	r1, r5
 80116e8:	eb05 0c03 	add.w	ip, r5, r3
 80116ec:	9d04      	ldr	r5, [sp, #16]
 80116ee:	ed92 1a00 	vldr	s2, [r2]
 80116f2:	4437      	add	r7, r6
 80116f4:	9705      	str	r7, [sp, #20]
 80116f6:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 80116fa:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80116fe:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011702:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8011706:	4419      	add	r1, r3
 8011708:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801170c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8011710:	191c      	adds	r4, r3, r4
 8011712:	9b02      	ldr	r3, [sp, #8]
 8011714:	9104      	str	r1, [sp, #16]
 8011716:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 801171a:	9409      	str	r4, [sp, #36]	; 0x24
 801171c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8011720:	463d      	mov	r5, r7
 8011722:	9904      	ldr	r1, [sp, #16]
 8011724:	46b6      	mov	lr, r6
 8011726:	4623      	mov	r3, r4
 8011728:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801172c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8011730:	edd0 7a00 	vldr	s15, [r0]
 8011734:	9805      	ldr	r0, [sp, #20]
 8011736:	ed91 0a00 	vldr	s0, [r1]
 801173a:	ed90 8a00 	vldr	s16, [r0]
 801173e:	eddc 4a00 	vldr	s9, [ip]
 8011742:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8011746:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 801174a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 801174e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8011752:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8011756:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 801175a:	a85d      	add	r0, sp, #372	; 0x174
 801175c:	a93e      	add	r1, sp, #248	; 0xf8
 801175e:	edd7 5a00 	vldr	s11, [r7]
 8011762:	ed96 6a00 	vldr	s12, [r6]
 8011766:	9a06      	ldr	r2, [sp, #24]
 8011768:	ed95 7a00 	vldr	s14, [r5]
 801176c:	edd4 6a00 	vldr	s13, [r4]
 8011770:	ed93 3a00 	vldr	s6, [r3]
 8011774:	edde 7a00 	vldr	s15, [lr]
 8011778:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801177a:	edd2 1a00 	vldr	s3, [r2]
 801177e:	9e07      	ldr	r6, [sp, #28]
 8011780:	eee8 3a45 	vfms.f32	s7, s16, s10
 8011784:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011788:	eea8 6a65 	vfms.f32	s12, s16, s11
 801178c:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011790:	eee0 6a65 	vfms.f32	s13, s0, s11
 8011794:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011798:	ed94 0a00 	vldr	s0, [r4]
 801179c:	eea2 3a67 	vfms.f32	s6, s4, s15
 80117a0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80117a4:	eee2 6a46 	vfms.f32	s13, s4, s12
 80117a8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80117ac:	ee64 6a26 	vmul.f32	s13, s8, s13
 80117b0:	ee64 4a24 	vmul.f32	s9, s8, s9
 80117b4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80117b8:	eea1 6a66 	vfms.f32	s12, s2, s13
 80117bc:	eee4 3ac1 	vfms.f32	s7, s9, s2
 80117c0:	eee4 7a41 	vfms.f32	s15, s8, s2
 80117c4:	eee1 5ae6 	vfms.f32	s11, s3, s13
 80117c8:	eea4 5ae1 	vfms.f32	s10, s9, s3
 80117cc:	eea4 7a61 	vfms.f32	s14, s8, s3
 80117d0:	ed96 3a00 	vldr	s6, [r6]
 80117d4:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 80117d8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80117dc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80117e0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80117e4:	eea7 7ac3 	vfms.f32	s14, s15, s6
 80117e8:	eea3 5ac3 	vfms.f32	s10, s7, s6
 80117ec:	eee3 5a46 	vfms.f32	s11, s6, s12
 80117f0:	ee27 7a02 	vmul.f32	s14, s14, s4
 80117f4:	ee22 5a05 	vmul.f32	s10, s4, s10
 80117f8:	ee62 5a25 	vmul.f32	s11, s4, s11
 80117fc:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011800:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8011804:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011808:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 801180c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011810:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8011814:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011818:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 801181c:	f7fa faa0 	bl	800bd60 <b_dcm2q>
 8011820:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8011824:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8011828:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 801182c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8011830:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011834:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011838:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801183c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011840:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011844:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011848:	2b00      	cmp	r3, #0
 801184a:	f43d ad20 	beq.w	800f28e <kalman_3gyro.constprop.0+0x2576>
 801184e:	2200      	movs	r2, #0
 8011850:	9b01      	ldr	r3, [sp, #4]
 8011852:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011856:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801185a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801185e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011862:	f7fd bd9c 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011866:	edd3 7a02 	vldr	s15, [r3, #8]
 801186a:	ed93 7a01 	vldr	s14, [r3, #4]
 801186e:	edd3 6a03 	vldr	s13, [r3, #12]
 8011872:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011876:	eee7 7a07 	vfma.f32	s15, s14, s14
 801187a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801187e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8011882:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011886:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801188a:	f7ff bb12 	b.w	8010eb2 <kalman_3gyro.constprop.0+0x419a>
 801188e:	eeb0 7a64 	vmov.f32	s14, s9
 8011892:	f7fc bc8b 	b.w	800e1ac <kalman_3gyro.constprop.0+0x1494>
 8011896:	eeb0 7a64 	vmov.f32	s14, s9
 801189a:	f7ff bb94 	b.w	8010fc6 <kalman_3gyro.constprop.0+0x42ae>
 801189e:	eeb0 7a64 	vmov.f32	s14, s9
 80118a2:	f7ff bb50 	b.w	8010f46 <kalman_3gyro.constprop.0+0x422e>
 80118a6:	eeb0 7a64 	vmov.f32	s14, s9
 80118aa:	f7fc bc9f 	b.w	800e1ec <kalman_3gyro.constprop.0+0x14d4>
 80118ae:	eeb0 7a64 	vmov.f32	s14, s9
 80118b2:	f7ff bb68 	b.w	8010f86 <kalman_3gyro.constprop.0+0x426e>
 80118b6:	eeb0 7a64 	vmov.f32	s14, s9
 80118ba:	f7fc bcb7 	b.w	800e22c <kalman_3gyro.constprop.0+0x1514>
 80118be:	2200      	movs	r2, #0
 80118c0:	2004      	movs	r0, #4
 80118c2:	2301      	movs	r3, #1
 80118c4:	2406      	movs	r4, #6
 80118c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80118ca:	9007      	str	r0, [sp, #28]
 80118cc:	eef0 7a47 	vmov.f32	s15, s14
 80118d0:	4696      	mov	lr, r2
 80118d2:	f04f 0c03 	mov.w	ip, #3
 80118d6:	2707      	movs	r7, #7
 80118d8:	e61d      	b.n	8011516 <kalman_3gyro.constprop.0+0x47fe>
 80118da:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011c64 <kalman_3gyro.constprop.0+0x4f4c>
 80118de:	eeb0 7a64 	vmov.f32	s14, s9
 80118e2:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80118e6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80118ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ee:	f140 80b9 	bpl.w	8011a64 <kalman_3gyro.constprop.0+0x4d4c>
 80118f2:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80118f6:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80118fa:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118fe:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011902:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011906:	ee64 4a03 	vmul.f32	s9, s8, s6
 801190a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801190e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011912:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8011916:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	f6ff acb3 	blt.w	8011288 <kalman_3gyro.constprop.0+0x4570>
 8011922:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8011926:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192e:	f140 80a0 	bpl.w	8011a72 <kalman_3gyro.constprop.0+0x4d5a>
 8011932:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8011936:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 801193a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801193e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011942:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011946:	ee64 4a03 	vmul.f32	s9, s8, s6
 801194a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801194e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011952:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011956:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195e:	f63f acb3 	bhi.w	80112c8 <kalman_3gyro.constprop.0+0x45b0>
 8011962:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8011966:	eef4 4ac8 	vcmpe.f32	s9, s16
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	f340 8086 	ble.w	8011a7e <kalman_3gyro.constprop.0+0x4d66>
 8011972:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8011976:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 801197a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801197e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011982:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011986:	ee64 4a03 	vmul.f32	s9, s8, s6
 801198a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801198e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011992:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8011996:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199e:	f63f acb3 	bhi.w	8011308 <kalman_3gyro.constprop.0+0x45f0>
 80119a2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80119a6:	eef4 4ac8 	vcmpe.f32	s9, s16
 80119aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ae:	dd69      	ble.n	8011a84 <kalman_3gyro.constprop.0+0x4d6c>
 80119b0:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80119b4:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80119b8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80119bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80119c0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80119c4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80119c8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80119cc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80119d0:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80119d4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80119d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119dc:	f63f acb4 	bhi.w	8011348 <kalman_3gyro.constprop.0+0x4630>
 80119e0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80119e4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80119e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ec:	f77f acb4 	ble.w	8011358 <kalman_3gyro.constprop.0+0x4640>
 80119f0:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80119f4:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80119f8:	ee78 3a64 	vsub.f32	s7, s16, s9
 80119fc:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011a00:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011a04:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011a08:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011a0c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011a10:	f7fc bb7c 	b.w	800e10c <kalman_3gyro.constprop.0+0x13f4>
 8011a14:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011a18:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011c68 <kalman_3gyro.constprop.0+0x4f50>
 8011a1c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011c6c <kalman_3gyro.constprop.0+0x4f54>
 8011a20:	3301      	adds	r3, #1
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	2b31      	cmp	r3, #49	; 0x31
 8011a26:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011a2a:	bf98      	it	ls
 8011a2c:	eef0 7a47 	vmovls.f32	s15, s14
 8011a30:	f7fd bc1c 	b.w	800f26c <kalman_3gyro.constprop.0+0x2554>
 8011a34:	2a0a      	cmp	r2, #10
 8011a36:	d02c      	beq.n	8011a92 <kalman_3gyro.constprop.0+0x4d7a>
 8011a38:	2100      	movs	r1, #0
 8011a3a:	3201      	adds	r2, #1
 8011a3c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011a40:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011a44:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011a48:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8011a4c:	f7fd bca7 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011a50:	eeb0 7a64 	vmov.f32	s14, s9
 8011a54:	e7a5      	b.n	80119a2 <kalman_3gyro.constprop.0+0x4c8a>
 8011a56:	2305      	movs	r3, #5
 8011a58:	2108      	movs	r1, #8
 8011a5a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 8011a5e:	2302      	movs	r3, #2
 8011a60:	9302      	str	r3, [sp, #8]
 8011a62:	e572      	b.n	801154a <kalman_3gyro.constprop.0+0x4832>
 8011a64:	eeb0 7a64 	vmov.f32	s14, s9
 8011a68:	f7ff bbf6 	b.w	8011258 <kalman_3gyro.constprop.0+0x4540>
 8011a6c:	eeb0 7a64 	vmov.f32	s14, s9
 8011a70:	e757      	b.n	8011922 <kalman_3gyro.constprop.0+0x4c0a>
 8011a72:	eeb0 7a64 	vmov.f32	s14, s9
 8011a76:	e40f      	b.n	8011298 <kalman_3gyro.constprop.0+0x4580>
 8011a78:	eeb0 7a64 	vmov.f32	s14, s9
 8011a7c:	e771      	b.n	8011962 <kalman_3gyro.constprop.0+0x4c4a>
 8011a7e:	eeb0 7a64 	vmov.f32	s14, s9
 8011a82:	e429      	b.n	80112d8 <kalman_3gyro.constprop.0+0x45c0>
 8011a84:	eeb0 7a64 	vmov.f32	s14, s9
 8011a88:	e446      	b.n	8011318 <kalman_3gyro.constprop.0+0x4600>
 8011a8a:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011c64 <kalman_3gyro.constprop.0+0x4f4c>
 8011a8e:	f7fc bb6d 	b.w	800e16c <kalman_3gyro.constprop.0+0x1454>
 8011a92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a94:	ed94 3a00 	vldr	s6, [r4]
 8011a98:	edd2 5a00 	vldr	s11, [r2]
 8011a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a9e:	edd0 3a00 	vldr	s7, [r0]
 8011aa2:	ed92 1a00 	vldr	s2, [r2]
 8011aa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011aa8:	ed91 4a00 	vldr	s8, [r1]
 8011aac:	edd2 4a00 	vldr	s9, [r2]
 8011ab0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011ab2:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011ab6:	ed92 2a00 	vldr	s4, [r2]
 8011aba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011abc:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011ac0:	edd2 7a00 	vldr	s15, [r2]
 8011ac4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ac6:	edd2 2a00 	vldr	s5, [r2]
 8011aca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011acc:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011ad0:	edd2 1a00 	vldr	s3, [r2]
 8011ad4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011ad6:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011ada:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011ade:	ed92 3a00 	vldr	s6, [r2]
 8011ae2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011ae4:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011ae8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011aec:	edd2 3a00 	vldr	s7, [r2]
 8011af0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011af2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011af6:	ed92 4a00 	vldr	s8, [r2]
 8011afa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011afc:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b00:	ed92 2a00 	vldr	s4, [r2]
 8011b04:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011b06:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011b0a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8011b0e:	edd2 2a00 	vldr	s5, [r2]
 8011b12:	ed91 3a00 	vldr	s6, [r1]
 8011b16:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011b1a:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011b1e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011b22:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011b26:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8011b2a:	ed90 4a00 	vldr	s8, [r0]
 8011b2e:	edd2 3a00 	vldr	s7, [r2]
 8011b32:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011b36:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011b3a:	ed91 2a00 	vldr	s4, [r1]
 8011b3e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011b42:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011b46:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b4a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8011b4e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011b52:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011b56:	ed90 4a00 	vldr	s8, [r0]
 8011b5a:	edd2 2a00 	vldr	s5, [r2]
 8011b5e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011b62:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011b66:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8011b6a:	edd1 3a00 	vldr	s7, [r1]
 8011b6e:	ed90 3a00 	vldr	s6, [r0]
 8011b72:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011b76:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011b7a:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8011b7e:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011b82:	ed92 4a00 	vldr	s8, [r2]
 8011b86:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011b8a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011b8e:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011b92:	edd0 3a00 	vldr	s7, [r0]
 8011b96:	edd4 2a00 	vldr	s5, [r4]
 8011b9a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8011b9e:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011ba2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011ba6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8011baa:	ed91 3a00 	vldr	s6, [r1]
 8011bae:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011bb2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011bb6:	ed92 4a00 	vldr	s8, [r2]
 8011bba:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8011bbe:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011bc2:	edd4 3a00 	vldr	s7, [r4]
 8011bc6:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8011bca:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011bce:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011bd2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011bd6:	ed91 4a00 	vldr	s8, [r1]
 8011bda:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011bde:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011be2:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011be6:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8011bea:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011bee:	edc1 4a00 	vstr	s9, [r1]
 8011bf2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011bf6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011bfa:	edc1 5a00 	vstr	s11, [r1]
 8011bfe:	f240 1501 	movw	r5, #257	; 0x101
 8011c02:	3201      	adds	r2, #1
 8011c04:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011c08:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011c0c:	edc1 7a00 	vstr	s15, [r1]
 8011c10:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011c14:	2800      	cmp	r0, #0
 8011c16:	f43d abc2 	beq.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011c20:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011c24:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011c28:	f88b 2001 	strb.w	r2, [fp, #1]
 8011c2c:	f7fd bbb7 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011c30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011c34:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011c38:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011c3c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011c40:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011c44:	f7fd bb20 	b.w	800f288 <kalman_3gyro.constprop.0+0x2570>
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	f340 80c1 	ble.w	8011dd0 <kalman_3gyro.constprop.0+0x50b8>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011c54:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011c58:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011c5c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011c60:	f7fc bfcf 	b.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 8011c64:	00000000 	.word	0x00000000
 8011c68:	3e4cccce 	.word	0x3e4cccce
 8011c6c:	3eaaaaab 	.word	0x3eaaaaab
 8011c70:	3e999998 	.word	0x3e999998
 8011c74:	3f99999a 	.word	0x3f99999a
 8011c78:	3dccccd0 	.word	0x3dccccd0
 8011c7c:	3f8ccccd 	.word	0x3f8ccccd
 8011c80:	3e4ccccd 	.word	0x3e4ccccd
 8011c84:	3d088889 	.word	0x3d088889
 8011c88:	3d0d3dcb 	.word	0x3d0d3dcb
 8011c8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	d55b      	bpl.n	8011d52 <kalman_3gyro.constprop.0+0x503a>
 8011c9a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011c78 <kalman_3gyro.constprop.0+0x4f60>
 8011c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011ca6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011caa:	eef0 5a66 	vmov.f32	s11, s13
 8011cae:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011cb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cba:	eeb0 7a65 	vmov.f32	s14, s11
 8011cbe:	db5b      	blt.n	8011d78 <kalman_3gyro.constprop.0+0x5060>
 8011cc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ccc:	d55b      	bpl.n	8011d86 <kalman_3gyro.constprop.0+0x506e>
 8011cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011cd2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011cd6:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011c70 <kalman_3gyro.constprop.0+0x4f58>
 8011cda:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011c74 <kalman_3gyro.constprop.0+0x4f5c>
 8011cde:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011ce2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011ce6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cee:	db5b      	blt.n	8011da8 <kalman_3gyro.constprop.0+0x5090>
 8011cf0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfc:	d55b      	bpl.n	8011db6 <kalman_3gyro.constprop.0+0x509e>
 8011cfe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011d0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011d0e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011d12:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011d16:	f7ff bb7e 	b.w	8011416 <kalman_3gyro.constprop.0+0x46fe>
 8011d1a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011d1e:	2b27      	cmp	r3, #39	; 0x27
 8011d20:	f200 80c3 	bhi.w	8011eaa <kalman_3gyro.constprop.0+0x5192>
 8011d24:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011d28:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011d2c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011d30:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011d34:	2201      	movs	r2, #1
 8011d36:	4413      	add	r3, r2
 8011d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d3c:	bf14      	ite	ne
 8011d3e:	b29b      	uxthne	r3, r3
 8011d40:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011d44:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011d48:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011d4c:	9b01      	ldr	r3, [sp, #4]
 8011d4e:	f7fd bb26 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011d56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5e:	d5af      	bpl.n	8011cc0 <kalman_3gyro.constprop.0+0x4fa8>
 8011d60:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011d64:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011c78 <kalman_3gyro.constprop.0+0x4f60>
 8011d68:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011c7c <kalman_3gyro.constprop.0+0x4f64>
 8011d6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d70:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011d74:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011d78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d84:	dbad      	blt.n	8011ce2 <kalman_3gyro.constprop.0+0x4fca>
 8011d86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d92:	d5ad      	bpl.n	8011cf0 <kalman_3gyro.constprop.0+0x4fd8>
 8011d94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011d9c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011da0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011da4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011da8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011dac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db4:	dbad      	blt.n	8011d12 <kalman_3gyro.constprop.0+0x4ffa>
 8011db6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dbe:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011c80 <kalman_3gyro.constprop.0+0x4f68>
 8011dc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011dc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011dca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011dce:	e7a0      	b.n	8011d12 <kalman_3gyro.constprop.0+0x4ffa>
 8011dd0:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011dd4:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011dd8:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011ddc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011de0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011de4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011de8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011dec:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011df0:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011df4:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011df8:	f7fc bf03 	b.w	800ec02 <kalman_3gyro.constprop.0+0x1eea>
 8011dfc:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011c84 <kalman_3gyro.constprop.0+0x4f6c>
 8011e00:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011c88 <kalman_3gyro.constprop.0+0x4f70>
 8011e04:	ac33      	add	r4, sp, #204	; 0xcc
 8011e06:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011e0e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011e12:	eef0 7a66 	vmov.f32	s15, s13
 8011e16:	3001      	adds	r0, #1
 8011e18:	461a      	mov	r2, r3
 8011e1a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011e1e:	320c      	adds	r2, #12
 8011e20:	428a      	cmp	r2, r1
 8011e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e26:	d1f8      	bne.n	8011e1a <kalman_3gyro.constprop.0+0x5102>
 8011e28:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011e2c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011e30:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011e34:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011e38:	330c      	adds	r3, #12
 8011e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e3e:	428b      	cmp	r3, r1
 8011e40:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011e44:	d1f6      	bne.n	8011e34 <kalman_3gyro.constprop.0+0x511c>
 8011e46:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011e4a:	2802      	cmp	r0, #2
 8011e4c:	f103 0104 	add.w	r1, r3, #4
 8011e50:	ece4 6a01 	vstmia	r4!, {s13}
 8011e54:	d1d9      	bne.n	8011e0a <kalman_3gyro.constprop.0+0x50f2>
 8011e56:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011e5a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011e5e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011e62:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011e66:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011e6a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e72:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e7a:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011e7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e86:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011e8a:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011e8e:	f57d aa62 	bpl.w	800f356 <kalman_3gyro.constprop.0+0x263e>
 8011e92:	2200      	movs	r2, #0
 8011e94:	9b01      	ldr	r3, [sp, #4]
 8011e96:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011e9a:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011e9e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011ea2:	f88b 2001 	strb.w	r2, [fp, #1]
 8011ea6:	f7fd ba7a 	b.w	800f39e <kalman_3gyro.constprop.0+0x2686>
 8011eaa:	9b08      	ldr	r3, [sp, #32]
 8011eac:	6999      	ldr	r1, [r3, #24]
 8011eae:	69da      	ldr	r2, [r3, #28]
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	9181      	str	r1, [sp, #516]	; 0x204
 8011eb4:	9282      	str	r2, [sp, #520]	; 0x208
 8011eb6:	9383      	str	r3, [sp, #524]	; 0x20c
 8011eb8:	e73a      	b.n	8011d30 <kalman_3gyro.constprop.0+0x5018>
 8011eba:	bf00      	nop
 8011ebc:	0000      	movs	r0, r0
	...

08011ec0 <iNemoEngine_API_Update>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	ed2d 8b0c 	vpush	{d8-d13}
 8011ec8:	4604      	mov	r4, r0
 8011eca:	b0c1      	sub	sp, #260	; 0x104
 8011ecc:	460d      	mov	r5, r1
 8011ece:	4617      	mov	r7, r2
 8011ed0:	eeb0 8a40 	vmov.f32	s16, s0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f000 8253 	beq.w	8012380 <iNemoEngine_API_Update+0x4c0>
 8011eda:	461e      	mov	r6, r3
 8011edc:	463b      	mov	r3, r7
 8011ede:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011ee2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011ee6:	6859      	ldr	r1, [r3, #4]
 8011ee8:	689a      	ldr	r2, [r3, #8]
 8011eea:	ab33      	add	r3, sp, #204	; 0xcc
 8011eec:	c307      	stmia	r3!, {r0, r1, r2}
 8011eee:	6879      	ldr	r1, [r7, #4]
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	6838      	ldr	r0, [r7, #0]
 8011ef4:	ab30      	add	r3, sp, #192	; 0xc0
 8011ef6:	c307      	stmia	r3!, {r0, r1, r2}
 8011ef8:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	ab36      	add	r3, sp, #216	; 0xd8
 8011f02:	c307      	stmia	r3!, {r0, r1, r2}
 8011f04:	f1bc 0f00 	cmp.w	ip, #0
 8011f08:	d005      	beq.n	8011f16 <iNemoEngine_API_Update+0x56>
 8011f0a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011f0e:	7923      	ldrb	r3, [r4, #4]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	f080 829b 	bcs.w	801244c <iNemoEngine_API_Update+0x58c>
 8011f16:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011f1a:	f10d 0a14 	add.w	sl, sp, #20
 8011f1e:	2300      	movs	r3, #0
 8011f20:	4649      	mov	r1, r9
 8011f22:	4650      	mov	r0, sl
 8011f24:	aa33      	add	r2, sp, #204	; 0xcc
 8011f26:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011f2a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011f2e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011f32:	f7f9 fb63 	bl	800b5fc <rotVect>
 8011f36:	aa36      	add	r2, sp, #216	; 0xd8
 8011f38:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011f3c:	a808      	add	r0, sp, #32
 8011f3e:	f7f9 fb5d 	bl	800b5fc <rotVect>
 8011f42:	aa30      	add	r2, sp, #192	; 0xc0
 8011f44:	4640      	mov	r0, r8
 8011f46:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011f4a:	f7f9 fb57 	bl	800b5fc <rotVect>
 8011f4e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011f52:	b923      	cbnz	r3, 8011f5e <iNemoEngine_API_Update+0x9e>
 8011f54:	4b8c      	ldr	r3, [pc, #560]	; (8012188 <iNemoEngine_API_Update+0x2c8>)
 8011f56:	930c      	str	r3, [sp, #48]	; 0x30
 8011f58:	2200      	movs	r2, #0
 8011f5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8011f5e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011f62:	2f09      	cmp	r7, #9
 8011f64:	d851      	bhi.n	801200a <iNemoEngine_API_Update+0x14a>
 8011f66:	ed9d ba06 	vldr	s22, [sp, #24]
 8011f6a:	eddd ba05 	vldr	s23, [sp, #20]
 8011f6e:	eddd aa07 	vldr	s21, [sp, #28]
 8011f72:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011f76:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011f7a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011f7e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011f82:	ee17 0a90 	vmov	r0, s15
 8011f86:	f7ee fadf 	bl	8000548 <__aeabi_f2d>
 8011f8a:	ec41 0b10 	vmov	d0, r0, r1
 8011f8e:	f003 ff5d 	bl	8015e4c <sqrt>
 8011f92:	ec51 0b10 	vmov	r0, r1, d0
 8011f96:	f7ee fe07 	bl	8000ba8 <__aeabi_d2f>
 8011f9a:	ee07 0a90 	vmov	s15, r0
 8011f9e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011fa2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011fa6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011faa:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011fae:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011fb2:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011fb6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011fba:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011fbe:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011fc2:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011fc6:	ee17 0a90 	vmov	r0, s15
 8011fca:	edcd ba05 	vstr	s23, [sp, #20]
 8011fce:	ed8d ba06 	vstr	s22, [sp, #24]
 8011fd2:	edcd aa07 	vstr	s21, [sp, #28]
 8011fd6:	f7ee fab7 	bl	8000548 <__aeabi_f2d>
 8011fda:	ec41 0b10 	vmov	d0, r0, r1
 8011fde:	f003 ff35 	bl	8015e4c <sqrt>
 8011fe2:	ec51 0b10 	vmov	r0, r1, d0
 8011fe6:	f7ee fddf 	bl	8000ba8 <__aeabi_d2f>
 8011fea:	ee07 0a90 	vmov	s15, r0
 8011fee:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011ff2:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011ff6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011ffa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011ffe:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8012002:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8012006:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 801200a:	7923      	ldrb	r3, [r4, #4]
 801200c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8012010:	429a      	cmp	r2, r3
 8012012:	f080 80dd 	bcs.w	80121d0 <iNemoEngine_API_Update+0x310>
 8012016:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801201a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801201e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8012022:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8012026:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801202a:	3701      	adds	r7, #1
 801202c:	aa33      	add	r2, sp, #204	; 0xcc
 801202e:	4649      	mov	r1, r9
 8012030:	4640      	mov	r0, r8
 8012032:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8012036:	9303      	str	r3, [sp, #12]
 8012038:	f7f9 fae0 	bl	800b5fc <rotVect>
 801203c:	9b03      	ldr	r3, [sp, #12]
 801203e:	f8db 1000 	ldr.w	r1, [fp]
 8012042:	6818      	ldr	r0, [r3, #0]
 8012044:	f8da 2000 	ldr.w	r2, [sl]
 8012048:	6833      	ldr	r3, [r6, #0]
 801204a:	61ab      	str	r3, [r5, #24]
 801204c:	60e8      	str	r0, [r5, #12]
 801204e:	6129      	str	r1, [r5, #16]
 8012050:	616a      	str	r2, [r5, #20]
 8012052:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012056:	9301      	str	r3, [sp, #4]
 8012058:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801205c:	4641      	mov	r1, r8
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	462a      	mov	r2, r5
 8012062:	f105 031c 	add.w	r3, r5, #28
 8012066:	f105 000c 	add.w	r0, r5, #12
 801206a:	f7fa fd85 	bl	800cb78 <output_update>
 801206e:	ed95 8a00 	vldr	s16, [r5]
 8012072:	edd5 9a01 	vldr	s19, [r5, #4]
 8012076:	eeb0 0a48 	vmov.f32	s0, s16
 801207a:	f003 fe7b 	bl	8015d74 <sinf>
 801207e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801218c <iNemoEngine_API_Update+0x2cc>
 8012082:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012190 <iNemoEngine_API_Update+0x2d0>
 8012086:	ee60 8a00 	vmul.f32	s17, s0, s0
 801208a:	eef0 6ae9 	vabs.f32	s13, s19
 801208e:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8012092:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	eef0 8a67 	vmov.f32	s17, s15
 801209e:	d56e      	bpl.n	801217e <iNemoEngine_API_Update+0x2be>
 80120a0:	eeb0 0a69 	vmov.f32	s0, s19
 80120a4:	f003 fea8 	bl	8015df8 <tanf>
 80120a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120ac:	eea0 9a28 	vfma.f32	s18, s0, s17
 80120b0:	eef1 7ac9 	vsqrt.f32	s15, s18
 80120b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012194 <iNemoEngine_API_Update+0x2d4>
 80120b8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80121a8 <iNemoEngine_API_Update+0x2e8>
 80120bc:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80120c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80120c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120cc:	bf88      	it	hi
 80120ce:	eef0 7a66 	vmovhi.f32	s15, s13
 80120d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120da:	bfb8      	it	lt
 80120dc:	eef0 7a47 	vmovlt.f32	s15, s14
 80120e0:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 80120e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80120e8:	4c2b      	ldr	r4, [pc, #172]	; (8012198 <iNemoEngine_API_Update+0x2d8>)
 80120ea:	bba3      	cbnz	r3, 8012156 <iNemoEngine_API_Update+0x296>
 80120ec:	6820      	ldr	r0, [r4, #0]
 80120ee:	edd5 0a08 	vldr	s1, [r5, #32]
 80120f2:	ed95 0a07 	vldr	s0, [r5, #28]
 80120f6:	edd5 9a03 	vldr	s19, [r5, #12]
 80120fa:	ed95 aa04 	vldr	s20, [r5, #16]
 80120fe:	ed95 9a05 	vldr	s18, [r5, #20]
 8012102:	edd5 8a06 	vldr	s17, [r5, #24]
 8012106:	f7f9 fb4b 	bl	800b7a0 <findDirection>
 801210a:	6020      	str	r0, [r4, #0]
 801210c:	2805      	cmp	r0, #5
 801210e:	f200 833d 	bhi.w	801278c <iNemoEngine_API_Update+0x8cc>
 8012112:	e8df f010 	tbh	[pc, r0, lsl #1]
 8012116:	000a      	.short	0x000a
 8012118:	00060137 	.word	0x00060137
 801211c:	00060169 	.word	0x00060169
 8012120:	000a      	.short	0x000a
 8012122:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801219c <iNemoEngine_API_Update+0x2dc>
 8012126:	ee38 8a27 	vadd.f32	s16, s16, s15
 801212a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80121cc <iNemoEngine_API_Update+0x30c>
 801212e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012136:	bfa8      	it	ge
 8012138:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801213c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012144:	f100 8111 	bmi.w	801236a <iNemoEngine_API_Update+0x4aa>
 8012148:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801214c:	b041      	add	sp, #260	; 0x104
 801214e:	ecbd 8b0c 	vpop	{d8-d13}
 8012152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012156:	ed95 9a05 	vldr	s18, [r5, #20]
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	edd5 0a07 	vldr	s1, [r5, #28]
 8012160:	ed95 0a08 	vldr	s0, [r5, #32]
 8012164:	edd5 9a04 	vldr	s19, [r5, #16]
 8012168:	ed95 aa03 	vldr	s20, [r5, #12]
 801216c:	edd5 8a06 	vldr	s17, [r5, #24]
 8012170:	eeb1 1a41 	vneg.f32	s2, s2
 8012174:	eeb1 9a49 	vneg.f32	s18, s18
 8012178:	f7f9 fb12 	bl	800b7a0 <findDirection>
 801217c:	e7c5      	b.n	801210a <iNemoEngine_API_Update+0x24a>
 801217e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80121a0 <iNemoEngine_API_Update+0x2e0>
 8012182:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8012186:	e793      	b.n	80120b0 <iNemoEngine_API_Update+0x1f0>
 8012188:	3f333333 	.word	0x3f333333
 801218c:	00000000 	.word	0x00000000
 8012190:	3fbc430e 	.word	0x3fbc430e
 8012194:	40490fdb 	.word	0x40490fdb
 8012198:	200002e0 	.word	0x200002e0
 801219c:	43340000 	.word	0x43340000
 80121a0:	42c6ab07 	.word	0x42c6ab07
 80121a4:	3c03126f 	.word	0x3c03126f
 80121a8:	3c8efa35 	.word	0x3c8efa35
 80121ac:	3e4ccccd 	.word	0x3e4ccccd
 80121b0:	3fb50481 	.word	0x3fb50481
 80121b4:	3ed93dd9 	.word	0x3ed93dd9
 80121b8:	3b656042 	.word	0x3b656042
 80121bc:	42c80000 	.word	0x42c80000
 80121c0:	3a83126f 	.word	0x3a83126f
 80121c4:	3d4ccccd 	.word	0x3d4ccccd
 80121c8:	3f333333 	.word	0x3f333333
 80121cc:	43b40000 	.word	0x43b40000
 80121d0:	ee07 3a90 	vmov	s15, r3
 80121d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121d8:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80121a4 <iNemoEngine_API_Update+0x2e4>
 80121dc:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80121a8 <iNemoEngine_API_Update+0x2e8>
 80121e0:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 80121b8 <iNemoEngine_API_Update+0x2f8>
 80121e4:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80121b4 <iNemoEngine_API_Update+0x2f4>
 80121e8:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80121b0 <iNemoEngine_API_Update+0x2f0>
 80121ec:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80121ac <iNemoEngine_API_Update+0x2ec>
 80121f0:	ee27 1a88 	vmul.f32	s2, s15, s16
 80121f4:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80121f8:	ee85 5a81 	vdiv.f32	s10, s11, s2
 80121fc:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012200:	2700      	movs	r7, #0
 8012202:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8012206:	f04f 0c00 	mov.w	ip, #0
 801220a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 801220e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8012212:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8012216:	edd3 5a00 	vldr	s11, [r3]
 801221a:	f8c3 c000 	str.w	ip, [r3]
 801221e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8012222:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8012226:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801222a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801222e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8012232:	edd7 4a00 	vldr	s9, [r7]
 8012236:	f8c7 c000 	str.w	ip, [r7]
 801223a:	ed93 5a00 	vldr	s10, [r3]
 801223e:	f8c3 c000 	str.w	ip, [r3]
 8012242:	7963      	ldrb	r3, [r4, #5]
 8012244:	ee64 4a84 	vmul.f32	s9, s9, s8
 8012248:	ee25 5a04 	vmul.f32	s10, s10, s8
 801224c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8012250:	2b01      	cmp	r3, #1
 8012252:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8012256:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801225a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801225e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012262:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8012266:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 801226a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801226e:	f000 812e 	beq.w	80124ce <iNemoEngine_API_Update+0x60e>
 8012272:	2b02      	cmp	r3, #2
 8012274:	f000 8122 	beq.w	80124bc <iNemoEngine_API_Update+0x5fc>
 8012278:	2b00      	cmp	r3, #0
 801227a:	f000 80ef 	beq.w	801245c <iNemoEngine_API_Update+0x59c>
 801227e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012282:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 80121bc <iNemoEngine_API_Update+0x2fc>
 8012286:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 80121c0 <iNemoEngine_API_Update+0x300>
 801228a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801228e:	ee60 0a85 	vmul.f32	s1, s1, s10
 8012292:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012296:	8863      	ldrh	r3, [r4, #2]
 8012298:	1e5a      	subs	r2, r3, #1
 801229a:	2a12      	cmp	r2, #18
 801229c:	f200 80e7 	bhi.w	801246e <iNemoEngine_API_Update+0x5ae>
 80122a0:	3301      	adds	r3, #1
 80122a2:	b21a      	sxth	r2, r3
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	2b03      	cmp	r3, #3
 80122a8:	8062      	strh	r2, [r4, #2]
 80122aa:	f240 8115 	bls.w	80124d8 <iNemoEngine_API_Update+0x618>
 80122ae:	ee05 2a90 	vmov	s11, r2
 80122b2:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 80121c4 <iNemoEngine_API_Update+0x304>
 80122b6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80122ba:	ee65 5a85 	vmul.f32	s11, s11, s10
 80122be:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80122c2:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 80122c6:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 80122ca:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 80121c8 <iNemoEngine_API_Update+0x308>
 80122ce:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80122d2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80122d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80122da:	ee26 6a25 	vmul.f32	s12, s12, s11
 80122de:	ee27 7a05 	vmul.f32	s14, s14, s10
 80122e2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80122e6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80122ea:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80122ee:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80122f2:	aa1a      	add	r2, sp, #104	; 0x68
 80122f4:	af16      	add	r7, sp, #88	; 0x58
 80122f6:	e9cd 7200 	strd	r7, r2, [sp]
 80122fa:	ab12      	add	r3, sp, #72	; 0x48
 80122fc:	aa1e      	add	r2, sp, #120	; 0x78
 80122fe:	4641      	mov	r1, r8
 8012300:	4620      	mov	r0, r4
 8012302:	f7fa fd09 	bl	800cd18 <kalman_3gyro.constprop.0>
 8012306:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012308:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 801230c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8012310:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8012314:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8012318:	f8c7 a000 	str.w	sl, [r7]
 801231c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8012320:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8012324:	f8c7 e000 	str.w	lr, [r7]
 8012328:	f604 1748 	addw	r7, r4, #2376	; 0x948
 801232c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8012330:	f8c7 c000 	str.w	ip, [r7]
 8012334:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8012338:	6030      	str	r0, [r6, #0]
 801233a:	60f3      	str	r3, [r6, #12]
 801233c:	6071      	str	r1, [r6, #4]
 801233e:	60b2      	str	r2, [r6, #8]
 8012340:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8012344:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012348:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801234c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801234e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8012352:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8012356:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801235a:	edc3 7a00 	vstr	s15, [r3]
 801235e:	f8cb e000 	str.w	lr, [fp]
 8012362:	f8ca c000 	str.w	ip, [sl]
 8012366:	6030      	str	r0, [r6, #0]
 8012368:	e65f      	b.n	801202a <iNemoEngine_API_Update+0x16a>
 801236a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80121cc <iNemoEngine_API_Update+0x30c>
 801236e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012372:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8012376:	b041      	add	sp, #260	; 0x104
 8012378:	ecbd 8b0c 	vpop	{d8-d13}
 801237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012380:	ae0e      	add	r6, sp, #56	; 0x38
 8012382:	e5ab      	b.n	8011edc <iNemoEngine_API_Update+0x1c>
 8012384:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012388:	ee69 8a28 	vmul.f32	s17, s18, s17
 801238c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012390:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012394:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012398:	eee9 7a49 	vfms.f32	s15, s18, s18
 801239c:	ee17 0a90 	vmov	r0, s15
 80123a0:	f7ee f8d2 	bl	8000548 <__aeabi_f2d>
 80123a4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	ee17 0a90 	vmov	r0, s15
 80123b0:	ec43 2b18 	vmov	d8, r2, r3
 80123b4:	f7ee f8c8 	bl	8000548 <__aeabi_f2d>
 80123b8:	eeb0 1a48 	vmov.f32	s2, s16
 80123bc:	eef0 1a68 	vmov.f32	s3, s17
 80123c0:	ec41 0b10 	vmov	d0, r0, r1
 80123c4:	f003 fd40 	bl	8015e48 <atan2>
 80123c8:	a3f3      	add	r3, pc, #972	; (adr r3, 8012798 <iNemoEngine_API_Update+0x8d8>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	ec51 0b10 	vmov	r0, r1, d0
 80123d2:	f7ee f911 	bl	80005f8 <__aeabi_dmul>
 80123d6:	4bf2      	ldr	r3, [pc, #968]	; (80127a0 <iNemoEngine_API_Update+0x8e0>)
 80123d8:	2200      	movs	r2, #0
 80123da:	f7ed ff55 	bl	8000288 <__aeabi_dsub>
 80123de:	f7ee fbe3 	bl	8000ba8 <__aeabi_d2f>
 80123e2:	ee08 0a10 	vmov	s16, r0
 80123e6:	e6a0      	b.n	801212a <iNemoEngine_API_Update+0x26a>
 80123e8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80123ec:	ee69 8a28 	vmul.f32	s17, s18, s17
 80123f0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80123f4:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80123f8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80123fc:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012400:	ee17 0a90 	vmov	r0, s15
 8012404:	f7ee f8a0 	bl	8000548 <__aeabi_f2d>
 8012408:	ee78 7aa8 	vadd.f32	s15, s17, s17
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	ee17 0a90 	vmov	r0, s15
 8012414:	ec43 2b18 	vmov	d8, r2, r3
 8012418:	f7ee f896 	bl	8000548 <__aeabi_f2d>
 801241c:	eeb0 1a48 	vmov.f32	s2, s16
 8012420:	eef0 1a68 	vmov.f32	s3, s17
 8012424:	ec41 0b10 	vmov	d0, r0, r1
 8012428:	f003 fd0e 	bl	8015e48 <atan2>
 801242c:	a3da      	add	r3, pc, #872	; (adr r3, 8012798 <iNemoEngine_API_Update+0x8d8>)
 801242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012432:	ec51 0b10 	vmov	r0, r1, d0
 8012436:	f7ee f8df 	bl	80005f8 <__aeabi_dmul>
 801243a:	4bd9      	ldr	r3, [pc, #868]	; (80127a0 <iNemoEngine_API_Update+0x8e0>)
 801243c:	2200      	movs	r2, #0
 801243e:	f7ed ff25 	bl	800028c <__adddf3>
 8012442:	f7ee fbb1 	bl	8000ba8 <__aeabi_d2f>
 8012446:	ee08 0a10 	vmov	s16, r0
 801244a:	e66e      	b.n	801212a <iNemoEngine_API_Update+0x26a>
 801244c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012450:	2b00      	cmp	r3, #0
 8012452:	dd44      	ble.n	80124de <iNemoEngine_API_Update+0x61e>
 8012454:	3b01      	subs	r3, #1
 8012456:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801245a:	e55c      	b.n	8011f16 <iNemoEngine_API_Update+0x56>
 801245c:	8863      	ldrh	r3, [r4, #2]
 801245e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 80127a4 <iNemoEngine_API_Update+0x8e4>
 8012462:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80127a8 <iNemoEngine_API_Update+0x8e8>
 8012466:	1e5a      	subs	r2, r3, #1
 8012468:	2a12      	cmp	r2, #18
 801246a:	f67f af19 	bls.w	80122a0 <iNemoEngine_API_Update+0x3e0>
 801246e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8012472:	eddf 2ace 	vldr	s5, [pc, #824]	; 80127ac <iNemoEngine_API_Update+0x8ec>
 8012476:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 801247a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801247e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8012482:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8012486:	eec3 4a84 	vdiv.f32	s9, s7, s8
 801248a:	2300      	movs	r3, #0
 801248c:	8063      	strh	r3, [r4, #2]
 801248e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8012492:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8012496:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80127b0 <iNemoEngine_API_Update+0x8f0>
 801249a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 801249e:	ee65 6a26 	vmul.f32	s13, s10, s13
 80124a2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80124a6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80124aa:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 80124ae:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80124b2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80124b6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80124ba:	e71a      	b.n	80122f2 <iNemoEngine_API_Update+0x432>
 80124bc:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 80124c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80124c4:	edd4 0a05 	vldr	s1, [r4, #20]
 80124c8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80127b4 <iNemoEngine_API_Update+0x8f4>
 80124cc:	e6e3      	b.n	8012296 <iNemoEngine_API_Update+0x3d6>
 80124ce:	edd4 0a05 	vldr	s1, [r4, #20]
 80124d2:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80127b8 <iNemoEngine_API_Update+0x8f8>
 80124d6:	e6de      	b.n	8012296 <iNemoEngine_API_Update+0x3d6>
 80124d8:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80127bc <iNemoEngine_API_Update+0x8fc>
 80124dc:	e6ef      	b.n	80122be <iNemoEngine_API_Update+0x3fe>
 80124de:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 80124e2:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80124e6:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 80124ea:	ed97 5a00 	vldr	s10, [r7]
 80124ee:	ed92 da00 	vldr	s26, [r2]
 80124f2:	ed93 6a00 	vldr	s12, [r3]
 80124f6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80127a4 <iNemoEngine_API_Update+0x8e4>
 80124fa:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 80124fe:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8012502:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8012506:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 801250a:	ed91 3a00 	vldr	s6, [r1]
 801250e:	ed92 1a00 	vldr	s2, [r2]
 8012512:	ed97 7a00 	vldr	s14, [r7]
 8012516:	edd3 3a00 	vldr	s7, [r3]
 801251a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 801251e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8012522:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8012526:	ed91 ba00 	vldr	s22, [r1]
 801252a:	edd0 6a00 	vldr	s13, [r0]
 801252e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8012532:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8012536:	edd1 aa00 	vldr	s21, [r1]
 801253a:	ed92 2a00 	vldr	s4, [r2]
 801253e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8012542:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8012546:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 801254a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 801254e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8012552:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8012556:	edd0 7a00 	vldr	s15, [r0]
 801255a:	edd2 1a00 	vldr	s3, [r2]
 801255e:	ed93 ca00 	vldr	s24, [r3]
 8012562:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8012566:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 801256a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 801256e:	ed91 5a00 	vldr	s10, [r1]
 8012572:	edd0 5a00 	vldr	s11, [r0]
 8012576:	edd7 9a00 	vldr	s19, [r7]
 801257a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 801257e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8012582:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8012586:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 801258a:	edd0 2a00 	vldr	s5, [r0]
 801258e:	edd3 0a00 	vldr	s1, [r3]
 8012592:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8012596:	ee37 7a27 	vadd.f32	s14, s14, s15
 801259a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801259e:	edd7 7a00 	vldr	s15, [r7]
 80125a2:	edd0 5a00 	vldr	s11, [r0]
 80125a6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80125aa:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80125ae:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80125b2:	ed93 6a00 	vldr	s12, [r3]
 80125b6:	edda ba00 	vldr	s23, [sl]
 80125ba:	ed99 5a00 	vldr	s10, [r9]
 80125be:	ee76 6a83 	vadd.f32	s13, s13, s6
 80125c2:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 80125c6:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 80125ca:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80125ce:	eed7 5a84 	vfnms.f32	s11, s15, s8
 80125d2:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 80125d6:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 80125da:	eddc 4a00 	vldr	s9, [ip]
 80125de:	edd3 7a00 	vldr	s15, [r3]
 80125e2:	ed98 1a00 	vldr	s2, [r8]
 80125e6:	edde 8a00 	vldr	s17, [lr]
 80125ea:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 80125ee:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80125f2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80125f6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80125fa:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80125fe:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8012602:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8012606:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 801260a:	ed9c aa00 	vldr	s20, [ip]
 801260e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8012612:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8012616:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 801261a:	ed92 da00 	vldr	s26, [r2]
 801261e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8012622:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8012626:	ed91 ba00 	vldr	s22, [r1]
 801262a:	eef0 ca61 	vmov.f32	s25, s3
 801262e:	eddb 1a00 	vldr	s3, [fp]
 8012632:	edd3 ba00 	vldr	s23, [r3]
 8012636:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 801263a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 801263e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8012642:	1c53      	adds	r3, r2, #1
 8012644:	eeea 3a83 	vfma.f32	s7, s21, s6
 8012648:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 801264c:	edd8 aa00 	vldr	s21, [r8]
 8012650:	eee6 1a03 	vfma.f32	s3, s12, s6
 8012654:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8012658:	ed9e 6a00 	vldr	s12, [lr]
 801265c:	edd7 aa00 	vldr	s21, [r7]
 8012660:	eee6 7a03 	vfma.f32	s15, s12, s6
 8012664:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8012668:	ed9c 6a00 	vldr	s12, [ip]
 801266c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8012670:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8012674:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8012678:	ee2a 4a00 	vmul.f32	s8, s20, s0
 801267c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8012680:	ee62 2a80 	vmul.f32	s5, s5, s0
 8012684:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012688:	ed90 0a00 	vldr	s0, [r0]
 801268c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012690:	ee36 6a00 	vadd.f32	s12, s12, s0
 8012694:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012698:	ed91 0a00 	vldr	s0, [r1]
 801269c:	ee35 5a28 	vadd.f32	s10, s10, s17
 80126a0:	ee66 6a82 	vmul.f32	s13, s13, s4
 80126a4:	ee22 7a87 	vmul.f32	s14, s5, s14
 80126a8:	ee64 5a25 	vmul.f32	s11, s8, s11
 80126ac:	eee0 4a83 	vfma.f32	s9, s1, s6
 80126b0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80126b4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80126b8:	eea1 5a03 	vfma.f32	s10, s2, s6
 80126bc:	eea0 6a03 	vfma.f32	s12, s0, s6
 80126c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80126c4:	ee63 3a82 	vmul.f32	s7, s7, s4
 80126c8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80126cc:	ee62 1aa1 	vmul.f32	s3, s5, s3
 80126d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80126d4:	eee3 6aa3 	vfma.f32	s13, s7, s7
 80126d8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80126dc:	eea1 7aa1 	vfma.f32	s14, s3, s3
 80126e0:	ee24 6a06 	vmul.f32	s12, s8, s12
 80126e4:	ee62 4a24 	vmul.f32	s9, s4, s9
 80126e8:	ee22 5a85 	vmul.f32	s10, s5, s10
 80126ec:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80126f0:	eea5 7a05 	vfma.f32	s14, s10, s10
 80126f4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80126f8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80126fc:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012700:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012704:	ee07 3a90 	vmov	s15, r3
 8012708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801270c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012710:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8012714:	b21b      	sxth	r3, r3
 8012716:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801271a:	ee07 2a90 	vmov	s15, r2
 801271e:	ed90 4a00 	vldr	s8, [r0]
 8012722:	edd1 4a00 	vldr	s9, [r1]
 8012726:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801272a:	edd7 7a00 	vldr	s15, [r7]
 801272e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8012732:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8012736:	eea5 7aa4 	vfma.f32	s14, s11, s9
 801273a:	ee66 7a05 	vmul.f32	s15, s12, s10
 801273e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012742:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012746:	edc7 7a00 	vstr	s15, [r7]
 801274a:	edc0 6a00 	vstr	s13, [r0]
 801274e:	ed81 7a00 	vstr	s14, [r1]
 8012752:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8012756:	f47f abde 	bne.w	8011f16 <iNemoEngine_API_Update+0x56>
 801275a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801275e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012762:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012766:	ee67 7a86 	vmul.f32	s15, s15, s12
 801276a:	2300      	movs	r3, #0
 801276c:	2200      	movs	r2, #0
 801276e:	edc4 6a07 	vstr	s13, [r4, #28]
 8012772:	ed84 7a08 	vstr	s14, [r4, #32]
 8012776:	edc4 7a06 	vstr	s15, [r4, #24]
 801277a:	603b      	str	r3, [r7, #0]
 801277c:	6003      	str	r3, [r0, #0]
 801277e:	600b      	str	r3, [r1, #0]
 8012780:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8012784:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012788:	f7ff bbc5 	b.w	8011f16 <iNemoEngine_API_Update+0x56>
 801278c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80127c0 <iNemoEngine_API_Update+0x900>
 8012790:	e4da      	b.n	8012148 <iNemoEngine_API_Update+0x288>
 8012792:	bf00      	nop
 8012794:	f3af 8000 	nop.w
 8012798:	20000000 	.word	0x20000000
 801279c:	404ca5dc 	.word	0x404ca5dc
 80127a0:	40568000 	.word	0x40568000
 80127a4:	3dcccccd 	.word	0x3dcccccd
 80127a8:	3a83126f 	.word	0x3a83126f
 80127ac:	358637bd 	.word	0x358637bd
 80127b0:	3f333333 	.word	0x3f333333
 80127b4:	3727c5ac 	.word	0x3727c5ac
 80127b8:	3ac49ba6 	.word	0x3ac49ba6
 80127bc:	3e4ccccd 	.word	0x3e4ccccd
 80127c0:	00000000 	.word	0x00000000

080127c4 <MEMS_getSensorData_I16>:
 80127c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127c8:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80127cc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80127d0:	68c5      	ldr	r5, [r0, #12]
 80127d2:	4596      	cmp	lr, r2
 80127d4:	fa1f f882 	uxth.w	r8, r2
 80127d8:	d94d      	bls.n	8012876 <MEMS_getSensorData_I16+0xb2>
 80127da:	f10e 33ff 	add.w	r3, lr, #4294967295
 80127de:	fb04 5313 	mls	r3, r4, r3, r5
 80127e2:	ebae 0c02 	sub.w	ip, lr, r2
 80127e6:	f8a1 8004 	strh.w	r8, [r1, #4]
 80127ea:	600b      	str	r3, [r1, #0]
 80127ec:	fa5f fc8c 	uxtb.w	ip, ip
 80127f0:	4647      	mov	r7, r8
 80127f2:	f1b8 0f00 	cmp.w	r8, #0
 80127f6:	d017      	beq.n	8012828 <MEMS_getSensorData_I16+0x64>
 80127f8:	688e      	ldr	r6, [r1, #8]
 80127fa:	6905      	ldr	r5, [r0, #16]
 80127fc:	2300      	movs	r3, #0
 80127fe:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8012802:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8012806:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801280a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801280e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8012812:	f8c1 9002 	str.w	r9, [r1, #2]
 8012816:	3301      	adds	r3, #1
 8012818:	88e4      	ldrh	r4, [r4, #6]
 801281a:	80cc      	strh	r4, [r1, #6]
 801281c:	b2d9      	uxtb	r1, r3
 801281e:	42b9      	cmp	r1, r7
 8012820:	460b      	mov	r3, r1
 8012822:	d3ec      	bcc.n	80127fe <MEMS_getSensorData_I16+0x3a>
 8012824:	45c6      	cmp	lr, r8
 8012826:	d934      	bls.n	8012892 <MEMS_getSensorData_I16+0xce>
 8012828:	ebae 0308 	sub.w	r3, lr, r8
 801282c:	b29b      	uxth	r3, r3
 801282e:	8103      	strh	r3, [r0, #8]
 8012830:	f1bc 0f00 	cmp.w	ip, #0
 8012834:	d01d      	beq.n	8012872 <MEMS_getSensorData_I16+0xae>
 8012836:	6903      	ldr	r3, [r0, #16]
 8012838:	f10c 3cff 	add.w	ip, ip, #4294967295
 801283c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012840:	f103 000a 	add.w	r0, r3, #10
 8012844:	fa5f fc8c 	uxtb.w	ip, ip
 8012848:	3202      	adds	r2, #2
 801284a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801284e:	3302      	adds	r3, #2
 8012850:	2400      	movs	r4, #0
 8012852:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012856:	f803 1c02 	strb.w	r1, [r3, #-2]
 801285a:	6811      	ldr	r1, [r2, #0]
 801285c:	6019      	str	r1, [r3, #0]
 801285e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012862:	8099      	strh	r1, [r3, #4]
 8012864:	3308      	adds	r3, #8
 8012866:	4283      	cmp	r3, r0
 8012868:	f802 4c02 	strb.w	r4, [r2, #-2]
 801286c:	f102 0208 	add.w	r2, r2, #8
 8012870:	d1ef      	bne.n	8012852 <MEMS_getSensorData_I16+0x8e>
 8012872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012876:	f10e 33ff 	add.w	r3, lr, #4294967295
 801287a:	fb04 5313 	mls	r3, r4, r3, r5
 801287e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012882:	600b      	str	r3, [r1, #0]
 8012884:	f1be 0f00 	cmp.w	lr, #0
 8012888:	d005      	beq.n	8012896 <MEMS_getSensorData_I16+0xd2>
 801288a:	4677      	mov	r7, lr
 801288c:	f04f 0c00 	mov.w	ip, #0
 8012890:	e7b2      	b.n	80127f8 <MEMS_getSensorData_I16+0x34>
 8012892:	2300      	movs	r3, #0
 8012894:	e7cb      	b.n	801282e <MEMS_getSensorData_I16+0x6a>
 8012896:	f8a0 e008 	strh.w	lr, [r0, #8]
 801289a:	e7ea      	b.n	8012872 <MEMS_getSensorData_I16+0xae>

0801289c <MEMS_SolveLinearEq>:
 801289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a0:	ed2d 8b0c 	vpush	{d8-d13}
 80128a4:	4617      	mov	r7, r2
 80128a6:	2400      	movs	r4, #0
 80128a8:	b0a9      	sub	sp, #164	; 0xa4
 80128aa:	2200      	movs	r2, #0
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	460d      	mov	r5, r1
 80128b0:	2240      	movs	r2, #64	; 0x40
 80128b2:	4621      	mov	r1, r4
 80128b4:	4680      	mov	r8, r0
 80128b6:	603c      	str	r4, [r7, #0]
 80128b8:	607c      	str	r4, [r7, #4]
 80128ba:	60bc      	str	r4, [r7, #8]
 80128bc:	60fc      	str	r4, [r7, #12]
 80128be:	a808      	add	r0, sp, #32
 80128c0:	461e      	mov	r6, r3
 80128c2:	eeb0 8a40 	vmov.f32	s16, s0
 80128c6:	e9cd 4400 	strd	r4, r4, [sp]
 80128ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80128ce:	f005 f855 	bl	801797c <memset>
 80128d2:	4621      	mov	r1, r4
 80128d4:	a818      	add	r0, sp, #96	; 0x60
 80128d6:	2240      	movs	r2, #64	; 0x40
 80128d8:	f005 f850 	bl	801797c <memset>
 80128dc:	edd5 2a03 	vldr	s5, [r5, #12]
 80128e0:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012c74 <MEMS_SolveLinearEq+0x3d8>
 80128e4:	eef4 2ae7 	vcmpe.f32	s5, s15
 80128e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ec:	d47e      	bmi.n	80129ec <MEMS_SolveLinearEq+0x150>
 80128ee:	f898 1000 	ldrb.w	r1, [r8]
 80128f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80128f6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80128fa:	4291      	cmp	r1, r2
 80128fc:	d07c      	beq.n	80129f8 <MEMS_SolveLinearEq+0x15c>
 80128fe:	3301      	adds	r3, #1
 8012900:	1a58      	subs	r0, r3, r1
 8012902:	fb90 f3f2 	sdiv	r3, r0, r2
 8012906:	fb02 0313 	mls	r3, r2, r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	bfb8      	it	lt
 801290e:	189b      	addlt	r3, r3, r2
 8012910:	b21b      	sxth	r3, r3
 8012912:	2900      	cmp	r1, #0
 8012914:	f000 81d6 	beq.w	8012cc4 <MEMS_SolveLinearEq+0x428>
 8012918:	3901      	subs	r1, #1
 801291a:	b2c9      	uxtb	r1, r1
 801291c:	3101      	adds	r1, #1
 801291e:	edd5 3a00 	vldr	s7, [r5]
 8012922:	ed95 4a01 	vldr	s8, [r5, #4]
 8012926:	edd5 4a02 	vldr	s9, [r5, #8]
 801292a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 801292e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012c78 <MEMS_SolveLinearEq+0x3dc>
 8012932:	4419      	add	r1, r3
 8012934:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012938:	fb93 f4f2 	sdiv	r4, r3, r2
 801293c:	fb02 3414 	mls	r4, r2, r4, r3
 8012940:	b2e4      	uxtb	r4, r4
 8012942:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012946:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 801294a:	ee07 0a90 	vmov	s15, r0
 801294e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012956:	ee06 0a10 	vmov	s12, r0
 801295a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801295e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8012962:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012966:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801296a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801296e:	ee07 0a10 	vmov	s14, r0
 8012972:	ee36 5a63 	vsub.f32	s10, s12, s7
 8012976:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801297a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801297e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8012982:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012986:	ee33 6ac6 	vsub.f32	s12, s7, s12
 801298a:	ee74 aac7 	vsub.f32	s21, s9, s14
 801298e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012992:	ee74 7a67 	vsub.f32	s15, s8, s15
 8012996:	eee7 6a07 	vfma.f32	s13, s14, s14
 801299a:	eef4 6ac2 	vcmpe.f32	s13, s4
 801299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a2:	d531      	bpl.n	8012a08 <MEMS_SolveLinearEq+0x16c>
 80129a4:	3301      	adds	r3, #1
 80129a6:	4299      	cmp	r1, r3
 80129a8:	d1c6      	bne.n	8012938 <MEMS_SolveLinearEq+0x9c>
 80129aa:	eef0 7a65 	vmov.f32	s15, s11
 80129ae:	2101      	movs	r1, #1
 80129b0:	4608      	mov	r0, r1
 80129b2:	2200      	movs	r2, #0
 80129b4:	e006      	b.n	80129c4 <MEMS_SolveLinearEq+0x128>
 80129b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80129ba:	ac28      	add	r4, sp, #160	; 0xa0
 80129bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129c0:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 80129c4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80129c8:	3001      	adds	r0, #1
 80129ca:	ac28      	add	r4, sp, #160	; 0xa0
 80129cc:	b2c0      	uxtb	r0, r0
 80129ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129d2:	2804      	cmp	r0, #4
 80129d4:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 80129d8:	4613      	mov	r3, r2
 80129da:	d1ec      	bne.n	80129b6 <MEMS_SolveLinearEq+0x11a>
 80129dc:	1c48      	adds	r0, r1, #1
 80129de:	b2c0      	uxtb	r0, r0
 80129e0:	2804      	cmp	r0, #4
 80129e2:	d076      	beq.n	8012ad2 <MEMS_SolveLinearEq+0x236>
 80129e4:	460b      	mov	r3, r1
 80129e6:	460a      	mov	r2, r1
 80129e8:	4601      	mov	r1, r0
 80129ea:	e7e4      	b.n	80129b6 <MEMS_SolveLinearEq+0x11a>
 80129ec:	2000      	movs	r0, #0
 80129ee:	b029      	add	sp, #164	; 0xa4
 80129f0:	ecbd 8b0c 	vpop	{d8-d13}
 80129f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f8:	1c5a      	adds	r2, r3, #1
 80129fa:	fb92 f3f1 	sdiv	r3, r2, r1
 80129fe:	fb01 2313 	mls	r3, r1, r3, r2
 8012a02:	b21b      	sxth	r3, r3
 8012a04:	460a      	mov	r2, r1
 8012a06:	e784      	b.n	8012912 <MEMS_SolveLinearEq+0x76>
 8012a08:	eef1 cae6 	vsqrt.f32	s25, s13
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	428b      	cmp	r3, r1
 8012a10:	ed9d ca00 	vldr	s24, [sp]
 8012a14:	eddd ba08 	vldr	s23, [sp, #32]
 8012a18:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8012a1c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012a20:	eddd 9a02 	vldr	s19, [sp, #8]
 8012a24:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012a28:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8012a2c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012a30:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012a34:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012a38:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8012a3c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012a40:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012a44:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012a48:	ee3d da21 	vadd.f32	s26, s26, s3
 8012a4c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012a50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a54:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012a58:	ee72 aaec 	vsub.f32	s21, s5, s25
 8012a5c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012a60:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012a64:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012a68:	eeaa ca87 	vfma.f32	s24, s21, s14
 8012a6c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012a70:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012a74:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012a78:	eea7 9aa7 	vfma.f32	s18, s15, s15
 8012a7c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012a80:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012a84:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012a88:	ee30 6a06 	vadd.f32	s12, s0, s12
 8012a8c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012a90:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012a94:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012a98:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8012a9c:	ed8d ca00 	vstr	s24, [sp]
 8012aa0:	edcd ba08 	vstr	s23, [sp, #32]
 8012aa4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8012aa8:	ed8d aa01 	vstr	s20, [sp, #4]
 8012aac:	edcd 9a02 	vstr	s19, [sp, #8]
 8012ab0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012ab4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012ab8:	ed8d 6a03 	vstr	s12, [sp, #12]
 8012abc:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012ac0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012ac4:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012ac8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8012acc:	f47f af34 	bne.w	8012938 <MEMS_SolveLinearEq+0x9c>
 8012ad0:	e76b      	b.n	80129aa <MEMS_SolveLinearEq+0x10e>
 8012ad2:	2240      	movs	r2, #64	; 0x40
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	a818      	add	r0, sp, #96	; 0x60
 8012ad8:	f004 ff50 	bl	801797c <memset>
 8012adc:	ab08      	add	r3, sp, #32
 8012ade:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012c7c <MEMS_SolveLinearEq+0x3e0>
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	aa18      	add	r2, sp, #96	; 0x60
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	b24c      	sxtb	r4, r1
 8012aea:	2900      	cmp	r1, #0
 8012aec:	f000 80b5 	beq.w	8012c5a <MEMS_SolveLinearEq+0x3be>
 8012af0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012af4:	eeb0 7ae7 	vabs.f32	s14, s15
 8012af8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b00:	f53f af74 	bmi.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012b04:	ed93 7a00 	vldr	s14, [r3]
 8012b08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012b0c:	2c01      	cmp	r4, #1
 8012b0e:	edc2 6a00 	vstr	s13, [r2]
 8012b12:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b1a:	f000 80b5 	beq.w	8012c88 <MEMS_SolveLinearEq+0x3ec>
 8012b1e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012b22:	eeb0 7ac6 	vabs.f32	s14, s12
 8012b26:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2e:	f53f af5d 	bmi.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8012b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b3a:	2c02      	cmp	r4, #2
 8012b3c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012b40:	edc2 7a01 	vstr	s15, [r2, #4]
 8012b44:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012b48:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8012b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012b50:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012b54:	f000 80a7 	beq.w	8012ca6 <MEMS_SolveLinearEq+0x40a>
 8012b58:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8012b5c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012b60:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b68:	f53f af40 	bmi.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012b6c:	edd3 5a02 	vldr	s11, [r3, #8]
 8012b70:	ed90 6a00 	vldr	s12, [r0]
 8012b74:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012b78:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8012b7c:	edc2 5a02 	vstr	s11, [r2, #8]
 8012b80:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012b84:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012b88:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012b8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b90:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012b94:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012b98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba0:	f77f af24 	ble.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012ba4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012ba8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012bac:	ed82 7a03 	vstr	s14, [r2, #12]
 8012bb0:	3101      	adds	r1, #1
 8012bb2:	2904      	cmp	r1, #4
 8012bb4:	f103 0310 	add.w	r3, r3, #16
 8012bb8:	f102 0210 	add.w	r2, r2, #16
 8012bbc:	f100 0014 	add.w	r0, r0, #20
 8012bc0:	d192      	bne.n	8012ae8 <MEMS_SolveLinearEq+0x24c>
 8012bc2:	466a      	mov	r2, sp
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	a818      	add	r0, sp, #96	; 0x60
 8012bc8:	f7f9 f9f2 	bl	800bfb0 <llEvaluate.constprop.0>
 8012bcc:	4b2c      	ldr	r3, [pc, #176]	; (8012c80 <MEMS_SolveLinearEq+0x3e4>)
 8012bce:	6033      	str	r3, [r6, #0]
 8012bd0:	f10d 0910 	add.w	r9, sp, #16
 8012bd4:	46e8      	mov	r8, sp
 8012bd6:	f10d 0b0c 	add.w	fp, sp, #12
 8012bda:	2400      	movs	r4, #0
 8012bdc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012be0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012be4:	e9cd 4400 	strd	r4, r4, [sp]
 8012be8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012bec:	466a      	mov	r2, sp
 8012bee:	f848 ab04 	str.w	sl, [r8], #4
 8012bf2:	a904      	add	r1, sp, #16
 8012bf4:	a818      	add	r0, sp, #96	; 0x60
 8012bf6:	f7f9 f9db 	bl	800bfb0 <llEvaluate.constprop.0>
 8012bfa:	ecf9 7a01 	vldmia	r9!, {s15}
 8012bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c06:	dd23      	ble.n	8012c50 <MEMS_SolveLinearEq+0x3b4>
 8012c08:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c0c:	edd6 7a00 	vldr	s15, [r6]
 8012c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c18:	bfb8      	it	lt
 8012c1a:	eef0 7a47 	vmovlt.f32	s15, s14
 8012c1e:	45c3      	cmp	fp, r8
 8012c20:	edc6 7a00 	vstr	s15, [r6]
 8012c24:	d1de      	bne.n	8012be4 <MEMS_SolveLinearEq+0x348>
 8012c26:	edd5 7a03 	vldr	s15, [r5, #12]
 8012c2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c2e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012c32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c36:	2001      	movs	r0, #1
 8012c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	bf48      	it	mi
 8012c42:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012c46:	b029      	add	sp, #164	; 0xa4
 8012c48:	ecbd 8b0c 	vpop	{d8-d13}
 8012c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c50:	45c3      	cmp	fp, r8
 8012c52:	ed86 0a00 	vstr	s0, [r6]
 8012c56:	d1c5      	bne.n	8012be4 <MEMS_SolveLinearEq+0x348>
 8012c58:	e7e5      	b.n	8012c26 <MEMS_SolveLinearEq+0x38a>
 8012c5a:	edd0 7a00 	vldr	s15, [r0]
 8012c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	f77f aec1 	ble.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012c6a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c6e:	ed82 7a00 	vstr	s14, [r2]
 8012c72:	e79d      	b.n	8012bb0 <MEMS_SolveLinearEq+0x314>
 8012c74:	3dcccccd 	.word	0x3dcccccd
 8012c78:	2b8cbccb 	.word	0x2b8cbccb
 8012c7c:	358637bd 	.word	0x358637bd
 8012c80:	3dcccccd 	.word	0x3dcccccd
 8012c84:	00000000 	.word	0x00000000
 8012c88:	ed90 7a00 	vldr	s14, [r0]
 8012c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	f77f aeaa 	ble.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c9c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012ca0:	ed82 7a01 	vstr	s14, [r2, #4]
 8012ca4:	e784      	b.n	8012bb0 <MEMS_SolveLinearEq+0x314>
 8012ca6:	edd0 7a00 	vldr	s15, [r0]
 8012caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb2:	f77f ae9b 	ble.w	80129ec <MEMS_SolveLinearEq+0x150>
 8012cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012cba:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012cbe:	ed82 7a02 	vstr	s14, [r2, #8]
 8012cc2:	e775      	b.n	8012bb0 <MEMS_SolveLinearEq+0x314>
 8012cc4:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012c84 <MEMS_SolveLinearEq+0x3e8>
 8012cc8:	e671      	b.n	80129ae <MEMS_SolveLinearEq+0x112>
 8012cca:	bf00      	nop

08012ccc <MEMS_EIG3>:
 8012ccc:	edd0 6a02 	vldr	s13, [r0, #8]
 8012cd0:	ed90 7a01 	vldr	s14, [r0, #4]
 8012cd4:	edd0 4a04 	vldr	s9, [r0, #16]
 8012cd8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012e28 <MEMS_EIG3+0x15c>
 8012cdc:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	ed2d 8b04 	vpush	{d8-d9}
 8012cec:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012cf0:	b08a      	sub	sp, #40	; 0x28
 8012cf2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfa:	d509      	bpl.n	8012d10 <MEMS_EIG3+0x44>
 8012cfc:	6803      	ldr	r3, [r0, #0]
 8012cfe:	600b      	str	r3, [r1, #0]
 8012d00:	68c3      	ldr	r3, [r0, #12]
 8012d02:	604b      	str	r3, [r1, #4]
 8012d04:	6943      	ldr	r3, [r0, #20]
 8012d06:	608b      	str	r3, [r1, #8]
 8012d08:	b00a      	add	sp, #40	; 0x28
 8012d0a:	ecbd 8b04 	vpop	{d8-d9}
 8012d0e:	bd10      	pop	{r4, pc}
 8012d10:	ed90 4a00 	vldr	s8, [r0]
 8012d14:	edd0 5a03 	vldr	s11, [r0, #12]
 8012d18:	edd0 2a05 	vldr	s5, [r0, #20]
 8012d1c:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012e2c <MEMS_EIG3+0x160>
 8012d20:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012e30 <MEMS_EIG3+0x164>
 8012d24:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012d28:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012d2c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012d30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012d34:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012d38:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012d3c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012d40:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012d44:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012d48:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012d4c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012d50:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012d54:	eef0 7a45 	vmov.f32	s15, s10
 8012d58:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012d5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d60:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012d64:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012d68:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012d6c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012d70:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012d74:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012d78:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012d7c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012d80:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012d84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d88:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012d8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d90:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012d94:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012d98:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012d9c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012da0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012da4:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dac:	d909      	bls.n	8012dc2 <MEMS_EIG3+0xf6>
 8012dae:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012db6:	db22      	blt.n	8012dfe <MEMS_EIG3+0x132>
 8012db8:	eeb0 9a40 	vmov.f32	s18, s0
 8012dbc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012e34 <MEMS_EIG3+0x168>
 8012dc0:	e003      	b.n	8012dca <MEMS_EIG3+0xfe>
 8012dc2:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012e38 <MEMS_EIG3+0x16c>
 8012dc6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012dca:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012dce:	eef0 7a48 	vmov.f32	s15, s16
 8012dd2:	eeb0 7a48 	vmov.f32	s14, s16
 8012dd6:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012dda:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012dde:	edc4 7a00 	vstr	s15, [r4]
 8012de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012de6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012dea:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012dee:	ed84 7a02 	vstr	s14, [r4, #8]
 8012df2:	edc4 7a01 	vstr	s15, [r4, #4]
 8012df6:	b00a      	add	sp, #40	; 0x28
 8012df8:	ecbd 8b04 	vpop	{d8-d9}
 8012dfc:	bd10      	pop	{r4, pc}
 8012dfe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012e02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012e06:	f003 f855 	bl	8015eb4 <acosf>
 8012e0a:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012e0e:	eeb0 0a69 	vmov.f32	s0, s19
 8012e12:	f002 ff49 	bl	8015ca8 <cosf>
 8012e16:	eeb0 9a40 	vmov.f32	s18, s0
 8012e1a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012e3c <MEMS_EIG3+0x170>
 8012e1e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012e22:	f002 ff41 	bl	8015ca8 <cosf>
 8012e26:	e7d0      	b.n	8012dca <MEMS_EIG3+0xfe>
 8012e28:	358637bd 	.word	0x358637bd
 8012e2c:	3eaaaaab 	.word	0x3eaaaaab
 8012e30:	3e2aaaab 	.word	0x3e2aaaab
 8012e34:	bf000001 	.word	0xbf000001
 8012e38:	3effffff 	.word	0x3effffff
 8012e3c:	40060a92 	.word	0x40060a92

08012e40 <MEMS_runMagCal>:
 8012e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e44:	ed2d 8b0a 	vpush	{d8-d12}
 8012e48:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012e4c:	2282      	movs	r2, #130	; 0x82
 8012e4e:	ab36      	add	r3, sp, #216	; 0xd8
 8012e50:	460c      	mov	r4, r1
 8012e52:	9105      	str	r1, [sp, #20]
 8012e54:	4683      	mov	fp, r0
 8012e56:	4608      	mov	r0, r1
 8012e58:	a917      	add	r1, sp, #92	; 0x5c
 8012e5a:	9319      	str	r3, [sp, #100]	; 0x64
 8012e5c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012e60:	f7ff fcb0 	bl	80127c4 <MEMS_getSensorData_I16>
 8012e64:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012e68:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012e6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8012e70:	f108 31ff 	add.w	r1, r8, #4294967295
 8012e74:	9106      	str	r1, [sp, #24]
 8012e76:	fb01 2103 	mla	r1, r1, r3, r2
 8012e7a:	9108      	str	r1, [sp, #32]
 8012e7c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012e80:	f1b8 0f00 	cmp.w	r8, #0
 8012e84:	f000 8417 	beq.w	80136b6 <MEMS_runMagCal+0x876>
 8012e88:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012e90:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012e94:	fb02 f203 	mul.w	r2, r2, r3
 8012e98:	31a0      	adds	r1, #160	; 0xa0
 8012e9a:	4291      	cmp	r1, r2
 8012e9c:	f080 8411 	bcs.w	80136c2 <MEMS_runMagCal+0x882>
 8012ea0:	3b00      	subs	r3, #0
 8012ea2:	bf18      	it	ne
 8012ea4:	2301      	movne	r3, #1
 8012ea6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012eb0:	f8cb 200c 	str.w	r2, [fp, #12]
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012eba:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012ebe:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012ec2:	22ff      	movs	r2, #255	; 0xff
 8012ec4:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012ec8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012ecc:	4cd5      	ldr	r4, [pc, #852]	; (8013224 <MEMS_runMagCal+0x3e4>)
 8012ece:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8013230 <MEMS_runMagCal+0x3f0>
 8012ed2:	9b05      	ldr	r3, [sp, #20]
 8012ed4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012ed8:	edd3 5a01 	vldr	s11, [r3, #4]
 8012edc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012ee0:	4652      	mov	r2, sl
 8012ee2:	2a03      	cmp	r2, #3
 8012ee4:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012ee8:	bf28      	it	cs
 8012eea:	2203      	movcs	r2, #3
 8012eec:	2100      	movs	r1, #0
 8012eee:	9207      	str	r2, [sp, #28]
 8012ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ef4:	464b      	mov	r3, r9
 8012ef6:	9402      	str	r4, [sp, #8]
 8012ef8:	4627      	mov	r7, r4
 8012efa:	9503      	str	r5, [sp, #12]
 8012efc:	462e      	mov	r6, r5
 8012efe:	460a      	mov	r2, r1
 8012f00:	9404      	str	r4, [sp, #16]
 8012f02:	7818      	ldrb	r0, [r3, #0]
 8012f04:	3201      	adds	r2, #1
 8012f06:	b292      	uxth	r2, r2
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	d04b      	beq.n	8012fa4 <MEMS_runMagCal+0x164>
 8012f0c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012f10:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012f14:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012f18:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012f1c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012f20:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012f24:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012f28:	9c02      	ldr	r4, [sp, #8]
 8012f2a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012f2e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012f32:	ee07 ea90 	vmov	s15, lr
 8012f36:	ee07 ca10 	vmov	s14, ip
 8012f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f42:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012f46:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012f4a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012f4e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012f52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012f56:	4574      	cmp	r4, lr
 8012f58:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012f5c:	bfb8      	it	lt
 8012f5e:	4674      	movlt	r4, lr
 8012f60:	9402      	str	r4, [sp, #8]
 8012f62:	ee07 0a10 	vmov	s14, r0
 8012f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f6a:	9c03      	ldr	r4, [sp, #12]
 8012f6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012f70:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012f74:	4574      	cmp	r4, lr
 8012f76:	bfa8      	it	ge
 8012f78:	4674      	movge	r4, lr
 8012f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012f7e:	4567      	cmp	r7, ip
 8012f80:	9403      	str	r4, [sp, #12]
 8012f82:	9c04      	ldr	r4, [sp, #16]
 8012f84:	bfb8      	it	lt
 8012f86:	4667      	movlt	r7, ip
 8012f88:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012f8c:	4566      	cmp	r6, ip
 8012f8e:	bfa8      	it	ge
 8012f90:	4666      	movge	r6, ip
 8012f92:	4284      	cmp	r4, r0
 8012f94:	bfb8      	it	lt
 8012f96:	4604      	movlt	r4, r0
 8012f98:	3101      	adds	r1, #1
 8012f9a:	4285      	cmp	r5, r0
 8012f9c:	b249      	sxtb	r1, r1
 8012f9e:	9404      	str	r4, [sp, #16]
 8012fa0:	bfa8      	it	ge
 8012fa2:	4605      	movge	r5, r0
 8012fa4:	9807      	ldr	r0, [sp, #28]
 8012fa6:	4282      	cmp	r2, r0
 8012fa8:	f103 0308 	add.w	r3, r3, #8
 8012fac:	d9a9      	bls.n	8012f02 <MEMS_runMagCal+0xc2>
 8012fae:	4590      	cmp	r8, r2
 8012fb0:	9c04      	ldr	r4, [sp, #16]
 8012fb2:	f240 8767 	bls.w	8013e84 <MEMS_runMagCal+0x1044>
 8012fb6:	ebaa 0a02 	sub.w	sl, sl, r2
 8012fba:	fa12 fa8a 	uxtah	sl, r2, sl
 8012fbe:	f109 0308 	add.w	r3, r9, #8
 8012fc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012fc6:	9307      	str	r3, [sp, #28]
 8012fc8:	2300      	movs	r3, #0
 8012fca:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012fce:	9304      	str	r3, [sp, #16]
 8012fd0:	7813      	ldrb	r3, [r2, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f000 8096 	beq.w	8013104 <MEMS_runMagCal+0x2c4>
 8012fd8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012fdc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012fe0:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012fe4:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012fe8:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012fec:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012ff0:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012ff4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012ff8:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012ffc:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8013000:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8013004:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8013008:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 801300c:	ebae 0808 	sub.w	r8, lr, r8
 8013010:	eba0 000a 	sub.w	r0, r0, sl
 8013014:	ee07 ca10 	vmov	s14, ip
 8013018:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801301c:	ee07 0a90 	vmov	s15, r0
 8013020:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8013024:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8013028:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 801302c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013030:	eba3 030a 	sub.w	r3, r3, sl
 8013034:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801303c:	ee06 ea90 	vmov	s13, lr
 8013040:	ebac 0909 	sub.w	r9, ip, r9
 8013044:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8013048:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 801304c:	eef0 7ae7 	vabs.f32	s15, s15
 8013050:	ee06 9a90 	vmov	s13, r9
 8013054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013060:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8013064:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8013068:	eef0 6ae6 	vabs.f32	s13, s13
 801306c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013070:	eba0 0808 	sub.w	r8, r0, r8
 8013074:	ee06 0a90 	vmov	s13, r0
 8013078:	eba3 0309 	sub.w	r3, r3, r9
 801307c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8013080:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8013084:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013088:	9b02      	ldr	r3, [sp, #8]
 801308a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801308e:	4577      	cmp	r7, lr
 8013090:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013094:	ee06 8a90 	vmov	s13, r8
 8013098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801309c:	bfb8      	it	lt
 801309e:	4677      	movlt	r7, lr
 80130a0:	4576      	cmp	r6, lr
 80130a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80130a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130aa:	bfa8      	it	ge
 80130ac:	4676      	movge	r6, lr
 80130ae:	4563      	cmp	r3, ip
 80130b0:	bfb8      	it	lt
 80130b2:	4663      	movlt	r3, ip
 80130b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130b8:	eea5 7a05 	vfma.f32	s14, s10, s10
 80130bc:	9302      	str	r3, [sp, #8]
 80130be:	9b03      	ldr	r3, [sp, #12]
 80130c0:	eef0 6ae6 	vabs.f32	s13, s13
 80130c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130c8:	4563      	cmp	r3, ip
 80130ca:	ee36 6a44 	vsub.f32	s12, s12, s8
 80130ce:	bfa8      	it	ge
 80130d0:	4663      	movge	r3, ip
 80130d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130d6:	4284      	cmp	r4, r0
 80130d8:	ee37 0a00 	vadd.f32	s0, s14, s0
 80130dc:	bfb8      	it	lt
 80130de:	4604      	movlt	r4, r0
 80130e0:	ee26 7a24 	vmul.f32	s14, s12, s9
 80130e4:	4285      	cmp	r5, r0
 80130e6:	bfa8      	it	ge
 80130e8:	4605      	movge	r5, r0
 80130ea:	9303      	str	r3, [sp, #12]
 80130ec:	ee17 0a90 	vmov	r0, s15
 80130f0:	9b04      	ldr	r3, [sp, #16]
 80130f2:	eea7 0a07 	vfma.f32	s0, s14, s14
 80130f6:	4283      	cmp	r3, r0
 80130f8:	f101 0101 	add.w	r1, r1, #1
 80130fc:	bf38      	it	cc
 80130fe:	4603      	movcc	r3, r0
 8013100:	b249      	sxtb	r1, r1
 8013102:	9304      	str	r3, [sp, #16]
 8013104:	9b07      	ldr	r3, [sp, #28]
 8013106:	3208      	adds	r2, #8
 8013108:	4293      	cmp	r3, r2
 801310a:	f47f af61 	bne.w	8012fd0 <MEMS_runMagCal+0x190>
 801310e:	2900      	cmp	r1, #0
 8013110:	f000 86b6 	beq.w	8013e80 <MEMS_runMagCal+0x1040>
 8013114:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8013118:	f280 82df 	bge.w	80136da <MEMS_runMagCal+0x89a>
 801311c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8013120:	f2c0 82db 	blt.w	80136da <MEMS_runMagCal+0x89a>
 8013124:	9b02      	ldr	r3, [sp, #8]
 8013126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801312a:	f280 82d6 	bge.w	80136da <MEMS_runMagCal+0x89a>
 801312e:	9a03      	ldr	r2, [sp, #12]
 8013130:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8013134:	f2c0 82d1 	blt.w	80136da <MEMS_runMagCal+0x89a>
 8013138:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801313c:	f280 82cd 	bge.w	80136da <MEMS_runMagCal+0x89a>
 8013140:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8013144:	f2c0 82c9 	blt.w	80136da <MEMS_runMagCal+0x89a>
 8013148:	ee07 1a90 	vmov	s15, r1
 801314c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013154:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8013158:	1bbe      	subs	r6, r7, r6
 801315a:	1a9f      	subs	r7, r3, r2
 801315c:	42be      	cmp	r6, r7
 801315e:	4633      	mov	r3, r6
 8013160:	eba4 0405 	sub.w	r4, r4, r5
 8013164:	bfb8      	it	lt
 8013166:	463b      	movlt	r3, r7
 8013168:	42a3      	cmp	r3, r4
 801316a:	bfb8      	it	lt
 801316c:	4623      	movlt	r3, r4
 801316e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8013172:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013176:	ee07 3a10 	vmov	s14, r3
 801317a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013228 <MEMS_runMagCal+0x3e8>
 801317e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013186:	ee25 0a80 	vmul.f32	s0, s11, s0
 801318a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013192:	f100 82a2 	bmi.w	80136da <MEMS_runMagCal+0x89a>
 8013196:	eddd 7a04 	vldr	s15, [sp, #16]
 801319a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 801322c <MEMS_runMagCal+0x3ec>
 801319e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131a2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80131a6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80131aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ae:	f300 8294 	bgt.w	80136da <MEMS_runMagCal+0x89a>
 80131b2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80131b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80131ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c2:	f301 81f8 	bgt.w	80145b6 <MEMS_runMagCal+0x1776>
 80131c6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80131ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	f340 8552 	ble.w	8013c7e <MEMS_runMagCal+0xe3e>
 80131da:	ee07 6a90 	vmov	s15, r6
 80131de:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80131e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80131ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ee:	f340 8546 	ble.w	8013c7e <MEMS_runMagCal+0xe3e>
 80131f2:	ee07 7a90 	vmov	s15, r7
 80131f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80131fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013202:	f140 853c 	bpl.w	8013c7e <MEMS_runMagCal+0xe3e>
 8013206:	ee07 4a90 	vmov	s15, r4
 801320a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801320e:	2300      	movs	r3, #0
 8013210:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013218:	9303      	str	r3, [sp, #12]
 801321a:	bf48      	it	mi
 801321c:	2301      	movmi	r3, #1
 801321e:	9307      	str	r3, [sp, #28]
 8013220:	f000 bd30 	b.w	8013c84 <MEMS_runMagCal+0xe44>
 8013224:	ffff8000 	.word	0xffff8000
 8013228:	43020000 	.word	0x43020000
 801322c:	447a0000 	.word	0x447a0000
 8013230:	00000000 	.word	0x00000000
 8013234:	41f00001 	.word	0x41f00001
 8013238:	400ccccd 	.word	0x400ccccd
 801323c:	3dcccccd 	.word	0x3dcccccd
 8013240:	423c0000 	.word	0x423c0000
 8013244:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8013230 <MEMS_runMagCal+0x3f0>
 8013248:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8013234 <MEMS_runMagCal+0x3f4>
 801324c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013250:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013258:	dc10      	bgt.n	801327c <MEMS_runMagCal+0x43c>
 801325a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8013238 <MEMS_runMagCal+0x3f8>
 801325e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013266:	dc09      	bgt.n	801327c <MEMS_runMagCal+0x43c>
 8013268:	ed94 9a03 	vldr	s18, [r4, #12]
 801326c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801323c <MEMS_runMagCal+0x3fc>
 8013270:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013278:	f201 8527 	bhi.w	8014cca <MEMS_runMagCal+0x1e8a>
 801327c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8013240 <MEMS_runMagCal+0x400>
 8013280:	edd4 6a03 	vldr	s13, [r4, #12]
 8013284:	ed94 5a00 	vldr	s10, [r4]
 8013288:	edd4 5a01 	vldr	s11, [r4, #4]
 801328c:	ed94 6a02 	vldr	s12, [r4, #8]
 8013290:	edc4 7a06 	vstr	s15, [r4, #24]
 8013294:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013298:	ad2e      	add	r5, sp, #184	; 0xb8
 801329a:	2300      	movs	r3, #0
 801329c:	e9c5 3300 	strd	r3, r3, [r5]
 80132a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80132a4:	60ab      	str	r3, [r5, #8]
 80132a6:	61ab      	str	r3, [r5, #24]
 80132a8:	4be7      	ldr	r3, [pc, #924]	; (8013648 <MEMS_runMagCal+0x808>)
 80132aa:	9311      	str	r3, [sp, #68]	; 0x44
 80132ac:	ee85 0a08 	vdiv.f32	s0, s10, s16
 80132b0:	eec5 9a88 	vdiv.f32	s19, s11, s16
 80132b4:	ee86 aa08 	vdiv.f32	s20, s12, s16
 80132b8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80132bc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80132c0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80132c4:	eef0 6a67 	vmov.f32	s13, s15
 80132c8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80132cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80132d0:	ee39 9a46 	vsub.f32	s18, s18, s12
 80132d4:	eddf 6add 	vldr	s13, [pc, #884]	; 801364c <MEMS_runMagCal+0x80c>
 80132d8:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013650 <MEMS_runMagCal+0x810>
 80132dc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80132e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132e4:	eef0 6ae6 	vabs.f32	s13, s13
 80132e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132ec:	eef4 6ac6 	vcmpe.f32	s13, s12
 80132f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f4:	eef0 7ae7 	vabs.f32	s15, s15
 80132f8:	f101 84dd 	bmi.w	8014cb6 <MEMS_runMagCal+0x1e76>
 80132fc:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8013654 <MEMS_runMagCal+0x814>
 8013300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013308:	f281 8438 	bge.w	8014b7c <MEMS_runMagCal+0x1d3c>
 801330c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8013658 <MEMS_runMagCal+0x818>
 8013310:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013318:	f101 8430 	bmi.w	8014b7c <MEMS_runMagCal+0x1d3c>
 801331c:	f002 fd04 	bl	8015d28 <roundf>
 8013320:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013324:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8013328:	ee17 3a90 	vmov	r3, s15
 801332c:	eeb0 0a69 	vmov.f32	s0, s19
 8013330:	f8a9 3000 	strh.w	r3, [r9]
 8013334:	f002 fcf8 	bl	8015d28 <roundf>
 8013338:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801333c:	eeb0 0a4a 	vmov.f32	s0, s20
 8013340:	ee17 3a90 	vmov	r3, s15
 8013344:	f8a9 3002 	strh.w	r3, [r9, #2]
 8013348:	f002 fcee 	bl	8015d28 <roundf>
 801334c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013350:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8013354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013358:	ee16 3a90 	vmov	r3, s13
 801335c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801365c <MEMS_runMagCal+0x81c>
 8013360:	f8a9 3004 	strh.w	r3, [r9, #4]
 8013364:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013368:	f002 fcde 	bl	8015d28 <roundf>
 801336c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013370:	ae0f      	add	r6, sp, #60	; 0x3c
 8013372:	ed8b 0a01 	vstr	s0, [fp, #4]
 8013376:	ab10      	add	r3, sp, #64	; 0x40
 8013378:	ee1c 0a10 	vmov	r0, s24
 801337c:	eeb0 0a48 	vmov.f32	s0, s16
 8013380:	4649      	mov	r1, r9
 8013382:	9600      	str	r6, [sp, #0]
 8013384:	aa2d      	add	r2, sp, #180	; 0xb4
 8013386:	f7f8 ff33 	bl	800c1f0 <getMagStats.constprop.0>
 801338a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801338e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8013660 <MEMS_runMagCal+0x820>
 8013392:	461f      	mov	r7, r3
 8013394:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013398:	005b      	lsls	r3, r3, #1
 801339a:	ee07 3a90 	vmov	s15, r3
 801339e:	ee07 0a10 	vmov	s14, r0
 80133a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80133ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b6:	dc0f      	bgt.n	80133d8 <MEMS_runMagCal+0x598>
 80133b8:	ed96 7a00 	vldr	s14, [r6]
 80133bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80133c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c8:	bfc3      	ittte	gt
 80133ca:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 80133ce:	fab3 f383 	clzgt	r3, r3
 80133d2:	095b      	lsrgt	r3, r3, #5
 80133d4:	2301      	movle	r3, #1
 80133d6:	9303      	str	r3, [sp, #12]
 80133d8:	ed96 0a00 	vldr	s0, [r6]
 80133dc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80133e0:	9620      	str	r6, [sp, #128]	; 0x80
 80133e2:	ee28 0a80 	vmul.f32	s0, s17, s0
 80133e6:	ee80 0a09 	vdiv.f32	s0, s0, s18
 80133ea:	f002 fc9d 	bl	8015d28 <roundf>
 80133ee:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80133f2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80133f6:	ee17 3a10 	vmov	r3, s14
 80133fa:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80133fe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013402:	f002 fc91 	bl	8015d28 <roundf>
 8013406:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8013664 <MEMS_runMagCal+0x824>
 801340a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801340e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013412:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8013416:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801341a:	f8d9 0000 	ldr.w	r0, [r9]
 801341e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8013422:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013426:	ee27 7a06 	vmul.f32	s14, s14, s12
 801342a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801342e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013432:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013436:	ee16 2a90 	vmov	r2, s13
 801343a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801343e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8013442:	f1b8 0f01 	cmp.w	r8, #1
 8013446:	fa1f fc82 	uxth.w	ip, r2
 801344a:	bf08      	it	eq
 801344c:	23ff      	moveq	r3, #255	; 0xff
 801344e:	ee17 2a10 	vmov	r2, s14
 8013452:	ee17 1a90 	vmov	r1, s15
 8013456:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801345a:	ee16 0a10 	vmov	r0, s12
 801345e:	bf08      	it	eq
 8013460:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8013464:	9b03      	ldr	r3, [sp, #12]
 8013466:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 801346a:	b292      	uxth	r2, r2
 801346c:	b289      	uxth	r1, r1
 801346e:	2000      	movs	r0, #0
 8013470:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8013474:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013478:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801347c:	f88b 0000 	strb.w	r0, [fp]
 8013480:	2b00      	cmp	r3, #0
 8013482:	f000 8118 	beq.w	80136b6 <MEMS_runMagCal+0x876>
 8013486:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801348a:	f88b 0001 	strb.w	r0, [fp, #1]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f041 80fd 	bne.w	801468e <MEMS_runMagCal+0x184e>
 8013494:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013498:	ad0e      	add	r5, sp, #56	; 0x38
 801349a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 801349e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134a2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80134a6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 80134aa:	f8cb 6008 	str.w	r6, [fp, #8]
 80134ae:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 80134b2:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 80134b6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013668 <MEMS_runMagCal+0x828>
 80134ba:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 80134be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80134c2:	fb00 f404 	mul.w	r4, r0, r4
 80134c6:	ee05 4a90 	vmov	s11, r4
 80134ca:	fb00 f406 	mul.w	r4, r0, r6
 80134ce:	fb00 f00e 	mul.w	r0, r0, lr
 80134d2:	ee06 0a10 	vmov	s12, r0
 80134d6:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 80134da:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 80134de:	ee03 0a90 	vmov	s7, r0
 80134e2:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 80134e6:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 80134ea:	ee05 4a10 	vmov	s10, r4
 80134ee:	ee04 0a10 	vmov	s8, r0
 80134f2:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 80134f6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80134fa:	ee04 0a90 	vmov	s9, r0
 80134fe:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013502:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013506:	f8dc 0000 	ldr.w	r0, [ip]
 801350a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 801350e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013512:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013516:	ee26 6a27 	vmul.f32	s12, s12, s15
 801351a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801351e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013522:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013526:	2001      	movs	r0, #1
 8013528:	24ff      	movs	r4, #255	; 0xff
 801352a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 801352e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8013532:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8013536:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 801353a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 801353e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8013542:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8013546:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 801354a:	f88b 4012 	strb.w	r4, [fp, #18]
 801354e:	2f00      	cmp	r7, #0
 8013550:	f001 82c8 	beq.w	8014ae4 <MEMS_runMagCal+0x1ca4>
 8013554:	9b05      	ldr	r3, [sp, #20]
 8013556:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8013674 <MEMS_runMagCal+0x834>
 801355a:	ed93 0a01 	vldr	s0, [r3, #4]
 801355e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8013562:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013566:	2200      	movs	r2, #0
 8013568:	ee20 3a03 	vmul.f32	s6, s0, s6
 801356c:	f04f 34ff 	mov.w	r4, #4294967295
 8013570:	4616      	mov	r6, r2
 8013572:	fb96 f3f0 	sdiv	r3, r6, r0
 8013576:	fb00 6313 	mls	r3, r0, r3, r6
 801357a:	b2db      	uxtb	r3, r3
 801357c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013580:	1c66      	adds	r6, r4, #1
 8013582:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013586:	ee07 4a90 	vmov	s15, r4
 801358a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801358e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013592:	ee06 4a90 	vmov	s13, r4
 8013596:	fb96 f4f1 	sdiv	r4, r6, r1
 801359a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801359e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80135a2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80135a6:	ee07 3a10 	vmov	s14, r3
 80135aa:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80135ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80135b2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80135b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135be:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80135c2:	fb01 6414 	mls	r4, r1, r4, r6
 80135c6:	b264      	sxtb	r4, r4
 80135c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80135cc:	3201      	adds	r2, #1
 80135ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 80135d2:	b212      	sxth	r2, r2
 80135d4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80135d8:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 80135dc:	42ba      	cmp	r2, r7
 80135de:	4616      	mov	r6, r2
 80135e0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80135e4:	ee67 7a03 	vmul.f32	s15, s14, s6
 80135e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80135ec:	ee17 ca90 	vmov	ip, s15
 80135f0:	f8a3 c014 	strh.w	ip, [r3, #20]
 80135f4:	dbbd      	blt.n	8013572 <MEMS_runMagCal+0x732>
 80135f6:	f88b 4012 	strb.w	r4, [fp, #18]
 80135fa:	428f      	cmp	r7, r1
 80135fc:	bf28      	it	cs
 80135fe:	460f      	movcs	r7, r1
 8013600:	f88b 7010 	strb.w	r7, [fp, #16]
 8013604:	ee1c 0a10 	vmov	r0, s24
 8013608:	9500      	str	r5, [sp, #0]
 801360a:	4642      	mov	r2, r8
 801360c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013610:	ab0d      	add	r3, sp, #52	; 0x34
 8013612:	f7f8 fded 	bl	800c1f0 <getMagStats.constprop.0>
 8013616:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801366c <MEMS_runMagCal+0x82c>
 801361a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801361e:	edd5 6a00 	vldr	s13, [r5]
 8013622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013626:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801362a:	eef0 7ae7 	vabs.f32	s15, s15
 801362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013636:	d525      	bpl.n	8013684 <MEMS_runMagCal+0x844>
 8013638:	eef4 6ac7 	vcmpe.f32	s13, s14
 801363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013640:	f101 8257 	bmi.w	8014af2 <MEMS_runMagCal+0x1cb2>
 8013644:	e01e      	b.n	8013684 <MEMS_runMagCal+0x844>
 8013646:	bf00      	nop
 8013648:	41f00001 	.word	0x41f00001
 801364c:	3f8ccccd 	.word	0x3f8ccccd
 8013650:	3f266666 	.word	0x3f266666
 8013654:	3eb33333 	.word	0x3eb33333
 8013658:	3f19999a 	.word	0x3f19999a
 801365c:	3a83126f 	.word	0x3a83126f
 8013660:	3c23d70a 	.word	0x3c23d70a
 8013664:	447a0000 	.word	0x447a0000
 8013668:	358637bd 	.word	0x358637bd
 801366c:	423c0000 	.word	0x423c0000
 8013670:	4423d666 	.word	0x4423d666
 8013674:	42c80000 	.word	0x42c80000
 8013678:	427c0000 	.word	0x427c0000
 801367c:	3f666666 	.word	0x3f666666
 8013680:	3eaaaaab 	.word	0x3eaaaaab
 8013684:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013688:	eef4 7ac7 	vcmpe.f32	s15, s14
 801368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013690:	d507      	bpl.n	80136a2 <MEMS_runMagCal+0x862>
 8013692:	eef4 6a47 	vcmp.f32	s13, s14
 8013696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369a:	9b03      	ldr	r3, [sp, #12]
 801369c:	bf48      	it	mi
 801369e:	2302      	movmi	r3, #2
 80136a0:	9303      	str	r3, [sp, #12]
 80136a2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80136a6:	9a03      	ldr	r2, [sp, #12]
 80136a8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80136ac:	2bc8      	cmp	r3, #200	; 0xc8
 80136ae:	d902      	bls.n	80136b6 <MEMS_runMagCal+0x876>
 80136b0:	2302      	movs	r3, #2
 80136b2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80136b6:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80136ba:	ecbd 8b0a 	vpop	{d8-d12}
 80136be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80136c6:	4291      	cmp	r1, r2
 80136c8:	f4ff abea 	bcc.w	8012ea0 <MEMS_runMagCal+0x60>
 80136cc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f47f abf9 	bne.w	8012ec8 <MEMS_runMagCal+0x88>
 80136d6:	f7ff bbed 	b.w	8012eb4 <MEMS_runMagCal+0x74>
 80136da:	2702      	movs	r7, #2
 80136dc:	2300      	movs	r3, #0
 80136de:	9307      	str	r3, [sp, #28]
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8013670 <MEMS_runMagCal+0x830>
 80136e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80136ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ee:	f140 8260 	bpl.w	8013bb2 <MEMS_runMagCal+0xd72>
 80136f2:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8013674 <MEMS_runMagCal+0x834>
 80136f6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80136fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80136fe:	2b01      	cmp	r3, #1
 8013700:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013704:	d911      	bls.n	801372a <MEMS_runMagCal+0x8ea>
 8013706:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801370a:	ee17 3a90 	vmov	r3, s15
 801370e:	b29b      	uxth	r3, r3
 8013710:	2bc7      	cmp	r3, #199	; 0xc7
 8013712:	f201 8359 	bhi.w	8014dc8 <MEMS_runMagCal+0x1f88>
 8013716:	2300      	movs	r3, #0
 8013718:	22ff      	movs	r2, #255	; 0xff
 801371a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801371e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013722:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8013726:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 801372a:	2f00      	cmp	r7, #0
 801372c:	f040 824d 	bne.w	8013bca <MEMS_runMagCal+0xd8a>
 8013730:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8013734:	2b00      	cmp	r3, #0
 8013736:	f2c0 839e 	blt.w	8013e76 <MEMS_runMagCal+0x1036>
 801373a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801373e:	1c5a      	adds	r2, r3, #1
 8013740:	fbb2 f3f6 	udiv	r3, r2, r6
 8013744:	fb06 2313 	mls	r3, r6, r3, r2
 8013748:	b25b      	sxtb	r3, r3
 801374a:	461d      	mov	r5, r3
 801374c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013750:	f88b 3012 	strb.w	r3, [fp, #18]
 8013754:	3401      	adds	r4, #1
 8013756:	42b4      	cmp	r4, r6
 8013758:	bfa8      	it	ge
 801375a:	4634      	movge	r4, r6
 801375c:	fa5f f884 	uxtb.w	r8, r4
 8013760:	f88b 8010 	strb.w	r8, [fp, #16]
 8013764:	f002 fae0 	bl	8015d28 <roundf>
 8013768:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801376c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8013770:	ee10 2a10 	vmov	r2, s0
 8013774:	829a      	strh	r2, [r3, #20]
 8013776:	2f00      	cmp	r7, #0
 8013778:	f040 8227 	bne.w	8013bca <MEMS_runMagCal+0xd8a>
 801377c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013780:	b122      	cbz	r2, 801378c <MEMS_runMagCal+0x94c>
 8013782:	9908      	ldr	r1, [sp, #32]
 8013784:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013788:	4299      	cmp	r1, r3
 801378a:	d394      	bcc.n	80136b6 <MEMS_runMagCal+0x876>
 801378c:	9b03      	ldr	r3, [sp, #12]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d091      	beq.n	80136b6 <MEMS_runMagCal+0x876>
 8013792:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8013796:	1ebb      	subs	r3, r7, #2
 8013798:	2b01      	cmp	r3, #1
 801379a:	f240 8232 	bls.w	8013c02 <MEMS_runMagCal+0xdc2>
 801379e:	9b05      	ldr	r3, [sp, #20]
 80137a0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8013678 <MEMS_runMagCal+0x838>
 80137a4:	ed93 8a01 	vldr	s16, [r3, #4]
 80137a8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80137ac:	9a06      	ldr	r2, [sp, #24]
 80137ae:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80137b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137b8:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80137bc:	fb02 1404 	mla	r4, r2, r4, r1
 80137c0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80137c4:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 80137c8:	3310      	adds	r3, #16
 80137ca:	42a3      	cmp	r3, r4
 80137cc:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 80137d0:	ee28 9a89 	vmul.f32	s18, s17, s18
 80137d4:	ee0c 2a10 	vmov	s24, r2
 80137d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80137dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137e0:	ee17 2a90 	vmov	r2, s15
 80137e4:	fa1f f982 	uxth.w	r9, r2
 80137e8:	f080 81fe 	bcs.w	8013be8 <MEMS_runMagCal+0xda8>
 80137ec:	f242 3328 	movw	r3, #9000	; 0x2328
 80137f0:	429c      	cmp	r4, r3
 80137f2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80137f6:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 80137fa:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 80137fe:	bf1a      	itte	ne
 8013800:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8013804:	3c28      	subne	r4, #40	; 0x28
 8013806:	2400      	moveq	r4, #0
 8013808:	42a8      	cmp	r0, r5
 801380a:	f102 0201 	add.w	r2, r2, #1
 801380e:	f000 8727 	beq.w	8014660 <MEMS_runMagCal+0x1820>
 8013812:	1a12      	subs	r2, r2, r0
 8013814:	fb92 f1f5 	sdiv	r1, r2, r5
 8013818:	fb05 2211 	mls	r2, r5, r1, r2
 801381c:	2a00      	cmp	r2, #0
 801381e:	bfb8      	it	lt
 8013820:	1952      	addlt	r2, r2, r5
 8013822:	b211      	sxth	r1, r2
 8013824:	b358      	cbz	r0, 801387e <MEMS_runMagCal+0xa3e>
 8013826:	3801      	subs	r0, #1
 8013828:	b280      	uxth	r0, r0
 801382a:	3001      	adds	r0, #1
 801382c:	1b36      	subs	r6, r6, r4
 801382e:	9f03      	ldr	r7, [sp, #12]
 8013830:	b2b6      	uxth	r6, r6
 8013832:	4408      	add	r0, r1
 8013834:	e002      	b.n	801383c <MEMS_runMagCal+0x9fc>
 8013836:	3101      	adds	r1, #1
 8013838:	4281      	cmp	r1, r0
 801383a:	d01b      	beq.n	8013874 <MEMS_runMagCal+0xa34>
 801383c:	fb91 f3f5 	sdiv	r3, r1, r5
 8013840:	fb05 1313 	mls	r3, r5, r3, r1
 8013844:	b2db      	uxtb	r3, r3
 8013846:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801384a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801384e:	4432      	add	r2, r6
 8013850:	b212      	sxth	r2, r2
 8013852:	2a00      	cmp	r2, #0
 8013854:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013858:	daed      	bge.n	8013836 <MEMS_runMagCal+0x9f6>
 801385a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801385e:	1e5a      	subs	r2, r3, #1
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 8306 	beq.w	8013e72 <MEMS_runMagCal+0x1032>
 8013866:	3101      	adds	r1, #1
 8013868:	4281      	cmp	r1, r0
 801386a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801386e:	f04f 0701 	mov.w	r7, #1
 8013872:	d1e3      	bne.n	801383c <MEMS_runMagCal+0x9fc>
 8013874:	2f01      	cmp	r7, #1
 8013876:	f001 80ea 	beq.w	8014a4e <MEMS_runMagCal+0x1c0e>
 801387a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801387e:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8013882:	2800      	cmp	r0, #0
 8013884:	f000 81b6 	beq.w	8013bf4 <MEMS_runMagCal+0xdb4>
 8013888:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801388c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801388e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013892:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8013896:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801389a:	3308      	adds	r3, #8
 801389c:	441c      	add	r4, r3
 801389e:	42a2      	cmp	r2, r4
 80138a0:	f200 86e6 	bhi.w	8014670 <MEMS_runMagCal+0x1830>
 80138a4:	9b07      	ldr	r3, [sp, #28]
 80138a6:	b923      	cbnz	r3, 80138b2 <MEMS_runMagCal+0xa72>
 80138a8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80138ac:	2b0a      	cmp	r3, #10
 80138ae:	f240 81a5 	bls.w	8013bfc <MEMS_runMagCal+0xdbc>
 80138b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80138b6:	9302      	str	r3, [sp, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 819f 	beq.w	8013bfc <MEMS_runMagCal+0xdbc>
 80138be:	ee29 aa09 	vmul.f32	s20, s18, s18
 80138c2:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 801367c <MEMS_runMagCal+0x83c>
 80138c6:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8013680 <MEMS_runMagCal+0x840>
 80138ca:	9b03      	ldr	r3, [sp, #12]
 80138cc:	9309      	str	r3, [sp, #36]	; 0x24
 80138ce:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 80138d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80138d6:	2100      	movs	r1, #0
 80138d8:	ee2a aa26 	vmul.f32	s20, s20, s13
 80138dc:	ee28 8a07 	vmul.f32	s16, s16, s14
 80138e0:	ee69 9a29 	vmul.f32	s19, s18, s19
 80138e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80138e8:	468a      	mov	sl, r1
 80138ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80138ec:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80138f0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 80e2 	beq.w	8013abe <MEMS_runMagCal+0xc7e>
 80138fa:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80138fe:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8013902:	ee07 4a90 	vmov	s15, r4
 8013906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801390a:	eef0 7ae7 	vabs.f32	s15, s15
 801390e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013916:	f100 820b 	bmi.w	8013d30 <MEMS_runMagCal+0xef0>
 801391a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801391e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013922:	2f00      	cmp	r7, #0
 8013924:	f000 8223 	beq.w	8013d6e <MEMS_runMagCal+0xf2e>
 8013928:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 801392c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8013930:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8013934:	1b52      	subs	r2, r2, r5
 8013936:	fb02 f102 	mul.w	r1, r2, r2
 801393a:	1b02      	subs	r2, r0, r4
 801393c:	fb02 1202 	mla	r2, r2, r2, r1
 8013940:	1b9b      	subs	r3, r3, r6
 8013942:	fb03 2303 	mla	r3, r3, r3, r2
 8013946:	ee07 3a90 	vmov	s15, r3
 801394a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801394e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013956:	f300 80b2 	bgt.w	8013abe <MEMS_runMagCal+0xc7e>
 801395a:	fb94 f3f9 	sdiv	r3, r4, r9
 801395e:	fb09 4313 	mls	r3, r9, r3, r4
 8013962:	2b00      	cmp	r3, #0
 8013964:	bfb8      	it	lt
 8013966:	444b      	addlt	r3, r9
 8013968:	b21b      	sxth	r3, r3
 801396a:	ee00 3a10 	vmov	s0, r3
 801396e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013972:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013976:	f002 f9d7 	bl	8015d28 <roundf>
 801397a:	fb95 f3f9 	sdiv	r3, r5, r9
 801397e:	fb09 5313 	mls	r3, r9, r3, r5
 8013982:	2b00      	cmp	r3, #0
 8013984:	bfb8      	it	lt
 8013986:	444b      	addlt	r3, r9
 8013988:	b21b      	sxth	r3, r3
 801398a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801398e:	ee00 3a10 	vmov	s0, r3
 8013992:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013996:	edcd 7a04 	vstr	s15, [sp, #16]
 801399a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801399e:	f002 f9c3 	bl	8015d28 <roundf>
 80139a2:	fb96 f3f9 	sdiv	r3, r6, r9
 80139a6:	fb09 6313 	mls	r3, r9, r3, r6
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	bfb8      	it	lt
 80139ae:	444b      	addlt	r3, r9
 80139b0:	b21b      	sxth	r3, r3
 80139b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80139b6:	ee00 3a10 	vmov	s0, r3
 80139ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80139be:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80139c2:	edcd 7a04 	vstr	s15, [sp, #16]
 80139c6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80139ca:	9204      	str	r2, [sp, #16]
 80139cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139d0:	f002 f9aa 	bl	8015d28 <roundf>
 80139d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80139d8:	f1b8 0f1f 	cmp.w	r8, #31
 80139dc:	edcd 7a06 	vstr	s15, [sp, #24]
 80139e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80139e4:	9106      	str	r1, [sp, #24]
 80139e6:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 80139ea:	f240 823d 	bls.w	8013e68 <MEMS_runMagCal+0x1028>
 80139ee:	f1a8 0220 	sub.w	r2, r8, #32
 80139f2:	2101      	movs	r1, #1
 80139f4:	fa01 f202 	lsl.w	r2, r1, r2
 80139f8:	401a      	ands	r2, r3
 80139fa:	9804      	ldr	r0, [sp, #16]
 80139fc:	281f      	cmp	r0, #31
 80139fe:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013a02:	f240 821f 	bls.w	8013e44 <MEMS_runMagCal+0x1004>
 8013a06:	f1a0 0120 	sub.w	r1, r0, #32
 8013a0a:	2001      	movs	r0, #1
 8013a0c:	fa00 f101 	lsl.w	r1, r0, r1
 8013a10:	ea01 0c03 	and.w	ip, r1, r3
 8013a14:	9906      	ldr	r1, [sp, #24]
 8013a16:	291f      	cmp	r1, #31
 8013a18:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013a1c:	f240 821e 	bls.w	8013e5c <MEMS_runMagCal+0x101c>
 8013a20:	f1a1 0020 	sub.w	r0, r1, #32
 8013a24:	2101      	movs	r1, #1
 8013a26:	fa01 f000 	lsl.w	r0, r1, r0
 8013a2a:	4003      	ands	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f040 812b 	bne.w	8013c88 <MEMS_runMagCal+0xe48>
 8013a32:	ea52 030c 	orrs.w	r3, r2, ip
 8013a36:	f040 812c 	bne.w	8013c92 <MEMS_runMagCal+0xe52>
 8013a3a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a40:	461a      	mov	r2, r3
 8013a42:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013a46:	3301      	adds	r3, #1
 8013a48:	4694      	mov	ip, r2
 8013a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a4e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013a52:	3701      	adds	r7, #1
 8013a54:	4567      	cmp	r7, ip
 8013a56:	bfa8      	it	ge
 8013a58:	4667      	movge	r7, ip
 8013a5a:	fb0c 2c13 	mls	ip, ip, r3, r2
 8013a5e:	b2ff      	uxtb	r7, r7
 8013a60:	fa4f fc8c 	sxtb.w	ip, ip
 8013a64:	9905      	ldr	r1, [sp, #20]
 8013a66:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 8013a6a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8013a6e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a74:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013a78:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8013a7c:	1a9b      	subs	r3, r3, r2
 8013a7e:	fb01 330a 	mla	r3, r1, sl, r3
 8013a82:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a88:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 8013a8c:	429f      	cmp	r7, r3
 8013a8e:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013a92:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013a96:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013a9a:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013a9e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013aa2:	f000 8758 	beq.w	8014956 <MEMS_runMagCal+0x1b16>
 8013aa6:	9b06      	ldr	r3, [sp, #24]
 8013aa8:	9a04      	ldr	r2, [sp, #16]
 8013aaa:	ee1c 0a10 	vmov	r0, s24
 8013aae:	4641      	mov	r1, r8
 8013ab0:	f7f8 f874 	bl	800bb9c <MEMS_setMagIndexToOne>
 8013ab4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013ab8:	9302      	str	r3, [sp, #8]
 8013aba:	2301      	movs	r3, #1
 8013abc:	9309      	str	r3, [sp, #36]	; 0x24
 8013abe:	9b02      	ldr	r3, [sp, #8]
 8013ac0:	f10a 0a01 	add.w	sl, sl, #1
 8013ac4:	fa0f fa8a 	sxth.w	sl, sl
 8013ac8:	459a      	cmp	sl, r3
 8013aca:	4651      	mov	r1, sl
 8013acc:	f6ff af0d 	blt.w	80138ea <MEMS_runMagCal+0xaaa>
 8013ad0:	f89b 3000 	ldrb.w	r3, [fp]
 8013ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ad6:	431a      	orrs	r2, r3
 8013ad8:	b2d3      	uxtb	r3, r2
 8013ada:	f88b 3000 	strb.w	r3, [fp]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	f43f ade9 	beq.w	80136b6 <MEMS_runMagCal+0x876>
 8013ae4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013ae8:	9306      	str	r3, [sp, #24]
 8013aea:	2b19      	cmp	r3, #25
 8013aec:	f67f ade3 	bls.w	80136b6 <MEMS_runMagCal+0x876>
 8013af0:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013af4:	9309      	str	r3, [sp, #36]	; 0x24
 8013af6:	b123      	cbz	r3, 8013b02 <MEMS_runMagCal+0xcc2>
 8013af8:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f040 8583 	bne.w	8014608 <MEMS_runMagCal+0x17c8>
 8013b02:	9b07      	ldr	r3, [sp, #28]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f040 872f 	bne.w	8014968 <MEMS_runMagCal+0x1b28>
 8013b0a:	9b05      	ldr	r3, [sp, #20]
 8013b0c:	9903      	ldr	r1, [sp, #12]
 8013b0e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013b12:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013b16:	9302      	str	r3, [sp, #8]
 8013b18:	2600      	movs	r6, #0
 8013b1a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8013b1e:	9304      	str	r3, [sp, #16]
 8013b20:	f04f 0a01 	mov.w	sl, #1
 8013b24:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013b28:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8013b2c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013b30:	9624      	str	r6, [sp, #144]	; 0x90
 8013b32:	4657      	mov	r7, sl
 8013b34:	460b      	mov	r3, r1
 8013b36:	460c      	mov	r4, r1
 8013b38:	e013      	b.n	8013b62 <MEMS_runMagCal+0xd22>
 8013b3a:	f1b9 0f00 	cmp.w	r9, #0
 8013b3e:	bf18      	it	ne
 8013b40:	3101      	addne	r1, #1
 8013b42:	2d00      	cmp	r5, #0
 8013b44:	bf18      	it	ne
 8013b46:	3401      	addne	r4, #1
 8013b48:	2a00      	cmp	r2, #0
 8013b4a:	bf18      	it	ne
 8013b4c:	3301      	addne	r3, #1
 8013b4e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013b52:	b2c9      	uxtb	r1, r1
 8013b54:	b2e4      	uxtb	r4, r4
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	f000 81a2 	beq.w	8013ea0 <MEMS_runMagCal+0x1060>
 8013b5c:	3601      	adds	r6, #1
 8013b5e:	fa5f fa8c 	uxtb.w	sl, ip
 8013b62:	9804      	ldr	r0, [sp, #16]
 8013b64:	f1a6 0220 	sub.w	r2, r6, #32
 8013b68:	fa07 f202 	lsl.w	r2, r7, r2
 8013b6c:	ea02 0500 	and.w	r5, r2, r0
 8013b70:	9802      	ldr	r0, [sp, #8]
 8013b72:	2e1f      	cmp	r6, #31
 8013b74:	ea08 0902 	and.w	r9, r8, r2
 8013b78:	f10a 0c01 	add.w	ip, sl, #1
 8013b7c:	ea02 0200 	and.w	r2, r2, r0
 8013b80:	fa07 f006 	lsl.w	r0, r7, r6
 8013b84:	d8d9      	bhi.n	8013b3a <MEMS_runMagCal+0xcfa>
 8013b86:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8013b8a:	ea00 0902 	and.w	r9, r0, r2
 8013b8e:	4005      	ands	r5, r0
 8013b90:	ea0e 0000 	and.w	r0, lr, r0
 8013b94:	f1b9 0f00 	cmp.w	r9, #0
 8013b98:	bf18      	it	ne
 8013b9a:	3401      	addne	r4, #1
 8013b9c:	2d00      	cmp	r5, #0
 8013b9e:	bf0c      	ite	eq
 8013ba0:	461d      	moveq	r5, r3
 8013ba2:	1c5d      	addne	r5, r3, #1
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	bf18      	it	ne
 8013ba8:	3101      	addne	r1, #1
 8013baa:	b2e4      	uxtb	r4, r4
 8013bac:	b2eb      	uxtb	r3, r5
 8013bae:	b2c9      	uxtb	r1, r1
 8013bb0:	e7d4      	b.n	8013b5c <MEMS_runMagCal+0xd1c>
 8013bb2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013bb6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013e8c <MEMS_runMagCal+0x104c>
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013bc0:	f63f ada9 	bhi.w	8013716 <MEMS_runMagCal+0x8d6>
 8013bc4:	2f00      	cmp	r7, #0
 8013bc6:	f43f adb3 	beq.w	8013730 <MEMS_runMagCal+0x8f0>
 8013bca:	9908      	ldr	r1, [sp, #32]
 8013bcc:	f8cb 100c 	str.w	r1, [fp, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	23ff      	movs	r3, #255	; 0xff
 8013bd4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013bd8:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013bdc:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013be0:	ecbd 8b0a 	vpop	{d8-d12}
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be8:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013bec:	4634      	mov	r4, r6
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f47f ae4a 	bne.w	8013888 <MEMS_runMagCal+0xa48>
 8013bf4:	9b07      	ldr	r3, [sp, #28]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	f47f ae5b 	bne.w	80138b2 <MEMS_runMagCal+0xa72>
 8013bfc:	9b03      	ldr	r3, [sp, #12]
 8013bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8013c00:	e766      	b.n	8013ad0 <MEMS_runMagCal+0xc90>
 8013c02:	45b0      	cmp	r8, r6
 8013c04:	f000 86b9 	beq.w	801497a <MEMS_runMagCal+0x1b3a>
 8013c08:	2f03      	cmp	r7, #3
 8013c0a:	f47f adc8 	bne.w	801379e <MEMS_runMagCal+0x95e>
 8013c0e:	ee07 2a90 	vmov	s15, r2
 8013c12:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013e90 <MEMS_runMagCal+0x1050>
 8013c16:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2e:	f77f adb6 	ble.w	801379e <MEMS_runMagCal+0x95e>
 8013c32:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	f43f adb1 	beq.w	801379e <MEMS_runMagCal+0x95e>
 8013c3c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013c40:	330a      	adds	r3, #10
 8013c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013c46:	ee07 3a90 	vmov	s15, r3
 8013c4a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5a:	f77f ada0 	ble.w	801379e <MEMS_runMagCal+0x95e>
 8013c5e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f47f ad9b 	bne.w	801379e <MEMS_runMagCal+0x95e>
 8013c68:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f43f ad22 	beq.w	80136b6 <MEMS_runMagCal+0x876>
 8013c72:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013c76:	2bff      	cmp	r3, #255	; 0xff
 8013c78:	f47f ad1d 	bne.w	80136b6 <MEMS_runMagCal+0x876>
 8013c7c:	e58f      	b.n	801379e <MEMS_runMagCal+0x95e>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	9307      	str	r3, [sp, #28]
 8013c82:	9303      	str	r3, [sp, #12]
 8013c84:	2700      	movs	r7, #0
 8013c86:	e52c      	b.n	80136e2 <MEMS_runMagCal+0x8a2>
 8013c88:	b11a      	cbz	r2, 8013c92 <MEMS_runMagCal+0xe52>
 8013c8a:	f1bc 0f00 	cmp.w	ip, #0
 8013c8e:	f47f af16 	bne.w	8013abe <MEMS_runMagCal+0xc7e>
 8013c92:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013c96:	930a      	str	r3, [sp, #40]	; 0x28
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4297      	cmp	r7, r2
 8013c9c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013ca0:	f000 848f 	beq.w	80145c2 <MEMS_runMagCal+0x1782>
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013caa:	1bdb      	subs	r3, r3, r7
 8013cac:	fb93 f2f2 	sdiv	r2, r3, r2
 8013cb0:	fb01 3212 	mls	r2, r1, r2, r3
 8013cb4:	2a00      	cmp	r2, #0
 8013cb6:	bfbc      	itt	lt
 8013cb8:	460b      	movlt	r3, r1
 8013cba:	18d2      	addlt	r2, r2, r3
 8013cbc:	468c      	mov	ip, r1
 8013cbe:	b212      	sxth	r2, r2
 8013cc0:	f107 3eff 	add.w	lr, r7, #4294967295
 8013cc4:	fa5f fe8e 	uxtb.w	lr, lr
 8013cc8:	f10e 0e01 	add.w	lr, lr, #1
 8013ccc:	4496      	add	lr, r2
 8013cce:	e002      	b.n	8013cd6 <MEMS_runMagCal+0xe96>
 8013cd0:	4572      	cmp	r2, lr
 8013cd2:	f43f aebb 	beq.w	8013a4c <MEMS_runMagCal+0xc0c>
 8013cd6:	fb92 f3fc 	sdiv	r3, r2, ip
 8013cda:	fb0c 2313 	mls	r3, ip, r3, r2
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013ce4:	3201      	adds	r2, #1
 8013ce6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013cea:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013cee:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013cf2:	1a20      	subs	r0, r4, r0
 8013cf4:	1a69      	subs	r1, r5, r1
 8013cf6:	ee07 0a90 	vmov	s15, r0
 8013cfa:	ee06 1a90 	vmov	s13, r1
 8013cfe:	1af3      	subs	r3, r6, r3
 8013d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d08:	ee07 3a10 	vmov	s14, r3
 8013d0c:	eef0 7ae7 	vabs.f32	s15, s15
 8013d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d14:	eef0 6ae6 	vabs.f32	s13, s13
 8013d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d1c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d24:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d2c:	ddd0      	ble.n	8013cd0 <MEMS_runMagCal+0xe90>
 8013d2e:	e6c6      	b.n	8013abe <MEMS_runMagCal+0xc7e>
 8013d30:	ee07 5a90 	vmov	s15, r5
 8013d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d38:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013d3c:	eef0 7ae7 	vabs.f32	s15, s15
 8013d40:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d48:	f77f ade9 	ble.w	801391e <MEMS_runMagCal+0xade>
 8013d4c:	ee07 6a90 	vmov	s15, r6
 8013d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d54:	eef0 7ae7 	vabs.f32	s15, s15
 8013d58:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d60:	f73f aead 	bgt.w	8013abe <MEMS_runMagCal+0xc7e>
 8013d64:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013d68:	2f00      	cmp	r7, #0
 8013d6a:	f47f addd 	bne.w	8013928 <MEMS_runMagCal+0xae8>
 8013d6e:	fb94 f2f9 	sdiv	r2, r4, r9
 8013d72:	f04f 0301 	mov.w	r3, #1
 8013d76:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013d7a:	9b05      	ldr	r3, [sp, #20]
 8013d7c:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013d80:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d86:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013d8a:	fb09 4212 	mls	r2, r9, r2, r4
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	fb01 3300 	mla	r3, r1, r0, r3
 8013d94:	bfb8      	it	lt
 8013d96:	444a      	addlt	r2, r9
 8013d98:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013d9c:	b213      	sxth	r3, r2
 8013d9e:	ee00 3a10 	vmov	s0, r3
 8013da2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013da6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013daa:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013dae:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013db2:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013db6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013dba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013dbe:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013dc2:	f001 ffb1 	bl	8015d28 <roundf>
 8013dc6:	fb95 f3f9 	sdiv	r3, r5, r9
 8013dca:	fb09 5513 	mls	r5, r9, r3, r5
 8013dce:	2d00      	cmp	r5, #0
 8013dd0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013dd4:	bfb8      	it	lt
 8013dd6:	444d      	addlt	r5, r9
 8013dd8:	b22d      	sxth	r5, r5
 8013dda:	edcd 7a02 	vstr	s15, [sp, #8]
 8013dde:	ee07 5a90 	vmov	s15, r5
 8013de2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013de6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013dea:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013dee:	f001 ff9b 	bl	8015d28 <roundf>
 8013df2:	fb96 f3f9 	sdiv	r3, r6, r9
 8013df6:	fb09 6613 	mls	r6, r9, r3, r6
 8013dfa:	2e00      	cmp	r6, #0
 8013dfc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013e00:	bfb8      	it	lt
 8013e02:	444e      	addlt	r6, r9
 8013e04:	b236      	sxth	r6, r6
 8013e06:	edcd 7a02 	vstr	s15, [sp, #8]
 8013e0a:	ee07 6a90 	vmov	s15, r6
 8013e0e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013e12:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013e16:	9204      	str	r2, [sp, #16]
 8013e18:	2301      	movs	r3, #1
 8013e1a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e20:	f001 ff82 	bl	8015d28 <roundf>
 8013e24:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013e28:	9a04      	ldr	r2, [sp, #16]
 8013e2a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013e2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013e32:	ee1c 0a10 	vmov	r0, s24
 8013e36:	4621      	mov	r1, r4
 8013e38:	f7f7 feb0 	bl	800bb9c <MEMS_setMagIndexToOne>
 8013e3c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013e40:	9302      	str	r3, [sp, #8]
 8013e42:	e63c      	b.n	8013abe <MEMS_runMagCal+0xc7e>
 8013e44:	4603      	mov	r3, r0
 8013e46:	2001      	movs	r0, #1
 8013e48:	fa00 f303 	lsl.w	r3, r0, r3
 8013e4c:	ea01 0c03 	and.w	ip, r1, r3
 8013e50:	9906      	ldr	r1, [sp, #24]
 8013e52:	291f      	cmp	r1, #31
 8013e54:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013e58:	f63f ade2 	bhi.w	8013a20 <MEMS_runMagCal+0xbe0>
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	2101      	movs	r1, #1
 8013e60:	fa01 f303 	lsl.w	r3, r1, r3
 8013e64:	4003      	ands	r3, r0
 8013e66:	e5e1      	b.n	8013a2c <MEMS_runMagCal+0xbec>
 8013e68:	2301      	movs	r3, #1
 8013e6a:	fa03 f308 	lsl.w	r3, r3, r8
 8013e6e:	401a      	ands	r2, r3
 8013e70:	e5c3      	b.n	80139fa <MEMS_runMagCal+0xbba>
 8013e72:	2701      	movs	r7, #1
 8013e74:	e4df      	b.n	8013836 <MEMS_runMagCal+0x9f6>
 8013e76:	2500      	movs	r5, #0
 8013e78:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013e7c:	462b      	mov	r3, r5
 8013e7e:	e465      	b.n	801374c <MEMS_runMagCal+0x90c>
 8013e80:	460f      	mov	r7, r1
 8013e82:	e42b      	b.n	80136dc <MEMS_runMagCal+0x89c>
 8013e84:	2300      	movs	r3, #0
 8013e86:	9304      	str	r3, [sp, #16]
 8013e88:	f7ff b941 	b.w	801310e <MEMS_runMagCal+0x2ce>
 8013e8c:	477fff00 	.word	0x477fff00
 8013e90:	3a83126f 	.word	0x3a83126f
 8013e94:	42340000 	.word	0x42340000
 8013e98:	3faccccd 	.word	0x3faccccd
 8013e9c:	00000000 	.word	0x00000000
 8013ea0:	2905      	cmp	r1, #5
 8013ea2:	f240 8383 	bls.w	80145ac <MEMS_runMagCal+0x176c>
 8013ea6:	2c05      	cmp	r4, #5
 8013ea8:	f240 8380 	bls.w	80145ac <MEMS_runMagCal+0x176c>
 8013eac:	2b05      	cmp	r3, #5
 8013eae:	f240 837d 	bls.w	80145ac <MEMS_runMagCal+0x176c>
 8013eb2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013eb6:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013eba:	9302      	str	r3, [sp, #8]
 8013ebc:	9b06      	ldr	r3, [sp, #24]
 8013ebe:	4553      	cmp	r3, sl
 8013ec0:	f000 85f1 	beq.w	8014aa6 <MEMS_runMagCal+0x1c66>
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	9b02      	ldr	r3, [sp, #8]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	9304      	str	r3, [sp, #16]
 8013ecc:	1a9b      	subs	r3, r3, r2
 8013ece:	fb93 f2fa 	sdiv	r2, r3, sl
 8013ed2:	fb0a 3212 	mls	r2, sl, r2, r3
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	bfb8      	it	lt
 8013eda:	4452      	addlt	r2, sl
 8013edc:	46d1      	mov	r9, sl
 8013ede:	b212      	sxth	r2, r2
 8013ee0:	9906      	ldr	r1, [sp, #24]
 8013ee2:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013ee6:	f101 38ff 	add.w	r8, r1, #4294967295
 8013eea:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013eee:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013ef2:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013ef6:	fa5f f888 	uxtb.w	r8, r8
 8013efa:	f108 0801 	add.w	r8, r8, #1
 8013efe:	468e      	mov	lr, r1
 8013f00:	463e      	mov	r6, r7
 8013f02:	46ac      	mov	ip, r5
 8013f04:	4490      	add	r8, r2
 8013f06:	fb92 f3f9 	sdiv	r3, r2, r9
 8013f0a:	fb09 2313 	mls	r3, r9, r3, r2
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013f14:	3201      	adds	r2, #1
 8013f16:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013f1a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013f1e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013f22:	42a1      	cmp	r1, r4
 8013f24:	bfb8      	it	lt
 8013f26:	4621      	movlt	r1, r4
 8013f28:	45a6      	cmp	lr, r4
 8013f2a:	bfa8      	it	ge
 8013f2c:	46a6      	movge	lr, r4
 8013f2e:	4285      	cmp	r5, r0
 8013f30:	bfb8      	it	lt
 8013f32:	4605      	movlt	r5, r0
 8013f34:	4584      	cmp	ip, r0
 8013f36:	bfa8      	it	ge
 8013f38:	4684      	movge	ip, r0
 8013f3a:	429f      	cmp	r7, r3
 8013f3c:	bfb8      	it	lt
 8013f3e:	461f      	movlt	r7, r3
 8013f40:	429e      	cmp	r6, r3
 8013f42:	bfa8      	it	ge
 8013f44:	461e      	movge	r6, r3
 8013f46:	4542      	cmp	r2, r8
 8013f48:	d1dd      	bne.n	8013f06 <MEMS_runMagCal+0x10c6>
 8013f4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f4e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013f52:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013f56:	eba1 010e 	sub.w	r1, r1, lr
 8013f5a:	eba5 050c 	sub.w	r5, r5, ip
 8013f5e:	1bbe      	subs	r6, r7, r6
 8013f60:	b209      	sxth	r1, r1
 8013f62:	b22d      	sxth	r5, r5
 8013f64:	b236      	sxth	r6, r6
 8013f66:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013e94 <MEMS_runMagCal+0x1054>
 8013f6a:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f040 8593 	bne.w	8014a9a <MEMS_runMagCal+0x1c5a>
 8013f74:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013f78:	fab3 f883 	clz	r8, r3
 8013f7c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013f80:	ee06 1a90 	vmov	s13, r1
 8013f84:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013f90:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f98:	f300 8562 	bgt.w	8014a60 <MEMS_runMagCal+0x1c20>
 8013f9c:	ee06 5a10 	vmov	s12, r5
 8013fa0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013fa4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fac:	f100 8558 	bmi.w	8014a60 <MEMS_runMagCal+0x1c20>
 8013fb0:	ee05 6a90 	vmov	s11, r6
 8013fb4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013fb8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc0:	f100 854e 	bmi.w	8014a60 <MEMS_runMagCal+0x1c20>
 8013fc4:	428d      	cmp	r5, r1
 8013fc6:	462b      	mov	r3, r5
 8013fc8:	bfb8      	it	lt
 8013fca:	460b      	movlt	r3, r1
 8013fcc:	42b3      	cmp	r3, r6
 8013fce:	461a      	mov	r2, r3
 8013fd0:	bfb8      	it	lt
 8013fd2:	4632      	movlt	r2, r6
 8013fd4:	428e      	cmp	r6, r1
 8013fd6:	4633      	mov	r3, r6
 8013fd8:	bfa8      	it	ge
 8013fda:	460b      	movge	r3, r1
 8013fdc:	42ab      	cmp	r3, r5
 8013fde:	bfa8      	it	ge
 8013fe0:	462b      	movge	r3, r5
 8013fe2:	428a      	cmp	r2, r1
 8013fe4:	9202      	str	r2, [sp, #8]
 8013fe6:	f340 8588 	ble.w	8014afa <MEMS_runMagCal+0x1cba>
 8013fea:	4299      	cmp	r1, r3
 8013fec:	bfb8      	it	lt
 8013fee:	4619      	movlt	r1, r3
 8013ff0:	42aa      	cmp	r2, r5
 8013ff2:	dd02      	ble.n	8013ffa <MEMS_runMagCal+0x11ba>
 8013ff4:	42ab      	cmp	r3, r5
 8013ff6:	bfb8      	it	lt
 8013ff8:	4629      	movlt	r1, r5
 8013ffa:	9a02      	ldr	r2, [sp, #8]
 8013ffc:	4296      	cmp	r6, r2
 8013ffe:	da02      	bge.n	8014006 <MEMS_runMagCal+0x11c6>
 8014000:	429e      	cmp	r6, r3
 8014002:	bfc8      	it	gt
 8014004:	4631      	movgt	r1, r6
 8014006:	f1b8 0f00 	cmp.w	r8, #0
 801400a:	f000 8299 	beq.w	8014540 <MEMS_runMagCal+0x1700>
 801400e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014016:	dc0d      	bgt.n	8014034 <MEMS_runMagCal+0x11f4>
 8014018:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014020:	dc08      	bgt.n	8014034 <MEMS_runMagCal+0x11f4>
 8014022:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	bfcc      	ite	gt
 801402c:	f04f 0801 	movgt.w	r8, #1
 8014030:	f04f 0800 	movle.w	r8, #0
 8014034:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013e98 <MEMS_runMagCal+0x1058>
 8014038:	ed9d 5a02 	vldr	s10, [sp, #8]
 801403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014040:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014044:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8014048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404c:	f2c0 8558 	blt.w	8014b00 <MEMS_runMagCal+0x1cc0>
 8014050:	ee07 1a90 	vmov	s15, r1
 8014054:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8014058:	ee27 5a05 	vmul.f32	s10, s14, s10
 801405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014060:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014068:	f2c0 854a 	blt.w	8014b00 <MEMS_runMagCal+0x1cc0>
 801406c:	9a02      	ldr	r2, [sp, #8]
 801406e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8014072:	f280 8545 	bge.w	8014b00 <MEMS_runMagCal+0x1cc0>
 8014076:	ee07 3a90 	vmov	s15, r3
 801407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801407e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8014082:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801408a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408e:	f140 8537 	bpl.w	8014b00 <MEMS_runMagCal+0x1cc0>
 8014092:	9b06      	ldr	r3, [sp, #24]
 8014094:	4553      	cmp	r3, sl
 8014096:	f000 8569 	beq.w	8014b6c <MEMS_runMagCal+0x1d2c>
 801409a:	461a      	mov	r2, r3
 801409c:	9b04      	ldr	r3, [sp, #16]
 801409e:	1a9b      	subs	r3, r3, r2
 80140a0:	fb93 f7f9 	sdiv	r7, r3, r9
 80140a4:	fb09 3717 	mls	r7, r9, r7, r3
 80140a8:	2f00      	cmp	r7, #0
 80140aa:	bfb8      	it	lt
 80140ac:	4457      	addlt	r7, sl
 80140ae:	b23f      	sxth	r7, r7
 80140b0:	9b03      	ldr	r3, [sp, #12]
 80140b2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80140b6:	b27f      	sxtb	r7, r7
 80140b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80140bc:	9304      	str	r3, [sp, #16]
 80140be:	f1c7 0e01 	rsb	lr, r7, #1
 80140c2:	469c      	mov	ip, r3
 80140c4:	463b      	mov	r3, r7
 80140c6:	fb93 f1f9 	sdiv	r1, r3, r9
 80140ca:	fb09 3111 	mls	r1, r9, r1, r3
 80140ce:	b24a      	sxtb	r2, r1
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	f107 0701 	add.w	r7, r7, #1
 80140d6:	bfb8      	it	lt
 80140d8:	eb0a 0201 	addlt.w	r2, sl, r1
 80140dc:	fb97 f3f9 	sdiv	r3, r7, r9
 80140e0:	fb09 7313 	mls	r3, r9, r3, r7
 80140e4:	bfb8      	it	lt
 80140e6:	b252      	sxtblt	r2, r2
 80140e8:	b25b      	sxtb	r3, r3
 80140ea:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80140ee:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80140f2:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80140f6:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 80140fa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80140fe:	1a45      	subs	r5, r0, r1
 8014100:	bf48      	it	mi
 8014102:	1a09      	submi	r1, r1, r0
 8014104:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8014108:	bf4c      	ite	mi
 801410a:	b20d      	sxthmi	r5, r1
 801410c:	b22d      	sxthpl	r5, r5
 801410e:	1a21      	subs	r1, r4, r0
 8014110:	bf48      	it	mi
 8014112:	1b01      	submi	r1, r0, r4
 8014114:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8014118:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801411c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8014120:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8014124:	1a9b      	subs	r3, r3, r2
 8014126:	1a26      	subs	r6, r4, r0
 8014128:	b21b      	sxth	r3, r3
 801412a:	bf48      	it	mi
 801412c:	1b06      	submi	r6, r0, r4
 801412e:	2b00      	cmp	r3, #0
 8014130:	b209      	sxth	r1, r1
 8014132:	b236      	sxth	r6, r6
 8014134:	dd20      	ble.n	8014178 <MEMS_runMagCal+0x1338>
 8014136:	4429      	add	r1, r5
 8014138:	440e      	add	r6, r1
 801413a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801413e:	fb02 f606 	mul.w	r6, r2, r6
 8014142:	ee07 6a90 	vmov	s15, r6
 8014146:	ee07 3a10 	vmov	s14, r3
 801414a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801414e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014152:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014156:	f10c 0c01 	add.w	ip, ip, #1
 801415a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801415e:	fa5f fc8c 	uxtb.w	ip, ip
 8014162:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8014166:	ee17 3a90 	vmov	r3, s15
 801416a:	b21b      	sxth	r3, r3
 801416c:	2b96      	cmp	r3, #150	; 0x96
 801416e:	dd03      	ble.n	8014178 <MEMS_runMagCal+0x1338>
 8014170:	9b04      	ldr	r3, [sp, #16]
 8014172:	3301      	adds	r3, #1
 8014174:	b2db      	uxtb	r3, r3
 8014176:	9304      	str	r3, [sp, #16]
 8014178:	eb0e 0307 	add.w	r3, lr, r7
 801417c:	b2db      	uxtb	r3, r3
 801417e:	4598      	cmp	r8, r3
 8014180:	d8a0      	bhi.n	80140c4 <MEMS_runMagCal+0x1284>
 8014182:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8014186:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801418a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801418e:	4563      	cmp	r3, ip
 8014190:	f340 820c 	ble.w	80145ac <MEMS_runMagCal+0x176c>
 8014194:	9b07      	ldr	r3, [sp, #28]
 8014196:	b92b      	cbnz	r3, 80141a4 <MEMS_runMagCal+0x1364>
 8014198:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801419c:	3b02      	subs	r3, #2
 801419e:	2b01      	cmp	r3, #1
 80141a0:	f240 851e 	bls.w	8014be0 <MEMS_runMagCal+0x1da0>
 80141a4:	ac25      	add	r4, sp, #148	; 0x94
 80141a6:	2220      	movs	r2, #32
 80141a8:	4620      	mov	r0, r4
 80141aa:	2100      	movs	r1, #0
 80141ac:	f003 fbe6 	bl	801797c <memset>
 80141b0:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 80141b4:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80141b8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80141bc:	2200      	movs	r2, #0
 80141be:	4286      	cmp	r6, r0
 80141c0:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 80141c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80141c6:	f103 0301 	add.w	r3, r3, #1
 80141ca:	f000 8501 	beq.w	8014bd0 <MEMS_runMagCal+0x1d90>
 80141ce:	1b9b      	subs	r3, r3, r6
 80141d0:	fb93 f2f0 	sdiv	r2, r3, r0
 80141d4:	fb00 3312 	mls	r3, r0, r2, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	bfb8      	it	lt
 80141dc:	181b      	addlt	r3, r3, r0
 80141de:	b21a      	sxth	r2, r3
 80141e0:	2e00      	cmp	r6, #0
 80141e2:	f000 854c 	beq.w	8014c7e <MEMS_runMagCal+0x1e3e>
 80141e6:	1e77      	subs	r7, r6, #1
 80141e8:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013e9c <MEMS_runMagCal+0x105c>
 80141ec:	b2fd      	uxtb	r5, r7
 80141ee:	3501      	adds	r5, #1
 80141f0:	eeb0 5a65 	vmov.f32	s10, s11
 80141f4:	eef0 4a65 	vmov.f32	s9, s11
 80141f8:	4415      	add	r5, r2
 80141fa:	4611      	mov	r1, r2
 80141fc:	fb91 f3f0 	sdiv	r3, r1, r0
 8014200:	fb00 1313 	mls	r3, r0, r3, r1
 8014204:	b2db      	uxtb	r3, r3
 8014206:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801420a:	3101      	adds	r1, #1
 801420c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8014210:	ee06 ca90 	vmov	s13, ip
 8014214:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8014218:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801421c:	ee07 ca10 	vmov	s14, ip
 8014220:	ee07 3a90 	vmov	s15, r3
 8014224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801422c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014230:	42a9      	cmp	r1, r5
 8014232:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8014236:	ee35 5a07 	vadd.f32	s10, s10, s14
 801423a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801423e:	d1dd      	bne.n	80141fc <MEMS_runMagCal+0x13bc>
 8014240:	ee07 6a90 	vmov	s15, r6
 8014244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801424c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8014250:	b2f9      	uxtb	r1, r7
 8014252:	3101      	adds	r1, #1
 8014254:	4411      	add	r1, r2
 8014256:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8014604 <MEMS_runMagCal+0x17c4>
 801425a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801425e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014262:	ee29 aa85 	vmul.f32	s20, s19, s10
 8014266:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801426a:	eef0 4a46 	vmov.f32	s9, s12
 801426e:	eeb0 4a46 	vmov.f32	s8, s12
 8014272:	eef0 3a46 	vmov.f32	s7, s12
 8014276:	eeb0 3a46 	vmov.f32	s6, s12
 801427a:	eef0 2a46 	vmov.f32	s5, s12
 801427e:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8014282:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8014286:	fb92 f3f0 	sdiv	r3, r2, r0
 801428a:	fb00 2313 	mls	r3, r0, r3, r2
 801428e:	b2db      	uxtb	r3, r3
 8014290:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014294:	3201      	adds	r2, #1
 8014296:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 801429a:	ee06 5a90 	vmov	s13, r5
 801429e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80142a2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80142a6:	ee07 5a10 	vmov	s14, r5
 80142aa:	ee07 3a90 	vmov	s15, r3
 80142ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80142b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142ba:	ee76 6ac9 	vsub.f32	s13, s13, s18
 80142be:	ee37 7a4a 	vsub.f32	s14, s14, s20
 80142c2:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80142c6:	4291      	cmp	r1, r2
 80142c8:	eee6 2aa6 	vfma.f32	s5, s13, s13
 80142cc:	eea6 3a87 	vfma.f32	s6, s13, s14
 80142d0:	eea7 4a07 	vfma.f32	s8, s14, s14
 80142d4:	eee6 3aa7 	vfma.f32	s7, s13, s15
 80142d8:	eee7 4a27 	vfma.f32	s9, s14, s15
 80142dc:	eea7 6aa7 	vfma.f32	s12, s15, s15
 80142e0:	d1d1      	bne.n	8014286 <MEMS_runMagCal+0x1446>
 80142e2:	edc4 2a00 	vstr	s5, [r4]
 80142e6:	ed84 3a01 	vstr	s6, [r4, #4]
 80142ea:	edc4 3a02 	vstr	s7, [r4, #8]
 80142ee:	ed84 4a03 	vstr	s8, [r4, #12]
 80142f2:	edc4 4a04 	vstr	s9, [r4, #16]
 80142f6:	ed84 6a05 	vstr	s12, [r4, #20]
 80142fa:	a91a      	add	r1, sp, #104	; 0x68
 80142fc:	4620      	mov	r0, r4
 80142fe:	f7fe fce5 	bl	8012ccc <MEMS_EIG3>
 8014302:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8014306:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801430a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801430e:	eef0 5ae4 	vabs.f32	s11, s9
 8014312:	eef0 6ac6 	vabs.f32	s13, s12
 8014316:	eef4 6ae5 	vcmpe.f32	s13, s11
 801431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431e:	bf8c      	ite	hi
 8014320:	eef0 7a65 	vmovhi.f32	s15, s11
 8014324:	eef0 7a66 	vmovls.f32	s15, s13
 8014328:	eeb0 7ac5 	vabs.f32	s14, s10
 801432c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014334:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014338:	bf88      	it	hi
 801433a:	eef0 7a47 	vmovhi.f32	s15, s14
 801433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014342:	bfb8      	it	lt
 8014344:	eef0 6a65 	vmovlt.f32	s13, s11
 8014348:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801434c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8014350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014354:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8014358:	bfb8      	it	lt
 801435a:	eeb0 7a66 	vmovlt.f32	s14, s13
 801435e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014366:	f300 8420 	bgt.w	8014baa <MEMS_runMagCal+0x1d6a>
 801436a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 801436e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014372:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437e:	dd02      	ble.n	8014386 <MEMS_runMagCal+0x1546>
 8014380:	2b22      	cmp	r3, #34	; 0x22
 8014382:	f240 8412 	bls.w	8014baa <MEMS_runMagCal+0x1d6a>
 8014386:	ee76 7a24 	vadd.f32	s15, s12, s9
 801438a:	ee07 3a10 	vmov	s14, r3
 801438e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014396:	eddf 6a90 	vldr	s13, [pc, #576]	; 80145d8 <MEMS_runMagCal+0x1798>
 801439a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801439e:	eef1 7ac6 	vsqrt.f32	s15, s12
 80143a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80143a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	f300 83fc 	bgt.w	8014baa <MEMS_runMagCal+0x1d6a>
 80143b2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80143b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143be:	f100 83f4 	bmi.w	8014baa <MEMS_runMagCal+0x1d6a>
 80143c2:	eddf 7a86 	vldr	s15, [pc, #536]	; 80145dc <MEMS_runMagCal+0x179c>
 80143c6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80143ca:	2300      	movs	r3, #0
 80143cc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 80143d0:	932c      	str	r3, [sp, #176]	; 0xb0
 80143d2:	eddd 7a02 	vldr	s15, [sp, #8]
 80143d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e2:	d408      	bmi.n	80143f6 <MEMS_runMagCal+0x15b6>
 80143e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80143e8:	ee17 3a10 	vmov	r3, s14
 80143ec:	b21b      	sxth	r3, r3
 80143ee:	ee07 3a90 	vmov	s15, r3
 80143f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143f6:	eddf 6a81 	vldr	s13, [pc, #516]	; 80145fc <MEMS_runMagCal+0x17bc>
 80143fa:	ee86 7a88 	vdiv.f32	s14, s13, s16
 80143fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014406:	dc08      	bgt.n	801441a <MEMS_runMagCal+0x15da>
 8014408:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801440c:	ee17 3a10 	vmov	r3, s14
 8014410:	b21b      	sxth	r3, r3
 8014412:	ee07 3a90 	vmov	s15, r3
 8014416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801441a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801441e:	eddf 7a70 	vldr	s15, [pc, #448]	; 80145e0 <MEMS_runMagCal+0x17a0>
 8014422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801442a:	f340 8424 	ble.w	8014c76 <MEMS_runMagCal+0x1e36>
 801442e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80145e4 <MEMS_runMagCal+0x17a4>
 8014432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443a:	f140 841c 	bpl.w	8014c76 <MEMS_runMagCal+0x1e36>
 801443e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80145e8 <MEMS_runMagCal+0x17a8>
 8014442:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014446:	eee7 7a26 	vfma.f32	s15, s14, s13
 801444a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801444e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014452:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80145fc <MEMS_runMagCal+0x17bc>
 8014456:	eddf ba6b 	vldr	s23, [pc, #428]	; 8014604 <MEMS_runMagCal+0x17c4>
 801445a:	ed9f ba64 	vldr	s22, [pc, #400]	; 80145ec <MEMS_runMagCal+0x17ac>
 801445e:	eddf aa64 	vldr	s21, [pc, #400]	; 80145f0 <MEMS_runMagCal+0x17b0>
 8014462:	9d03      	ldr	r5, [sp, #12]
 8014464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014468:	ee68 4a09 	vmul.f32	s9, s16, s18
 801446c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8014470:	ee68 9a29 	vmul.f32	s19, s16, s19
 8014474:	edc4 4a00 	vstr	s9, [r4]
 8014478:	ed84 aa01 	vstr	s20, [r4, #4]
 801447c:	edc4 9a02 	vstr	s19, [r4, #8]
 8014480:	edc4 7a03 	vstr	s15, [r4, #12]
 8014484:	edc4 7a06 	vstr	s15, [r4, #24]
 8014488:	ab11      	add	r3, sp, #68	; 0x44
 801448a:	ee1c 0a10 	vmov	r0, s24
 801448e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014490:	eeb0 0a48 	vmov.f32	s0, s16
 8014494:	4621      	mov	r1, r4
 8014496:	f7fe fa01 	bl	801289c <MEMS_SolveLinearEq>
 801449a:	1c6b      	adds	r3, r5, #1
 801449c:	2800      	cmp	r0, #0
 801449e:	f43e aed1 	beq.w	8013244 <MEMS_runMagCal+0x404>
 80144a2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 80144a6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80144aa:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 80144ae:	edd4 4a00 	vldr	s9, [r4]
 80144b2:	ed94 5a01 	vldr	s10, [r4, #4]
 80144b6:	edd4 5a02 	vldr	s11, [r4, #8]
 80144ba:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80144be:	ed94 6a03 	vldr	s12, [r4, #12]
 80144c2:	eef0 6ae3 	vabs.f32	s13, s7
 80144c6:	eef0 7ac3 	vabs.f32	s15, s6
 80144ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80144ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d2:	bfb8      	it	lt
 80144d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80144d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80144dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e0:	bfb8      	it	lt
 80144e2:	eef0 7a6b 	vmovlt.f32	s15, s23
 80144e6:	eef0 6ac4 	vabs.f32	s13, s8
 80144ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80144ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f2:	bfb8      	it	lt
 80144f4:	eef0 6a67 	vmovlt.f32	s13, s15
 80144f8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80144fc:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014500:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014504:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014508:	eef4 6acb 	vcmpe.f32	s13, s22
 801450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014510:	edc4 4a00 	vstr	s9, [r4]
 8014514:	ed84 5a01 	vstr	s10, [r4, #4]
 8014518:	edc4 5a02 	vstr	s11, [r4, #8]
 801451c:	ed84 6a03 	vstr	s12, [r4, #12]
 8014520:	eef0 7ac7 	vabs.f32	s15, s14
 8014524:	d507      	bpl.n	8014536 <MEMS_runMagCal+0x16f6>
 8014526:	eef4 7aea 	vcmpe.f32	s15, s21
 801452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452e:	d502      	bpl.n	8014536 <MEMS_runMagCal+0x16f6>
 8014530:	2d01      	cmp	r5, #1
 8014532:	f63e ae8b 	bhi.w	801324c <MEMS_runMagCal+0x40c>
 8014536:	b2dd      	uxtb	r5, r3
 8014538:	2d05      	cmp	r5, #5
 801453a:	d1a5      	bne.n	8014488 <MEMS_runMagCal+0x1648>
 801453c:	f7fe be86 	b.w	801324c <MEMS_runMagCal+0x40c>
 8014540:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8014544:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8014548:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 801454c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 80145f4 <MEMS_runMagCal+0x17b4>
 8014550:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014554:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8014558:	ee77 7a85 	vadd.f32	s15, s15, s10
 801455c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014560:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014564:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456c:	bf88      	it	hi
 801456e:	eef0 7a64 	vmovhi.f32	s15, s9
 8014572:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801457a:	bfb8      	it	lt
 801457c:	eef0 7a45 	vmovlt.f32	s15, s10
 8014580:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014584:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458c:	dc0e      	bgt.n	80145ac <MEMS_runMagCal+0x176c>
 801458e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014592:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459a:	dc07      	bgt.n	80145ac <MEMS_runMagCal+0x176c>
 801459c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80145a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80145a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a8:	f77f ad73 	ble.w	8014092 <MEMS_runMagCal+0x1252>
 80145ac:	2300      	movs	r3, #0
 80145ae:	f88b 3000 	strb.w	r3, [fp]
 80145b2:	f7ff b880 	b.w	80136b6 <MEMS_runMagCal+0x876>
 80145b6:	2300      	movs	r3, #0
 80145b8:	9307      	str	r3, [sp, #28]
 80145ba:	2301      	movs	r3, #1
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	f7ff bb61 	b.w	8013c84 <MEMS_runMagCal+0xe44>
 80145c2:	3301      	adds	r3, #1
 80145c4:	fb93 f2f7 	sdiv	r2, r3, r7
 80145c8:	fb07 3212 	mls	r2, r7, r2, r3
 80145cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80145ce:	b212      	sxth	r2, r2
 80145d0:	46bc      	mov	ip, r7
 80145d2:	f7ff bb75 	b.w	8013cc0 <MEMS_runMagCal+0xe80>
 80145d6:	bf00      	nop
 80145d8:	42960000 	.word	0x42960000
 80145dc:	430d0000 	.word	0x430d0000
 80145e0:	41966667 	.word	0x41966667
 80145e4:	433c0000 	.word	0x433c0000
 80145e8:	3c2e4c41 	.word	0x3c2e4c41
 80145ec:	3e99999a 	.word	0x3e99999a
 80145f0:	3f666666 	.word	0x3f666666
 80145f4:	3eaaaaab 	.word	0x3eaaaaab
 80145f8:	358637bd 	.word	0x358637bd
 80145fc:	423c0000 	.word	0x423c0000
 8014600:	3a83126f 	.word	0x3a83126f
 8014604:	00000000 	.word	0x00000000
 8014608:	eddd 7a08 	vldr	s15, [sp, #32]
 801460c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014600 <MEMS_runMagCal+0x17c0>
 8014610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014614:	ee07 3a10 	vmov	s14, r3
 8014618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801461c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014620:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014624:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014628:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014630:	f63f aa67 	bhi.w	8013b02 <MEMS_runMagCal+0xcc2>
 8014634:	9b07      	ldr	r3, [sp, #28]
 8014636:	2b00      	cmp	r3, #0
 8014638:	f43f a83d 	beq.w	80136b6 <MEMS_runMagCal+0x876>
 801463c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8014640:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014644:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801464c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014654:	bf4c      	ite	mi
 8014656:	2301      	movmi	r3, #1
 8014658:	2300      	movpl	r3, #0
 801465a:	9307      	str	r3, [sp, #28]
 801465c:	f7ff ba55 	b.w	8013b0a <MEMS_runMagCal+0xcca>
 8014660:	fb92 f1f0 	sdiv	r1, r2, r0
 8014664:	fb00 2211 	mls	r2, r0, r1, r2
 8014668:	b211      	sxth	r1, r2
 801466a:	4605      	mov	r5, r0
 801466c:	f7ff b8da 	b.w	8013824 <MEMS_runMagCal+0x9e4>
 8014670:	2200      	movs	r2, #0
 8014672:	23ff      	movs	r3, #255	; 0xff
 8014674:	ee1c 0a10 	vmov	r0, s24
 8014678:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801467c:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8014680:	eeb0 0a49 	vmov.f32	s0, s18
 8014684:	4649      	mov	r1, r9
 8014686:	f7f7 fd11 	bl	800c0ac <MEMS_updateMagBufferIndex>
 801468a:	f7ff b90b 	b.w	80138a4 <MEMS_runMagCal+0xa64>
 801468e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014692:	fb03 f60c 	mul.w	r6, r3, ip
 8014696:	fb03 f202 	mul.w	r2, r3, r2
 801469a:	fb03 f301 	mul.w	r3, r3, r1
 801469e:	ee06 6a90 	vmov	s13, r6
 80146a2:	ee07 2a10 	vmov	s14, r2
 80146a6:	ee07 3a90 	vmov	s15, r3
 80146aa:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80145f8 <MEMS_runMagCal+0x17b8>
 80146ae:	9e05      	ldr	r6, [sp, #20]
 80146b0:	9400      	str	r4, [sp, #0]
 80146b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80146b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80146c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80146c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146ca:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 80146ce:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80146d2:	e9c5 0003 	strd	r0, r0, [r5, #12]
 80146d6:	e9c5 0005 	strd	r0, r0, [r5, #20]
 80146da:	6028      	str	r0, [r5, #0]
 80146dc:	ed96 0a01 	vldr	s0, [r6, #4]
 80146e0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80146e4:	4642      	mov	r2, r8
 80146e6:	ab0d      	add	r3, sp, #52	; 0x34
 80146e8:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 80146ec:	ad0e      	add	r5, sp, #56	; 0x38
 80146ee:	ee1c 0a10 	vmov	r0, s24
 80146f2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80146f6:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80146fa:	f7f7 fd79 	bl	800c1f0 <getMagStats.constprop.0>
 80146fe:	9500      	str	r5, [sp, #0]
 8014700:	ed96 0a01 	vldr	s0, [r6, #4]
 8014704:	ee1c 0a10 	vmov	r0, s24
 8014708:	aa2d      	add	r2, sp, #180	; 0xb4
 801470a:	ab0d      	add	r3, sp, #52	; 0x34
 801470c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8014710:	f7f7 fd6e 	bl	800c1f0 <getMagStats.constprop.0>
 8014714:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80145fc <MEMS_runMagCal+0x17bc>
 8014718:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801471c:	ed95 7a00 	vldr	s14, [r5]
 8014720:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014724:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014728:	eef0 7ae7 	vabs.f32	s15, s15
 801472c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014734:	d505      	bpl.n	8014742 <MEMS_runMagCal+0x1902>
 8014736:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801473e:	f100 81fa 	bmi.w	8014b36 <MEMS_runMagCal+0x1cf6>
 8014742:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014746:	eef4 7ae6 	vcmpe.f32	s15, s13
 801474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801474e:	f140 81a8 	bpl.w	8014aa2 <MEMS_runMagCal+0x1c62>
 8014752:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801475a:	9b03      	ldr	r3, [sp, #12]
 801475c:	bfb8      	it	lt
 801475e:	2302      	movlt	r3, #2
 8014760:	edd4 6a00 	vldr	s13, [r4]
 8014764:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801476c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014774:	f57e af9f 	bpl.w	80136b6 <MEMS_runMagCal+0x876>
 8014778:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 801477c:	429a      	cmp	r2, r3
 801477e:	f63e af9a 	bhi.w	80136b6 <MEMS_runMagCal+0x876>
 8014782:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014786:	ee67 7a27 	vmul.f32	s15, s14, s15
 801478a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014792:	d40e      	bmi.n	80147b2 <MEMS_runMagCal+0x1972>
 8014794:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014798:	eef4 6ae7 	vcmpe.f32	s13, s15
 801479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a0:	f140 80d4 	bpl.w	801494c <MEMS_runMagCal+0x1b0c>
 80147a4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80147a8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80147ac:	429a      	cmp	r2, r3
 80147ae:	f080 80cd 	bcs.w	801494c <MEMS_runMagCal+0x1b0c>
 80147b2:	9b05      	ldr	r3, [sp, #20]
 80147b4:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 80147b8:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 80147bc:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 80147c0:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 80147c4:	edd3 5a01 	vldr	s11, [r3, #4]
 80147c8:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 80147cc:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 80147d0:	1b8b      	subs	r3, r1, r6
 80147d2:	eba0 0c07 	sub.w	ip, r0, r7
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	bfb8      	it	lt
 80147da:	425b      	neglt	r3, r3
 80147dc:	f1bc 0f00 	cmp.w	ip, #0
 80147e0:	bfb8      	it	lt
 80147e2:	f1cc 0c00 	rsblt	ip, ip, #0
 80147e6:	4563      	cmp	r3, ip
 80147e8:	bfb8      	it	lt
 80147ea:	4663      	movlt	r3, ip
 80147ec:	eba2 0c04 	sub.w	ip, r2, r4
 80147f0:	f1bc 0f00 	cmp.w	ip, #0
 80147f4:	b21b      	sxth	r3, r3
 80147f6:	bfb8      	it	lt
 80147f8:	f1cc 0c00 	rsblt	ip, ip, #0
 80147fc:	4563      	cmp	r3, ip
 80147fe:	bfb8      	it	lt
 8014800:	4663      	movlt	r3, ip
 8014802:	b21b      	sxth	r3, r3
 8014804:	ee07 3a90 	vmov	s15, r3
 8014808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801480c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014810:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014814:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481c:	f140 8096 	bpl.w	801494c <MEMS_runMagCal+0x1b0c>
 8014820:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014824:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014828:	ee86 2a87 	vdiv.f32	s4, s13, s14
 801482c:	ee04 3a90 	vmov	s9, r3
 8014830:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8014834:	ee05 3a10 	vmov	s10, r3
 8014838:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 801483c:	ee07 0a90 	vmov	s15, r0
 8014840:	ee05 3a90 	vmov	s11, r3
 8014844:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014848:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801484c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014854:	ee06 3a10 	vmov	s12, r3
 8014858:	ee03 7a90 	vmov	s7, r7
 801485c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8014860:	ee07 1a90 	vmov	s15, r1
 8014864:	ee00 3a90 	vmov	s1, r3
 8014868:	ee66 6a84 	vmul.f32	s13, s13, s8
 801486c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014870:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014874:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801487c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014880:	ee03 6a90 	vmov	s7, r6
 8014884:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014888:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801488c:	ee07 2a90 	vmov	s15, r2
 8014890:	ee01 3a10 	vmov	s2, r3
 8014894:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014898:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801489c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80148a0:	eee2 4a20 	vfma.f32	s9, s4, s1
 80148a4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80148a8:	ee01 3a90 	vmov	s3, r3
 80148ac:	ee25 5a04 	vmul.f32	s10, s10, s8
 80148b0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80148b4:	eea2 7a03 	vfma.f32	s14, s4, s6
 80148b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148bc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80148c0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80148c4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80148c8:	ee03 4a90 	vmov	s7, r4
 80148cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80148d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80148d4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80148d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80148dc:	ee16 2a90 	vmov	r2, s13
 80148e0:	ee04 3a10 	vmov	s8, r3
 80148e4:	eea2 5a01 	vfma.f32	s10, s4, s2
 80148e8:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 80148ec:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80148f0:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80148f4:	eee2 7a23 	vfma.f32	s15, s4, s7
 80148f8:	ee14 2a90 	vmov	r2, s9
 80148fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014900:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014904:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014908:	eee2 5a21 	vfma.f32	s11, s4, s3
 801490c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014910:	eea2 6a04 	vfma.f32	s12, s4, s8
 8014914:	ee17 2a10 	vmov	r2, s14
 8014918:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014920:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8014924:	ee15 2a10 	vmov	r2, s10
 8014928:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801492c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014930:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8014934:	ee17 2a90 	vmov	r2, s15
 8014938:	ee16 3a10 	vmov	r3, s12
 801493c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014940:	ee15 2a90 	vmov	r2, s11
 8014944:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014948:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801494c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801494e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014952:	f7fe bda2 	b.w	801349a <MEMS_runMagCal+0x65a>
 8014956:	ee1c 0a10 	vmov	r0, s24
 801495a:	eeb0 0a49 	vmov.f32	s0, s18
 801495e:	4649      	mov	r1, r9
 8014960:	f7f7 fba4 	bl	800c0ac <MEMS_updateMagBufferIndex>
 8014964:	f7ff b89f 	b.w	8013aa6 <MEMS_runMagCal+0xc66>
 8014968:	eddd 7a08 	vldr	s15, [sp, #32]
 801496c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014600 <MEMS_runMagCal+0x17c0>
 8014970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014978:	e660      	b.n	801463c <MEMS_runMagCal+0x17fc>
 801497a:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8014604 <MEMS_runMagCal+0x17c4>
 801497e:	1c6b      	adds	r3, r5, #1
 8014980:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014984:	ad0e      	add	r5, sp, #56	; 0x38
 8014986:	fb93 f1f6 	sdiv	r1, r3, r6
 801498a:	fa1f fc86 	uxth.w	ip, r6
 801498e:	fb06 3311 	mls	r3, r6, r1, r3
 8014992:	edc5 6a00 	vstr	s13, [r5]
 8014996:	2e00      	cmp	r6, #0
 8014998:	f000 80e1 	beq.w	8014b5e <MEMS_runMagCal+0x1d1e>
 801499c:	b29b      	uxth	r3, r3
 801499e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80149a2:	1c58      	adds	r0, r3, #1
 80149a4:	eeb0 6a66 	vmov.f32	s12, s13
 80149a8:	fa10 fc8c 	uxtah	ip, r0, ip
 80149ac:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80149b0:	4619      	mov	r1, r3
 80149b2:	e000      	b.n	80149b6 <MEMS_runMagCal+0x1b76>
 80149b4:	3001      	adds	r0, #1
 80149b6:	fbb1 f3f6 	udiv	r3, r1, r6
 80149ba:	fb06 1313 	mls	r3, r6, r3, r1
 80149be:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80149c2:	8a99      	ldrh	r1, [r3, #20]
 80149c4:	4571      	cmp	r1, lr
 80149c6:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 80149ca:	f1a3 031c 	sub.w	r3, r3, #28
 80149ce:	bf98      	it	ls
 80149d0:	ebae 0301 	subls.w	r3, lr, r1
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	fb03 f303 	mul.w	r3, r3, r3
 80149da:	ee07 1a10 	vmov	s14, r1
 80149de:	ee07 3a90 	vmov	s15, r3
 80149e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149ea:	4584      	cmp	ip, r0
 80149ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80149f0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80149f4:	4601      	mov	r1, r0
 80149f6:	d1dd      	bne.n	80149b4 <MEMS_runMagCal+0x1b74>
 80149f8:	ee07 4a90 	vmov	s15, r4
 80149fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a00:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014d9c <MEMS_runMagCal+0x1f5c>
 8014a04:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014da0 <MEMS_runMagCal+0x1f60>
 8014a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a0c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014a10:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014a14:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014a18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014a1c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a24:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014a28:	edc5 7a00 	vstr	s15, [r5]
 8014a2c:	dd47      	ble.n	8014abe <MEMS_runMagCal+0x1c7e>
 8014a2e:	eddf 7add 	vldr	s15, [pc, #884]	; 8014da4 <MEMS_runMagCal+0x1f64>
 8014a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a36:	2302      	movs	r3, #2
 8014a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a3c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014a40:	f77e aead 	ble.w	801379e <MEMS_runMagCal+0x95e>
 8014a44:	2301      	movs	r3, #1
 8014a46:	f88b 3001 	strb.w	r3, [fp, #1]
 8014a4a:	f7fe bea8 	b.w	801379e <MEMS_runMagCal+0x95e>
 8014a4e:	ee1c 0a10 	vmov	r0, s24
 8014a52:	eeb0 0a49 	vmov.f32	s0, s18
 8014a56:	4649      	mov	r1, r9
 8014a58:	f7f7 fb28 	bl	800c0ac <MEMS_updateMagBufferIndex>
 8014a5c:	f7fe bf0d 	b.w	801387a <MEMS_runMagCal+0xa3a>
 8014a60:	9b02      	ldr	r3, [sp, #8]
 8014a62:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014a66:	f8db 100c 	ldr.w	r1, [fp, #12]
 8014a6a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8014a6e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014a72:	4413      	add	r3, r2
 8014a74:	4299      	cmp	r1, r3
 8014a76:	f4bf ad99 	bcs.w	80145ac <MEMS_runMagCal+0x176c>
 8014a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a80:	fb03 f301 	mul.w	r3, r3, r1
 8014a84:	3364      	adds	r3, #100	; 0x64
 8014a86:	4293      	cmp	r3, r2
 8014a88:	bf38      	it	cc
 8014a8a:	4613      	movcc	r3, r2
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	f8cb 300c 	str.w	r3, [fp, #12]
 8014a92:	f88b 2000 	strb.w	r2, [fp]
 8014a96:	f7fe be0e 	b.w	80136b6 <MEMS_runMagCal+0x876>
 8014a9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014a9e:	f7ff ba6f 	b.w	8013f80 <MEMS_runMagCal+0x1140>
 8014aa2:	9b03      	ldr	r3, [sp, #12]
 8014aa4:	e65c      	b.n	8014760 <MEMS_runMagCal+0x1920>
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	9b02      	ldr	r3, [sp, #8]
 8014aaa:	3301      	adds	r3, #1
 8014aac:	fb93 f2f1 	sdiv	r2, r3, r1
 8014ab0:	fb01 3212 	mls	r2, r1, r2, r3
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	b212      	sxth	r2, r2
 8014ab8:	4689      	mov	r9, r1
 8014aba:	f7ff ba11 	b.w	8013ee0 <MEMS_runMagCal+0x10a0>
 8014abe:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014da8 <MEMS_runMagCal+0x1f68>
 8014ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aca:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014da4 <MEMS_runMagCal+0x1f64>
 8014ace:	d434      	bmi.n	8014b3a <MEMS_runMagCal+0x1cfa>
 8014ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad8:	bfc4      	itt	gt
 8014ada:	2301      	movgt	r3, #1
 8014adc:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014ae0:	f7ff b892 	b.w	8013c08 <MEMS_runMagCal+0xdc8>
 8014ae4:	9b05      	ldr	r3, [sp, #20]
 8014ae6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8014aea:	ed93 0a01 	vldr	s0, [r3, #4]
 8014aee:	f7fe bd84 	b.w	80135fa <MEMS_runMagCal+0x7ba>
 8014af2:	2303      	movs	r3, #3
 8014af4:	9303      	str	r3, [sp, #12]
 8014af6:	f7fe bdd4 	b.w	80136a2 <MEMS_runMagCal+0x862>
 8014afa:	4619      	mov	r1, r3
 8014afc:	f7ff ba78 	b.w	8013ff0 <MEMS_runMagCal+0x11b0>
 8014b00:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014b04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014b08:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b10:	f73f ad4c 	bgt.w	80145ac <MEMS_runMagCal+0x176c>
 8014b14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014b18:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b20:	f73f ad44 	bgt.w	80145ac <MEMS_runMagCal+0x176c>
 8014b24:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014b28:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b30:	f77f aaaf 	ble.w	8014092 <MEMS_runMagCal+0x1252>
 8014b34:	e53a      	b.n	80145ac <MEMS_runMagCal+0x176c>
 8014b36:	2303      	movs	r3, #3
 8014b38:	e612      	b.n	8014760 <MEMS_runMagCal+0x1920>
 8014b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b3e:	2300      	movs	r3, #0
 8014b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b44:	f88b 3001 	strb.w	r3, [fp, #1]
 8014b48:	f04f 0103 	mov.w	r1, #3
 8014b4c:	bfc8      	it	gt
 8014b4e:	2301      	movgt	r3, #1
 8014b50:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014b54:	bfc8      	it	gt
 8014b56:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014b5a:	f7ff b858 	b.w	8013c0e <MEMS_runMagCal+0xdce>
 8014b5e:	2303      	movs	r3, #3
 8014b60:	f88b c001 	strb.w	ip, [fp, #1]
 8014b64:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014b68:	f7ff b851 	b.w	8013c0e <MEMS_runMagCal+0xdce>
 8014b6c:	9b04      	ldr	r3, [sp, #16]
 8014b6e:	fb93 f7f9 	sdiv	r7, r3, r9
 8014b72:	fb09 3717 	mls	r7, r9, r7, r3
 8014b76:	b23f      	sxth	r7, r7
 8014b78:	f7ff ba9a 	b.w	80140b0 <MEMS_runMagCal+0x1270>
 8014b7c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014dac <MEMS_runMagCal+0x1f6c>
 8014b80:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014b84:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014b88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b90:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014b94:	ee17 2a90 	vmov	r2, s15
 8014b98:	b291      	uxth	r1, r2
 8014b9a:	b113      	cbz	r3, 8014ba2 <MEMS_runMagCal+0x1d62>
 8014b9c:	3b01      	subs	r3, #1
 8014b9e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014ba2:	ee1c 0a10 	vmov	r0, s24
 8014ba6:	f7f7 fa81 	bl	800c0ac <MEMS_updateMagBufferIndex>
 8014baa:	eddd 7a08 	vldr	s15, [sp, #32]
 8014bae:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014bb2:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014db0 <MEMS_runMagCal+0x1f70>
 8014bb6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bba:	f001 f8b5 	bl	8015d28 <roundf>
 8014bbe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014bc8:	f88b 3000 	strb.w	r3, [fp]
 8014bcc:	f7fe bd73 	b.w	80136b6 <MEMS_runMagCal+0x876>
 8014bd0:	fb93 f2f6 	sdiv	r2, r3, r6
 8014bd4:	fb06 3312 	mls	r3, r6, r2, r3
 8014bd8:	b21a      	sxth	r2, r3
 8014bda:	4630      	mov	r0, r6
 8014bdc:	f7ff bb00 	b.w	80141e0 <MEMS_runMagCal+0x13a0>
 8014be0:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014be4:	f001 f8a0 	bl	8015d28 <roundf>
 8014be8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014bec:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014bf0:	ee17 3a90 	vmov	r3, s15
 8014bf4:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014bf8:	f8a9 3000 	strh.w	r3, [r9]
 8014bfc:	f001 f894 	bl	8015d28 <roundf>
 8014c00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014c04:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014c08:	ee17 3a90 	vmov	r3, s15
 8014c0c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014c10:	f001 f88a 	bl	8015d28 <roundf>
 8014c14:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014c18:	ac0f      	add	r4, sp, #60	; 0x3c
 8014c1a:	ee17 5a90 	vmov	r5, s15
 8014c1e:	9400      	str	r4, [sp, #0]
 8014c20:	ee1c 0a10 	vmov	r0, s24
 8014c24:	4649      	mov	r1, r9
 8014c26:	ab10      	add	r3, sp, #64	; 0x40
 8014c28:	eeb0 0a48 	vmov.f32	s0, s16
 8014c2c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014c30:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014c34:	f7f7 fadc 	bl	800c1f0 <getMagStats.constprop.0>
 8014c38:	ed94 7a00 	vldr	s14, [r4]
 8014c3c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014db4 <MEMS_runMagCal+0x1f74>
 8014c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c48:	d50e      	bpl.n	8014c68 <MEMS_runMagCal+0x1e28>
 8014c4a:	b968      	cbnz	r0, 8014c68 <MEMS_runMagCal+0x1e28>
 8014c4c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014c50:	b32b      	cbz	r3, 8014c9e <MEMS_runMagCal+0x1e5e>
 8014c52:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014c56:	ee07 3a90 	vmov	s15, r3
 8014c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c66:	dc1a      	bgt.n	8014c9e <MEMS_runMagCal+0x1e5e>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	f8c9 3000 	str.w	r3, [r9]
 8014c6e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014c72:	f7ff ba97 	b.w	80141a4 <MEMS_runMagCal+0x1364>
 8014c76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c7a:	f7ff bbea 	b.w	8014452 <MEMS_runMagCal+0x1612>
 8014c7e:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014db8 <MEMS_runMagCal+0x1f78>
 8014c82:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014c86:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014c8a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014c8e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014c92:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014c96:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014c9a:	f7ff bb2e 	b.w	80142fa <MEMS_runMagCal+0x14ba>
 8014c9e:	eddd 7a08 	vldr	s15, [sp, #32]
 8014ca2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014ca6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014db0 <MEMS_runMagCal+0x1f70>
 8014caa:	2303      	movs	r3, #3
 8014cac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014cb0:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014cb4:	e781      	b.n	8014bba <MEMS_runMagCal+0x1d7a>
 8014cb6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014dbc <MEMS_runMagCal+0x1f7c>
 8014cba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc2:	f77e ab1b 	ble.w	80132fc <MEMS_runMagCal+0x4bc>
 8014cc6:	f7fe bb21 	b.w	801330c <MEMS_runMagCal+0x4cc>
 8014cca:	2224      	movs	r2, #36	; 0x24
 8014ccc:	2100      	movs	r1, #0
 8014cce:	a82d      	add	r0, sp, #180	; 0xb4
 8014cd0:	f002 fe54 	bl	801797c <memset>
 8014cd4:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014dc0 <MEMS_runMagCal+0x1f80>
 8014cd8:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014cdc:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014ce0:	4627      	mov	r7, r4
 8014ce2:	ae2d      	add	r6, sp, #180	; 0xb4
 8014ce4:	2500      	movs	r5, #0
 8014ce6:	3501      	adds	r5, #1
 8014ce8:	ecb7 0a01 	vldmia	r7!, {s0}
 8014cec:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014cf0:	f001 f81a 	bl	8015d28 <roundf>
 8014cf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014cf8:	4633      	mov	r3, r6
 8014cfa:	edc3 9a00 	vstr	s19, [r3]
 8014cfe:	ee10 3a10 	vmov	r3, s0
 8014d02:	2d03      	cmp	r5, #3
 8014d04:	f829 3b02 	strh.w	r3, [r9], #2
 8014d08:	f106 0610 	add.w	r6, r6, #16
 8014d0c:	d1eb      	bne.n	8014ce6 <MEMS_runMagCal+0x1ea6>
 8014d0e:	ad12      	add	r5, sp, #72	; 0x48
 8014d10:	9500      	str	r5, [sp, #0]
 8014d12:	ab2b      	add	r3, sp, #172	; 0xac
 8014d14:	eeb0 0a48 	vmov.f32	s0, s16
 8014d18:	ee1c 0a10 	vmov	r0, s24
 8014d1c:	a915      	add	r1, sp, #84	; 0x54
 8014d1e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014d20:	f7f7 fa66 	bl	800c1f0 <getMagStats.constprop.0>
 8014d24:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014dc0 <MEMS_runMagCal+0x1f80>
 8014d28:	ed94 4a03 	vldr	s8, [r4, #12]
 8014d2c:	edd5 7a00 	vldr	s15, [r5]
 8014d30:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014d34:	edd4 6a06 	vldr	s13, [r4, #24]
 8014d38:	edd4 4a00 	vldr	s9, [r4]
 8014d3c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014d40:	edd4 5a02 	vldr	s11, [r4, #8]
 8014d44:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014d48:	ad2e      	add	r5, sp, #184	; 0xb8
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	e9c5 3300 	strd	r3, r3, [r5]
 8014d50:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014d54:	60ab      	str	r3, [r5, #8]
 8014d56:	61ab      	str	r3, [r5, #24]
 8014d58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014d5c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d64:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014d68:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014d6c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014d74:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014d78:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014d7c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014d80:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014d84:	d405      	bmi.n	8014d92 <MEMS_runMagCal+0x1f52>
 8014d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8e:	f57e aa9b 	bpl.w	80132c8 <MEMS_runMagCal+0x488>
 8014d92:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014dc4 <MEMS_runMagCal+0x1f84>
 8014d96:	f7fe ba9d 	b.w	80132d4 <MEMS_runMagCal+0x494>
 8014d9a:	bf00      	nop
 8014d9c:	3c23d70a 	.word	0x3c23d70a
 8014da0:	4b095440 	.word	0x4b095440
 8014da4:	481c4000 	.word	0x481c4000
 8014da8:	471c4000 	.word	0x471c4000
 8014dac:	433d0000 	.word	0x433d0000
 8014db0:	3a83126f 	.word	0x3a83126f
 8014db4:	3ff4cccd 	.word	0x3ff4cccd
 8014db8:	7f800000 	.word	0x7f800000
 8014dbc:	3ee66666 	.word	0x3ee66666
 8014dc0:	423c0000 	.word	0x423c0000
 8014dc4:	00000000 	.word	0x00000000
 8014dc8:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	f67e acac 	bls.w	801372a <MEMS_runMagCal+0x8ea>
 8014dd2:	f7fe bca0 	b.w	8013716 <MEMS_runMagCal+0x8d6>
 8014dd6:	bf00      	nop

08014dd8 <MotionFX_GetStateSize>:
 8014dd8:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014ddc:	4770      	bx	lr
 8014dde:	bf00      	nop

08014de0 <MotionFX_initialize>:
 8014de0:	4a3b      	ldr	r2, [pc, #236]	; (8014ed0 <MotionFX_initialize+0xf0>)
 8014de2:	493c      	ldr	r1, [pc, #240]	; (8014ed4 <MotionFX_initialize+0xf4>)
 8014de4:	6813      	ldr	r3, [r2, #0]
 8014de6:	f023 0301 	bic.w	r3, r3, #1
 8014dea:	b530      	push	{r4, r5, lr}
 8014dec:	6013      	str	r3, [r2, #0]
 8014dee:	680b      	ldr	r3, [r1, #0]
 8014df0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014df4:	4013      	ands	r3, r2
 8014df6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014dfa:	42ab      	cmp	r3, r5
 8014dfc:	b085      	sub	sp, #20
 8014dfe:	4604      	mov	r4, r0
 8014e00:	d013      	beq.n	8014e2a <MotionFX_initialize+0x4a>
 8014e02:	680b      	ldr	r3, [r1, #0]
 8014e04:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014e08:	4013      	ands	r3, r2
 8014e0a:	428b      	cmp	r3, r1
 8014e0c:	d00d      	beq.n	8014e2a <MotionFX_initialize+0x4a>
 8014e0e:	4b32      	ldr	r3, [pc, #200]	; (8014ed8 <MotionFX_initialize+0xf8>)
 8014e10:	2201      	movs	r2, #1
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	2a00      	cmp	r2, #0
 8014e18:	d1fc      	bne.n	8014e14 <MotionFX_initialize+0x34>
 8014e1a:	4b30      	ldr	r3, [pc, #192]	; (8014edc <MotionFX_initialize+0xfc>)
 8014e1c:	4a30      	ldr	r2, [pc, #192]	; (8014ee0 <MotionFX_initialize+0x100>)
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	681a      	ldr	r2, [r3, #0]
 8014e22:	4b30      	ldr	r3, [pc, #192]	; (8014ee4 <MotionFX_initialize+0x104>)
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d01f      	beq.n	8014e68 <MotionFX_initialize+0x88>
 8014e28:	e7fe      	b.n	8014e28 <MotionFX_initialize+0x48>
 8014e2a:	4b2f      	ldr	r3, [pc, #188]	; (8014ee8 <MotionFX_initialize+0x108>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d1ed      	bne.n	8014e0e <MotionFX_initialize+0x2e>
 8014e32:	4a2e      	ldr	r2, [pc, #184]	; (8014eec <MotionFX_initialize+0x10c>)
 8014e34:	6813      	ldr	r3, [r2, #0]
 8014e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014e3a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014e3e:	d006      	beq.n	8014e4e <MotionFX_initialize+0x6e>
 8014e40:	6813      	ldr	r3, [r2, #0]
 8014e42:	f240 4283 	movw	r2, #1155	; 0x483
 8014e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	d1df      	bne.n	8014e0e <MotionFX_initialize+0x2e>
 8014e4e:	4b28      	ldr	r3, [pc, #160]	; (8014ef0 <MotionFX_initialize+0x110>)
 8014e50:	2201      	movs	r2, #1
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	681a      	ldr	r2, [r3, #0]
 8014e56:	2a00      	cmp	r2, #0
 8014e58:	d1fc      	bne.n	8014e54 <MotionFX_initialize+0x74>
 8014e5a:	4b26      	ldr	r3, [pc, #152]	; (8014ef4 <MotionFX_initialize+0x114>)
 8014e5c:	4a20      	ldr	r2, [pc, #128]	; (8014ee0 <MotionFX_initialize+0x100>)
 8014e5e:	601a      	str	r2, [r3, #0]
 8014e60:	681a      	ldr	r2, [r3, #0]
 8014e62:	4b20      	ldr	r3, [pc, #128]	; (8014ee4 <MotionFX_initialize+0x104>)
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d1df      	bne.n	8014e28 <MotionFX_initialize+0x48>
 8014e68:	4b23      	ldr	r3, [pc, #140]	; (8014ef8 <MotionFX_initialize+0x118>)
 8014e6a:	4a24      	ldr	r2, [pc, #144]	; (8014efc <MotionFX_initialize+0x11c>)
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	2501      	movs	r5, #1
 8014e70:	4620      	mov	r0, r4
 8014e72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014e76:	7115      	strb	r5, [r2, #4]
 8014e78:	f7f7 faa0 	bl	800c3bc <MFX_emptyAttitude>
 8014e7c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014e80:	a901      	add	r1, sp, #4
 8014e82:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014e86:	f7f6 fdc3 	bl	800ba10 <updateOrientation>
 8014e8a:	a903      	add	r1, sp, #12
 8014e8c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014e90:	f7f6 fdbe 	bl	800ba10 <updateOrientation>
 8014e94:	a902      	add	r1, sp, #8
 8014e96:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014e9a:	f7f6 fdb9 	bl	800ba10 <updateOrientation>
 8014e9e:	4818      	ldr	r0, [pc, #96]	; (8014f00 <MotionFX_initialize+0x120>)
 8014ea0:	4918      	ldr	r1, [pc, #96]	; (8014f04 <MotionFX_initialize+0x124>)
 8014ea2:	4a19      	ldr	r2, [pc, #100]	; (8014f08 <MotionFX_initialize+0x128>)
 8014ea4:	4b19      	ldr	r3, [pc, #100]	; (8014f0c <MotionFX_initialize+0x12c>)
 8014ea6:	7365      	strb	r5, [r4, #13]
 8014ea8:	4d19      	ldr	r5, [pc, #100]	; (8014f10 <MotionFX_initialize+0x130>)
 8014eaa:	62a0      	str	r0, [r4, #40]	; 0x28
 8014eac:	6361      	str	r1, [r4, #52]	; 0x34
 8014eae:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	61a2      	str	r2, [r4, #24]
 8014eb6:	61e3      	str	r3, [r4, #28]
 8014eb8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014ebc:	f240 1301 	movw	r3, #257	; 0x101
 8014ec0:	6225      	str	r5, [r4, #32]
 8014ec2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014ec4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014ec8:	80a2      	strh	r2, [r4, #4]
 8014eca:	81e3      	strh	r3, [r4, #14]
 8014ecc:	b005      	add	sp, #20
 8014ece:	bd30      	pop	{r4, r5, pc}
 8014ed0:	e0002000 	.word	0xe0002000
 8014ed4:	e000ed00 	.word	0xe000ed00
 8014ed8:	40023008 	.word	0x40023008
 8014edc:	40023000 	.word	0x40023000
 8014ee0:	f407a5c2 	.word	0xf407a5c2
 8014ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8014ee8:	e0042000 	.word	0xe0042000
 8014eec:	5c001000 	.word	0x5c001000
 8014ef0:	58024c08 	.word	0x58024c08
 8014ef4:	58024c00 	.word	0x58024c00
 8014ef8:	00756e65 	.word	0x00756e65
 8014efc:	200002e0 	.word	0x200002e0
 8014f00:	3f666666 	.word	0x3f666666
 8014f04:	3f2ac083 	.word	0x3f2ac083
 8014f08:	3a51b717 	.word	0x3a51b717
 8014f0c:	3a378034 	.word	0x3a378034
 8014f10:	3b378034 	.word	0x3b378034

08014f14 <MotionFX_setKnobs>:
 8014f14:	4b23      	ldr	r3, [pc, #140]	; (8014fa4 <MotionFX_setKnobs+0x90>)
 8014f16:	791b      	ldrb	r3, [r3, #4]
 8014f18:	b903      	cbnz	r3, 8014f1c <MotionFX_setKnobs+0x8>
 8014f1a:	4770      	bx	lr
 8014f1c:	2900      	cmp	r1, #0
 8014f1e:	d0fc      	beq.n	8014f1a <MotionFX_setKnobs+0x6>
 8014f20:	b570      	push	{r4, r5, r6, lr}
 8014f22:	4604      	mov	r4, r0
 8014f24:	684a      	ldr	r2, [r1, #4]
 8014f26:	6808      	ldr	r0, [r1, #0]
 8014f28:	688b      	ldr	r3, [r1, #8]
 8014f2a:	6363      	str	r3, [r4, #52]	; 0x34
 8014f2c:	62a0      	str	r0, [r4, #40]	; 0x28
 8014f2e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014f30:	7b0b      	ldrb	r3, [r1, #12]
 8014f32:	7163      	strb	r3, [r4, #5]
 8014f34:	6908      	ldr	r0, [r1, #16]
 8014f36:	694a      	ldr	r2, [r1, #20]
 8014f38:	698b      	ldr	r3, [r1, #24]
 8014f3a:	6223      	str	r3, [r4, #32]
 8014f3c:	61e2      	str	r2, [r4, #28]
 8014f3e:	61a0      	str	r0, [r4, #24]
 8014f40:	7f0b      	ldrb	r3, [r1, #28]
 8014f42:	7123      	strb	r3, [r4, #4]
 8014f44:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014f48:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014f4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014f4e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014f52:	460a      	mov	r2, r1
 8014f54:	460b      	mov	r3, r1
 8014f56:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014f5a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014f5e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014f62:	7889      	ldrb	r1, [r1, #2]
 8014f64:	7892      	ldrb	r2, [r2, #2]
 8014f66:	789b      	ldrb	r3, [r3, #2]
 8014f68:	b084      	sub	sp, #16
 8014f6a:	f88d 1006 	strb.w	r1, [sp, #6]
 8014f6e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014f72:	a901      	add	r1, sp, #4
 8014f74:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014f78:	f88d 200a 	strb.w	r2, [sp, #10]
 8014f7c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014f80:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014f84:	f88d 300e 	strb.w	r3, [sp, #14]
 8014f88:	f7f6 fd42 	bl	800ba10 <updateOrientation>
 8014f8c:	a903      	add	r1, sp, #12
 8014f8e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f92:	f7f6 fd3d 	bl	800ba10 <updateOrientation>
 8014f96:	a902      	add	r1, sp, #8
 8014f98:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f9c:	f7f6 fd38 	bl	800ba10 <updateOrientation>
 8014fa0:	b004      	add	sp, #16
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}
 8014fa4:	200002e0 	.word	0x200002e0

08014fa8 <MotionFX_getKnobs>:
 8014fa8:	4b1c      	ldr	r3, [pc, #112]	; (801501c <MotionFX_getKnobs+0x74>)
 8014faa:	791b      	ldrb	r3, [r3, #4]
 8014fac:	b903      	cbnz	r3, 8014fb0 <MotionFX_getKnobs+0x8>
 8014fae:	4770      	bx	lr
 8014fb0:	460a      	mov	r2, r1
 8014fb2:	2900      	cmp	r1, #0
 8014fb4:	d0fb      	beq.n	8014fae <MotionFX_getKnobs+0x6>
 8014fb6:	b510      	push	{r4, lr}
 8014fb8:	4604      	mov	r4, r0
 8014fba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014fbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fc0:	6093      	str	r3, [r2, #8]
 8014fc2:	6010      	str	r0, [r2, #0]
 8014fc4:	6051      	str	r1, [r2, #4]
 8014fc6:	7963      	ldrb	r3, [r4, #5]
 8014fc8:	7313      	strb	r3, [r2, #12]
 8014fca:	69a0      	ldr	r0, [r4, #24]
 8014fcc:	69e1      	ldr	r1, [r4, #28]
 8014fce:	6a23      	ldr	r3, [r4, #32]
 8014fd0:	6193      	str	r3, [r2, #24]
 8014fd2:	6110      	str	r0, [r2, #16]
 8014fd4:	6151      	str	r1, [r2, #20]
 8014fd6:	7923      	ldrb	r3, [r4, #4]
 8014fd8:	7713      	strb	r3, [r2, #28]
 8014fda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014fde:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014fe2:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014fe8:	f102 011d 	add.w	r1, r2, #29
 8014fec:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014ff0:	f7f6 fb66 	bl	800b6c0 <findAxis>
 8014ff4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014ff8:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014ffc:	f7f6 fb60 	bl	800b6c0 <findAxis>
 8015000:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8015004:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8015008:	f7f6 fb5a 	bl	800b6c0 <findAxis>
 801500c:	2300      	movs	r3, #0
 801500e:	f882 3020 	strb.w	r3, [r2, #32]
 8015012:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8015016:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801501a:	bd10      	pop	{r4, pc}
 801501c:	200002e0 	.word	0x200002e0

08015020 <MotionFX_enable_6X>:
 8015020:	4b0e      	ldr	r3, [pc, #56]	; (801505c <MotionFX_enable_6X+0x3c>)
 8015022:	791b      	ldrb	r3, [r3, #4]
 8015024:	b903      	cbnz	r3, 8015028 <MotionFX_enable_6X+0x8>
 8015026:	4770      	bx	lr
 8015028:	2900      	cmp	r1, #0
 801502a:	d0fc      	beq.n	8015026 <MotionFX_enable_6X+0x6>
 801502c:	b530      	push	{r4, r5, lr}
 801502e:	1d05      	adds	r5, r0, #4
 8015030:	b099      	sub	sp, #100	; 0x64
 8015032:	4604      	mov	r4, r0
 8015034:	4629      	mov	r1, r5
 8015036:	225c      	movs	r2, #92	; 0x5c
 8015038:	a801      	add	r0, sp, #4
 801503a:	f002 fc77 	bl	801792c <memcpy>
 801503e:	4620      	mov	r0, r4
 8015040:	f7f7 f9bc 	bl	800c3bc <MFX_emptyAttitude>
 8015044:	a901      	add	r1, sp, #4
 8015046:	4628      	mov	r0, r5
 8015048:	225c      	movs	r2, #92	; 0x5c
 801504a:	f002 fc6f 	bl	801792c <memcpy>
 801504e:	2300      	movs	r3, #0
 8015050:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8015054:	7363      	strb	r3, [r4, #13]
 8015056:	b019      	add	sp, #100	; 0x64
 8015058:	bd30      	pop	{r4, r5, pc}
 801505a:	bf00      	nop
 801505c:	200002e0 	.word	0x200002e0

08015060 <MotionFX_enable_9X>:
 8015060:	4b0e      	ldr	r3, [pc, #56]	; (801509c <MotionFX_enable_9X+0x3c>)
 8015062:	791b      	ldrb	r3, [r3, #4]
 8015064:	b903      	cbnz	r3, 8015068 <MotionFX_enable_9X+0x8>
 8015066:	4770      	bx	lr
 8015068:	2900      	cmp	r1, #0
 801506a:	d0fc      	beq.n	8015066 <MotionFX_enable_9X+0x6>
 801506c:	b530      	push	{r4, r5, lr}
 801506e:	1d05      	adds	r5, r0, #4
 8015070:	b099      	sub	sp, #100	; 0x64
 8015072:	4604      	mov	r4, r0
 8015074:	4629      	mov	r1, r5
 8015076:	225c      	movs	r2, #92	; 0x5c
 8015078:	a801      	add	r0, sp, #4
 801507a:	f002 fc57 	bl	801792c <memcpy>
 801507e:	4620      	mov	r0, r4
 8015080:	f7f7 f99c 	bl	800c3bc <MFX_emptyAttitude>
 8015084:	a901      	add	r1, sp, #4
 8015086:	4628      	mov	r0, r5
 8015088:	225c      	movs	r2, #92	; 0x5c
 801508a:	f002 fc4f 	bl	801792c <memcpy>
 801508e:	2301      	movs	r3, #1
 8015090:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8015094:	7363      	strb	r3, [r4, #13]
 8015096:	b019      	add	sp, #100	; 0x64
 8015098:	bd30      	pop	{r4, r5, pc}
 801509a:	bf00      	nop
 801509c:	200002e0 	.word	0x200002e0

080150a0 <MotionFX_update>:
 80150a0:	b470      	push	{r4, r5, r6}
 80150a2:	4c06      	ldr	r4, [pc, #24]	; (80150bc <MotionFX_update+0x1c>)
 80150a4:	9e03      	ldr	r6, [sp, #12]
 80150a6:	7925      	ldrb	r5, [r4, #4]
 80150a8:	b90d      	cbnz	r5, 80150ae <MotionFX_update+0xe>
 80150aa:	bc70      	pop	{r4, r5, r6}
 80150ac:	4770      	bx	lr
 80150ae:	461c      	mov	r4, r3
 80150b0:	ed94 0a00 	vldr	s0, [r4]
 80150b4:	4633      	mov	r3, r6
 80150b6:	bc70      	pop	{r4, r5, r6}
 80150b8:	f7fc bf02 	b.w	8011ec0 <iNemoEngine_API_Update>
 80150bc:	200002e0 	.word	0x200002e0

080150c0 <MotionFX_propagate>:
 80150c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150c4:	ed2d 8b06 	vpush	{d8-d10}
 80150c8:	4ca3      	ldr	r4, [pc, #652]	; (8015358 <MotionFX_propagate+0x298>)
 80150ca:	7927      	ldrb	r7, [r4, #4]
 80150cc:	b0a0      	sub	sp, #128	; 0x80
 80150ce:	b927      	cbnz	r7, 80150da <MotionFX_propagate+0x1a>
 80150d0:	b020      	add	sp, #128	; 0x80
 80150d2:	ecbd 8b06 	vpop	{d8-d10}
 80150d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150da:	4616      	mov	r6, r2
 80150dc:	4604      	mov	r4, r0
 80150de:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80150e2:	edd3 9a00 	vldr	s19, [r3]
 80150e6:	460d      	mov	r5, r1
 80150e8:	6851      	ldr	r1, [r2, #4]
 80150ea:	6892      	ldr	r2, [r2, #8]
 80150ec:	ab13      	add	r3, sp, #76	; 0x4c
 80150ee:	c307      	stmia	r3!, {r0, r1, r2}
 80150f0:	6830      	ldr	r0, [r6, #0]
 80150f2:	6871      	ldr	r1, [r6, #4]
 80150f4:	68b2      	ldr	r2, [r6, #8]
 80150f6:	ab10      	add	r3, sp, #64	; 0x40
 80150f8:	c307      	stmia	r3!, {r0, r1, r2}
 80150fa:	4637      	mov	r7, r6
 80150fc:	ab16      	add	r3, sp, #88	; 0x58
 80150fe:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8015102:	6879      	ldr	r1, [r7, #4]
 8015104:	68ba      	ldr	r2, [r7, #8]
 8015106:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 801510a:	c307      	stmia	r3!, {r0, r1, r2}
 801510c:	aa13      	add	r2, sp, #76	; 0x4c
 801510e:	4651      	mov	r1, sl
 8015110:	a803      	add	r0, sp, #12
 8015112:	f7f6 fa73 	bl	800b5fc <rotVect>
 8015116:	aa16      	add	r2, sp, #88	; 0x58
 8015118:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801511c:	a806      	add	r0, sp, #24
 801511e:	f7f6 fa6d 	bl	800b5fc <rotVect>
 8015122:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8015126:	2b09      	cmp	r3, #9
 8015128:	d829      	bhi.n	801517e <MotionFX_propagate+0xbe>
 801512a:	eddd 8a04 	vldr	s17, [sp, #16]
 801512e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8015132:	ed9d 8a05 	vldr	s16, [sp, #20]
 8015136:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801513a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801513e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8015142:	ee17 0a90 	vmov	r0, s15
 8015146:	f7eb f9ff 	bl	8000548 <__aeabi_f2d>
 801514a:	ec41 0b10 	vmov	d0, r0, r1
 801514e:	f000 fe7d 	bl	8015e4c <sqrt>
 8015152:	ec51 0b10 	vmov	r0, r1, d0
 8015156:	f7eb fd27 	bl	8000ba8 <__aeabi_d2f>
 801515a:	ee07 0a90 	vmov	s15, r0
 801515e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015162:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8015166:	ee29 9a27 	vmul.f32	s18, s18, s15
 801516a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801516e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015172:	ed8d 9a03 	vstr	s18, [sp, #12]
 8015176:	edcd 8a04 	vstr	s17, [sp, #16]
 801517a:	ed8d 8a05 	vstr	s16, [sp, #20]
 801517e:	7923      	ldrb	r3, [r4, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	f000 80d3 	beq.w	801532c <MotionFX_propagate+0x26c>
 8015186:	ee07 3a90 	vmov	s15, r3
 801518a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801518e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015192:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015196:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 801519a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 801519e:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80151a2:	edd2 7a00 	vldr	s15, [r2]
 80151a6:	eddd 8a06 	vldr	s17, [sp, #24]
 80151aa:	ed9d 6a07 	vldr	s12, [sp, #28]
 80151ae:	ed9d 8a08 	vldr	s16, [sp, #32]
 80151b2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801535c <MotionFX_propagate+0x29c>
 80151b6:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8015360 <MotionFX_propagate+0x2a0>
 80151ba:	eee6 7aa8 	vfma.f32	s15, s13, s17
 80151be:	ee26 9a07 	vmul.f32	s18, s12, s14
 80151c2:	edc2 7a00 	vstr	s15, [r2]
 80151c6:	edd3 7a00 	vldr	s15, [r3]
 80151ca:	ed8d 9a07 	vstr	s18, [sp, #28]
 80151ce:	eee6 7a86 	vfma.f32	s15, s13, s12
 80151d2:	f604 1264 	addw	r2, r4, #2404	; 0x964
 80151d6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80151da:	edc3 7a00 	vstr	s15, [r3]
 80151de:	edd2 7a00 	vldr	s15, [r2]
 80151e2:	edcd 8a06 	vstr	s17, [sp, #24]
 80151e6:	eee6 7a88 	vfma.f32	s15, s13, s16
 80151ea:	f604 1344 	addw	r3, r4, #2372	; 0x944
 80151ee:	ee28 8a07 	vmul.f32	s16, s16, s14
 80151f2:	edc2 7a00 	vstr	s15, [r2]
 80151f6:	edd3 7a00 	vldr	s15, [r3]
 80151fa:	ed8d 8a08 	vstr	s16, [sp, #32]
 80151fe:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8015202:	ed93 7a00 	vldr	s14, [r3]
 8015206:	ee39 9a67 	vsub.f32	s18, s18, s15
 801520a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801520e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8015212:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8015216:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801521a:	ed93 7a00 	vldr	s14, [r3]
 801521e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8015222:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015226:	eee8 7a08 	vfma.f32	s15, s16, s16
 801522a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801522e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015236:	dd7e      	ble.n	8015336 <MotionFX_propagate+0x276>
 8015238:	eeb1 aae7 	vsqrt.f32	s20, s15
 801523c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8015240:	eeb0 0a69 	vmov.f32	s0, s19
 8015244:	f000 fd96 	bl	8015d74 <sinf>
 8015248:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 801524c:	eeb0 0a69 	vmov.f32	s0, s19
 8015250:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015254:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015258:	ee28 8a27 	vmul.f32	s16, s16, s15
 801525c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8015260:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8015264:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015268:	f000 fd1e 	bl	8015ca8 <cosf>
 801526c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8015270:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8015274:	a809      	add	r0, sp, #36	; 0x24
 8015276:	4632      	mov	r2, r6
 8015278:	4631      	mov	r1, r6
 801527a:	f7f6 fc55 	bl	800bb28 <qmult>
 801527e:	edd8 7a00 	vldr	s15, [r8]
 8015282:	ed96 7a00 	vldr	s14, [r6]
 8015286:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801528a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 801528e:	edd9 6a00 	vldr	s13, [r9]
 8015292:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015296:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 801529a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801529e:	3301      	adds	r3, #1
 80152a0:	aa13      	add	r2, sp, #76	; 0x4c
 80152a2:	edd7 6a00 	vldr	s13, [r7]
 80152a6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80152aa:	4651      	mov	r1, sl
 80152ac:	a809      	add	r0, sp, #36	; 0x24
 80152ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80152b2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80152b6:	eef1 6ae7 	vsqrt.f32	s13, s15
 80152ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80152be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80152c2:	ed86 7a00 	vstr	s14, [r6]
 80152c6:	ed99 7a00 	vldr	s14, [r9]
 80152ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80152ce:	ed89 7a00 	vstr	s14, [r9]
 80152d2:	ed98 7a00 	vldr	s14, [r8]
 80152d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80152da:	ed88 7a00 	vstr	s14, [r8]
 80152de:	ed97 7a00 	vldr	s14, [r7]
 80152e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152e6:	edc7 7a00 	vstr	s15, [r7]
 80152ea:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 80152ee:	f7f6 f985 	bl	800b5fc <rotVect>
 80152f2:	f8d9 0000 	ldr.w	r0, [r9]
 80152f6:	f8d8 1000 	ldr.w	r1, [r8]
 80152fa:	683a      	ldr	r2, [r7, #0]
 80152fc:	6833      	ldr	r3, [r6, #0]
 80152fe:	60eb      	str	r3, [r5, #12]
 8015300:	6128      	str	r0, [r5, #16]
 8015302:	6169      	str	r1, [r5, #20]
 8015304:	61aa      	str	r2, [r5, #24]
 8015306:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801530a:	9301      	str	r3, [sp, #4]
 801530c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	a909      	add	r1, sp, #36	; 0x24
 8015314:	f105 031c 	add.w	r3, r5, #28
 8015318:	462a      	mov	r2, r5
 801531a:	f105 000c 	add.w	r0, r5, #12
 801531e:	f7f7 fc2b 	bl	800cb78 <output_update>
 8015322:	b020      	add	sp, #128	; 0x80
 8015324:	ecbd 8b06 	vpop	{d8-d10}
 8015328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801532c:	2301      	movs	r3, #1
 801532e:	7123      	strb	r3, [r4, #4]
 8015330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015334:	e72f      	b.n	8015196 <MotionFX_propagate+0xd6>
 8015336:	ee68 8a80 	vmul.f32	s17, s17, s0
 801533a:	ee29 9a00 	vmul.f32	s18, s18, s0
 801533e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8015342:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015346:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801534a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801534e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015352:	930c      	str	r3, [sp, #48]	; 0x30
 8015354:	e78c      	b.n	8015270 <MotionFX_propagate+0x1b0>
 8015356:	bf00      	nop
 8015358:	200002e0 	.word	0x200002e0
 801535c:	3c8efa35 	.word	0x3c8efa35
 8015360:	38d1b718 	.word	0x38d1b718

08015364 <MotionFX_MagCal_init>:
 8015364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015366:	4c44      	ldr	r4, [pc, #272]	; (8015478 <MotionFX_MagCal_init+0x114>)
 8015368:	7923      	ldrb	r3, [r4, #4]
 801536a:	b903      	cbnz	r3, 801536e <MotionFX_MagCal_init+0xa>
 801536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801536e:	1e43      	subs	r3, r0, #1
 8015370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015374:	4605      	mov	r5, r0
 8015376:	d2f9      	bcs.n	801536c <MotionFX_MagCal_init+0x8>
 8015378:	2900      	cmp	r1, #0
 801537a:	d139      	bne.n	80153f0 <MotionFX_MagCal_init+0x8c>
 801537c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8015380:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015384:	4a3d      	ldr	r2, [pc, #244]	; (801547c <MotionFX_MagCal_init+0x118>)
 8015386:	1b5b      	subs	r3, r3, r5
 8015388:	ee07 3a90 	vmov	s15, r3
 801538c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015390:	23c8      	movs	r3, #200	; 0xc8
 8015392:	eef0 7ae7 	vabs.f32	s15, s15
 8015396:	fb93 f3f5 	sdiv	r3, r3, r5
 801539a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	2b0f      	cmp	r3, #15
 80153a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153a6:	bf28      	it	cs
 80153a8:	230f      	movcs	r3, #15
 80153aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ae:	6015      	str	r5, [r2, #0]
 80153b0:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 80153b4:	b22d      	sxth	r5, r5
 80153b6:	dc0e      	bgt.n	80153d6 <MotionFX_MagCal_init+0x72>
 80153b8:	edd4 7a03 	vldr	s15, [r4, #12]
 80153bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015480 <MotionFX_MagCal_init+0x11c>
 80153c0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8015484 <MotionFX_MagCal_init+0x120>
 80153c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80153c8:	eef0 7ae7 	vabs.f32	s15, s15
 80153cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d4:	dd08      	ble.n	80153e8 <MotionFX_MagCal_init+0x84>
 80153d6:	2300      	movs	r3, #0
 80153d8:	492b      	ldr	r1, [pc, #172]	; (8015488 <MotionFX_MagCal_init+0x124>)
 80153da:	8165      	strh	r5, [r4, #10]
 80153dc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80153e0:	60e1      	str	r1, [r4, #12]
 80153e2:	8223      	strh	r3, [r4, #16]
 80153e4:	6163      	str	r3, [r4, #20]
 80153e6:	8122      	strh	r2, [r4, #8]
 80153e8:	2300      	movs	r3, #0
 80153ea:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 80153ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153f0:	2600      	movs	r6, #0
 80153f2:	4826      	ldr	r0, [pc, #152]	; (801548c <MotionFX_MagCal_init+0x128>)
 80153f4:	61a0      	str	r0, [r4, #24]
 80153f6:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 80153fa:	4631      	mov	r1, r6
 80153fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015400:	6122      	str	r2, [r4, #16]
 8015402:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8015406:	f44f 7248 	mov.w	r2, #800	; 0x320
 801540a:	6166      	str	r6, [r4, #20]
 801540c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8015410:	6566      	str	r6, [r4, #84]	; 0x54
 8015412:	83a6      	strh	r6, [r4, #28]
 8015414:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8015418:	f002 fab0 	bl	801797c <memset>
 801541c:	23ff      	movs	r3, #255	; 0xff
 801541e:	225f      	movs	r2, #95	; 0x5f
 8015420:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8015424:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8015428:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801542c:	2200      	movs	r2, #0
 801542e:	2300      	movs	r3, #0
 8015430:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015434:	f44f 7780 	mov.w	r7, #256	; 0x100
 8015438:	4631      	mov	r1, r6
 801543a:	62a6      	str	r6, [r4, #40]	; 0x28
 801543c:	2230      	movs	r2, #48	; 0x30
 801543e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8015442:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8015446:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 801544a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801544c:	f002 fa96 	bl	801797c <memset>
 8015450:	f1a5 030a 	sub.w	r3, r5, #10
 8015454:	b29b      	uxth	r3, r3
 8015456:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801545a:	2b32      	cmp	r3, #50	; 0x32
 801545c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8015460:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8015464:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8015468:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801546c:	d888      	bhi.n	8015380 <MotionFX_MagCal_init+0x1c>
 801546e:	2301      	movs	r3, #1
 8015470:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8015474:	e784      	b.n	8015380 <MotionFX_MagCal_init+0x1c>
 8015476:	bf00      	nop
 8015478:	200002e0 	.word	0x200002e0
 801547c:	20000000 	.word	0x20000000
 8015480:	3dcccccd 	.word	0x3dcccccd
 8015484:	3c23d70a 	.word	0x3c23d70a
 8015488:	3dcccccd 	.word	0x3dcccccd
 801548c:	200015d4 	.word	0x200015d4

08015490 <MotionFX_MagCal_run>:
 8015490:	4a3e      	ldr	r2, [pc, #248]	; (801558c <MotionFX_MagCal_run+0xfc>)
 8015492:	7913      	ldrb	r3, [r2, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d077      	beq.n	8015588 <MotionFX_MagCal_run+0xf8>
 8015498:	ed90 7a00 	vldr	s14, [r0]
 801549c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015590 <MotionFX_MagCal_run+0x100>
 80154a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80154a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a8:	bfb4      	ite	lt
 80154aa:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80154ae:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80154b2:	eee7 7a26 	vfma.f32	s15, s14, s13
 80154b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154b8:	ed90 7a01 	vldr	s14, [r0, #4]
 80154bc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015590 <MotionFX_MagCal_run+0x100>
 80154c0:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80154c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80154cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d0:	ee17 1a90 	vmov	r1, s15
 80154d4:	bfb4      	ite	lt
 80154d6:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80154da:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80154de:	eee7 7a26 	vfma.f32	s15, s14, s13
 80154e2:	ed90 7a02 	vldr	s14, [r0, #8]
 80154e6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015590 <MotionFX_MagCal_run+0x100>
 80154ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80154f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f6:	ee17 4a90 	vmov	r4, s15
 80154fa:	bfac      	ite	ge
 80154fc:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015500:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015504:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801550c:	ee17 7a90 	vmov	r7, s15
 8015510:	b383      	cbz	r3, 8015574 <MotionFX_MagCal_run+0xe4>
 8015512:	4820      	ldr	r0, [pc, #128]	; (8015594 <MotionFX_MagCal_run+0x104>)
 8015514:	6805      	ldr	r5, [r0, #0]
 8015516:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 801551a:	fb15 f503 	smulbb	r5, r5, r3
 801551e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8015522:	00dd      	lsls	r5, r3, #3
 8015524:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8015528:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015598 <MotionFX_MagCal_run+0x108>
 801552c:	42b1      	cmp	r1, r6
 801552e:	bfa8      	it	ge
 8015530:	4631      	movge	r1, r6
 8015532:	42b7      	cmp	r7, r6
 8015534:	bfa8      	it	ge
 8015536:	4637      	movge	r7, r6
 8015538:	4561      	cmp	r1, ip
 801553a:	4608      	mov	r0, r1
 801553c:	bfb8      	it	lt
 801553e:	4660      	movlt	r0, ip
 8015540:	4564      	cmp	r4, ip
 8015542:	db1f      	blt.n	8015584 <MotionFX_MagCal_run+0xf4>
 8015544:	42b4      	cmp	r4, r6
 8015546:	bfa8      	it	ge
 8015548:	4634      	movge	r4, r6
 801554a:	b224      	sxth	r4, r4
 801554c:	4e12      	ldr	r6, [pc, #72]	; (8015598 <MotionFX_MagCal_run+0x108>)
 801554e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8015552:	3301      	adds	r3, #1
 8015554:	4415      	add	r5, r2
 8015556:	b2db      	uxtb	r3, r3
 8015558:	42b7      	cmp	r7, r6
 801555a:	bfb8      	it	lt
 801555c:	4637      	movlt	r7, r6
 801555e:	428b      	cmp	r3, r1
 8015560:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8015564:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8015568:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 801556c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8015570:	d014      	beq.n	801559c <MotionFX_MagCal_run+0x10c>
 8015572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015574:	68c0      	ldr	r0, [r0, #12]
 8015576:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 801557a:	2001      	movs	r0, #1
 801557c:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8015580:	461d      	mov	r5, r3
 8015582:	e7cf      	b.n	8015524 <MotionFX_MagCal_run+0x94>
 8015584:	4634      	mov	r4, r6
 8015586:	e7e1      	b.n	801554c <MotionFX_MagCal_run+0xbc>
 8015588:	4770      	bx	lr
 801558a:	bf00      	nop
 801558c:	200002e0 	.word	0x200002e0
 8015590:	43fa0000 	.word	0x43fa0000
 8015594:	20000000 	.word	0x20000000
 8015598:	ffff8002 	.word	0xffff8002
 801559c:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 80155a0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 80155a4:	2000      	movs	r0, #0
 80155a6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f000 8159 	beq.w	8015862 <MotionFX_MagCal_run+0x3d2>
 80155b0:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80155b4:	8a57      	ldrh	r7, [r2, #18]
 80155b6:	8a13      	ldrh	r3, [r2, #16]
 80155b8:	2900      	cmp	r1, #0
 80155ba:	f000 8150 	beq.w	801585e <MotionFX_MagCal_run+0x3ce>
 80155be:	2f00      	cmp	r7, #0
 80155c0:	f000 814d 	beq.w	801585e <MotionFX_MagCal_run+0x3ce>
 80155c4:	42bb      	cmp	r3, r7
 80155c6:	bf28      	it	cs
 80155c8:	463b      	movcs	r3, r7
 80155ca:	3301      	adds	r3, #1
 80155cc:	b29b      	uxth	r3, r3
 80155ce:	42bb      	cmp	r3, r7
 80155d0:	bf28      	it	cs
 80155d2:	463b      	movcs	r3, r7
 80155d4:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80155d8:	191d      	adds	r5, r3, r4
 80155da:	f04f 0c01 	mov.w	ip, #1
 80155de:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 80155e2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80155e6:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 80155ea:	f8c5 e002 	str.w	lr, [r5, #2]
 80155ee:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80155f2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155f6:	4561      	cmp	r1, ip
 80155f8:	f000 812a 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 80155fc:	4463      	add	r3, ip
 80155fe:	b29b      	uxth	r3, r3
 8015600:	42bb      	cmp	r3, r7
 8015602:	bf28      	it	cs
 8015604:	463b      	movcs	r3, r7
 8015606:	eb03 0e04 	add.w	lr, r3, r4
 801560a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801560e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015612:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8015616:	f8c5 e002 	str.w	lr, [r5, #2]
 801561a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 801561e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015622:	2902      	cmp	r1, #2
 8015624:	f000 8114 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 8015628:	4463      	add	r3, ip
 801562a:	b29b      	uxth	r3, r3
 801562c:	42bb      	cmp	r3, r7
 801562e:	bf28      	it	cs
 8015630:	463b      	movcs	r3, r7
 8015632:	eb03 0e04 	add.w	lr, r3, r4
 8015636:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801563a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801563e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8015642:	f8c5 e002 	str.w	lr, [r5, #2]
 8015646:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 801564a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801564e:	2903      	cmp	r1, #3
 8015650:	f000 80fe 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 8015654:	4463      	add	r3, ip
 8015656:	b29b      	uxth	r3, r3
 8015658:	42bb      	cmp	r3, r7
 801565a:	bf28      	it	cs
 801565c:	463b      	movcs	r3, r7
 801565e:	eb03 0e04 	add.w	lr, r3, r4
 8015662:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015666:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801566a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 801566e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015672:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8015676:	f8a5 e006 	strh.w	lr, [r5, #6]
 801567a:	2904      	cmp	r1, #4
 801567c:	f000 80e8 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 8015680:	4463      	add	r3, ip
 8015682:	b29b      	uxth	r3, r3
 8015684:	42bb      	cmp	r3, r7
 8015686:	bf28      	it	cs
 8015688:	463b      	movcs	r3, r7
 801568a:	eb03 0e04 	add.w	lr, r3, r4
 801568e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015692:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015696:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801569a:	f8c5 e002 	str.w	lr, [r5, #2]
 801569e:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 80156a2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80156a6:	2905      	cmp	r1, #5
 80156a8:	f000 80d2 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 80156ac:	4463      	add	r3, ip
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	42bb      	cmp	r3, r7
 80156b2:	bf28      	it	cs
 80156b4:	463b      	movcs	r3, r7
 80156b6:	441c      	add	r4, r3
 80156b8:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80156bc:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 80156c0:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 80156c4:	f8c5 4002 	str.w	r4, [r5, #2]
 80156c8:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 80156cc:	80ec      	strh	r4, [r5, #6]
 80156ce:	2906      	cmp	r1, #6
 80156d0:	f000 80be 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 80156d4:	4463      	add	r3, ip
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	42bb      	cmp	r3, r7
 80156da:	bf28      	it	cs
 80156dc:	463b      	movcs	r3, r7
 80156de:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80156e2:	eb03 0c04 	add.w	ip, r3, r4
 80156e6:	2501      	movs	r5, #1
 80156e8:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 80156ec:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80156f0:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 80156f4:	f8cc e002 	str.w	lr, [ip, #2]
 80156f8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80156fc:	f8ac e006 	strh.w	lr, [ip, #6]
 8015700:	2907      	cmp	r1, #7
 8015702:	f000 80a5 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 8015706:	442b      	add	r3, r5
 8015708:	b29b      	uxth	r3, r3
 801570a:	42bb      	cmp	r3, r7
 801570c:	bf28      	it	cs
 801570e:	463b      	movcs	r3, r7
 8015710:	eb03 0e04 	add.w	lr, r3, r4
 8015714:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015718:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801571c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8015720:	f8cc e002 	str.w	lr, [ip, #2]
 8015724:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8015728:	f8ac e006 	strh.w	lr, [ip, #6]
 801572c:	2908      	cmp	r1, #8
 801572e:	f000 808f 	beq.w	8015850 <MotionFX_MagCal_run+0x3c0>
 8015732:	442b      	add	r3, r5
 8015734:	b29b      	uxth	r3, r3
 8015736:	42bb      	cmp	r3, r7
 8015738:	bf28      	it	cs
 801573a:	463b      	movcs	r3, r7
 801573c:	eb03 0e04 	add.w	lr, r3, r4
 8015740:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015744:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015748:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 801574c:	f8cc e002 	str.w	lr, [ip, #2]
 8015750:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8015754:	f8ac e006 	strh.w	lr, [ip, #6]
 8015758:	2909      	cmp	r1, #9
 801575a:	d079      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 801575c:	442b      	add	r3, r5
 801575e:	b29b      	uxth	r3, r3
 8015760:	42bb      	cmp	r3, r7
 8015762:	bf28      	it	cs
 8015764:	463b      	movcs	r3, r7
 8015766:	eb03 0e04 	add.w	lr, r3, r4
 801576a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801576e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015772:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8015776:	f8cc e002 	str.w	lr, [ip, #2]
 801577a:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 801577e:	f8ac e006 	strh.w	lr, [ip, #6]
 8015782:	290a      	cmp	r1, #10
 8015784:	d064      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 8015786:	442b      	add	r3, r5
 8015788:	b29b      	uxth	r3, r3
 801578a:	42bb      	cmp	r3, r7
 801578c:	bf28      	it	cs
 801578e:	463b      	movcs	r3, r7
 8015790:	eb03 0e04 	add.w	lr, r3, r4
 8015794:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015798:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801579c:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 80157a0:	f8cc e002 	str.w	lr, [ip, #2]
 80157a4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80157a8:	f8ac e006 	strh.w	lr, [ip, #6]
 80157ac:	290b      	cmp	r1, #11
 80157ae:	d04f      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 80157b0:	442b      	add	r3, r5
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	42bb      	cmp	r3, r7
 80157b6:	bf28      	it	cs
 80157b8:	463b      	movcs	r3, r7
 80157ba:	eb03 0e04 	add.w	lr, r3, r4
 80157be:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80157c2:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80157c6:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 80157ca:	f8cc e002 	str.w	lr, [ip, #2]
 80157ce:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 80157d2:	f8ac e006 	strh.w	lr, [ip, #6]
 80157d6:	290c      	cmp	r1, #12
 80157d8:	d03a      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 80157da:	442b      	add	r3, r5
 80157dc:	b29b      	uxth	r3, r3
 80157de:	42bb      	cmp	r3, r7
 80157e0:	bf28      	it	cs
 80157e2:	463b      	movcs	r3, r7
 80157e4:	eb03 0e04 	add.w	lr, r3, r4
 80157e8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80157ec:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80157f0:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 80157f4:	f8cc e002 	str.w	lr, [ip, #2]
 80157f8:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80157fc:	f8ac e006 	strh.w	lr, [ip, #6]
 8015800:	290d      	cmp	r1, #13
 8015802:	d025      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 8015804:	442b      	add	r3, r5
 8015806:	b29b      	uxth	r3, r3
 8015808:	42bb      	cmp	r3, r7
 801580a:	bf28      	it	cs
 801580c:	463b      	movcs	r3, r7
 801580e:	eb03 0e04 	add.w	lr, r3, r4
 8015812:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015816:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801581a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 801581e:	f8cc e002 	str.w	lr, [ip, #2]
 8015822:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8015826:	f8ac e006 	strh.w	lr, [ip, #6]
 801582a:	290e      	cmp	r1, #14
 801582c:	d010      	beq.n	8015850 <MotionFX_MagCal_run+0x3c0>
 801582e:	442b      	add	r3, r5
 8015830:	b29b      	uxth	r3, r3
 8015832:	42bb      	cmp	r3, r7
 8015834:	bf28      	it	cs
 8015836:	463b      	movcs	r3, r7
 8015838:	441c      	add	r4, r3
 801583a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 801583e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8015842:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8015846:	f8c7 0002 	str.w	r0, [r7, #2]
 801584a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801584e:	80f8      	strh	r0, [r7, #6]
 8015850:	3901      	subs	r1, #1
 8015852:	b2c9      	uxtb	r1, r1
 8015854:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015858:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801585c:	4434      	add	r4, r6
 801585e:	8213      	strh	r3, [r2, #16]
 8015860:	6154      	str	r4, [r2, #20]
 8015862:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8015866:	2b00      	cmp	r3, #0
 8015868:	f43f ae83 	beq.w	8015572 <MotionFX_MagCal_run+0xe2>
 801586c:	8a11      	ldrh	r1, [r2, #16]
 801586e:	8a53      	ldrh	r3, [r2, #18]
 8015870:	428b      	cmp	r3, r1
 8015872:	d022      	beq.n	80158ba <MotionFX_MagCal_run+0x42a>
 8015874:	b341      	cbz	r1, 80158c8 <MotionFX_MagCal_run+0x438>
 8015876:	6953      	ldr	r3, [r2, #20]
 8015878:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801587c:	3301      	adds	r3, #1
 801587e:	4403      	add	r3, r0
 8015880:	1c58      	adds	r0, r3, #1
 8015882:	d021      	beq.n	80158c8 <MotionFX_MagCal_run+0x438>
 8015884:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015888:	3410      	adds	r4, #16
 801588a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801588c:	42a0      	cmp	r0, r4
 801588e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8015892:	bf84      	itt	hi
 8015894:	6553      	strhi	r3, [r2, #84]	; 0x54
 8015896:	4618      	movhi	r0, r3
 8015898:	4420      	add	r0, r4
 801589a:	4283      	cmp	r3, r0
 801589c:	f4ff ae69 	bcc.w	8015572 <MotionFX_MagCal_run+0xe2>
 80158a0:	b131      	cbz	r1, 80158b0 <MotionFX_MagCal_run+0x420>
 80158a2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80158a6:	6952      	ldr	r2, [r2, #20]
 80158a8:	3901      	subs	r1, #1
 80158aa:	fb00 2111 	mls	r1, r0, r1, r2
 80158ae:	b289      	uxth	r1, r1
 80158b0:	1a5b      	subs	r3, r3, r1
 80158b2:	b21b      	sxth	r3, r3
 80158b4:	42a3      	cmp	r3, r4
 80158b6:	f6ff ae5c 	blt.w	8015572 <MotionFX_MagCal_run+0xe2>
 80158ba:	4905      	ldr	r1, [pc, #20]	; (80158d0 <MotionFX_MagCal_run+0x440>)
 80158bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80158c0:	f101 0014 	add.w	r0, r1, #20
 80158c4:	f7fd babc 	b.w	8012e40 <MEMS_runMagCal>
 80158c8:	f242 7410 	movw	r4, #10000	; 0x2710
 80158cc:	2300      	movs	r3, #0
 80158ce:	e7dc      	b.n	801588a <MotionFX_MagCal_run+0x3fa>
 80158d0:	200002e8 	.word	0x200002e8

080158d4 <MotionFX_MagCal_getParams>:
 80158d4:	b4f0      	push	{r4, r5, r6, r7}
 80158d6:	4f1b      	ldr	r7, [pc, #108]	; (8015944 <MotionFX_MagCal_getParams+0x70>)
 80158d8:	793b      	ldrb	r3, [r7, #4]
 80158da:	b08e      	sub	sp, #56	; 0x38
 80158dc:	b373      	cbz	r3, 801593c <MotionFX_MagCal_getParams+0x68>
 80158de:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80158e2:	4606      	mov	r6, r0
 80158e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158e6:	ac01      	add	r4, sp, #4
 80158e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158f0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80158f4:	eddd 6a02 	vldr	s13, [sp, #8]
 80158f8:	eddd 7a04 	vldr	s15, [sp, #16]
 80158fc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015948 <MotionFX_MagCal_getParams+0x74>
 8015900:	682d      	ldr	r5, [r5, #0]
 8015902:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8015906:	7337      	strb	r7, [r6, #12]
 8015908:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801590c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801591a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015922:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015926:	ee66 6a86 	vmul.f32	s13, s13, s12
 801592a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801592e:	6025      	str	r5, [r4, #0]
 8015930:	edc6 6a00 	vstr	s13, [r6]
 8015934:	ed86 7a01 	vstr	s14, [r6, #4]
 8015938:	edc6 7a02 	vstr	s15, [r6, #8]
 801593c:	b00e      	add	sp, #56	; 0x38
 801593e:	bcf0      	pop	{r4, r5, r6, r7}
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	200002e0 	.word	0x200002e0
 8015948:	3b03126f 	.word	0x3b03126f

0801594c <_Znwj>:
 801594c:	2801      	cmp	r0, #1
 801594e:	bf38      	it	cc
 8015950:	2001      	movcc	r0, #1
 8015952:	b510      	push	{r4, lr}
 8015954:	4604      	mov	r4, r0
 8015956:	4620      	mov	r0, r4
 8015958:	f001 ffd8 	bl	801790c <malloc>
 801595c:	b930      	cbnz	r0, 801596c <_Znwj+0x20>
 801595e:	f000 f88b 	bl	8015a78 <_ZSt15get_new_handlerv>
 8015962:	b908      	cbnz	r0, 8015968 <_Znwj+0x1c>
 8015964:	f001 ffa0 	bl	80178a8 <abort>
 8015968:	4780      	blx	r0
 801596a:	e7f4      	b.n	8015956 <_Znwj+0xa>
 801596c:	bd10      	pop	{r4, pc}

0801596e <_ZNSaIcEC1Ev>:
 801596e:	4770      	bx	lr

08015970 <_ZNSaIcED1Ev>:
 8015970:	4770      	bx	lr

08015972 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8015972:	b10a      	cbz	r2, 8015978 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8015974:	f001 bfda 	b.w	801792c <memcpy>
 8015978:	4770      	bx	lr
	...

0801597c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801597c:	b508      	push	{r3, lr}
 801597e:	680b      	ldr	r3, [r1, #0]
 8015980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015984:	d302      	bcc.n	801598c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015986:	480d      	ldr	r0, [pc, #52]	; (80159bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015988:	f000 f884 	bl	8015a94 <_ZSt20__throw_length_errorPKc>
 801598c:	4293      	cmp	r3, r2
 801598e:	d90b      	bls.n	80159a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015990:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015994:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015998:	d206      	bcs.n	80159a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801599a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801599e:	bf2a      	itet	cs
 80159a0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80159a4:	6008      	strcc	r0, [r1, #0]
 80159a6:	600b      	strcs	r3, [r1, #0]
 80159a8:	6808      	ldr	r0, [r1, #0]
 80159aa:	3001      	adds	r0, #1
 80159ac:	d501      	bpl.n	80159b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80159ae:	f000 f86b 	bl	8015a88 <_ZSt17__throw_bad_allocv>
 80159b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80159b6:	f7ff bfc9 	b.w	801594c <_Znwj>
 80159ba:	bf00      	nop
 80159bc:	0801a9cc 	.word	0x0801a9cc

080159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80159c0:	f850 3b08 	ldr.w	r3, [r0], #8
 80159c4:	4283      	cmp	r3, r0
 80159c6:	d002      	beq.n	80159ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80159c8:	4618      	mov	r0, r3
 80159ca:	f000 b853 	b.w	8015a74 <_ZdlPv>
 80159ce:	4770      	bx	lr

080159d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80159d0:	2a01      	cmp	r2, #1
 80159d2:	b510      	push	{r4, lr}
 80159d4:	d102      	bne.n	80159dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80159d6:	780a      	ldrb	r2, [r1, #0]
 80159d8:	7002      	strb	r2, [r0, #0]
 80159da:	bd10      	pop	{r4, pc}
 80159dc:	f7ff ffc9 	bl	8015972 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80159e0:	e7fb      	b.n	80159da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080159e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80159e2:	b508      	push	{r3, lr}
 80159e4:	1a52      	subs	r2, r2, r1
 80159e6:	f7ff fff3 	bl	80159d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80159ea:	bd08      	pop	{r3, pc}

080159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80159ec:	b510      	push	{r4, lr}
 80159ee:	4604      	mov	r4, r0
 80159f0:	f7ff ffe6 	bl	80159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80159f4:	4620      	mov	r0, r4
 80159f6:	bd10      	pop	{r4, pc}

080159f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80159f8:	6840      	ldr	r0, [r0, #4]
 80159fa:	4770      	bx	lr

080159fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80159fc:	6800      	ldr	r0, [r0, #0]
 80159fe:	4770      	bx	lr

08015a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a02:	4604      	mov	r4, r0
 8015a04:	4616      	mov	r6, r2
 8015a06:	460d      	mov	r5, r1
 8015a08:	b919      	cbnz	r1, 8015a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015a0a:	b112      	cbz	r2, 8015a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015a0c:	480d      	ldr	r0, [pc, #52]	; (8015a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8015a0e:	f000 f83e 	bl	8015a8e <_ZSt19__throw_logic_errorPKc>
 8015a12:	1b73      	subs	r3, r6, r5
 8015a14:	2b0f      	cmp	r3, #15
 8015a16:	9301      	str	r3, [sp, #4]
 8015a18:	d907      	bls.n	8015a2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	a901      	add	r1, sp, #4
 8015a1e:	4620      	mov	r0, r4
 8015a20:	f7ff ffac 	bl	801597c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015a24:	9b01      	ldr	r3, [sp, #4]
 8015a26:	6020      	str	r0, [r4, #0]
 8015a28:	60a3      	str	r3, [r4, #8]
 8015a2a:	4632      	mov	r2, r6
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	6820      	ldr	r0, [r4, #0]
 8015a30:	f7ff ffd7 	bl	80159e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015a34:	9b01      	ldr	r3, [sp, #4]
 8015a36:	6822      	ldr	r2, [r4, #0]
 8015a38:	6063      	str	r3, [r4, #4]
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	54d1      	strb	r1, [r2, r3]
 8015a3e:	b002      	add	sp, #8
 8015a40:	bd70      	pop	{r4, r5, r6, pc}
 8015a42:	bf00      	nop
 8015a44:	0801a9e4 	.word	0x0801a9e4

08015a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8015a48:	b538      	push	{r3, r4, r5, lr}
 8015a4a:	f100 0308 	add.w	r3, r0, #8
 8015a4e:	4604      	mov	r4, r0
 8015a50:	6003      	str	r3, [r0, #0]
 8015a52:	460d      	mov	r5, r1
 8015a54:	b159      	cbz	r1, 8015a6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8015a56:	4608      	mov	r0, r1
 8015a58:	f7ea fc0a 	bl	8000270 <strlen>
 8015a5c:	182a      	adds	r2, r5, r0
 8015a5e:	4620      	mov	r0, r4
 8015a60:	f04f 0300 	mov.w	r3, #0
 8015a64:	4629      	mov	r1, r5
 8015a66:	f7ff ffcb 	bl	8015a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	bd38      	pop	{r3, r4, r5, pc}
 8015a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a72:	e7f4      	b.n	8015a5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08015a74 <_ZdlPv>:
 8015a74:	f001 bf52 	b.w	801791c <free>

08015a78 <_ZSt15get_new_handlerv>:
 8015a78:	4b02      	ldr	r3, [pc, #8]	; (8015a84 <_ZSt15get_new_handlerv+0xc>)
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	f3bf 8f5b 	dmb	ish
 8015a80:	4770      	bx	lr
 8015a82:	bf00      	nop
 8015a84:	200011b4 	.word	0x200011b4

08015a88 <_ZSt17__throw_bad_allocv>:
 8015a88:	b508      	push	{r3, lr}
 8015a8a:	f001 ff0d 	bl	80178a8 <abort>

08015a8e <_ZSt19__throw_logic_errorPKc>:
 8015a8e:	b508      	push	{r3, lr}
 8015a90:	f001 ff0a 	bl	80178a8 <abort>

08015a94 <_ZSt20__throw_length_errorPKc>:
 8015a94:	b508      	push	{r3, lr}
 8015a96:	f001 ff07 	bl	80178a8 <abort>
 8015a9a:	0000      	movs	r0, r0
 8015a9c:	0000      	movs	r0, r0
	...

08015aa0 <ceil>:
 8015aa0:	ec51 0b10 	vmov	r0, r1, d0
 8015aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015aac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015ab0:	2e13      	cmp	r6, #19
 8015ab2:	ee10 5a10 	vmov	r5, s0
 8015ab6:	ee10 8a10 	vmov	r8, s0
 8015aba:	460c      	mov	r4, r1
 8015abc:	dc30      	bgt.n	8015b20 <ceil+0x80>
 8015abe:	2e00      	cmp	r6, #0
 8015ac0:	da12      	bge.n	8015ae8 <ceil+0x48>
 8015ac2:	a335      	add	r3, pc, #212	; (adr r3, 8015b98 <ceil+0xf8>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	f7ea fbe0 	bl	800028c <__adddf3>
 8015acc:	2200      	movs	r2, #0
 8015ace:	2300      	movs	r3, #0
 8015ad0:	f7eb f822 	bl	8000b18 <__aeabi_dcmpgt>
 8015ad4:	b128      	cbz	r0, 8015ae2 <ceil+0x42>
 8015ad6:	2c00      	cmp	r4, #0
 8015ad8:	db55      	blt.n	8015b86 <ceil+0xe6>
 8015ada:	432c      	orrs	r4, r5
 8015adc:	d057      	beq.n	8015b8e <ceil+0xee>
 8015ade:	4c30      	ldr	r4, [pc, #192]	; (8015ba0 <ceil+0x100>)
 8015ae0:	2500      	movs	r5, #0
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	e025      	b.n	8015b34 <ceil+0x94>
 8015ae8:	4f2e      	ldr	r7, [pc, #184]	; (8015ba4 <ceil+0x104>)
 8015aea:	4137      	asrs	r7, r6
 8015aec:	ea01 0307 	and.w	r3, r1, r7
 8015af0:	4303      	orrs	r3, r0
 8015af2:	d01f      	beq.n	8015b34 <ceil+0x94>
 8015af4:	a328      	add	r3, pc, #160	; (adr r3, 8015b98 <ceil+0xf8>)
 8015af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afa:	f7ea fbc7 	bl	800028c <__adddf3>
 8015afe:	2200      	movs	r2, #0
 8015b00:	2300      	movs	r3, #0
 8015b02:	f7eb f809 	bl	8000b18 <__aeabi_dcmpgt>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	d0eb      	beq.n	8015ae2 <ceil+0x42>
 8015b0a:	2c00      	cmp	r4, #0
 8015b0c:	bfc2      	ittt	gt
 8015b0e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015b12:	fa43 f606 	asrgt.w	r6, r3, r6
 8015b16:	19a4      	addgt	r4, r4, r6
 8015b18:	ea24 0407 	bic.w	r4, r4, r7
 8015b1c:	2500      	movs	r5, #0
 8015b1e:	e7e0      	b.n	8015ae2 <ceil+0x42>
 8015b20:	2e33      	cmp	r6, #51	; 0x33
 8015b22:	dd0b      	ble.n	8015b3c <ceil+0x9c>
 8015b24:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b28:	d104      	bne.n	8015b34 <ceil+0x94>
 8015b2a:	ee10 2a10 	vmov	r2, s0
 8015b2e:	460b      	mov	r3, r1
 8015b30:	f7ea fbac 	bl	800028c <__adddf3>
 8015b34:	ec41 0b10 	vmov	d0, r0, r1
 8015b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b3c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015b40:	f04f 33ff 	mov.w	r3, #4294967295
 8015b44:	fa23 f707 	lsr.w	r7, r3, r7
 8015b48:	4207      	tst	r7, r0
 8015b4a:	d0f3      	beq.n	8015b34 <ceil+0x94>
 8015b4c:	a312      	add	r3, pc, #72	; (adr r3, 8015b98 <ceil+0xf8>)
 8015b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b52:	f7ea fb9b 	bl	800028c <__adddf3>
 8015b56:	2200      	movs	r2, #0
 8015b58:	2300      	movs	r3, #0
 8015b5a:	f7ea ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	d0bf      	beq.n	8015ae2 <ceil+0x42>
 8015b62:	2c00      	cmp	r4, #0
 8015b64:	dd02      	ble.n	8015b6c <ceil+0xcc>
 8015b66:	2e14      	cmp	r6, #20
 8015b68:	d103      	bne.n	8015b72 <ceil+0xd2>
 8015b6a:	3401      	adds	r4, #1
 8015b6c:	ea25 0507 	bic.w	r5, r5, r7
 8015b70:	e7b7      	b.n	8015ae2 <ceil+0x42>
 8015b72:	2301      	movs	r3, #1
 8015b74:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015b78:	fa03 f606 	lsl.w	r6, r3, r6
 8015b7c:	4435      	add	r5, r6
 8015b7e:	4545      	cmp	r5, r8
 8015b80:	bf38      	it	cc
 8015b82:	18e4      	addcc	r4, r4, r3
 8015b84:	e7f2      	b.n	8015b6c <ceil+0xcc>
 8015b86:	2500      	movs	r5, #0
 8015b88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015b8c:	e7a9      	b.n	8015ae2 <ceil+0x42>
 8015b8e:	4625      	mov	r5, r4
 8015b90:	e7a7      	b.n	8015ae2 <ceil+0x42>
 8015b92:	bf00      	nop
 8015b94:	f3af 8000 	nop.w
 8015b98:	8800759c 	.word	0x8800759c
 8015b9c:	7e37e43c 	.word	0x7e37e43c
 8015ba0:	3ff00000 	.word	0x3ff00000
 8015ba4:	000fffff 	.word	0x000fffff

08015ba8 <floor>:
 8015ba8:	ec51 0b10 	vmov	r0, r1, d0
 8015bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015bb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015bb8:	2e13      	cmp	r6, #19
 8015bba:	ee10 5a10 	vmov	r5, s0
 8015bbe:	ee10 8a10 	vmov	r8, s0
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	dc32      	bgt.n	8015c2c <floor+0x84>
 8015bc6:	2e00      	cmp	r6, #0
 8015bc8:	da14      	bge.n	8015bf4 <floor+0x4c>
 8015bca:	a333      	add	r3, pc, #204	; (adr r3, 8015c98 <floor+0xf0>)
 8015bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd0:	f7ea fb5c 	bl	800028c <__adddf3>
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	f7ea ff9e 	bl	8000b18 <__aeabi_dcmpgt>
 8015bdc:	b138      	cbz	r0, 8015bee <floor+0x46>
 8015bde:	2c00      	cmp	r4, #0
 8015be0:	da57      	bge.n	8015c92 <floor+0xea>
 8015be2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015be6:	431d      	orrs	r5, r3
 8015be8:	d001      	beq.n	8015bee <floor+0x46>
 8015bea:	4c2d      	ldr	r4, [pc, #180]	; (8015ca0 <floor+0xf8>)
 8015bec:	2500      	movs	r5, #0
 8015bee:	4621      	mov	r1, r4
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	e025      	b.n	8015c40 <floor+0x98>
 8015bf4:	4f2b      	ldr	r7, [pc, #172]	; (8015ca4 <floor+0xfc>)
 8015bf6:	4137      	asrs	r7, r6
 8015bf8:	ea01 0307 	and.w	r3, r1, r7
 8015bfc:	4303      	orrs	r3, r0
 8015bfe:	d01f      	beq.n	8015c40 <floor+0x98>
 8015c00:	a325      	add	r3, pc, #148	; (adr r3, 8015c98 <floor+0xf0>)
 8015c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c06:	f7ea fb41 	bl	800028c <__adddf3>
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	f7ea ff83 	bl	8000b18 <__aeabi_dcmpgt>
 8015c12:	2800      	cmp	r0, #0
 8015c14:	d0eb      	beq.n	8015bee <floor+0x46>
 8015c16:	2c00      	cmp	r4, #0
 8015c18:	bfbe      	ittt	lt
 8015c1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015c1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015c22:	19a4      	addlt	r4, r4, r6
 8015c24:	ea24 0407 	bic.w	r4, r4, r7
 8015c28:	2500      	movs	r5, #0
 8015c2a:	e7e0      	b.n	8015bee <floor+0x46>
 8015c2c:	2e33      	cmp	r6, #51	; 0x33
 8015c2e:	dd0b      	ble.n	8015c48 <floor+0xa0>
 8015c30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015c34:	d104      	bne.n	8015c40 <floor+0x98>
 8015c36:	ee10 2a10 	vmov	r2, s0
 8015c3a:	460b      	mov	r3, r1
 8015c3c:	f7ea fb26 	bl	800028c <__adddf3>
 8015c40:	ec41 0b10 	vmov	d0, r0, r1
 8015c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c50:	fa23 f707 	lsr.w	r7, r3, r7
 8015c54:	4207      	tst	r7, r0
 8015c56:	d0f3      	beq.n	8015c40 <floor+0x98>
 8015c58:	a30f      	add	r3, pc, #60	; (adr r3, 8015c98 <floor+0xf0>)
 8015c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5e:	f7ea fb15 	bl	800028c <__adddf3>
 8015c62:	2200      	movs	r2, #0
 8015c64:	2300      	movs	r3, #0
 8015c66:	f7ea ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d0bf      	beq.n	8015bee <floor+0x46>
 8015c6e:	2c00      	cmp	r4, #0
 8015c70:	da02      	bge.n	8015c78 <floor+0xd0>
 8015c72:	2e14      	cmp	r6, #20
 8015c74:	d103      	bne.n	8015c7e <floor+0xd6>
 8015c76:	3401      	adds	r4, #1
 8015c78:	ea25 0507 	bic.w	r5, r5, r7
 8015c7c:	e7b7      	b.n	8015bee <floor+0x46>
 8015c7e:	2301      	movs	r3, #1
 8015c80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015c84:	fa03 f606 	lsl.w	r6, r3, r6
 8015c88:	4435      	add	r5, r6
 8015c8a:	4545      	cmp	r5, r8
 8015c8c:	bf38      	it	cc
 8015c8e:	18e4      	addcc	r4, r4, r3
 8015c90:	e7f2      	b.n	8015c78 <floor+0xd0>
 8015c92:	2500      	movs	r5, #0
 8015c94:	462c      	mov	r4, r5
 8015c96:	e7aa      	b.n	8015bee <floor+0x46>
 8015c98:	8800759c 	.word	0x8800759c
 8015c9c:	7e37e43c 	.word	0x7e37e43c
 8015ca0:	bff00000 	.word	0xbff00000
 8015ca4:	000fffff 	.word	0x000fffff

08015ca8 <cosf>:
 8015ca8:	ee10 3a10 	vmov	r3, s0
 8015cac:	b507      	push	{r0, r1, r2, lr}
 8015cae:	4a1c      	ldr	r2, [pc, #112]	; (8015d20 <cosf+0x78>)
 8015cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015cb4:	4293      	cmp	r3, r2
 8015cb6:	dc04      	bgt.n	8015cc2 <cosf+0x1a>
 8015cb8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015d24 <cosf+0x7c>
 8015cbc:	f000 fe9e 	bl	80169fc <__kernel_cosf>
 8015cc0:	e004      	b.n	8015ccc <cosf+0x24>
 8015cc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015cc6:	db04      	blt.n	8015cd2 <cosf+0x2a>
 8015cc8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015ccc:	b003      	add	sp, #12
 8015cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8015cd2:	4668      	mov	r0, sp
 8015cd4:	f000 fd52 	bl	801677c <__ieee754_rem_pio2f>
 8015cd8:	f000 0003 	and.w	r0, r0, #3
 8015cdc:	2801      	cmp	r0, #1
 8015cde:	d007      	beq.n	8015cf0 <cosf+0x48>
 8015ce0:	2802      	cmp	r0, #2
 8015ce2:	d00e      	beq.n	8015d02 <cosf+0x5a>
 8015ce4:	b9a0      	cbnz	r0, 8015d10 <cosf+0x68>
 8015ce6:	eddd 0a01 	vldr	s1, [sp, #4]
 8015cea:	ed9d 0a00 	vldr	s0, [sp]
 8015cee:	e7e5      	b.n	8015cbc <cosf+0x14>
 8015cf0:	eddd 0a01 	vldr	s1, [sp, #4]
 8015cf4:	ed9d 0a00 	vldr	s0, [sp]
 8015cf8:	f001 f96a 	bl	8016fd0 <__kernel_sinf>
 8015cfc:	eeb1 0a40 	vneg.f32	s0, s0
 8015d00:	e7e4      	b.n	8015ccc <cosf+0x24>
 8015d02:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d06:	ed9d 0a00 	vldr	s0, [sp]
 8015d0a:	f000 fe77 	bl	80169fc <__kernel_cosf>
 8015d0e:	e7f5      	b.n	8015cfc <cosf+0x54>
 8015d10:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d14:	ed9d 0a00 	vldr	s0, [sp]
 8015d18:	2001      	movs	r0, #1
 8015d1a:	f001 f959 	bl	8016fd0 <__kernel_sinf>
 8015d1e:	e7d5      	b.n	8015ccc <cosf+0x24>
 8015d20:	3f490fd8 	.word	0x3f490fd8
 8015d24:	00000000 	.word	0x00000000

08015d28 <roundf>:
 8015d28:	ee10 0a10 	vmov	r0, s0
 8015d2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015d30:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015d34:	2a16      	cmp	r2, #22
 8015d36:	dc15      	bgt.n	8015d64 <roundf+0x3c>
 8015d38:	2a00      	cmp	r2, #0
 8015d3a:	da08      	bge.n	8015d4e <roundf+0x26>
 8015d3c:	3201      	adds	r2, #1
 8015d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015d42:	d101      	bne.n	8015d48 <roundf+0x20>
 8015d44:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015d48:	ee00 3a10 	vmov	s0, r3
 8015d4c:	4770      	bx	lr
 8015d4e:	4908      	ldr	r1, [pc, #32]	; (8015d70 <roundf+0x48>)
 8015d50:	4111      	asrs	r1, r2
 8015d52:	4208      	tst	r0, r1
 8015d54:	d0fa      	beq.n	8015d4c <roundf+0x24>
 8015d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015d5a:	4113      	asrs	r3, r2
 8015d5c:	4403      	add	r3, r0
 8015d5e:	ea23 0301 	bic.w	r3, r3, r1
 8015d62:	e7f1      	b.n	8015d48 <roundf+0x20>
 8015d64:	2a80      	cmp	r2, #128	; 0x80
 8015d66:	d1f1      	bne.n	8015d4c <roundf+0x24>
 8015d68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d6c:	4770      	bx	lr
 8015d6e:	bf00      	nop
 8015d70:	007fffff 	.word	0x007fffff

08015d74 <sinf>:
 8015d74:	ee10 3a10 	vmov	r3, s0
 8015d78:	b507      	push	{r0, r1, r2, lr}
 8015d7a:	4a1d      	ldr	r2, [pc, #116]	; (8015df0 <sinf+0x7c>)
 8015d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d80:	4293      	cmp	r3, r2
 8015d82:	dc05      	bgt.n	8015d90 <sinf+0x1c>
 8015d84:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015df4 <sinf+0x80>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	f001 f921 	bl	8016fd0 <__kernel_sinf>
 8015d8e:	e004      	b.n	8015d9a <sinf+0x26>
 8015d90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d94:	db04      	blt.n	8015da0 <sinf+0x2c>
 8015d96:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d9a:	b003      	add	sp, #12
 8015d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015da0:	4668      	mov	r0, sp
 8015da2:	f000 fceb 	bl	801677c <__ieee754_rem_pio2f>
 8015da6:	f000 0003 	and.w	r0, r0, #3
 8015daa:	2801      	cmp	r0, #1
 8015dac:	d008      	beq.n	8015dc0 <sinf+0x4c>
 8015dae:	2802      	cmp	r0, #2
 8015db0:	d00d      	beq.n	8015dce <sinf+0x5a>
 8015db2:	b9b0      	cbnz	r0, 8015de2 <sinf+0x6e>
 8015db4:	eddd 0a01 	vldr	s1, [sp, #4]
 8015db8:	ed9d 0a00 	vldr	s0, [sp]
 8015dbc:	2001      	movs	r0, #1
 8015dbe:	e7e4      	b.n	8015d8a <sinf+0x16>
 8015dc0:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dc4:	ed9d 0a00 	vldr	s0, [sp]
 8015dc8:	f000 fe18 	bl	80169fc <__kernel_cosf>
 8015dcc:	e7e5      	b.n	8015d9a <sinf+0x26>
 8015dce:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dd2:	ed9d 0a00 	vldr	s0, [sp]
 8015dd6:	2001      	movs	r0, #1
 8015dd8:	f001 f8fa 	bl	8016fd0 <__kernel_sinf>
 8015ddc:	eeb1 0a40 	vneg.f32	s0, s0
 8015de0:	e7db      	b.n	8015d9a <sinf+0x26>
 8015de2:	eddd 0a01 	vldr	s1, [sp, #4]
 8015de6:	ed9d 0a00 	vldr	s0, [sp]
 8015dea:	f000 fe07 	bl	80169fc <__kernel_cosf>
 8015dee:	e7f5      	b.n	8015ddc <sinf+0x68>
 8015df0:	3f490fd8 	.word	0x3f490fd8
 8015df4:	00000000 	.word	0x00000000

08015df8 <tanf>:
 8015df8:	ee10 3a10 	vmov	r3, s0
 8015dfc:	b507      	push	{r0, r1, r2, lr}
 8015dfe:	4a10      	ldr	r2, [pc, #64]	; (8015e40 <tanf+0x48>)
 8015e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e04:	4293      	cmp	r3, r2
 8015e06:	dc05      	bgt.n	8015e14 <tanf+0x1c>
 8015e08:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015e44 <tanf+0x4c>
 8015e0c:	2001      	movs	r0, #1
 8015e0e:	f001 f927 	bl	8017060 <__kernel_tanf>
 8015e12:	e004      	b.n	8015e1e <tanf+0x26>
 8015e14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015e18:	db04      	blt.n	8015e24 <tanf+0x2c>
 8015e1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015e1e:	b003      	add	sp, #12
 8015e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e24:	4668      	mov	r0, sp
 8015e26:	f000 fca9 	bl	801677c <__ieee754_rem_pio2f>
 8015e2a:	0040      	lsls	r0, r0, #1
 8015e2c:	f000 0002 	and.w	r0, r0, #2
 8015e30:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e34:	ed9d 0a00 	vldr	s0, [sp]
 8015e38:	f1c0 0001 	rsb	r0, r0, #1
 8015e3c:	e7e7      	b.n	8015e0e <tanf+0x16>
 8015e3e:	bf00      	nop
 8015e40:	3f490fda 	.word	0x3f490fda
 8015e44:	00000000 	.word	0x00000000

08015e48 <atan2>:
 8015e48:	f000 b89a 	b.w	8015f80 <__ieee754_atan2>

08015e4c <sqrt>:
 8015e4c:	b538      	push	{r3, r4, r5, lr}
 8015e4e:	ed2d 8b02 	vpush	{d8}
 8015e52:	ec55 4b10 	vmov	r4, r5, d0
 8015e56:	f000 f95d 	bl	8016114 <__ieee754_sqrt>
 8015e5a:	4b15      	ldr	r3, [pc, #84]	; (8015eb0 <sqrt+0x64>)
 8015e5c:	eeb0 8a40 	vmov.f32	s16, s0
 8015e60:	eef0 8a60 	vmov.f32	s17, s1
 8015e64:	f993 3000 	ldrsb.w	r3, [r3]
 8015e68:	3301      	adds	r3, #1
 8015e6a:	d019      	beq.n	8015ea0 <sqrt+0x54>
 8015e6c:	4622      	mov	r2, r4
 8015e6e:	462b      	mov	r3, r5
 8015e70:	4620      	mov	r0, r4
 8015e72:	4629      	mov	r1, r5
 8015e74:	f7ea fe5a 	bl	8000b2c <__aeabi_dcmpun>
 8015e78:	b990      	cbnz	r0, 8015ea0 <sqrt+0x54>
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	4620      	mov	r0, r4
 8015e80:	4629      	mov	r1, r5
 8015e82:	f7ea fe2b 	bl	8000adc <__aeabi_dcmplt>
 8015e86:	b158      	cbz	r0, 8015ea0 <sqrt+0x54>
 8015e88:	f001 fd16 	bl	80178b8 <__errno>
 8015e8c:	2321      	movs	r3, #33	; 0x21
 8015e8e:	6003      	str	r3, [r0, #0]
 8015e90:	2200      	movs	r2, #0
 8015e92:	2300      	movs	r3, #0
 8015e94:	4610      	mov	r0, r2
 8015e96:	4619      	mov	r1, r3
 8015e98:	f7ea fcd8 	bl	800084c <__aeabi_ddiv>
 8015e9c:	ec41 0b18 	vmov	d8, r0, r1
 8015ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8015ea4:	eef0 0a68 	vmov.f32	s1, s17
 8015ea8:	ecbd 8b02 	vpop	{d8}
 8015eac:	bd38      	pop	{r3, r4, r5, pc}
 8015eae:	bf00      	nop
 8015eb0:	200000ed 	.word	0x200000ed

08015eb4 <acosf>:
 8015eb4:	b508      	push	{r3, lr}
 8015eb6:	ed2d 8b02 	vpush	{d8}
 8015eba:	eeb0 8a40 	vmov.f32	s16, s0
 8015ebe:	f000 f9dd 	bl	801627c <__ieee754_acosf>
 8015ec2:	4b13      	ldr	r3, [pc, #76]	; (8015f10 <acosf+0x5c>)
 8015ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8015ec8:	3301      	adds	r3, #1
 8015eca:	eef0 8a40 	vmov.f32	s17, s0
 8015ece:	d01a      	beq.n	8015f06 <acosf+0x52>
 8015ed0:	eeb4 8a48 	vcmp.f32	s16, s16
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	d615      	bvs.n	8015f06 <acosf+0x52>
 8015eda:	eeb0 0a48 	vmov.f32	s0, s16
 8015ede:	f001 fc21 	bl	8017724 <fabsf>
 8015ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	dd0a      	ble.n	8015f06 <acosf+0x52>
 8015ef0:	f001 fce2 	bl	80178b8 <__errno>
 8015ef4:	ecbd 8b02 	vpop	{d8}
 8015ef8:	2321      	movs	r3, #33	; 0x21
 8015efa:	6003      	str	r3, [r0, #0]
 8015efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f00:	4804      	ldr	r0, [pc, #16]	; (8015f14 <acosf+0x60>)
 8015f02:	f001 bc59 	b.w	80177b8 <nanf>
 8015f06:	eeb0 0a68 	vmov.f32	s0, s17
 8015f0a:	ecbd 8b02 	vpop	{d8}
 8015f0e:	bd08      	pop	{r3, pc}
 8015f10:	200000ed 	.word	0x200000ed
 8015f14:	0801b160 	.word	0x0801b160

08015f18 <asinf>:
 8015f18:	b508      	push	{r3, lr}
 8015f1a:	ed2d 8b02 	vpush	{d8}
 8015f1e:	eeb0 8a40 	vmov.f32	s16, s0
 8015f22:	f000 faa5 	bl	8016470 <__ieee754_asinf>
 8015f26:	4b13      	ldr	r3, [pc, #76]	; (8015f74 <asinf+0x5c>)
 8015f28:	f993 3000 	ldrsb.w	r3, [r3]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	eef0 8a40 	vmov.f32	s17, s0
 8015f32:	d01a      	beq.n	8015f6a <asinf+0x52>
 8015f34:	eeb4 8a48 	vcmp.f32	s16, s16
 8015f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f3c:	d615      	bvs.n	8015f6a <asinf+0x52>
 8015f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8015f42:	f001 fbef 	bl	8017724 <fabsf>
 8015f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015f4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f52:	dd0a      	ble.n	8015f6a <asinf+0x52>
 8015f54:	f001 fcb0 	bl	80178b8 <__errno>
 8015f58:	ecbd 8b02 	vpop	{d8}
 8015f5c:	2321      	movs	r3, #33	; 0x21
 8015f5e:	6003      	str	r3, [r0, #0]
 8015f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f64:	4804      	ldr	r0, [pc, #16]	; (8015f78 <asinf+0x60>)
 8015f66:	f001 bc27 	b.w	80177b8 <nanf>
 8015f6a:	eeb0 0a68 	vmov.f32	s0, s17
 8015f6e:	ecbd 8b02 	vpop	{d8}
 8015f72:	bd08      	pop	{r3, pc}
 8015f74:	200000ed 	.word	0x200000ed
 8015f78:	0801b160 	.word	0x0801b160

08015f7c <atan2f>:
 8015f7c:	f000 bb5e 	b.w	801663c <__ieee754_atan2f>

08015f80 <__ieee754_atan2>:
 8015f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f84:	ec57 6b11 	vmov	r6, r7, d1
 8015f88:	4273      	negs	r3, r6
 8015f8a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016110 <__ieee754_atan2+0x190>
 8015f8e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015f92:	4333      	orrs	r3, r6
 8015f94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f98:	4573      	cmp	r3, lr
 8015f9a:	ec51 0b10 	vmov	r0, r1, d0
 8015f9e:	ee11 8a10 	vmov	r8, s2
 8015fa2:	d80a      	bhi.n	8015fba <__ieee754_atan2+0x3a>
 8015fa4:	4244      	negs	r4, r0
 8015fa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015faa:	4304      	orrs	r4, r0
 8015fac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015fb0:	4574      	cmp	r4, lr
 8015fb2:	ee10 9a10 	vmov	r9, s0
 8015fb6:	468c      	mov	ip, r1
 8015fb8:	d907      	bls.n	8015fca <__ieee754_atan2+0x4a>
 8015fba:	4632      	mov	r2, r6
 8015fbc:	463b      	mov	r3, r7
 8015fbe:	f7ea f965 	bl	800028c <__adddf3>
 8015fc2:	ec41 0b10 	vmov	d0, r0, r1
 8015fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015fce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015fd2:	4334      	orrs	r4, r6
 8015fd4:	d103      	bne.n	8015fde <__ieee754_atan2+0x5e>
 8015fd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fda:	f001 b925 	b.w	8017228 <atan>
 8015fde:	17bc      	asrs	r4, r7, #30
 8015fe0:	f004 0402 	and.w	r4, r4, #2
 8015fe4:	ea53 0909 	orrs.w	r9, r3, r9
 8015fe8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015fec:	d107      	bne.n	8015ffe <__ieee754_atan2+0x7e>
 8015fee:	2c02      	cmp	r4, #2
 8015ff0:	d060      	beq.n	80160b4 <__ieee754_atan2+0x134>
 8015ff2:	2c03      	cmp	r4, #3
 8015ff4:	d1e5      	bne.n	8015fc2 <__ieee754_atan2+0x42>
 8015ff6:	a142      	add	r1, pc, #264	; (adr r1, 8016100 <__ieee754_atan2+0x180>)
 8015ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ffc:	e7e1      	b.n	8015fc2 <__ieee754_atan2+0x42>
 8015ffe:	ea52 0808 	orrs.w	r8, r2, r8
 8016002:	d106      	bne.n	8016012 <__ieee754_atan2+0x92>
 8016004:	f1bc 0f00 	cmp.w	ip, #0
 8016008:	da5f      	bge.n	80160ca <__ieee754_atan2+0x14a>
 801600a:	a13f      	add	r1, pc, #252	; (adr r1, 8016108 <__ieee754_atan2+0x188>)
 801600c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016010:	e7d7      	b.n	8015fc2 <__ieee754_atan2+0x42>
 8016012:	4572      	cmp	r2, lr
 8016014:	d10f      	bne.n	8016036 <__ieee754_atan2+0xb6>
 8016016:	4293      	cmp	r3, r2
 8016018:	f104 34ff 	add.w	r4, r4, #4294967295
 801601c:	d107      	bne.n	801602e <__ieee754_atan2+0xae>
 801601e:	2c02      	cmp	r4, #2
 8016020:	d84c      	bhi.n	80160bc <__ieee754_atan2+0x13c>
 8016022:	4b35      	ldr	r3, [pc, #212]	; (80160f8 <__ieee754_atan2+0x178>)
 8016024:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016028:	e9d4 0100 	ldrd	r0, r1, [r4]
 801602c:	e7c9      	b.n	8015fc2 <__ieee754_atan2+0x42>
 801602e:	2c02      	cmp	r4, #2
 8016030:	d848      	bhi.n	80160c4 <__ieee754_atan2+0x144>
 8016032:	4b32      	ldr	r3, [pc, #200]	; (80160fc <__ieee754_atan2+0x17c>)
 8016034:	e7f6      	b.n	8016024 <__ieee754_atan2+0xa4>
 8016036:	4573      	cmp	r3, lr
 8016038:	d0e4      	beq.n	8016004 <__ieee754_atan2+0x84>
 801603a:	1a9b      	subs	r3, r3, r2
 801603c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016040:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016044:	da1e      	bge.n	8016084 <__ieee754_atan2+0x104>
 8016046:	2f00      	cmp	r7, #0
 8016048:	da01      	bge.n	801604e <__ieee754_atan2+0xce>
 801604a:	323c      	adds	r2, #60	; 0x3c
 801604c:	db1e      	blt.n	801608c <__ieee754_atan2+0x10c>
 801604e:	4632      	mov	r2, r6
 8016050:	463b      	mov	r3, r7
 8016052:	f7ea fbfb 	bl	800084c <__aeabi_ddiv>
 8016056:	ec41 0b10 	vmov	d0, r0, r1
 801605a:	f001 fa85 	bl	8017568 <fabs>
 801605e:	f001 f8e3 	bl	8017228 <atan>
 8016062:	ec51 0b10 	vmov	r0, r1, d0
 8016066:	2c01      	cmp	r4, #1
 8016068:	d013      	beq.n	8016092 <__ieee754_atan2+0x112>
 801606a:	2c02      	cmp	r4, #2
 801606c:	d015      	beq.n	801609a <__ieee754_atan2+0x11a>
 801606e:	2c00      	cmp	r4, #0
 8016070:	d0a7      	beq.n	8015fc2 <__ieee754_atan2+0x42>
 8016072:	a319      	add	r3, pc, #100	; (adr r3, 80160d8 <__ieee754_atan2+0x158>)
 8016074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016078:	f7ea f906 	bl	8000288 <__aeabi_dsub>
 801607c:	a318      	add	r3, pc, #96	; (adr r3, 80160e0 <__ieee754_atan2+0x160>)
 801607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016082:	e014      	b.n	80160ae <__ieee754_atan2+0x12e>
 8016084:	a118      	add	r1, pc, #96	; (adr r1, 80160e8 <__ieee754_atan2+0x168>)
 8016086:	e9d1 0100 	ldrd	r0, r1, [r1]
 801608a:	e7ec      	b.n	8016066 <__ieee754_atan2+0xe6>
 801608c:	2000      	movs	r0, #0
 801608e:	2100      	movs	r1, #0
 8016090:	e7e9      	b.n	8016066 <__ieee754_atan2+0xe6>
 8016092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016096:	4619      	mov	r1, r3
 8016098:	e793      	b.n	8015fc2 <__ieee754_atan2+0x42>
 801609a:	a30f      	add	r3, pc, #60	; (adr r3, 80160d8 <__ieee754_atan2+0x158>)
 801609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a0:	f7ea f8f2 	bl	8000288 <__aeabi_dsub>
 80160a4:	4602      	mov	r2, r0
 80160a6:	460b      	mov	r3, r1
 80160a8:	a10d      	add	r1, pc, #52	; (adr r1, 80160e0 <__ieee754_atan2+0x160>)
 80160aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160ae:	f7ea f8eb 	bl	8000288 <__aeabi_dsub>
 80160b2:	e786      	b.n	8015fc2 <__ieee754_atan2+0x42>
 80160b4:	a10a      	add	r1, pc, #40	; (adr r1, 80160e0 <__ieee754_atan2+0x160>)
 80160b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160ba:	e782      	b.n	8015fc2 <__ieee754_atan2+0x42>
 80160bc:	a10c      	add	r1, pc, #48	; (adr r1, 80160f0 <__ieee754_atan2+0x170>)
 80160be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160c2:	e77e      	b.n	8015fc2 <__ieee754_atan2+0x42>
 80160c4:	2000      	movs	r0, #0
 80160c6:	2100      	movs	r1, #0
 80160c8:	e77b      	b.n	8015fc2 <__ieee754_atan2+0x42>
 80160ca:	a107      	add	r1, pc, #28	; (adr r1, 80160e8 <__ieee754_atan2+0x168>)
 80160cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160d0:	e777      	b.n	8015fc2 <__ieee754_atan2+0x42>
 80160d2:	bf00      	nop
 80160d4:	f3af 8000 	nop.w
 80160d8:	33145c07 	.word	0x33145c07
 80160dc:	3ca1a626 	.word	0x3ca1a626
 80160e0:	54442d18 	.word	0x54442d18
 80160e4:	400921fb 	.word	0x400921fb
 80160e8:	54442d18 	.word	0x54442d18
 80160ec:	3ff921fb 	.word	0x3ff921fb
 80160f0:	54442d18 	.word	0x54442d18
 80160f4:	3fe921fb 	.word	0x3fe921fb
 80160f8:	0801aa10 	.word	0x0801aa10
 80160fc:	0801aa28 	.word	0x0801aa28
 8016100:	54442d18 	.word	0x54442d18
 8016104:	c00921fb 	.word	0xc00921fb
 8016108:	54442d18 	.word	0x54442d18
 801610c:	bff921fb 	.word	0xbff921fb
 8016110:	7ff00000 	.word	0x7ff00000

08016114 <__ieee754_sqrt>:
 8016114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016118:	ec55 4b10 	vmov	r4, r5, d0
 801611c:	4e56      	ldr	r6, [pc, #344]	; (8016278 <__ieee754_sqrt+0x164>)
 801611e:	43ae      	bics	r6, r5
 8016120:	ee10 0a10 	vmov	r0, s0
 8016124:	ee10 3a10 	vmov	r3, s0
 8016128:	4629      	mov	r1, r5
 801612a:	462a      	mov	r2, r5
 801612c:	d110      	bne.n	8016150 <__ieee754_sqrt+0x3c>
 801612e:	ee10 2a10 	vmov	r2, s0
 8016132:	462b      	mov	r3, r5
 8016134:	f7ea fa60 	bl	80005f8 <__aeabi_dmul>
 8016138:	4602      	mov	r2, r0
 801613a:	460b      	mov	r3, r1
 801613c:	4620      	mov	r0, r4
 801613e:	4629      	mov	r1, r5
 8016140:	f7ea f8a4 	bl	800028c <__adddf3>
 8016144:	4604      	mov	r4, r0
 8016146:	460d      	mov	r5, r1
 8016148:	ec45 4b10 	vmov	d0, r4, r5
 801614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016150:	2d00      	cmp	r5, #0
 8016152:	dc10      	bgt.n	8016176 <__ieee754_sqrt+0x62>
 8016154:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016158:	4330      	orrs	r0, r6
 801615a:	d0f5      	beq.n	8016148 <__ieee754_sqrt+0x34>
 801615c:	b15d      	cbz	r5, 8016176 <__ieee754_sqrt+0x62>
 801615e:	ee10 2a10 	vmov	r2, s0
 8016162:	462b      	mov	r3, r5
 8016164:	ee10 0a10 	vmov	r0, s0
 8016168:	f7ea f88e 	bl	8000288 <__aeabi_dsub>
 801616c:	4602      	mov	r2, r0
 801616e:	460b      	mov	r3, r1
 8016170:	f7ea fb6c 	bl	800084c <__aeabi_ddiv>
 8016174:	e7e6      	b.n	8016144 <__ieee754_sqrt+0x30>
 8016176:	1509      	asrs	r1, r1, #20
 8016178:	d076      	beq.n	8016268 <__ieee754_sqrt+0x154>
 801617a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801617e:	07ce      	lsls	r6, r1, #31
 8016180:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8016184:	bf5e      	ittt	pl
 8016186:	0fda      	lsrpl	r2, r3, #31
 8016188:	005b      	lslpl	r3, r3, #1
 801618a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801618e:	0fda      	lsrs	r2, r3, #31
 8016190:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8016194:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016198:	2000      	movs	r0, #0
 801619a:	106d      	asrs	r5, r5, #1
 801619c:	005b      	lsls	r3, r3, #1
 801619e:	f04f 0e16 	mov.w	lr, #22
 80161a2:	4684      	mov	ip, r0
 80161a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80161a8:	eb0c 0401 	add.w	r4, ip, r1
 80161ac:	4294      	cmp	r4, r2
 80161ae:	bfde      	ittt	le
 80161b0:	1b12      	suble	r2, r2, r4
 80161b2:	eb04 0c01 	addle.w	ip, r4, r1
 80161b6:	1840      	addle	r0, r0, r1
 80161b8:	0052      	lsls	r2, r2, #1
 80161ba:	f1be 0e01 	subs.w	lr, lr, #1
 80161be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80161c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80161c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80161ca:	d1ed      	bne.n	80161a8 <__ieee754_sqrt+0x94>
 80161cc:	4671      	mov	r1, lr
 80161ce:	2720      	movs	r7, #32
 80161d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80161d4:	4562      	cmp	r2, ip
 80161d6:	eb04 060e 	add.w	r6, r4, lr
 80161da:	dc02      	bgt.n	80161e2 <__ieee754_sqrt+0xce>
 80161dc:	d113      	bne.n	8016206 <__ieee754_sqrt+0xf2>
 80161de:	429e      	cmp	r6, r3
 80161e0:	d811      	bhi.n	8016206 <__ieee754_sqrt+0xf2>
 80161e2:	2e00      	cmp	r6, #0
 80161e4:	eb06 0e04 	add.w	lr, r6, r4
 80161e8:	da43      	bge.n	8016272 <__ieee754_sqrt+0x15e>
 80161ea:	f1be 0f00 	cmp.w	lr, #0
 80161ee:	db40      	blt.n	8016272 <__ieee754_sqrt+0x15e>
 80161f0:	f10c 0801 	add.w	r8, ip, #1
 80161f4:	eba2 020c 	sub.w	r2, r2, ip
 80161f8:	429e      	cmp	r6, r3
 80161fa:	bf88      	it	hi
 80161fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016200:	1b9b      	subs	r3, r3, r6
 8016202:	4421      	add	r1, r4
 8016204:	46c4      	mov	ip, r8
 8016206:	0052      	lsls	r2, r2, #1
 8016208:	3f01      	subs	r7, #1
 801620a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801620e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016212:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016216:	d1dd      	bne.n	80161d4 <__ieee754_sqrt+0xc0>
 8016218:	4313      	orrs	r3, r2
 801621a:	d006      	beq.n	801622a <__ieee754_sqrt+0x116>
 801621c:	1c4c      	adds	r4, r1, #1
 801621e:	bf13      	iteet	ne
 8016220:	3101      	addne	r1, #1
 8016222:	3001      	addeq	r0, #1
 8016224:	4639      	moveq	r1, r7
 8016226:	f021 0101 	bicne.w	r1, r1, #1
 801622a:	1043      	asrs	r3, r0, #1
 801622c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016230:	0849      	lsrs	r1, r1, #1
 8016232:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016236:	07c2      	lsls	r2, r0, #31
 8016238:	bf48      	it	mi
 801623a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801623e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016242:	460c      	mov	r4, r1
 8016244:	463d      	mov	r5, r7
 8016246:	e77f      	b.n	8016148 <__ieee754_sqrt+0x34>
 8016248:	0ada      	lsrs	r2, r3, #11
 801624a:	3815      	subs	r0, #21
 801624c:	055b      	lsls	r3, r3, #21
 801624e:	2a00      	cmp	r2, #0
 8016250:	d0fa      	beq.n	8016248 <__ieee754_sqrt+0x134>
 8016252:	02d7      	lsls	r7, r2, #11
 8016254:	d50a      	bpl.n	801626c <__ieee754_sqrt+0x158>
 8016256:	f1c1 0420 	rsb	r4, r1, #32
 801625a:	fa23 f404 	lsr.w	r4, r3, r4
 801625e:	1e4d      	subs	r5, r1, #1
 8016260:	408b      	lsls	r3, r1
 8016262:	4322      	orrs	r2, r4
 8016264:	1b41      	subs	r1, r0, r5
 8016266:	e788      	b.n	801617a <__ieee754_sqrt+0x66>
 8016268:	4608      	mov	r0, r1
 801626a:	e7f0      	b.n	801624e <__ieee754_sqrt+0x13a>
 801626c:	0052      	lsls	r2, r2, #1
 801626e:	3101      	adds	r1, #1
 8016270:	e7ef      	b.n	8016252 <__ieee754_sqrt+0x13e>
 8016272:	46e0      	mov	r8, ip
 8016274:	e7be      	b.n	80161f4 <__ieee754_sqrt+0xe0>
 8016276:	bf00      	nop
 8016278:	7ff00000 	.word	0x7ff00000

0801627c <__ieee754_acosf>:
 801627c:	b508      	push	{r3, lr}
 801627e:	ee10 3a10 	vmov	r3, s0
 8016282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016286:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801628a:	ed2d 8b0c 	vpush	{d8-d13}
 801628e:	d10a      	bne.n	80162a6 <__ieee754_acosf+0x2a>
 8016290:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801642c <__ieee754_acosf+0x1b0>
 8016294:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8016430 <__ieee754_acosf+0x1b4>
 8016298:	2b00      	cmp	r3, #0
 801629a:	bfd8      	it	le
 801629c:	eeb0 0a48 	vmovle.f32	s0, s16
 80162a0:	ecbd 8b0c 	vpop	{d8-d13}
 80162a4:	bd08      	pop	{r3, pc}
 80162a6:	dd04      	ble.n	80162b2 <__ieee754_acosf+0x36>
 80162a8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80162ac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80162b0:	e7f6      	b.n	80162a0 <__ieee754_acosf+0x24>
 80162b2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80162b6:	da3e      	bge.n	8016336 <__ieee754_acosf+0xba>
 80162b8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80162bc:	f340 80b3 	ble.w	8016426 <__ieee754_acosf+0x1aa>
 80162c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80162c4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8016434 <__ieee754_acosf+0x1b8>
 80162c8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8016438 <__ieee754_acosf+0x1bc>
 80162cc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801643c <__ieee754_acosf+0x1c0>
 80162d0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8016440 <__ieee754_acosf+0x1c4>
 80162d4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80162d8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8016444 <__ieee754_acosf+0x1c8>
 80162dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80162e0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8016448 <__ieee754_acosf+0x1cc>
 80162e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80162e8:	eddf 6a58 	vldr	s13, [pc, #352]	; 801644c <__ieee754_acosf+0x1d0>
 80162ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80162f0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8016450 <__ieee754_acosf+0x1d4>
 80162f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80162f8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8016454 <__ieee754_acosf+0x1d8>
 80162fc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016300:	eddf 6a55 	vldr	s13, [pc, #340]	; 8016458 <__ieee754_acosf+0x1dc>
 8016304:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016308:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801645c <__ieee754_acosf+0x1e0>
 801630c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016314:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016318:	ee27 7a27 	vmul.f32	s14, s14, s15
 801631c:	eef0 7a66 	vmov.f32	s15, s13
 8016320:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016324:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016460 <__ieee754_acosf+0x1e4>
 8016328:	eea0 8a66 	vfms.f32	s16, s0, s13
 801632c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016330:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016334:	e7b4      	b.n	80162a0 <__ieee754_acosf+0x24>
 8016336:	2b00      	cmp	r3, #0
 8016338:	eddf da3e 	vldr	s27, [pc, #248]	; 8016434 <__ieee754_acosf+0x1b8>
 801633c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8016438 <__ieee754_acosf+0x1bc>
 8016340:	ed9f ca40 	vldr	s24, [pc, #256]	; 8016444 <__ieee754_acosf+0x1c8>
 8016344:	eddf ba40 	vldr	s23, [pc, #256]	; 8016448 <__ieee754_acosf+0x1cc>
 8016348:	ed9f ba40 	vldr	s22, [pc, #256]	; 801644c <__ieee754_acosf+0x1d0>
 801634c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8016450 <__ieee754_acosf+0x1d4>
 8016350:	ed9f da40 	vldr	s26, [pc, #256]	; 8016454 <__ieee754_acosf+0x1d8>
 8016354:	eddf aa39 	vldr	s21, [pc, #228]	; 801643c <__ieee754_acosf+0x1c0>
 8016358:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8016458 <__ieee754_acosf+0x1dc>
 801635c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801645c <__ieee754_acosf+0x1e0>
 8016360:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016364:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016368:	da28      	bge.n	80163bc <__ieee754_acosf+0x140>
 801636a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801636e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016372:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8016376:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801637a:	eeac ca80 	vfma.f32	s24, s25, s0
 801637e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016382:	eeec ba00 	vfma.f32	s23, s24, s0
 8016386:	eeea 9a00 	vfma.f32	s19, s20, s0
 801638a:	eeab ba80 	vfma.f32	s22, s23, s0
 801638e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8016392:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8016396:	ee68 8a80 	vmul.f32	s17, s17, s0
 801639a:	f000 fb2b 	bl	80169f4 <__ieee754_sqrtf>
 801639e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80163a2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8016464 <__ieee754_acosf+0x1e8>
 80163a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80163aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80163ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80163b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016468 <__ieee754_acosf+0x1ec>
 80163b6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80163ba:	e771      	b.n	80162a0 <__ieee754_acosf+0x24>
 80163bc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80163c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80163c4:	eeb0 0a48 	vmov.f32	s0, s16
 80163c8:	f000 fb14 	bl	80169f4 <__ieee754_sqrtf>
 80163cc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80163d0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80163d4:	eeac ca88 	vfma.f32	s24, s25, s16
 80163d8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80163dc:	eeec ba08 	vfma.f32	s23, s24, s16
 80163e0:	ee10 3a10 	vmov	r3, s0
 80163e4:	eeab ba88 	vfma.f32	s22, s23, s16
 80163e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80163ec:	f023 030f 	bic.w	r3, r3, #15
 80163f0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80163f4:	ee07 3a90 	vmov	s15, r3
 80163f8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80163fc:	eeb0 6a48 	vmov.f32	s12, s16
 8016400:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016404:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016408:	ee70 6a27 	vadd.f32	s13, s0, s15
 801640c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016410:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016414:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016418:	eea0 7a26 	vfma.f32	s14, s0, s13
 801641c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016420:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016424:	e73c      	b.n	80162a0 <__ieee754_acosf+0x24>
 8016426:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801646c <__ieee754_acosf+0x1f0>
 801642a:	e739      	b.n	80162a0 <__ieee754_acosf+0x24>
 801642c:	00000000 	.word	0x00000000
 8016430:	40490fdb 	.word	0x40490fdb
 8016434:	3811ef08 	.word	0x3811ef08
 8016438:	3a4f7f04 	.word	0x3a4f7f04
 801643c:	bf303361 	.word	0xbf303361
 8016440:	33a22168 	.word	0x33a22168
 8016444:	bd241146 	.word	0xbd241146
 8016448:	3e4e0aa8 	.word	0x3e4e0aa8
 801644c:	bea6b090 	.word	0xbea6b090
 8016450:	3e2aaaab 	.word	0x3e2aaaab
 8016454:	3d9dc62e 	.word	0x3d9dc62e
 8016458:	4001572d 	.word	0x4001572d
 801645c:	c019d139 	.word	0xc019d139
 8016460:	3fc90fda 	.word	0x3fc90fda
 8016464:	b3a22168 	.word	0xb3a22168
 8016468:	40490fda 	.word	0x40490fda
 801646c:	3fc90fdb 	.word	0x3fc90fdb

08016470 <__ieee754_asinf>:
 8016470:	b538      	push	{r3, r4, r5, lr}
 8016472:	ee10 5a10 	vmov	r5, s0
 8016476:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801647a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801647e:	ed2d 8b04 	vpush	{d8-d9}
 8016482:	d10c      	bne.n	801649e <__ieee754_asinf+0x2e>
 8016484:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80165fc <__ieee754_asinf+0x18c>
 8016488:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016600 <__ieee754_asinf+0x190>
 801648c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016490:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016494:	eeb0 0a67 	vmov.f32	s0, s15
 8016498:	ecbd 8b04 	vpop	{d8-d9}
 801649c:	bd38      	pop	{r3, r4, r5, pc}
 801649e:	dd04      	ble.n	80164aa <__ieee754_asinf+0x3a>
 80164a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80164a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80164a8:	e7f6      	b.n	8016498 <__ieee754_asinf+0x28>
 80164aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80164ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80164b2:	da0b      	bge.n	80164cc <__ieee754_asinf+0x5c>
 80164b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80164b8:	da52      	bge.n	8016560 <__ieee754_asinf+0xf0>
 80164ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016604 <__ieee754_asinf+0x194>
 80164be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80164c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80164c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ca:	dce5      	bgt.n	8016498 <__ieee754_asinf+0x28>
 80164cc:	f001 f92a 	bl	8017724 <fabsf>
 80164d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80164d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80164d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80164dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016608 <__ieee754_asinf+0x198>
 80164e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801660c <__ieee754_asinf+0x19c>
 80164e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016610 <__ieee754_asinf+0x1a0>
 80164e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80164ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016614 <__ieee754_asinf+0x1a4>
 80164f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80164f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016618 <__ieee754_asinf+0x1a8>
 80164f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80164fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 801661c <__ieee754_asinf+0x1ac>
 8016500:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016504:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016620 <__ieee754_asinf+0x1b0>
 8016508:	eea7 9a88 	vfma.f32	s18, s15, s16
 801650c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016624 <__ieee754_asinf+0x1b4>
 8016510:	eee8 7a07 	vfma.f32	s15, s16, s14
 8016514:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016628 <__ieee754_asinf+0x1b8>
 8016518:	eea7 7a88 	vfma.f32	s14, s15, s16
 801651c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801662c <__ieee754_asinf+0x1bc>
 8016520:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016524:	eeb0 0a48 	vmov.f32	s0, s16
 8016528:	eee7 8a88 	vfma.f32	s17, s15, s16
 801652c:	f000 fa62 	bl	80169f4 <__ieee754_sqrtf>
 8016530:	4b3f      	ldr	r3, [pc, #252]	; (8016630 <__ieee754_asinf+0x1c0>)
 8016532:	ee29 9a08 	vmul.f32	s18, s18, s16
 8016536:	429c      	cmp	r4, r3
 8016538:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801653c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016540:	dd3d      	ble.n	80165be <__ieee754_asinf+0x14e>
 8016542:	eea0 0a06 	vfma.f32	s0, s0, s12
 8016546:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016634 <__ieee754_asinf+0x1c4>
 801654a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801654e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016600 <__ieee754_asinf+0x190>
 8016552:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016556:	2d00      	cmp	r5, #0
 8016558:	bfd8      	it	le
 801655a:	eeb1 0a40 	vnegle.f32	s0, s0
 801655e:	e79b      	b.n	8016498 <__ieee754_asinf+0x28>
 8016560:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016564:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016608 <__ieee754_asinf+0x198>
 8016568:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801660c <__ieee754_asinf+0x19c>
 801656c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016620 <__ieee754_asinf+0x1b0>
 8016570:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016574:	eddf 6a27 	vldr	s13, [pc, #156]	; 8016614 <__ieee754_asinf+0x1a4>
 8016578:	eee7 6a27 	vfma.f32	s13, s14, s15
 801657c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016618 <__ieee754_asinf+0x1a8>
 8016580:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016584:	eddf 6a25 	vldr	s13, [pc, #148]	; 801661c <__ieee754_asinf+0x1ac>
 8016588:	eee7 6a27 	vfma.f32	s13, s14, s15
 801658c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016610 <__ieee754_asinf+0x1a0>
 8016590:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016594:	eddf 6a23 	vldr	s13, [pc, #140]	; 8016624 <__ieee754_asinf+0x1b4>
 8016598:	eee7 6a86 	vfma.f32	s13, s15, s12
 801659c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8016628 <__ieee754_asinf+0x1b8>
 80165a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80165a4:	eddf 6a21 	vldr	s13, [pc, #132]	; 801662c <__ieee754_asinf+0x1bc>
 80165a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80165ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80165b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80165b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80165b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80165bc:	e76c      	b.n	8016498 <__ieee754_asinf+0x28>
 80165be:	ee10 3a10 	vmov	r3, s0
 80165c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80165c6:	f023 030f 	bic.w	r3, r3, #15
 80165ca:	ee07 3a10 	vmov	s14, r3
 80165ce:	eea7 8a47 	vfms.f32	s16, s14, s14
 80165d2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80165d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80165da:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80165de:	eddf 7a07 	vldr	s15, [pc, #28]	; 80165fc <__ieee754_asinf+0x18c>
 80165e2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80165e6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80165ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8016638 <__ieee754_asinf+0x1c8>
 80165ee:	eeb0 6a40 	vmov.f32	s12, s0
 80165f2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80165f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80165fa:	e7aa      	b.n	8016552 <__ieee754_asinf+0xe2>
 80165fc:	b33bbd2e 	.word	0xb33bbd2e
 8016600:	3fc90fdb 	.word	0x3fc90fdb
 8016604:	7149f2ca 	.word	0x7149f2ca
 8016608:	3811ef08 	.word	0x3811ef08
 801660c:	3a4f7f04 	.word	0x3a4f7f04
 8016610:	3e2aaaab 	.word	0x3e2aaaab
 8016614:	bd241146 	.word	0xbd241146
 8016618:	3e4e0aa8 	.word	0x3e4e0aa8
 801661c:	bea6b090 	.word	0xbea6b090
 8016620:	3d9dc62e 	.word	0x3d9dc62e
 8016624:	bf303361 	.word	0xbf303361
 8016628:	4001572d 	.word	0x4001572d
 801662c:	c019d139 	.word	0xc019d139
 8016630:	3f799999 	.word	0x3f799999
 8016634:	333bbd2e 	.word	0x333bbd2e
 8016638:	3f490fdb 	.word	0x3f490fdb

0801663c <__ieee754_atan2f>:
 801663c:	ee10 2a90 	vmov	r2, s1
 8016640:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016644:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016648:	b510      	push	{r4, lr}
 801664a:	eef0 7a40 	vmov.f32	s15, s0
 801664e:	dc06      	bgt.n	801665e <__ieee754_atan2f+0x22>
 8016650:	ee10 0a10 	vmov	r0, s0
 8016654:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016658:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801665c:	dd04      	ble.n	8016668 <__ieee754_atan2f+0x2c>
 801665e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016662:	eeb0 0a67 	vmov.f32	s0, s15
 8016666:	bd10      	pop	{r4, pc}
 8016668:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801666c:	d103      	bne.n	8016676 <__ieee754_atan2f+0x3a>
 801666e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016672:	f000 bf83 	b.w	801757c <atanf>
 8016676:	1794      	asrs	r4, r2, #30
 8016678:	f004 0402 	and.w	r4, r4, #2
 801667c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016680:	b943      	cbnz	r3, 8016694 <__ieee754_atan2f+0x58>
 8016682:	2c02      	cmp	r4, #2
 8016684:	d05e      	beq.n	8016744 <__ieee754_atan2f+0x108>
 8016686:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016758 <__ieee754_atan2f+0x11c>
 801668a:	2c03      	cmp	r4, #3
 801668c:	bf08      	it	eq
 801668e:	eef0 7a47 	vmoveq.f32	s15, s14
 8016692:	e7e6      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016694:	b941      	cbnz	r1, 80166a8 <__ieee754_atan2f+0x6c>
 8016696:	eddf 7a31 	vldr	s15, [pc, #196]	; 801675c <__ieee754_atan2f+0x120>
 801669a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016760 <__ieee754_atan2f+0x124>
 801669e:	2800      	cmp	r0, #0
 80166a0:	bfb8      	it	lt
 80166a2:	eef0 7a40 	vmovlt.f32	s15, s0
 80166a6:	e7dc      	b.n	8016662 <__ieee754_atan2f+0x26>
 80166a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80166ac:	d110      	bne.n	80166d0 <__ieee754_atan2f+0x94>
 80166ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80166b6:	d107      	bne.n	80166c8 <__ieee754_atan2f+0x8c>
 80166b8:	2c02      	cmp	r4, #2
 80166ba:	d846      	bhi.n	801674a <__ieee754_atan2f+0x10e>
 80166bc:	4b29      	ldr	r3, [pc, #164]	; (8016764 <__ieee754_atan2f+0x128>)
 80166be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80166c2:	edd4 7a00 	vldr	s15, [r4]
 80166c6:	e7cc      	b.n	8016662 <__ieee754_atan2f+0x26>
 80166c8:	2c02      	cmp	r4, #2
 80166ca:	d841      	bhi.n	8016750 <__ieee754_atan2f+0x114>
 80166cc:	4b26      	ldr	r3, [pc, #152]	; (8016768 <__ieee754_atan2f+0x12c>)
 80166ce:	e7f6      	b.n	80166be <__ieee754_atan2f+0x82>
 80166d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166d4:	d0df      	beq.n	8016696 <__ieee754_atan2f+0x5a>
 80166d6:	1a5b      	subs	r3, r3, r1
 80166d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80166dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80166e0:	da1a      	bge.n	8016718 <__ieee754_atan2f+0xdc>
 80166e2:	2a00      	cmp	r2, #0
 80166e4:	da01      	bge.n	80166ea <__ieee754_atan2f+0xae>
 80166e6:	313c      	adds	r1, #60	; 0x3c
 80166e8:	db19      	blt.n	801671e <__ieee754_atan2f+0xe2>
 80166ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80166ee:	f001 f819 	bl	8017724 <fabsf>
 80166f2:	f000 ff43 	bl	801757c <atanf>
 80166f6:	eef0 7a40 	vmov.f32	s15, s0
 80166fa:	2c01      	cmp	r4, #1
 80166fc:	d012      	beq.n	8016724 <__ieee754_atan2f+0xe8>
 80166fe:	2c02      	cmp	r4, #2
 8016700:	d017      	beq.n	8016732 <__ieee754_atan2f+0xf6>
 8016702:	2c00      	cmp	r4, #0
 8016704:	d0ad      	beq.n	8016662 <__ieee754_atan2f+0x26>
 8016706:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801676c <__ieee754_atan2f+0x130>
 801670a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801670e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016770 <__ieee754_atan2f+0x134>
 8016712:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016716:	e7a4      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016718:	eddf 7a10 	vldr	s15, [pc, #64]	; 801675c <__ieee754_atan2f+0x120>
 801671c:	e7ed      	b.n	80166fa <__ieee754_atan2f+0xbe>
 801671e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016774 <__ieee754_atan2f+0x138>
 8016722:	e7ea      	b.n	80166fa <__ieee754_atan2f+0xbe>
 8016724:	ee17 3a90 	vmov	r3, s15
 8016728:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801672c:	ee07 3a90 	vmov	s15, r3
 8016730:	e797      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016732:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801676c <__ieee754_atan2f+0x130>
 8016736:	ee77 7a80 	vadd.f32	s15, s15, s0
 801673a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016770 <__ieee754_atan2f+0x134>
 801673e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016742:	e78e      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016744:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016770 <__ieee754_atan2f+0x134>
 8016748:	e78b      	b.n	8016662 <__ieee754_atan2f+0x26>
 801674a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016778 <__ieee754_atan2f+0x13c>
 801674e:	e788      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016750:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016774 <__ieee754_atan2f+0x138>
 8016754:	e785      	b.n	8016662 <__ieee754_atan2f+0x26>
 8016756:	bf00      	nop
 8016758:	c0490fdb 	.word	0xc0490fdb
 801675c:	3fc90fdb 	.word	0x3fc90fdb
 8016760:	bfc90fdb 	.word	0xbfc90fdb
 8016764:	0801aa40 	.word	0x0801aa40
 8016768:	0801aa4c 	.word	0x0801aa4c
 801676c:	33bbbd2e 	.word	0x33bbbd2e
 8016770:	40490fdb 	.word	0x40490fdb
 8016774:	00000000 	.word	0x00000000
 8016778:	3f490fdb 	.word	0x3f490fdb

0801677c <__ieee754_rem_pio2f>:
 801677c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801677e:	ee10 6a10 	vmov	r6, s0
 8016782:	4b8e      	ldr	r3, [pc, #568]	; (80169bc <__ieee754_rem_pio2f+0x240>)
 8016784:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016788:	429d      	cmp	r5, r3
 801678a:	b087      	sub	sp, #28
 801678c:	eef0 7a40 	vmov.f32	s15, s0
 8016790:	4604      	mov	r4, r0
 8016792:	dc05      	bgt.n	80167a0 <__ieee754_rem_pio2f+0x24>
 8016794:	2300      	movs	r3, #0
 8016796:	ed80 0a00 	vstr	s0, [r0]
 801679a:	6043      	str	r3, [r0, #4]
 801679c:	2000      	movs	r0, #0
 801679e:	e01a      	b.n	80167d6 <__ieee754_rem_pio2f+0x5a>
 80167a0:	4b87      	ldr	r3, [pc, #540]	; (80169c0 <__ieee754_rem_pio2f+0x244>)
 80167a2:	429d      	cmp	r5, r3
 80167a4:	dc46      	bgt.n	8016834 <__ieee754_rem_pio2f+0xb8>
 80167a6:	2e00      	cmp	r6, #0
 80167a8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80169c4 <__ieee754_rem_pio2f+0x248>
 80167ac:	4b86      	ldr	r3, [pc, #536]	; (80169c8 <__ieee754_rem_pio2f+0x24c>)
 80167ae:	f025 050f 	bic.w	r5, r5, #15
 80167b2:	dd1f      	ble.n	80167f4 <__ieee754_rem_pio2f+0x78>
 80167b4:	429d      	cmp	r5, r3
 80167b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167ba:	d00e      	beq.n	80167da <__ieee754_rem_pio2f+0x5e>
 80167bc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80169cc <__ieee754_rem_pio2f+0x250>
 80167c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80167c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167c8:	ed80 0a00 	vstr	s0, [r0]
 80167cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167d0:	2001      	movs	r0, #1
 80167d2:	edc4 7a01 	vstr	s15, [r4, #4]
 80167d6:	b007      	add	sp, #28
 80167d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167da:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80169d0 <__ieee754_rem_pio2f+0x254>
 80167de:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80169d4 <__ieee754_rem_pio2f+0x258>
 80167e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167e6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80167ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167ee:	edc0 6a00 	vstr	s13, [r0]
 80167f2:	e7eb      	b.n	80167cc <__ieee754_rem_pio2f+0x50>
 80167f4:	429d      	cmp	r5, r3
 80167f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80167fa:	d00e      	beq.n	801681a <__ieee754_rem_pio2f+0x9e>
 80167fc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80169cc <__ieee754_rem_pio2f+0x250>
 8016800:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016804:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016808:	ed80 0a00 	vstr	s0, [r0]
 801680c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016810:	f04f 30ff 	mov.w	r0, #4294967295
 8016814:	edc4 7a01 	vstr	s15, [r4, #4]
 8016818:	e7dd      	b.n	80167d6 <__ieee754_rem_pio2f+0x5a>
 801681a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80169d0 <__ieee754_rem_pio2f+0x254>
 801681e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80169d4 <__ieee754_rem_pio2f+0x258>
 8016822:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016826:	ee77 6a87 	vadd.f32	s13, s15, s14
 801682a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801682e:	edc0 6a00 	vstr	s13, [r0]
 8016832:	e7eb      	b.n	801680c <__ieee754_rem_pio2f+0x90>
 8016834:	4b68      	ldr	r3, [pc, #416]	; (80169d8 <__ieee754_rem_pio2f+0x25c>)
 8016836:	429d      	cmp	r5, r3
 8016838:	dc72      	bgt.n	8016920 <__ieee754_rem_pio2f+0x1a4>
 801683a:	f000 ff73 	bl	8017724 <fabsf>
 801683e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80169dc <__ieee754_rem_pio2f+0x260>
 8016842:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016846:	eee0 7a07 	vfma.f32	s15, s0, s14
 801684a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801684e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016852:	ee17 0a90 	vmov	r0, s15
 8016856:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80169c4 <__ieee754_rem_pio2f+0x248>
 801685a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801685e:	281f      	cmp	r0, #31
 8016860:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80169cc <__ieee754_rem_pio2f+0x250>
 8016864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016868:	eeb1 6a47 	vneg.f32	s12, s14
 801686c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016870:	ee16 2a90 	vmov	r2, s13
 8016874:	dc1c      	bgt.n	80168b0 <__ieee754_rem_pio2f+0x134>
 8016876:	495a      	ldr	r1, [pc, #360]	; (80169e0 <__ieee754_rem_pio2f+0x264>)
 8016878:	1e47      	subs	r7, r0, #1
 801687a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801687e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016882:	428b      	cmp	r3, r1
 8016884:	d014      	beq.n	80168b0 <__ieee754_rem_pio2f+0x134>
 8016886:	6022      	str	r2, [r4, #0]
 8016888:	ed94 7a00 	vldr	s14, [r4]
 801688c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016890:	2e00      	cmp	r6, #0
 8016892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016896:	ed84 0a01 	vstr	s0, [r4, #4]
 801689a:	da9c      	bge.n	80167d6 <__ieee754_rem_pio2f+0x5a>
 801689c:	eeb1 7a47 	vneg.f32	s14, s14
 80168a0:	eeb1 0a40 	vneg.f32	s0, s0
 80168a4:	ed84 7a00 	vstr	s14, [r4]
 80168a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80168ac:	4240      	negs	r0, r0
 80168ae:	e792      	b.n	80167d6 <__ieee754_rem_pio2f+0x5a>
 80168b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80168b4:	15eb      	asrs	r3, r5, #23
 80168b6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80168ba:	2d08      	cmp	r5, #8
 80168bc:	dde3      	ble.n	8016886 <__ieee754_rem_pio2f+0x10a>
 80168be:	eddf 7a44 	vldr	s15, [pc, #272]	; 80169d0 <__ieee754_rem_pio2f+0x254>
 80168c2:	eef0 6a40 	vmov.f32	s13, s0
 80168c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80168ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80168ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 80168d2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80169d4 <__ieee754_rem_pio2f+0x258>
 80168d6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80168da:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80168de:	eef0 7a40 	vmov.f32	s15, s0
 80168e2:	ee15 2a90 	vmov	r2, s11
 80168e6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80168ea:	1a5b      	subs	r3, r3, r1
 80168ec:	2b19      	cmp	r3, #25
 80168ee:	dc04      	bgt.n	80168fa <__ieee754_rem_pio2f+0x17e>
 80168f0:	edc4 5a00 	vstr	s11, [r4]
 80168f4:	eeb0 0a66 	vmov.f32	s0, s13
 80168f8:	e7c6      	b.n	8016888 <__ieee754_rem_pio2f+0x10c>
 80168fa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80169e4 <__ieee754_rem_pio2f+0x268>
 80168fe:	eeb0 0a66 	vmov.f32	s0, s13
 8016902:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016906:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801690a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80169e8 <__ieee754_rem_pio2f+0x26c>
 801690e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016912:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016916:	ee30 7a67 	vsub.f32	s14, s0, s15
 801691a:	ed84 7a00 	vstr	s14, [r4]
 801691e:	e7b3      	b.n	8016888 <__ieee754_rem_pio2f+0x10c>
 8016920:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016924:	db06      	blt.n	8016934 <__ieee754_rem_pio2f+0x1b8>
 8016926:	ee70 7a40 	vsub.f32	s15, s0, s0
 801692a:	edc0 7a01 	vstr	s15, [r0, #4]
 801692e:	edc0 7a00 	vstr	s15, [r0]
 8016932:	e733      	b.n	801679c <__ieee754_rem_pio2f+0x20>
 8016934:	15ea      	asrs	r2, r5, #23
 8016936:	3a86      	subs	r2, #134	; 0x86
 8016938:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801693c:	ee07 3a90 	vmov	s15, r3
 8016940:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016944:	eddf 6a29 	vldr	s13, [pc, #164]	; 80169ec <__ieee754_rem_pio2f+0x270>
 8016948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801694c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016950:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016958:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801695c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016964:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016968:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801696c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016974:	edcd 7a05 	vstr	s15, [sp, #20]
 8016978:	d11e      	bne.n	80169b8 <__ieee754_rem_pio2f+0x23c>
 801697a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016982:	bf14      	ite	ne
 8016984:	2302      	movne	r3, #2
 8016986:	2301      	moveq	r3, #1
 8016988:	4919      	ldr	r1, [pc, #100]	; (80169f0 <__ieee754_rem_pio2f+0x274>)
 801698a:	9101      	str	r1, [sp, #4]
 801698c:	2102      	movs	r1, #2
 801698e:	9100      	str	r1, [sp, #0]
 8016990:	a803      	add	r0, sp, #12
 8016992:	4621      	mov	r1, r4
 8016994:	f000 f892 	bl	8016abc <__kernel_rem_pio2f>
 8016998:	2e00      	cmp	r6, #0
 801699a:	f6bf af1c 	bge.w	80167d6 <__ieee754_rem_pio2f+0x5a>
 801699e:	edd4 7a00 	vldr	s15, [r4]
 80169a2:	eef1 7a67 	vneg.f32	s15, s15
 80169a6:	edc4 7a00 	vstr	s15, [r4]
 80169aa:	edd4 7a01 	vldr	s15, [r4, #4]
 80169ae:	eef1 7a67 	vneg.f32	s15, s15
 80169b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80169b6:	e779      	b.n	80168ac <__ieee754_rem_pio2f+0x130>
 80169b8:	2303      	movs	r3, #3
 80169ba:	e7e5      	b.n	8016988 <__ieee754_rem_pio2f+0x20c>
 80169bc:	3f490fd8 	.word	0x3f490fd8
 80169c0:	4016cbe3 	.word	0x4016cbe3
 80169c4:	3fc90f80 	.word	0x3fc90f80
 80169c8:	3fc90fd0 	.word	0x3fc90fd0
 80169cc:	37354443 	.word	0x37354443
 80169d0:	37354400 	.word	0x37354400
 80169d4:	2e85a308 	.word	0x2e85a308
 80169d8:	43490f80 	.word	0x43490f80
 80169dc:	3f22f984 	.word	0x3f22f984
 80169e0:	0801aa58 	.word	0x0801aa58
 80169e4:	2e85a300 	.word	0x2e85a300
 80169e8:	248d3132 	.word	0x248d3132
 80169ec:	43800000 	.word	0x43800000
 80169f0:	0801aad8 	.word	0x0801aad8

080169f4 <__ieee754_sqrtf>:
 80169f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80169f8:	4770      	bx	lr
	...

080169fc <__kernel_cosf>:
 80169fc:	ee10 3a10 	vmov	r3, s0
 8016a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a04:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016a08:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016a0c:	da05      	bge.n	8016a1a <__kernel_cosf+0x1e>
 8016a0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016a12:	ee17 2a90 	vmov	r2, s15
 8016a16:	2a00      	cmp	r2, #0
 8016a18:	d03d      	beq.n	8016a96 <__kernel_cosf+0x9a>
 8016a1a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016a1e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016a9c <__kernel_cosf+0xa0>
 8016a22:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016aa0 <__kernel_cosf+0xa4>
 8016a26:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016aa4 <__kernel_cosf+0xa8>
 8016a2a:	4a1f      	ldr	r2, [pc, #124]	; (8016aa8 <__kernel_cosf+0xac>)
 8016a2c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016a30:	4293      	cmp	r3, r2
 8016a32:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016aac <__kernel_cosf+0xb0>
 8016a36:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016a3a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016ab0 <__kernel_cosf+0xb4>
 8016a3e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016a42:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016ab4 <__kernel_cosf+0xb8>
 8016a46:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016a4a:	eeb0 7a66 	vmov.f32	s14, s13
 8016a4e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016a52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016a56:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8016a5a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8016a5e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8016a62:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016a66:	dc04      	bgt.n	8016a72 <__kernel_cosf+0x76>
 8016a68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016a6c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016a70:	4770      	bx	lr
 8016a72:	4a11      	ldr	r2, [pc, #68]	; (8016ab8 <__kernel_cosf+0xbc>)
 8016a74:	4293      	cmp	r3, r2
 8016a76:	bfda      	itte	le
 8016a78:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8016a7c:	ee06 3a90 	vmovle	s13, r3
 8016a80:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016a84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016a88:	ee36 0a66 	vsub.f32	s0, s12, s13
 8016a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a90:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a94:	4770      	bx	lr
 8016a96:	eeb0 0a46 	vmov.f32	s0, s12
 8016a9a:	4770      	bx	lr
 8016a9c:	ad47d74e 	.word	0xad47d74e
 8016aa0:	310f74f6 	.word	0x310f74f6
 8016aa4:	3d2aaaab 	.word	0x3d2aaaab
 8016aa8:	3e999999 	.word	0x3e999999
 8016aac:	b493f27c 	.word	0xb493f27c
 8016ab0:	37d00d01 	.word	0x37d00d01
 8016ab4:	bab60b61 	.word	0xbab60b61
 8016ab8:	3f480000 	.word	0x3f480000

08016abc <__kernel_rem_pio2f>:
 8016abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac0:	ed2d 8b04 	vpush	{d8-d9}
 8016ac4:	b0d7      	sub	sp, #348	; 0x15c
 8016ac6:	4616      	mov	r6, r2
 8016ac8:	4698      	mov	r8, r3
 8016aca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016acc:	4bbb      	ldr	r3, [pc, #748]	; (8016dbc <__kernel_rem_pio2f+0x300>)
 8016ace:	9001      	str	r0, [sp, #4]
 8016ad0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016ad4:	1d33      	adds	r3, r6, #4
 8016ad6:	460d      	mov	r5, r1
 8016ad8:	f108 39ff 	add.w	r9, r8, #4294967295
 8016adc:	db29      	blt.n	8016b32 <__kernel_rem_pio2f+0x76>
 8016ade:	1ef1      	subs	r1, r6, #3
 8016ae0:	bf48      	it	mi
 8016ae2:	1d31      	addmi	r1, r6, #4
 8016ae4:	10c9      	asrs	r1, r1, #3
 8016ae6:	1c4c      	adds	r4, r1, #1
 8016ae8:	00e3      	lsls	r3, r4, #3
 8016aea:	9302      	str	r3, [sp, #8]
 8016aec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016aee:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016af2:	eba1 0009 	sub.w	r0, r1, r9
 8016af6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016afa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8016afe:	eb07 0c09 	add.w	ip, r7, r9
 8016b02:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016b06:	2300      	movs	r3, #0
 8016b08:	4563      	cmp	r3, ip
 8016b0a:	dd14      	ble.n	8016b36 <__kernel_rem_pio2f+0x7a>
 8016b0c:	ab1a      	add	r3, sp, #104	; 0x68
 8016b0e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016b12:	46cc      	mov	ip, r9
 8016b14:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016b18:	f1c8 0b01 	rsb	fp, r8, #1
 8016b1c:	eb0b 020c 	add.w	r2, fp, ip
 8016b20:	4297      	cmp	r7, r2
 8016b22:	db27      	blt.n	8016b74 <__kernel_rem_pio2f+0xb8>
 8016b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016b28:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	2200      	movs	r2, #0
 8016b30:	e016      	b.n	8016b60 <__kernel_rem_pio2f+0xa4>
 8016b32:	2100      	movs	r1, #0
 8016b34:	e7d7      	b.n	8016ae6 <__kernel_rem_pio2f+0x2a>
 8016b36:	42d8      	cmn	r0, r3
 8016b38:	bf5d      	ittte	pl
 8016b3a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8016b3e:	ee07 2a90 	vmovpl	s15, r2
 8016b42:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016b46:	eef0 7a47 	vmovmi.f32	s15, s14
 8016b4a:	ecea 7a01 	vstmia	sl!, {s15}
 8016b4e:	3301      	adds	r3, #1
 8016b50:	e7da      	b.n	8016b08 <__kernel_rem_pio2f+0x4c>
 8016b52:	ecfe 6a01 	vldmia	lr!, {s13}
 8016b56:	ed90 7a00 	vldr	s14, [r0]
 8016b5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016b5e:	3201      	adds	r2, #1
 8016b60:	454a      	cmp	r2, r9
 8016b62:	f1a0 0004 	sub.w	r0, r0, #4
 8016b66:	ddf4      	ble.n	8016b52 <__kernel_rem_pio2f+0x96>
 8016b68:	ecea 7a01 	vstmia	sl!, {s15}
 8016b6c:	3304      	adds	r3, #4
 8016b6e:	f10c 0c01 	add.w	ip, ip, #1
 8016b72:	e7d3      	b.n	8016b1c <__kernel_rem_pio2f+0x60>
 8016b74:	ab06      	add	r3, sp, #24
 8016b76:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8016b7a:	9304      	str	r3, [sp, #16]
 8016b7c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016b7e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016dc8 <__kernel_rem_pio2f+0x30c>
 8016b82:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016dc4 <__kernel_rem_pio2f+0x308>
 8016b86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016b8a:	9303      	str	r3, [sp, #12]
 8016b8c:	46ba      	mov	sl, r7
 8016b8e:	ab56      	add	r3, sp, #344	; 0x158
 8016b90:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016b94:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016b98:	ab06      	add	r3, sp, #24
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	4652      	mov	r2, sl
 8016b9e:	2a00      	cmp	r2, #0
 8016ba0:	dc51      	bgt.n	8016c46 <__kernel_rem_pio2f+0x18a>
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	9305      	str	r3, [sp, #20]
 8016ba6:	f000 fe0d 	bl	80177c4 <scalbnf>
 8016baa:	eeb0 8a40 	vmov.f32	s16, s0
 8016bae:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016bb2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016bb6:	f000 fdbd 	bl	8017734 <floorf>
 8016bba:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016bbe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016bc2:	2c00      	cmp	r4, #0
 8016bc4:	9b05      	ldr	r3, [sp, #20]
 8016bc6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016bca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016bce:	edcd 7a00 	vstr	s15, [sp]
 8016bd2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016bd6:	dd4b      	ble.n	8016c70 <__kernel_rem_pio2f+0x1b4>
 8016bd8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016bdc:	aa06      	add	r2, sp, #24
 8016bde:	f1c4 0e08 	rsb	lr, r4, #8
 8016be2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016be6:	ee17 1a90 	vmov	r1, s15
 8016bea:	fa42 f00e 	asr.w	r0, r2, lr
 8016bee:	4401      	add	r1, r0
 8016bf0:	9100      	str	r1, [sp, #0]
 8016bf2:	fa00 f00e 	lsl.w	r0, r0, lr
 8016bf6:	a906      	add	r1, sp, #24
 8016bf8:	1a12      	subs	r2, r2, r0
 8016bfa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016bfe:	f1c4 0007 	rsb	r0, r4, #7
 8016c02:	fa42 fb00 	asr.w	fp, r2, r0
 8016c06:	f1bb 0f00 	cmp.w	fp, #0
 8016c0a:	dd43      	ble.n	8016c94 <__kernel_rem_pio2f+0x1d8>
 8016c0c:	9a00      	ldr	r2, [sp, #0]
 8016c0e:	f04f 0e00 	mov.w	lr, #0
 8016c12:	3201      	adds	r2, #1
 8016c14:	9200      	str	r2, [sp, #0]
 8016c16:	4670      	mov	r0, lr
 8016c18:	45f2      	cmp	sl, lr
 8016c1a:	dc6c      	bgt.n	8016cf6 <__kernel_rem_pio2f+0x23a>
 8016c1c:	2c00      	cmp	r4, #0
 8016c1e:	dd04      	ble.n	8016c2a <__kernel_rem_pio2f+0x16e>
 8016c20:	2c01      	cmp	r4, #1
 8016c22:	d079      	beq.n	8016d18 <__kernel_rem_pio2f+0x25c>
 8016c24:	2c02      	cmp	r4, #2
 8016c26:	f000 8082 	beq.w	8016d2e <__kernel_rem_pio2f+0x272>
 8016c2a:	f1bb 0f02 	cmp.w	fp, #2
 8016c2e:	d131      	bne.n	8016c94 <__kernel_rem_pio2f+0x1d8>
 8016c30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016c34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016c38:	b360      	cbz	r0, 8016c94 <__kernel_rem_pio2f+0x1d8>
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	f000 fdc2 	bl	80177c4 <scalbnf>
 8016c40:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016c44:	e026      	b.n	8016c94 <__kernel_rem_pio2f+0x1d8>
 8016c46:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016c4a:	3a01      	subs	r2, #1
 8016c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c50:	a942      	add	r1, sp, #264	; 0x108
 8016c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c56:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016c5a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016c5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016c62:	eca0 0a01 	vstmia	r0!, {s0}
 8016c66:	ed9c 0a00 	vldr	s0, [ip]
 8016c6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016c6e:	e796      	b.n	8016b9e <__kernel_rem_pio2f+0xe2>
 8016c70:	d107      	bne.n	8016c82 <__kernel_rem_pio2f+0x1c6>
 8016c72:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016c76:	a906      	add	r1, sp, #24
 8016c78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016c7c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016c80:	e7c1      	b.n	8016c06 <__kernel_rem_pio2f+0x14a>
 8016c82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8e:	da2f      	bge.n	8016cf0 <__kernel_rem_pio2f+0x234>
 8016c90:	f04f 0b00 	mov.w	fp, #0
 8016c94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	f040 8098 	bne.w	8016dd0 <__kernel_rem_pio2f+0x314>
 8016ca0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016ca4:	469c      	mov	ip, r3
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	45bc      	cmp	ip, r7
 8016caa:	da48      	bge.n	8016d3e <__kernel_rem_pio2f+0x282>
 8016cac:	2a00      	cmp	r2, #0
 8016cae:	d05f      	beq.n	8016d70 <__kernel_rem_pio2f+0x2b4>
 8016cb0:	aa06      	add	r2, sp, #24
 8016cb2:	3c08      	subs	r4, #8
 8016cb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016cb8:	2900      	cmp	r1, #0
 8016cba:	d07d      	beq.n	8016db8 <__kernel_rem_pio2f+0x2fc>
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016cc2:	9301      	str	r3, [sp, #4]
 8016cc4:	f000 fd7e 	bl	80177c4 <scalbnf>
 8016cc8:	9b01      	ldr	r3, [sp, #4]
 8016cca:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016dc8 <__kernel_rem_pio2f+0x30c>
 8016cce:	4619      	mov	r1, r3
 8016cd0:	2900      	cmp	r1, #0
 8016cd2:	f280 80af 	bge.w	8016e34 <__kernel_rem_pio2f+0x378>
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	2400      	movs	r4, #0
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	f2c0 80d0 	blt.w	8016e80 <__kernel_rem_pio2f+0x3c4>
 8016ce0:	a942      	add	r1, sp, #264	; 0x108
 8016ce2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016ce6:	4a36      	ldr	r2, [pc, #216]	; (8016dc0 <__kernel_rem_pio2f+0x304>)
 8016ce8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016cec:	2100      	movs	r1, #0
 8016cee:	e0bb      	b.n	8016e68 <__kernel_rem_pio2f+0x3ac>
 8016cf0:	f04f 0b02 	mov.w	fp, #2
 8016cf4:	e78a      	b.n	8016c0c <__kernel_rem_pio2f+0x150>
 8016cf6:	681a      	ldr	r2, [r3, #0]
 8016cf8:	b948      	cbnz	r0, 8016d0e <__kernel_rem_pio2f+0x252>
 8016cfa:	b11a      	cbz	r2, 8016d04 <__kernel_rem_pio2f+0x248>
 8016cfc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	2201      	movs	r2, #1
 8016d04:	f10e 0e01 	add.w	lr, lr, #1
 8016d08:	3304      	adds	r3, #4
 8016d0a:	4610      	mov	r0, r2
 8016d0c:	e784      	b.n	8016c18 <__kernel_rem_pio2f+0x15c>
 8016d0e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016d12:	601a      	str	r2, [r3, #0]
 8016d14:	4602      	mov	r2, r0
 8016d16:	e7f5      	b.n	8016d04 <__kernel_rem_pio2f+0x248>
 8016d18:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016d1c:	ab06      	add	r3, sp, #24
 8016d1e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d26:	aa06      	add	r2, sp, #24
 8016d28:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016d2c:	e77d      	b.n	8016c2a <__kernel_rem_pio2f+0x16e>
 8016d2e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016d32:	ab06      	add	r3, sp, #24
 8016d34:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d3c:	e7f3      	b.n	8016d26 <__kernel_rem_pio2f+0x26a>
 8016d3e:	a906      	add	r1, sp, #24
 8016d40:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016d44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d48:	4302      	orrs	r2, r0
 8016d4a:	e7ad      	b.n	8016ca8 <__kernel_rem_pio2f+0x1ec>
 8016d4c:	3001      	adds	r0, #1
 8016d4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016d52:	2a00      	cmp	r2, #0
 8016d54:	d0fa      	beq.n	8016d4c <__kernel_rem_pio2f+0x290>
 8016d56:	a91a      	add	r1, sp, #104	; 0x68
 8016d58:	eb0a 0208 	add.w	r2, sl, r8
 8016d5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016d60:	f10a 0301 	add.w	r3, sl, #1
 8016d64:	eb0a 0100 	add.w	r1, sl, r0
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	da04      	bge.n	8016d76 <__kernel_rem_pio2f+0x2ba>
 8016d6c:	468a      	mov	sl, r1
 8016d6e:	e70e      	b.n	8016b8e <__kernel_rem_pio2f+0xd2>
 8016d70:	9b04      	ldr	r3, [sp, #16]
 8016d72:	2001      	movs	r0, #1
 8016d74:	e7eb      	b.n	8016d4e <__kernel_rem_pio2f+0x292>
 8016d76:	9803      	ldr	r0, [sp, #12]
 8016d78:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016d7c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016d80:	9000      	str	r0, [sp, #0]
 8016d82:	ee07 0a90 	vmov	s15, r0
 8016d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	ece2 7a01 	vstmia	r2!, {s15}
 8016d90:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016d94:	4696      	mov	lr, r2
 8016d96:	4548      	cmp	r0, r9
 8016d98:	dd06      	ble.n	8016da8 <__kernel_rem_pio2f+0x2ec>
 8016d9a:	a842      	add	r0, sp, #264	; 0x108
 8016d9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016da0:	edc0 7a00 	vstr	s15, [r0]
 8016da4:	3301      	adds	r3, #1
 8016da6:	e7df      	b.n	8016d68 <__kernel_rem_pio2f+0x2ac>
 8016da8:	ecfc 6a01 	vldmia	ip!, {s13}
 8016dac:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016db0:	3001      	adds	r0, #1
 8016db2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016db6:	e7ee      	b.n	8016d96 <__kernel_rem_pio2f+0x2da>
 8016db8:	3b01      	subs	r3, #1
 8016dba:	e779      	b.n	8016cb0 <__kernel_rem_pio2f+0x1f4>
 8016dbc:	0801ae1c 	.word	0x0801ae1c
 8016dc0:	0801adf0 	.word	0x0801adf0
 8016dc4:	43800000 	.word	0x43800000
 8016dc8:	3b800000 	.word	0x3b800000
 8016dcc:	00000000 	.word	0x00000000
 8016dd0:	9b02      	ldr	r3, [sp, #8]
 8016dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8016dd6:	1b98      	subs	r0, r3, r6
 8016dd8:	f000 fcf4 	bl	80177c4 <scalbnf>
 8016ddc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016dc4 <__kernel_rem_pio2f+0x308>
 8016de0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de8:	db1b      	blt.n	8016e22 <__kernel_rem_pio2f+0x366>
 8016dea:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016dc8 <__kernel_rem_pio2f+0x30c>
 8016dee:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016df2:	aa06      	add	r2, sp, #24
 8016df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016df8:	a906      	add	r1, sp, #24
 8016dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dfe:	3408      	adds	r4, #8
 8016e00:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016e0c:	ee10 3a10 	vmov	r3, s0
 8016e10:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016e14:	ee17 2a90 	vmov	r2, s15
 8016e18:	f10a 0301 	add.w	r3, sl, #1
 8016e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016e20:	e74c      	b.n	8016cbc <__kernel_rem_pio2f+0x200>
 8016e22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016e26:	aa06      	add	r2, sp, #24
 8016e28:	ee10 3a10 	vmov	r3, s0
 8016e2c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016e30:	4653      	mov	r3, sl
 8016e32:	e743      	b.n	8016cbc <__kernel_rem_pio2f+0x200>
 8016e34:	aa42      	add	r2, sp, #264	; 0x108
 8016e36:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016e3a:	aa06      	add	r2, sp, #24
 8016e3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016e40:	9201      	str	r2, [sp, #4]
 8016e42:	ee07 2a90 	vmov	s15, r2
 8016e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e4a:	3901      	subs	r1, #1
 8016e4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016e50:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016e54:	edc0 7a00 	vstr	s15, [r0]
 8016e58:	e73a      	b.n	8016cd0 <__kernel_rem_pio2f+0x214>
 8016e5a:	ecf2 6a01 	vldmia	r2!, {s13}
 8016e5e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016e62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016e66:	3101      	adds	r1, #1
 8016e68:	42b9      	cmp	r1, r7
 8016e6a:	dc01      	bgt.n	8016e70 <__kernel_rem_pio2f+0x3b4>
 8016e6c:	428c      	cmp	r4, r1
 8016e6e:	daf4      	bge.n	8016e5a <__kernel_rem_pio2f+0x39e>
 8016e70:	aa56      	add	r2, sp, #344	; 0x158
 8016e72:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016e76:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016e7a:	3801      	subs	r0, #1
 8016e7c:	3401      	adds	r4, #1
 8016e7e:	e72c      	b.n	8016cda <__kernel_rem_pio2f+0x21e>
 8016e80:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e82:	2a02      	cmp	r2, #2
 8016e84:	dc0a      	bgt.n	8016e9c <__kernel_rem_pio2f+0x3e0>
 8016e86:	2a00      	cmp	r2, #0
 8016e88:	dc61      	bgt.n	8016f4e <__kernel_rem_pio2f+0x492>
 8016e8a:	d03c      	beq.n	8016f06 <__kernel_rem_pio2f+0x44a>
 8016e8c:	9b00      	ldr	r3, [sp, #0]
 8016e8e:	f003 0007 	and.w	r0, r3, #7
 8016e92:	b057      	add	sp, #348	; 0x15c
 8016e94:	ecbd 8b04 	vpop	{d8-d9}
 8016e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e9c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e9e:	2a03      	cmp	r2, #3
 8016ea0:	d1f4      	bne.n	8016e8c <__kernel_rem_pio2f+0x3d0>
 8016ea2:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ea4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016ea8:	4608      	mov	r0, r1
 8016eaa:	461c      	mov	r4, r3
 8016eac:	2c00      	cmp	r4, #0
 8016eae:	f1a0 0004 	sub.w	r0, r0, #4
 8016eb2:	dc59      	bgt.n	8016f68 <__kernel_rem_pio2f+0x4ac>
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	2801      	cmp	r0, #1
 8016eb8:	f1a1 0104 	sub.w	r1, r1, #4
 8016ebc:	dc64      	bgt.n	8016f88 <__kernel_rem_pio2f+0x4cc>
 8016ebe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016ec2:	2b01      	cmp	r3, #1
 8016ec4:	dc70      	bgt.n	8016fa8 <__kernel_rem_pio2f+0x4ec>
 8016ec6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016eca:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016ece:	f1bb 0f00 	cmp.w	fp, #0
 8016ed2:	d172      	bne.n	8016fba <__kernel_rem_pio2f+0x4fe>
 8016ed4:	edc5 6a00 	vstr	s13, [r5]
 8016ed8:	ed85 7a01 	vstr	s14, [r5, #4]
 8016edc:	edc5 7a02 	vstr	s15, [r5, #8]
 8016ee0:	e7d4      	b.n	8016e8c <__kernel_rem_pio2f+0x3d0>
 8016ee2:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ee4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016ee8:	ed91 7a00 	vldr	s14, [r1]
 8016eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	daf5      	bge.n	8016ee2 <__kernel_rem_pio2f+0x426>
 8016ef6:	f1bb 0f00 	cmp.w	fp, #0
 8016efa:	d001      	beq.n	8016f00 <__kernel_rem_pio2f+0x444>
 8016efc:	eef1 7a67 	vneg.f32	s15, s15
 8016f00:	edc5 7a00 	vstr	s15, [r5]
 8016f04:	e7c2      	b.n	8016e8c <__kernel_rem_pio2f+0x3d0>
 8016f06:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016f0a:	e7f2      	b.n	8016ef2 <__kernel_rem_pio2f+0x436>
 8016f0c:	aa2e      	add	r2, sp, #184	; 0xb8
 8016f0e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016f12:	edd0 7a00 	vldr	s15, [r0]
 8016f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f1a:	3901      	subs	r1, #1
 8016f1c:	2900      	cmp	r1, #0
 8016f1e:	daf5      	bge.n	8016f0c <__kernel_rem_pio2f+0x450>
 8016f20:	f1bb 0f00 	cmp.w	fp, #0
 8016f24:	d017      	beq.n	8016f56 <__kernel_rem_pio2f+0x49a>
 8016f26:	eef1 7a47 	vneg.f32	s15, s14
 8016f2a:	edc5 7a00 	vstr	s15, [r5]
 8016f2e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f36:	a82f      	add	r0, sp, #188	; 0xbc
 8016f38:	2101      	movs	r1, #1
 8016f3a:	428b      	cmp	r3, r1
 8016f3c:	da0e      	bge.n	8016f5c <__kernel_rem_pio2f+0x4a0>
 8016f3e:	f1bb 0f00 	cmp.w	fp, #0
 8016f42:	d001      	beq.n	8016f48 <__kernel_rem_pio2f+0x48c>
 8016f44:	eef1 7a67 	vneg.f32	s15, s15
 8016f48:	edc5 7a01 	vstr	s15, [r5, #4]
 8016f4c:	e79e      	b.n	8016e8c <__kernel_rem_pio2f+0x3d0>
 8016f4e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016dcc <__kernel_rem_pio2f+0x310>
 8016f52:	4619      	mov	r1, r3
 8016f54:	e7e2      	b.n	8016f1c <__kernel_rem_pio2f+0x460>
 8016f56:	eef0 7a47 	vmov.f32	s15, s14
 8016f5a:	e7e6      	b.n	8016f2a <__kernel_rem_pio2f+0x46e>
 8016f5c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016f60:	3101      	adds	r1, #1
 8016f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f66:	e7e8      	b.n	8016f3a <__kernel_rem_pio2f+0x47e>
 8016f68:	edd0 7a00 	vldr	s15, [r0]
 8016f6c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016f70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016f74:	3c01      	subs	r4, #1
 8016f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f7a:	ed80 7a00 	vstr	s14, [r0]
 8016f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f82:	edc0 7a01 	vstr	s15, [r0, #4]
 8016f86:	e791      	b.n	8016eac <__kernel_rem_pio2f+0x3f0>
 8016f88:	edd1 7a00 	vldr	s15, [r1]
 8016f8c:	edd1 6a01 	vldr	s13, [r1, #4]
 8016f90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016f94:	3801      	subs	r0, #1
 8016f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f9a:	ed81 7a00 	vstr	s14, [r1]
 8016f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016fa2:	edc1 7a01 	vstr	s15, [r1, #4]
 8016fa6:	e786      	b.n	8016eb6 <__kernel_rem_pio2f+0x3fa>
 8016fa8:	aa2e      	add	r2, sp, #184	; 0xb8
 8016faa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016fae:	ed91 7a00 	vldr	s14, [r1]
 8016fb2:	3b01      	subs	r3, #1
 8016fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016fb8:	e783      	b.n	8016ec2 <__kernel_rem_pio2f+0x406>
 8016fba:	eef1 6a66 	vneg.f32	s13, s13
 8016fbe:	eeb1 7a47 	vneg.f32	s14, s14
 8016fc2:	edc5 6a00 	vstr	s13, [r5]
 8016fc6:	ed85 7a01 	vstr	s14, [r5, #4]
 8016fca:	eef1 7a67 	vneg.f32	s15, s15
 8016fce:	e785      	b.n	8016edc <__kernel_rem_pio2f+0x420>

08016fd0 <__kernel_sinf>:
 8016fd0:	ee10 3a10 	vmov	r3, s0
 8016fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016fd8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016fdc:	da04      	bge.n	8016fe8 <__kernel_sinf+0x18>
 8016fde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016fe2:	ee17 3a90 	vmov	r3, s15
 8016fe6:	b35b      	cbz	r3, 8017040 <__kernel_sinf+0x70>
 8016fe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016fec:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017044 <__kernel_sinf+0x74>
 8016ff0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8017048 <__kernel_sinf+0x78>
 8016ff4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016ff8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801704c <__kernel_sinf+0x7c>
 8016ffc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017000:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8017050 <__kernel_sinf+0x80>
 8017004:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017008:	eddf 7a12 	vldr	s15, [pc, #72]	; 8017054 <__kernel_sinf+0x84>
 801700c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017010:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017014:	b930      	cbnz	r0, 8017024 <__kernel_sinf+0x54>
 8017016:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8017058 <__kernel_sinf+0x88>
 801701a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801701e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017022:	4770      	bx	lr
 8017024:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017028:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801702c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017030:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017034:	eddf 7a09 	vldr	s15, [pc, #36]	; 801705c <__kernel_sinf+0x8c>
 8017038:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801703c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017040:	4770      	bx	lr
 8017042:	bf00      	nop
 8017044:	2f2ec9d3 	.word	0x2f2ec9d3
 8017048:	b2d72f34 	.word	0xb2d72f34
 801704c:	3638ef1b 	.word	0x3638ef1b
 8017050:	b9500d01 	.word	0xb9500d01
 8017054:	3c088889 	.word	0x3c088889
 8017058:	be2aaaab 	.word	0xbe2aaaab
 801705c:	3e2aaaab 	.word	0x3e2aaaab

08017060 <__kernel_tanf>:
 8017060:	b508      	push	{r3, lr}
 8017062:	ee10 3a10 	vmov	r3, s0
 8017066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801706a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801706e:	eef0 7a40 	vmov.f32	s15, s0
 8017072:	da17      	bge.n	80170a4 <__kernel_tanf+0x44>
 8017074:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017078:	ee17 1a10 	vmov	r1, s14
 801707c:	bb41      	cbnz	r1, 80170d0 <__kernel_tanf+0x70>
 801707e:	1c43      	adds	r3, r0, #1
 8017080:	4313      	orrs	r3, r2
 8017082:	d108      	bne.n	8017096 <__kernel_tanf+0x36>
 8017084:	f000 fb4e 	bl	8017724 <fabsf>
 8017088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801708c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017090:	eeb0 0a67 	vmov.f32	s0, s15
 8017094:	bd08      	pop	{r3, pc}
 8017096:	2801      	cmp	r0, #1
 8017098:	d0fa      	beq.n	8017090 <__kernel_tanf+0x30>
 801709a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801709e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170a2:	e7f5      	b.n	8017090 <__kernel_tanf+0x30>
 80170a4:	494d      	ldr	r1, [pc, #308]	; (80171dc <__kernel_tanf+0x17c>)
 80170a6:	428a      	cmp	r2, r1
 80170a8:	db12      	blt.n	80170d0 <__kernel_tanf+0x70>
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	bfb8      	it	lt
 80170ae:	eef1 7a40 	vneglt.f32	s15, s0
 80170b2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80171e0 <__kernel_tanf+0x180>
 80170b6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80170ba:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80171e4 <__kernel_tanf+0x184>
 80170be:	bfb8      	it	lt
 80170c0:	eef1 0a60 	vneglt.f32	s1, s1
 80170c4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80170c8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80170cc:	eddf 0a46 	vldr	s1, [pc, #280]	; 80171e8 <__kernel_tanf+0x188>
 80170d0:	eddf 5a46 	vldr	s11, [pc, #280]	; 80171ec <__kernel_tanf+0x18c>
 80170d4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 80171f0 <__kernel_tanf+0x190>
 80170d8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 80171f4 <__kernel_tanf+0x194>
 80170dc:	493f      	ldr	r1, [pc, #252]	; (80171dc <__kernel_tanf+0x17c>)
 80170de:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80170e2:	428a      	cmp	r2, r1
 80170e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80170e8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80170ec:	eddf 5a42 	vldr	s11, [pc, #264]	; 80171f8 <__kernel_tanf+0x198>
 80170f0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80170f4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80171fc <__kernel_tanf+0x19c>
 80170f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170fc:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017200 <__kernel_tanf+0x1a0>
 8017100:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017104:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8017204 <__kernel_tanf+0x1a4>
 8017108:	eea5 6a87 	vfma.f32	s12, s11, s14
 801710c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017208 <__kernel_tanf+0x1a8>
 8017110:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017114:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801720c <__kernel_tanf+0x1ac>
 8017118:	eea5 5a87 	vfma.f32	s10, s11, s14
 801711c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8017210 <__kernel_tanf+0x1b0>
 8017120:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017124:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8017214 <__kernel_tanf+0x1b4>
 8017128:	eea5 5a87 	vfma.f32	s10, s11, s14
 801712c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8017218 <__kernel_tanf+0x1b8>
 8017130:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017134:	eeb0 7a65 	vmov.f32	s14, s11
 8017138:	eea7 6a26 	vfma.f32	s12, s14, s13
 801713c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8017140:	eeb0 7a46 	vmov.f32	s14, s12
 8017144:	eeb0 6a60 	vmov.f32	s12, s1
 8017148:	eea7 6a25 	vfma.f32	s12, s14, s11
 801714c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801721c <__kernel_tanf+0x1bc>
 8017150:	eee6 0a26 	vfma.f32	s1, s12, s13
 8017154:	eee5 0a87 	vfma.f32	s1, s11, s14
 8017158:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801715c:	db1d      	blt.n	801719a <__kernel_tanf+0x13a>
 801715e:	ee06 0a90 	vmov	s13, r0
 8017162:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8017166:	ee27 6a07 	vmul.f32	s12, s14, s14
 801716a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801716e:	179b      	asrs	r3, r3, #30
 8017170:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017174:	f003 0302 	and.w	r3, r3, #2
 8017178:	f1c3 0301 	rsb	r3, r3, #1
 801717c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017180:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8017184:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017188:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801718c:	ee07 3a90 	vmov	s15, r3
 8017190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017194:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017198:	e77a      	b.n	8017090 <__kernel_tanf+0x30>
 801719a:	2801      	cmp	r0, #1
 801719c:	d01b      	beq.n	80171d6 <__kernel_tanf+0x176>
 801719e:	4b20      	ldr	r3, [pc, #128]	; (8017220 <__kernel_tanf+0x1c0>)
 80171a0:	ee17 2a10 	vmov	r2, s14
 80171a4:	401a      	ands	r2, r3
 80171a6:	ee06 2a10 	vmov	s12, r2
 80171aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80171ae:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80171b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80171b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80171ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80171be:	ee16 2a90 	vmov	r2, s13
 80171c2:	4013      	ands	r3, r2
 80171c4:	ee07 3a90 	vmov	s15, r3
 80171c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80171cc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80171d0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80171d4:	e75c      	b.n	8017090 <__kernel_tanf+0x30>
 80171d6:	eef0 7a47 	vmov.f32	s15, s14
 80171da:	e759      	b.n	8017090 <__kernel_tanf+0x30>
 80171dc:	3f2ca140 	.word	0x3f2ca140
 80171e0:	3f490fda 	.word	0x3f490fda
 80171e4:	33222168 	.word	0x33222168
 80171e8:	00000000 	.word	0x00000000
 80171ec:	b79bae5f 	.word	0xb79bae5f
 80171f0:	38a3f445 	.word	0x38a3f445
 80171f4:	37d95384 	.word	0x37d95384
 80171f8:	3a1a26c8 	.word	0x3a1a26c8
 80171fc:	3b6b6916 	.word	0x3b6b6916
 8017200:	3cb327a4 	.word	0x3cb327a4
 8017204:	3e088889 	.word	0x3e088889
 8017208:	3895c07a 	.word	0x3895c07a
 801720c:	398137b9 	.word	0x398137b9
 8017210:	3abede48 	.word	0x3abede48
 8017214:	3c11371f 	.word	0x3c11371f
 8017218:	3d5d0dd1 	.word	0x3d5d0dd1
 801721c:	3eaaaaab 	.word	0x3eaaaaab
 8017220:	fffff000 	.word	0xfffff000
 8017224:	00000000 	.word	0x00000000

08017228 <atan>:
 8017228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722c:	ec55 4b10 	vmov	r4, r5, d0
 8017230:	4bc3      	ldr	r3, [pc, #780]	; (8017540 <atan+0x318>)
 8017232:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017236:	429e      	cmp	r6, r3
 8017238:	46ab      	mov	fp, r5
 801723a:	dd18      	ble.n	801726e <atan+0x46>
 801723c:	4bc1      	ldr	r3, [pc, #772]	; (8017544 <atan+0x31c>)
 801723e:	429e      	cmp	r6, r3
 8017240:	dc01      	bgt.n	8017246 <atan+0x1e>
 8017242:	d109      	bne.n	8017258 <atan+0x30>
 8017244:	b144      	cbz	r4, 8017258 <atan+0x30>
 8017246:	4622      	mov	r2, r4
 8017248:	462b      	mov	r3, r5
 801724a:	4620      	mov	r0, r4
 801724c:	4629      	mov	r1, r5
 801724e:	f7e9 f81d 	bl	800028c <__adddf3>
 8017252:	4604      	mov	r4, r0
 8017254:	460d      	mov	r5, r1
 8017256:	e006      	b.n	8017266 <atan+0x3e>
 8017258:	f1bb 0f00 	cmp.w	fp, #0
 801725c:	f300 8131 	bgt.w	80174c2 <atan+0x29a>
 8017260:	a59b      	add	r5, pc, #620	; (adr r5, 80174d0 <atan+0x2a8>)
 8017262:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017266:	ec45 4b10 	vmov	d0, r4, r5
 801726a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801726e:	4bb6      	ldr	r3, [pc, #728]	; (8017548 <atan+0x320>)
 8017270:	429e      	cmp	r6, r3
 8017272:	dc14      	bgt.n	801729e <atan+0x76>
 8017274:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017278:	429e      	cmp	r6, r3
 801727a:	dc0d      	bgt.n	8017298 <atan+0x70>
 801727c:	a396      	add	r3, pc, #600	; (adr r3, 80174d8 <atan+0x2b0>)
 801727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017282:	ee10 0a10 	vmov	r0, s0
 8017286:	4629      	mov	r1, r5
 8017288:	f7e9 f800 	bl	800028c <__adddf3>
 801728c:	4baf      	ldr	r3, [pc, #700]	; (801754c <atan+0x324>)
 801728e:	2200      	movs	r2, #0
 8017290:	f7e9 fc42 	bl	8000b18 <__aeabi_dcmpgt>
 8017294:	2800      	cmp	r0, #0
 8017296:	d1e6      	bne.n	8017266 <atan+0x3e>
 8017298:	f04f 3aff 	mov.w	sl, #4294967295
 801729c:	e02b      	b.n	80172f6 <atan+0xce>
 801729e:	f000 f963 	bl	8017568 <fabs>
 80172a2:	4bab      	ldr	r3, [pc, #684]	; (8017550 <atan+0x328>)
 80172a4:	429e      	cmp	r6, r3
 80172a6:	ec55 4b10 	vmov	r4, r5, d0
 80172aa:	f300 80bf 	bgt.w	801742c <atan+0x204>
 80172ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80172b2:	429e      	cmp	r6, r3
 80172b4:	f300 80a0 	bgt.w	80173f8 <atan+0x1d0>
 80172b8:	ee10 2a10 	vmov	r2, s0
 80172bc:	ee10 0a10 	vmov	r0, s0
 80172c0:	462b      	mov	r3, r5
 80172c2:	4629      	mov	r1, r5
 80172c4:	f7e8 ffe2 	bl	800028c <__adddf3>
 80172c8:	4ba0      	ldr	r3, [pc, #640]	; (801754c <atan+0x324>)
 80172ca:	2200      	movs	r2, #0
 80172cc:	f7e8 ffdc 	bl	8000288 <__aeabi_dsub>
 80172d0:	2200      	movs	r2, #0
 80172d2:	4606      	mov	r6, r0
 80172d4:	460f      	mov	r7, r1
 80172d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80172da:	4620      	mov	r0, r4
 80172dc:	4629      	mov	r1, r5
 80172de:	f7e8 ffd5 	bl	800028c <__adddf3>
 80172e2:	4602      	mov	r2, r0
 80172e4:	460b      	mov	r3, r1
 80172e6:	4630      	mov	r0, r6
 80172e8:	4639      	mov	r1, r7
 80172ea:	f7e9 faaf 	bl	800084c <__aeabi_ddiv>
 80172ee:	f04f 0a00 	mov.w	sl, #0
 80172f2:	4604      	mov	r4, r0
 80172f4:	460d      	mov	r5, r1
 80172f6:	4622      	mov	r2, r4
 80172f8:	462b      	mov	r3, r5
 80172fa:	4620      	mov	r0, r4
 80172fc:	4629      	mov	r1, r5
 80172fe:	f7e9 f97b 	bl	80005f8 <__aeabi_dmul>
 8017302:	4602      	mov	r2, r0
 8017304:	460b      	mov	r3, r1
 8017306:	4680      	mov	r8, r0
 8017308:	4689      	mov	r9, r1
 801730a:	f7e9 f975 	bl	80005f8 <__aeabi_dmul>
 801730e:	a374      	add	r3, pc, #464	; (adr r3, 80174e0 <atan+0x2b8>)
 8017310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017314:	4606      	mov	r6, r0
 8017316:	460f      	mov	r7, r1
 8017318:	f7e9 f96e 	bl	80005f8 <__aeabi_dmul>
 801731c:	a372      	add	r3, pc, #456	; (adr r3, 80174e8 <atan+0x2c0>)
 801731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017322:	f7e8 ffb3 	bl	800028c <__adddf3>
 8017326:	4632      	mov	r2, r6
 8017328:	463b      	mov	r3, r7
 801732a:	f7e9 f965 	bl	80005f8 <__aeabi_dmul>
 801732e:	a370      	add	r3, pc, #448	; (adr r3, 80174f0 <atan+0x2c8>)
 8017330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017334:	f7e8 ffaa 	bl	800028c <__adddf3>
 8017338:	4632      	mov	r2, r6
 801733a:	463b      	mov	r3, r7
 801733c:	f7e9 f95c 	bl	80005f8 <__aeabi_dmul>
 8017340:	a36d      	add	r3, pc, #436	; (adr r3, 80174f8 <atan+0x2d0>)
 8017342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017346:	f7e8 ffa1 	bl	800028c <__adddf3>
 801734a:	4632      	mov	r2, r6
 801734c:	463b      	mov	r3, r7
 801734e:	f7e9 f953 	bl	80005f8 <__aeabi_dmul>
 8017352:	a36b      	add	r3, pc, #428	; (adr r3, 8017500 <atan+0x2d8>)
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	f7e8 ff98 	bl	800028c <__adddf3>
 801735c:	4632      	mov	r2, r6
 801735e:	463b      	mov	r3, r7
 8017360:	f7e9 f94a 	bl	80005f8 <__aeabi_dmul>
 8017364:	a368      	add	r3, pc, #416	; (adr r3, 8017508 <atan+0x2e0>)
 8017366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736a:	f7e8 ff8f 	bl	800028c <__adddf3>
 801736e:	4642      	mov	r2, r8
 8017370:	464b      	mov	r3, r9
 8017372:	f7e9 f941 	bl	80005f8 <__aeabi_dmul>
 8017376:	a366      	add	r3, pc, #408	; (adr r3, 8017510 <atan+0x2e8>)
 8017378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737c:	4680      	mov	r8, r0
 801737e:	4689      	mov	r9, r1
 8017380:	4630      	mov	r0, r6
 8017382:	4639      	mov	r1, r7
 8017384:	f7e9 f938 	bl	80005f8 <__aeabi_dmul>
 8017388:	a363      	add	r3, pc, #396	; (adr r3, 8017518 <atan+0x2f0>)
 801738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738e:	f7e8 ff7b 	bl	8000288 <__aeabi_dsub>
 8017392:	4632      	mov	r2, r6
 8017394:	463b      	mov	r3, r7
 8017396:	f7e9 f92f 	bl	80005f8 <__aeabi_dmul>
 801739a:	a361      	add	r3, pc, #388	; (adr r3, 8017520 <atan+0x2f8>)
 801739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a0:	f7e8 ff72 	bl	8000288 <__aeabi_dsub>
 80173a4:	4632      	mov	r2, r6
 80173a6:	463b      	mov	r3, r7
 80173a8:	f7e9 f926 	bl	80005f8 <__aeabi_dmul>
 80173ac:	a35e      	add	r3, pc, #376	; (adr r3, 8017528 <atan+0x300>)
 80173ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173b2:	f7e8 ff69 	bl	8000288 <__aeabi_dsub>
 80173b6:	4632      	mov	r2, r6
 80173b8:	463b      	mov	r3, r7
 80173ba:	f7e9 f91d 	bl	80005f8 <__aeabi_dmul>
 80173be:	a35c      	add	r3, pc, #368	; (adr r3, 8017530 <atan+0x308>)
 80173c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c4:	f7e8 ff60 	bl	8000288 <__aeabi_dsub>
 80173c8:	4632      	mov	r2, r6
 80173ca:	463b      	mov	r3, r7
 80173cc:	f7e9 f914 	bl	80005f8 <__aeabi_dmul>
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	4640      	mov	r0, r8
 80173d6:	4649      	mov	r1, r9
 80173d8:	f7e8 ff58 	bl	800028c <__adddf3>
 80173dc:	4622      	mov	r2, r4
 80173de:	462b      	mov	r3, r5
 80173e0:	f7e9 f90a 	bl	80005f8 <__aeabi_dmul>
 80173e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80173e8:	4602      	mov	r2, r0
 80173ea:	460b      	mov	r3, r1
 80173ec:	d14b      	bne.n	8017486 <atan+0x25e>
 80173ee:	4620      	mov	r0, r4
 80173f0:	4629      	mov	r1, r5
 80173f2:	f7e8 ff49 	bl	8000288 <__aeabi_dsub>
 80173f6:	e72c      	b.n	8017252 <atan+0x2a>
 80173f8:	ee10 0a10 	vmov	r0, s0
 80173fc:	4b53      	ldr	r3, [pc, #332]	; (801754c <atan+0x324>)
 80173fe:	2200      	movs	r2, #0
 8017400:	4629      	mov	r1, r5
 8017402:	f7e8 ff41 	bl	8000288 <__aeabi_dsub>
 8017406:	4b51      	ldr	r3, [pc, #324]	; (801754c <atan+0x324>)
 8017408:	4606      	mov	r6, r0
 801740a:	460f      	mov	r7, r1
 801740c:	2200      	movs	r2, #0
 801740e:	4620      	mov	r0, r4
 8017410:	4629      	mov	r1, r5
 8017412:	f7e8 ff3b 	bl	800028c <__adddf3>
 8017416:	4602      	mov	r2, r0
 8017418:	460b      	mov	r3, r1
 801741a:	4630      	mov	r0, r6
 801741c:	4639      	mov	r1, r7
 801741e:	f7e9 fa15 	bl	800084c <__aeabi_ddiv>
 8017422:	f04f 0a01 	mov.w	sl, #1
 8017426:	4604      	mov	r4, r0
 8017428:	460d      	mov	r5, r1
 801742a:	e764      	b.n	80172f6 <atan+0xce>
 801742c:	4b49      	ldr	r3, [pc, #292]	; (8017554 <atan+0x32c>)
 801742e:	429e      	cmp	r6, r3
 8017430:	da1d      	bge.n	801746e <atan+0x246>
 8017432:	ee10 0a10 	vmov	r0, s0
 8017436:	4b48      	ldr	r3, [pc, #288]	; (8017558 <atan+0x330>)
 8017438:	2200      	movs	r2, #0
 801743a:	4629      	mov	r1, r5
 801743c:	f7e8 ff24 	bl	8000288 <__aeabi_dsub>
 8017440:	4b45      	ldr	r3, [pc, #276]	; (8017558 <atan+0x330>)
 8017442:	4606      	mov	r6, r0
 8017444:	460f      	mov	r7, r1
 8017446:	2200      	movs	r2, #0
 8017448:	4620      	mov	r0, r4
 801744a:	4629      	mov	r1, r5
 801744c:	f7e9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8017450:	4b3e      	ldr	r3, [pc, #248]	; (801754c <atan+0x324>)
 8017452:	2200      	movs	r2, #0
 8017454:	f7e8 ff1a 	bl	800028c <__adddf3>
 8017458:	4602      	mov	r2, r0
 801745a:	460b      	mov	r3, r1
 801745c:	4630      	mov	r0, r6
 801745e:	4639      	mov	r1, r7
 8017460:	f7e9 f9f4 	bl	800084c <__aeabi_ddiv>
 8017464:	f04f 0a02 	mov.w	sl, #2
 8017468:	4604      	mov	r4, r0
 801746a:	460d      	mov	r5, r1
 801746c:	e743      	b.n	80172f6 <atan+0xce>
 801746e:	462b      	mov	r3, r5
 8017470:	ee10 2a10 	vmov	r2, s0
 8017474:	4939      	ldr	r1, [pc, #228]	; (801755c <atan+0x334>)
 8017476:	2000      	movs	r0, #0
 8017478:	f7e9 f9e8 	bl	800084c <__aeabi_ddiv>
 801747c:	f04f 0a03 	mov.w	sl, #3
 8017480:	4604      	mov	r4, r0
 8017482:	460d      	mov	r5, r1
 8017484:	e737      	b.n	80172f6 <atan+0xce>
 8017486:	4b36      	ldr	r3, [pc, #216]	; (8017560 <atan+0x338>)
 8017488:	4e36      	ldr	r6, [pc, #216]	; (8017564 <atan+0x33c>)
 801748a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801748e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8017492:	e9da 2300 	ldrd	r2, r3, [sl]
 8017496:	f7e8 fef7 	bl	8000288 <__aeabi_dsub>
 801749a:	4622      	mov	r2, r4
 801749c:	462b      	mov	r3, r5
 801749e:	f7e8 fef3 	bl	8000288 <__aeabi_dsub>
 80174a2:	4602      	mov	r2, r0
 80174a4:	460b      	mov	r3, r1
 80174a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80174aa:	f7e8 feed 	bl	8000288 <__aeabi_dsub>
 80174ae:	f1bb 0f00 	cmp.w	fp, #0
 80174b2:	4604      	mov	r4, r0
 80174b4:	460d      	mov	r5, r1
 80174b6:	f6bf aed6 	bge.w	8017266 <atan+0x3e>
 80174ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80174be:	461d      	mov	r5, r3
 80174c0:	e6d1      	b.n	8017266 <atan+0x3e>
 80174c2:	a51d      	add	r5, pc, #116	; (adr r5, 8017538 <atan+0x310>)
 80174c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80174c8:	e6cd      	b.n	8017266 <atan+0x3e>
 80174ca:	bf00      	nop
 80174cc:	f3af 8000 	nop.w
 80174d0:	54442d18 	.word	0x54442d18
 80174d4:	bff921fb 	.word	0xbff921fb
 80174d8:	8800759c 	.word	0x8800759c
 80174dc:	7e37e43c 	.word	0x7e37e43c
 80174e0:	e322da11 	.word	0xe322da11
 80174e4:	3f90ad3a 	.word	0x3f90ad3a
 80174e8:	24760deb 	.word	0x24760deb
 80174ec:	3fa97b4b 	.word	0x3fa97b4b
 80174f0:	a0d03d51 	.word	0xa0d03d51
 80174f4:	3fb10d66 	.word	0x3fb10d66
 80174f8:	c54c206e 	.word	0xc54c206e
 80174fc:	3fb745cd 	.word	0x3fb745cd
 8017500:	920083ff 	.word	0x920083ff
 8017504:	3fc24924 	.word	0x3fc24924
 8017508:	5555550d 	.word	0x5555550d
 801750c:	3fd55555 	.word	0x3fd55555
 8017510:	2c6a6c2f 	.word	0x2c6a6c2f
 8017514:	bfa2b444 	.word	0xbfa2b444
 8017518:	52defd9a 	.word	0x52defd9a
 801751c:	3fadde2d 	.word	0x3fadde2d
 8017520:	af749a6d 	.word	0xaf749a6d
 8017524:	3fb3b0f2 	.word	0x3fb3b0f2
 8017528:	fe231671 	.word	0xfe231671
 801752c:	3fbc71c6 	.word	0x3fbc71c6
 8017530:	9998ebc4 	.word	0x9998ebc4
 8017534:	3fc99999 	.word	0x3fc99999
 8017538:	54442d18 	.word	0x54442d18
 801753c:	3ff921fb 	.word	0x3ff921fb
 8017540:	440fffff 	.word	0x440fffff
 8017544:	7ff00000 	.word	0x7ff00000
 8017548:	3fdbffff 	.word	0x3fdbffff
 801754c:	3ff00000 	.word	0x3ff00000
 8017550:	3ff2ffff 	.word	0x3ff2ffff
 8017554:	40038000 	.word	0x40038000
 8017558:	3ff80000 	.word	0x3ff80000
 801755c:	bff00000 	.word	0xbff00000
 8017560:	0801ae48 	.word	0x0801ae48
 8017564:	0801ae28 	.word	0x0801ae28

08017568 <fabs>:
 8017568:	ec51 0b10 	vmov	r0, r1, d0
 801756c:	ee10 2a10 	vmov	r2, s0
 8017570:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017574:	ec43 2b10 	vmov	d0, r2, r3
 8017578:	4770      	bx	lr
	...

0801757c <atanf>:
 801757c:	b538      	push	{r3, r4, r5, lr}
 801757e:	ee10 5a10 	vmov	r5, s0
 8017582:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017586:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801758a:	eef0 7a40 	vmov.f32	s15, s0
 801758e:	db10      	blt.n	80175b2 <atanf+0x36>
 8017590:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017594:	dd04      	ble.n	80175a0 <atanf+0x24>
 8017596:	ee70 7a00 	vadd.f32	s15, s0, s0
 801759a:	eeb0 0a67 	vmov.f32	s0, s15
 801759e:	bd38      	pop	{r3, r4, r5, pc}
 80175a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80176d8 <atanf+0x15c>
 80175a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80176dc <atanf+0x160>
 80175a8:	2d00      	cmp	r5, #0
 80175aa:	bfd8      	it	le
 80175ac:	eef0 7a40 	vmovle.f32	s15, s0
 80175b0:	e7f3      	b.n	801759a <atanf+0x1e>
 80175b2:	4b4b      	ldr	r3, [pc, #300]	; (80176e0 <atanf+0x164>)
 80175b4:	429c      	cmp	r4, r3
 80175b6:	dc10      	bgt.n	80175da <atanf+0x5e>
 80175b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80175bc:	da0a      	bge.n	80175d4 <atanf+0x58>
 80175be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80176e4 <atanf+0x168>
 80175c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80175c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80175ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80175ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d2:	dce2      	bgt.n	801759a <atanf+0x1e>
 80175d4:	f04f 33ff 	mov.w	r3, #4294967295
 80175d8:	e013      	b.n	8017602 <atanf+0x86>
 80175da:	f000 f8a3 	bl	8017724 <fabsf>
 80175de:	4b42      	ldr	r3, [pc, #264]	; (80176e8 <atanf+0x16c>)
 80175e0:	429c      	cmp	r4, r3
 80175e2:	dc4f      	bgt.n	8017684 <atanf+0x108>
 80175e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80175e8:	429c      	cmp	r4, r3
 80175ea:	dc41      	bgt.n	8017670 <atanf+0xf4>
 80175ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80175f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80175f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80175f8:	2300      	movs	r3, #0
 80175fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80175fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017602:	1c5a      	adds	r2, r3, #1
 8017604:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017608:	eddf 5a38 	vldr	s11, [pc, #224]	; 80176ec <atanf+0x170>
 801760c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80176f0 <atanf+0x174>
 8017610:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80176f4 <atanf+0x178>
 8017614:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80176f8 <atanf+0x17c>
 8017618:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801761c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017620:	eddf 5a36 	vldr	s11, [pc, #216]	; 80176fc <atanf+0x180>
 8017624:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017628:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017700 <atanf+0x184>
 801762c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017630:	eddf 5a34 	vldr	s11, [pc, #208]	; 8017704 <atanf+0x188>
 8017634:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017638:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017708 <atanf+0x18c>
 801763c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017640:	eddf 5a32 	vldr	s11, [pc, #200]	; 801770c <atanf+0x190>
 8017644:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017648:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8017710 <atanf+0x194>
 801764c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017650:	eddf 5a30 	vldr	s11, [pc, #192]	; 8017714 <atanf+0x198>
 8017654:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017658:	eea5 0a87 	vfma.f32	s0, s11, s14
 801765c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017660:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017664:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017668:	d121      	bne.n	80176ae <atanf+0x132>
 801766a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801766e:	e794      	b.n	801759a <atanf+0x1e>
 8017670:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017674:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017678:	ee30 0a27 	vadd.f32	s0, s0, s15
 801767c:	2301      	movs	r3, #1
 801767e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017682:	e7be      	b.n	8017602 <atanf+0x86>
 8017684:	4b24      	ldr	r3, [pc, #144]	; (8017718 <atanf+0x19c>)
 8017686:	429c      	cmp	r4, r3
 8017688:	dc0b      	bgt.n	80176a2 <atanf+0x126>
 801768a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801768e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017692:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017696:	2302      	movs	r3, #2
 8017698:	ee70 6a67 	vsub.f32	s13, s0, s15
 801769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80176a0:	e7af      	b.n	8017602 <atanf+0x86>
 80176a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80176a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80176aa:	2303      	movs	r3, #3
 80176ac:	e7a9      	b.n	8017602 <atanf+0x86>
 80176ae:	4a1b      	ldr	r2, [pc, #108]	; (801771c <atanf+0x1a0>)
 80176b0:	491b      	ldr	r1, [pc, #108]	; (8017720 <atanf+0x1a4>)
 80176b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80176b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80176ba:	ed93 7a00 	vldr	s14, [r3]
 80176be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80176c2:	2d00      	cmp	r5, #0
 80176c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80176c8:	ed92 0a00 	vldr	s0, [r2]
 80176cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80176d0:	bfb8      	it	lt
 80176d2:	eef1 7a67 	vneglt.f32	s15, s15
 80176d6:	e760      	b.n	801759a <atanf+0x1e>
 80176d8:	3fc90fdb 	.word	0x3fc90fdb
 80176dc:	bfc90fdb 	.word	0xbfc90fdb
 80176e0:	3edfffff 	.word	0x3edfffff
 80176e4:	7149f2ca 	.word	0x7149f2ca
 80176e8:	3f97ffff 	.word	0x3f97ffff
 80176ec:	3c8569d7 	.word	0x3c8569d7
 80176f0:	3d4bda59 	.word	0x3d4bda59
 80176f4:	bd15a221 	.word	0xbd15a221
 80176f8:	be4ccccd 	.word	0xbe4ccccd
 80176fc:	3d886b35 	.word	0x3d886b35
 8017700:	3dba2e6e 	.word	0x3dba2e6e
 8017704:	3e124925 	.word	0x3e124925
 8017708:	3eaaaaab 	.word	0x3eaaaaab
 801770c:	bd6ef16b 	.word	0xbd6ef16b
 8017710:	bd9d8795 	.word	0xbd9d8795
 8017714:	bde38e38 	.word	0xbde38e38
 8017718:	401bffff 	.word	0x401bffff
 801771c:	0801ae68 	.word	0x0801ae68
 8017720:	0801ae78 	.word	0x0801ae78

08017724 <fabsf>:
 8017724:	ee10 3a10 	vmov	r3, s0
 8017728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801772c:	ee00 3a10 	vmov	s0, r3
 8017730:	4770      	bx	lr
	...

08017734 <floorf>:
 8017734:	ee10 3a10 	vmov	r3, s0
 8017738:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801773c:	3a7f      	subs	r2, #127	; 0x7f
 801773e:	2a16      	cmp	r2, #22
 8017740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017744:	dc2a      	bgt.n	801779c <floorf+0x68>
 8017746:	2a00      	cmp	r2, #0
 8017748:	da11      	bge.n	801776e <floorf+0x3a>
 801774a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80177ac <floorf+0x78>
 801774e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017752:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775a:	dd05      	ble.n	8017768 <floorf+0x34>
 801775c:	2b00      	cmp	r3, #0
 801775e:	da23      	bge.n	80177a8 <floorf+0x74>
 8017760:	4a13      	ldr	r2, [pc, #76]	; (80177b0 <floorf+0x7c>)
 8017762:	2900      	cmp	r1, #0
 8017764:	bf18      	it	ne
 8017766:	4613      	movne	r3, r2
 8017768:	ee00 3a10 	vmov	s0, r3
 801776c:	4770      	bx	lr
 801776e:	4911      	ldr	r1, [pc, #68]	; (80177b4 <floorf+0x80>)
 8017770:	4111      	asrs	r1, r2
 8017772:	420b      	tst	r3, r1
 8017774:	d0fa      	beq.n	801776c <floorf+0x38>
 8017776:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80177ac <floorf+0x78>
 801777a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801777e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017786:	ddef      	ble.n	8017768 <floorf+0x34>
 8017788:	2b00      	cmp	r3, #0
 801778a:	bfbe      	ittt	lt
 801778c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017790:	fa40 f202 	asrlt.w	r2, r0, r2
 8017794:	189b      	addlt	r3, r3, r2
 8017796:	ea23 0301 	bic.w	r3, r3, r1
 801779a:	e7e5      	b.n	8017768 <floorf+0x34>
 801779c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80177a0:	d3e4      	bcc.n	801776c <floorf+0x38>
 80177a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80177a6:	4770      	bx	lr
 80177a8:	2300      	movs	r3, #0
 80177aa:	e7dd      	b.n	8017768 <floorf+0x34>
 80177ac:	7149f2ca 	.word	0x7149f2ca
 80177b0:	bf800000 	.word	0xbf800000
 80177b4:	007fffff 	.word	0x007fffff

080177b8 <nanf>:
 80177b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80177c0 <nanf+0x8>
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	7fc00000 	.word	0x7fc00000

080177c4 <scalbnf>:
 80177c4:	ee10 3a10 	vmov	r3, s0
 80177c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80177cc:	d025      	beq.n	801781a <scalbnf+0x56>
 80177ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80177d2:	d302      	bcc.n	80177da <scalbnf+0x16>
 80177d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80177d8:	4770      	bx	lr
 80177da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80177de:	d122      	bne.n	8017826 <scalbnf+0x62>
 80177e0:	4b2a      	ldr	r3, [pc, #168]	; (801788c <scalbnf+0xc8>)
 80177e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017890 <scalbnf+0xcc>
 80177e6:	4298      	cmp	r0, r3
 80177e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80177ec:	db16      	blt.n	801781c <scalbnf+0x58>
 80177ee:	ee10 3a10 	vmov	r3, s0
 80177f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80177f6:	3a19      	subs	r2, #25
 80177f8:	4402      	add	r2, r0
 80177fa:	2afe      	cmp	r2, #254	; 0xfe
 80177fc:	dd15      	ble.n	801782a <scalbnf+0x66>
 80177fe:	ee10 3a10 	vmov	r3, s0
 8017802:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017894 <scalbnf+0xd0>
 8017806:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017898 <scalbnf+0xd4>
 801780a:	2b00      	cmp	r3, #0
 801780c:	eeb0 7a67 	vmov.f32	s14, s15
 8017810:	bfb8      	it	lt
 8017812:	eef0 7a66 	vmovlt.f32	s15, s13
 8017816:	ee27 0a27 	vmul.f32	s0, s14, s15
 801781a:	4770      	bx	lr
 801781c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801789c <scalbnf+0xd8>
 8017820:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017824:	4770      	bx	lr
 8017826:	0dd2      	lsrs	r2, r2, #23
 8017828:	e7e6      	b.n	80177f8 <scalbnf+0x34>
 801782a:	2a00      	cmp	r2, #0
 801782c:	dd06      	ble.n	801783c <scalbnf+0x78>
 801782e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017832:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017836:	ee00 3a10 	vmov	s0, r3
 801783a:	4770      	bx	lr
 801783c:	f112 0f16 	cmn.w	r2, #22
 8017840:	da1a      	bge.n	8017878 <scalbnf+0xb4>
 8017842:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017846:	4298      	cmp	r0, r3
 8017848:	ee10 3a10 	vmov	r3, s0
 801784c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017850:	dd0a      	ble.n	8017868 <scalbnf+0xa4>
 8017852:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017894 <scalbnf+0xd0>
 8017856:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017898 <scalbnf+0xd4>
 801785a:	eef0 7a40 	vmov.f32	s15, s0
 801785e:	2b00      	cmp	r3, #0
 8017860:	bf18      	it	ne
 8017862:	eeb0 0a47 	vmovne.f32	s0, s14
 8017866:	e7db      	b.n	8017820 <scalbnf+0x5c>
 8017868:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801789c <scalbnf+0xd8>
 801786c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80178a0 <scalbnf+0xdc>
 8017870:	eef0 7a40 	vmov.f32	s15, s0
 8017874:	2b00      	cmp	r3, #0
 8017876:	e7f3      	b.n	8017860 <scalbnf+0x9c>
 8017878:	3219      	adds	r2, #25
 801787a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801787e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017882:	eddf 7a08 	vldr	s15, [pc, #32]	; 80178a4 <scalbnf+0xe0>
 8017886:	ee07 3a10 	vmov	s14, r3
 801788a:	e7c4      	b.n	8017816 <scalbnf+0x52>
 801788c:	ffff3cb0 	.word	0xffff3cb0
 8017890:	4c000000 	.word	0x4c000000
 8017894:	7149f2ca 	.word	0x7149f2ca
 8017898:	f149f2ca 	.word	0xf149f2ca
 801789c:	0da24260 	.word	0x0da24260
 80178a0:	8da24260 	.word	0x8da24260
 80178a4:	33000000 	.word	0x33000000

080178a8 <abort>:
 80178a8:	b508      	push	{r3, lr}
 80178aa:	2006      	movs	r0, #6
 80178ac:	f000 fdd2 	bl	8018454 <raise>
 80178b0:	2001      	movs	r0, #1
 80178b2:	f7eb f881 	bl	80029b8 <_exit>
	...

080178b8 <__errno>:
 80178b8:	4b01      	ldr	r3, [pc, #4]	; (80178c0 <__errno+0x8>)
 80178ba:	6818      	ldr	r0, [r3, #0]
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop
 80178c0:	200000f0 	.word	0x200000f0

080178c4 <__libc_init_array>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	4d0d      	ldr	r5, [pc, #52]	; (80178fc <__libc_init_array+0x38>)
 80178c8:	4c0d      	ldr	r4, [pc, #52]	; (8017900 <__libc_init_array+0x3c>)
 80178ca:	1b64      	subs	r4, r4, r5
 80178cc:	10a4      	asrs	r4, r4, #2
 80178ce:	2600      	movs	r6, #0
 80178d0:	42a6      	cmp	r6, r4
 80178d2:	d109      	bne.n	80178e8 <__libc_init_array+0x24>
 80178d4:	4d0b      	ldr	r5, [pc, #44]	; (8017904 <__libc_init_array+0x40>)
 80178d6:	4c0c      	ldr	r4, [pc, #48]	; (8017908 <__libc_init_array+0x44>)
 80178d8:	f002 ff02 	bl	801a6e0 <_init>
 80178dc:	1b64      	subs	r4, r4, r5
 80178de:	10a4      	asrs	r4, r4, #2
 80178e0:	2600      	movs	r6, #0
 80178e2:	42a6      	cmp	r6, r4
 80178e4:	d105      	bne.n	80178f2 <__libc_init_array+0x2e>
 80178e6:	bd70      	pop	{r4, r5, r6, pc}
 80178e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80178ec:	4798      	blx	r3
 80178ee:	3601      	adds	r6, #1
 80178f0:	e7ee      	b.n	80178d0 <__libc_init_array+0xc>
 80178f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80178f6:	4798      	blx	r3
 80178f8:	3601      	adds	r6, #1
 80178fa:	e7f2      	b.n	80178e2 <__libc_init_array+0x1e>
 80178fc:	0801b274 	.word	0x0801b274
 8017900:	0801b274 	.word	0x0801b274
 8017904:	0801b274 	.word	0x0801b274
 8017908:	0801b278 	.word	0x0801b278

0801790c <malloc>:
 801790c:	4b02      	ldr	r3, [pc, #8]	; (8017918 <malloc+0xc>)
 801790e:	4601      	mov	r1, r0
 8017910:	6818      	ldr	r0, [r3, #0]
 8017912:	f000 b88b 	b.w	8017a2c <_malloc_r>
 8017916:	bf00      	nop
 8017918:	200000f0 	.word	0x200000f0

0801791c <free>:
 801791c:	4b02      	ldr	r3, [pc, #8]	; (8017928 <free+0xc>)
 801791e:	4601      	mov	r1, r0
 8017920:	6818      	ldr	r0, [r3, #0]
 8017922:	f000 b833 	b.w	801798c <_free_r>
 8017926:	bf00      	nop
 8017928:	200000f0 	.word	0x200000f0

0801792c <memcpy>:
 801792c:	440a      	add	r2, r1
 801792e:	4291      	cmp	r1, r2
 8017930:	f100 33ff 	add.w	r3, r0, #4294967295
 8017934:	d100      	bne.n	8017938 <memcpy+0xc>
 8017936:	4770      	bx	lr
 8017938:	b510      	push	{r4, lr}
 801793a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801793e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017942:	4291      	cmp	r1, r2
 8017944:	d1f9      	bne.n	801793a <memcpy+0xe>
 8017946:	bd10      	pop	{r4, pc}

08017948 <memmove>:
 8017948:	4288      	cmp	r0, r1
 801794a:	b510      	push	{r4, lr}
 801794c:	eb01 0402 	add.w	r4, r1, r2
 8017950:	d902      	bls.n	8017958 <memmove+0x10>
 8017952:	4284      	cmp	r4, r0
 8017954:	4623      	mov	r3, r4
 8017956:	d807      	bhi.n	8017968 <memmove+0x20>
 8017958:	1e43      	subs	r3, r0, #1
 801795a:	42a1      	cmp	r1, r4
 801795c:	d008      	beq.n	8017970 <memmove+0x28>
 801795e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017966:	e7f8      	b.n	801795a <memmove+0x12>
 8017968:	4402      	add	r2, r0
 801796a:	4601      	mov	r1, r0
 801796c:	428a      	cmp	r2, r1
 801796e:	d100      	bne.n	8017972 <memmove+0x2a>
 8017970:	bd10      	pop	{r4, pc}
 8017972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801797a:	e7f7      	b.n	801796c <memmove+0x24>

0801797c <memset>:
 801797c:	4402      	add	r2, r0
 801797e:	4603      	mov	r3, r0
 8017980:	4293      	cmp	r3, r2
 8017982:	d100      	bne.n	8017986 <memset+0xa>
 8017984:	4770      	bx	lr
 8017986:	f803 1b01 	strb.w	r1, [r3], #1
 801798a:	e7f9      	b.n	8017980 <memset+0x4>

0801798c <_free_r>:
 801798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801798e:	2900      	cmp	r1, #0
 8017990:	d048      	beq.n	8017a24 <_free_r+0x98>
 8017992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017996:	9001      	str	r0, [sp, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f1a1 0404 	sub.w	r4, r1, #4
 801799e:	bfb8      	it	lt
 80179a0:	18e4      	addlt	r4, r4, r3
 80179a2:	f001 fd3f 	bl	8019424 <__malloc_lock>
 80179a6:	4a20      	ldr	r2, [pc, #128]	; (8017a28 <_free_r+0x9c>)
 80179a8:	9801      	ldr	r0, [sp, #4]
 80179aa:	6813      	ldr	r3, [r2, #0]
 80179ac:	4615      	mov	r5, r2
 80179ae:	b933      	cbnz	r3, 80179be <_free_r+0x32>
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	6014      	str	r4, [r2, #0]
 80179b4:	b003      	add	sp, #12
 80179b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179ba:	f001 bd39 	b.w	8019430 <__malloc_unlock>
 80179be:	42a3      	cmp	r3, r4
 80179c0:	d90b      	bls.n	80179da <_free_r+0x4e>
 80179c2:	6821      	ldr	r1, [r4, #0]
 80179c4:	1862      	adds	r2, r4, r1
 80179c6:	4293      	cmp	r3, r2
 80179c8:	bf04      	itt	eq
 80179ca:	681a      	ldreq	r2, [r3, #0]
 80179cc:	685b      	ldreq	r3, [r3, #4]
 80179ce:	6063      	str	r3, [r4, #4]
 80179d0:	bf04      	itt	eq
 80179d2:	1852      	addeq	r2, r2, r1
 80179d4:	6022      	streq	r2, [r4, #0]
 80179d6:	602c      	str	r4, [r5, #0]
 80179d8:	e7ec      	b.n	80179b4 <_free_r+0x28>
 80179da:	461a      	mov	r2, r3
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	b10b      	cbz	r3, 80179e4 <_free_r+0x58>
 80179e0:	42a3      	cmp	r3, r4
 80179e2:	d9fa      	bls.n	80179da <_free_r+0x4e>
 80179e4:	6811      	ldr	r1, [r2, #0]
 80179e6:	1855      	adds	r5, r2, r1
 80179e8:	42a5      	cmp	r5, r4
 80179ea:	d10b      	bne.n	8017a04 <_free_r+0x78>
 80179ec:	6824      	ldr	r4, [r4, #0]
 80179ee:	4421      	add	r1, r4
 80179f0:	1854      	adds	r4, r2, r1
 80179f2:	42a3      	cmp	r3, r4
 80179f4:	6011      	str	r1, [r2, #0]
 80179f6:	d1dd      	bne.n	80179b4 <_free_r+0x28>
 80179f8:	681c      	ldr	r4, [r3, #0]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	6053      	str	r3, [r2, #4]
 80179fe:	4421      	add	r1, r4
 8017a00:	6011      	str	r1, [r2, #0]
 8017a02:	e7d7      	b.n	80179b4 <_free_r+0x28>
 8017a04:	d902      	bls.n	8017a0c <_free_r+0x80>
 8017a06:	230c      	movs	r3, #12
 8017a08:	6003      	str	r3, [r0, #0]
 8017a0a:	e7d3      	b.n	80179b4 <_free_r+0x28>
 8017a0c:	6825      	ldr	r5, [r4, #0]
 8017a0e:	1961      	adds	r1, r4, r5
 8017a10:	428b      	cmp	r3, r1
 8017a12:	bf04      	itt	eq
 8017a14:	6819      	ldreq	r1, [r3, #0]
 8017a16:	685b      	ldreq	r3, [r3, #4]
 8017a18:	6063      	str	r3, [r4, #4]
 8017a1a:	bf04      	itt	eq
 8017a1c:	1949      	addeq	r1, r1, r5
 8017a1e:	6021      	streq	r1, [r4, #0]
 8017a20:	6054      	str	r4, [r2, #4]
 8017a22:	e7c7      	b.n	80179b4 <_free_r+0x28>
 8017a24:	b003      	add	sp, #12
 8017a26:	bd30      	pop	{r4, r5, pc}
 8017a28:	200011b8 	.word	0x200011b8

08017a2c <_malloc_r>:
 8017a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a2e:	1ccd      	adds	r5, r1, #3
 8017a30:	f025 0503 	bic.w	r5, r5, #3
 8017a34:	3508      	adds	r5, #8
 8017a36:	2d0c      	cmp	r5, #12
 8017a38:	bf38      	it	cc
 8017a3a:	250c      	movcc	r5, #12
 8017a3c:	2d00      	cmp	r5, #0
 8017a3e:	4606      	mov	r6, r0
 8017a40:	db01      	blt.n	8017a46 <_malloc_r+0x1a>
 8017a42:	42a9      	cmp	r1, r5
 8017a44:	d903      	bls.n	8017a4e <_malloc_r+0x22>
 8017a46:	230c      	movs	r3, #12
 8017a48:	6033      	str	r3, [r6, #0]
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a4e:	f001 fce9 	bl	8019424 <__malloc_lock>
 8017a52:	4921      	ldr	r1, [pc, #132]	; (8017ad8 <_malloc_r+0xac>)
 8017a54:	680a      	ldr	r2, [r1, #0]
 8017a56:	4614      	mov	r4, r2
 8017a58:	b99c      	cbnz	r4, 8017a82 <_malloc_r+0x56>
 8017a5a:	4f20      	ldr	r7, [pc, #128]	; (8017adc <_malloc_r+0xb0>)
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	b923      	cbnz	r3, 8017a6a <_malloc_r+0x3e>
 8017a60:	4621      	mov	r1, r4
 8017a62:	4630      	mov	r0, r6
 8017a64:	f000 fcbe 	bl	80183e4 <_sbrk_r>
 8017a68:	6038      	str	r0, [r7, #0]
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	f000 fcb9 	bl	80183e4 <_sbrk_r>
 8017a72:	1c43      	adds	r3, r0, #1
 8017a74:	d123      	bne.n	8017abe <_malloc_r+0x92>
 8017a76:	230c      	movs	r3, #12
 8017a78:	6033      	str	r3, [r6, #0]
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f001 fcd8 	bl	8019430 <__malloc_unlock>
 8017a80:	e7e3      	b.n	8017a4a <_malloc_r+0x1e>
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	1b5b      	subs	r3, r3, r5
 8017a86:	d417      	bmi.n	8017ab8 <_malloc_r+0x8c>
 8017a88:	2b0b      	cmp	r3, #11
 8017a8a:	d903      	bls.n	8017a94 <_malloc_r+0x68>
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	441c      	add	r4, r3
 8017a90:	6025      	str	r5, [r4, #0]
 8017a92:	e004      	b.n	8017a9e <_malloc_r+0x72>
 8017a94:	6863      	ldr	r3, [r4, #4]
 8017a96:	42a2      	cmp	r2, r4
 8017a98:	bf0c      	ite	eq
 8017a9a:	600b      	streq	r3, [r1, #0]
 8017a9c:	6053      	strne	r3, [r2, #4]
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	f001 fcc6 	bl	8019430 <__malloc_unlock>
 8017aa4:	f104 000b 	add.w	r0, r4, #11
 8017aa8:	1d23      	adds	r3, r4, #4
 8017aaa:	f020 0007 	bic.w	r0, r0, #7
 8017aae:	1ac2      	subs	r2, r0, r3
 8017ab0:	d0cc      	beq.n	8017a4c <_malloc_r+0x20>
 8017ab2:	1a1b      	subs	r3, r3, r0
 8017ab4:	50a3      	str	r3, [r4, r2]
 8017ab6:	e7c9      	b.n	8017a4c <_malloc_r+0x20>
 8017ab8:	4622      	mov	r2, r4
 8017aba:	6864      	ldr	r4, [r4, #4]
 8017abc:	e7cc      	b.n	8017a58 <_malloc_r+0x2c>
 8017abe:	1cc4      	adds	r4, r0, #3
 8017ac0:	f024 0403 	bic.w	r4, r4, #3
 8017ac4:	42a0      	cmp	r0, r4
 8017ac6:	d0e3      	beq.n	8017a90 <_malloc_r+0x64>
 8017ac8:	1a21      	subs	r1, r4, r0
 8017aca:	4630      	mov	r0, r6
 8017acc:	f000 fc8a 	bl	80183e4 <_sbrk_r>
 8017ad0:	3001      	adds	r0, #1
 8017ad2:	d1dd      	bne.n	8017a90 <_malloc_r+0x64>
 8017ad4:	e7cf      	b.n	8017a76 <_malloc_r+0x4a>
 8017ad6:	bf00      	nop
 8017ad8:	200011b8 	.word	0x200011b8
 8017adc:	200011bc 	.word	0x200011bc

08017ae0 <__cvt>:
 8017ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ae4:	ec55 4b10 	vmov	r4, r5, d0
 8017ae8:	2d00      	cmp	r5, #0
 8017aea:	460e      	mov	r6, r1
 8017aec:	4619      	mov	r1, r3
 8017aee:	462b      	mov	r3, r5
 8017af0:	bfbb      	ittet	lt
 8017af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017af6:	461d      	movlt	r5, r3
 8017af8:	2300      	movge	r3, #0
 8017afa:	232d      	movlt	r3, #45	; 0x2d
 8017afc:	700b      	strb	r3, [r1, #0]
 8017afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017b04:	4691      	mov	r9, r2
 8017b06:	f023 0820 	bic.w	r8, r3, #32
 8017b0a:	bfbc      	itt	lt
 8017b0c:	4622      	movlt	r2, r4
 8017b0e:	4614      	movlt	r4, r2
 8017b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017b14:	d005      	beq.n	8017b22 <__cvt+0x42>
 8017b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017b1a:	d100      	bne.n	8017b1e <__cvt+0x3e>
 8017b1c:	3601      	adds	r6, #1
 8017b1e:	2102      	movs	r1, #2
 8017b20:	e000      	b.n	8017b24 <__cvt+0x44>
 8017b22:	2103      	movs	r1, #3
 8017b24:	ab03      	add	r3, sp, #12
 8017b26:	9301      	str	r3, [sp, #4]
 8017b28:	ab02      	add	r3, sp, #8
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	ec45 4b10 	vmov	d0, r4, r5
 8017b30:	4653      	mov	r3, sl
 8017b32:	4632      	mov	r2, r6
 8017b34:	f000 fd8c 	bl	8018650 <_dtoa_r>
 8017b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017b3c:	4607      	mov	r7, r0
 8017b3e:	d102      	bne.n	8017b46 <__cvt+0x66>
 8017b40:	f019 0f01 	tst.w	r9, #1
 8017b44:	d022      	beq.n	8017b8c <__cvt+0xac>
 8017b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017b4a:	eb07 0906 	add.w	r9, r7, r6
 8017b4e:	d110      	bne.n	8017b72 <__cvt+0x92>
 8017b50:	783b      	ldrb	r3, [r7, #0]
 8017b52:	2b30      	cmp	r3, #48	; 0x30
 8017b54:	d10a      	bne.n	8017b6c <__cvt+0x8c>
 8017b56:	2200      	movs	r2, #0
 8017b58:	2300      	movs	r3, #0
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	4629      	mov	r1, r5
 8017b5e:	f7e8 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b62:	b918      	cbnz	r0, 8017b6c <__cvt+0x8c>
 8017b64:	f1c6 0601 	rsb	r6, r6, #1
 8017b68:	f8ca 6000 	str.w	r6, [sl]
 8017b6c:	f8da 3000 	ldr.w	r3, [sl]
 8017b70:	4499      	add	r9, r3
 8017b72:	2200      	movs	r2, #0
 8017b74:	2300      	movs	r3, #0
 8017b76:	4620      	mov	r0, r4
 8017b78:	4629      	mov	r1, r5
 8017b7a:	f7e8 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b7e:	b108      	cbz	r0, 8017b84 <__cvt+0xa4>
 8017b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8017b84:	2230      	movs	r2, #48	; 0x30
 8017b86:	9b03      	ldr	r3, [sp, #12]
 8017b88:	454b      	cmp	r3, r9
 8017b8a:	d307      	bcc.n	8017b9c <__cvt+0xbc>
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b90:	1bdb      	subs	r3, r3, r7
 8017b92:	4638      	mov	r0, r7
 8017b94:	6013      	str	r3, [r2, #0]
 8017b96:	b004      	add	sp, #16
 8017b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b9c:	1c59      	adds	r1, r3, #1
 8017b9e:	9103      	str	r1, [sp, #12]
 8017ba0:	701a      	strb	r2, [r3, #0]
 8017ba2:	e7f0      	b.n	8017b86 <__cvt+0xa6>

08017ba4 <__exponent>:
 8017ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2900      	cmp	r1, #0
 8017baa:	bfb8      	it	lt
 8017bac:	4249      	neglt	r1, r1
 8017bae:	f803 2b02 	strb.w	r2, [r3], #2
 8017bb2:	bfb4      	ite	lt
 8017bb4:	222d      	movlt	r2, #45	; 0x2d
 8017bb6:	222b      	movge	r2, #43	; 0x2b
 8017bb8:	2909      	cmp	r1, #9
 8017bba:	7042      	strb	r2, [r0, #1]
 8017bbc:	dd2a      	ble.n	8017c14 <__exponent+0x70>
 8017bbe:	f10d 0407 	add.w	r4, sp, #7
 8017bc2:	46a4      	mov	ip, r4
 8017bc4:	270a      	movs	r7, #10
 8017bc6:	46a6      	mov	lr, r4
 8017bc8:	460a      	mov	r2, r1
 8017bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8017bce:	fb07 1516 	mls	r5, r7, r6, r1
 8017bd2:	3530      	adds	r5, #48	; 0x30
 8017bd4:	2a63      	cmp	r2, #99	; 0x63
 8017bd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8017bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017bde:	4631      	mov	r1, r6
 8017be0:	dcf1      	bgt.n	8017bc6 <__exponent+0x22>
 8017be2:	3130      	adds	r1, #48	; 0x30
 8017be4:	f1ae 0502 	sub.w	r5, lr, #2
 8017be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017bec:	1c44      	adds	r4, r0, #1
 8017bee:	4629      	mov	r1, r5
 8017bf0:	4561      	cmp	r1, ip
 8017bf2:	d30a      	bcc.n	8017c0a <__exponent+0x66>
 8017bf4:	f10d 0209 	add.w	r2, sp, #9
 8017bf8:	eba2 020e 	sub.w	r2, r2, lr
 8017bfc:	4565      	cmp	r5, ip
 8017bfe:	bf88      	it	hi
 8017c00:	2200      	movhi	r2, #0
 8017c02:	4413      	add	r3, r2
 8017c04:	1a18      	subs	r0, r3, r0
 8017c06:	b003      	add	sp, #12
 8017c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017c12:	e7ed      	b.n	8017bf0 <__exponent+0x4c>
 8017c14:	2330      	movs	r3, #48	; 0x30
 8017c16:	3130      	adds	r1, #48	; 0x30
 8017c18:	7083      	strb	r3, [r0, #2]
 8017c1a:	70c1      	strb	r1, [r0, #3]
 8017c1c:	1d03      	adds	r3, r0, #4
 8017c1e:	e7f1      	b.n	8017c04 <__exponent+0x60>

08017c20 <_printf_float>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	ed2d 8b02 	vpush	{d8}
 8017c28:	b08d      	sub	sp, #52	; 0x34
 8017c2a:	460c      	mov	r4, r1
 8017c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017c30:	4616      	mov	r6, r2
 8017c32:	461f      	mov	r7, r3
 8017c34:	4605      	mov	r5, r0
 8017c36:	f001 fbed 	bl	8019414 <_localeconv_r>
 8017c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8017c3e:	4650      	mov	r0, sl
 8017c40:	f7e8 fb16 	bl	8000270 <strlen>
 8017c44:	2300      	movs	r3, #0
 8017c46:	930a      	str	r3, [sp, #40]	; 0x28
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	9305      	str	r3, [sp, #20]
 8017c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8017c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017c54:	3307      	adds	r3, #7
 8017c56:	f023 0307 	bic.w	r3, r3, #7
 8017c5a:	f103 0208 	add.w	r2, r3, #8
 8017c5e:	f8c8 2000 	str.w	r2, [r8]
 8017c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017c72:	9307      	str	r3, [sp, #28]
 8017c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8017c78:	ee08 0a10 	vmov	s16, r0
 8017c7c:	4b9f      	ldr	r3, [pc, #636]	; (8017efc <_printf_float+0x2dc>)
 8017c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c82:	f04f 32ff 	mov.w	r2, #4294967295
 8017c86:	f7e8 ff51 	bl	8000b2c <__aeabi_dcmpun>
 8017c8a:	bb88      	cbnz	r0, 8017cf0 <_printf_float+0xd0>
 8017c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c90:	4b9a      	ldr	r3, [pc, #616]	; (8017efc <_printf_float+0x2dc>)
 8017c92:	f04f 32ff 	mov.w	r2, #4294967295
 8017c96:	f7e8 ff2b 	bl	8000af0 <__aeabi_dcmple>
 8017c9a:	bb48      	cbnz	r0, 8017cf0 <_printf_float+0xd0>
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	4640      	mov	r0, r8
 8017ca2:	4649      	mov	r1, r9
 8017ca4:	f7e8 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8017ca8:	b110      	cbz	r0, 8017cb0 <_printf_float+0x90>
 8017caa:	232d      	movs	r3, #45	; 0x2d
 8017cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cb0:	4b93      	ldr	r3, [pc, #588]	; (8017f00 <_printf_float+0x2e0>)
 8017cb2:	4894      	ldr	r0, [pc, #592]	; (8017f04 <_printf_float+0x2e4>)
 8017cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017cb8:	bf94      	ite	ls
 8017cba:	4698      	movls	r8, r3
 8017cbc:	4680      	movhi	r8, r0
 8017cbe:	2303      	movs	r3, #3
 8017cc0:	6123      	str	r3, [r4, #16]
 8017cc2:	9b05      	ldr	r3, [sp, #20]
 8017cc4:	f023 0204 	bic.w	r2, r3, #4
 8017cc8:	6022      	str	r2, [r4, #0]
 8017cca:	f04f 0900 	mov.w	r9, #0
 8017cce:	9700      	str	r7, [sp, #0]
 8017cd0:	4633      	mov	r3, r6
 8017cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	f000 f9d8 	bl	801808c <_printf_common>
 8017cdc:	3001      	adds	r0, #1
 8017cde:	f040 8090 	bne.w	8017e02 <_printf_float+0x1e2>
 8017ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce6:	b00d      	add	sp, #52	; 0x34
 8017ce8:	ecbd 8b02 	vpop	{d8}
 8017cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf0:	4642      	mov	r2, r8
 8017cf2:	464b      	mov	r3, r9
 8017cf4:	4640      	mov	r0, r8
 8017cf6:	4649      	mov	r1, r9
 8017cf8:	f7e8 ff18 	bl	8000b2c <__aeabi_dcmpun>
 8017cfc:	b140      	cbz	r0, 8017d10 <_printf_float+0xf0>
 8017cfe:	464b      	mov	r3, r9
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	bfbc      	itt	lt
 8017d04:	232d      	movlt	r3, #45	; 0x2d
 8017d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017d0a:	487f      	ldr	r0, [pc, #508]	; (8017f08 <_printf_float+0x2e8>)
 8017d0c:	4b7f      	ldr	r3, [pc, #508]	; (8017f0c <_printf_float+0x2ec>)
 8017d0e:	e7d1      	b.n	8017cb4 <_printf_float+0x94>
 8017d10:	6863      	ldr	r3, [r4, #4]
 8017d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017d16:	9206      	str	r2, [sp, #24]
 8017d18:	1c5a      	adds	r2, r3, #1
 8017d1a:	d13f      	bne.n	8017d9c <_printf_float+0x17c>
 8017d1c:	2306      	movs	r3, #6
 8017d1e:	6063      	str	r3, [r4, #4]
 8017d20:	9b05      	ldr	r3, [sp, #20]
 8017d22:	6861      	ldr	r1, [r4, #4]
 8017d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017d28:	2300      	movs	r3, #0
 8017d2a:	9303      	str	r3, [sp, #12]
 8017d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8017d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017d32:	ab09      	add	r3, sp, #36	; 0x24
 8017d34:	ec49 8b10 	vmov	d0, r8, r9
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	6022      	str	r2, [r4, #0]
 8017d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017d40:	4628      	mov	r0, r5
 8017d42:	f7ff fecd 	bl	8017ae0 <__cvt>
 8017d46:	9b06      	ldr	r3, [sp, #24]
 8017d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d4a:	2b47      	cmp	r3, #71	; 0x47
 8017d4c:	4680      	mov	r8, r0
 8017d4e:	d108      	bne.n	8017d62 <_printf_float+0x142>
 8017d50:	1cc8      	adds	r0, r1, #3
 8017d52:	db02      	blt.n	8017d5a <_printf_float+0x13a>
 8017d54:	6863      	ldr	r3, [r4, #4]
 8017d56:	4299      	cmp	r1, r3
 8017d58:	dd41      	ble.n	8017dde <_printf_float+0x1be>
 8017d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8017d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8017d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017d66:	d820      	bhi.n	8017daa <_printf_float+0x18a>
 8017d68:	3901      	subs	r1, #1
 8017d6a:	465a      	mov	r2, fp
 8017d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017d70:	9109      	str	r1, [sp, #36]	; 0x24
 8017d72:	f7ff ff17 	bl	8017ba4 <__exponent>
 8017d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d78:	1813      	adds	r3, r2, r0
 8017d7a:	2a01      	cmp	r2, #1
 8017d7c:	4681      	mov	r9, r0
 8017d7e:	6123      	str	r3, [r4, #16]
 8017d80:	dc02      	bgt.n	8017d88 <_printf_float+0x168>
 8017d82:	6822      	ldr	r2, [r4, #0]
 8017d84:	07d2      	lsls	r2, r2, #31
 8017d86:	d501      	bpl.n	8017d8c <_printf_float+0x16c>
 8017d88:	3301      	adds	r3, #1
 8017d8a:	6123      	str	r3, [r4, #16]
 8017d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d09c      	beq.n	8017cce <_printf_float+0xae>
 8017d94:	232d      	movs	r3, #45	; 0x2d
 8017d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d9a:	e798      	b.n	8017cce <_printf_float+0xae>
 8017d9c:	9a06      	ldr	r2, [sp, #24]
 8017d9e:	2a47      	cmp	r2, #71	; 0x47
 8017da0:	d1be      	bne.n	8017d20 <_printf_float+0x100>
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1bc      	bne.n	8017d20 <_printf_float+0x100>
 8017da6:	2301      	movs	r3, #1
 8017da8:	e7b9      	b.n	8017d1e <_printf_float+0xfe>
 8017daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017dae:	d118      	bne.n	8017de2 <_printf_float+0x1c2>
 8017db0:	2900      	cmp	r1, #0
 8017db2:	6863      	ldr	r3, [r4, #4]
 8017db4:	dd0b      	ble.n	8017dce <_printf_float+0x1ae>
 8017db6:	6121      	str	r1, [r4, #16]
 8017db8:	b913      	cbnz	r3, 8017dc0 <_printf_float+0x1a0>
 8017dba:	6822      	ldr	r2, [r4, #0]
 8017dbc:	07d0      	lsls	r0, r2, #31
 8017dbe:	d502      	bpl.n	8017dc6 <_printf_float+0x1a6>
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	440b      	add	r3, r1
 8017dc4:	6123      	str	r3, [r4, #16]
 8017dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8017dc8:	f04f 0900 	mov.w	r9, #0
 8017dcc:	e7de      	b.n	8017d8c <_printf_float+0x16c>
 8017dce:	b913      	cbnz	r3, 8017dd6 <_printf_float+0x1b6>
 8017dd0:	6822      	ldr	r2, [r4, #0]
 8017dd2:	07d2      	lsls	r2, r2, #31
 8017dd4:	d501      	bpl.n	8017dda <_printf_float+0x1ba>
 8017dd6:	3302      	adds	r3, #2
 8017dd8:	e7f4      	b.n	8017dc4 <_printf_float+0x1a4>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	e7f2      	b.n	8017dc4 <_printf_float+0x1a4>
 8017dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de4:	4299      	cmp	r1, r3
 8017de6:	db05      	blt.n	8017df4 <_printf_float+0x1d4>
 8017de8:	6823      	ldr	r3, [r4, #0]
 8017dea:	6121      	str	r1, [r4, #16]
 8017dec:	07d8      	lsls	r0, r3, #31
 8017dee:	d5ea      	bpl.n	8017dc6 <_printf_float+0x1a6>
 8017df0:	1c4b      	adds	r3, r1, #1
 8017df2:	e7e7      	b.n	8017dc4 <_printf_float+0x1a4>
 8017df4:	2900      	cmp	r1, #0
 8017df6:	bfd4      	ite	le
 8017df8:	f1c1 0202 	rsble	r2, r1, #2
 8017dfc:	2201      	movgt	r2, #1
 8017dfe:	4413      	add	r3, r2
 8017e00:	e7e0      	b.n	8017dc4 <_printf_float+0x1a4>
 8017e02:	6823      	ldr	r3, [r4, #0]
 8017e04:	055a      	lsls	r2, r3, #21
 8017e06:	d407      	bmi.n	8017e18 <_printf_float+0x1f8>
 8017e08:	6923      	ldr	r3, [r4, #16]
 8017e0a:	4642      	mov	r2, r8
 8017e0c:	4631      	mov	r1, r6
 8017e0e:	4628      	mov	r0, r5
 8017e10:	47b8      	blx	r7
 8017e12:	3001      	adds	r0, #1
 8017e14:	d12c      	bne.n	8017e70 <_printf_float+0x250>
 8017e16:	e764      	b.n	8017ce2 <_printf_float+0xc2>
 8017e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017e1c:	f240 80e0 	bls.w	8017fe0 <_printf_float+0x3c0>
 8017e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e24:	2200      	movs	r2, #0
 8017e26:	2300      	movs	r3, #0
 8017e28:	f7e8 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d034      	beq.n	8017e9a <_printf_float+0x27a>
 8017e30:	4a37      	ldr	r2, [pc, #220]	; (8017f10 <_printf_float+0x2f0>)
 8017e32:	2301      	movs	r3, #1
 8017e34:	4631      	mov	r1, r6
 8017e36:	4628      	mov	r0, r5
 8017e38:	47b8      	blx	r7
 8017e3a:	3001      	adds	r0, #1
 8017e3c:	f43f af51 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e44:	429a      	cmp	r2, r3
 8017e46:	db02      	blt.n	8017e4e <_printf_float+0x22e>
 8017e48:	6823      	ldr	r3, [r4, #0]
 8017e4a:	07d8      	lsls	r0, r3, #31
 8017e4c:	d510      	bpl.n	8017e70 <_printf_float+0x250>
 8017e4e:	ee18 3a10 	vmov	r3, s16
 8017e52:	4652      	mov	r2, sl
 8017e54:	4631      	mov	r1, r6
 8017e56:	4628      	mov	r0, r5
 8017e58:	47b8      	blx	r7
 8017e5a:	3001      	adds	r0, #1
 8017e5c:	f43f af41 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e60:	f04f 0800 	mov.w	r8, #0
 8017e64:	f104 091a 	add.w	r9, r4, #26
 8017e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e6a:	3b01      	subs	r3, #1
 8017e6c:	4543      	cmp	r3, r8
 8017e6e:	dc09      	bgt.n	8017e84 <_printf_float+0x264>
 8017e70:	6823      	ldr	r3, [r4, #0]
 8017e72:	079b      	lsls	r3, r3, #30
 8017e74:	f100 8105 	bmi.w	8018082 <_printf_float+0x462>
 8017e78:	68e0      	ldr	r0, [r4, #12]
 8017e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7c:	4298      	cmp	r0, r3
 8017e7e:	bfb8      	it	lt
 8017e80:	4618      	movlt	r0, r3
 8017e82:	e730      	b.n	8017ce6 <_printf_float+0xc6>
 8017e84:	2301      	movs	r3, #1
 8017e86:	464a      	mov	r2, r9
 8017e88:	4631      	mov	r1, r6
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	47b8      	blx	r7
 8017e8e:	3001      	adds	r0, #1
 8017e90:	f43f af27 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e94:	f108 0801 	add.w	r8, r8, #1
 8017e98:	e7e6      	b.n	8017e68 <_printf_float+0x248>
 8017e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	dc39      	bgt.n	8017f14 <_printf_float+0x2f4>
 8017ea0:	4a1b      	ldr	r2, [pc, #108]	; (8017f10 <_printf_float+0x2f0>)
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	4631      	mov	r1, r6
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	47b8      	blx	r7
 8017eaa:	3001      	adds	r0, #1
 8017eac:	f43f af19 	beq.w	8017ce2 <_printf_float+0xc2>
 8017eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	d102      	bne.n	8017ebe <_printf_float+0x29e>
 8017eb8:	6823      	ldr	r3, [r4, #0]
 8017eba:	07d9      	lsls	r1, r3, #31
 8017ebc:	d5d8      	bpl.n	8017e70 <_printf_float+0x250>
 8017ebe:	ee18 3a10 	vmov	r3, s16
 8017ec2:	4652      	mov	r2, sl
 8017ec4:	4631      	mov	r1, r6
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	47b8      	blx	r7
 8017eca:	3001      	adds	r0, #1
 8017ecc:	f43f af09 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ed0:	f04f 0900 	mov.w	r9, #0
 8017ed4:	f104 0a1a 	add.w	sl, r4, #26
 8017ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eda:	425b      	negs	r3, r3
 8017edc:	454b      	cmp	r3, r9
 8017ede:	dc01      	bgt.n	8017ee4 <_printf_float+0x2c4>
 8017ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ee2:	e792      	b.n	8017e0a <_printf_float+0x1ea>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	4652      	mov	r2, sl
 8017ee8:	4631      	mov	r1, r6
 8017eea:	4628      	mov	r0, r5
 8017eec:	47b8      	blx	r7
 8017eee:	3001      	adds	r0, #1
 8017ef0:	f43f aef7 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ef4:	f109 0901 	add.w	r9, r9, #1
 8017ef8:	e7ee      	b.n	8017ed8 <_printf_float+0x2b8>
 8017efa:	bf00      	nop
 8017efc:	7fefffff 	.word	0x7fefffff
 8017f00:	0801ae8c 	.word	0x0801ae8c
 8017f04:	0801ae90 	.word	0x0801ae90
 8017f08:	0801ae98 	.word	0x0801ae98
 8017f0c:	0801ae94 	.word	0x0801ae94
 8017f10:	0801ae9c 	.word	0x0801ae9c
 8017f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	bfa8      	it	ge
 8017f1c:	461a      	movge	r2, r3
 8017f1e:	2a00      	cmp	r2, #0
 8017f20:	4691      	mov	r9, r2
 8017f22:	dc37      	bgt.n	8017f94 <_printf_float+0x374>
 8017f24:	f04f 0b00 	mov.w	fp, #0
 8017f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f2c:	f104 021a 	add.w	r2, r4, #26
 8017f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f32:	9305      	str	r3, [sp, #20]
 8017f34:	eba3 0309 	sub.w	r3, r3, r9
 8017f38:	455b      	cmp	r3, fp
 8017f3a:	dc33      	bgt.n	8017fa4 <_printf_float+0x384>
 8017f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f40:	429a      	cmp	r2, r3
 8017f42:	db3b      	blt.n	8017fbc <_printf_float+0x39c>
 8017f44:	6823      	ldr	r3, [r4, #0]
 8017f46:	07da      	lsls	r2, r3, #31
 8017f48:	d438      	bmi.n	8017fbc <_printf_float+0x39c>
 8017f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f4c:	9b05      	ldr	r3, [sp, #20]
 8017f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f50:	1ad3      	subs	r3, r2, r3
 8017f52:	eba2 0901 	sub.w	r9, r2, r1
 8017f56:	4599      	cmp	r9, r3
 8017f58:	bfa8      	it	ge
 8017f5a:	4699      	movge	r9, r3
 8017f5c:	f1b9 0f00 	cmp.w	r9, #0
 8017f60:	dc35      	bgt.n	8017fce <_printf_float+0x3ae>
 8017f62:	f04f 0800 	mov.w	r8, #0
 8017f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f6a:	f104 0a1a 	add.w	sl, r4, #26
 8017f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f72:	1a9b      	subs	r3, r3, r2
 8017f74:	eba3 0309 	sub.w	r3, r3, r9
 8017f78:	4543      	cmp	r3, r8
 8017f7a:	f77f af79 	ble.w	8017e70 <_printf_float+0x250>
 8017f7e:	2301      	movs	r3, #1
 8017f80:	4652      	mov	r2, sl
 8017f82:	4631      	mov	r1, r6
 8017f84:	4628      	mov	r0, r5
 8017f86:	47b8      	blx	r7
 8017f88:	3001      	adds	r0, #1
 8017f8a:	f43f aeaa 	beq.w	8017ce2 <_printf_float+0xc2>
 8017f8e:	f108 0801 	add.w	r8, r8, #1
 8017f92:	e7ec      	b.n	8017f6e <_printf_float+0x34e>
 8017f94:	4613      	mov	r3, r2
 8017f96:	4631      	mov	r1, r6
 8017f98:	4642      	mov	r2, r8
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	47b8      	blx	r7
 8017f9e:	3001      	adds	r0, #1
 8017fa0:	d1c0      	bne.n	8017f24 <_printf_float+0x304>
 8017fa2:	e69e      	b.n	8017ce2 <_printf_float+0xc2>
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	4631      	mov	r1, r6
 8017fa8:	4628      	mov	r0, r5
 8017faa:	9205      	str	r2, [sp, #20]
 8017fac:	47b8      	blx	r7
 8017fae:	3001      	adds	r0, #1
 8017fb0:	f43f ae97 	beq.w	8017ce2 <_printf_float+0xc2>
 8017fb4:	9a05      	ldr	r2, [sp, #20]
 8017fb6:	f10b 0b01 	add.w	fp, fp, #1
 8017fba:	e7b9      	b.n	8017f30 <_printf_float+0x310>
 8017fbc:	ee18 3a10 	vmov	r3, s16
 8017fc0:	4652      	mov	r2, sl
 8017fc2:	4631      	mov	r1, r6
 8017fc4:	4628      	mov	r0, r5
 8017fc6:	47b8      	blx	r7
 8017fc8:	3001      	adds	r0, #1
 8017fca:	d1be      	bne.n	8017f4a <_printf_float+0x32a>
 8017fcc:	e689      	b.n	8017ce2 <_printf_float+0xc2>
 8017fce:	9a05      	ldr	r2, [sp, #20]
 8017fd0:	464b      	mov	r3, r9
 8017fd2:	4442      	add	r2, r8
 8017fd4:	4631      	mov	r1, r6
 8017fd6:	4628      	mov	r0, r5
 8017fd8:	47b8      	blx	r7
 8017fda:	3001      	adds	r0, #1
 8017fdc:	d1c1      	bne.n	8017f62 <_printf_float+0x342>
 8017fde:	e680      	b.n	8017ce2 <_printf_float+0xc2>
 8017fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fe2:	2a01      	cmp	r2, #1
 8017fe4:	dc01      	bgt.n	8017fea <_printf_float+0x3ca>
 8017fe6:	07db      	lsls	r3, r3, #31
 8017fe8:	d538      	bpl.n	801805c <_printf_float+0x43c>
 8017fea:	2301      	movs	r3, #1
 8017fec:	4642      	mov	r2, r8
 8017fee:	4631      	mov	r1, r6
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	47b8      	blx	r7
 8017ff4:	3001      	adds	r0, #1
 8017ff6:	f43f ae74 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ffa:	ee18 3a10 	vmov	r3, s16
 8017ffe:	4652      	mov	r2, sl
 8018000:	4631      	mov	r1, r6
 8018002:	4628      	mov	r0, r5
 8018004:	47b8      	blx	r7
 8018006:	3001      	adds	r0, #1
 8018008:	f43f ae6b 	beq.w	8017ce2 <_printf_float+0xc2>
 801800c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018010:	2200      	movs	r2, #0
 8018012:	2300      	movs	r3, #0
 8018014:	f7e8 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8018018:	b9d8      	cbnz	r0, 8018052 <_printf_float+0x432>
 801801a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801801c:	f108 0201 	add.w	r2, r8, #1
 8018020:	3b01      	subs	r3, #1
 8018022:	4631      	mov	r1, r6
 8018024:	4628      	mov	r0, r5
 8018026:	47b8      	blx	r7
 8018028:	3001      	adds	r0, #1
 801802a:	d10e      	bne.n	801804a <_printf_float+0x42a>
 801802c:	e659      	b.n	8017ce2 <_printf_float+0xc2>
 801802e:	2301      	movs	r3, #1
 8018030:	4652      	mov	r2, sl
 8018032:	4631      	mov	r1, r6
 8018034:	4628      	mov	r0, r5
 8018036:	47b8      	blx	r7
 8018038:	3001      	adds	r0, #1
 801803a:	f43f ae52 	beq.w	8017ce2 <_printf_float+0xc2>
 801803e:	f108 0801 	add.w	r8, r8, #1
 8018042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018044:	3b01      	subs	r3, #1
 8018046:	4543      	cmp	r3, r8
 8018048:	dcf1      	bgt.n	801802e <_printf_float+0x40e>
 801804a:	464b      	mov	r3, r9
 801804c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018050:	e6dc      	b.n	8017e0c <_printf_float+0x1ec>
 8018052:	f04f 0800 	mov.w	r8, #0
 8018056:	f104 0a1a 	add.w	sl, r4, #26
 801805a:	e7f2      	b.n	8018042 <_printf_float+0x422>
 801805c:	2301      	movs	r3, #1
 801805e:	4642      	mov	r2, r8
 8018060:	e7df      	b.n	8018022 <_printf_float+0x402>
 8018062:	2301      	movs	r3, #1
 8018064:	464a      	mov	r2, r9
 8018066:	4631      	mov	r1, r6
 8018068:	4628      	mov	r0, r5
 801806a:	47b8      	blx	r7
 801806c:	3001      	adds	r0, #1
 801806e:	f43f ae38 	beq.w	8017ce2 <_printf_float+0xc2>
 8018072:	f108 0801 	add.w	r8, r8, #1
 8018076:	68e3      	ldr	r3, [r4, #12]
 8018078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801807a:	1a5b      	subs	r3, r3, r1
 801807c:	4543      	cmp	r3, r8
 801807e:	dcf0      	bgt.n	8018062 <_printf_float+0x442>
 8018080:	e6fa      	b.n	8017e78 <_printf_float+0x258>
 8018082:	f04f 0800 	mov.w	r8, #0
 8018086:	f104 0919 	add.w	r9, r4, #25
 801808a:	e7f4      	b.n	8018076 <_printf_float+0x456>

0801808c <_printf_common>:
 801808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018090:	4616      	mov	r6, r2
 8018092:	4699      	mov	r9, r3
 8018094:	688a      	ldr	r2, [r1, #8]
 8018096:	690b      	ldr	r3, [r1, #16]
 8018098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801809c:	4293      	cmp	r3, r2
 801809e:	bfb8      	it	lt
 80180a0:	4613      	movlt	r3, r2
 80180a2:	6033      	str	r3, [r6, #0]
 80180a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80180a8:	4607      	mov	r7, r0
 80180aa:	460c      	mov	r4, r1
 80180ac:	b10a      	cbz	r2, 80180b2 <_printf_common+0x26>
 80180ae:	3301      	adds	r3, #1
 80180b0:	6033      	str	r3, [r6, #0]
 80180b2:	6823      	ldr	r3, [r4, #0]
 80180b4:	0699      	lsls	r1, r3, #26
 80180b6:	bf42      	ittt	mi
 80180b8:	6833      	ldrmi	r3, [r6, #0]
 80180ba:	3302      	addmi	r3, #2
 80180bc:	6033      	strmi	r3, [r6, #0]
 80180be:	6825      	ldr	r5, [r4, #0]
 80180c0:	f015 0506 	ands.w	r5, r5, #6
 80180c4:	d106      	bne.n	80180d4 <_printf_common+0x48>
 80180c6:	f104 0a19 	add.w	sl, r4, #25
 80180ca:	68e3      	ldr	r3, [r4, #12]
 80180cc:	6832      	ldr	r2, [r6, #0]
 80180ce:	1a9b      	subs	r3, r3, r2
 80180d0:	42ab      	cmp	r3, r5
 80180d2:	dc26      	bgt.n	8018122 <_printf_common+0x96>
 80180d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180d8:	1e13      	subs	r3, r2, #0
 80180da:	6822      	ldr	r2, [r4, #0]
 80180dc:	bf18      	it	ne
 80180de:	2301      	movne	r3, #1
 80180e0:	0692      	lsls	r2, r2, #26
 80180e2:	d42b      	bmi.n	801813c <_printf_common+0xb0>
 80180e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180e8:	4649      	mov	r1, r9
 80180ea:	4638      	mov	r0, r7
 80180ec:	47c0      	blx	r8
 80180ee:	3001      	adds	r0, #1
 80180f0:	d01e      	beq.n	8018130 <_printf_common+0xa4>
 80180f2:	6823      	ldr	r3, [r4, #0]
 80180f4:	68e5      	ldr	r5, [r4, #12]
 80180f6:	6832      	ldr	r2, [r6, #0]
 80180f8:	f003 0306 	and.w	r3, r3, #6
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	bf08      	it	eq
 8018100:	1aad      	subeq	r5, r5, r2
 8018102:	68a3      	ldr	r3, [r4, #8]
 8018104:	6922      	ldr	r2, [r4, #16]
 8018106:	bf0c      	ite	eq
 8018108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801810c:	2500      	movne	r5, #0
 801810e:	4293      	cmp	r3, r2
 8018110:	bfc4      	itt	gt
 8018112:	1a9b      	subgt	r3, r3, r2
 8018114:	18ed      	addgt	r5, r5, r3
 8018116:	2600      	movs	r6, #0
 8018118:	341a      	adds	r4, #26
 801811a:	42b5      	cmp	r5, r6
 801811c:	d11a      	bne.n	8018154 <_printf_common+0xc8>
 801811e:	2000      	movs	r0, #0
 8018120:	e008      	b.n	8018134 <_printf_common+0xa8>
 8018122:	2301      	movs	r3, #1
 8018124:	4652      	mov	r2, sl
 8018126:	4649      	mov	r1, r9
 8018128:	4638      	mov	r0, r7
 801812a:	47c0      	blx	r8
 801812c:	3001      	adds	r0, #1
 801812e:	d103      	bne.n	8018138 <_printf_common+0xac>
 8018130:	f04f 30ff 	mov.w	r0, #4294967295
 8018134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018138:	3501      	adds	r5, #1
 801813a:	e7c6      	b.n	80180ca <_printf_common+0x3e>
 801813c:	18e1      	adds	r1, r4, r3
 801813e:	1c5a      	adds	r2, r3, #1
 8018140:	2030      	movs	r0, #48	; 0x30
 8018142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018146:	4422      	add	r2, r4
 8018148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801814c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018150:	3302      	adds	r3, #2
 8018152:	e7c7      	b.n	80180e4 <_printf_common+0x58>
 8018154:	2301      	movs	r3, #1
 8018156:	4622      	mov	r2, r4
 8018158:	4649      	mov	r1, r9
 801815a:	4638      	mov	r0, r7
 801815c:	47c0      	blx	r8
 801815e:	3001      	adds	r0, #1
 8018160:	d0e6      	beq.n	8018130 <_printf_common+0xa4>
 8018162:	3601      	adds	r6, #1
 8018164:	e7d9      	b.n	801811a <_printf_common+0x8e>
	...

08018168 <_printf_i>:
 8018168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801816c:	460c      	mov	r4, r1
 801816e:	4691      	mov	r9, r2
 8018170:	7e27      	ldrb	r7, [r4, #24]
 8018172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018174:	2f78      	cmp	r7, #120	; 0x78
 8018176:	4680      	mov	r8, r0
 8018178:	469a      	mov	sl, r3
 801817a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801817e:	d807      	bhi.n	8018190 <_printf_i+0x28>
 8018180:	2f62      	cmp	r7, #98	; 0x62
 8018182:	d80a      	bhi.n	801819a <_printf_i+0x32>
 8018184:	2f00      	cmp	r7, #0
 8018186:	f000 80d8 	beq.w	801833a <_printf_i+0x1d2>
 801818a:	2f58      	cmp	r7, #88	; 0x58
 801818c:	f000 80a3 	beq.w	80182d6 <_printf_i+0x16e>
 8018190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018198:	e03a      	b.n	8018210 <_printf_i+0xa8>
 801819a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801819e:	2b15      	cmp	r3, #21
 80181a0:	d8f6      	bhi.n	8018190 <_printf_i+0x28>
 80181a2:	a001      	add	r0, pc, #4	; (adr r0, 80181a8 <_printf_i+0x40>)
 80181a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80181a8:	08018201 	.word	0x08018201
 80181ac:	08018215 	.word	0x08018215
 80181b0:	08018191 	.word	0x08018191
 80181b4:	08018191 	.word	0x08018191
 80181b8:	08018191 	.word	0x08018191
 80181bc:	08018191 	.word	0x08018191
 80181c0:	08018215 	.word	0x08018215
 80181c4:	08018191 	.word	0x08018191
 80181c8:	08018191 	.word	0x08018191
 80181cc:	08018191 	.word	0x08018191
 80181d0:	08018191 	.word	0x08018191
 80181d4:	08018321 	.word	0x08018321
 80181d8:	08018245 	.word	0x08018245
 80181dc:	08018303 	.word	0x08018303
 80181e0:	08018191 	.word	0x08018191
 80181e4:	08018191 	.word	0x08018191
 80181e8:	08018343 	.word	0x08018343
 80181ec:	08018191 	.word	0x08018191
 80181f0:	08018245 	.word	0x08018245
 80181f4:	08018191 	.word	0x08018191
 80181f8:	08018191 	.word	0x08018191
 80181fc:	0801830b 	.word	0x0801830b
 8018200:	680b      	ldr	r3, [r1, #0]
 8018202:	1d1a      	adds	r2, r3, #4
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	600a      	str	r2, [r1, #0]
 8018208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801820c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018210:	2301      	movs	r3, #1
 8018212:	e0a3      	b.n	801835c <_printf_i+0x1f4>
 8018214:	6825      	ldr	r5, [r4, #0]
 8018216:	6808      	ldr	r0, [r1, #0]
 8018218:	062e      	lsls	r6, r5, #24
 801821a:	f100 0304 	add.w	r3, r0, #4
 801821e:	d50a      	bpl.n	8018236 <_printf_i+0xce>
 8018220:	6805      	ldr	r5, [r0, #0]
 8018222:	600b      	str	r3, [r1, #0]
 8018224:	2d00      	cmp	r5, #0
 8018226:	da03      	bge.n	8018230 <_printf_i+0xc8>
 8018228:	232d      	movs	r3, #45	; 0x2d
 801822a:	426d      	negs	r5, r5
 801822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018230:	485e      	ldr	r0, [pc, #376]	; (80183ac <_printf_i+0x244>)
 8018232:	230a      	movs	r3, #10
 8018234:	e019      	b.n	801826a <_printf_i+0x102>
 8018236:	f015 0f40 	tst.w	r5, #64	; 0x40
 801823a:	6805      	ldr	r5, [r0, #0]
 801823c:	600b      	str	r3, [r1, #0]
 801823e:	bf18      	it	ne
 8018240:	b22d      	sxthne	r5, r5
 8018242:	e7ef      	b.n	8018224 <_printf_i+0xbc>
 8018244:	680b      	ldr	r3, [r1, #0]
 8018246:	6825      	ldr	r5, [r4, #0]
 8018248:	1d18      	adds	r0, r3, #4
 801824a:	6008      	str	r0, [r1, #0]
 801824c:	0628      	lsls	r0, r5, #24
 801824e:	d501      	bpl.n	8018254 <_printf_i+0xec>
 8018250:	681d      	ldr	r5, [r3, #0]
 8018252:	e002      	b.n	801825a <_printf_i+0xf2>
 8018254:	0669      	lsls	r1, r5, #25
 8018256:	d5fb      	bpl.n	8018250 <_printf_i+0xe8>
 8018258:	881d      	ldrh	r5, [r3, #0]
 801825a:	4854      	ldr	r0, [pc, #336]	; (80183ac <_printf_i+0x244>)
 801825c:	2f6f      	cmp	r7, #111	; 0x6f
 801825e:	bf0c      	ite	eq
 8018260:	2308      	moveq	r3, #8
 8018262:	230a      	movne	r3, #10
 8018264:	2100      	movs	r1, #0
 8018266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801826a:	6866      	ldr	r6, [r4, #4]
 801826c:	60a6      	str	r6, [r4, #8]
 801826e:	2e00      	cmp	r6, #0
 8018270:	bfa2      	ittt	ge
 8018272:	6821      	ldrge	r1, [r4, #0]
 8018274:	f021 0104 	bicge.w	r1, r1, #4
 8018278:	6021      	strge	r1, [r4, #0]
 801827a:	b90d      	cbnz	r5, 8018280 <_printf_i+0x118>
 801827c:	2e00      	cmp	r6, #0
 801827e:	d04d      	beq.n	801831c <_printf_i+0x1b4>
 8018280:	4616      	mov	r6, r2
 8018282:	fbb5 f1f3 	udiv	r1, r5, r3
 8018286:	fb03 5711 	mls	r7, r3, r1, r5
 801828a:	5dc7      	ldrb	r7, [r0, r7]
 801828c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018290:	462f      	mov	r7, r5
 8018292:	42bb      	cmp	r3, r7
 8018294:	460d      	mov	r5, r1
 8018296:	d9f4      	bls.n	8018282 <_printf_i+0x11a>
 8018298:	2b08      	cmp	r3, #8
 801829a:	d10b      	bne.n	80182b4 <_printf_i+0x14c>
 801829c:	6823      	ldr	r3, [r4, #0]
 801829e:	07df      	lsls	r7, r3, #31
 80182a0:	d508      	bpl.n	80182b4 <_printf_i+0x14c>
 80182a2:	6923      	ldr	r3, [r4, #16]
 80182a4:	6861      	ldr	r1, [r4, #4]
 80182a6:	4299      	cmp	r1, r3
 80182a8:	bfde      	ittt	le
 80182aa:	2330      	movle	r3, #48	; 0x30
 80182ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80182b4:	1b92      	subs	r2, r2, r6
 80182b6:	6122      	str	r2, [r4, #16]
 80182b8:	f8cd a000 	str.w	sl, [sp]
 80182bc:	464b      	mov	r3, r9
 80182be:	aa03      	add	r2, sp, #12
 80182c0:	4621      	mov	r1, r4
 80182c2:	4640      	mov	r0, r8
 80182c4:	f7ff fee2 	bl	801808c <_printf_common>
 80182c8:	3001      	adds	r0, #1
 80182ca:	d14c      	bne.n	8018366 <_printf_i+0x1fe>
 80182cc:	f04f 30ff 	mov.w	r0, #4294967295
 80182d0:	b004      	add	sp, #16
 80182d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182d6:	4835      	ldr	r0, [pc, #212]	; (80183ac <_printf_i+0x244>)
 80182d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182dc:	6823      	ldr	r3, [r4, #0]
 80182de:	680e      	ldr	r6, [r1, #0]
 80182e0:	061f      	lsls	r7, r3, #24
 80182e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80182e6:	600e      	str	r6, [r1, #0]
 80182e8:	d514      	bpl.n	8018314 <_printf_i+0x1ac>
 80182ea:	07d9      	lsls	r1, r3, #31
 80182ec:	bf44      	itt	mi
 80182ee:	f043 0320 	orrmi.w	r3, r3, #32
 80182f2:	6023      	strmi	r3, [r4, #0]
 80182f4:	b91d      	cbnz	r5, 80182fe <_printf_i+0x196>
 80182f6:	6823      	ldr	r3, [r4, #0]
 80182f8:	f023 0320 	bic.w	r3, r3, #32
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	2310      	movs	r3, #16
 8018300:	e7b0      	b.n	8018264 <_printf_i+0xfc>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	f043 0320 	orr.w	r3, r3, #32
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	2378      	movs	r3, #120	; 0x78
 801830c:	4828      	ldr	r0, [pc, #160]	; (80183b0 <_printf_i+0x248>)
 801830e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018312:	e7e3      	b.n	80182dc <_printf_i+0x174>
 8018314:	065e      	lsls	r6, r3, #25
 8018316:	bf48      	it	mi
 8018318:	b2ad      	uxthmi	r5, r5
 801831a:	e7e6      	b.n	80182ea <_printf_i+0x182>
 801831c:	4616      	mov	r6, r2
 801831e:	e7bb      	b.n	8018298 <_printf_i+0x130>
 8018320:	680b      	ldr	r3, [r1, #0]
 8018322:	6826      	ldr	r6, [r4, #0]
 8018324:	6960      	ldr	r0, [r4, #20]
 8018326:	1d1d      	adds	r5, r3, #4
 8018328:	600d      	str	r5, [r1, #0]
 801832a:	0635      	lsls	r5, r6, #24
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	d501      	bpl.n	8018334 <_printf_i+0x1cc>
 8018330:	6018      	str	r0, [r3, #0]
 8018332:	e002      	b.n	801833a <_printf_i+0x1d2>
 8018334:	0671      	lsls	r1, r6, #25
 8018336:	d5fb      	bpl.n	8018330 <_printf_i+0x1c8>
 8018338:	8018      	strh	r0, [r3, #0]
 801833a:	2300      	movs	r3, #0
 801833c:	6123      	str	r3, [r4, #16]
 801833e:	4616      	mov	r6, r2
 8018340:	e7ba      	b.n	80182b8 <_printf_i+0x150>
 8018342:	680b      	ldr	r3, [r1, #0]
 8018344:	1d1a      	adds	r2, r3, #4
 8018346:	600a      	str	r2, [r1, #0]
 8018348:	681e      	ldr	r6, [r3, #0]
 801834a:	6862      	ldr	r2, [r4, #4]
 801834c:	2100      	movs	r1, #0
 801834e:	4630      	mov	r0, r6
 8018350:	f7e7 ff3e 	bl	80001d0 <memchr>
 8018354:	b108      	cbz	r0, 801835a <_printf_i+0x1f2>
 8018356:	1b80      	subs	r0, r0, r6
 8018358:	6060      	str	r0, [r4, #4]
 801835a:	6863      	ldr	r3, [r4, #4]
 801835c:	6123      	str	r3, [r4, #16]
 801835e:	2300      	movs	r3, #0
 8018360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018364:	e7a8      	b.n	80182b8 <_printf_i+0x150>
 8018366:	6923      	ldr	r3, [r4, #16]
 8018368:	4632      	mov	r2, r6
 801836a:	4649      	mov	r1, r9
 801836c:	4640      	mov	r0, r8
 801836e:	47d0      	blx	sl
 8018370:	3001      	adds	r0, #1
 8018372:	d0ab      	beq.n	80182cc <_printf_i+0x164>
 8018374:	6823      	ldr	r3, [r4, #0]
 8018376:	079b      	lsls	r3, r3, #30
 8018378:	d413      	bmi.n	80183a2 <_printf_i+0x23a>
 801837a:	68e0      	ldr	r0, [r4, #12]
 801837c:	9b03      	ldr	r3, [sp, #12]
 801837e:	4298      	cmp	r0, r3
 8018380:	bfb8      	it	lt
 8018382:	4618      	movlt	r0, r3
 8018384:	e7a4      	b.n	80182d0 <_printf_i+0x168>
 8018386:	2301      	movs	r3, #1
 8018388:	4632      	mov	r2, r6
 801838a:	4649      	mov	r1, r9
 801838c:	4640      	mov	r0, r8
 801838e:	47d0      	blx	sl
 8018390:	3001      	adds	r0, #1
 8018392:	d09b      	beq.n	80182cc <_printf_i+0x164>
 8018394:	3501      	adds	r5, #1
 8018396:	68e3      	ldr	r3, [r4, #12]
 8018398:	9903      	ldr	r1, [sp, #12]
 801839a:	1a5b      	subs	r3, r3, r1
 801839c:	42ab      	cmp	r3, r5
 801839e:	dcf2      	bgt.n	8018386 <_printf_i+0x21e>
 80183a0:	e7eb      	b.n	801837a <_printf_i+0x212>
 80183a2:	2500      	movs	r5, #0
 80183a4:	f104 0619 	add.w	r6, r4, #25
 80183a8:	e7f5      	b.n	8018396 <_printf_i+0x22e>
 80183aa:	bf00      	nop
 80183ac:	0801ae9e 	.word	0x0801ae9e
 80183b0:	0801aeaf 	.word	0x0801aeaf

080183b4 <iprintf>:
 80183b4:	b40f      	push	{r0, r1, r2, r3}
 80183b6:	4b0a      	ldr	r3, [pc, #40]	; (80183e0 <iprintf+0x2c>)
 80183b8:	b513      	push	{r0, r1, r4, lr}
 80183ba:	681c      	ldr	r4, [r3, #0]
 80183bc:	b124      	cbz	r4, 80183c8 <iprintf+0x14>
 80183be:	69a3      	ldr	r3, [r4, #24]
 80183c0:	b913      	cbnz	r3, 80183c8 <iprintf+0x14>
 80183c2:	4620      	mov	r0, r4
 80183c4:	f000 ff88 	bl	80192d8 <__sinit>
 80183c8:	ab05      	add	r3, sp, #20
 80183ca:	9a04      	ldr	r2, [sp, #16]
 80183cc:	68a1      	ldr	r1, [r4, #8]
 80183ce:	9301      	str	r3, [sp, #4]
 80183d0:	4620      	mov	r0, r4
 80183d2:	f001 fd45 	bl	8019e60 <_vfiprintf_r>
 80183d6:	b002      	add	sp, #8
 80183d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183dc:	b004      	add	sp, #16
 80183de:	4770      	bx	lr
 80183e0:	200000f0 	.word	0x200000f0

080183e4 <_sbrk_r>:
 80183e4:	b538      	push	{r3, r4, r5, lr}
 80183e6:	4d06      	ldr	r5, [pc, #24]	; (8018400 <_sbrk_r+0x1c>)
 80183e8:	2300      	movs	r3, #0
 80183ea:	4604      	mov	r4, r0
 80183ec:	4608      	mov	r0, r1
 80183ee:	602b      	str	r3, [r5, #0]
 80183f0:	f7ea fb5a 	bl	8002aa8 <_sbrk>
 80183f4:	1c43      	adds	r3, r0, #1
 80183f6:	d102      	bne.n	80183fe <_sbrk_r+0x1a>
 80183f8:	682b      	ldr	r3, [r5, #0]
 80183fa:	b103      	cbz	r3, 80183fe <_sbrk_r+0x1a>
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	bd38      	pop	{r3, r4, r5, pc}
 8018400:	20001a04 	.word	0x20001a04

08018404 <_raise_r>:
 8018404:	291f      	cmp	r1, #31
 8018406:	b538      	push	{r3, r4, r5, lr}
 8018408:	4604      	mov	r4, r0
 801840a:	460d      	mov	r5, r1
 801840c:	d904      	bls.n	8018418 <_raise_r+0x14>
 801840e:	2316      	movs	r3, #22
 8018410:	6003      	str	r3, [r0, #0]
 8018412:	f04f 30ff 	mov.w	r0, #4294967295
 8018416:	bd38      	pop	{r3, r4, r5, pc}
 8018418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801841a:	b112      	cbz	r2, 8018422 <_raise_r+0x1e>
 801841c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018420:	b94b      	cbnz	r3, 8018436 <_raise_r+0x32>
 8018422:	4620      	mov	r0, r4
 8018424:	f000 f830 	bl	8018488 <_getpid_r>
 8018428:	462a      	mov	r2, r5
 801842a:	4601      	mov	r1, r0
 801842c:	4620      	mov	r0, r4
 801842e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018432:	f000 b817 	b.w	8018464 <_kill_r>
 8018436:	2b01      	cmp	r3, #1
 8018438:	d00a      	beq.n	8018450 <_raise_r+0x4c>
 801843a:	1c59      	adds	r1, r3, #1
 801843c:	d103      	bne.n	8018446 <_raise_r+0x42>
 801843e:	2316      	movs	r3, #22
 8018440:	6003      	str	r3, [r0, #0]
 8018442:	2001      	movs	r0, #1
 8018444:	e7e7      	b.n	8018416 <_raise_r+0x12>
 8018446:	2400      	movs	r4, #0
 8018448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801844c:	4628      	mov	r0, r5
 801844e:	4798      	blx	r3
 8018450:	2000      	movs	r0, #0
 8018452:	e7e0      	b.n	8018416 <_raise_r+0x12>

08018454 <raise>:
 8018454:	4b02      	ldr	r3, [pc, #8]	; (8018460 <raise+0xc>)
 8018456:	4601      	mov	r1, r0
 8018458:	6818      	ldr	r0, [r3, #0]
 801845a:	f7ff bfd3 	b.w	8018404 <_raise_r>
 801845e:	bf00      	nop
 8018460:	200000f0 	.word	0x200000f0

08018464 <_kill_r>:
 8018464:	b538      	push	{r3, r4, r5, lr}
 8018466:	4d07      	ldr	r5, [pc, #28]	; (8018484 <_kill_r+0x20>)
 8018468:	2300      	movs	r3, #0
 801846a:	4604      	mov	r4, r0
 801846c:	4608      	mov	r0, r1
 801846e:	4611      	mov	r1, r2
 8018470:	602b      	str	r3, [r5, #0]
 8018472:	f7ea fa91 	bl	8002998 <_kill>
 8018476:	1c43      	adds	r3, r0, #1
 8018478:	d102      	bne.n	8018480 <_kill_r+0x1c>
 801847a:	682b      	ldr	r3, [r5, #0]
 801847c:	b103      	cbz	r3, 8018480 <_kill_r+0x1c>
 801847e:	6023      	str	r3, [r4, #0]
 8018480:	bd38      	pop	{r3, r4, r5, pc}
 8018482:	bf00      	nop
 8018484:	20001a04 	.word	0x20001a04

08018488 <_getpid_r>:
 8018488:	f7ea ba7e 	b.w	8002988 <_getpid>

0801848c <sniprintf>:
 801848c:	b40c      	push	{r2, r3}
 801848e:	b530      	push	{r4, r5, lr}
 8018490:	4b17      	ldr	r3, [pc, #92]	; (80184f0 <sniprintf+0x64>)
 8018492:	1e0c      	subs	r4, r1, #0
 8018494:	681d      	ldr	r5, [r3, #0]
 8018496:	b09d      	sub	sp, #116	; 0x74
 8018498:	da08      	bge.n	80184ac <sniprintf+0x20>
 801849a:	238b      	movs	r3, #139	; 0x8b
 801849c:	602b      	str	r3, [r5, #0]
 801849e:	f04f 30ff 	mov.w	r0, #4294967295
 80184a2:	b01d      	add	sp, #116	; 0x74
 80184a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184a8:	b002      	add	sp, #8
 80184aa:	4770      	bx	lr
 80184ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80184b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184b4:	bf14      	ite	ne
 80184b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80184ba:	4623      	moveq	r3, r4
 80184bc:	9304      	str	r3, [sp, #16]
 80184be:	9307      	str	r3, [sp, #28]
 80184c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184c4:	9002      	str	r0, [sp, #8]
 80184c6:	9006      	str	r0, [sp, #24]
 80184c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80184ce:	ab21      	add	r3, sp, #132	; 0x84
 80184d0:	a902      	add	r1, sp, #8
 80184d2:	4628      	mov	r0, r5
 80184d4:	9301      	str	r3, [sp, #4]
 80184d6:	f001 fb99 	bl	8019c0c <_svfiprintf_r>
 80184da:	1c43      	adds	r3, r0, #1
 80184dc:	bfbc      	itt	lt
 80184de:	238b      	movlt	r3, #139	; 0x8b
 80184e0:	602b      	strlt	r3, [r5, #0]
 80184e2:	2c00      	cmp	r4, #0
 80184e4:	d0dd      	beq.n	80184a2 <sniprintf+0x16>
 80184e6:	9b02      	ldr	r3, [sp, #8]
 80184e8:	2200      	movs	r2, #0
 80184ea:	701a      	strb	r2, [r3, #0]
 80184ec:	e7d9      	b.n	80184a2 <sniprintf+0x16>
 80184ee:	bf00      	nop
 80184f0:	200000f0 	.word	0x200000f0

080184f4 <siprintf>:
 80184f4:	b40e      	push	{r1, r2, r3}
 80184f6:	b500      	push	{lr}
 80184f8:	b09c      	sub	sp, #112	; 0x70
 80184fa:	ab1d      	add	r3, sp, #116	; 0x74
 80184fc:	9002      	str	r0, [sp, #8]
 80184fe:	9006      	str	r0, [sp, #24]
 8018500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018504:	4809      	ldr	r0, [pc, #36]	; (801852c <siprintf+0x38>)
 8018506:	9107      	str	r1, [sp, #28]
 8018508:	9104      	str	r1, [sp, #16]
 801850a:	4909      	ldr	r1, [pc, #36]	; (8018530 <siprintf+0x3c>)
 801850c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018510:	9105      	str	r1, [sp, #20]
 8018512:	6800      	ldr	r0, [r0, #0]
 8018514:	9301      	str	r3, [sp, #4]
 8018516:	a902      	add	r1, sp, #8
 8018518:	f001 fb78 	bl	8019c0c <_svfiprintf_r>
 801851c:	9b02      	ldr	r3, [sp, #8]
 801851e:	2200      	movs	r2, #0
 8018520:	701a      	strb	r2, [r3, #0]
 8018522:	b01c      	add	sp, #112	; 0x70
 8018524:	f85d eb04 	ldr.w	lr, [sp], #4
 8018528:	b003      	add	sp, #12
 801852a:	4770      	bx	lr
 801852c:	200000f0 	.word	0x200000f0
 8018530:	ffff0208 	.word	0xffff0208

08018534 <quorem>:
 8018534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	6903      	ldr	r3, [r0, #16]
 801853a:	690c      	ldr	r4, [r1, #16]
 801853c:	42a3      	cmp	r3, r4
 801853e:	4607      	mov	r7, r0
 8018540:	f2c0 8081 	blt.w	8018646 <quorem+0x112>
 8018544:	3c01      	subs	r4, #1
 8018546:	f101 0814 	add.w	r8, r1, #20
 801854a:	f100 0514 	add.w	r5, r0, #20
 801854e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018552:	9301      	str	r3, [sp, #4]
 8018554:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801855c:	3301      	adds	r3, #1
 801855e:	429a      	cmp	r2, r3
 8018560:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018568:	fbb2 f6f3 	udiv	r6, r2, r3
 801856c:	d331      	bcc.n	80185d2 <quorem+0x9e>
 801856e:	f04f 0e00 	mov.w	lr, #0
 8018572:	4640      	mov	r0, r8
 8018574:	46ac      	mov	ip, r5
 8018576:	46f2      	mov	sl, lr
 8018578:	f850 2b04 	ldr.w	r2, [r0], #4
 801857c:	b293      	uxth	r3, r2
 801857e:	fb06 e303 	mla	r3, r6, r3, lr
 8018582:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018586:	b29b      	uxth	r3, r3
 8018588:	ebaa 0303 	sub.w	r3, sl, r3
 801858c:	0c12      	lsrs	r2, r2, #16
 801858e:	f8dc a000 	ldr.w	sl, [ip]
 8018592:	fb06 e202 	mla	r2, r6, r2, lr
 8018596:	fa13 f38a 	uxtah	r3, r3, sl
 801859a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801859e:	fa1f fa82 	uxth.w	sl, r2
 80185a2:	f8dc 2000 	ldr.w	r2, [ip]
 80185a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80185aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80185ae:	b29b      	uxth	r3, r3
 80185b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80185b4:	4581      	cmp	r9, r0
 80185b6:	f84c 3b04 	str.w	r3, [ip], #4
 80185ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80185be:	d2db      	bcs.n	8018578 <quorem+0x44>
 80185c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80185c4:	b92b      	cbnz	r3, 80185d2 <quorem+0x9e>
 80185c6:	9b01      	ldr	r3, [sp, #4]
 80185c8:	3b04      	subs	r3, #4
 80185ca:	429d      	cmp	r5, r3
 80185cc:	461a      	mov	r2, r3
 80185ce:	d32e      	bcc.n	801862e <quorem+0xfa>
 80185d0:	613c      	str	r4, [r7, #16]
 80185d2:	4638      	mov	r0, r7
 80185d4:	f001 f9b0 	bl	8019938 <__mcmp>
 80185d8:	2800      	cmp	r0, #0
 80185da:	db24      	blt.n	8018626 <quorem+0xf2>
 80185dc:	3601      	adds	r6, #1
 80185de:	4628      	mov	r0, r5
 80185e0:	f04f 0c00 	mov.w	ip, #0
 80185e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80185e8:	f8d0 e000 	ldr.w	lr, [r0]
 80185ec:	b293      	uxth	r3, r2
 80185ee:	ebac 0303 	sub.w	r3, ip, r3
 80185f2:	0c12      	lsrs	r2, r2, #16
 80185f4:	fa13 f38e 	uxtah	r3, r3, lr
 80185f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80185fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018600:	b29b      	uxth	r3, r3
 8018602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018606:	45c1      	cmp	r9, r8
 8018608:	f840 3b04 	str.w	r3, [r0], #4
 801860c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018610:	d2e8      	bcs.n	80185e4 <quorem+0xb0>
 8018612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801861a:	b922      	cbnz	r2, 8018626 <quorem+0xf2>
 801861c:	3b04      	subs	r3, #4
 801861e:	429d      	cmp	r5, r3
 8018620:	461a      	mov	r2, r3
 8018622:	d30a      	bcc.n	801863a <quorem+0x106>
 8018624:	613c      	str	r4, [r7, #16]
 8018626:	4630      	mov	r0, r6
 8018628:	b003      	add	sp, #12
 801862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862e:	6812      	ldr	r2, [r2, #0]
 8018630:	3b04      	subs	r3, #4
 8018632:	2a00      	cmp	r2, #0
 8018634:	d1cc      	bne.n	80185d0 <quorem+0x9c>
 8018636:	3c01      	subs	r4, #1
 8018638:	e7c7      	b.n	80185ca <quorem+0x96>
 801863a:	6812      	ldr	r2, [r2, #0]
 801863c:	3b04      	subs	r3, #4
 801863e:	2a00      	cmp	r2, #0
 8018640:	d1f0      	bne.n	8018624 <quorem+0xf0>
 8018642:	3c01      	subs	r4, #1
 8018644:	e7eb      	b.n	801861e <quorem+0xea>
 8018646:	2000      	movs	r0, #0
 8018648:	e7ee      	b.n	8018628 <quorem+0xf4>
 801864a:	0000      	movs	r0, r0
 801864c:	0000      	movs	r0, r0
	...

08018650 <_dtoa_r>:
 8018650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018654:	ed2d 8b02 	vpush	{d8}
 8018658:	ec57 6b10 	vmov	r6, r7, d0
 801865c:	b095      	sub	sp, #84	; 0x54
 801865e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018664:	9105      	str	r1, [sp, #20]
 8018666:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801866a:	4604      	mov	r4, r0
 801866c:	9209      	str	r2, [sp, #36]	; 0x24
 801866e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018670:	b975      	cbnz	r5, 8018690 <_dtoa_r+0x40>
 8018672:	2010      	movs	r0, #16
 8018674:	f7ff f94a 	bl	801790c <malloc>
 8018678:	4602      	mov	r2, r0
 801867a:	6260      	str	r0, [r4, #36]	; 0x24
 801867c:	b920      	cbnz	r0, 8018688 <_dtoa_r+0x38>
 801867e:	4bb2      	ldr	r3, [pc, #712]	; (8018948 <_dtoa_r+0x2f8>)
 8018680:	21ea      	movs	r1, #234	; 0xea
 8018682:	48b2      	ldr	r0, [pc, #712]	; (801894c <_dtoa_r+0x2fc>)
 8018684:	f001 fe32 	bl	801a2ec <__assert_func>
 8018688:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801868c:	6005      	str	r5, [r0, #0]
 801868e:	60c5      	str	r5, [r0, #12]
 8018690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018692:	6819      	ldr	r1, [r3, #0]
 8018694:	b151      	cbz	r1, 80186ac <_dtoa_r+0x5c>
 8018696:	685a      	ldr	r2, [r3, #4]
 8018698:	604a      	str	r2, [r1, #4]
 801869a:	2301      	movs	r3, #1
 801869c:	4093      	lsls	r3, r2
 801869e:	608b      	str	r3, [r1, #8]
 80186a0:	4620      	mov	r0, r4
 80186a2:	f000 ff0b 	bl	80194bc <_Bfree>
 80186a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186a8:	2200      	movs	r2, #0
 80186aa:	601a      	str	r2, [r3, #0]
 80186ac:	1e3b      	subs	r3, r7, #0
 80186ae:	bfb9      	ittee	lt
 80186b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80186b4:	9303      	strlt	r3, [sp, #12]
 80186b6:	2300      	movge	r3, #0
 80186b8:	f8c8 3000 	strge.w	r3, [r8]
 80186bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80186c0:	4ba3      	ldr	r3, [pc, #652]	; (8018950 <_dtoa_r+0x300>)
 80186c2:	bfbc      	itt	lt
 80186c4:	2201      	movlt	r2, #1
 80186c6:	f8c8 2000 	strlt.w	r2, [r8]
 80186ca:	ea33 0309 	bics.w	r3, r3, r9
 80186ce:	d11b      	bne.n	8018708 <_dtoa_r+0xb8>
 80186d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80186d6:	6013      	str	r3, [r2, #0]
 80186d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186dc:	4333      	orrs	r3, r6
 80186de:	f000 857a 	beq.w	80191d6 <_dtoa_r+0xb86>
 80186e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186e4:	b963      	cbnz	r3, 8018700 <_dtoa_r+0xb0>
 80186e6:	4b9b      	ldr	r3, [pc, #620]	; (8018954 <_dtoa_r+0x304>)
 80186e8:	e024      	b.n	8018734 <_dtoa_r+0xe4>
 80186ea:	4b9b      	ldr	r3, [pc, #620]	; (8018958 <_dtoa_r+0x308>)
 80186ec:	9300      	str	r3, [sp, #0]
 80186ee:	3308      	adds	r3, #8
 80186f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80186f2:	6013      	str	r3, [r2, #0]
 80186f4:	9800      	ldr	r0, [sp, #0]
 80186f6:	b015      	add	sp, #84	; 0x54
 80186f8:	ecbd 8b02 	vpop	{d8}
 80186fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018700:	4b94      	ldr	r3, [pc, #592]	; (8018954 <_dtoa_r+0x304>)
 8018702:	9300      	str	r3, [sp, #0]
 8018704:	3303      	adds	r3, #3
 8018706:	e7f3      	b.n	80186f0 <_dtoa_r+0xa0>
 8018708:	ed9d 7b02 	vldr	d7, [sp, #8]
 801870c:	2200      	movs	r2, #0
 801870e:	ec51 0b17 	vmov	r0, r1, d7
 8018712:	2300      	movs	r3, #0
 8018714:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018718:	f7e8 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 801871c:	4680      	mov	r8, r0
 801871e:	b158      	cbz	r0, 8018738 <_dtoa_r+0xe8>
 8018720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018722:	2301      	movs	r3, #1
 8018724:	6013      	str	r3, [r2, #0]
 8018726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018728:	2b00      	cmp	r3, #0
 801872a:	f000 8551 	beq.w	80191d0 <_dtoa_r+0xb80>
 801872e:	488b      	ldr	r0, [pc, #556]	; (801895c <_dtoa_r+0x30c>)
 8018730:	6018      	str	r0, [r3, #0]
 8018732:	1e43      	subs	r3, r0, #1
 8018734:	9300      	str	r3, [sp, #0]
 8018736:	e7dd      	b.n	80186f4 <_dtoa_r+0xa4>
 8018738:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801873c:	aa12      	add	r2, sp, #72	; 0x48
 801873e:	a913      	add	r1, sp, #76	; 0x4c
 8018740:	4620      	mov	r0, r4
 8018742:	f001 f99d 	bl	8019a80 <__d2b>
 8018746:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801874a:	4683      	mov	fp, r0
 801874c:	2d00      	cmp	r5, #0
 801874e:	d07c      	beq.n	801884a <_dtoa_r+0x1fa>
 8018750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018752:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801875a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801875e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018762:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801876a:	4b7d      	ldr	r3, [pc, #500]	; (8018960 <_dtoa_r+0x310>)
 801876c:	2200      	movs	r2, #0
 801876e:	4630      	mov	r0, r6
 8018770:	4639      	mov	r1, r7
 8018772:	f7e7 fd89 	bl	8000288 <__aeabi_dsub>
 8018776:	a36e      	add	r3, pc, #440	; (adr r3, 8018930 <_dtoa_r+0x2e0>)
 8018778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877c:	f7e7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8018780:	a36d      	add	r3, pc, #436	; (adr r3, 8018938 <_dtoa_r+0x2e8>)
 8018782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018786:	f7e7 fd81 	bl	800028c <__adddf3>
 801878a:	4606      	mov	r6, r0
 801878c:	4628      	mov	r0, r5
 801878e:	460f      	mov	r7, r1
 8018790:	f7e7 fec8 	bl	8000524 <__aeabi_i2d>
 8018794:	a36a      	add	r3, pc, #424	; (adr r3, 8018940 <_dtoa_r+0x2f0>)
 8018796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879a:	f7e7 ff2d 	bl	80005f8 <__aeabi_dmul>
 801879e:	4602      	mov	r2, r0
 80187a0:	460b      	mov	r3, r1
 80187a2:	4630      	mov	r0, r6
 80187a4:	4639      	mov	r1, r7
 80187a6:	f7e7 fd71 	bl	800028c <__adddf3>
 80187aa:	4606      	mov	r6, r0
 80187ac:	460f      	mov	r7, r1
 80187ae:	f7e8 f9d3 	bl	8000b58 <__aeabi_d2iz>
 80187b2:	2200      	movs	r2, #0
 80187b4:	4682      	mov	sl, r0
 80187b6:	2300      	movs	r3, #0
 80187b8:	4630      	mov	r0, r6
 80187ba:	4639      	mov	r1, r7
 80187bc:	f7e8 f98e 	bl	8000adc <__aeabi_dcmplt>
 80187c0:	b148      	cbz	r0, 80187d6 <_dtoa_r+0x186>
 80187c2:	4650      	mov	r0, sl
 80187c4:	f7e7 feae 	bl	8000524 <__aeabi_i2d>
 80187c8:	4632      	mov	r2, r6
 80187ca:	463b      	mov	r3, r7
 80187cc:	f7e8 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80187d0:	b908      	cbnz	r0, 80187d6 <_dtoa_r+0x186>
 80187d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80187d6:	f1ba 0f16 	cmp.w	sl, #22
 80187da:	d854      	bhi.n	8018886 <_dtoa_r+0x236>
 80187dc:	4b61      	ldr	r3, [pc, #388]	; (8018964 <_dtoa_r+0x314>)
 80187de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80187e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80187ea:	f7e8 f977 	bl	8000adc <__aeabi_dcmplt>
 80187ee:	2800      	cmp	r0, #0
 80187f0:	d04b      	beq.n	801888a <_dtoa_r+0x23a>
 80187f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80187f6:	2300      	movs	r3, #0
 80187f8:	930e      	str	r3, [sp, #56]	; 0x38
 80187fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80187fc:	1b5d      	subs	r5, r3, r5
 80187fe:	1e6b      	subs	r3, r5, #1
 8018800:	9304      	str	r3, [sp, #16]
 8018802:	bf43      	ittte	mi
 8018804:	2300      	movmi	r3, #0
 8018806:	f1c5 0801 	rsbmi	r8, r5, #1
 801880a:	9304      	strmi	r3, [sp, #16]
 801880c:	f04f 0800 	movpl.w	r8, #0
 8018810:	f1ba 0f00 	cmp.w	sl, #0
 8018814:	db3b      	blt.n	801888e <_dtoa_r+0x23e>
 8018816:	9b04      	ldr	r3, [sp, #16]
 8018818:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801881c:	4453      	add	r3, sl
 801881e:	9304      	str	r3, [sp, #16]
 8018820:	2300      	movs	r3, #0
 8018822:	9306      	str	r3, [sp, #24]
 8018824:	9b05      	ldr	r3, [sp, #20]
 8018826:	2b09      	cmp	r3, #9
 8018828:	d869      	bhi.n	80188fe <_dtoa_r+0x2ae>
 801882a:	2b05      	cmp	r3, #5
 801882c:	bfc4      	itt	gt
 801882e:	3b04      	subgt	r3, #4
 8018830:	9305      	strgt	r3, [sp, #20]
 8018832:	9b05      	ldr	r3, [sp, #20]
 8018834:	f1a3 0302 	sub.w	r3, r3, #2
 8018838:	bfcc      	ite	gt
 801883a:	2500      	movgt	r5, #0
 801883c:	2501      	movle	r5, #1
 801883e:	2b03      	cmp	r3, #3
 8018840:	d869      	bhi.n	8018916 <_dtoa_r+0x2c6>
 8018842:	e8df f003 	tbb	[pc, r3]
 8018846:	4e2c      	.short	0x4e2c
 8018848:	5a4c      	.short	0x5a4c
 801884a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801884e:	441d      	add	r5, r3
 8018850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018854:	2b20      	cmp	r3, #32
 8018856:	bfc1      	itttt	gt
 8018858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801885c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018860:	fa09 f303 	lslgt.w	r3, r9, r3
 8018864:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018868:	bfda      	itte	le
 801886a:	f1c3 0320 	rsble	r3, r3, #32
 801886e:	fa06 f003 	lslle.w	r0, r6, r3
 8018872:	4318      	orrgt	r0, r3
 8018874:	f7e7 fe46 	bl	8000504 <__aeabi_ui2d>
 8018878:	2301      	movs	r3, #1
 801887a:	4606      	mov	r6, r0
 801887c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018880:	3d01      	subs	r5, #1
 8018882:	9310      	str	r3, [sp, #64]	; 0x40
 8018884:	e771      	b.n	801876a <_dtoa_r+0x11a>
 8018886:	2301      	movs	r3, #1
 8018888:	e7b6      	b.n	80187f8 <_dtoa_r+0x1a8>
 801888a:	900e      	str	r0, [sp, #56]	; 0x38
 801888c:	e7b5      	b.n	80187fa <_dtoa_r+0x1aa>
 801888e:	f1ca 0300 	rsb	r3, sl, #0
 8018892:	9306      	str	r3, [sp, #24]
 8018894:	2300      	movs	r3, #0
 8018896:	eba8 080a 	sub.w	r8, r8, sl
 801889a:	930d      	str	r3, [sp, #52]	; 0x34
 801889c:	e7c2      	b.n	8018824 <_dtoa_r+0x1d4>
 801889e:	2300      	movs	r3, #0
 80188a0:	9308      	str	r3, [sp, #32]
 80188a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	dc39      	bgt.n	801891c <_dtoa_r+0x2cc>
 80188a8:	f04f 0901 	mov.w	r9, #1
 80188ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80188b0:	464b      	mov	r3, r9
 80188b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80188b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80188b8:	2200      	movs	r2, #0
 80188ba:	6042      	str	r2, [r0, #4]
 80188bc:	2204      	movs	r2, #4
 80188be:	f102 0614 	add.w	r6, r2, #20
 80188c2:	429e      	cmp	r6, r3
 80188c4:	6841      	ldr	r1, [r0, #4]
 80188c6:	d92f      	bls.n	8018928 <_dtoa_r+0x2d8>
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 fdb7 	bl	801943c <_Balloc>
 80188ce:	9000      	str	r0, [sp, #0]
 80188d0:	2800      	cmp	r0, #0
 80188d2:	d14b      	bne.n	801896c <_dtoa_r+0x31c>
 80188d4:	4b24      	ldr	r3, [pc, #144]	; (8018968 <_dtoa_r+0x318>)
 80188d6:	4602      	mov	r2, r0
 80188d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80188dc:	e6d1      	b.n	8018682 <_dtoa_r+0x32>
 80188de:	2301      	movs	r3, #1
 80188e0:	e7de      	b.n	80188a0 <_dtoa_r+0x250>
 80188e2:	2300      	movs	r3, #0
 80188e4:	9308      	str	r3, [sp, #32]
 80188e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e8:	eb0a 0903 	add.w	r9, sl, r3
 80188ec:	f109 0301 	add.w	r3, r9, #1
 80188f0:	2b01      	cmp	r3, #1
 80188f2:	9301      	str	r3, [sp, #4]
 80188f4:	bfb8      	it	lt
 80188f6:	2301      	movlt	r3, #1
 80188f8:	e7dd      	b.n	80188b6 <_dtoa_r+0x266>
 80188fa:	2301      	movs	r3, #1
 80188fc:	e7f2      	b.n	80188e4 <_dtoa_r+0x294>
 80188fe:	2501      	movs	r5, #1
 8018900:	2300      	movs	r3, #0
 8018902:	9305      	str	r3, [sp, #20]
 8018904:	9508      	str	r5, [sp, #32]
 8018906:	f04f 39ff 	mov.w	r9, #4294967295
 801890a:	2200      	movs	r2, #0
 801890c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018910:	2312      	movs	r3, #18
 8018912:	9209      	str	r2, [sp, #36]	; 0x24
 8018914:	e7cf      	b.n	80188b6 <_dtoa_r+0x266>
 8018916:	2301      	movs	r3, #1
 8018918:	9308      	str	r3, [sp, #32]
 801891a:	e7f4      	b.n	8018906 <_dtoa_r+0x2b6>
 801891c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018920:	f8cd 9004 	str.w	r9, [sp, #4]
 8018924:	464b      	mov	r3, r9
 8018926:	e7c6      	b.n	80188b6 <_dtoa_r+0x266>
 8018928:	3101      	adds	r1, #1
 801892a:	6041      	str	r1, [r0, #4]
 801892c:	0052      	lsls	r2, r2, #1
 801892e:	e7c6      	b.n	80188be <_dtoa_r+0x26e>
 8018930:	636f4361 	.word	0x636f4361
 8018934:	3fd287a7 	.word	0x3fd287a7
 8018938:	8b60c8b3 	.word	0x8b60c8b3
 801893c:	3fc68a28 	.word	0x3fc68a28
 8018940:	509f79fb 	.word	0x509f79fb
 8018944:	3fd34413 	.word	0x3fd34413
 8018948:	0801aecd 	.word	0x0801aecd
 801894c:	0801aee4 	.word	0x0801aee4
 8018950:	7ff00000 	.word	0x7ff00000
 8018954:	0801aec9 	.word	0x0801aec9
 8018958:	0801aec0 	.word	0x0801aec0
 801895c:	0801ae9d 	.word	0x0801ae9d
 8018960:	3ff80000 	.word	0x3ff80000
 8018964:	0801b040 	.word	0x0801b040
 8018968:	0801af43 	.word	0x0801af43
 801896c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801896e:	9a00      	ldr	r2, [sp, #0]
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	9b01      	ldr	r3, [sp, #4]
 8018974:	2b0e      	cmp	r3, #14
 8018976:	f200 80ad 	bhi.w	8018ad4 <_dtoa_r+0x484>
 801897a:	2d00      	cmp	r5, #0
 801897c:	f000 80aa 	beq.w	8018ad4 <_dtoa_r+0x484>
 8018980:	f1ba 0f00 	cmp.w	sl, #0
 8018984:	dd36      	ble.n	80189f4 <_dtoa_r+0x3a4>
 8018986:	4ac3      	ldr	r2, [pc, #780]	; (8018c94 <_dtoa_r+0x644>)
 8018988:	f00a 030f 	and.w	r3, sl, #15
 801898c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018990:	ed93 7b00 	vldr	d7, [r3]
 8018994:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018998:	ea4f 172a 	mov.w	r7, sl, asr #4
 801899c:	eeb0 8a47 	vmov.f32	s16, s14
 80189a0:	eef0 8a67 	vmov.f32	s17, s15
 80189a4:	d016      	beq.n	80189d4 <_dtoa_r+0x384>
 80189a6:	4bbc      	ldr	r3, [pc, #752]	; (8018c98 <_dtoa_r+0x648>)
 80189a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80189b0:	f7e7 ff4c 	bl	800084c <__aeabi_ddiv>
 80189b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189b8:	f007 070f 	and.w	r7, r7, #15
 80189bc:	2503      	movs	r5, #3
 80189be:	4eb6      	ldr	r6, [pc, #728]	; (8018c98 <_dtoa_r+0x648>)
 80189c0:	b957      	cbnz	r7, 80189d8 <_dtoa_r+0x388>
 80189c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80189c6:	ec53 2b18 	vmov	r2, r3, d8
 80189ca:	f7e7 ff3f 	bl	800084c <__aeabi_ddiv>
 80189ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189d2:	e029      	b.n	8018a28 <_dtoa_r+0x3d8>
 80189d4:	2502      	movs	r5, #2
 80189d6:	e7f2      	b.n	80189be <_dtoa_r+0x36e>
 80189d8:	07f9      	lsls	r1, r7, #31
 80189da:	d508      	bpl.n	80189ee <_dtoa_r+0x39e>
 80189dc:	ec51 0b18 	vmov	r0, r1, d8
 80189e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80189e4:	f7e7 fe08 	bl	80005f8 <__aeabi_dmul>
 80189e8:	ec41 0b18 	vmov	d8, r0, r1
 80189ec:	3501      	adds	r5, #1
 80189ee:	107f      	asrs	r7, r7, #1
 80189f0:	3608      	adds	r6, #8
 80189f2:	e7e5      	b.n	80189c0 <_dtoa_r+0x370>
 80189f4:	f000 80a6 	beq.w	8018b44 <_dtoa_r+0x4f4>
 80189f8:	f1ca 0600 	rsb	r6, sl, #0
 80189fc:	4ba5      	ldr	r3, [pc, #660]	; (8018c94 <_dtoa_r+0x644>)
 80189fe:	4fa6      	ldr	r7, [pc, #664]	; (8018c98 <_dtoa_r+0x648>)
 8018a00:	f006 020f 	and.w	r2, r6, #15
 8018a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a10:	f7e7 fdf2 	bl	80005f8 <__aeabi_dmul>
 8018a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a18:	1136      	asrs	r6, r6, #4
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	2502      	movs	r5, #2
 8018a1e:	2e00      	cmp	r6, #0
 8018a20:	f040 8085 	bne.w	8018b2e <_dtoa_r+0x4de>
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d1d2      	bne.n	80189ce <_dtoa_r+0x37e>
 8018a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f000 808c 	beq.w	8018b48 <_dtoa_r+0x4f8>
 8018a30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a34:	4b99      	ldr	r3, [pc, #612]	; (8018c9c <_dtoa_r+0x64c>)
 8018a36:	2200      	movs	r2, #0
 8018a38:	4630      	mov	r0, r6
 8018a3a:	4639      	mov	r1, r7
 8018a3c:	f7e8 f84e 	bl	8000adc <__aeabi_dcmplt>
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f000 8081 	beq.w	8018b48 <_dtoa_r+0x4f8>
 8018a46:	9b01      	ldr	r3, [sp, #4]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d07d      	beq.n	8018b48 <_dtoa_r+0x4f8>
 8018a4c:	f1b9 0f00 	cmp.w	r9, #0
 8018a50:	dd3c      	ble.n	8018acc <_dtoa_r+0x47c>
 8018a52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018a56:	9307      	str	r3, [sp, #28]
 8018a58:	2200      	movs	r2, #0
 8018a5a:	4b91      	ldr	r3, [pc, #580]	; (8018ca0 <_dtoa_r+0x650>)
 8018a5c:	4630      	mov	r0, r6
 8018a5e:	4639      	mov	r1, r7
 8018a60:	f7e7 fdca 	bl	80005f8 <__aeabi_dmul>
 8018a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a68:	3501      	adds	r5, #1
 8018a6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018a6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a72:	4628      	mov	r0, r5
 8018a74:	f7e7 fd56 	bl	8000524 <__aeabi_i2d>
 8018a78:	4632      	mov	r2, r6
 8018a7a:	463b      	mov	r3, r7
 8018a7c:	f7e7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8018a80:	4b88      	ldr	r3, [pc, #544]	; (8018ca4 <_dtoa_r+0x654>)
 8018a82:	2200      	movs	r2, #0
 8018a84:	f7e7 fc02 	bl	800028c <__adddf3>
 8018a88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a90:	9303      	str	r3, [sp, #12]
 8018a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d15c      	bne.n	8018b52 <_dtoa_r+0x502>
 8018a98:	4b83      	ldr	r3, [pc, #524]	; (8018ca8 <_dtoa_r+0x658>)
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	4639      	mov	r1, r7
 8018aa0:	f7e7 fbf2 	bl	8000288 <__aeabi_dsub>
 8018aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018aa8:	4606      	mov	r6, r0
 8018aaa:	460f      	mov	r7, r1
 8018aac:	f7e8 f834 	bl	8000b18 <__aeabi_dcmpgt>
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	f040 8296 	bne.w	8018fe2 <_dtoa_r+0x992>
 8018ab6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018aba:	4630      	mov	r0, r6
 8018abc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ac0:	4639      	mov	r1, r7
 8018ac2:	f7e8 f80b 	bl	8000adc <__aeabi_dcmplt>
 8018ac6:	2800      	cmp	r0, #0
 8018ac8:	f040 8288 	bne.w	8018fdc <_dtoa_r+0x98c>
 8018acc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018ad0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	f2c0 8158 	blt.w	8018d8c <_dtoa_r+0x73c>
 8018adc:	f1ba 0f0e 	cmp.w	sl, #14
 8018ae0:	f300 8154 	bgt.w	8018d8c <_dtoa_r+0x73c>
 8018ae4:	4b6b      	ldr	r3, [pc, #428]	; (8018c94 <_dtoa_r+0x644>)
 8018ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018aea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f280 80e3 	bge.w	8018cbc <_dtoa_r+0x66c>
 8018af6:	9b01      	ldr	r3, [sp, #4]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	f300 80df 	bgt.w	8018cbc <_dtoa_r+0x66c>
 8018afe:	f040 826d 	bne.w	8018fdc <_dtoa_r+0x98c>
 8018b02:	4b69      	ldr	r3, [pc, #420]	; (8018ca8 <_dtoa_r+0x658>)
 8018b04:	2200      	movs	r2, #0
 8018b06:	4640      	mov	r0, r8
 8018b08:	4649      	mov	r1, r9
 8018b0a:	f7e7 fd75 	bl	80005f8 <__aeabi_dmul>
 8018b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b12:	f7e7 fff7 	bl	8000b04 <__aeabi_dcmpge>
 8018b16:	9e01      	ldr	r6, [sp, #4]
 8018b18:	4637      	mov	r7, r6
 8018b1a:	2800      	cmp	r0, #0
 8018b1c:	f040 8243 	bne.w	8018fa6 <_dtoa_r+0x956>
 8018b20:	9d00      	ldr	r5, [sp, #0]
 8018b22:	2331      	movs	r3, #49	; 0x31
 8018b24:	f805 3b01 	strb.w	r3, [r5], #1
 8018b28:	f10a 0a01 	add.w	sl, sl, #1
 8018b2c:	e23f      	b.n	8018fae <_dtoa_r+0x95e>
 8018b2e:	07f2      	lsls	r2, r6, #31
 8018b30:	d505      	bpl.n	8018b3e <_dtoa_r+0x4ee>
 8018b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018b36:	f7e7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8018b3a:	3501      	adds	r5, #1
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	1076      	asrs	r6, r6, #1
 8018b40:	3708      	adds	r7, #8
 8018b42:	e76c      	b.n	8018a1e <_dtoa_r+0x3ce>
 8018b44:	2502      	movs	r5, #2
 8018b46:	e76f      	b.n	8018a28 <_dtoa_r+0x3d8>
 8018b48:	9b01      	ldr	r3, [sp, #4]
 8018b4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8018b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8018b50:	e78d      	b.n	8018a6e <_dtoa_r+0x41e>
 8018b52:	9900      	ldr	r1, [sp, #0]
 8018b54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b58:	4b4e      	ldr	r3, [pc, #312]	; (8018c94 <_dtoa_r+0x644>)
 8018b5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b5e:	4401      	add	r1, r0
 8018b60:	9102      	str	r1, [sp, #8]
 8018b62:	9908      	ldr	r1, [sp, #32]
 8018b64:	eeb0 8a47 	vmov.f32	s16, s14
 8018b68:	eef0 8a67 	vmov.f32	s17, s15
 8018b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018b74:	2900      	cmp	r1, #0
 8018b76:	d045      	beq.n	8018c04 <_dtoa_r+0x5b4>
 8018b78:	494c      	ldr	r1, [pc, #304]	; (8018cac <_dtoa_r+0x65c>)
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	f7e7 fe66 	bl	800084c <__aeabi_ddiv>
 8018b80:	ec53 2b18 	vmov	r2, r3, d8
 8018b84:	f7e7 fb80 	bl	8000288 <__aeabi_dsub>
 8018b88:	9d00      	ldr	r5, [sp, #0]
 8018b8a:	ec41 0b18 	vmov	d8, r0, r1
 8018b8e:	4639      	mov	r1, r7
 8018b90:	4630      	mov	r0, r6
 8018b92:	f7e7 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8018b96:	900c      	str	r0, [sp, #48]	; 0x30
 8018b98:	f7e7 fcc4 	bl	8000524 <__aeabi_i2d>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	4639      	mov	r1, r7
 8018ba4:	f7e7 fb70 	bl	8000288 <__aeabi_dsub>
 8018ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018baa:	3330      	adds	r3, #48	; 0x30
 8018bac:	f805 3b01 	strb.w	r3, [r5], #1
 8018bb0:	ec53 2b18 	vmov	r2, r3, d8
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	460f      	mov	r7, r1
 8018bb8:	f7e7 ff90 	bl	8000adc <__aeabi_dcmplt>
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	d165      	bne.n	8018c8c <_dtoa_r+0x63c>
 8018bc0:	4632      	mov	r2, r6
 8018bc2:	463b      	mov	r3, r7
 8018bc4:	4935      	ldr	r1, [pc, #212]	; (8018c9c <_dtoa_r+0x64c>)
 8018bc6:	2000      	movs	r0, #0
 8018bc8:	f7e7 fb5e 	bl	8000288 <__aeabi_dsub>
 8018bcc:	ec53 2b18 	vmov	r2, r3, d8
 8018bd0:	f7e7 ff84 	bl	8000adc <__aeabi_dcmplt>
 8018bd4:	2800      	cmp	r0, #0
 8018bd6:	f040 80b9 	bne.w	8018d4c <_dtoa_r+0x6fc>
 8018bda:	9b02      	ldr	r3, [sp, #8]
 8018bdc:	429d      	cmp	r5, r3
 8018bde:	f43f af75 	beq.w	8018acc <_dtoa_r+0x47c>
 8018be2:	4b2f      	ldr	r3, [pc, #188]	; (8018ca0 <_dtoa_r+0x650>)
 8018be4:	ec51 0b18 	vmov	r0, r1, d8
 8018be8:	2200      	movs	r2, #0
 8018bea:	f7e7 fd05 	bl	80005f8 <__aeabi_dmul>
 8018bee:	4b2c      	ldr	r3, [pc, #176]	; (8018ca0 <_dtoa_r+0x650>)
 8018bf0:	ec41 0b18 	vmov	d8, r0, r1
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	4630      	mov	r0, r6
 8018bf8:	4639      	mov	r1, r7
 8018bfa:	f7e7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8018bfe:	4606      	mov	r6, r0
 8018c00:	460f      	mov	r7, r1
 8018c02:	e7c4      	b.n	8018b8e <_dtoa_r+0x53e>
 8018c04:	ec51 0b17 	vmov	r0, r1, d7
 8018c08:	f7e7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8018c0c:	9b02      	ldr	r3, [sp, #8]
 8018c0e:	9d00      	ldr	r5, [sp, #0]
 8018c10:	930c      	str	r3, [sp, #48]	; 0x30
 8018c12:	ec41 0b18 	vmov	d8, r0, r1
 8018c16:	4639      	mov	r1, r7
 8018c18:	4630      	mov	r0, r6
 8018c1a:	f7e7 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8018c1e:	9011      	str	r0, [sp, #68]	; 0x44
 8018c20:	f7e7 fc80 	bl	8000524 <__aeabi_i2d>
 8018c24:	4602      	mov	r2, r0
 8018c26:	460b      	mov	r3, r1
 8018c28:	4630      	mov	r0, r6
 8018c2a:	4639      	mov	r1, r7
 8018c2c:	f7e7 fb2c 	bl	8000288 <__aeabi_dsub>
 8018c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018c32:	3330      	adds	r3, #48	; 0x30
 8018c34:	f805 3b01 	strb.w	r3, [r5], #1
 8018c38:	9b02      	ldr	r3, [sp, #8]
 8018c3a:	429d      	cmp	r5, r3
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	460f      	mov	r7, r1
 8018c40:	f04f 0200 	mov.w	r2, #0
 8018c44:	d134      	bne.n	8018cb0 <_dtoa_r+0x660>
 8018c46:	4b19      	ldr	r3, [pc, #100]	; (8018cac <_dtoa_r+0x65c>)
 8018c48:	ec51 0b18 	vmov	r0, r1, d8
 8018c4c:	f7e7 fb1e 	bl	800028c <__adddf3>
 8018c50:	4602      	mov	r2, r0
 8018c52:	460b      	mov	r3, r1
 8018c54:	4630      	mov	r0, r6
 8018c56:	4639      	mov	r1, r7
 8018c58:	f7e7 ff5e 	bl	8000b18 <__aeabi_dcmpgt>
 8018c5c:	2800      	cmp	r0, #0
 8018c5e:	d175      	bne.n	8018d4c <_dtoa_r+0x6fc>
 8018c60:	ec53 2b18 	vmov	r2, r3, d8
 8018c64:	4911      	ldr	r1, [pc, #68]	; (8018cac <_dtoa_r+0x65c>)
 8018c66:	2000      	movs	r0, #0
 8018c68:	f7e7 fb0e 	bl	8000288 <__aeabi_dsub>
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	460b      	mov	r3, r1
 8018c70:	4630      	mov	r0, r6
 8018c72:	4639      	mov	r1, r7
 8018c74:	f7e7 ff32 	bl	8000adc <__aeabi_dcmplt>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	f43f af27 	beq.w	8018acc <_dtoa_r+0x47c>
 8018c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c80:	1e6b      	subs	r3, r5, #1
 8018c82:	930c      	str	r3, [sp, #48]	; 0x30
 8018c84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018c88:	2b30      	cmp	r3, #48	; 0x30
 8018c8a:	d0f8      	beq.n	8018c7e <_dtoa_r+0x62e>
 8018c8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c90:	e04a      	b.n	8018d28 <_dtoa_r+0x6d8>
 8018c92:	bf00      	nop
 8018c94:	0801b040 	.word	0x0801b040
 8018c98:	0801b018 	.word	0x0801b018
 8018c9c:	3ff00000 	.word	0x3ff00000
 8018ca0:	40240000 	.word	0x40240000
 8018ca4:	401c0000 	.word	0x401c0000
 8018ca8:	40140000 	.word	0x40140000
 8018cac:	3fe00000 	.word	0x3fe00000
 8018cb0:	4baf      	ldr	r3, [pc, #700]	; (8018f70 <_dtoa_r+0x920>)
 8018cb2:	f7e7 fca1 	bl	80005f8 <__aeabi_dmul>
 8018cb6:	4606      	mov	r6, r0
 8018cb8:	460f      	mov	r7, r1
 8018cba:	e7ac      	b.n	8018c16 <_dtoa_r+0x5c6>
 8018cbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018cc0:	9d00      	ldr	r5, [sp, #0]
 8018cc2:	4642      	mov	r2, r8
 8018cc4:	464b      	mov	r3, r9
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	4639      	mov	r1, r7
 8018cca:	f7e7 fdbf 	bl	800084c <__aeabi_ddiv>
 8018cce:	f7e7 ff43 	bl	8000b58 <__aeabi_d2iz>
 8018cd2:	9002      	str	r0, [sp, #8]
 8018cd4:	f7e7 fc26 	bl	8000524 <__aeabi_i2d>
 8018cd8:	4642      	mov	r2, r8
 8018cda:	464b      	mov	r3, r9
 8018cdc:	f7e7 fc8c 	bl	80005f8 <__aeabi_dmul>
 8018ce0:	4602      	mov	r2, r0
 8018ce2:	460b      	mov	r3, r1
 8018ce4:	4630      	mov	r0, r6
 8018ce6:	4639      	mov	r1, r7
 8018ce8:	f7e7 face 	bl	8000288 <__aeabi_dsub>
 8018cec:	9e02      	ldr	r6, [sp, #8]
 8018cee:	9f01      	ldr	r7, [sp, #4]
 8018cf0:	3630      	adds	r6, #48	; 0x30
 8018cf2:	f805 6b01 	strb.w	r6, [r5], #1
 8018cf6:	9e00      	ldr	r6, [sp, #0]
 8018cf8:	1bae      	subs	r6, r5, r6
 8018cfa:	42b7      	cmp	r7, r6
 8018cfc:	4602      	mov	r2, r0
 8018cfe:	460b      	mov	r3, r1
 8018d00:	d137      	bne.n	8018d72 <_dtoa_r+0x722>
 8018d02:	f7e7 fac3 	bl	800028c <__adddf3>
 8018d06:	4642      	mov	r2, r8
 8018d08:	464b      	mov	r3, r9
 8018d0a:	4606      	mov	r6, r0
 8018d0c:	460f      	mov	r7, r1
 8018d0e:	f7e7 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 8018d12:	b9c8      	cbnz	r0, 8018d48 <_dtoa_r+0x6f8>
 8018d14:	4642      	mov	r2, r8
 8018d16:	464b      	mov	r3, r9
 8018d18:	4630      	mov	r0, r6
 8018d1a:	4639      	mov	r1, r7
 8018d1c:	f7e7 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d20:	b110      	cbz	r0, 8018d28 <_dtoa_r+0x6d8>
 8018d22:	9b02      	ldr	r3, [sp, #8]
 8018d24:	07d9      	lsls	r1, r3, #31
 8018d26:	d40f      	bmi.n	8018d48 <_dtoa_r+0x6f8>
 8018d28:	4620      	mov	r0, r4
 8018d2a:	4659      	mov	r1, fp
 8018d2c:	f000 fbc6 	bl	80194bc <_Bfree>
 8018d30:	2300      	movs	r3, #0
 8018d32:	702b      	strb	r3, [r5, #0]
 8018d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d36:	f10a 0001 	add.w	r0, sl, #1
 8018d3a:	6018      	str	r0, [r3, #0]
 8018d3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	f43f acd8 	beq.w	80186f4 <_dtoa_r+0xa4>
 8018d44:	601d      	str	r5, [r3, #0]
 8018d46:	e4d5      	b.n	80186f4 <_dtoa_r+0xa4>
 8018d48:	f8cd a01c 	str.w	sl, [sp, #28]
 8018d4c:	462b      	mov	r3, r5
 8018d4e:	461d      	mov	r5, r3
 8018d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018d54:	2a39      	cmp	r2, #57	; 0x39
 8018d56:	d108      	bne.n	8018d6a <_dtoa_r+0x71a>
 8018d58:	9a00      	ldr	r2, [sp, #0]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d1f7      	bne.n	8018d4e <_dtoa_r+0x6fe>
 8018d5e:	9a07      	ldr	r2, [sp, #28]
 8018d60:	9900      	ldr	r1, [sp, #0]
 8018d62:	3201      	adds	r2, #1
 8018d64:	9207      	str	r2, [sp, #28]
 8018d66:	2230      	movs	r2, #48	; 0x30
 8018d68:	700a      	strb	r2, [r1, #0]
 8018d6a:	781a      	ldrb	r2, [r3, #0]
 8018d6c:	3201      	adds	r2, #1
 8018d6e:	701a      	strb	r2, [r3, #0]
 8018d70:	e78c      	b.n	8018c8c <_dtoa_r+0x63c>
 8018d72:	4b7f      	ldr	r3, [pc, #508]	; (8018f70 <_dtoa_r+0x920>)
 8018d74:	2200      	movs	r2, #0
 8018d76:	f7e7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	4606      	mov	r6, r0
 8018d80:	460f      	mov	r7, r1
 8018d82:	f7e7 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d09b      	beq.n	8018cc2 <_dtoa_r+0x672>
 8018d8a:	e7cd      	b.n	8018d28 <_dtoa_r+0x6d8>
 8018d8c:	9a08      	ldr	r2, [sp, #32]
 8018d8e:	2a00      	cmp	r2, #0
 8018d90:	f000 80c4 	beq.w	8018f1c <_dtoa_r+0x8cc>
 8018d94:	9a05      	ldr	r2, [sp, #20]
 8018d96:	2a01      	cmp	r2, #1
 8018d98:	f300 80a8 	bgt.w	8018eec <_dtoa_r+0x89c>
 8018d9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d9e:	2a00      	cmp	r2, #0
 8018da0:	f000 80a0 	beq.w	8018ee4 <_dtoa_r+0x894>
 8018da4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018da8:	9e06      	ldr	r6, [sp, #24]
 8018daa:	4645      	mov	r5, r8
 8018dac:	9a04      	ldr	r2, [sp, #16]
 8018dae:	2101      	movs	r1, #1
 8018db0:	441a      	add	r2, r3
 8018db2:	4620      	mov	r0, r4
 8018db4:	4498      	add	r8, r3
 8018db6:	9204      	str	r2, [sp, #16]
 8018db8:	f000 fc3c 	bl	8019634 <__i2b>
 8018dbc:	4607      	mov	r7, r0
 8018dbe:	2d00      	cmp	r5, #0
 8018dc0:	dd0b      	ble.n	8018dda <_dtoa_r+0x78a>
 8018dc2:	9b04      	ldr	r3, [sp, #16]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	dd08      	ble.n	8018dda <_dtoa_r+0x78a>
 8018dc8:	42ab      	cmp	r3, r5
 8018dca:	9a04      	ldr	r2, [sp, #16]
 8018dcc:	bfa8      	it	ge
 8018dce:	462b      	movge	r3, r5
 8018dd0:	eba8 0803 	sub.w	r8, r8, r3
 8018dd4:	1aed      	subs	r5, r5, r3
 8018dd6:	1ad3      	subs	r3, r2, r3
 8018dd8:	9304      	str	r3, [sp, #16]
 8018dda:	9b06      	ldr	r3, [sp, #24]
 8018ddc:	b1fb      	cbz	r3, 8018e1e <_dtoa_r+0x7ce>
 8018dde:	9b08      	ldr	r3, [sp, #32]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	f000 809f 	beq.w	8018f24 <_dtoa_r+0x8d4>
 8018de6:	2e00      	cmp	r6, #0
 8018de8:	dd11      	ble.n	8018e0e <_dtoa_r+0x7be>
 8018dea:	4639      	mov	r1, r7
 8018dec:	4632      	mov	r2, r6
 8018dee:	4620      	mov	r0, r4
 8018df0:	f000 fcdc 	bl	80197ac <__pow5mult>
 8018df4:	465a      	mov	r2, fp
 8018df6:	4601      	mov	r1, r0
 8018df8:	4607      	mov	r7, r0
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	f000 fc30 	bl	8019660 <__multiply>
 8018e00:	4659      	mov	r1, fp
 8018e02:	9007      	str	r0, [sp, #28]
 8018e04:	4620      	mov	r0, r4
 8018e06:	f000 fb59 	bl	80194bc <_Bfree>
 8018e0a:	9b07      	ldr	r3, [sp, #28]
 8018e0c:	469b      	mov	fp, r3
 8018e0e:	9b06      	ldr	r3, [sp, #24]
 8018e10:	1b9a      	subs	r2, r3, r6
 8018e12:	d004      	beq.n	8018e1e <_dtoa_r+0x7ce>
 8018e14:	4659      	mov	r1, fp
 8018e16:	4620      	mov	r0, r4
 8018e18:	f000 fcc8 	bl	80197ac <__pow5mult>
 8018e1c:	4683      	mov	fp, r0
 8018e1e:	2101      	movs	r1, #1
 8018e20:	4620      	mov	r0, r4
 8018e22:	f000 fc07 	bl	8019634 <__i2b>
 8018e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	4606      	mov	r6, r0
 8018e2c:	dd7c      	ble.n	8018f28 <_dtoa_r+0x8d8>
 8018e2e:	461a      	mov	r2, r3
 8018e30:	4601      	mov	r1, r0
 8018e32:	4620      	mov	r0, r4
 8018e34:	f000 fcba 	bl	80197ac <__pow5mult>
 8018e38:	9b05      	ldr	r3, [sp, #20]
 8018e3a:	2b01      	cmp	r3, #1
 8018e3c:	4606      	mov	r6, r0
 8018e3e:	dd76      	ble.n	8018f2e <_dtoa_r+0x8de>
 8018e40:	2300      	movs	r3, #0
 8018e42:	9306      	str	r3, [sp, #24]
 8018e44:	6933      	ldr	r3, [r6, #16]
 8018e46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018e4a:	6918      	ldr	r0, [r3, #16]
 8018e4c:	f000 fba2 	bl	8019594 <__hi0bits>
 8018e50:	f1c0 0020 	rsb	r0, r0, #32
 8018e54:	9b04      	ldr	r3, [sp, #16]
 8018e56:	4418      	add	r0, r3
 8018e58:	f010 001f 	ands.w	r0, r0, #31
 8018e5c:	f000 8086 	beq.w	8018f6c <_dtoa_r+0x91c>
 8018e60:	f1c0 0320 	rsb	r3, r0, #32
 8018e64:	2b04      	cmp	r3, #4
 8018e66:	dd7f      	ble.n	8018f68 <_dtoa_r+0x918>
 8018e68:	f1c0 001c 	rsb	r0, r0, #28
 8018e6c:	9b04      	ldr	r3, [sp, #16]
 8018e6e:	4403      	add	r3, r0
 8018e70:	4480      	add	r8, r0
 8018e72:	4405      	add	r5, r0
 8018e74:	9304      	str	r3, [sp, #16]
 8018e76:	f1b8 0f00 	cmp.w	r8, #0
 8018e7a:	dd05      	ble.n	8018e88 <_dtoa_r+0x838>
 8018e7c:	4659      	mov	r1, fp
 8018e7e:	4642      	mov	r2, r8
 8018e80:	4620      	mov	r0, r4
 8018e82:	f000 fced 	bl	8019860 <__lshift>
 8018e86:	4683      	mov	fp, r0
 8018e88:	9b04      	ldr	r3, [sp, #16]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	dd05      	ble.n	8018e9a <_dtoa_r+0x84a>
 8018e8e:	4631      	mov	r1, r6
 8018e90:	461a      	mov	r2, r3
 8018e92:	4620      	mov	r0, r4
 8018e94:	f000 fce4 	bl	8019860 <__lshift>
 8018e98:	4606      	mov	r6, r0
 8018e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d069      	beq.n	8018f74 <_dtoa_r+0x924>
 8018ea0:	4631      	mov	r1, r6
 8018ea2:	4658      	mov	r0, fp
 8018ea4:	f000 fd48 	bl	8019938 <__mcmp>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	da63      	bge.n	8018f74 <_dtoa_r+0x924>
 8018eac:	2300      	movs	r3, #0
 8018eae:	4659      	mov	r1, fp
 8018eb0:	220a      	movs	r2, #10
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f000 fb24 	bl	8019500 <__multadd>
 8018eb8:	9b08      	ldr	r3, [sp, #32]
 8018eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018ebe:	4683      	mov	fp, r0
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	f000 818f 	beq.w	80191e4 <_dtoa_r+0xb94>
 8018ec6:	4639      	mov	r1, r7
 8018ec8:	2300      	movs	r3, #0
 8018eca:	220a      	movs	r2, #10
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f000 fb17 	bl	8019500 <__multadd>
 8018ed2:	f1b9 0f00 	cmp.w	r9, #0
 8018ed6:	4607      	mov	r7, r0
 8018ed8:	f300 808e 	bgt.w	8018ff8 <_dtoa_r+0x9a8>
 8018edc:	9b05      	ldr	r3, [sp, #20]
 8018ede:	2b02      	cmp	r3, #2
 8018ee0:	dc50      	bgt.n	8018f84 <_dtoa_r+0x934>
 8018ee2:	e089      	b.n	8018ff8 <_dtoa_r+0x9a8>
 8018ee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ee6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018eea:	e75d      	b.n	8018da8 <_dtoa_r+0x758>
 8018eec:	9b01      	ldr	r3, [sp, #4]
 8018eee:	1e5e      	subs	r6, r3, #1
 8018ef0:	9b06      	ldr	r3, [sp, #24]
 8018ef2:	42b3      	cmp	r3, r6
 8018ef4:	bfbf      	itttt	lt
 8018ef6:	9b06      	ldrlt	r3, [sp, #24]
 8018ef8:	9606      	strlt	r6, [sp, #24]
 8018efa:	1af2      	sublt	r2, r6, r3
 8018efc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018efe:	bfb6      	itet	lt
 8018f00:	189b      	addlt	r3, r3, r2
 8018f02:	1b9e      	subge	r6, r3, r6
 8018f04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018f06:	9b01      	ldr	r3, [sp, #4]
 8018f08:	bfb8      	it	lt
 8018f0a:	2600      	movlt	r6, #0
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	bfb5      	itete	lt
 8018f10:	eba8 0503 	sublt.w	r5, r8, r3
 8018f14:	9b01      	ldrge	r3, [sp, #4]
 8018f16:	2300      	movlt	r3, #0
 8018f18:	4645      	movge	r5, r8
 8018f1a:	e747      	b.n	8018dac <_dtoa_r+0x75c>
 8018f1c:	9e06      	ldr	r6, [sp, #24]
 8018f1e:	9f08      	ldr	r7, [sp, #32]
 8018f20:	4645      	mov	r5, r8
 8018f22:	e74c      	b.n	8018dbe <_dtoa_r+0x76e>
 8018f24:	9a06      	ldr	r2, [sp, #24]
 8018f26:	e775      	b.n	8018e14 <_dtoa_r+0x7c4>
 8018f28:	9b05      	ldr	r3, [sp, #20]
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	dc18      	bgt.n	8018f60 <_dtoa_r+0x910>
 8018f2e:	9b02      	ldr	r3, [sp, #8]
 8018f30:	b9b3      	cbnz	r3, 8018f60 <_dtoa_r+0x910>
 8018f32:	9b03      	ldr	r3, [sp, #12]
 8018f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018f38:	b9a3      	cbnz	r3, 8018f64 <_dtoa_r+0x914>
 8018f3a:	9b03      	ldr	r3, [sp, #12]
 8018f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f40:	0d1b      	lsrs	r3, r3, #20
 8018f42:	051b      	lsls	r3, r3, #20
 8018f44:	b12b      	cbz	r3, 8018f52 <_dtoa_r+0x902>
 8018f46:	9b04      	ldr	r3, [sp, #16]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	9304      	str	r3, [sp, #16]
 8018f4c:	f108 0801 	add.w	r8, r8, #1
 8018f50:	2301      	movs	r3, #1
 8018f52:	9306      	str	r3, [sp, #24]
 8018f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	f47f af74 	bne.w	8018e44 <_dtoa_r+0x7f4>
 8018f5c:	2001      	movs	r0, #1
 8018f5e:	e779      	b.n	8018e54 <_dtoa_r+0x804>
 8018f60:	2300      	movs	r3, #0
 8018f62:	e7f6      	b.n	8018f52 <_dtoa_r+0x902>
 8018f64:	9b02      	ldr	r3, [sp, #8]
 8018f66:	e7f4      	b.n	8018f52 <_dtoa_r+0x902>
 8018f68:	d085      	beq.n	8018e76 <_dtoa_r+0x826>
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	301c      	adds	r0, #28
 8018f6e:	e77d      	b.n	8018e6c <_dtoa_r+0x81c>
 8018f70:	40240000 	.word	0x40240000
 8018f74:	9b01      	ldr	r3, [sp, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	dc38      	bgt.n	8018fec <_dtoa_r+0x99c>
 8018f7a:	9b05      	ldr	r3, [sp, #20]
 8018f7c:	2b02      	cmp	r3, #2
 8018f7e:	dd35      	ble.n	8018fec <_dtoa_r+0x99c>
 8018f80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f84:	f1b9 0f00 	cmp.w	r9, #0
 8018f88:	d10d      	bne.n	8018fa6 <_dtoa_r+0x956>
 8018f8a:	4631      	mov	r1, r6
 8018f8c:	464b      	mov	r3, r9
 8018f8e:	2205      	movs	r2, #5
 8018f90:	4620      	mov	r0, r4
 8018f92:	f000 fab5 	bl	8019500 <__multadd>
 8018f96:	4601      	mov	r1, r0
 8018f98:	4606      	mov	r6, r0
 8018f9a:	4658      	mov	r0, fp
 8018f9c:	f000 fccc 	bl	8019938 <__mcmp>
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	f73f adbd 	bgt.w	8018b20 <_dtoa_r+0x4d0>
 8018fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fa8:	9d00      	ldr	r5, [sp, #0]
 8018faa:	ea6f 0a03 	mvn.w	sl, r3
 8018fae:	f04f 0800 	mov.w	r8, #0
 8018fb2:	4631      	mov	r1, r6
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f000 fa81 	bl	80194bc <_Bfree>
 8018fba:	2f00      	cmp	r7, #0
 8018fbc:	f43f aeb4 	beq.w	8018d28 <_dtoa_r+0x6d8>
 8018fc0:	f1b8 0f00 	cmp.w	r8, #0
 8018fc4:	d005      	beq.n	8018fd2 <_dtoa_r+0x982>
 8018fc6:	45b8      	cmp	r8, r7
 8018fc8:	d003      	beq.n	8018fd2 <_dtoa_r+0x982>
 8018fca:	4641      	mov	r1, r8
 8018fcc:	4620      	mov	r0, r4
 8018fce:	f000 fa75 	bl	80194bc <_Bfree>
 8018fd2:	4639      	mov	r1, r7
 8018fd4:	4620      	mov	r0, r4
 8018fd6:	f000 fa71 	bl	80194bc <_Bfree>
 8018fda:	e6a5      	b.n	8018d28 <_dtoa_r+0x6d8>
 8018fdc:	2600      	movs	r6, #0
 8018fde:	4637      	mov	r7, r6
 8018fe0:	e7e1      	b.n	8018fa6 <_dtoa_r+0x956>
 8018fe2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018fe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018fe8:	4637      	mov	r7, r6
 8018fea:	e599      	b.n	8018b20 <_dtoa_r+0x4d0>
 8018fec:	9b08      	ldr	r3, [sp, #32]
 8018fee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	f000 80fd 	beq.w	80191f2 <_dtoa_r+0xba2>
 8018ff8:	2d00      	cmp	r5, #0
 8018ffa:	dd05      	ble.n	8019008 <_dtoa_r+0x9b8>
 8018ffc:	4639      	mov	r1, r7
 8018ffe:	462a      	mov	r2, r5
 8019000:	4620      	mov	r0, r4
 8019002:	f000 fc2d 	bl	8019860 <__lshift>
 8019006:	4607      	mov	r7, r0
 8019008:	9b06      	ldr	r3, [sp, #24]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d05c      	beq.n	80190c8 <_dtoa_r+0xa78>
 801900e:	6879      	ldr	r1, [r7, #4]
 8019010:	4620      	mov	r0, r4
 8019012:	f000 fa13 	bl	801943c <_Balloc>
 8019016:	4605      	mov	r5, r0
 8019018:	b928      	cbnz	r0, 8019026 <_dtoa_r+0x9d6>
 801901a:	4b80      	ldr	r3, [pc, #512]	; (801921c <_dtoa_r+0xbcc>)
 801901c:	4602      	mov	r2, r0
 801901e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019022:	f7ff bb2e 	b.w	8018682 <_dtoa_r+0x32>
 8019026:	693a      	ldr	r2, [r7, #16]
 8019028:	3202      	adds	r2, #2
 801902a:	0092      	lsls	r2, r2, #2
 801902c:	f107 010c 	add.w	r1, r7, #12
 8019030:	300c      	adds	r0, #12
 8019032:	f7fe fc7b 	bl	801792c <memcpy>
 8019036:	2201      	movs	r2, #1
 8019038:	4629      	mov	r1, r5
 801903a:	4620      	mov	r0, r4
 801903c:	f000 fc10 	bl	8019860 <__lshift>
 8019040:	9b00      	ldr	r3, [sp, #0]
 8019042:	3301      	adds	r3, #1
 8019044:	9301      	str	r3, [sp, #4]
 8019046:	9b00      	ldr	r3, [sp, #0]
 8019048:	444b      	add	r3, r9
 801904a:	9307      	str	r3, [sp, #28]
 801904c:	9b02      	ldr	r3, [sp, #8]
 801904e:	f003 0301 	and.w	r3, r3, #1
 8019052:	46b8      	mov	r8, r7
 8019054:	9306      	str	r3, [sp, #24]
 8019056:	4607      	mov	r7, r0
 8019058:	9b01      	ldr	r3, [sp, #4]
 801905a:	4631      	mov	r1, r6
 801905c:	3b01      	subs	r3, #1
 801905e:	4658      	mov	r0, fp
 8019060:	9302      	str	r3, [sp, #8]
 8019062:	f7ff fa67 	bl	8018534 <quorem>
 8019066:	4603      	mov	r3, r0
 8019068:	3330      	adds	r3, #48	; 0x30
 801906a:	9004      	str	r0, [sp, #16]
 801906c:	4641      	mov	r1, r8
 801906e:	4658      	mov	r0, fp
 8019070:	9308      	str	r3, [sp, #32]
 8019072:	f000 fc61 	bl	8019938 <__mcmp>
 8019076:	463a      	mov	r2, r7
 8019078:	4681      	mov	r9, r0
 801907a:	4631      	mov	r1, r6
 801907c:	4620      	mov	r0, r4
 801907e:	f000 fc77 	bl	8019970 <__mdiff>
 8019082:	68c2      	ldr	r2, [r0, #12]
 8019084:	9b08      	ldr	r3, [sp, #32]
 8019086:	4605      	mov	r5, r0
 8019088:	bb02      	cbnz	r2, 80190cc <_dtoa_r+0xa7c>
 801908a:	4601      	mov	r1, r0
 801908c:	4658      	mov	r0, fp
 801908e:	f000 fc53 	bl	8019938 <__mcmp>
 8019092:	9b08      	ldr	r3, [sp, #32]
 8019094:	4602      	mov	r2, r0
 8019096:	4629      	mov	r1, r5
 8019098:	4620      	mov	r0, r4
 801909a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801909e:	f000 fa0d 	bl	80194bc <_Bfree>
 80190a2:	9b05      	ldr	r3, [sp, #20]
 80190a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190a6:	9d01      	ldr	r5, [sp, #4]
 80190a8:	ea43 0102 	orr.w	r1, r3, r2
 80190ac:	9b06      	ldr	r3, [sp, #24]
 80190ae:	430b      	orrs	r3, r1
 80190b0:	9b08      	ldr	r3, [sp, #32]
 80190b2:	d10d      	bne.n	80190d0 <_dtoa_r+0xa80>
 80190b4:	2b39      	cmp	r3, #57	; 0x39
 80190b6:	d029      	beq.n	801910c <_dtoa_r+0xabc>
 80190b8:	f1b9 0f00 	cmp.w	r9, #0
 80190bc:	dd01      	ble.n	80190c2 <_dtoa_r+0xa72>
 80190be:	9b04      	ldr	r3, [sp, #16]
 80190c0:	3331      	adds	r3, #49	; 0x31
 80190c2:	9a02      	ldr	r2, [sp, #8]
 80190c4:	7013      	strb	r3, [r2, #0]
 80190c6:	e774      	b.n	8018fb2 <_dtoa_r+0x962>
 80190c8:	4638      	mov	r0, r7
 80190ca:	e7b9      	b.n	8019040 <_dtoa_r+0x9f0>
 80190cc:	2201      	movs	r2, #1
 80190ce:	e7e2      	b.n	8019096 <_dtoa_r+0xa46>
 80190d0:	f1b9 0f00 	cmp.w	r9, #0
 80190d4:	db06      	blt.n	80190e4 <_dtoa_r+0xa94>
 80190d6:	9905      	ldr	r1, [sp, #20]
 80190d8:	ea41 0909 	orr.w	r9, r1, r9
 80190dc:	9906      	ldr	r1, [sp, #24]
 80190de:	ea59 0101 	orrs.w	r1, r9, r1
 80190e2:	d120      	bne.n	8019126 <_dtoa_r+0xad6>
 80190e4:	2a00      	cmp	r2, #0
 80190e6:	ddec      	ble.n	80190c2 <_dtoa_r+0xa72>
 80190e8:	4659      	mov	r1, fp
 80190ea:	2201      	movs	r2, #1
 80190ec:	4620      	mov	r0, r4
 80190ee:	9301      	str	r3, [sp, #4]
 80190f0:	f000 fbb6 	bl	8019860 <__lshift>
 80190f4:	4631      	mov	r1, r6
 80190f6:	4683      	mov	fp, r0
 80190f8:	f000 fc1e 	bl	8019938 <__mcmp>
 80190fc:	2800      	cmp	r0, #0
 80190fe:	9b01      	ldr	r3, [sp, #4]
 8019100:	dc02      	bgt.n	8019108 <_dtoa_r+0xab8>
 8019102:	d1de      	bne.n	80190c2 <_dtoa_r+0xa72>
 8019104:	07da      	lsls	r2, r3, #31
 8019106:	d5dc      	bpl.n	80190c2 <_dtoa_r+0xa72>
 8019108:	2b39      	cmp	r3, #57	; 0x39
 801910a:	d1d8      	bne.n	80190be <_dtoa_r+0xa6e>
 801910c:	9a02      	ldr	r2, [sp, #8]
 801910e:	2339      	movs	r3, #57	; 0x39
 8019110:	7013      	strb	r3, [r2, #0]
 8019112:	462b      	mov	r3, r5
 8019114:	461d      	mov	r5, r3
 8019116:	3b01      	subs	r3, #1
 8019118:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801911c:	2a39      	cmp	r2, #57	; 0x39
 801911e:	d050      	beq.n	80191c2 <_dtoa_r+0xb72>
 8019120:	3201      	adds	r2, #1
 8019122:	701a      	strb	r2, [r3, #0]
 8019124:	e745      	b.n	8018fb2 <_dtoa_r+0x962>
 8019126:	2a00      	cmp	r2, #0
 8019128:	dd03      	ble.n	8019132 <_dtoa_r+0xae2>
 801912a:	2b39      	cmp	r3, #57	; 0x39
 801912c:	d0ee      	beq.n	801910c <_dtoa_r+0xabc>
 801912e:	3301      	adds	r3, #1
 8019130:	e7c7      	b.n	80190c2 <_dtoa_r+0xa72>
 8019132:	9a01      	ldr	r2, [sp, #4]
 8019134:	9907      	ldr	r1, [sp, #28]
 8019136:	f802 3c01 	strb.w	r3, [r2, #-1]
 801913a:	428a      	cmp	r2, r1
 801913c:	d02a      	beq.n	8019194 <_dtoa_r+0xb44>
 801913e:	4659      	mov	r1, fp
 8019140:	2300      	movs	r3, #0
 8019142:	220a      	movs	r2, #10
 8019144:	4620      	mov	r0, r4
 8019146:	f000 f9db 	bl	8019500 <__multadd>
 801914a:	45b8      	cmp	r8, r7
 801914c:	4683      	mov	fp, r0
 801914e:	f04f 0300 	mov.w	r3, #0
 8019152:	f04f 020a 	mov.w	r2, #10
 8019156:	4641      	mov	r1, r8
 8019158:	4620      	mov	r0, r4
 801915a:	d107      	bne.n	801916c <_dtoa_r+0xb1c>
 801915c:	f000 f9d0 	bl	8019500 <__multadd>
 8019160:	4680      	mov	r8, r0
 8019162:	4607      	mov	r7, r0
 8019164:	9b01      	ldr	r3, [sp, #4]
 8019166:	3301      	adds	r3, #1
 8019168:	9301      	str	r3, [sp, #4]
 801916a:	e775      	b.n	8019058 <_dtoa_r+0xa08>
 801916c:	f000 f9c8 	bl	8019500 <__multadd>
 8019170:	4639      	mov	r1, r7
 8019172:	4680      	mov	r8, r0
 8019174:	2300      	movs	r3, #0
 8019176:	220a      	movs	r2, #10
 8019178:	4620      	mov	r0, r4
 801917a:	f000 f9c1 	bl	8019500 <__multadd>
 801917e:	4607      	mov	r7, r0
 8019180:	e7f0      	b.n	8019164 <_dtoa_r+0xb14>
 8019182:	f1b9 0f00 	cmp.w	r9, #0
 8019186:	9a00      	ldr	r2, [sp, #0]
 8019188:	bfcc      	ite	gt
 801918a:	464d      	movgt	r5, r9
 801918c:	2501      	movle	r5, #1
 801918e:	4415      	add	r5, r2
 8019190:	f04f 0800 	mov.w	r8, #0
 8019194:	4659      	mov	r1, fp
 8019196:	2201      	movs	r2, #1
 8019198:	4620      	mov	r0, r4
 801919a:	9301      	str	r3, [sp, #4]
 801919c:	f000 fb60 	bl	8019860 <__lshift>
 80191a0:	4631      	mov	r1, r6
 80191a2:	4683      	mov	fp, r0
 80191a4:	f000 fbc8 	bl	8019938 <__mcmp>
 80191a8:	2800      	cmp	r0, #0
 80191aa:	dcb2      	bgt.n	8019112 <_dtoa_r+0xac2>
 80191ac:	d102      	bne.n	80191b4 <_dtoa_r+0xb64>
 80191ae:	9b01      	ldr	r3, [sp, #4]
 80191b0:	07db      	lsls	r3, r3, #31
 80191b2:	d4ae      	bmi.n	8019112 <_dtoa_r+0xac2>
 80191b4:	462b      	mov	r3, r5
 80191b6:	461d      	mov	r5, r3
 80191b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80191bc:	2a30      	cmp	r2, #48	; 0x30
 80191be:	d0fa      	beq.n	80191b6 <_dtoa_r+0xb66>
 80191c0:	e6f7      	b.n	8018fb2 <_dtoa_r+0x962>
 80191c2:	9a00      	ldr	r2, [sp, #0]
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d1a5      	bne.n	8019114 <_dtoa_r+0xac4>
 80191c8:	f10a 0a01 	add.w	sl, sl, #1
 80191cc:	2331      	movs	r3, #49	; 0x31
 80191ce:	e779      	b.n	80190c4 <_dtoa_r+0xa74>
 80191d0:	4b13      	ldr	r3, [pc, #76]	; (8019220 <_dtoa_r+0xbd0>)
 80191d2:	f7ff baaf 	b.w	8018734 <_dtoa_r+0xe4>
 80191d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80191d8:	2b00      	cmp	r3, #0
 80191da:	f47f aa86 	bne.w	80186ea <_dtoa_r+0x9a>
 80191de:	4b11      	ldr	r3, [pc, #68]	; (8019224 <_dtoa_r+0xbd4>)
 80191e0:	f7ff baa8 	b.w	8018734 <_dtoa_r+0xe4>
 80191e4:	f1b9 0f00 	cmp.w	r9, #0
 80191e8:	dc03      	bgt.n	80191f2 <_dtoa_r+0xba2>
 80191ea:	9b05      	ldr	r3, [sp, #20]
 80191ec:	2b02      	cmp	r3, #2
 80191ee:	f73f aec9 	bgt.w	8018f84 <_dtoa_r+0x934>
 80191f2:	9d00      	ldr	r5, [sp, #0]
 80191f4:	4631      	mov	r1, r6
 80191f6:	4658      	mov	r0, fp
 80191f8:	f7ff f99c 	bl	8018534 <quorem>
 80191fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019200:	f805 3b01 	strb.w	r3, [r5], #1
 8019204:	9a00      	ldr	r2, [sp, #0]
 8019206:	1aaa      	subs	r2, r5, r2
 8019208:	4591      	cmp	r9, r2
 801920a:	ddba      	ble.n	8019182 <_dtoa_r+0xb32>
 801920c:	4659      	mov	r1, fp
 801920e:	2300      	movs	r3, #0
 8019210:	220a      	movs	r2, #10
 8019212:	4620      	mov	r0, r4
 8019214:	f000 f974 	bl	8019500 <__multadd>
 8019218:	4683      	mov	fp, r0
 801921a:	e7eb      	b.n	80191f4 <_dtoa_r+0xba4>
 801921c:	0801af43 	.word	0x0801af43
 8019220:	0801ae9c 	.word	0x0801ae9c
 8019224:	0801aec0 	.word	0x0801aec0

08019228 <std>:
 8019228:	2300      	movs	r3, #0
 801922a:	b510      	push	{r4, lr}
 801922c:	4604      	mov	r4, r0
 801922e:	e9c0 3300 	strd	r3, r3, [r0]
 8019232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019236:	6083      	str	r3, [r0, #8]
 8019238:	8181      	strh	r1, [r0, #12]
 801923a:	6643      	str	r3, [r0, #100]	; 0x64
 801923c:	81c2      	strh	r2, [r0, #14]
 801923e:	6183      	str	r3, [r0, #24]
 8019240:	4619      	mov	r1, r3
 8019242:	2208      	movs	r2, #8
 8019244:	305c      	adds	r0, #92	; 0x5c
 8019246:	f7fe fb99 	bl	801797c <memset>
 801924a:	4b05      	ldr	r3, [pc, #20]	; (8019260 <std+0x38>)
 801924c:	6263      	str	r3, [r4, #36]	; 0x24
 801924e:	4b05      	ldr	r3, [pc, #20]	; (8019264 <std+0x3c>)
 8019250:	62a3      	str	r3, [r4, #40]	; 0x28
 8019252:	4b05      	ldr	r3, [pc, #20]	; (8019268 <std+0x40>)
 8019254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019256:	4b05      	ldr	r3, [pc, #20]	; (801926c <std+0x44>)
 8019258:	6224      	str	r4, [r4, #32]
 801925a:	6323      	str	r3, [r4, #48]	; 0x30
 801925c:	bd10      	pop	{r4, pc}
 801925e:	bf00      	nop
 8019260:	0801a0c1 	.word	0x0801a0c1
 8019264:	0801a0e3 	.word	0x0801a0e3
 8019268:	0801a11b 	.word	0x0801a11b
 801926c:	0801a13f 	.word	0x0801a13f

08019270 <_cleanup_r>:
 8019270:	4901      	ldr	r1, [pc, #4]	; (8019278 <_cleanup_r+0x8>)
 8019272:	f000 b8af 	b.w	80193d4 <_fwalk_reent>
 8019276:	bf00      	nop
 8019278:	0801a455 	.word	0x0801a455

0801927c <__sfmoreglue>:
 801927c:	b570      	push	{r4, r5, r6, lr}
 801927e:	1e4a      	subs	r2, r1, #1
 8019280:	2568      	movs	r5, #104	; 0x68
 8019282:	4355      	muls	r5, r2
 8019284:	460e      	mov	r6, r1
 8019286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801928a:	f7fe fbcf 	bl	8017a2c <_malloc_r>
 801928e:	4604      	mov	r4, r0
 8019290:	b140      	cbz	r0, 80192a4 <__sfmoreglue+0x28>
 8019292:	2100      	movs	r1, #0
 8019294:	e9c0 1600 	strd	r1, r6, [r0]
 8019298:	300c      	adds	r0, #12
 801929a:	60a0      	str	r0, [r4, #8]
 801929c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80192a0:	f7fe fb6c 	bl	801797c <memset>
 80192a4:	4620      	mov	r0, r4
 80192a6:	bd70      	pop	{r4, r5, r6, pc}

080192a8 <__sfp_lock_acquire>:
 80192a8:	4801      	ldr	r0, [pc, #4]	; (80192b0 <__sfp_lock_acquire+0x8>)
 80192aa:	f000 b8b8 	b.w	801941e <__retarget_lock_acquire_recursive>
 80192ae:	bf00      	nop
 80192b0:	20001a00 	.word	0x20001a00

080192b4 <__sfp_lock_release>:
 80192b4:	4801      	ldr	r0, [pc, #4]	; (80192bc <__sfp_lock_release+0x8>)
 80192b6:	f000 b8b3 	b.w	8019420 <__retarget_lock_release_recursive>
 80192ba:	bf00      	nop
 80192bc:	20001a00 	.word	0x20001a00

080192c0 <__sinit_lock_acquire>:
 80192c0:	4801      	ldr	r0, [pc, #4]	; (80192c8 <__sinit_lock_acquire+0x8>)
 80192c2:	f000 b8ac 	b.w	801941e <__retarget_lock_acquire_recursive>
 80192c6:	bf00      	nop
 80192c8:	200019fb 	.word	0x200019fb

080192cc <__sinit_lock_release>:
 80192cc:	4801      	ldr	r0, [pc, #4]	; (80192d4 <__sinit_lock_release+0x8>)
 80192ce:	f000 b8a7 	b.w	8019420 <__retarget_lock_release_recursive>
 80192d2:	bf00      	nop
 80192d4:	200019fb 	.word	0x200019fb

080192d8 <__sinit>:
 80192d8:	b510      	push	{r4, lr}
 80192da:	4604      	mov	r4, r0
 80192dc:	f7ff fff0 	bl	80192c0 <__sinit_lock_acquire>
 80192e0:	69a3      	ldr	r3, [r4, #24]
 80192e2:	b11b      	cbz	r3, 80192ec <__sinit+0x14>
 80192e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192e8:	f7ff bff0 	b.w	80192cc <__sinit_lock_release>
 80192ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80192f0:	6523      	str	r3, [r4, #80]	; 0x50
 80192f2:	4b13      	ldr	r3, [pc, #76]	; (8019340 <__sinit+0x68>)
 80192f4:	4a13      	ldr	r2, [pc, #76]	; (8019344 <__sinit+0x6c>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80192fa:	42a3      	cmp	r3, r4
 80192fc:	bf04      	itt	eq
 80192fe:	2301      	moveq	r3, #1
 8019300:	61a3      	streq	r3, [r4, #24]
 8019302:	4620      	mov	r0, r4
 8019304:	f000 f820 	bl	8019348 <__sfp>
 8019308:	6060      	str	r0, [r4, #4]
 801930a:	4620      	mov	r0, r4
 801930c:	f000 f81c 	bl	8019348 <__sfp>
 8019310:	60a0      	str	r0, [r4, #8]
 8019312:	4620      	mov	r0, r4
 8019314:	f000 f818 	bl	8019348 <__sfp>
 8019318:	2200      	movs	r2, #0
 801931a:	60e0      	str	r0, [r4, #12]
 801931c:	2104      	movs	r1, #4
 801931e:	6860      	ldr	r0, [r4, #4]
 8019320:	f7ff ff82 	bl	8019228 <std>
 8019324:	68a0      	ldr	r0, [r4, #8]
 8019326:	2201      	movs	r2, #1
 8019328:	2109      	movs	r1, #9
 801932a:	f7ff ff7d 	bl	8019228 <std>
 801932e:	68e0      	ldr	r0, [r4, #12]
 8019330:	2202      	movs	r2, #2
 8019332:	2112      	movs	r1, #18
 8019334:	f7ff ff78 	bl	8019228 <std>
 8019338:	2301      	movs	r3, #1
 801933a:	61a3      	str	r3, [r4, #24]
 801933c:	e7d2      	b.n	80192e4 <__sinit+0xc>
 801933e:	bf00      	nop
 8019340:	0801ae88 	.word	0x0801ae88
 8019344:	08019271 	.word	0x08019271

08019348 <__sfp>:
 8019348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801934a:	4607      	mov	r7, r0
 801934c:	f7ff ffac 	bl	80192a8 <__sfp_lock_acquire>
 8019350:	4b1e      	ldr	r3, [pc, #120]	; (80193cc <__sfp+0x84>)
 8019352:	681e      	ldr	r6, [r3, #0]
 8019354:	69b3      	ldr	r3, [r6, #24]
 8019356:	b913      	cbnz	r3, 801935e <__sfp+0x16>
 8019358:	4630      	mov	r0, r6
 801935a:	f7ff ffbd 	bl	80192d8 <__sinit>
 801935e:	3648      	adds	r6, #72	; 0x48
 8019360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019364:	3b01      	subs	r3, #1
 8019366:	d503      	bpl.n	8019370 <__sfp+0x28>
 8019368:	6833      	ldr	r3, [r6, #0]
 801936a:	b30b      	cbz	r3, 80193b0 <__sfp+0x68>
 801936c:	6836      	ldr	r6, [r6, #0]
 801936e:	e7f7      	b.n	8019360 <__sfp+0x18>
 8019370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019374:	b9d5      	cbnz	r5, 80193ac <__sfp+0x64>
 8019376:	4b16      	ldr	r3, [pc, #88]	; (80193d0 <__sfp+0x88>)
 8019378:	60e3      	str	r3, [r4, #12]
 801937a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801937e:	6665      	str	r5, [r4, #100]	; 0x64
 8019380:	f000 f84c 	bl	801941c <__retarget_lock_init_recursive>
 8019384:	f7ff ff96 	bl	80192b4 <__sfp_lock_release>
 8019388:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801938c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019390:	6025      	str	r5, [r4, #0]
 8019392:	61a5      	str	r5, [r4, #24]
 8019394:	2208      	movs	r2, #8
 8019396:	4629      	mov	r1, r5
 8019398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801939c:	f7fe faee 	bl	801797c <memset>
 80193a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80193a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80193a8:	4620      	mov	r0, r4
 80193aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ac:	3468      	adds	r4, #104	; 0x68
 80193ae:	e7d9      	b.n	8019364 <__sfp+0x1c>
 80193b0:	2104      	movs	r1, #4
 80193b2:	4638      	mov	r0, r7
 80193b4:	f7ff ff62 	bl	801927c <__sfmoreglue>
 80193b8:	4604      	mov	r4, r0
 80193ba:	6030      	str	r0, [r6, #0]
 80193bc:	2800      	cmp	r0, #0
 80193be:	d1d5      	bne.n	801936c <__sfp+0x24>
 80193c0:	f7ff ff78 	bl	80192b4 <__sfp_lock_release>
 80193c4:	230c      	movs	r3, #12
 80193c6:	603b      	str	r3, [r7, #0]
 80193c8:	e7ee      	b.n	80193a8 <__sfp+0x60>
 80193ca:	bf00      	nop
 80193cc:	0801ae88 	.word	0x0801ae88
 80193d0:	ffff0001 	.word	0xffff0001

080193d4 <_fwalk_reent>:
 80193d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193d8:	4606      	mov	r6, r0
 80193da:	4688      	mov	r8, r1
 80193dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80193e0:	2700      	movs	r7, #0
 80193e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80193e6:	f1b9 0901 	subs.w	r9, r9, #1
 80193ea:	d505      	bpl.n	80193f8 <_fwalk_reent+0x24>
 80193ec:	6824      	ldr	r4, [r4, #0]
 80193ee:	2c00      	cmp	r4, #0
 80193f0:	d1f7      	bne.n	80193e2 <_fwalk_reent+0xe>
 80193f2:	4638      	mov	r0, r7
 80193f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193f8:	89ab      	ldrh	r3, [r5, #12]
 80193fa:	2b01      	cmp	r3, #1
 80193fc:	d907      	bls.n	801940e <_fwalk_reent+0x3a>
 80193fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019402:	3301      	adds	r3, #1
 8019404:	d003      	beq.n	801940e <_fwalk_reent+0x3a>
 8019406:	4629      	mov	r1, r5
 8019408:	4630      	mov	r0, r6
 801940a:	47c0      	blx	r8
 801940c:	4307      	orrs	r7, r0
 801940e:	3568      	adds	r5, #104	; 0x68
 8019410:	e7e9      	b.n	80193e6 <_fwalk_reent+0x12>
	...

08019414 <_localeconv_r>:
 8019414:	4800      	ldr	r0, [pc, #0]	; (8019418 <_localeconv_r+0x4>)
 8019416:	4770      	bx	lr
 8019418:	20000244 	.word	0x20000244

0801941c <__retarget_lock_init_recursive>:
 801941c:	4770      	bx	lr

0801941e <__retarget_lock_acquire_recursive>:
 801941e:	4770      	bx	lr

08019420 <__retarget_lock_release_recursive>:
 8019420:	4770      	bx	lr
	...

08019424 <__malloc_lock>:
 8019424:	4801      	ldr	r0, [pc, #4]	; (801942c <__malloc_lock+0x8>)
 8019426:	f7ff bffa 	b.w	801941e <__retarget_lock_acquire_recursive>
 801942a:	bf00      	nop
 801942c:	200019fc 	.word	0x200019fc

08019430 <__malloc_unlock>:
 8019430:	4801      	ldr	r0, [pc, #4]	; (8019438 <__malloc_unlock+0x8>)
 8019432:	f7ff bff5 	b.w	8019420 <__retarget_lock_release_recursive>
 8019436:	bf00      	nop
 8019438:	200019fc 	.word	0x200019fc

0801943c <_Balloc>:
 801943c:	b570      	push	{r4, r5, r6, lr}
 801943e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019440:	4604      	mov	r4, r0
 8019442:	460d      	mov	r5, r1
 8019444:	b976      	cbnz	r6, 8019464 <_Balloc+0x28>
 8019446:	2010      	movs	r0, #16
 8019448:	f7fe fa60 	bl	801790c <malloc>
 801944c:	4602      	mov	r2, r0
 801944e:	6260      	str	r0, [r4, #36]	; 0x24
 8019450:	b920      	cbnz	r0, 801945c <_Balloc+0x20>
 8019452:	4b18      	ldr	r3, [pc, #96]	; (80194b4 <_Balloc+0x78>)
 8019454:	4818      	ldr	r0, [pc, #96]	; (80194b8 <_Balloc+0x7c>)
 8019456:	2166      	movs	r1, #102	; 0x66
 8019458:	f000 ff48 	bl	801a2ec <__assert_func>
 801945c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019460:	6006      	str	r6, [r0, #0]
 8019462:	60c6      	str	r6, [r0, #12]
 8019464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019466:	68f3      	ldr	r3, [r6, #12]
 8019468:	b183      	cbz	r3, 801948c <_Balloc+0x50>
 801946a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019472:	b9b8      	cbnz	r0, 80194a4 <_Balloc+0x68>
 8019474:	2101      	movs	r1, #1
 8019476:	fa01 f605 	lsl.w	r6, r1, r5
 801947a:	1d72      	adds	r2, r6, #5
 801947c:	0092      	lsls	r2, r2, #2
 801947e:	4620      	mov	r0, r4
 8019480:	f000 fb5a 	bl	8019b38 <_calloc_r>
 8019484:	b160      	cbz	r0, 80194a0 <_Balloc+0x64>
 8019486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801948a:	e00e      	b.n	80194aa <_Balloc+0x6e>
 801948c:	2221      	movs	r2, #33	; 0x21
 801948e:	2104      	movs	r1, #4
 8019490:	4620      	mov	r0, r4
 8019492:	f000 fb51 	bl	8019b38 <_calloc_r>
 8019496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019498:	60f0      	str	r0, [r6, #12]
 801949a:	68db      	ldr	r3, [r3, #12]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d1e4      	bne.n	801946a <_Balloc+0x2e>
 80194a0:	2000      	movs	r0, #0
 80194a2:	bd70      	pop	{r4, r5, r6, pc}
 80194a4:	6802      	ldr	r2, [r0, #0]
 80194a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80194aa:	2300      	movs	r3, #0
 80194ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80194b0:	e7f7      	b.n	80194a2 <_Balloc+0x66>
 80194b2:	bf00      	nop
 80194b4:	0801aecd 	.word	0x0801aecd
 80194b8:	0801afb4 	.word	0x0801afb4

080194bc <_Bfree>:
 80194bc:	b570      	push	{r4, r5, r6, lr}
 80194be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194c0:	4605      	mov	r5, r0
 80194c2:	460c      	mov	r4, r1
 80194c4:	b976      	cbnz	r6, 80194e4 <_Bfree+0x28>
 80194c6:	2010      	movs	r0, #16
 80194c8:	f7fe fa20 	bl	801790c <malloc>
 80194cc:	4602      	mov	r2, r0
 80194ce:	6268      	str	r0, [r5, #36]	; 0x24
 80194d0:	b920      	cbnz	r0, 80194dc <_Bfree+0x20>
 80194d2:	4b09      	ldr	r3, [pc, #36]	; (80194f8 <_Bfree+0x3c>)
 80194d4:	4809      	ldr	r0, [pc, #36]	; (80194fc <_Bfree+0x40>)
 80194d6:	218a      	movs	r1, #138	; 0x8a
 80194d8:	f000 ff08 	bl	801a2ec <__assert_func>
 80194dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194e0:	6006      	str	r6, [r0, #0]
 80194e2:	60c6      	str	r6, [r0, #12]
 80194e4:	b13c      	cbz	r4, 80194f6 <_Bfree+0x3a>
 80194e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80194e8:	6862      	ldr	r2, [r4, #4]
 80194ea:	68db      	ldr	r3, [r3, #12]
 80194ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80194f0:	6021      	str	r1, [r4, #0]
 80194f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80194f6:	bd70      	pop	{r4, r5, r6, pc}
 80194f8:	0801aecd 	.word	0x0801aecd
 80194fc:	0801afb4 	.word	0x0801afb4

08019500 <__multadd>:
 8019500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019504:	690e      	ldr	r6, [r1, #16]
 8019506:	4607      	mov	r7, r0
 8019508:	4698      	mov	r8, r3
 801950a:	460c      	mov	r4, r1
 801950c:	f101 0014 	add.w	r0, r1, #20
 8019510:	2300      	movs	r3, #0
 8019512:	6805      	ldr	r5, [r0, #0]
 8019514:	b2a9      	uxth	r1, r5
 8019516:	fb02 8101 	mla	r1, r2, r1, r8
 801951a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801951e:	0c2d      	lsrs	r5, r5, #16
 8019520:	fb02 c505 	mla	r5, r2, r5, ip
 8019524:	b289      	uxth	r1, r1
 8019526:	3301      	adds	r3, #1
 8019528:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801952c:	429e      	cmp	r6, r3
 801952e:	f840 1b04 	str.w	r1, [r0], #4
 8019532:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019536:	dcec      	bgt.n	8019512 <__multadd+0x12>
 8019538:	f1b8 0f00 	cmp.w	r8, #0
 801953c:	d022      	beq.n	8019584 <__multadd+0x84>
 801953e:	68a3      	ldr	r3, [r4, #8]
 8019540:	42b3      	cmp	r3, r6
 8019542:	dc19      	bgt.n	8019578 <__multadd+0x78>
 8019544:	6861      	ldr	r1, [r4, #4]
 8019546:	4638      	mov	r0, r7
 8019548:	3101      	adds	r1, #1
 801954a:	f7ff ff77 	bl	801943c <_Balloc>
 801954e:	4605      	mov	r5, r0
 8019550:	b928      	cbnz	r0, 801955e <__multadd+0x5e>
 8019552:	4602      	mov	r2, r0
 8019554:	4b0d      	ldr	r3, [pc, #52]	; (801958c <__multadd+0x8c>)
 8019556:	480e      	ldr	r0, [pc, #56]	; (8019590 <__multadd+0x90>)
 8019558:	21b5      	movs	r1, #181	; 0xb5
 801955a:	f000 fec7 	bl	801a2ec <__assert_func>
 801955e:	6922      	ldr	r2, [r4, #16]
 8019560:	3202      	adds	r2, #2
 8019562:	f104 010c 	add.w	r1, r4, #12
 8019566:	0092      	lsls	r2, r2, #2
 8019568:	300c      	adds	r0, #12
 801956a:	f7fe f9df 	bl	801792c <memcpy>
 801956e:	4621      	mov	r1, r4
 8019570:	4638      	mov	r0, r7
 8019572:	f7ff ffa3 	bl	80194bc <_Bfree>
 8019576:	462c      	mov	r4, r5
 8019578:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801957c:	3601      	adds	r6, #1
 801957e:	f8c3 8014 	str.w	r8, [r3, #20]
 8019582:	6126      	str	r6, [r4, #16]
 8019584:	4620      	mov	r0, r4
 8019586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801958a:	bf00      	nop
 801958c:	0801af43 	.word	0x0801af43
 8019590:	0801afb4 	.word	0x0801afb4

08019594 <__hi0bits>:
 8019594:	0c03      	lsrs	r3, r0, #16
 8019596:	041b      	lsls	r3, r3, #16
 8019598:	b9d3      	cbnz	r3, 80195d0 <__hi0bits+0x3c>
 801959a:	0400      	lsls	r0, r0, #16
 801959c:	2310      	movs	r3, #16
 801959e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80195a2:	bf04      	itt	eq
 80195a4:	0200      	lsleq	r0, r0, #8
 80195a6:	3308      	addeq	r3, #8
 80195a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80195ac:	bf04      	itt	eq
 80195ae:	0100      	lsleq	r0, r0, #4
 80195b0:	3304      	addeq	r3, #4
 80195b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80195b6:	bf04      	itt	eq
 80195b8:	0080      	lsleq	r0, r0, #2
 80195ba:	3302      	addeq	r3, #2
 80195bc:	2800      	cmp	r0, #0
 80195be:	db05      	blt.n	80195cc <__hi0bits+0x38>
 80195c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80195c4:	f103 0301 	add.w	r3, r3, #1
 80195c8:	bf08      	it	eq
 80195ca:	2320      	moveq	r3, #32
 80195cc:	4618      	mov	r0, r3
 80195ce:	4770      	bx	lr
 80195d0:	2300      	movs	r3, #0
 80195d2:	e7e4      	b.n	801959e <__hi0bits+0xa>

080195d4 <__lo0bits>:
 80195d4:	6803      	ldr	r3, [r0, #0]
 80195d6:	f013 0207 	ands.w	r2, r3, #7
 80195da:	4601      	mov	r1, r0
 80195dc:	d00b      	beq.n	80195f6 <__lo0bits+0x22>
 80195de:	07da      	lsls	r2, r3, #31
 80195e0:	d424      	bmi.n	801962c <__lo0bits+0x58>
 80195e2:	0798      	lsls	r0, r3, #30
 80195e4:	bf49      	itett	mi
 80195e6:	085b      	lsrmi	r3, r3, #1
 80195e8:	089b      	lsrpl	r3, r3, #2
 80195ea:	2001      	movmi	r0, #1
 80195ec:	600b      	strmi	r3, [r1, #0]
 80195ee:	bf5c      	itt	pl
 80195f0:	600b      	strpl	r3, [r1, #0]
 80195f2:	2002      	movpl	r0, #2
 80195f4:	4770      	bx	lr
 80195f6:	b298      	uxth	r0, r3
 80195f8:	b9b0      	cbnz	r0, 8019628 <__lo0bits+0x54>
 80195fa:	0c1b      	lsrs	r3, r3, #16
 80195fc:	2010      	movs	r0, #16
 80195fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019602:	bf04      	itt	eq
 8019604:	0a1b      	lsreq	r3, r3, #8
 8019606:	3008      	addeq	r0, #8
 8019608:	071a      	lsls	r2, r3, #28
 801960a:	bf04      	itt	eq
 801960c:	091b      	lsreq	r3, r3, #4
 801960e:	3004      	addeq	r0, #4
 8019610:	079a      	lsls	r2, r3, #30
 8019612:	bf04      	itt	eq
 8019614:	089b      	lsreq	r3, r3, #2
 8019616:	3002      	addeq	r0, #2
 8019618:	07da      	lsls	r2, r3, #31
 801961a:	d403      	bmi.n	8019624 <__lo0bits+0x50>
 801961c:	085b      	lsrs	r3, r3, #1
 801961e:	f100 0001 	add.w	r0, r0, #1
 8019622:	d005      	beq.n	8019630 <__lo0bits+0x5c>
 8019624:	600b      	str	r3, [r1, #0]
 8019626:	4770      	bx	lr
 8019628:	4610      	mov	r0, r2
 801962a:	e7e8      	b.n	80195fe <__lo0bits+0x2a>
 801962c:	2000      	movs	r0, #0
 801962e:	4770      	bx	lr
 8019630:	2020      	movs	r0, #32
 8019632:	4770      	bx	lr

08019634 <__i2b>:
 8019634:	b510      	push	{r4, lr}
 8019636:	460c      	mov	r4, r1
 8019638:	2101      	movs	r1, #1
 801963a:	f7ff feff 	bl	801943c <_Balloc>
 801963e:	4602      	mov	r2, r0
 8019640:	b928      	cbnz	r0, 801964e <__i2b+0x1a>
 8019642:	4b05      	ldr	r3, [pc, #20]	; (8019658 <__i2b+0x24>)
 8019644:	4805      	ldr	r0, [pc, #20]	; (801965c <__i2b+0x28>)
 8019646:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801964a:	f000 fe4f 	bl	801a2ec <__assert_func>
 801964e:	2301      	movs	r3, #1
 8019650:	6144      	str	r4, [r0, #20]
 8019652:	6103      	str	r3, [r0, #16]
 8019654:	bd10      	pop	{r4, pc}
 8019656:	bf00      	nop
 8019658:	0801af43 	.word	0x0801af43
 801965c:	0801afb4 	.word	0x0801afb4

08019660 <__multiply>:
 8019660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019664:	4614      	mov	r4, r2
 8019666:	690a      	ldr	r2, [r1, #16]
 8019668:	6923      	ldr	r3, [r4, #16]
 801966a:	429a      	cmp	r2, r3
 801966c:	bfb8      	it	lt
 801966e:	460b      	movlt	r3, r1
 8019670:	460d      	mov	r5, r1
 8019672:	bfbc      	itt	lt
 8019674:	4625      	movlt	r5, r4
 8019676:	461c      	movlt	r4, r3
 8019678:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801967c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019680:	68ab      	ldr	r3, [r5, #8]
 8019682:	6869      	ldr	r1, [r5, #4]
 8019684:	eb0a 0709 	add.w	r7, sl, r9
 8019688:	42bb      	cmp	r3, r7
 801968a:	b085      	sub	sp, #20
 801968c:	bfb8      	it	lt
 801968e:	3101      	addlt	r1, #1
 8019690:	f7ff fed4 	bl	801943c <_Balloc>
 8019694:	b930      	cbnz	r0, 80196a4 <__multiply+0x44>
 8019696:	4602      	mov	r2, r0
 8019698:	4b42      	ldr	r3, [pc, #264]	; (80197a4 <__multiply+0x144>)
 801969a:	4843      	ldr	r0, [pc, #268]	; (80197a8 <__multiply+0x148>)
 801969c:	f240 115d 	movw	r1, #349	; 0x15d
 80196a0:	f000 fe24 	bl	801a2ec <__assert_func>
 80196a4:	f100 0614 	add.w	r6, r0, #20
 80196a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80196ac:	4633      	mov	r3, r6
 80196ae:	2200      	movs	r2, #0
 80196b0:	4543      	cmp	r3, r8
 80196b2:	d31e      	bcc.n	80196f2 <__multiply+0x92>
 80196b4:	f105 0c14 	add.w	ip, r5, #20
 80196b8:	f104 0314 	add.w	r3, r4, #20
 80196bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80196c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80196c4:	9202      	str	r2, [sp, #8]
 80196c6:	ebac 0205 	sub.w	r2, ip, r5
 80196ca:	3a15      	subs	r2, #21
 80196cc:	f022 0203 	bic.w	r2, r2, #3
 80196d0:	3204      	adds	r2, #4
 80196d2:	f105 0115 	add.w	r1, r5, #21
 80196d6:	458c      	cmp	ip, r1
 80196d8:	bf38      	it	cc
 80196da:	2204      	movcc	r2, #4
 80196dc:	9201      	str	r2, [sp, #4]
 80196de:	9a02      	ldr	r2, [sp, #8]
 80196e0:	9303      	str	r3, [sp, #12]
 80196e2:	429a      	cmp	r2, r3
 80196e4:	d808      	bhi.n	80196f8 <__multiply+0x98>
 80196e6:	2f00      	cmp	r7, #0
 80196e8:	dc55      	bgt.n	8019796 <__multiply+0x136>
 80196ea:	6107      	str	r7, [r0, #16]
 80196ec:	b005      	add	sp, #20
 80196ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f2:	f843 2b04 	str.w	r2, [r3], #4
 80196f6:	e7db      	b.n	80196b0 <__multiply+0x50>
 80196f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80196fc:	f1ba 0f00 	cmp.w	sl, #0
 8019700:	d020      	beq.n	8019744 <__multiply+0xe4>
 8019702:	f105 0e14 	add.w	lr, r5, #20
 8019706:	46b1      	mov	r9, r6
 8019708:	2200      	movs	r2, #0
 801970a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801970e:	f8d9 b000 	ldr.w	fp, [r9]
 8019712:	b2a1      	uxth	r1, r4
 8019714:	fa1f fb8b 	uxth.w	fp, fp
 8019718:	fb0a b101 	mla	r1, sl, r1, fp
 801971c:	4411      	add	r1, r2
 801971e:	f8d9 2000 	ldr.w	r2, [r9]
 8019722:	0c24      	lsrs	r4, r4, #16
 8019724:	0c12      	lsrs	r2, r2, #16
 8019726:	fb0a 2404 	mla	r4, sl, r4, r2
 801972a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801972e:	b289      	uxth	r1, r1
 8019730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019734:	45f4      	cmp	ip, lr
 8019736:	f849 1b04 	str.w	r1, [r9], #4
 801973a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801973e:	d8e4      	bhi.n	801970a <__multiply+0xaa>
 8019740:	9901      	ldr	r1, [sp, #4]
 8019742:	5072      	str	r2, [r6, r1]
 8019744:	9a03      	ldr	r2, [sp, #12]
 8019746:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801974a:	3304      	adds	r3, #4
 801974c:	f1b9 0f00 	cmp.w	r9, #0
 8019750:	d01f      	beq.n	8019792 <__multiply+0x132>
 8019752:	6834      	ldr	r4, [r6, #0]
 8019754:	f105 0114 	add.w	r1, r5, #20
 8019758:	46b6      	mov	lr, r6
 801975a:	f04f 0a00 	mov.w	sl, #0
 801975e:	880a      	ldrh	r2, [r1, #0]
 8019760:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019764:	fb09 b202 	mla	r2, r9, r2, fp
 8019768:	4492      	add	sl, r2
 801976a:	b2a4      	uxth	r4, r4
 801976c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019770:	f84e 4b04 	str.w	r4, [lr], #4
 8019774:	f851 4b04 	ldr.w	r4, [r1], #4
 8019778:	f8be 2000 	ldrh.w	r2, [lr]
 801977c:	0c24      	lsrs	r4, r4, #16
 801977e:	fb09 2404 	mla	r4, r9, r4, r2
 8019782:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019786:	458c      	cmp	ip, r1
 8019788:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801978c:	d8e7      	bhi.n	801975e <__multiply+0xfe>
 801978e:	9a01      	ldr	r2, [sp, #4]
 8019790:	50b4      	str	r4, [r6, r2]
 8019792:	3604      	adds	r6, #4
 8019794:	e7a3      	b.n	80196de <__multiply+0x7e>
 8019796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801979a:	2b00      	cmp	r3, #0
 801979c:	d1a5      	bne.n	80196ea <__multiply+0x8a>
 801979e:	3f01      	subs	r7, #1
 80197a0:	e7a1      	b.n	80196e6 <__multiply+0x86>
 80197a2:	bf00      	nop
 80197a4:	0801af43 	.word	0x0801af43
 80197a8:	0801afb4 	.word	0x0801afb4

080197ac <__pow5mult>:
 80197ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197b0:	4615      	mov	r5, r2
 80197b2:	f012 0203 	ands.w	r2, r2, #3
 80197b6:	4606      	mov	r6, r0
 80197b8:	460f      	mov	r7, r1
 80197ba:	d007      	beq.n	80197cc <__pow5mult+0x20>
 80197bc:	4c25      	ldr	r4, [pc, #148]	; (8019854 <__pow5mult+0xa8>)
 80197be:	3a01      	subs	r2, #1
 80197c0:	2300      	movs	r3, #0
 80197c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80197c6:	f7ff fe9b 	bl	8019500 <__multadd>
 80197ca:	4607      	mov	r7, r0
 80197cc:	10ad      	asrs	r5, r5, #2
 80197ce:	d03d      	beq.n	801984c <__pow5mult+0xa0>
 80197d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80197d2:	b97c      	cbnz	r4, 80197f4 <__pow5mult+0x48>
 80197d4:	2010      	movs	r0, #16
 80197d6:	f7fe f899 	bl	801790c <malloc>
 80197da:	4602      	mov	r2, r0
 80197dc:	6270      	str	r0, [r6, #36]	; 0x24
 80197de:	b928      	cbnz	r0, 80197ec <__pow5mult+0x40>
 80197e0:	4b1d      	ldr	r3, [pc, #116]	; (8019858 <__pow5mult+0xac>)
 80197e2:	481e      	ldr	r0, [pc, #120]	; (801985c <__pow5mult+0xb0>)
 80197e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80197e8:	f000 fd80 	bl	801a2ec <__assert_func>
 80197ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80197f0:	6004      	str	r4, [r0, #0]
 80197f2:	60c4      	str	r4, [r0, #12]
 80197f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80197f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80197fc:	b94c      	cbnz	r4, 8019812 <__pow5mult+0x66>
 80197fe:	f240 2171 	movw	r1, #625	; 0x271
 8019802:	4630      	mov	r0, r6
 8019804:	f7ff ff16 	bl	8019634 <__i2b>
 8019808:	2300      	movs	r3, #0
 801980a:	f8c8 0008 	str.w	r0, [r8, #8]
 801980e:	4604      	mov	r4, r0
 8019810:	6003      	str	r3, [r0, #0]
 8019812:	f04f 0900 	mov.w	r9, #0
 8019816:	07eb      	lsls	r3, r5, #31
 8019818:	d50a      	bpl.n	8019830 <__pow5mult+0x84>
 801981a:	4639      	mov	r1, r7
 801981c:	4622      	mov	r2, r4
 801981e:	4630      	mov	r0, r6
 8019820:	f7ff ff1e 	bl	8019660 <__multiply>
 8019824:	4639      	mov	r1, r7
 8019826:	4680      	mov	r8, r0
 8019828:	4630      	mov	r0, r6
 801982a:	f7ff fe47 	bl	80194bc <_Bfree>
 801982e:	4647      	mov	r7, r8
 8019830:	106d      	asrs	r5, r5, #1
 8019832:	d00b      	beq.n	801984c <__pow5mult+0xa0>
 8019834:	6820      	ldr	r0, [r4, #0]
 8019836:	b938      	cbnz	r0, 8019848 <__pow5mult+0x9c>
 8019838:	4622      	mov	r2, r4
 801983a:	4621      	mov	r1, r4
 801983c:	4630      	mov	r0, r6
 801983e:	f7ff ff0f 	bl	8019660 <__multiply>
 8019842:	6020      	str	r0, [r4, #0]
 8019844:	f8c0 9000 	str.w	r9, [r0]
 8019848:	4604      	mov	r4, r0
 801984a:	e7e4      	b.n	8019816 <__pow5mult+0x6a>
 801984c:	4638      	mov	r0, r7
 801984e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019852:	bf00      	nop
 8019854:	0801b108 	.word	0x0801b108
 8019858:	0801aecd 	.word	0x0801aecd
 801985c:	0801afb4 	.word	0x0801afb4

08019860 <__lshift>:
 8019860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019864:	460c      	mov	r4, r1
 8019866:	6849      	ldr	r1, [r1, #4]
 8019868:	6923      	ldr	r3, [r4, #16]
 801986a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801986e:	68a3      	ldr	r3, [r4, #8]
 8019870:	4607      	mov	r7, r0
 8019872:	4691      	mov	r9, r2
 8019874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019878:	f108 0601 	add.w	r6, r8, #1
 801987c:	42b3      	cmp	r3, r6
 801987e:	db0b      	blt.n	8019898 <__lshift+0x38>
 8019880:	4638      	mov	r0, r7
 8019882:	f7ff fddb 	bl	801943c <_Balloc>
 8019886:	4605      	mov	r5, r0
 8019888:	b948      	cbnz	r0, 801989e <__lshift+0x3e>
 801988a:	4602      	mov	r2, r0
 801988c:	4b28      	ldr	r3, [pc, #160]	; (8019930 <__lshift+0xd0>)
 801988e:	4829      	ldr	r0, [pc, #164]	; (8019934 <__lshift+0xd4>)
 8019890:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019894:	f000 fd2a 	bl	801a2ec <__assert_func>
 8019898:	3101      	adds	r1, #1
 801989a:	005b      	lsls	r3, r3, #1
 801989c:	e7ee      	b.n	801987c <__lshift+0x1c>
 801989e:	2300      	movs	r3, #0
 80198a0:	f100 0114 	add.w	r1, r0, #20
 80198a4:	f100 0210 	add.w	r2, r0, #16
 80198a8:	4618      	mov	r0, r3
 80198aa:	4553      	cmp	r3, sl
 80198ac:	db33      	blt.n	8019916 <__lshift+0xb6>
 80198ae:	6920      	ldr	r0, [r4, #16]
 80198b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80198b4:	f104 0314 	add.w	r3, r4, #20
 80198b8:	f019 091f 	ands.w	r9, r9, #31
 80198bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80198c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80198c4:	d02b      	beq.n	801991e <__lshift+0xbe>
 80198c6:	f1c9 0e20 	rsb	lr, r9, #32
 80198ca:	468a      	mov	sl, r1
 80198cc:	2200      	movs	r2, #0
 80198ce:	6818      	ldr	r0, [r3, #0]
 80198d0:	fa00 f009 	lsl.w	r0, r0, r9
 80198d4:	4302      	orrs	r2, r0
 80198d6:	f84a 2b04 	str.w	r2, [sl], #4
 80198da:	f853 2b04 	ldr.w	r2, [r3], #4
 80198de:	459c      	cmp	ip, r3
 80198e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80198e4:	d8f3      	bhi.n	80198ce <__lshift+0x6e>
 80198e6:	ebac 0304 	sub.w	r3, ip, r4
 80198ea:	3b15      	subs	r3, #21
 80198ec:	f023 0303 	bic.w	r3, r3, #3
 80198f0:	3304      	adds	r3, #4
 80198f2:	f104 0015 	add.w	r0, r4, #21
 80198f6:	4584      	cmp	ip, r0
 80198f8:	bf38      	it	cc
 80198fa:	2304      	movcc	r3, #4
 80198fc:	50ca      	str	r2, [r1, r3]
 80198fe:	b10a      	cbz	r2, 8019904 <__lshift+0xa4>
 8019900:	f108 0602 	add.w	r6, r8, #2
 8019904:	3e01      	subs	r6, #1
 8019906:	4638      	mov	r0, r7
 8019908:	612e      	str	r6, [r5, #16]
 801990a:	4621      	mov	r1, r4
 801990c:	f7ff fdd6 	bl	80194bc <_Bfree>
 8019910:	4628      	mov	r0, r5
 8019912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019916:	f842 0f04 	str.w	r0, [r2, #4]!
 801991a:	3301      	adds	r3, #1
 801991c:	e7c5      	b.n	80198aa <__lshift+0x4a>
 801991e:	3904      	subs	r1, #4
 8019920:	f853 2b04 	ldr.w	r2, [r3], #4
 8019924:	f841 2f04 	str.w	r2, [r1, #4]!
 8019928:	459c      	cmp	ip, r3
 801992a:	d8f9      	bhi.n	8019920 <__lshift+0xc0>
 801992c:	e7ea      	b.n	8019904 <__lshift+0xa4>
 801992e:	bf00      	nop
 8019930:	0801af43 	.word	0x0801af43
 8019934:	0801afb4 	.word	0x0801afb4

08019938 <__mcmp>:
 8019938:	b530      	push	{r4, r5, lr}
 801993a:	6902      	ldr	r2, [r0, #16]
 801993c:	690c      	ldr	r4, [r1, #16]
 801993e:	1b12      	subs	r2, r2, r4
 8019940:	d10e      	bne.n	8019960 <__mcmp+0x28>
 8019942:	f100 0314 	add.w	r3, r0, #20
 8019946:	3114      	adds	r1, #20
 8019948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801994c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019958:	42a5      	cmp	r5, r4
 801995a:	d003      	beq.n	8019964 <__mcmp+0x2c>
 801995c:	d305      	bcc.n	801996a <__mcmp+0x32>
 801995e:	2201      	movs	r2, #1
 8019960:	4610      	mov	r0, r2
 8019962:	bd30      	pop	{r4, r5, pc}
 8019964:	4283      	cmp	r3, r0
 8019966:	d3f3      	bcc.n	8019950 <__mcmp+0x18>
 8019968:	e7fa      	b.n	8019960 <__mcmp+0x28>
 801996a:	f04f 32ff 	mov.w	r2, #4294967295
 801996e:	e7f7      	b.n	8019960 <__mcmp+0x28>

08019970 <__mdiff>:
 8019970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019974:	460c      	mov	r4, r1
 8019976:	4606      	mov	r6, r0
 8019978:	4611      	mov	r1, r2
 801997a:	4620      	mov	r0, r4
 801997c:	4617      	mov	r7, r2
 801997e:	f7ff ffdb 	bl	8019938 <__mcmp>
 8019982:	1e05      	subs	r5, r0, #0
 8019984:	d110      	bne.n	80199a8 <__mdiff+0x38>
 8019986:	4629      	mov	r1, r5
 8019988:	4630      	mov	r0, r6
 801998a:	f7ff fd57 	bl	801943c <_Balloc>
 801998e:	b930      	cbnz	r0, 801999e <__mdiff+0x2e>
 8019990:	4b39      	ldr	r3, [pc, #228]	; (8019a78 <__mdiff+0x108>)
 8019992:	4602      	mov	r2, r0
 8019994:	f240 2132 	movw	r1, #562	; 0x232
 8019998:	4838      	ldr	r0, [pc, #224]	; (8019a7c <__mdiff+0x10c>)
 801999a:	f000 fca7 	bl	801a2ec <__assert_func>
 801999e:	2301      	movs	r3, #1
 80199a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80199a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199a8:	bfa4      	itt	ge
 80199aa:	463b      	movge	r3, r7
 80199ac:	4627      	movge	r7, r4
 80199ae:	4630      	mov	r0, r6
 80199b0:	6879      	ldr	r1, [r7, #4]
 80199b2:	bfa6      	itte	ge
 80199b4:	461c      	movge	r4, r3
 80199b6:	2500      	movge	r5, #0
 80199b8:	2501      	movlt	r5, #1
 80199ba:	f7ff fd3f 	bl	801943c <_Balloc>
 80199be:	b920      	cbnz	r0, 80199ca <__mdiff+0x5a>
 80199c0:	4b2d      	ldr	r3, [pc, #180]	; (8019a78 <__mdiff+0x108>)
 80199c2:	4602      	mov	r2, r0
 80199c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80199c8:	e7e6      	b.n	8019998 <__mdiff+0x28>
 80199ca:	693e      	ldr	r6, [r7, #16]
 80199cc:	60c5      	str	r5, [r0, #12]
 80199ce:	6925      	ldr	r5, [r4, #16]
 80199d0:	f107 0114 	add.w	r1, r7, #20
 80199d4:	f104 0914 	add.w	r9, r4, #20
 80199d8:	f100 0e14 	add.w	lr, r0, #20
 80199dc:	f107 0210 	add.w	r2, r7, #16
 80199e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80199e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80199e8:	46f2      	mov	sl, lr
 80199ea:	2700      	movs	r7, #0
 80199ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80199f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80199f4:	fa1f f883 	uxth.w	r8, r3
 80199f8:	fa17 f78b 	uxtah	r7, r7, fp
 80199fc:	0c1b      	lsrs	r3, r3, #16
 80199fe:	eba7 0808 	sub.w	r8, r7, r8
 8019a02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a0a:	fa1f f888 	uxth.w	r8, r8
 8019a0e:	141f      	asrs	r7, r3, #16
 8019a10:	454d      	cmp	r5, r9
 8019a12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a16:	f84a 3b04 	str.w	r3, [sl], #4
 8019a1a:	d8e7      	bhi.n	80199ec <__mdiff+0x7c>
 8019a1c:	1b2b      	subs	r3, r5, r4
 8019a1e:	3b15      	subs	r3, #21
 8019a20:	f023 0303 	bic.w	r3, r3, #3
 8019a24:	3304      	adds	r3, #4
 8019a26:	3415      	adds	r4, #21
 8019a28:	42a5      	cmp	r5, r4
 8019a2a:	bf38      	it	cc
 8019a2c:	2304      	movcc	r3, #4
 8019a2e:	4419      	add	r1, r3
 8019a30:	4473      	add	r3, lr
 8019a32:	469e      	mov	lr, r3
 8019a34:	460d      	mov	r5, r1
 8019a36:	4565      	cmp	r5, ip
 8019a38:	d30e      	bcc.n	8019a58 <__mdiff+0xe8>
 8019a3a:	f10c 0203 	add.w	r2, ip, #3
 8019a3e:	1a52      	subs	r2, r2, r1
 8019a40:	f022 0203 	bic.w	r2, r2, #3
 8019a44:	3903      	subs	r1, #3
 8019a46:	458c      	cmp	ip, r1
 8019a48:	bf38      	it	cc
 8019a4a:	2200      	movcc	r2, #0
 8019a4c:	441a      	add	r2, r3
 8019a4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019a52:	b17b      	cbz	r3, 8019a74 <__mdiff+0x104>
 8019a54:	6106      	str	r6, [r0, #16]
 8019a56:	e7a5      	b.n	80199a4 <__mdiff+0x34>
 8019a58:	f855 8b04 	ldr.w	r8, [r5], #4
 8019a5c:	fa17 f488 	uxtah	r4, r7, r8
 8019a60:	1422      	asrs	r2, r4, #16
 8019a62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019a66:	b2a4      	uxth	r4, r4
 8019a68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019a6c:	f84e 4b04 	str.w	r4, [lr], #4
 8019a70:	1417      	asrs	r7, r2, #16
 8019a72:	e7e0      	b.n	8019a36 <__mdiff+0xc6>
 8019a74:	3e01      	subs	r6, #1
 8019a76:	e7ea      	b.n	8019a4e <__mdiff+0xde>
 8019a78:	0801af43 	.word	0x0801af43
 8019a7c:	0801afb4 	.word	0x0801afb4

08019a80 <__d2b>:
 8019a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019a84:	4689      	mov	r9, r1
 8019a86:	2101      	movs	r1, #1
 8019a88:	ec57 6b10 	vmov	r6, r7, d0
 8019a8c:	4690      	mov	r8, r2
 8019a8e:	f7ff fcd5 	bl	801943c <_Balloc>
 8019a92:	4604      	mov	r4, r0
 8019a94:	b930      	cbnz	r0, 8019aa4 <__d2b+0x24>
 8019a96:	4602      	mov	r2, r0
 8019a98:	4b25      	ldr	r3, [pc, #148]	; (8019b30 <__d2b+0xb0>)
 8019a9a:	4826      	ldr	r0, [pc, #152]	; (8019b34 <__d2b+0xb4>)
 8019a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8019aa0:	f000 fc24 	bl	801a2ec <__assert_func>
 8019aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019aac:	bb35      	cbnz	r5, 8019afc <__d2b+0x7c>
 8019aae:	2e00      	cmp	r6, #0
 8019ab0:	9301      	str	r3, [sp, #4]
 8019ab2:	d028      	beq.n	8019b06 <__d2b+0x86>
 8019ab4:	4668      	mov	r0, sp
 8019ab6:	9600      	str	r6, [sp, #0]
 8019ab8:	f7ff fd8c 	bl	80195d4 <__lo0bits>
 8019abc:	9900      	ldr	r1, [sp, #0]
 8019abe:	b300      	cbz	r0, 8019b02 <__d2b+0x82>
 8019ac0:	9a01      	ldr	r2, [sp, #4]
 8019ac2:	f1c0 0320 	rsb	r3, r0, #32
 8019ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8019aca:	430b      	orrs	r3, r1
 8019acc:	40c2      	lsrs	r2, r0
 8019ace:	6163      	str	r3, [r4, #20]
 8019ad0:	9201      	str	r2, [sp, #4]
 8019ad2:	9b01      	ldr	r3, [sp, #4]
 8019ad4:	61a3      	str	r3, [r4, #24]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	bf14      	ite	ne
 8019ada:	2202      	movne	r2, #2
 8019adc:	2201      	moveq	r2, #1
 8019ade:	6122      	str	r2, [r4, #16]
 8019ae0:	b1d5      	cbz	r5, 8019b18 <__d2b+0x98>
 8019ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019ae6:	4405      	add	r5, r0
 8019ae8:	f8c9 5000 	str.w	r5, [r9]
 8019aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019af0:	f8c8 0000 	str.w	r0, [r8]
 8019af4:	4620      	mov	r0, r4
 8019af6:	b003      	add	sp, #12
 8019af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019b00:	e7d5      	b.n	8019aae <__d2b+0x2e>
 8019b02:	6161      	str	r1, [r4, #20]
 8019b04:	e7e5      	b.n	8019ad2 <__d2b+0x52>
 8019b06:	a801      	add	r0, sp, #4
 8019b08:	f7ff fd64 	bl	80195d4 <__lo0bits>
 8019b0c:	9b01      	ldr	r3, [sp, #4]
 8019b0e:	6163      	str	r3, [r4, #20]
 8019b10:	2201      	movs	r2, #1
 8019b12:	6122      	str	r2, [r4, #16]
 8019b14:	3020      	adds	r0, #32
 8019b16:	e7e3      	b.n	8019ae0 <__d2b+0x60>
 8019b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019b20:	f8c9 0000 	str.w	r0, [r9]
 8019b24:	6918      	ldr	r0, [r3, #16]
 8019b26:	f7ff fd35 	bl	8019594 <__hi0bits>
 8019b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019b2e:	e7df      	b.n	8019af0 <__d2b+0x70>
 8019b30:	0801af43 	.word	0x0801af43
 8019b34:	0801afb4 	.word	0x0801afb4

08019b38 <_calloc_r>:
 8019b38:	b513      	push	{r0, r1, r4, lr}
 8019b3a:	434a      	muls	r2, r1
 8019b3c:	4611      	mov	r1, r2
 8019b3e:	9201      	str	r2, [sp, #4]
 8019b40:	f7fd ff74 	bl	8017a2c <_malloc_r>
 8019b44:	4604      	mov	r4, r0
 8019b46:	b118      	cbz	r0, 8019b50 <_calloc_r+0x18>
 8019b48:	9a01      	ldr	r2, [sp, #4]
 8019b4a:	2100      	movs	r1, #0
 8019b4c:	f7fd ff16 	bl	801797c <memset>
 8019b50:	4620      	mov	r0, r4
 8019b52:	b002      	add	sp, #8
 8019b54:	bd10      	pop	{r4, pc}

08019b56 <__ssputs_r>:
 8019b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b5a:	688e      	ldr	r6, [r1, #8]
 8019b5c:	429e      	cmp	r6, r3
 8019b5e:	4682      	mov	sl, r0
 8019b60:	460c      	mov	r4, r1
 8019b62:	4690      	mov	r8, r2
 8019b64:	461f      	mov	r7, r3
 8019b66:	d838      	bhi.n	8019bda <__ssputs_r+0x84>
 8019b68:	898a      	ldrh	r2, [r1, #12]
 8019b6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019b6e:	d032      	beq.n	8019bd6 <__ssputs_r+0x80>
 8019b70:	6825      	ldr	r5, [r4, #0]
 8019b72:	6909      	ldr	r1, [r1, #16]
 8019b74:	eba5 0901 	sub.w	r9, r5, r1
 8019b78:	6965      	ldr	r5, [r4, #20]
 8019b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b82:	3301      	adds	r3, #1
 8019b84:	444b      	add	r3, r9
 8019b86:	106d      	asrs	r5, r5, #1
 8019b88:	429d      	cmp	r5, r3
 8019b8a:	bf38      	it	cc
 8019b8c:	461d      	movcc	r5, r3
 8019b8e:	0553      	lsls	r3, r2, #21
 8019b90:	d531      	bpl.n	8019bf6 <__ssputs_r+0xa0>
 8019b92:	4629      	mov	r1, r5
 8019b94:	f7fd ff4a 	bl	8017a2c <_malloc_r>
 8019b98:	4606      	mov	r6, r0
 8019b9a:	b950      	cbnz	r0, 8019bb2 <__ssputs_r+0x5c>
 8019b9c:	230c      	movs	r3, #12
 8019b9e:	f8ca 3000 	str.w	r3, [sl]
 8019ba2:	89a3      	ldrh	r3, [r4, #12]
 8019ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ba8:	81a3      	strh	r3, [r4, #12]
 8019baa:	f04f 30ff 	mov.w	r0, #4294967295
 8019bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bb2:	6921      	ldr	r1, [r4, #16]
 8019bb4:	464a      	mov	r2, r9
 8019bb6:	f7fd feb9 	bl	801792c <memcpy>
 8019bba:	89a3      	ldrh	r3, [r4, #12]
 8019bbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bc4:	81a3      	strh	r3, [r4, #12]
 8019bc6:	6126      	str	r6, [r4, #16]
 8019bc8:	6165      	str	r5, [r4, #20]
 8019bca:	444e      	add	r6, r9
 8019bcc:	eba5 0509 	sub.w	r5, r5, r9
 8019bd0:	6026      	str	r6, [r4, #0]
 8019bd2:	60a5      	str	r5, [r4, #8]
 8019bd4:	463e      	mov	r6, r7
 8019bd6:	42be      	cmp	r6, r7
 8019bd8:	d900      	bls.n	8019bdc <__ssputs_r+0x86>
 8019bda:	463e      	mov	r6, r7
 8019bdc:	4632      	mov	r2, r6
 8019bde:	6820      	ldr	r0, [r4, #0]
 8019be0:	4641      	mov	r1, r8
 8019be2:	f7fd feb1 	bl	8017948 <memmove>
 8019be6:	68a3      	ldr	r3, [r4, #8]
 8019be8:	6822      	ldr	r2, [r4, #0]
 8019bea:	1b9b      	subs	r3, r3, r6
 8019bec:	4432      	add	r2, r6
 8019bee:	60a3      	str	r3, [r4, #8]
 8019bf0:	6022      	str	r2, [r4, #0]
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	e7db      	b.n	8019bae <__ssputs_r+0x58>
 8019bf6:	462a      	mov	r2, r5
 8019bf8:	f000 fd02 	bl	801a600 <_realloc_r>
 8019bfc:	4606      	mov	r6, r0
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d1e1      	bne.n	8019bc6 <__ssputs_r+0x70>
 8019c02:	6921      	ldr	r1, [r4, #16]
 8019c04:	4650      	mov	r0, sl
 8019c06:	f7fd fec1 	bl	801798c <_free_r>
 8019c0a:	e7c7      	b.n	8019b9c <__ssputs_r+0x46>

08019c0c <_svfiprintf_r>:
 8019c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c10:	4698      	mov	r8, r3
 8019c12:	898b      	ldrh	r3, [r1, #12]
 8019c14:	061b      	lsls	r3, r3, #24
 8019c16:	b09d      	sub	sp, #116	; 0x74
 8019c18:	4607      	mov	r7, r0
 8019c1a:	460d      	mov	r5, r1
 8019c1c:	4614      	mov	r4, r2
 8019c1e:	d50e      	bpl.n	8019c3e <_svfiprintf_r+0x32>
 8019c20:	690b      	ldr	r3, [r1, #16]
 8019c22:	b963      	cbnz	r3, 8019c3e <_svfiprintf_r+0x32>
 8019c24:	2140      	movs	r1, #64	; 0x40
 8019c26:	f7fd ff01 	bl	8017a2c <_malloc_r>
 8019c2a:	6028      	str	r0, [r5, #0]
 8019c2c:	6128      	str	r0, [r5, #16]
 8019c2e:	b920      	cbnz	r0, 8019c3a <_svfiprintf_r+0x2e>
 8019c30:	230c      	movs	r3, #12
 8019c32:	603b      	str	r3, [r7, #0]
 8019c34:	f04f 30ff 	mov.w	r0, #4294967295
 8019c38:	e0d1      	b.n	8019dde <_svfiprintf_r+0x1d2>
 8019c3a:	2340      	movs	r3, #64	; 0x40
 8019c3c:	616b      	str	r3, [r5, #20]
 8019c3e:	2300      	movs	r3, #0
 8019c40:	9309      	str	r3, [sp, #36]	; 0x24
 8019c42:	2320      	movs	r3, #32
 8019c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c4c:	2330      	movs	r3, #48	; 0x30
 8019c4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019df8 <_svfiprintf_r+0x1ec>
 8019c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c56:	f04f 0901 	mov.w	r9, #1
 8019c5a:	4623      	mov	r3, r4
 8019c5c:	469a      	mov	sl, r3
 8019c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c62:	b10a      	cbz	r2, 8019c68 <_svfiprintf_r+0x5c>
 8019c64:	2a25      	cmp	r2, #37	; 0x25
 8019c66:	d1f9      	bne.n	8019c5c <_svfiprintf_r+0x50>
 8019c68:	ebba 0b04 	subs.w	fp, sl, r4
 8019c6c:	d00b      	beq.n	8019c86 <_svfiprintf_r+0x7a>
 8019c6e:	465b      	mov	r3, fp
 8019c70:	4622      	mov	r2, r4
 8019c72:	4629      	mov	r1, r5
 8019c74:	4638      	mov	r0, r7
 8019c76:	f7ff ff6e 	bl	8019b56 <__ssputs_r>
 8019c7a:	3001      	adds	r0, #1
 8019c7c:	f000 80aa 	beq.w	8019dd4 <_svfiprintf_r+0x1c8>
 8019c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c82:	445a      	add	r2, fp
 8019c84:	9209      	str	r2, [sp, #36]	; 0x24
 8019c86:	f89a 3000 	ldrb.w	r3, [sl]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	f000 80a2 	beq.w	8019dd4 <_svfiprintf_r+0x1c8>
 8019c90:	2300      	movs	r3, #0
 8019c92:	f04f 32ff 	mov.w	r2, #4294967295
 8019c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c9a:	f10a 0a01 	add.w	sl, sl, #1
 8019c9e:	9304      	str	r3, [sp, #16]
 8019ca0:	9307      	str	r3, [sp, #28]
 8019ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8019ca8:	4654      	mov	r4, sl
 8019caa:	2205      	movs	r2, #5
 8019cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cb0:	4851      	ldr	r0, [pc, #324]	; (8019df8 <_svfiprintf_r+0x1ec>)
 8019cb2:	f7e6 fa8d 	bl	80001d0 <memchr>
 8019cb6:	9a04      	ldr	r2, [sp, #16]
 8019cb8:	b9d8      	cbnz	r0, 8019cf2 <_svfiprintf_r+0xe6>
 8019cba:	06d0      	lsls	r0, r2, #27
 8019cbc:	bf44      	itt	mi
 8019cbe:	2320      	movmi	r3, #32
 8019cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cc4:	0711      	lsls	r1, r2, #28
 8019cc6:	bf44      	itt	mi
 8019cc8:	232b      	movmi	r3, #43	; 0x2b
 8019cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cce:	f89a 3000 	ldrb.w	r3, [sl]
 8019cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8019cd4:	d015      	beq.n	8019d02 <_svfiprintf_r+0xf6>
 8019cd6:	9a07      	ldr	r2, [sp, #28]
 8019cd8:	4654      	mov	r4, sl
 8019cda:	2000      	movs	r0, #0
 8019cdc:	f04f 0c0a 	mov.w	ip, #10
 8019ce0:	4621      	mov	r1, r4
 8019ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ce6:	3b30      	subs	r3, #48	; 0x30
 8019ce8:	2b09      	cmp	r3, #9
 8019cea:	d94e      	bls.n	8019d8a <_svfiprintf_r+0x17e>
 8019cec:	b1b0      	cbz	r0, 8019d1c <_svfiprintf_r+0x110>
 8019cee:	9207      	str	r2, [sp, #28]
 8019cf0:	e014      	b.n	8019d1c <_svfiprintf_r+0x110>
 8019cf2:	eba0 0308 	sub.w	r3, r0, r8
 8019cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	9304      	str	r3, [sp, #16]
 8019cfe:	46a2      	mov	sl, r4
 8019d00:	e7d2      	b.n	8019ca8 <_svfiprintf_r+0x9c>
 8019d02:	9b03      	ldr	r3, [sp, #12]
 8019d04:	1d19      	adds	r1, r3, #4
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	9103      	str	r1, [sp, #12]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	bfbb      	ittet	lt
 8019d0e:	425b      	neglt	r3, r3
 8019d10:	f042 0202 	orrlt.w	r2, r2, #2
 8019d14:	9307      	strge	r3, [sp, #28]
 8019d16:	9307      	strlt	r3, [sp, #28]
 8019d18:	bfb8      	it	lt
 8019d1a:	9204      	strlt	r2, [sp, #16]
 8019d1c:	7823      	ldrb	r3, [r4, #0]
 8019d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8019d20:	d10c      	bne.n	8019d3c <_svfiprintf_r+0x130>
 8019d22:	7863      	ldrb	r3, [r4, #1]
 8019d24:	2b2a      	cmp	r3, #42	; 0x2a
 8019d26:	d135      	bne.n	8019d94 <_svfiprintf_r+0x188>
 8019d28:	9b03      	ldr	r3, [sp, #12]
 8019d2a:	1d1a      	adds	r2, r3, #4
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	9203      	str	r2, [sp, #12]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	bfb8      	it	lt
 8019d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d38:	3402      	adds	r4, #2
 8019d3a:	9305      	str	r3, [sp, #20]
 8019d3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019e08 <_svfiprintf_r+0x1fc>
 8019d40:	7821      	ldrb	r1, [r4, #0]
 8019d42:	2203      	movs	r2, #3
 8019d44:	4650      	mov	r0, sl
 8019d46:	f7e6 fa43 	bl	80001d0 <memchr>
 8019d4a:	b140      	cbz	r0, 8019d5e <_svfiprintf_r+0x152>
 8019d4c:	2340      	movs	r3, #64	; 0x40
 8019d4e:	eba0 000a 	sub.w	r0, r0, sl
 8019d52:	fa03 f000 	lsl.w	r0, r3, r0
 8019d56:	9b04      	ldr	r3, [sp, #16]
 8019d58:	4303      	orrs	r3, r0
 8019d5a:	3401      	adds	r4, #1
 8019d5c:	9304      	str	r3, [sp, #16]
 8019d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d62:	4826      	ldr	r0, [pc, #152]	; (8019dfc <_svfiprintf_r+0x1f0>)
 8019d64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d68:	2206      	movs	r2, #6
 8019d6a:	f7e6 fa31 	bl	80001d0 <memchr>
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d038      	beq.n	8019de4 <_svfiprintf_r+0x1d8>
 8019d72:	4b23      	ldr	r3, [pc, #140]	; (8019e00 <_svfiprintf_r+0x1f4>)
 8019d74:	bb1b      	cbnz	r3, 8019dbe <_svfiprintf_r+0x1b2>
 8019d76:	9b03      	ldr	r3, [sp, #12]
 8019d78:	3307      	adds	r3, #7
 8019d7a:	f023 0307 	bic.w	r3, r3, #7
 8019d7e:	3308      	adds	r3, #8
 8019d80:	9303      	str	r3, [sp, #12]
 8019d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d84:	4433      	add	r3, r6
 8019d86:	9309      	str	r3, [sp, #36]	; 0x24
 8019d88:	e767      	b.n	8019c5a <_svfiprintf_r+0x4e>
 8019d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d8e:	460c      	mov	r4, r1
 8019d90:	2001      	movs	r0, #1
 8019d92:	e7a5      	b.n	8019ce0 <_svfiprintf_r+0xd4>
 8019d94:	2300      	movs	r3, #0
 8019d96:	3401      	adds	r4, #1
 8019d98:	9305      	str	r3, [sp, #20]
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	f04f 0c0a 	mov.w	ip, #10
 8019da0:	4620      	mov	r0, r4
 8019da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019da6:	3a30      	subs	r2, #48	; 0x30
 8019da8:	2a09      	cmp	r2, #9
 8019daa:	d903      	bls.n	8019db4 <_svfiprintf_r+0x1a8>
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d0c5      	beq.n	8019d3c <_svfiprintf_r+0x130>
 8019db0:	9105      	str	r1, [sp, #20]
 8019db2:	e7c3      	b.n	8019d3c <_svfiprintf_r+0x130>
 8019db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019db8:	4604      	mov	r4, r0
 8019dba:	2301      	movs	r3, #1
 8019dbc:	e7f0      	b.n	8019da0 <_svfiprintf_r+0x194>
 8019dbe:	ab03      	add	r3, sp, #12
 8019dc0:	9300      	str	r3, [sp, #0]
 8019dc2:	462a      	mov	r2, r5
 8019dc4:	4b0f      	ldr	r3, [pc, #60]	; (8019e04 <_svfiprintf_r+0x1f8>)
 8019dc6:	a904      	add	r1, sp, #16
 8019dc8:	4638      	mov	r0, r7
 8019dca:	f7fd ff29 	bl	8017c20 <_printf_float>
 8019dce:	1c42      	adds	r2, r0, #1
 8019dd0:	4606      	mov	r6, r0
 8019dd2:	d1d6      	bne.n	8019d82 <_svfiprintf_r+0x176>
 8019dd4:	89ab      	ldrh	r3, [r5, #12]
 8019dd6:	065b      	lsls	r3, r3, #25
 8019dd8:	f53f af2c 	bmi.w	8019c34 <_svfiprintf_r+0x28>
 8019ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dde:	b01d      	add	sp, #116	; 0x74
 8019de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de4:	ab03      	add	r3, sp, #12
 8019de6:	9300      	str	r3, [sp, #0]
 8019de8:	462a      	mov	r2, r5
 8019dea:	4b06      	ldr	r3, [pc, #24]	; (8019e04 <_svfiprintf_r+0x1f8>)
 8019dec:	a904      	add	r1, sp, #16
 8019dee:	4638      	mov	r0, r7
 8019df0:	f7fe f9ba 	bl	8018168 <_printf_i>
 8019df4:	e7eb      	b.n	8019dce <_svfiprintf_r+0x1c2>
 8019df6:	bf00      	nop
 8019df8:	0801b114 	.word	0x0801b114
 8019dfc:	0801b11e 	.word	0x0801b11e
 8019e00:	08017c21 	.word	0x08017c21
 8019e04:	08019b57 	.word	0x08019b57
 8019e08:	0801b11a 	.word	0x0801b11a

08019e0c <__sfputc_r>:
 8019e0c:	6893      	ldr	r3, [r2, #8]
 8019e0e:	3b01      	subs	r3, #1
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	b410      	push	{r4}
 8019e14:	6093      	str	r3, [r2, #8]
 8019e16:	da08      	bge.n	8019e2a <__sfputc_r+0x1e>
 8019e18:	6994      	ldr	r4, [r2, #24]
 8019e1a:	42a3      	cmp	r3, r4
 8019e1c:	db01      	blt.n	8019e22 <__sfputc_r+0x16>
 8019e1e:	290a      	cmp	r1, #10
 8019e20:	d103      	bne.n	8019e2a <__sfputc_r+0x1e>
 8019e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e26:	f000 b98f 	b.w	801a148 <__swbuf_r>
 8019e2a:	6813      	ldr	r3, [r2, #0]
 8019e2c:	1c58      	adds	r0, r3, #1
 8019e2e:	6010      	str	r0, [r2, #0]
 8019e30:	7019      	strb	r1, [r3, #0]
 8019e32:	4608      	mov	r0, r1
 8019e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e38:	4770      	bx	lr

08019e3a <__sfputs_r>:
 8019e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e3c:	4606      	mov	r6, r0
 8019e3e:	460f      	mov	r7, r1
 8019e40:	4614      	mov	r4, r2
 8019e42:	18d5      	adds	r5, r2, r3
 8019e44:	42ac      	cmp	r4, r5
 8019e46:	d101      	bne.n	8019e4c <__sfputs_r+0x12>
 8019e48:	2000      	movs	r0, #0
 8019e4a:	e007      	b.n	8019e5c <__sfputs_r+0x22>
 8019e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e50:	463a      	mov	r2, r7
 8019e52:	4630      	mov	r0, r6
 8019e54:	f7ff ffda 	bl	8019e0c <__sfputc_r>
 8019e58:	1c43      	adds	r3, r0, #1
 8019e5a:	d1f3      	bne.n	8019e44 <__sfputs_r+0xa>
 8019e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019e60 <_vfiprintf_r>:
 8019e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e64:	460d      	mov	r5, r1
 8019e66:	b09d      	sub	sp, #116	; 0x74
 8019e68:	4614      	mov	r4, r2
 8019e6a:	4698      	mov	r8, r3
 8019e6c:	4606      	mov	r6, r0
 8019e6e:	b118      	cbz	r0, 8019e78 <_vfiprintf_r+0x18>
 8019e70:	6983      	ldr	r3, [r0, #24]
 8019e72:	b90b      	cbnz	r3, 8019e78 <_vfiprintf_r+0x18>
 8019e74:	f7ff fa30 	bl	80192d8 <__sinit>
 8019e78:	4b89      	ldr	r3, [pc, #548]	; (801a0a0 <_vfiprintf_r+0x240>)
 8019e7a:	429d      	cmp	r5, r3
 8019e7c:	d11b      	bne.n	8019eb6 <_vfiprintf_r+0x56>
 8019e7e:	6875      	ldr	r5, [r6, #4]
 8019e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e82:	07d9      	lsls	r1, r3, #31
 8019e84:	d405      	bmi.n	8019e92 <_vfiprintf_r+0x32>
 8019e86:	89ab      	ldrh	r3, [r5, #12]
 8019e88:	059a      	lsls	r2, r3, #22
 8019e8a:	d402      	bmi.n	8019e92 <_vfiprintf_r+0x32>
 8019e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e8e:	f7ff fac6 	bl	801941e <__retarget_lock_acquire_recursive>
 8019e92:	89ab      	ldrh	r3, [r5, #12]
 8019e94:	071b      	lsls	r3, r3, #28
 8019e96:	d501      	bpl.n	8019e9c <_vfiprintf_r+0x3c>
 8019e98:	692b      	ldr	r3, [r5, #16]
 8019e9a:	b9eb      	cbnz	r3, 8019ed8 <_vfiprintf_r+0x78>
 8019e9c:	4629      	mov	r1, r5
 8019e9e:	4630      	mov	r0, r6
 8019ea0:	f000 f9b6 	bl	801a210 <__swsetup_r>
 8019ea4:	b1c0      	cbz	r0, 8019ed8 <_vfiprintf_r+0x78>
 8019ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ea8:	07dc      	lsls	r4, r3, #31
 8019eaa:	d50e      	bpl.n	8019eca <_vfiprintf_r+0x6a>
 8019eac:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb0:	b01d      	add	sp, #116	; 0x74
 8019eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb6:	4b7b      	ldr	r3, [pc, #492]	; (801a0a4 <_vfiprintf_r+0x244>)
 8019eb8:	429d      	cmp	r5, r3
 8019eba:	d101      	bne.n	8019ec0 <_vfiprintf_r+0x60>
 8019ebc:	68b5      	ldr	r5, [r6, #8]
 8019ebe:	e7df      	b.n	8019e80 <_vfiprintf_r+0x20>
 8019ec0:	4b79      	ldr	r3, [pc, #484]	; (801a0a8 <_vfiprintf_r+0x248>)
 8019ec2:	429d      	cmp	r5, r3
 8019ec4:	bf08      	it	eq
 8019ec6:	68f5      	ldreq	r5, [r6, #12]
 8019ec8:	e7da      	b.n	8019e80 <_vfiprintf_r+0x20>
 8019eca:	89ab      	ldrh	r3, [r5, #12]
 8019ecc:	0598      	lsls	r0, r3, #22
 8019ece:	d4ed      	bmi.n	8019eac <_vfiprintf_r+0x4c>
 8019ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ed2:	f7ff faa5 	bl	8019420 <__retarget_lock_release_recursive>
 8019ed6:	e7e9      	b.n	8019eac <_vfiprintf_r+0x4c>
 8019ed8:	2300      	movs	r3, #0
 8019eda:	9309      	str	r3, [sp, #36]	; 0x24
 8019edc:	2320      	movs	r3, #32
 8019ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ee6:	2330      	movs	r3, #48	; 0x30
 8019ee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a0ac <_vfiprintf_r+0x24c>
 8019eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ef0:	f04f 0901 	mov.w	r9, #1
 8019ef4:	4623      	mov	r3, r4
 8019ef6:	469a      	mov	sl, r3
 8019ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019efc:	b10a      	cbz	r2, 8019f02 <_vfiprintf_r+0xa2>
 8019efe:	2a25      	cmp	r2, #37	; 0x25
 8019f00:	d1f9      	bne.n	8019ef6 <_vfiprintf_r+0x96>
 8019f02:	ebba 0b04 	subs.w	fp, sl, r4
 8019f06:	d00b      	beq.n	8019f20 <_vfiprintf_r+0xc0>
 8019f08:	465b      	mov	r3, fp
 8019f0a:	4622      	mov	r2, r4
 8019f0c:	4629      	mov	r1, r5
 8019f0e:	4630      	mov	r0, r6
 8019f10:	f7ff ff93 	bl	8019e3a <__sfputs_r>
 8019f14:	3001      	adds	r0, #1
 8019f16:	f000 80aa 	beq.w	801a06e <_vfiprintf_r+0x20e>
 8019f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f1c:	445a      	add	r2, fp
 8019f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8019f20:	f89a 3000 	ldrb.w	r3, [sl]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	f000 80a2 	beq.w	801a06e <_vfiprintf_r+0x20e>
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f34:	f10a 0a01 	add.w	sl, sl, #1
 8019f38:	9304      	str	r3, [sp, #16]
 8019f3a:	9307      	str	r3, [sp, #28]
 8019f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f40:	931a      	str	r3, [sp, #104]	; 0x68
 8019f42:	4654      	mov	r4, sl
 8019f44:	2205      	movs	r2, #5
 8019f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f4a:	4858      	ldr	r0, [pc, #352]	; (801a0ac <_vfiprintf_r+0x24c>)
 8019f4c:	f7e6 f940 	bl	80001d0 <memchr>
 8019f50:	9a04      	ldr	r2, [sp, #16]
 8019f52:	b9d8      	cbnz	r0, 8019f8c <_vfiprintf_r+0x12c>
 8019f54:	06d1      	lsls	r1, r2, #27
 8019f56:	bf44      	itt	mi
 8019f58:	2320      	movmi	r3, #32
 8019f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f5e:	0713      	lsls	r3, r2, #28
 8019f60:	bf44      	itt	mi
 8019f62:	232b      	movmi	r3, #43	; 0x2b
 8019f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f68:	f89a 3000 	ldrb.w	r3, [sl]
 8019f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8019f6e:	d015      	beq.n	8019f9c <_vfiprintf_r+0x13c>
 8019f70:	9a07      	ldr	r2, [sp, #28]
 8019f72:	4654      	mov	r4, sl
 8019f74:	2000      	movs	r0, #0
 8019f76:	f04f 0c0a 	mov.w	ip, #10
 8019f7a:	4621      	mov	r1, r4
 8019f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f80:	3b30      	subs	r3, #48	; 0x30
 8019f82:	2b09      	cmp	r3, #9
 8019f84:	d94e      	bls.n	801a024 <_vfiprintf_r+0x1c4>
 8019f86:	b1b0      	cbz	r0, 8019fb6 <_vfiprintf_r+0x156>
 8019f88:	9207      	str	r2, [sp, #28]
 8019f8a:	e014      	b.n	8019fb6 <_vfiprintf_r+0x156>
 8019f8c:	eba0 0308 	sub.w	r3, r0, r8
 8019f90:	fa09 f303 	lsl.w	r3, r9, r3
 8019f94:	4313      	orrs	r3, r2
 8019f96:	9304      	str	r3, [sp, #16]
 8019f98:	46a2      	mov	sl, r4
 8019f9a:	e7d2      	b.n	8019f42 <_vfiprintf_r+0xe2>
 8019f9c:	9b03      	ldr	r3, [sp, #12]
 8019f9e:	1d19      	adds	r1, r3, #4
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	9103      	str	r1, [sp, #12]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	bfbb      	ittet	lt
 8019fa8:	425b      	neglt	r3, r3
 8019faa:	f042 0202 	orrlt.w	r2, r2, #2
 8019fae:	9307      	strge	r3, [sp, #28]
 8019fb0:	9307      	strlt	r3, [sp, #28]
 8019fb2:	bfb8      	it	lt
 8019fb4:	9204      	strlt	r2, [sp, #16]
 8019fb6:	7823      	ldrb	r3, [r4, #0]
 8019fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8019fba:	d10c      	bne.n	8019fd6 <_vfiprintf_r+0x176>
 8019fbc:	7863      	ldrb	r3, [r4, #1]
 8019fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8019fc0:	d135      	bne.n	801a02e <_vfiprintf_r+0x1ce>
 8019fc2:	9b03      	ldr	r3, [sp, #12]
 8019fc4:	1d1a      	adds	r2, r3, #4
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	9203      	str	r2, [sp, #12]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	bfb8      	it	lt
 8019fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fd2:	3402      	adds	r4, #2
 8019fd4:	9305      	str	r3, [sp, #20]
 8019fd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a0bc <_vfiprintf_r+0x25c>
 8019fda:	7821      	ldrb	r1, [r4, #0]
 8019fdc:	2203      	movs	r2, #3
 8019fde:	4650      	mov	r0, sl
 8019fe0:	f7e6 f8f6 	bl	80001d0 <memchr>
 8019fe4:	b140      	cbz	r0, 8019ff8 <_vfiprintf_r+0x198>
 8019fe6:	2340      	movs	r3, #64	; 0x40
 8019fe8:	eba0 000a 	sub.w	r0, r0, sl
 8019fec:	fa03 f000 	lsl.w	r0, r3, r0
 8019ff0:	9b04      	ldr	r3, [sp, #16]
 8019ff2:	4303      	orrs	r3, r0
 8019ff4:	3401      	adds	r4, #1
 8019ff6:	9304      	str	r3, [sp, #16]
 8019ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ffc:	482c      	ldr	r0, [pc, #176]	; (801a0b0 <_vfiprintf_r+0x250>)
 8019ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a002:	2206      	movs	r2, #6
 801a004:	f7e6 f8e4 	bl	80001d0 <memchr>
 801a008:	2800      	cmp	r0, #0
 801a00a:	d03f      	beq.n	801a08c <_vfiprintf_r+0x22c>
 801a00c:	4b29      	ldr	r3, [pc, #164]	; (801a0b4 <_vfiprintf_r+0x254>)
 801a00e:	bb1b      	cbnz	r3, 801a058 <_vfiprintf_r+0x1f8>
 801a010:	9b03      	ldr	r3, [sp, #12]
 801a012:	3307      	adds	r3, #7
 801a014:	f023 0307 	bic.w	r3, r3, #7
 801a018:	3308      	adds	r3, #8
 801a01a:	9303      	str	r3, [sp, #12]
 801a01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a01e:	443b      	add	r3, r7
 801a020:	9309      	str	r3, [sp, #36]	; 0x24
 801a022:	e767      	b.n	8019ef4 <_vfiprintf_r+0x94>
 801a024:	fb0c 3202 	mla	r2, ip, r2, r3
 801a028:	460c      	mov	r4, r1
 801a02a:	2001      	movs	r0, #1
 801a02c:	e7a5      	b.n	8019f7a <_vfiprintf_r+0x11a>
 801a02e:	2300      	movs	r3, #0
 801a030:	3401      	adds	r4, #1
 801a032:	9305      	str	r3, [sp, #20]
 801a034:	4619      	mov	r1, r3
 801a036:	f04f 0c0a 	mov.w	ip, #10
 801a03a:	4620      	mov	r0, r4
 801a03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a040:	3a30      	subs	r2, #48	; 0x30
 801a042:	2a09      	cmp	r2, #9
 801a044:	d903      	bls.n	801a04e <_vfiprintf_r+0x1ee>
 801a046:	2b00      	cmp	r3, #0
 801a048:	d0c5      	beq.n	8019fd6 <_vfiprintf_r+0x176>
 801a04a:	9105      	str	r1, [sp, #20]
 801a04c:	e7c3      	b.n	8019fd6 <_vfiprintf_r+0x176>
 801a04e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a052:	4604      	mov	r4, r0
 801a054:	2301      	movs	r3, #1
 801a056:	e7f0      	b.n	801a03a <_vfiprintf_r+0x1da>
 801a058:	ab03      	add	r3, sp, #12
 801a05a:	9300      	str	r3, [sp, #0]
 801a05c:	462a      	mov	r2, r5
 801a05e:	4b16      	ldr	r3, [pc, #88]	; (801a0b8 <_vfiprintf_r+0x258>)
 801a060:	a904      	add	r1, sp, #16
 801a062:	4630      	mov	r0, r6
 801a064:	f7fd fddc 	bl	8017c20 <_printf_float>
 801a068:	4607      	mov	r7, r0
 801a06a:	1c78      	adds	r0, r7, #1
 801a06c:	d1d6      	bne.n	801a01c <_vfiprintf_r+0x1bc>
 801a06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a070:	07d9      	lsls	r1, r3, #31
 801a072:	d405      	bmi.n	801a080 <_vfiprintf_r+0x220>
 801a074:	89ab      	ldrh	r3, [r5, #12]
 801a076:	059a      	lsls	r2, r3, #22
 801a078:	d402      	bmi.n	801a080 <_vfiprintf_r+0x220>
 801a07a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a07c:	f7ff f9d0 	bl	8019420 <__retarget_lock_release_recursive>
 801a080:	89ab      	ldrh	r3, [r5, #12]
 801a082:	065b      	lsls	r3, r3, #25
 801a084:	f53f af12 	bmi.w	8019eac <_vfiprintf_r+0x4c>
 801a088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a08a:	e711      	b.n	8019eb0 <_vfiprintf_r+0x50>
 801a08c:	ab03      	add	r3, sp, #12
 801a08e:	9300      	str	r3, [sp, #0]
 801a090:	462a      	mov	r2, r5
 801a092:	4b09      	ldr	r3, [pc, #36]	; (801a0b8 <_vfiprintf_r+0x258>)
 801a094:	a904      	add	r1, sp, #16
 801a096:	4630      	mov	r0, r6
 801a098:	f7fe f866 	bl	8018168 <_printf_i>
 801a09c:	e7e4      	b.n	801a068 <_vfiprintf_r+0x208>
 801a09e:	bf00      	nop
 801a0a0:	0801af74 	.word	0x0801af74
 801a0a4:	0801af94 	.word	0x0801af94
 801a0a8:	0801af54 	.word	0x0801af54
 801a0ac:	0801b114 	.word	0x0801b114
 801a0b0:	0801b11e 	.word	0x0801b11e
 801a0b4:	08017c21 	.word	0x08017c21
 801a0b8:	08019e3b 	.word	0x08019e3b
 801a0bc:	0801b11a 	.word	0x0801b11a

0801a0c0 <__sread>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	460c      	mov	r4, r1
 801a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0c8:	f000 fac0 	bl	801a64c <_read_r>
 801a0cc:	2800      	cmp	r0, #0
 801a0ce:	bfab      	itete	ge
 801a0d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0d2:	89a3      	ldrhlt	r3, [r4, #12]
 801a0d4:	181b      	addge	r3, r3, r0
 801a0d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a0da:	bfac      	ite	ge
 801a0dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801a0de:	81a3      	strhlt	r3, [r4, #12]
 801a0e0:	bd10      	pop	{r4, pc}

0801a0e2 <__swrite>:
 801a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e6:	461f      	mov	r7, r3
 801a0e8:	898b      	ldrh	r3, [r1, #12]
 801a0ea:	05db      	lsls	r3, r3, #23
 801a0ec:	4605      	mov	r5, r0
 801a0ee:	460c      	mov	r4, r1
 801a0f0:	4616      	mov	r6, r2
 801a0f2:	d505      	bpl.n	801a100 <__swrite+0x1e>
 801a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f8:	2302      	movs	r3, #2
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	f000 f9f8 	bl	801a4f0 <_lseek_r>
 801a100:	89a3      	ldrh	r3, [r4, #12]
 801a102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a10a:	81a3      	strh	r3, [r4, #12]
 801a10c:	4632      	mov	r2, r6
 801a10e:	463b      	mov	r3, r7
 801a110:	4628      	mov	r0, r5
 801a112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a116:	f000 b869 	b.w	801a1ec <_write_r>

0801a11a <__sseek>:
 801a11a:	b510      	push	{r4, lr}
 801a11c:	460c      	mov	r4, r1
 801a11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a122:	f000 f9e5 	bl	801a4f0 <_lseek_r>
 801a126:	1c43      	adds	r3, r0, #1
 801a128:	89a3      	ldrh	r3, [r4, #12]
 801a12a:	bf15      	itete	ne
 801a12c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a12e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a136:	81a3      	strheq	r3, [r4, #12]
 801a138:	bf18      	it	ne
 801a13a:	81a3      	strhne	r3, [r4, #12]
 801a13c:	bd10      	pop	{r4, pc}

0801a13e <__sclose>:
 801a13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a142:	f000 b8f1 	b.w	801a328 <_close_r>
	...

0801a148 <__swbuf_r>:
 801a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a14a:	460e      	mov	r6, r1
 801a14c:	4614      	mov	r4, r2
 801a14e:	4605      	mov	r5, r0
 801a150:	b118      	cbz	r0, 801a15a <__swbuf_r+0x12>
 801a152:	6983      	ldr	r3, [r0, #24]
 801a154:	b90b      	cbnz	r3, 801a15a <__swbuf_r+0x12>
 801a156:	f7ff f8bf 	bl	80192d8 <__sinit>
 801a15a:	4b21      	ldr	r3, [pc, #132]	; (801a1e0 <__swbuf_r+0x98>)
 801a15c:	429c      	cmp	r4, r3
 801a15e:	d12b      	bne.n	801a1b8 <__swbuf_r+0x70>
 801a160:	686c      	ldr	r4, [r5, #4]
 801a162:	69a3      	ldr	r3, [r4, #24]
 801a164:	60a3      	str	r3, [r4, #8]
 801a166:	89a3      	ldrh	r3, [r4, #12]
 801a168:	071a      	lsls	r2, r3, #28
 801a16a:	d52f      	bpl.n	801a1cc <__swbuf_r+0x84>
 801a16c:	6923      	ldr	r3, [r4, #16]
 801a16e:	b36b      	cbz	r3, 801a1cc <__swbuf_r+0x84>
 801a170:	6923      	ldr	r3, [r4, #16]
 801a172:	6820      	ldr	r0, [r4, #0]
 801a174:	1ac0      	subs	r0, r0, r3
 801a176:	6963      	ldr	r3, [r4, #20]
 801a178:	b2f6      	uxtb	r6, r6
 801a17a:	4283      	cmp	r3, r0
 801a17c:	4637      	mov	r7, r6
 801a17e:	dc04      	bgt.n	801a18a <__swbuf_r+0x42>
 801a180:	4621      	mov	r1, r4
 801a182:	4628      	mov	r0, r5
 801a184:	f000 f966 	bl	801a454 <_fflush_r>
 801a188:	bb30      	cbnz	r0, 801a1d8 <__swbuf_r+0x90>
 801a18a:	68a3      	ldr	r3, [r4, #8]
 801a18c:	3b01      	subs	r3, #1
 801a18e:	60a3      	str	r3, [r4, #8]
 801a190:	6823      	ldr	r3, [r4, #0]
 801a192:	1c5a      	adds	r2, r3, #1
 801a194:	6022      	str	r2, [r4, #0]
 801a196:	701e      	strb	r6, [r3, #0]
 801a198:	6963      	ldr	r3, [r4, #20]
 801a19a:	3001      	adds	r0, #1
 801a19c:	4283      	cmp	r3, r0
 801a19e:	d004      	beq.n	801a1aa <__swbuf_r+0x62>
 801a1a0:	89a3      	ldrh	r3, [r4, #12]
 801a1a2:	07db      	lsls	r3, r3, #31
 801a1a4:	d506      	bpl.n	801a1b4 <__swbuf_r+0x6c>
 801a1a6:	2e0a      	cmp	r6, #10
 801a1a8:	d104      	bne.n	801a1b4 <__swbuf_r+0x6c>
 801a1aa:	4621      	mov	r1, r4
 801a1ac:	4628      	mov	r0, r5
 801a1ae:	f000 f951 	bl	801a454 <_fflush_r>
 801a1b2:	b988      	cbnz	r0, 801a1d8 <__swbuf_r+0x90>
 801a1b4:	4638      	mov	r0, r7
 801a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1b8:	4b0a      	ldr	r3, [pc, #40]	; (801a1e4 <__swbuf_r+0x9c>)
 801a1ba:	429c      	cmp	r4, r3
 801a1bc:	d101      	bne.n	801a1c2 <__swbuf_r+0x7a>
 801a1be:	68ac      	ldr	r4, [r5, #8]
 801a1c0:	e7cf      	b.n	801a162 <__swbuf_r+0x1a>
 801a1c2:	4b09      	ldr	r3, [pc, #36]	; (801a1e8 <__swbuf_r+0xa0>)
 801a1c4:	429c      	cmp	r4, r3
 801a1c6:	bf08      	it	eq
 801a1c8:	68ec      	ldreq	r4, [r5, #12]
 801a1ca:	e7ca      	b.n	801a162 <__swbuf_r+0x1a>
 801a1cc:	4621      	mov	r1, r4
 801a1ce:	4628      	mov	r0, r5
 801a1d0:	f000 f81e 	bl	801a210 <__swsetup_r>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d0cb      	beq.n	801a170 <__swbuf_r+0x28>
 801a1d8:	f04f 37ff 	mov.w	r7, #4294967295
 801a1dc:	e7ea      	b.n	801a1b4 <__swbuf_r+0x6c>
 801a1de:	bf00      	nop
 801a1e0:	0801af74 	.word	0x0801af74
 801a1e4:	0801af94 	.word	0x0801af94
 801a1e8:	0801af54 	.word	0x0801af54

0801a1ec <_write_r>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	4d07      	ldr	r5, [pc, #28]	; (801a20c <_write_r+0x20>)
 801a1f0:	4604      	mov	r4, r0
 801a1f2:	4608      	mov	r0, r1
 801a1f4:	4611      	mov	r1, r2
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	602a      	str	r2, [r5, #0]
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	f7e8 fc03 	bl	8002a06 <_write>
 801a200:	1c43      	adds	r3, r0, #1
 801a202:	d102      	bne.n	801a20a <_write_r+0x1e>
 801a204:	682b      	ldr	r3, [r5, #0]
 801a206:	b103      	cbz	r3, 801a20a <_write_r+0x1e>
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	bd38      	pop	{r3, r4, r5, pc}
 801a20c:	20001a04 	.word	0x20001a04

0801a210 <__swsetup_r>:
 801a210:	4b32      	ldr	r3, [pc, #200]	; (801a2dc <__swsetup_r+0xcc>)
 801a212:	b570      	push	{r4, r5, r6, lr}
 801a214:	681d      	ldr	r5, [r3, #0]
 801a216:	4606      	mov	r6, r0
 801a218:	460c      	mov	r4, r1
 801a21a:	b125      	cbz	r5, 801a226 <__swsetup_r+0x16>
 801a21c:	69ab      	ldr	r3, [r5, #24]
 801a21e:	b913      	cbnz	r3, 801a226 <__swsetup_r+0x16>
 801a220:	4628      	mov	r0, r5
 801a222:	f7ff f859 	bl	80192d8 <__sinit>
 801a226:	4b2e      	ldr	r3, [pc, #184]	; (801a2e0 <__swsetup_r+0xd0>)
 801a228:	429c      	cmp	r4, r3
 801a22a:	d10f      	bne.n	801a24c <__swsetup_r+0x3c>
 801a22c:	686c      	ldr	r4, [r5, #4]
 801a22e:	89a3      	ldrh	r3, [r4, #12]
 801a230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a234:	0719      	lsls	r1, r3, #28
 801a236:	d42c      	bmi.n	801a292 <__swsetup_r+0x82>
 801a238:	06dd      	lsls	r5, r3, #27
 801a23a:	d411      	bmi.n	801a260 <__swsetup_r+0x50>
 801a23c:	2309      	movs	r3, #9
 801a23e:	6033      	str	r3, [r6, #0]
 801a240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a244:	81a3      	strh	r3, [r4, #12]
 801a246:	f04f 30ff 	mov.w	r0, #4294967295
 801a24a:	e03e      	b.n	801a2ca <__swsetup_r+0xba>
 801a24c:	4b25      	ldr	r3, [pc, #148]	; (801a2e4 <__swsetup_r+0xd4>)
 801a24e:	429c      	cmp	r4, r3
 801a250:	d101      	bne.n	801a256 <__swsetup_r+0x46>
 801a252:	68ac      	ldr	r4, [r5, #8]
 801a254:	e7eb      	b.n	801a22e <__swsetup_r+0x1e>
 801a256:	4b24      	ldr	r3, [pc, #144]	; (801a2e8 <__swsetup_r+0xd8>)
 801a258:	429c      	cmp	r4, r3
 801a25a:	bf08      	it	eq
 801a25c:	68ec      	ldreq	r4, [r5, #12]
 801a25e:	e7e6      	b.n	801a22e <__swsetup_r+0x1e>
 801a260:	0758      	lsls	r0, r3, #29
 801a262:	d512      	bpl.n	801a28a <__swsetup_r+0x7a>
 801a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a266:	b141      	cbz	r1, 801a27a <__swsetup_r+0x6a>
 801a268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a26c:	4299      	cmp	r1, r3
 801a26e:	d002      	beq.n	801a276 <__swsetup_r+0x66>
 801a270:	4630      	mov	r0, r6
 801a272:	f7fd fb8b 	bl	801798c <_free_r>
 801a276:	2300      	movs	r3, #0
 801a278:	6363      	str	r3, [r4, #52]	; 0x34
 801a27a:	89a3      	ldrh	r3, [r4, #12]
 801a27c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a280:	81a3      	strh	r3, [r4, #12]
 801a282:	2300      	movs	r3, #0
 801a284:	6063      	str	r3, [r4, #4]
 801a286:	6923      	ldr	r3, [r4, #16]
 801a288:	6023      	str	r3, [r4, #0]
 801a28a:	89a3      	ldrh	r3, [r4, #12]
 801a28c:	f043 0308 	orr.w	r3, r3, #8
 801a290:	81a3      	strh	r3, [r4, #12]
 801a292:	6923      	ldr	r3, [r4, #16]
 801a294:	b94b      	cbnz	r3, 801a2aa <__swsetup_r+0x9a>
 801a296:	89a3      	ldrh	r3, [r4, #12]
 801a298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2a0:	d003      	beq.n	801a2aa <__swsetup_r+0x9a>
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	f000 f959 	bl	801a55c <__smakebuf_r>
 801a2aa:	89a0      	ldrh	r0, [r4, #12]
 801a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2b0:	f010 0301 	ands.w	r3, r0, #1
 801a2b4:	d00a      	beq.n	801a2cc <__swsetup_r+0xbc>
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	60a3      	str	r3, [r4, #8]
 801a2ba:	6963      	ldr	r3, [r4, #20]
 801a2bc:	425b      	negs	r3, r3
 801a2be:	61a3      	str	r3, [r4, #24]
 801a2c0:	6923      	ldr	r3, [r4, #16]
 801a2c2:	b943      	cbnz	r3, 801a2d6 <__swsetup_r+0xc6>
 801a2c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a2c8:	d1ba      	bne.n	801a240 <__swsetup_r+0x30>
 801a2ca:	bd70      	pop	{r4, r5, r6, pc}
 801a2cc:	0781      	lsls	r1, r0, #30
 801a2ce:	bf58      	it	pl
 801a2d0:	6963      	ldrpl	r3, [r4, #20]
 801a2d2:	60a3      	str	r3, [r4, #8]
 801a2d4:	e7f4      	b.n	801a2c0 <__swsetup_r+0xb0>
 801a2d6:	2000      	movs	r0, #0
 801a2d8:	e7f7      	b.n	801a2ca <__swsetup_r+0xba>
 801a2da:	bf00      	nop
 801a2dc:	200000f0 	.word	0x200000f0
 801a2e0:	0801af74 	.word	0x0801af74
 801a2e4:	0801af94 	.word	0x0801af94
 801a2e8:	0801af54 	.word	0x0801af54

0801a2ec <__assert_func>:
 801a2ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2ee:	4614      	mov	r4, r2
 801a2f0:	461a      	mov	r2, r3
 801a2f2:	4b09      	ldr	r3, [pc, #36]	; (801a318 <__assert_func+0x2c>)
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	4605      	mov	r5, r0
 801a2f8:	68d8      	ldr	r0, [r3, #12]
 801a2fa:	b14c      	cbz	r4, 801a310 <__assert_func+0x24>
 801a2fc:	4b07      	ldr	r3, [pc, #28]	; (801a31c <__assert_func+0x30>)
 801a2fe:	9100      	str	r1, [sp, #0]
 801a300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a304:	4906      	ldr	r1, [pc, #24]	; (801a320 <__assert_func+0x34>)
 801a306:	462b      	mov	r3, r5
 801a308:	f000 f8e0 	bl	801a4cc <fiprintf>
 801a30c:	f7fd facc 	bl	80178a8 <abort>
 801a310:	4b04      	ldr	r3, [pc, #16]	; (801a324 <__assert_func+0x38>)
 801a312:	461c      	mov	r4, r3
 801a314:	e7f3      	b.n	801a2fe <__assert_func+0x12>
 801a316:	bf00      	nop
 801a318:	200000f0 	.word	0x200000f0
 801a31c:	0801b125 	.word	0x0801b125
 801a320:	0801b132 	.word	0x0801b132
 801a324:	0801b160 	.word	0x0801b160

0801a328 <_close_r>:
 801a328:	b538      	push	{r3, r4, r5, lr}
 801a32a:	4d06      	ldr	r5, [pc, #24]	; (801a344 <_close_r+0x1c>)
 801a32c:	2300      	movs	r3, #0
 801a32e:	4604      	mov	r4, r0
 801a330:	4608      	mov	r0, r1
 801a332:	602b      	str	r3, [r5, #0]
 801a334:	f7e8 fb83 	bl	8002a3e <_close>
 801a338:	1c43      	adds	r3, r0, #1
 801a33a:	d102      	bne.n	801a342 <_close_r+0x1a>
 801a33c:	682b      	ldr	r3, [r5, #0]
 801a33e:	b103      	cbz	r3, 801a342 <_close_r+0x1a>
 801a340:	6023      	str	r3, [r4, #0]
 801a342:	bd38      	pop	{r3, r4, r5, pc}
 801a344:	20001a04 	.word	0x20001a04

0801a348 <__sflush_r>:
 801a348:	898a      	ldrh	r2, [r1, #12]
 801a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a34e:	4605      	mov	r5, r0
 801a350:	0710      	lsls	r0, r2, #28
 801a352:	460c      	mov	r4, r1
 801a354:	d458      	bmi.n	801a408 <__sflush_r+0xc0>
 801a356:	684b      	ldr	r3, [r1, #4]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	dc05      	bgt.n	801a368 <__sflush_r+0x20>
 801a35c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a35e:	2b00      	cmp	r3, #0
 801a360:	dc02      	bgt.n	801a368 <__sflush_r+0x20>
 801a362:	2000      	movs	r0, #0
 801a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a36a:	2e00      	cmp	r6, #0
 801a36c:	d0f9      	beq.n	801a362 <__sflush_r+0x1a>
 801a36e:	2300      	movs	r3, #0
 801a370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a374:	682f      	ldr	r7, [r5, #0]
 801a376:	602b      	str	r3, [r5, #0]
 801a378:	d032      	beq.n	801a3e0 <__sflush_r+0x98>
 801a37a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a37c:	89a3      	ldrh	r3, [r4, #12]
 801a37e:	075a      	lsls	r2, r3, #29
 801a380:	d505      	bpl.n	801a38e <__sflush_r+0x46>
 801a382:	6863      	ldr	r3, [r4, #4]
 801a384:	1ac0      	subs	r0, r0, r3
 801a386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a388:	b10b      	cbz	r3, 801a38e <__sflush_r+0x46>
 801a38a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a38c:	1ac0      	subs	r0, r0, r3
 801a38e:	2300      	movs	r3, #0
 801a390:	4602      	mov	r2, r0
 801a392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a394:	6a21      	ldr	r1, [r4, #32]
 801a396:	4628      	mov	r0, r5
 801a398:	47b0      	blx	r6
 801a39a:	1c43      	adds	r3, r0, #1
 801a39c:	89a3      	ldrh	r3, [r4, #12]
 801a39e:	d106      	bne.n	801a3ae <__sflush_r+0x66>
 801a3a0:	6829      	ldr	r1, [r5, #0]
 801a3a2:	291d      	cmp	r1, #29
 801a3a4:	d82c      	bhi.n	801a400 <__sflush_r+0xb8>
 801a3a6:	4a2a      	ldr	r2, [pc, #168]	; (801a450 <__sflush_r+0x108>)
 801a3a8:	40ca      	lsrs	r2, r1
 801a3aa:	07d6      	lsls	r6, r2, #31
 801a3ac:	d528      	bpl.n	801a400 <__sflush_r+0xb8>
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	6062      	str	r2, [r4, #4]
 801a3b2:	04d9      	lsls	r1, r3, #19
 801a3b4:	6922      	ldr	r2, [r4, #16]
 801a3b6:	6022      	str	r2, [r4, #0]
 801a3b8:	d504      	bpl.n	801a3c4 <__sflush_r+0x7c>
 801a3ba:	1c42      	adds	r2, r0, #1
 801a3bc:	d101      	bne.n	801a3c2 <__sflush_r+0x7a>
 801a3be:	682b      	ldr	r3, [r5, #0]
 801a3c0:	b903      	cbnz	r3, 801a3c4 <__sflush_r+0x7c>
 801a3c2:	6560      	str	r0, [r4, #84]	; 0x54
 801a3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3c6:	602f      	str	r7, [r5, #0]
 801a3c8:	2900      	cmp	r1, #0
 801a3ca:	d0ca      	beq.n	801a362 <__sflush_r+0x1a>
 801a3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3d0:	4299      	cmp	r1, r3
 801a3d2:	d002      	beq.n	801a3da <__sflush_r+0x92>
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	f7fd fad9 	bl	801798c <_free_r>
 801a3da:	2000      	movs	r0, #0
 801a3dc:	6360      	str	r0, [r4, #52]	; 0x34
 801a3de:	e7c1      	b.n	801a364 <__sflush_r+0x1c>
 801a3e0:	6a21      	ldr	r1, [r4, #32]
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	4628      	mov	r0, r5
 801a3e6:	47b0      	blx	r6
 801a3e8:	1c41      	adds	r1, r0, #1
 801a3ea:	d1c7      	bne.n	801a37c <__sflush_r+0x34>
 801a3ec:	682b      	ldr	r3, [r5, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d0c4      	beq.n	801a37c <__sflush_r+0x34>
 801a3f2:	2b1d      	cmp	r3, #29
 801a3f4:	d001      	beq.n	801a3fa <__sflush_r+0xb2>
 801a3f6:	2b16      	cmp	r3, #22
 801a3f8:	d101      	bne.n	801a3fe <__sflush_r+0xb6>
 801a3fa:	602f      	str	r7, [r5, #0]
 801a3fc:	e7b1      	b.n	801a362 <__sflush_r+0x1a>
 801a3fe:	89a3      	ldrh	r3, [r4, #12]
 801a400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a404:	81a3      	strh	r3, [r4, #12]
 801a406:	e7ad      	b.n	801a364 <__sflush_r+0x1c>
 801a408:	690f      	ldr	r7, [r1, #16]
 801a40a:	2f00      	cmp	r7, #0
 801a40c:	d0a9      	beq.n	801a362 <__sflush_r+0x1a>
 801a40e:	0793      	lsls	r3, r2, #30
 801a410:	680e      	ldr	r6, [r1, #0]
 801a412:	bf08      	it	eq
 801a414:	694b      	ldreq	r3, [r1, #20]
 801a416:	600f      	str	r7, [r1, #0]
 801a418:	bf18      	it	ne
 801a41a:	2300      	movne	r3, #0
 801a41c:	eba6 0807 	sub.w	r8, r6, r7
 801a420:	608b      	str	r3, [r1, #8]
 801a422:	f1b8 0f00 	cmp.w	r8, #0
 801a426:	dd9c      	ble.n	801a362 <__sflush_r+0x1a>
 801a428:	6a21      	ldr	r1, [r4, #32]
 801a42a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a42c:	4643      	mov	r3, r8
 801a42e:	463a      	mov	r2, r7
 801a430:	4628      	mov	r0, r5
 801a432:	47b0      	blx	r6
 801a434:	2800      	cmp	r0, #0
 801a436:	dc06      	bgt.n	801a446 <__sflush_r+0xfe>
 801a438:	89a3      	ldrh	r3, [r4, #12]
 801a43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a43e:	81a3      	strh	r3, [r4, #12]
 801a440:	f04f 30ff 	mov.w	r0, #4294967295
 801a444:	e78e      	b.n	801a364 <__sflush_r+0x1c>
 801a446:	4407      	add	r7, r0
 801a448:	eba8 0800 	sub.w	r8, r8, r0
 801a44c:	e7e9      	b.n	801a422 <__sflush_r+0xda>
 801a44e:	bf00      	nop
 801a450:	20400001 	.word	0x20400001

0801a454 <_fflush_r>:
 801a454:	b538      	push	{r3, r4, r5, lr}
 801a456:	690b      	ldr	r3, [r1, #16]
 801a458:	4605      	mov	r5, r0
 801a45a:	460c      	mov	r4, r1
 801a45c:	b913      	cbnz	r3, 801a464 <_fflush_r+0x10>
 801a45e:	2500      	movs	r5, #0
 801a460:	4628      	mov	r0, r5
 801a462:	bd38      	pop	{r3, r4, r5, pc}
 801a464:	b118      	cbz	r0, 801a46e <_fflush_r+0x1a>
 801a466:	6983      	ldr	r3, [r0, #24]
 801a468:	b90b      	cbnz	r3, 801a46e <_fflush_r+0x1a>
 801a46a:	f7fe ff35 	bl	80192d8 <__sinit>
 801a46e:	4b14      	ldr	r3, [pc, #80]	; (801a4c0 <_fflush_r+0x6c>)
 801a470:	429c      	cmp	r4, r3
 801a472:	d11b      	bne.n	801a4ac <_fflush_r+0x58>
 801a474:	686c      	ldr	r4, [r5, #4]
 801a476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d0ef      	beq.n	801a45e <_fflush_r+0xa>
 801a47e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a480:	07d0      	lsls	r0, r2, #31
 801a482:	d404      	bmi.n	801a48e <_fflush_r+0x3a>
 801a484:	0599      	lsls	r1, r3, #22
 801a486:	d402      	bmi.n	801a48e <_fflush_r+0x3a>
 801a488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a48a:	f7fe ffc8 	bl	801941e <__retarget_lock_acquire_recursive>
 801a48e:	4628      	mov	r0, r5
 801a490:	4621      	mov	r1, r4
 801a492:	f7ff ff59 	bl	801a348 <__sflush_r>
 801a496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a498:	07da      	lsls	r2, r3, #31
 801a49a:	4605      	mov	r5, r0
 801a49c:	d4e0      	bmi.n	801a460 <_fflush_r+0xc>
 801a49e:	89a3      	ldrh	r3, [r4, #12]
 801a4a0:	059b      	lsls	r3, r3, #22
 801a4a2:	d4dd      	bmi.n	801a460 <_fflush_r+0xc>
 801a4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4a6:	f7fe ffbb 	bl	8019420 <__retarget_lock_release_recursive>
 801a4aa:	e7d9      	b.n	801a460 <_fflush_r+0xc>
 801a4ac:	4b05      	ldr	r3, [pc, #20]	; (801a4c4 <_fflush_r+0x70>)
 801a4ae:	429c      	cmp	r4, r3
 801a4b0:	d101      	bne.n	801a4b6 <_fflush_r+0x62>
 801a4b2:	68ac      	ldr	r4, [r5, #8]
 801a4b4:	e7df      	b.n	801a476 <_fflush_r+0x22>
 801a4b6:	4b04      	ldr	r3, [pc, #16]	; (801a4c8 <_fflush_r+0x74>)
 801a4b8:	429c      	cmp	r4, r3
 801a4ba:	bf08      	it	eq
 801a4bc:	68ec      	ldreq	r4, [r5, #12]
 801a4be:	e7da      	b.n	801a476 <_fflush_r+0x22>
 801a4c0:	0801af74 	.word	0x0801af74
 801a4c4:	0801af94 	.word	0x0801af94
 801a4c8:	0801af54 	.word	0x0801af54

0801a4cc <fiprintf>:
 801a4cc:	b40e      	push	{r1, r2, r3}
 801a4ce:	b503      	push	{r0, r1, lr}
 801a4d0:	4601      	mov	r1, r0
 801a4d2:	ab03      	add	r3, sp, #12
 801a4d4:	4805      	ldr	r0, [pc, #20]	; (801a4ec <fiprintf+0x20>)
 801a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4da:	6800      	ldr	r0, [r0, #0]
 801a4dc:	9301      	str	r3, [sp, #4]
 801a4de:	f7ff fcbf 	bl	8019e60 <_vfiprintf_r>
 801a4e2:	b002      	add	sp, #8
 801a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4e8:	b003      	add	sp, #12
 801a4ea:	4770      	bx	lr
 801a4ec:	200000f0 	.word	0x200000f0

0801a4f0 <_lseek_r>:
 801a4f0:	b538      	push	{r3, r4, r5, lr}
 801a4f2:	4d07      	ldr	r5, [pc, #28]	; (801a510 <_lseek_r+0x20>)
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	4608      	mov	r0, r1
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	602a      	str	r2, [r5, #0]
 801a4fe:	461a      	mov	r2, r3
 801a500:	f7e8 fac4 	bl	8002a8c <_lseek>
 801a504:	1c43      	adds	r3, r0, #1
 801a506:	d102      	bne.n	801a50e <_lseek_r+0x1e>
 801a508:	682b      	ldr	r3, [r5, #0]
 801a50a:	b103      	cbz	r3, 801a50e <_lseek_r+0x1e>
 801a50c:	6023      	str	r3, [r4, #0]
 801a50e:	bd38      	pop	{r3, r4, r5, pc}
 801a510:	20001a04 	.word	0x20001a04

0801a514 <__swhatbuf_r>:
 801a514:	b570      	push	{r4, r5, r6, lr}
 801a516:	460e      	mov	r6, r1
 801a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a51c:	2900      	cmp	r1, #0
 801a51e:	b096      	sub	sp, #88	; 0x58
 801a520:	4614      	mov	r4, r2
 801a522:	461d      	mov	r5, r3
 801a524:	da07      	bge.n	801a536 <__swhatbuf_r+0x22>
 801a526:	2300      	movs	r3, #0
 801a528:	602b      	str	r3, [r5, #0]
 801a52a:	89b3      	ldrh	r3, [r6, #12]
 801a52c:	061a      	lsls	r2, r3, #24
 801a52e:	d410      	bmi.n	801a552 <__swhatbuf_r+0x3e>
 801a530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a534:	e00e      	b.n	801a554 <__swhatbuf_r+0x40>
 801a536:	466a      	mov	r2, sp
 801a538:	f000 f8a8 	bl	801a68c <_fstat_r>
 801a53c:	2800      	cmp	r0, #0
 801a53e:	dbf2      	blt.n	801a526 <__swhatbuf_r+0x12>
 801a540:	9a01      	ldr	r2, [sp, #4]
 801a542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a54a:	425a      	negs	r2, r3
 801a54c:	415a      	adcs	r2, r3
 801a54e:	602a      	str	r2, [r5, #0]
 801a550:	e7ee      	b.n	801a530 <__swhatbuf_r+0x1c>
 801a552:	2340      	movs	r3, #64	; 0x40
 801a554:	2000      	movs	r0, #0
 801a556:	6023      	str	r3, [r4, #0]
 801a558:	b016      	add	sp, #88	; 0x58
 801a55a:	bd70      	pop	{r4, r5, r6, pc}

0801a55c <__smakebuf_r>:
 801a55c:	898b      	ldrh	r3, [r1, #12]
 801a55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a560:	079d      	lsls	r5, r3, #30
 801a562:	4606      	mov	r6, r0
 801a564:	460c      	mov	r4, r1
 801a566:	d507      	bpl.n	801a578 <__smakebuf_r+0x1c>
 801a568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a56c:	6023      	str	r3, [r4, #0]
 801a56e:	6123      	str	r3, [r4, #16]
 801a570:	2301      	movs	r3, #1
 801a572:	6163      	str	r3, [r4, #20]
 801a574:	b002      	add	sp, #8
 801a576:	bd70      	pop	{r4, r5, r6, pc}
 801a578:	ab01      	add	r3, sp, #4
 801a57a:	466a      	mov	r2, sp
 801a57c:	f7ff ffca 	bl	801a514 <__swhatbuf_r>
 801a580:	9900      	ldr	r1, [sp, #0]
 801a582:	4605      	mov	r5, r0
 801a584:	4630      	mov	r0, r6
 801a586:	f7fd fa51 	bl	8017a2c <_malloc_r>
 801a58a:	b948      	cbnz	r0, 801a5a0 <__smakebuf_r+0x44>
 801a58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a590:	059a      	lsls	r2, r3, #22
 801a592:	d4ef      	bmi.n	801a574 <__smakebuf_r+0x18>
 801a594:	f023 0303 	bic.w	r3, r3, #3
 801a598:	f043 0302 	orr.w	r3, r3, #2
 801a59c:	81a3      	strh	r3, [r4, #12]
 801a59e:	e7e3      	b.n	801a568 <__smakebuf_r+0xc>
 801a5a0:	4b0d      	ldr	r3, [pc, #52]	; (801a5d8 <__smakebuf_r+0x7c>)
 801a5a2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a5a4:	89a3      	ldrh	r3, [r4, #12]
 801a5a6:	6020      	str	r0, [r4, #0]
 801a5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a5ac:	81a3      	strh	r3, [r4, #12]
 801a5ae:	9b00      	ldr	r3, [sp, #0]
 801a5b0:	6163      	str	r3, [r4, #20]
 801a5b2:	9b01      	ldr	r3, [sp, #4]
 801a5b4:	6120      	str	r0, [r4, #16]
 801a5b6:	b15b      	cbz	r3, 801a5d0 <__smakebuf_r+0x74>
 801a5b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5bc:	4630      	mov	r0, r6
 801a5be:	f000 f877 	bl	801a6b0 <_isatty_r>
 801a5c2:	b128      	cbz	r0, 801a5d0 <__smakebuf_r+0x74>
 801a5c4:	89a3      	ldrh	r3, [r4, #12]
 801a5c6:	f023 0303 	bic.w	r3, r3, #3
 801a5ca:	f043 0301 	orr.w	r3, r3, #1
 801a5ce:	81a3      	strh	r3, [r4, #12]
 801a5d0:	89a0      	ldrh	r0, [r4, #12]
 801a5d2:	4305      	orrs	r5, r0
 801a5d4:	81a5      	strh	r5, [r4, #12]
 801a5d6:	e7cd      	b.n	801a574 <__smakebuf_r+0x18>
 801a5d8:	08019271 	.word	0x08019271

0801a5dc <__ascii_mbtowc>:
 801a5dc:	b082      	sub	sp, #8
 801a5de:	b901      	cbnz	r1, 801a5e2 <__ascii_mbtowc+0x6>
 801a5e0:	a901      	add	r1, sp, #4
 801a5e2:	b142      	cbz	r2, 801a5f6 <__ascii_mbtowc+0x1a>
 801a5e4:	b14b      	cbz	r3, 801a5fa <__ascii_mbtowc+0x1e>
 801a5e6:	7813      	ldrb	r3, [r2, #0]
 801a5e8:	600b      	str	r3, [r1, #0]
 801a5ea:	7812      	ldrb	r2, [r2, #0]
 801a5ec:	1e10      	subs	r0, r2, #0
 801a5ee:	bf18      	it	ne
 801a5f0:	2001      	movne	r0, #1
 801a5f2:	b002      	add	sp, #8
 801a5f4:	4770      	bx	lr
 801a5f6:	4610      	mov	r0, r2
 801a5f8:	e7fb      	b.n	801a5f2 <__ascii_mbtowc+0x16>
 801a5fa:	f06f 0001 	mvn.w	r0, #1
 801a5fe:	e7f8      	b.n	801a5f2 <__ascii_mbtowc+0x16>

0801a600 <_realloc_r>:
 801a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a602:	4607      	mov	r7, r0
 801a604:	4614      	mov	r4, r2
 801a606:	460e      	mov	r6, r1
 801a608:	b921      	cbnz	r1, 801a614 <_realloc_r+0x14>
 801a60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a60e:	4611      	mov	r1, r2
 801a610:	f7fd ba0c 	b.w	8017a2c <_malloc_r>
 801a614:	b922      	cbnz	r2, 801a620 <_realloc_r+0x20>
 801a616:	f7fd f9b9 	bl	801798c <_free_r>
 801a61a:	4625      	mov	r5, r4
 801a61c:	4628      	mov	r0, r5
 801a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a620:	f000 f856 	bl	801a6d0 <_malloc_usable_size_r>
 801a624:	42a0      	cmp	r0, r4
 801a626:	d20f      	bcs.n	801a648 <_realloc_r+0x48>
 801a628:	4621      	mov	r1, r4
 801a62a:	4638      	mov	r0, r7
 801a62c:	f7fd f9fe 	bl	8017a2c <_malloc_r>
 801a630:	4605      	mov	r5, r0
 801a632:	2800      	cmp	r0, #0
 801a634:	d0f2      	beq.n	801a61c <_realloc_r+0x1c>
 801a636:	4631      	mov	r1, r6
 801a638:	4622      	mov	r2, r4
 801a63a:	f7fd f977 	bl	801792c <memcpy>
 801a63e:	4631      	mov	r1, r6
 801a640:	4638      	mov	r0, r7
 801a642:	f7fd f9a3 	bl	801798c <_free_r>
 801a646:	e7e9      	b.n	801a61c <_realloc_r+0x1c>
 801a648:	4635      	mov	r5, r6
 801a64a:	e7e7      	b.n	801a61c <_realloc_r+0x1c>

0801a64c <_read_r>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	4d07      	ldr	r5, [pc, #28]	; (801a66c <_read_r+0x20>)
 801a650:	4604      	mov	r4, r0
 801a652:	4608      	mov	r0, r1
 801a654:	4611      	mov	r1, r2
 801a656:	2200      	movs	r2, #0
 801a658:	602a      	str	r2, [r5, #0]
 801a65a:	461a      	mov	r2, r3
 801a65c:	f7e8 f9b6 	bl	80029cc <_read>
 801a660:	1c43      	adds	r3, r0, #1
 801a662:	d102      	bne.n	801a66a <_read_r+0x1e>
 801a664:	682b      	ldr	r3, [r5, #0]
 801a666:	b103      	cbz	r3, 801a66a <_read_r+0x1e>
 801a668:	6023      	str	r3, [r4, #0]
 801a66a:	bd38      	pop	{r3, r4, r5, pc}
 801a66c:	20001a04 	.word	0x20001a04

0801a670 <__ascii_wctomb>:
 801a670:	b149      	cbz	r1, 801a686 <__ascii_wctomb+0x16>
 801a672:	2aff      	cmp	r2, #255	; 0xff
 801a674:	bf85      	ittet	hi
 801a676:	238a      	movhi	r3, #138	; 0x8a
 801a678:	6003      	strhi	r3, [r0, #0]
 801a67a:	700a      	strbls	r2, [r1, #0]
 801a67c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a680:	bf98      	it	ls
 801a682:	2001      	movls	r0, #1
 801a684:	4770      	bx	lr
 801a686:	4608      	mov	r0, r1
 801a688:	4770      	bx	lr
	...

0801a68c <_fstat_r>:
 801a68c:	b538      	push	{r3, r4, r5, lr}
 801a68e:	4d07      	ldr	r5, [pc, #28]	; (801a6ac <_fstat_r+0x20>)
 801a690:	2300      	movs	r3, #0
 801a692:	4604      	mov	r4, r0
 801a694:	4608      	mov	r0, r1
 801a696:	4611      	mov	r1, r2
 801a698:	602b      	str	r3, [r5, #0]
 801a69a:	f7e8 f9dc 	bl	8002a56 <_fstat>
 801a69e:	1c43      	adds	r3, r0, #1
 801a6a0:	d102      	bne.n	801a6a8 <_fstat_r+0x1c>
 801a6a2:	682b      	ldr	r3, [r5, #0]
 801a6a4:	b103      	cbz	r3, 801a6a8 <_fstat_r+0x1c>
 801a6a6:	6023      	str	r3, [r4, #0]
 801a6a8:	bd38      	pop	{r3, r4, r5, pc}
 801a6aa:	bf00      	nop
 801a6ac:	20001a04 	.word	0x20001a04

0801a6b0 <_isatty_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d06      	ldr	r5, [pc, #24]	; (801a6cc <_isatty_r+0x1c>)
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	4608      	mov	r0, r1
 801a6ba:	602b      	str	r3, [r5, #0]
 801a6bc:	f7e8 f9db 	bl	8002a76 <_isatty>
 801a6c0:	1c43      	adds	r3, r0, #1
 801a6c2:	d102      	bne.n	801a6ca <_isatty_r+0x1a>
 801a6c4:	682b      	ldr	r3, [r5, #0]
 801a6c6:	b103      	cbz	r3, 801a6ca <_isatty_r+0x1a>
 801a6c8:	6023      	str	r3, [r4, #0]
 801a6ca:	bd38      	pop	{r3, r4, r5, pc}
 801a6cc:	20001a04 	.word	0x20001a04

0801a6d0 <_malloc_usable_size_r>:
 801a6d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6d4:	1f18      	subs	r0, r3, #4
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	bfbc      	itt	lt
 801a6da:	580b      	ldrlt	r3, [r1, r0]
 801a6dc:	18c0      	addlt	r0, r0, r3
 801a6de:	4770      	bx	lr

0801a6e0 <_init>:
 801a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6e2:	bf00      	nop
 801a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6e6:	bc08      	pop	{r3}
 801a6e8:	469e      	mov	lr, r3
 801a6ea:	4770      	bx	lr

0801a6ec <_fini>:
 801a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ee:	bf00      	nop
 801a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6f2:	bc08      	pop	{r3}
 801a6f4:	469e      	mov	lr, r3
 801a6f6:	4770      	bx	lr
