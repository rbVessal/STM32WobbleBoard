
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0801ae28  0801ae28  0002ae28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3ec  0801b3ec  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3ec  0801b3ec  0002b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3f4  0801b3f4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3f4  0801b3f4  0002b3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3f8  0801b3f8  0002b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801b3fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  200001f0  0801b5ec  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002028  0801b5ec  00032028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000529c7  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c4e  00000000  00000000  00082be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003288  00000000  00000000  00089838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fc0  00000000  00000000  0008cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e72f  00000000  00000000  0008fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003026a  00000000  00000000  000be1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d2ed  00000000  00000000  000ee419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fb706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e0d8  00000000  00000000  001fb75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ae10 	.word	0x0801ae10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0801ae10 	.word	0x0801ae10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8000ef4:	f000 f820 	bl	8000f38 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 8000f00:	f000 f89c 	bl	800103c <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d102      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20001ac0 	.word	0x20001ac0
 8000f34:	20000660 	.word	0x20000660

08000f38 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2000      	movs	r0, #0
 8000f42:	f007 ff5d 	bl	8008e00 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000f46:	2000      	movs	r0, #0
 8000f48:	f007 ffae 	bl	8008ea8 <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <MX_DataLogFusion_Init+0xec>)
 8000f5c:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f007 fed2 	bl	8008d08 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f007 fffd 	bl	8008f64 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8000f6a:	f002 fb5d 	bl	8003628 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fcae 	bl	80018d0 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8000f74:	f000 f8fa 	bl	800116c <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 8000f78:	f001 fee0 	bl	8002d3c <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8000f7c:	492a      	ldr	r1, [pc, #168]	; (8001028 <MX_DataLogFusion_Init+0xf0>)
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <MX_DataLogFusion_Init+0xf4>)
 8000f80:	f001 ff88 	bl	8002e94 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f001 ffa4 	bl	8002ed2 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f017 fb65 	bl	801865c <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000f92:	7c3b      	ldrb	r3, [r7, #16]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d132      	bne.n	8000ffe <MX_DataLogFusion_Init+0xc6>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001030 <MX_DataLogFusion_Init+0xf8>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 8000fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 2a90 	vmov	r2, s15
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_DataLogFusion_Init+0xfc>)
 8000fb6:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001030 <MX_DataLogFusion_Init+0xf8>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 8000fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_DataLogFusion_Init+0xfc>)
 8000fd6:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fdc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001030 <MX_DataLogFusion_Init+0xf8>
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 8000fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff0:	ee17 2a90 	vmov	r2, s15
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_DataLogFusion_Init+0xfc>)
 8000ff6:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_DataLogFusion_Init+0x100>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 8000ffe:	f000 fc9b 	bl	8001938 <DWT_Init>

  BSP_LED_On(LED2);
 8001002:	2000      	movs	r0, #0
 8001004:	f007 fe92 	bl	8008d2c <BSP_LED_On>
  HAL_Delay(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100c:	f008 f8d0 	bl	80091b0 <HAL_Delay>
  BSP_LED_Off(LED2);
 8001010:	2000      	movs	r0, #0
 8001012:	f007 fea1 	bl	8008d58 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8001016:	f000 fdb3 	bl	8001b80 <UART_StartReceiveMsg>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000674 	.word	0x20000674
 8001028:	2000179c 	.word	0x2000179c
 800102c:	20001778 	.word	0x20001778
 8001030:	43fa0000 	.word	0x43fa0000
 8001034:	200006b0 	.word	0x200006b0
 8001038:	200006bc 	.word	0x200006bc

0800103c <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001040:	4840      	ldr	r0, [pc, #256]	; (8001144 <MX_DataLogFusion_Process+0x108>)
 8001042:	f000 fccb 	bl	80019dc <UART_ReceivedMSG>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d106      	bne.n	800105a <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <MX_DataLogFusion_Process+0x108>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	2b32      	cmp	r3, #50	; 0x32
 8001052:	d102      	bne.n	800105a <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8001054:	483b      	ldr	r0, [pc, #236]	; (8001144 <MX_DataLogFusion_Process+0x108>)
 8001056:	f000 ff21 	bl	8001e9c <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_DataLogFusion_Process+0x10c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d120      	bne.n	80010a6 <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f008 f8a3 	bl	80091b0 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800106a:	bf00      	nop
 800106c:	2000      	movs	r0, #0
 800106e:	f007 ff1b 	bl	8008ea8 <BSP_PB_GetState>
 8001072:	4602      	mov	r2, r0
 8001074:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_DataLogFusion_Process+0x110>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d0f7      	beq.n	800106c <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	; 0x32
 800107e:	f008 f897 	bl	80091b0 <HAL_Delay>

    MagCalRequest = 0;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MX_DataLogFusion_Process+0x10c>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 8001088:	4b31      	ldr	r3, [pc, #196]	; (8001150 <MX_DataLogFusion_Process+0x114>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_DataLogFusion_Process+0x118>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_DataLogFusion_Process+0x118>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_DataLogFusion_Process+0x118>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 ff16 	bl	8002ed2 <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_DataLogFusion_Process+0x11c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d146      	bne.n	800113e <MX_DataLogFusion_Process+0x102>
  {
    SensorReadRequest = 0;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_DataLogFusion_Process+0x11c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 80010b6:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010b8:	f000 f872 	bl	80011a0 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010be:	f000 f9d9 	bl	8001474 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010c4:	f000 fa30 	bl	8001528 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 80010c8:	4824      	ldr	r0, [pc, #144]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010ca:	f000 fa87 	bl	80015dc <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 80010ce:	4823      	ldr	r0, [pc, #140]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010d0:	f000 fbce 	bl	8001870 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 80010d4:	4821      	ldr	r0, [pc, #132]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010d6:	f000 fb9b 	bl	8001810 <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 80010da:	4820      	ldr	r0, [pc, #128]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010dc:	f000 fb68 	bl	80017b0 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010e2:	f000 f8d1 	bl	8001288 <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 80010e6:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010e8:	f000 febe 	bl	8001e68 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_DataLogFusion_Process+0x120>)
 80010ee:	2277      	movs	r2, #119	; 0x77
 80010f0:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_DataLogFusion_Process+0x124>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11e      	bne.n	8001138 <MX_DataLogFusion_Process+0xfc>
    {
      OfflineDataCount--;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_DataLogFusion_Process+0x128>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_DataLogFusion_Process+0x128>)
 8001102:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_DataLogFusion_Process+0x128>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da02      	bge.n	8001112 <MX_DataLogFusion_Process+0xd6>
      {
        OfflineDataCount = 0;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_DataLogFusion_Process+0x128>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_DataLogFusion_Process+0x12c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <MX_DataLogFusion_Process+0x12c>)
 800111a:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_DataLogFusion_Process+0x12c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b07      	cmp	r3, #7
 8001122:	dd02      	ble.n	800112a <MX_DataLogFusion_Process+0xee>
      {
        OfflineDataReadIndex = 0;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_DataLogFusion_Process+0x12c>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_DataLogFusion_Process+0x128>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dd02      	ble.n	8001138 <MX_DataLogFusion_Process+0xfc>
      {
        SensorReadRequest = 1;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_DataLogFusion_Process+0x11c>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_DataLogFusion_Process+0x120>)
 800113a:	f000 fd05 	bl	8001b48 <UART_SendMsg>
  }
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200006c0 	.word	0x200006c0
 8001148:	200006ac 	.word	0x200006ac
 800114c:	20000674 	.word	0x20000674
 8001150:	200006bc 	.word	0x200006bc
 8001154:	200006b0 	.word	0x200006b0
 8001158:	20000660 	.word	0x20000660
 800115c:	200007c4 	.word	0x200007c4
 8001160:	20000661 	.word	0x20000661
 8001164:	2000066c 	.word	0x2000066c
 8001168:	20000664 	.word	0x20000664

0800116c <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8001170:	f001 fbf8 	bl	8002964 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8001174:	f001 fbfe 	bl	8002974 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8001178:	f001 fc04 	bl	8002984 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800117c:	f001 fc0a 	bl	8002994 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8001180:	f001 fc10 	bl	80029a4 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8001184:	f001 fc16 	bl	80029b4 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001188:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800119c <Init_Sensors+0x30>
 800118c:	f001 fcc8 	bl	8002b20 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001190:	2004      	movs	r0, #4
 8001192:	f001 fcd4 	bl	8002b3e <BSP_SENSOR_ACC_SetFullScale>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	42c80000 	.word	0x42c80000

080011a0 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <RTC_Handler+0xd8>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <RTC_Handler+0xdc>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d12b      	bne.n	8001214 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <RTC_Handler+0xe0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a30      	ldr	r2, [pc, #192]	; (8001284 <RTC_Handler+0xe4>)
 80011c2:	2134      	movs	r1, #52	; 0x34
 80011c4:	fb01 f303 	mul.w	r3, r1, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <RTC_Handler+0xe0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a2b      	ldr	r2, [pc, #172]	; (8001284 <RTC_Handler+0xe4>)
 80011d6:	2134      	movs	r1, #52	; 0x34
 80011d8:	fb01 f303 	mul.w	r3, r1, r3
 80011dc:	4413      	add	r3, r2
 80011de:	3301      	adds	r3, #1
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <RTC_Handler+0xe0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a26      	ldr	r2, [pc, #152]	; (8001284 <RTC_Handler+0xe4>)
 80011ec:	2134      	movs	r1, #52	; 0x34
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	3302      	adds	r3, #2
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <RTC_Handler+0xe0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <RTC_Handler+0xe4>)
 8001202:	2134      	movs	r1, #52	; 0x34
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3303      	adds	r3, #3
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 8001212:	e02d      	b.n	8001270 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <RTC_Handler+0xd8>)
 800121e:	f00b f95b 	bl	800c4d8 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <RTC_Handler+0xd8>)
 800122c:	f00b fa37 	bl	800c69e <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800123e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	3301      	adds	r3, #1
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	b2db      	uxtb	r3, r3
 800124e:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 8001256:	7a3a      	ldrb	r2, [r7, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800125c:	7a7a      	ldrb	r2, [r7, #9]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 8001262:	7aba      	ldrb	r2, [r7, #10]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800126e:	729a      	strb	r2, [r3, #10]
}
 8001270:	bf00      	nop
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20001a9c 	.word	0x20001a9c
 800127c:	20000661 	.word	0x20000661
 8001280:	20000664 	.word	0x20000664
 8001284:	200015d8 	.word	0x200015d8

08001288 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09e      	sub	sp, #120	; 0x78
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 8001294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001298:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 80012a0:	4b65      	ldr	r3, [pc, #404]	; (8001438 <FX_Data_Handler+0x1b0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	f040 80c0 	bne.w	800142e <FX_Data_Handler+0x1a6>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <FX_Data_Handler+0x1b0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	f040 80b9 	bne.w	800142e <FX_Data_Handler+0x1a6>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <FX_Data_Handler+0x1b0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c4:	2b40      	cmp	r3, #64	; 0x40
 80012c6:	f040 80b2 	bne.w	800142e <FX_Data_Handler+0x1a6>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <FX_Data_Handler+0x1b4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001440 <FX_Data_Handler+0x1b8>
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012e2:	4b56      	ldr	r3, [pc, #344]	; (800143c <FX_Data_Handler+0x1b4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001440 <FX_Data_Handler+0x1b8>
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <FX_Data_Handler+0x1b4>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001440 <FX_Data_Handler+0x1b8>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <FX_Data_Handler+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001440 <FX_Data_Handler+0x1b8>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <FX_Data_Handler+0x1bc>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001440 <FX_Data_Handler+0x1b8>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <FX_Data_Handler+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001440 <FX_Data_Handler+0x1b8>
 8001352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001356:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <FX_Data_Handler+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800144c <FX_Data_Handler+0x1c4>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <FX_Data_Handler+0x1c0>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800144c <FX_Data_Handler+0x1c4>
 8001382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001386:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <FX_Data_Handler+0x1c0>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800144c <FX_Data_Handler+0x1c4>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f007 fcc2 	bl	8008d2c <BSP_LED_On>
        DWT_Start();
 80013a8:	f000 fade 	bl	8001968 <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 80013ac:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001450 <FX_Data_Handler+0x1c8>
 80013b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013b4:	f001 fd1a 	bl	8002dec <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 80013b8:	f000 fae8 	bl	800198c <DWT_Stop>
 80013bc:	6778      	str	r0, [r7, #116]	; 0x74
        BSP_LED_Off(LED2);
 80013be:	2000      	movs	r0, #0
 80013c0:	f007 fcca 	bl	8008d58 <BSP_LED_Off>

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 80013ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013cc:	330c      	adds	r3, #12
 80013ce:	2210      	movs	r2, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	f019 f8d3 	bl	801a57c <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	334b      	adds	r3, #75	; 0x4b
 80013da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013dc:	220c      	movs	r2, #12
 80013de:	4618      	mov	r0, r3
 80013e0:	f019 f8cc 	bl	801a57c <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ec:	331c      	adds	r3, #28
 80013ee:	220c      	movs	r2, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	f019 f8c3 	bl	801a57c <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f103 0063 	add.w	r0, r3, #99	; 0x63
 80013fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fe:	3328      	adds	r3, #40	; 0x28
 8001400:	220c      	movs	r2, #12
 8001402:	4619      	mov	r1, r3
 8001404:	f019 f8ba 	bl	801a57c <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	336f      	adds	r3, #111	; 0x6f
 800140c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800140e:	3234      	adds	r2, #52	; 0x34
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3373      	adds	r3, #115	; 0x73
 8001418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800141a:	3238      	adds	r2, #56	; 0x38
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3377      	adds	r3, #119	; 0x77
 8001424:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001426:	2204      	movs	r2, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fef3 	bl	8003214 <Serialize_s32>
      }
    }
  }
}
 800142e:	bf00      	nop
 8001430:	3778      	adds	r7, #120	; 0x78
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000065c 	.word	0x2000065c
 800143c:	20000684 	.word	0x20000684
 8001440:	3a83126f 	.word	0x3a83126f
 8001444:	20000678 	.word	0x20000678
 8001448:	20000690 	.word	0x20000690
 800144c:	3b03126f 	.word	0x3b03126f
 8001450:	3c23d70a 	.word	0x3c23d70a

08001454 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  MagCalRequest = 1U;
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <BSP_PB_Callback+0x1c>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	200006ac 	.word	0x200006ac

08001474 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <Accelero_Sensor_Handler+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b10      	cmp	r3, #16
 8001486:	d140      	bne.n	800150a <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <Accelero_Sensor_Handler+0xa4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d121      	bne.n	80014d4 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <Accelero_Sensor_Handler+0xa8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <Accelero_Sensor_Handler+0xac>)
 8001496:	2134      	movs	r1, #52	; 0x34
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3310      	adds	r3, #16
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a20      	ldr	r2, [pc, #128]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014a4:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <Accelero_Sensor_Handler+0xa8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <Accelero_Sensor_Handler+0xac>)
 80014ac:	2134      	movs	r1, #52	; 0x34
 80014ae:	fb01 f303 	mul.w	r3, r1, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	3314      	adds	r3, #20
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014ba:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <Accelero_Sensor_Handler+0xa8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <Accelero_Sensor_Handler+0xac>)
 80014c2:	2134      	movs	r1, #52	; 0x34
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3318      	adds	r3, #24
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014d0:	6093      	str	r3, [r2, #8]
 80014d2:	e002      	b.n	80014da <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014d6:	f001 fad5 	bl	8002a84 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3317      	adds	r3, #23
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014e0:	6811      	ldr	r1, [r2, #0]
 80014e2:	2204      	movs	r2, #4
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fe95 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	331b      	adds	r3, #27
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 80014f0:	6851      	ldr	r1, [r2, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fe8d 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	331f      	adds	r3, #31
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <Accelero_Sensor_Handler+0xb0>)
 8001500:	6891      	ldr	r1, [r2, #8]
 8001502:	2204      	movs	r2, #4
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fe85 	bl	8003214 <Serialize_s32>
  }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000065c 	.word	0x2000065c
 8001518:	20000661 	.word	0x20000661
 800151c:	20000664 	.word	0x20000664
 8001520:	200015d8 	.word	0x200015d8
 8001524:	20000678 	.word	0x20000678

08001528 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <Gyro_Sensor_Handler+0xa0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b20      	cmp	r3, #32
 800153a:	d140      	bne.n	80015be <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <Gyro_Sensor_Handler+0xa4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d121      	bne.n	8001588 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <Gyro_Sensor_Handler+0xa8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <Gyro_Sensor_Handler+0xac>)
 800154a:	2134      	movs	r1, #52	; 0x34
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	331c      	adds	r3, #28
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 8001558:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <Gyro_Sensor_Handler+0xa8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <Gyro_Sensor_Handler+0xac>)
 8001560:	2134      	movs	r1, #52	; 0x34
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	3320      	adds	r3, #32
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 800156e:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <Gyro_Sensor_Handler+0xa8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <Gyro_Sensor_Handler+0xac>)
 8001576:	2134      	movs	r1, #52	; 0x34
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	3324      	adds	r3, #36	; 0x24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 8001584:	6093      	str	r3, [r2, #8]
 8001586:	e002      	b.n	800158e <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 800158a:	f001 fa88 	bl	8002a9e <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3323      	adds	r3, #35	; 0x23
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	2204      	movs	r2, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fe3b 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3327      	adds	r3, #39	; 0x27
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 80015a4:	6851      	ldr	r1, [r2, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fe33 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	332b      	adds	r3, #43	; 0x2b
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <Gyro_Sensor_Handler+0xb0>)
 80015b4:	6891      	ldr	r1, [r2, #8]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fe2b 	bl	8003214 <Serialize_s32>
  }
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000065c 	.word	0x2000065c
 80015cc:	20000661 	.word	0x20000661
 80015d0:	20000664 	.word	0x20000664
 80015d4:	200015d8 	.word	0x200015d8
 80015d8:	20000684 	.word	0x20000684

080015dc <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <Magneto_Sensor_Handler+0x1ac>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b40      	cmp	r3, #64	; 0x40
 80015ee:	f040 80c7 	bne.w	8001780 <Magneto_Sensor_Handler+0x1a4>
  {
    if (UseOfflineData == 1)
 80015f2:	4b66      	ldr	r3, [pc, #408]	; (800178c <Magneto_Sensor_Handler+0x1b0>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d121      	bne.n	800163e <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <Magneto_Sensor_Handler+0x1b4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a65      	ldr	r2, [pc, #404]	; (8001794 <Magneto_Sensor_Handler+0x1b8>)
 8001600:	2134      	movs	r1, #52	; 0x34
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	3328      	adds	r3, #40	; 0x28
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a62      	ldr	r2, [pc, #392]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 800160e:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 8001610:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <Magneto_Sensor_Handler+0x1b4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <Magneto_Sensor_Handler+0x1b8>)
 8001616:	2134      	movs	r1, #52	; 0x34
 8001618:	fb01 f303 	mul.w	r3, r1, r3
 800161c:	4413      	add	r3, r2
 800161e:	332c      	adds	r3, #44	; 0x2c
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001624:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 8001626:	4b5a      	ldr	r3, [pc, #360]	; (8001790 <Magneto_Sensor_Handler+0x1b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <Magneto_Sensor_Handler+0x1b8>)
 800162c:	2134      	movs	r1, #52	; 0x34
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3330      	adds	r3, #48	; 0x30
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a57      	ldr	r2, [pc, #348]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 800163a:	6093      	str	r3, [r2, #8]
 800163c:	e088      	b.n	8001750 <Magneto_Sensor_Handler+0x174>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800163e:	4856      	ldr	r0, [pc, #344]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001640:	f001 fa3a 	bl	8002ab8 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <Magneto_Sensor_Handler+0x1c0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d16c      	bne.n	8001726 <Magneto_Sensor_Handler+0x14a>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001658:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80017a0 <Magneto_Sensor_Handler+0x1c4>
 800165c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001660:	edc7 7a07 	vstr	s15, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80017a0 <Magneto_Sensor_Handler+0x1c4>
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	edc7 7a08 	vstr	s15, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80017a0 <Magneto_Sensor_Handler+0x1c4>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <Magneto_Sensor_Handler+0x1c8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <Magneto_Sensor_Handler+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	330a      	adds	r3, #10
 80016a0:	4a40      	ldr	r2, [pc, #256]	; (80017a4 <Magneto_Sensor_Handler+0x1c8>)
 80016a2:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80016a4:	f107 020c 	add.w	r2, r7, #12
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fc00 	bl	8002eb4 <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80016b4:	7e3b      	ldrb	r3, [r7, #24]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d135      	bne.n	8001726 <Magneto_Sensor_Handler+0x14a>
        {
          MagCalStatus = 1;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <Magneto_Sensor_Handler+0x1c0>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80016c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80017a8 <Magneto_Sensor_Handler+0x1cc>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 80016d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d8:	ee17 2a90 	vmov	r2, s15
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 80016de:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80016e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017a8 <Magneto_Sensor_Handler+0x1cc>
 80016e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 80016f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f8:	ee17 2a90 	vmov	r2, s15
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 80016fe:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001700:	edd7 7a05 	vldr	s15, [r7, #20]
 8001704:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017a8 <Magneto_Sensor_Handler+0x1cc>
 8001708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001718:	ee17 2a90 	vmov	r2, s15
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 800171e:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001720:	200a      	movs	r0, #10
 8001722:	f001 fbe2 	bl	8002eea <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001732:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a16      	ldr	r2, [pc, #88]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001740:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Magneto_Sensor_Handler+0x1d0>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 800174e:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	332f      	adds	r3, #47	; 0x2f
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001756:	6811      	ldr	r1, [r2, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fd5a 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3333      	adds	r3, #51	; 0x33
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001766:	6851      	ldr	r1, [r2, #4]
 8001768:	2204      	movs	r2, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fd52 	bl	8003214 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3337      	adds	r3, #55	; 0x37
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <Magneto_Sensor_Handler+0x1bc>)
 8001776:	6891      	ldr	r1, [r2, #8]
 8001778:	2204      	movs	r2, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fd4a 	bl	8003214 <Serialize_s32>
  }
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000065c 	.word	0x2000065c
 800178c:	20000661 	.word	0x20000661
 8001790:	20000664 	.word	0x20000664
 8001794:	200015d8 	.word	0x200015d8
 8001798:	20000690 	.word	0x20000690
 800179c:	200006bc 	.word	0x200006bc
 80017a0:	3b03126f 	.word	0x3b03126f
 80017a4:	200006a8 	.word	0x200006a8
 80017a8:	43fa0000 	.word	0x43fa0000
 80017ac:	200006b0 	.word	0x200006b0

080017b0 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <Pressure_Sensor_Handler+0x4c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d117      	bne.n	80017f4 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <Pressure_Sensor_Handler+0x50>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10b      	bne.n	80017e4 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <Pressure_Sensor_Handler+0x54>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <Pressure_Sensor_Handler+0x58>)
 80017d2:	2134      	movs	r1, #52	; 0x34
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	3304      	adds	r3, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <Pressure_Sensor_Handler+0x5c>)
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e002      	b.n	80017ea <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <Pressure_Sensor_Handler+0x5c>)
 80017e6:	f001 f974 	bl	8002ad2 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	330b      	adds	r3, #11
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <Pressure_Sensor_Handler+0x5c>)
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	601a      	str	r2, [r3, #0]
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000065c 	.word	0x2000065c
 8001800:	20000661 	.word	0x20000661
 8001804:	20000664 	.word	0x20000664
 8001808:	200015d8 	.word	0x200015d8
 800180c:	2000069c 	.word	0x2000069c

08001810 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <Temperature_Sensor_Handler+0x4c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b02      	cmp	r3, #2
 8001822:	d117      	bne.n	8001854 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <Temperature_Sensor_Handler+0x50>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d10b      	bne.n	8001844 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <Temperature_Sensor_Handler+0x54>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <Temperature_Sensor_Handler+0x58>)
 8001832:	2134      	movs	r1, #52	; 0x34
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	330c      	adds	r3, #12
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <Temperature_Sensor_Handler+0x5c>)
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e002      	b.n	800184a <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <Temperature_Sensor_Handler+0x5c>)
 8001846:	f001 f951 	bl	8002aec <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	330f      	adds	r3, #15
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <Temperature_Sensor_Handler+0x5c>)
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	601a      	str	r2, [r3, #0]
  }
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000065c 	.word	0x2000065c
 8001860:	20000661 	.word	0x20000661
 8001864:	20000664 	.word	0x20000664
 8001868:	200015d8 	.word	0x200015d8
 800186c:	200006a0 	.word	0x200006a0

08001870 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <Humidity_Sensor_Handler+0x4c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b04      	cmp	r3, #4
 8001882:	d117      	bne.n	80018b4 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <Humidity_Sensor_Handler+0x50>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10b      	bne.n	80018a4 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <Humidity_Sensor_Handler+0x54>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <Humidity_Sensor_Handler+0x58>)
 8001892:	2134      	movs	r1, #52	; 0x34
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3308      	adds	r3, #8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <Humidity_Sensor_Handler+0x5c>)
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e002      	b.n	80018aa <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <Humidity_Sensor_Handler+0x5c>)
 80018a6:	f001 f92e 	bl	8002b06 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3313      	adds	r3, #19
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <Humidity_Sensor_Handler+0x5c>)
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000065c 	.word	0x2000065c
 80018c0:	20000661 	.word	0x20000661
 80018c4:	20000664 	.word	0x20000664
 80018c8:	200015d8 	.word	0x200015d8
 80018cc:	200006a4 	.word	0x200006a4

080018d0 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 80018d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <TIM_Config+0x60>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <TIM_Config+0x64>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <TIM_Config+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <TIM_Config+0x64>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <TIM_Config+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <TIM_Config+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <TIM_Config+0x64>)
 8001918:	f00a ffe0 	bl	800c8dc <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <TIM_Config+0x56>
  {
    Error_Handler();
 8001922:	f001 fa05 	bl	8002d30 <Error_Handler>
  }
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000014 	.word	0x20000014
 8001934:	20001ac0 	.word	0x20001ac0

08001938 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <DWT_Init+0x28>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <DWT_Init+0x28>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <DWT_Init+0x2c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <DWT_Init+0x2c>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000edf0 	.word	0xe000edf0
 8001964:	e0001000 	.word	0xe0001000

08001968 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <DWT_Start+0x20>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <DWT_Start+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <DWT_Start+0x20>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e0001000 	.word	0xe0001000

0800198c <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <DWT_Stop+0x44>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <DWT_Stop+0x44>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <DWT_Stop+0x44>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <DWT_Stop+0x48>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <DWT_Stop+0x4c>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e0001000 	.word	0xe0001000
 80019d4:	20000014 	.word	0x20000014
 80019d8:	431bde83 	.word	0x431bde83

080019dc <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 80019e8:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <UART_ReceivedMSG+0x160>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f8e1 	bl	8001bb4 <Get_DMA_Flag_Status>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 809c 	bne.w	8001b32 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <UART_ReceivedMSG+0x160>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f9ca 	bl	8001d98 <Get_DMA_Counter>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001a0c:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	8bba      	ldrh	r2, [r7, #28]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d305      	bcc.n	8001a24 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001a18:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	8bba      	ldrh	r2, [r7, #28]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	843b      	strh	r3, [r7, #32]
 8001a22:	e007      	b.n	8001a34 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	8bba      	ldrh	r2, [r7, #28]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a32:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a36:	889b      	ldrh	r3, [r3, #4]
 8001a38:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a3e:	e06d      	b.n	8001b1c <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8001a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a42:	4a40      	ldr	r2, [pc, #256]	; (8001b44 <UART_ReceivedMSG+0x168>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	76fb      	strb	r3, [r7, #27]
      j++;
 8001a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 8001a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a54:	d301      	bcc.n	8001a5a <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 8001a5a:	7efb      	ldrb	r3, [r7, #27]
 8001a5c:	2bf0      	cmp	r3, #240	; 0xf0
 8001a5e:	d15a      	bne.n	8001b16 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 8001a60:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a62:	889b      	ldrh	r3, [r3, #4]
 8001a64:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 8001a66:	2300      	movs	r3, #0
 8001a68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a6a:	e03a      	b.n	8001ae2 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8001a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a76:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 8001a78:	8bfb      	ldrh	r3, [r7, #30]
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	d904      	bls.n	8001a88 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 8001a7e:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a82:	8093      	strh	r3, [r2, #4]
            return 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e055      	b.n	8001b34 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8001a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a8a:	4a2e      	ldr	r2, [pc, #184]	; (8001b44 <UART_ReceivedMSG+0x168>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8001a90:	8b3b      	ldrh	r3, [r7, #24]
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <UART_ReceivedMSG+0x168>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8001a98:	8bfb      	ldrh	r3, [r7, #30]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8001aa2:	7db9      	ldrb	r1, [r7, #22]
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fb12 	bl	80030d2 <ReverseByteStuffCopyByte2>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d104      	bne.n	8001ac2 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001aba:	8b3b      	ldrh	r3, [r7, #24]
 8001abc:	8093      	strh	r3, [r2, #4]
            return 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e038      	b.n	8001b34 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 8001ad2:	8bfb      	ldrh	r3, [r7, #30]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ade:	4413      	add	r3, r2
 8001ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ae2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3c0      	bcc.n	8001a6c <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001aea:	8bfa      	ldrh	r2, [r7, #30]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8001af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001af2:	3301      	adds	r3, #1
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afa:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b00:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f001 fb36 	bl	8003174 <CHK_CheckAndRemove>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <UART_ReceivedMSG+0x136>
        {
          return 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e010      	b.n	8001b34 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e00e      	b.n	8001b34 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b18:	3301      	adds	r3, #1
 8001b1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b1e:	8c3b      	ldrh	r3, [r7, #32]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d38d      	bcc.n	8001a40 <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8001b24:	8c3b      	ldrh	r3, [r7, #32]
 8001b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b2a:	d902      	bls.n	8001b32 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <UART_ReceivedMSG+0x164>)
 8001b2e:	8bbb      	ldrh	r3, [r7, #28]
 8001b30:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20001b68 	.word	0x20001b68
 8001b40:	200019a0 	.word	0x200019a0
 8001b44:	200017a0 	.word	0x200017a0

08001b48 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f001 fae5 	bl	8003120 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4807      	ldr	r0, [pc, #28]	; (8001b78 <UART_SendMsg+0x30>)
 8001b5a:	f001 fa8c 	bl	8003076 <ByteStuffCopy>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 8001b62:	89fa      	ldrh	r2, [r7, #14]
 8001b64:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <UART_SendMsg+0x30>)
 8001b6a:	4804      	ldr	r0, [pc, #16]	; (8001b7c <UART_SendMsg+0x34>)
 8001b6c:	f00b fbe6 	bl	800d33c <HAL_UART_Transmit>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200008c8 	.word	0x200008c8
 8001b7c:	20001b68 	.word	0x20001b68

08001b80 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <UART_StartReceiveMsg+0x2c>)
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <UART_StartReceiveMsg+0x30>)
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <UART_StartReceiveMsg+0x2c>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <UART_StartReceiveMsg+0x2c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <UART_StartReceiveMsg+0x30>)
 8001ba2:	4802      	ldr	r0, [pc, #8]	; (8001bac <UART_StartReceiveMsg+0x2c>)
 8001ba4:	f00b fc5e 	bl	800d464 <HAL_UART_Receive_DMA>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20001b68 	.word	0x20001b68
 8001bb0:	200017a0 	.word	0x200017a0

08001bb4 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <Get_DMA_Flag_Status+0x1a8>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d961      	bls.n	8001c8c <Get_DMA_Flag_Status+0xd8>
 8001bc8:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <Get_DMA_Flag_Status+0x1ac>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4964      	ldr	r1, [pc, #400]	; (8001d64 <Get_DMA_Flag_Status+0x1b0>)
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	d057      	beq.n	8001c86 <Get_DMA_Flag_Status+0xd2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4963      	ldr	r1, [pc, #396]	; (8001d68 <Get_DMA_Flag_Status+0x1b4>)
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d050      	beq.n	8001c82 <Get_DMA_Flag_Status+0xce>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4961      	ldr	r1, [pc, #388]	; (8001d6c <Get_DMA_Flag_Status+0x1b8>)
 8001be6:	428b      	cmp	r3, r1
 8001be8:	d049      	beq.n	8001c7e <Get_DMA_Flag_Status+0xca>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4960      	ldr	r1, [pc, #384]	; (8001d70 <Get_DMA_Flag_Status+0x1bc>)
 8001bf0:	428b      	cmp	r3, r1
 8001bf2:	d042      	beq.n	8001c7a <Get_DMA_Flag_Status+0xc6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	495e      	ldr	r1, [pc, #376]	; (8001d74 <Get_DMA_Flag_Status+0x1c0>)
 8001bfa:	428b      	cmp	r3, r1
 8001bfc:	d03a      	beq.n	8001c74 <Get_DMA_Flag_Status+0xc0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	495d      	ldr	r1, [pc, #372]	; (8001d78 <Get_DMA_Flag_Status+0x1c4>)
 8001c04:	428b      	cmp	r3, r1
 8001c06:	d032      	beq.n	8001c6e <Get_DMA_Flag_Status+0xba>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	495b      	ldr	r1, [pc, #364]	; (8001d7c <Get_DMA_Flag_Status+0x1c8>)
 8001c0e:	428b      	cmp	r3, r1
 8001c10:	d02a      	beq.n	8001c68 <Get_DMA_Flag_Status+0xb4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	495a      	ldr	r1, [pc, #360]	; (8001d80 <Get_DMA_Flag_Status+0x1cc>)
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	d022      	beq.n	8001c62 <Get_DMA_Flag_Status+0xae>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4958      	ldr	r1, [pc, #352]	; (8001d84 <Get_DMA_Flag_Status+0x1d0>)
 8001c22:	428b      	cmp	r3, r1
 8001c24:	d01a      	beq.n	8001c5c <Get_DMA_Flag_Status+0xa8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4957      	ldr	r1, [pc, #348]	; (8001d88 <Get_DMA_Flag_Status+0x1d4>)
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	d012      	beq.n	8001c56 <Get_DMA_Flag_Status+0xa2>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4955      	ldr	r1, [pc, #340]	; (8001d8c <Get_DMA_Flag_Status+0x1d8>)
 8001c36:	428b      	cmp	r3, r1
 8001c38:	d00a      	beq.n	8001c50 <Get_DMA_Flag_Status+0x9c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4954      	ldr	r1, [pc, #336]	; (8001d90 <Get_DMA_Flag_Status+0x1dc>)
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d102      	bne.n	8001c4a <Get_DMA_Flag_Status+0x96>
 8001c44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c48:	e01e      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c4e:	e01b      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001c54:	e018      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c5a:	e015      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c60:	e012      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c66:	e00f      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6c:	e00c      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c72:	e009      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c78:	e006      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	e004      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	e002      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e000      	b.n	8001c88 <Get_DMA_Flag_Status+0xd4>
 8001c86:	2308      	movs	r3, #8
 8001c88:	4013      	ands	r3, r2
 8001c8a:	e060      	b.n	8001d4e <Get_DMA_Flag_Status+0x19a>
 8001c8c:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <Get_DMA_Flag_Status+0x1e0>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4933      	ldr	r1, [pc, #204]	; (8001d64 <Get_DMA_Flag_Status+0x1b0>)
 8001c96:	428b      	cmp	r3, r1
 8001c98:	d057      	beq.n	8001d4a <Get_DMA_Flag_Status+0x196>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4932      	ldr	r1, [pc, #200]	; (8001d68 <Get_DMA_Flag_Status+0x1b4>)
 8001ca0:	428b      	cmp	r3, r1
 8001ca2:	d050      	beq.n	8001d46 <Get_DMA_Flag_Status+0x192>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4930      	ldr	r1, [pc, #192]	; (8001d6c <Get_DMA_Flag_Status+0x1b8>)
 8001caa:	428b      	cmp	r3, r1
 8001cac:	d049      	beq.n	8001d42 <Get_DMA_Flag_Status+0x18e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	492f      	ldr	r1, [pc, #188]	; (8001d70 <Get_DMA_Flag_Status+0x1bc>)
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d042      	beq.n	8001d3e <Get_DMA_Flag_Status+0x18a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	492d      	ldr	r1, [pc, #180]	; (8001d74 <Get_DMA_Flag_Status+0x1c0>)
 8001cbe:	428b      	cmp	r3, r1
 8001cc0:	d03a      	beq.n	8001d38 <Get_DMA_Flag_Status+0x184>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	492c      	ldr	r1, [pc, #176]	; (8001d78 <Get_DMA_Flag_Status+0x1c4>)
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	d032      	beq.n	8001d32 <Get_DMA_Flag_Status+0x17e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	492a      	ldr	r1, [pc, #168]	; (8001d7c <Get_DMA_Flag_Status+0x1c8>)
 8001cd2:	428b      	cmp	r3, r1
 8001cd4:	d02a      	beq.n	8001d2c <Get_DMA_Flag_Status+0x178>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4929      	ldr	r1, [pc, #164]	; (8001d80 <Get_DMA_Flag_Status+0x1cc>)
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d022      	beq.n	8001d26 <Get_DMA_Flag_Status+0x172>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4927      	ldr	r1, [pc, #156]	; (8001d84 <Get_DMA_Flag_Status+0x1d0>)
 8001ce6:	428b      	cmp	r3, r1
 8001ce8:	d01a      	beq.n	8001d20 <Get_DMA_Flag_Status+0x16c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4926      	ldr	r1, [pc, #152]	; (8001d88 <Get_DMA_Flag_Status+0x1d4>)
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d012      	beq.n	8001d1a <Get_DMA_Flag_Status+0x166>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4924      	ldr	r1, [pc, #144]	; (8001d8c <Get_DMA_Flag_Status+0x1d8>)
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	d00a      	beq.n	8001d14 <Get_DMA_Flag_Status+0x160>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4923      	ldr	r1, [pc, #140]	; (8001d90 <Get_DMA_Flag_Status+0x1dc>)
 8001d04:	428b      	cmp	r3, r1
 8001d06:	d102      	bne.n	8001d0e <Get_DMA_Flag_Status+0x15a>
 8001d08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d0c:	e01e      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d12:	e01b      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001d18:	e018      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d1e:	e015      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d24:	e012      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d2a:	e00f      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d30:	e00c      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d36:	e009      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d3c:	e006      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	e004      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	e002      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e000      	b.n	8001d4c <Get_DMA_Flag_Status+0x198>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	4013      	ands	r3, r2
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40020080 	.word	0x40020080
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020008 	.word	0x40020008
 8001d68:	40020408 	.word	0x40020408
 8001d6c:	4002001c 	.word	0x4002001c
 8001d70:	4002041c 	.word	0x4002041c
 8001d74:	40020030 	.word	0x40020030
 8001d78:	40020430 	.word	0x40020430
 8001d7c:	40020044 	.word	0x40020044
 8001d80:	40020444 	.word	0x40020444
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020458 	.word	0x40020458
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	4002046c 	.word	0x4002046c
 8001d94:	40020000 	.word	0x40020000

08001d98 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <MX_CRC_Init+0x40>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <MX_CRC_Init+0x3c>)
 8001dde:	f007 fb1d 	bl	800941c <HAL_CRC_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001de8:	f000 ffa2 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200019a8 	.word	0x200019a8
 8001df4:	40023000 	.word	0x40023000

08001df8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_CRC_MspInit+0x38>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10b      	bne.n	8001e22 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_CRC_MspInit+0x3c>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_CRC_MspInit+0x3c>)
 8001e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e14:	6493      	str	r3, [r2, #72]	; 0x48
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_CRC_MspInit+0x3c>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023000 	.word	0x40023000
 8001e34:	40021000 	.word	0x40021000

08001e38 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	795a      	ldrb	r2, [r3, #5]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2232      	movs	r2, #50	; 0x32
 8001e4c:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	799b      	ldrb	r3, [r3, #6]
 8001e52:	3b80      	subs	r3, #128	; 0x80
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	719a      	strb	r2, [r3, #6]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <INIT_STREAMING_HEADER+0x30>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2232      	movs	r2, #50	; 0x32
 8001e7e:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2208      	movs	r2, #8
 8001e84:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20000008 	.word	0x20000008

08001e9c <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b098      	sub	sp, #96	; 0x60
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d801      	bhi.n	8001eb8 <HandleMSG+0x1c>
  {
    return 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e36f      	b.n	8002598 <HandleMSG+0x6fc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	791b      	ldrb	r3, [r3, #4]
 8001ebc:	2b32      	cmp	r3, #50	; 0x32
 8001ebe:	d001      	beq.n	8001ec4 <HandleMSG+0x28>
  {
    return 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e369      	b.n	8002598 <HandleMSG+0x6fc>
  }

  switch (Msg->Data[2])   /* CMD */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	799b      	ldrb	r3, [r3, #6]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	dc6b      	bgt.n	8001fa4 <HandleMSG+0x108>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	dc3d      	bgt.n	8001f4c <HandleMSG+0xb0>
 8001ed0:	e35e      	b.n	8002590 <HandleMSG+0x6f4>
 8001ed2:	3b60      	subs	r3, #96	; 0x60
 8001ed4:	2b1a      	cmp	r3, #26
 8001ed6:	f200 835b 	bhi.w	8002590 <HandleMSG+0x6f4>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HandleMSG+0x44>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08002047 	.word	0x08002047
 8001ee4:	08002591 	.word	0x08002591
 8001ee8:	08002075 	.word	0x08002075
 8001eec:	08002591 	.word	0x08002591
 8001ef0:	08002591 	.word	0x08002591
 8001ef4:	08002591 	.word	0x08002591
 8001ef8:	08002591 	.word	0x08002591
 8001efc:	08002591 	.word	0x08002591
 8001f00:	08002591 	.word	0x08002591
 8001f04:	08002591 	.word	0x08002591
 8001f08:	08002591 	.word	0x08002591
 8001f0c:	08002591 	.word	0x08002591
 8001f10:	08002591 	.word	0x08002591
 8001f14:	08002591 	.word	0x08002591
 8001f18:	08002591 	.word	0x08002591
 8001f1c:	08002591 	.word	0x08002591
 8001f20:	08002591 	.word	0x08002591
 8001f24:	08002591 	.word	0x08002591
 8001f28:	08002591 	.word	0x08002591
 8001f2c:	08002591 	.word	0x08002591
 8001f30:	08002591 	.word	0x08002591
 8001f34:	08002591 	.word	0x08002591
 8001f38:	080020a3 	.word	0x080020a3
 8001f3c:	08002591 	.word	0x08002591
 8001f40:	08002591 	.word	0x08002591
 8001f44:	08002591 	.word	0x08002591
 8001f48:	080020d1 	.word	0x080020d1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	2b11      	cmp	r3, #17
 8001f50:	f200 831e 	bhi.w	8002590 <HandleMSG+0x6f4>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <HandleMSG+0xc0>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001fb1 	.word	0x08001fb1
 8001f60:	08001feb 	.word	0x08001feb
 8001f64:	08002591 	.word	0x08002591
 8001f68:	08002591 	.word	0x08002591
 8001f6c:	08002591 	.word	0x08002591
 8001f70:	08002591 	.word	0x08002591
 8001f74:	08002555 	.word	0x08002555
 8001f78:	080020ff 	.word	0x080020ff
 8001f7c:	080021a5 	.word	0x080021a5
 8001f80:	08002591 	.word	0x08002591
 8001f84:	08002591 	.word	0x08002591
 8001f88:	080021ef 	.word	0x080021ef
 8001f8c:	08002591 	.word	0x08002591
 8001f90:	08001fd1 	.word	0x08001fd1
 8001f94:	08002591 	.word	0x08002591
 8001f98:	08002235 	.word	0x08002235
 8001f9c:	080024a5 	.word	0x080024a5
 8001fa0:	080024f3 	.word	0x080024f3
 8001fa4:	2b7a      	cmp	r3, #122	; 0x7a
 8001fa6:	f300 82f3 	bgt.w	8002590 <HandleMSG+0x6f4>
 8001faa:	2b60      	cmp	r3, #96	; 0x60
 8001fac:	da91      	bge.n	8001ed2 <HandleMSG+0x36>
 8001fae:	e2ef      	b.n	8002590 <HandleMSG+0x6f4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d001      	beq.n	8001fbc <HandleMSG+0x120>
      {
        return 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e2ed      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff3b 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fdbd 	bl	8001b48 <UART_SendMsg>
      break;
 8001fce:	e2e2      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d001      	beq.n	8001fdc <HandleMSG+0x140>
      {
        return 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e2dd      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff2b 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	601a      	str	r2, [r3, #0]
      break;
 8001fe8:	e2d5      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d001      	beq.n	8001ff6 <HandleMSG+0x15a>
      {
        return 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e2d0      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff1e 	bl	8001e38 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fb22 	bl	8002650 <Get_PresentationString>

      i = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8002010:	e00d      	b.n	800202e <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 8002012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002014:	3303      	adds	r3, #3
 8002016:	f107 0110 	add.w	r1, r7, #16
 800201a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800201c:	440a      	add	r2, r1
 800201e:	7811      	ldrb	r1, [r2, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	460a      	mov	r2, r1
 8002026:	711a      	strb	r2, [r3, #4]
        i++;
 8002028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202a:	3301      	adds	r3, #1
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002032:	429a      	cmp	r2, r3
 8002034:	d3ed      	bcc.n	8002012 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8002036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002038:	1cda      	adds	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fd82 	bl	8001b48 <UART_SendMsg>
      break;
 8002044:	e2a7      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d801      	bhi.n	8002052 <HandleMSG+0x1b6>
      {
        return 0;
 800204e:	2300      	movs	r3, #0
 8002050:	e2a2      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fef0 	bl	8001e38 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3307      	adds	r3, #7
 800205c:	2204      	movs	r2, #4
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f8d7 	bl	8003214 <Serialize_s32>
      Msg->Len = 3 + 4;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fd6b 	bl	8001b48 <UART_SendMsg>
      break;
 8002072:	e290      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d801      	bhi.n	8002080 <HandleMSG+0x1e4>
      {
        return 0;
 800207c:	2300      	movs	r3, #0
 800207e:	e28b      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fed9 	bl	8001e38 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3307      	adds	r3, #7
 800208a:	2204      	movs	r2, #4
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f001 f8c0 	bl	8003214 <Serialize_s32>
      Msg->Len = 3 + 4;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2207      	movs	r2, #7
 8002098:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fd54 	bl	8001b48 <UART_SendMsg>
      break;
 80020a0:	e279      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d801      	bhi.n	80020ae <HandleMSG+0x212>
      {
        return 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e274      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fec2 	bl	8001e38 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3307      	adds	r3, #7
 80020b8:	2204      	movs	r2, #4
 80020ba:	2103      	movs	r1, #3
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 f8a9 	bl	8003214 <Serialize_s32>
      Msg->Len = 3 + 4;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2207      	movs	r2, #7
 80020c6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fd3d 	bl	8001b48 <UART_SendMsg>
      break;
 80020ce:	e262      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d801      	bhi.n	80020dc <HandleMSG+0x240>
      {
        return 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	e25d      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff feab 	bl	8001e38 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3307      	adds	r3, #7
 80020e6:	2204      	movs	r2, #4
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 f892 	bl	8003214 <Serialize_s32>
      Msg->Len = 3 + 4;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2207      	movs	r2, #7
 80020f4:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fd26 	bl	8001b48 <UART_SendMsg>
      break;
 80020fc:	e24b      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d801      	bhi.n	800210a <HandleMSG+0x26e>
      {
        return 0;
 8002106:	2300      	movs	r3, #0
 8002108:	e246      	b.n	8002598 <HandleMSG+0x6fc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3307      	adds	r3, #7
 800210e:	2104      	movs	r1, #4
 8002110:	4618      	mov	r0, r3
 8002112:	f001 f859 	bl	80031c8 <Deserialize>
 8002116:	4603      	mov	r3, r0
 8002118:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HandleMSG+0x3b4>)
 800211a:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800211c:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HandleMSG+0x3b4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 8002128:	f000 fc64 	bl	80029f4 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <HandleMSG+0x3b4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d101      	bne.n	800213c <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 8002138:	f000 fc64 	bl	8002a04 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800213c:	4b44      	ldr	r3, [pc, #272]	; (8002250 <HandleMSG+0x3b4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d101      	bne.n	800214c <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 8002148:	f000 fc64 	bl	8002a14 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HandleMSG+0x3b4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d101      	bne.n	800215c <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 8002158:	f000 fc34 	bl	80029c4 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HandleMSG+0x3b4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b20      	cmp	r3, #32
 8002166:	d101      	bne.n	800216c <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 8002168:	f000 fc34 	bl	80029d4 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HandleMSG+0x3b4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d101      	bne.n	800217c <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 8002178:	f000 fc34 	bl	80029e4 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800217c:	4835      	ldr	r0, [pc, #212]	; (8002254 <HandleMSG+0x3b8>)
 800217e:	f00a fc05 	bl	800c98c <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HandleMSG+0x3bc>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	795a      	ldrb	r2, [r3, #5]
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HandleMSG+0x3c0>)
 800218e:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe51 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fcd3 	bl	8001b48 <UART_SendMsg>
      break;
 80021a2:	e1f8      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d801      	bhi.n	80021b0 <HandleMSG+0x314>
      {
        return 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e1f3      	b.n	8002598 <HandleMSG+0x6fc>
      }

      DataLoggerActive = 0;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HandleMSG+0x3bc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80021b6:	4827      	ldr	r0, [pc, #156]	; (8002254 <HandleMSG+0x3b8>)
 80021b8:	f00a fc58 	bl	800ca6c <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 80021bc:	f000 fc32 	bl	8002a24 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 80021c0:	f000 fc38 	bl	8002a34 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 80021c4:	f000 fc3e 	bl	8002a44 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 80021c8:	f000 fc44 	bl	8002a54 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 80021cc:	f000 fc4a 	bl	8002a64 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 80021d0:	f000 fc50 	bl	8002a74 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HandleMSG+0x3b4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HandleMSG+0x3c4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fe29 	bl	8001e38 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fcae 	bl	8001b48 <UART_SendMsg>
      break;
 80021ec:	e1d3      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d801      	bhi.n	80021fa <HandleMSG+0x35e>
      {
        return 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e1ce      	b.n	8002598 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fe1c 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	79d8      	ldrb	r0, [r3, #7]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7a19      	ldrb	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7a5b      	ldrb	r3, [r3, #9]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f9f2 	bl	80025fc <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7a98      	ldrb	r0, [r3, #10]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7ad9      	ldrb	r1, [r3, #11]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7b1a      	ldrb	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7b5b      	ldrb	r3, [r3, #13]
 8002228:	f000 f9be 	bl	80025a8 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fc8b 	bl	8001b48 <UART_SendMsg>
      break;
 8002232:	e1b0      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b36      	cmp	r3, #54	; 0x36
 800223a:	d801      	bhi.n	8002240 <HandleMSG+0x3a4>
      {
        return 0;
 800223c:	2300      	movs	r3, #0
 800223e:	e1ab      	b.n	8002598 <HandleMSG+0x6fc>
      }

      msg_offset = 4;
 8002240:	2304      	movs	r3, #4
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	79db      	ldrb	r3, [r3, #7]
 8002248:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
 800224e:	e11a      	b.n	8002486 <HandleMSG+0x5ea>
 8002250:	2000065c 	.word	0x2000065c
 8002254:	20001ac0 	.word	0x20001ac0
 8002258:	20000659 	.word	0x20000659
 800225c:	20000008 	.word	0x20000008
 8002260:	20000661 	.word	0x20000661
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8002264:	4ba6      	ldr	r3, [pc, #664]	; (8002500 <HandleMSG+0x664>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2234      	movs	r2, #52	; 0x34
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	4aa5      	ldr	r2, [pc, #660]	; (8002504 <HandleMSG+0x668>)
 8002270:	4413      	add	r3, r2
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002276:	440a      	add	r2, r1
 8002278:	3204      	adds	r2, #4
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HandleMSG+0x664>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2234      	movs	r2, #52	; 0x34
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	4a9e      	ldr	r2, [pc, #632]	; (8002504 <HandleMSG+0x668>)
 800228a:	4413      	add	r3, r2
 800228c:	3301      	adds	r3, #1
 800228e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002290:	3201      	adds	r2, #1
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	440a      	add	r2, r1
 8002296:	3204      	adds	r2, #4
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800229c:	4b98      	ldr	r3, [pc, #608]	; (8002500 <HandleMSG+0x664>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2234      	movs	r2, #52	; 0x34
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a97      	ldr	r2, [pc, #604]	; (8002504 <HandleMSG+0x668>)
 80022a8:	4413      	add	r3, r2
 80022aa:	3302      	adds	r3, #2
 80022ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ae:	3202      	adds	r2, #2
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	440a      	add	r2, r1
 80022b4:	3204      	adds	r2, #4
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HandleMSG+0x664>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2234      	movs	r2, #52	; 0x34
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	4a8f      	ldr	r2, [pc, #572]	; (8002504 <HandleMSG+0x668>)
 80022c6:	4413      	add	r3, r2
 80022c8:	3303      	adds	r3, #3
 80022ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022cc:	3203      	adds	r2, #3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	440a      	add	r2, r1
 80022d2:	3204      	adds	r2, #4
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 80022d8:	4b89      	ldr	r3, [pc, #548]	; (8002500 <HandleMSG+0x664>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2234      	movs	r2, #52	; 0x34
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a88      	ldr	r2, [pc, #544]	; (8002504 <HandleMSG+0x668>)
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022ea:	3204      	adds	r2, #4
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	440a      	add	r2, r1
 80022f0:	3204      	adds	r2, #4
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HandleMSG+0x664>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2234      	movs	r2, #52	; 0x34
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	3308      	adds	r3, #8
 8002302:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HandleMSG+0x668>)
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800230a:	3208      	adds	r2, #8
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	440a      	add	r2, r1
 8002310:	3204      	adds	r2, #4
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8002316:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <HandleMSG+0x664>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2234      	movs	r2, #52	; 0x34
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	3308      	adds	r3, #8
 8002322:	4a78      	ldr	r2, [pc, #480]	; (8002504 <HandleMSG+0x668>)
 8002324:	4413      	add	r3, r2
 8002326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002328:	320c      	adds	r2, #12
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	440a      	add	r2, r1
 800232e:	3204      	adds	r2, #4
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 8002334:	4b72      	ldr	r3, [pc, #456]	; (8002500 <HandleMSG+0x664>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2234      	movs	r2, #52	; 0x34
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	3310      	adds	r3, #16
 8002340:	4a70      	ldr	r2, [pc, #448]	; (8002504 <HandleMSG+0x668>)
 8002342:	4413      	add	r3, r2
 8002344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002346:	3210      	adds	r2, #16
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	440a      	add	r2, r1
 800234c:	3204      	adds	r2, #4
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 8002352:	4b6b      	ldr	r3, [pc, #428]	; (8002500 <HandleMSG+0x664>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2234      	movs	r2, #52	; 0x34
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	3310      	adds	r3, #16
 800235e:	4a69      	ldr	r2, [pc, #420]	; (8002504 <HandleMSG+0x668>)
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002366:	3214      	adds	r2, #20
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	440a      	add	r2, r1
 800236c:	3204      	adds	r2, #4
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HandleMSG+0x664>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2234      	movs	r2, #52	; 0x34
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	3318      	adds	r3, #24
 800237e:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HandleMSG+0x668>)
 8002380:	4413      	add	r3, r2
 8002382:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002384:	3218      	adds	r2, #24
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	440a      	add	r2, r1
 800238a:	3204      	adds	r2, #4
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8002390:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HandleMSG+0x664>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2234      	movs	r2, #52	; 0x34
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	3318      	adds	r3, #24
 800239c:	4a59      	ldr	r2, [pc, #356]	; (8002504 <HandleMSG+0x668>)
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023a4:	321c      	adds	r2, #28
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	440a      	add	r2, r1
 80023aa:	3204      	adds	r2, #4
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HandleMSG+0x664>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2234      	movs	r2, #52	; 0x34
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	3320      	adds	r3, #32
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HandleMSG+0x668>)
 80023be:	4413      	add	r3, r2
 80023c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023c2:	3220      	adds	r2, #32
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	440a      	add	r2, r1
 80023c8:	3204      	adds	r2, #4
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HandleMSG+0x664>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2234      	movs	r2, #52	; 0x34
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	3320      	adds	r3, #32
 80023da:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HandleMSG+0x668>)
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023e2:	3224      	adds	r2, #36	; 0x24
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	440a      	add	r2, r1
 80023e8:	3204      	adds	r2, #4
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HandleMSG+0x664>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2234      	movs	r2, #52	; 0x34
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	3328      	adds	r3, #40	; 0x28
 80023fa:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HandleMSG+0x668>)
 80023fc:	4413      	add	r3, r2
 80023fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002400:	3228      	adds	r2, #40	; 0x28
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	440a      	add	r2, r1
 8002406:	3204      	adds	r2, #4
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800240c:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HandleMSG+0x664>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2234      	movs	r2, #52	; 0x34
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	3328      	adds	r3, #40	; 0x28
 8002418:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <HandleMSG+0x668>)
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002420:	322c      	adds	r2, #44	; 0x2c
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	440a      	add	r2, r1
 8002426:	3204      	adds	r2, #4
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HandleMSG+0x664>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2234      	movs	r2, #52	; 0x34
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	3330      	adds	r3, #48	; 0x30
 8002438:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HandleMSG+0x668>)
 800243a:	4413      	add	r3, r2
 800243c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800243e:	3230      	adds	r2, #48	; 0x30
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	440a      	add	r2, r1
 8002444:	3204      	adds	r2, #4
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	3334      	adds	r3, #52	; 0x34
 800244e:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HandleMSG+0x66c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <HandleMSG+0x66c>)
 8002458:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HandleMSG+0x66c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b08      	cmp	r3, #8
 8002460:	dd02      	ble.n	8002468 <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 8002462:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HandleMSG+0x66c>)
 8002464:	2208      	movs	r2, #8
 8002466:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HandleMSG+0x664>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a24      	ldr	r2, [pc, #144]	; (8002500 <HandleMSG+0x664>)
 8002470:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HandleMSG+0x664>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b07      	cmp	r3, #7
 8002478:	dd02      	ble.n	8002480 <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HandleMSG+0x664>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8002480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002482:	3301      	adds	r3, #1
 8002484:	65bb      	str	r3, [r7, #88]	; 0x58
 8002486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248a:	429a      	cmp	r2, r3
 800248c:	f4ff aeea 	bcc.w	8002264 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HandleMSG+0x670>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fcce 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	601a      	str	r2, [r3, #0]
      break;
 80024a2:	e078      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d801      	bhi.n	80024b0 <HandleMSG+0x614>
      {
        return 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e073      	b.n	8002598 <HandleMSG+0x6fc>
      }

      if (Msg->Data[3] == 1U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	79db      	ldrb	r3, [r3, #7]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10e      	bne.n	80024d6 <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HandleMSG+0x674>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HandleMSG+0x678>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HandleMSG+0x67c>)
 80024c4:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HandleMSG+0x678>)
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80024ce:	4813      	ldr	r0, [pc, #76]	; (800251c <HandleMSG+0x680>)
 80024d0:	f00a facc 	bl	800ca6c <HAL_TIM_Base_Stop_IT>
 80024d4:	e006      	b.n	80024e4 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HandleMSG+0x674>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HandleMSG+0x67c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HandleMSG+0x678>)
 80024e2:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fca7 	bl	8001e38 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fb2c 	bl	8001b48 <UART_SendMsg>
      break;
 80024f0:	e051      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d812      	bhi.n	8002520 <HandleMSG+0x684>
      {
        return 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e04c      	b.n	8002598 <HandleMSG+0x6fc>
 80024fe:	bf00      	nop
 8002500:	20000668 	.word	0x20000668
 8002504:	200015d8 	.word	0x200015d8
 8002508:	2000066c 	.word	0x2000066c
 800250c:	20000660 	.word	0x20000660
 8002510:	20000661 	.word	0x20000661
 8002514:	2000065c 	.word	0x2000065c
 8002518:	20000ac8 	.word	0x20000ac8
 800251c:	20001ac0 	.word	0x20001ac0
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3307      	adds	r3, #7
 8002524:	4a1e      	ldr	r2, [pc, #120]	; (80025a0 <HandleMSG+0x704>)
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4611      	mov	r1, r2
 800252a:	2204      	movs	r2, #4
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fe71 	bl	8003214 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	330b      	adds	r3, #11
 8002536:	2201      	movs	r2, #1
 8002538:	2130      	movs	r1, #48	; 0x30
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fe6a 	bl	8003214 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fc79 	bl	8001e38 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2208      	movs	r2, #8
 800254a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fafb 	bl	8001b48 <UART_SendMsg>
      break;
 8002552:	e020      	b.n	8002596 <HandleMSG+0x6fa>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d801      	bhi.n	8002560 <HandleMSG+0x6c4>
      {
        return 0;
 800255c:	2300      	movs	r3, #0
 800255e:	e01b      	b.n	8002598 <HandleMSG+0x6fc>
      }

      Enabled6X = Msg->Data[3];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	79da      	ldrb	r2, [r3, #7]
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HandleMSG+0x708>)
 8002566:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HandleMSG+0x708>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d104      	bne.n	800257a <HandleMSG+0x6de>
      {
        MotionFX_manager_stop_9X();
 8002570:	f000 fc86 	bl	8002e80 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 8002574:	f000 fc66 	bl	8002e44 <MotionFX_manager_start_6X>
 8002578:	e003      	b.n	8002582 <HandleMSG+0x6e6>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800257a:	f000 fc6d 	bl	8002e58 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800257e:	f000 fc75 	bl	8002e6c <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fc58 	bl	8001e38 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fadd 	bl	8001b48 <UART_SendMsg>
      break;
 800258e:	e002      	b.n	8002596 <HandleMSG+0x6fa>

    default:
      ret = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8002594:	bf00      	nop
  }

  return ret;
 8002596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002598:	4618      	mov	r0, r3
 800259a:	3760      	adds	r7, #96	; 0x60
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000670 	.word	0x20000670

080025a8 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	4603      	mov	r3, r0
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	460b      	mov	r3, r1
 80025c0:	717b      	strb	r3, [r7, #5]
 80025c2:	4613      	mov	r3, r2
 80025c4:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 80025ce:	797b      	ldrb	r3, [r7, #5]
 80025d0:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 80025d2:	793b      	ldrb	r3, [r7, #4]
 80025d4:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4806      	ldr	r0, [pc, #24]	; (80025f8 <RTC_DateRegulate+0x50>)
 80025e0:	f009 ffd6 	bl	800c590 <HAL_RTC_SetDate>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80025ea:	f000 fba1 	bl	8002d30 <Error_Handler>
  }
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20001a9c 	.word	0x20001a9c

080025fc <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	460b      	mov	r3, r1
 8002608:	71bb      	strb	r3, [r7, #6]
 800260a:	4613      	mov	r3, r2
 800260c:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	4806      	ldr	r0, [pc, #24]	; (800264c <RTC_TimeRegulate+0x50>)
 8002634:	f009 feb3 	bl	800c39e <HAL_RTC_SetTime>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800263e:	f000 fb77 	bl	8002d30 <Error_Handler>
  }
}
 8002642:	bf00      	nop
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001a9c 	.word	0x20001a9c

08002650 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b09e      	sub	sp, #120	; 0x78
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800265a:	230d      	movs	r3, #13
 800265c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <Get_PresentationString+0x74>)
 8002666:	f107 0408 	add.w	r4, r7, #8
 800266a:	461d      	mov	r5, r3
 800266c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	6023      	str	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 8002678:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800267c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fc06 	bl	8002e94 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 8002688:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	429a      	cmp	r2, r3
 8002690:	da06      	bge.n	80026a0 <Get_PresentationString+0x50>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 8002692:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002696:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800269a:	4413      	add	r3, r2
 800269c:	677b      	str	r3, [r7, #116]	; 0x74
 800269e:	e002      	b.n	80026a6 <Get_PresentationString+0x56>
  }
  else
  {
    lib_version_num = lib_version_string;
 80026a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a4:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 80026a6:	f107 0208 	add.w	r2, r7, #8
 80026aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f017 ff7a 	bl	801a5a8 <sniprintf>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	3778      	adds	r7, #120	; 0x78
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	0801ae28 	.word	0x0801ae28

080026c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_DMA_Init+0x38>)
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <MX_DMA_Init+0x38>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6493      	str	r3, [r2, #72]	; 0x48
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_DMA_Init+0x38>)
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2010      	movs	r0, #16
 80026ec:	f006 fe5f 	bl	80093ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80026f0:	2010      	movs	r0, #16
 80026f2:	f006 fe78 	bl	80093e6 <HAL_NVIC_EnableIRQ>

}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <MX_GPIO_Init+0xd4>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002732:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <MX_GPIO_Init+0xd4>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_GPIO_Init+0xd4>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2120      	movs	r1, #32
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f007 fc11 	bl	8009fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8002786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800278c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <MX_GPIO_Init+0xd8>)
 800279e:	f007 f94d 	bl	8009a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027a2:	2320      	movs	r3, #32
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027bc:	f007 f93e 	bl	8009a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	2028      	movs	r0, #40	; 0x28
 80027c6:	f006 fdf2 	bl	80093ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027ca:	2028      	movs	r0, #40	; 0x28
 80027cc:	f006 fe0b 	bl	80093e6 <HAL_NVIC_EnableIRQ>

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	48000800 	.word	0x48000800

080027e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_I2C1_Init+0x74>)
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <MX_I2C1_Init+0x78>)
 80027e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MX_I2C1_Init+0x74>)
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <MX_I2C1_Init+0x7c>)
 80027ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_I2C1_Init+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_I2C1_Init+0x74>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <MX_I2C1_Init+0x74>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_I2C1_Init+0x74>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_I2C1_Init+0x74>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_I2C1_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_I2C1_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800281a:	480e      	ldr	r0, [pc, #56]	; (8002854 <MX_I2C1_Init+0x74>)
 800281c:	f007 fbf4 	bl	800a008 <HAL_I2C_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002826:	f000 fa83 	bl	8002d30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	4809      	ldr	r0, [pc, #36]	; (8002854 <MX_I2C1_Init+0x74>)
 800282e:	f008 f997 	bl	800ab60 <HAL_I2CEx_ConfigAnalogFilter>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002838:	f000 fa7a 	bl	8002d30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_I2C1_Init+0x74>)
 8002840:	f008 f9d9 	bl	800abf6 <HAL_I2CEx_ConfigDigitalFilter>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800284a:	f000 fa71 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200019cc 	.word	0x200019cc
 8002858:	40005400 	.word	0x40005400
 800285c:	00702991 	.word	0x00702991

08002860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0ac      	sub	sp, #176	; 0xb0
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2288      	movs	r2, #136	; 0x88
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f017 fe89 	bl	801a598 <memset>
  if(i2cHandle->Instance==I2C1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <HAL_I2C_MspInit+0xb0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d13b      	bne.n	8002908 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002894:	2300      	movs	r3, #0
 8002896:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4618      	mov	r0, r3
 800289e:	f009 f847 	bl	800b930 <HAL_RCCEx_PeriphCLKConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028a8:	f000 fa42 	bl	8002d30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028cc:	2312      	movs	r3, #18
 80028ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028de:	2304      	movs	r3, #4
 80028e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028e8:	4619      	mov	r1, r3
 80028ea:	480b      	ldr	r0, [pc, #44]	; (8002918 <HAL_I2C_MspInit+0xb8>)
 80028ec:	f007 f8a6 	bl	8009a3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_I2C_MspInit+0xb4>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002908:	bf00      	nop
 800290a:	37b0      	adds	r7, #176	; 0xb0
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40005400 	.word	0x40005400
 8002914:	40021000 	.word	0x40021000
 8002918:	48000400 	.word	0x48000400

0800291c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <HAL_I2C_MspDeInit+0x3c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10f      	bne.n	800294e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_I2C_MspDeInit+0x40>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_I2C_MspDeInit+0x40>)
 8002934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800293a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800293e:	4808      	ldr	r0, [pc, #32]	; (8002960 <HAL_I2C_MspDeInit+0x44>)
 8002940:	f007 fa26 	bl	8009d90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_I2C_MspDeInit+0x44>)
 800294a:	f007 fa21 	bl	8009d90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005400 	.word	0x40005400
 800295c:	40021000 	.word	0x40021000
 8002960:	48000400 	.word	0x48000400

08002964 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002968:	2102      	movs	r1, #2
 800296a:	2000      	movs	r0, #0
 800296c:	f005 fd7a 	bl	8008464 <IKS01A2_MOTION_SENSOR_Init>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002978:	2101      	movs	r1, #1
 800297a:	2000      	movs	r0, #0
 800297c:	f005 fd72 	bl	8008464 <IKS01A2_MOTION_SENSOR_Init>
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002988:	2104      	movs	r1, #4
 800298a:	2002      	movs	r0, #2
 800298c:	f005 fd6a 	bl	8008464 <IKS01A2_MOTION_SENSOR_Init>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8002998:	2102      	movs	r1, #2
 800299a:	2001      	movs	r0, #1
 800299c:	f005 fa64 	bl	8007e68 <IKS01A2_ENV_SENSOR_Init>
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 80029a8:	2101      	movs	r1, #1
 80029aa:	2000      	movs	r0, #0
 80029ac:	f005 fa5c 	bl	8007e68 <IKS01A2_ENV_SENSOR_Init>
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0, ENV_HUMIDITY);
 80029b8:	2104      	movs	r1, #4
 80029ba:	2000      	movs	r0, #0
 80029bc:	f005 fa54 	bl	8007e68 <IKS01A2_ENV_SENSOR_Init>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80029c8:	2102      	movs	r1, #2
 80029ca:	2000      	movs	r0, #0
 80029cc:	f005 fe46 	bl	800865c <IKS01A2_MOTION_SENSOR_Enable>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80029d8:	2101      	movs	r1, #1
 80029da:	2000      	movs	r0, #0
 80029dc:	f005 fe3e 	bl	800865c <IKS01A2_MOTION_SENSOR_Enable>
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80029e8:	2104      	movs	r1, #4
 80029ea:	2002      	movs	r0, #2
 80029ec:	f005 fe36 	bl	800865c <IKS01A2_MOTION_SENSOR_Enable>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80029f8:	2102      	movs	r1, #2
 80029fa:	2001      	movs	r0, #1
 80029fc:	f005 faf4 	bl	8007fe8 <IKS01A2_ENV_SENSOR_Enable>
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f005 faec 	bl	8007fe8 <IKS01A2_ENV_SENSOR_Enable>
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8002a18:	2104      	movs	r1, #4
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f005 fae4 	bl	8007fe8 <IKS01A2_ENV_SENSOR_Enable>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002a28:	2102      	movs	r1, #2
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f005 fe58 	bl	80086e0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f005 fe50 	bl	80086e0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002a48:	2104      	movs	r1, #4
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f005 fe48 	bl	80086e0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f005 fb06 	bl	800806c <IKS01A2_ENV_SENSOR_Disable>
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8002a68:	2101      	movs	r1, #1
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f005 fafe 	bl	800806c <IKS01A2_ENV_SENSOR_Disable>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8002a78:	2104      	movs	r1, #4
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f005 faf6 	bl	800806c <IKS01A2_ENV_SENSOR_Disable>
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	2102      	movs	r1, #2
 8002a90:	2000      	movs	r0, #0
 8002a92:	f005 fe67 	bl	8008764 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f005 fe5a 	bl	8008764 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f005 fe4d 	bl	8008764 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, Value);
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	2102      	movs	r1, #2
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f005 fb06 	bl	80080f0 <IKS01A2_ENV_SENSOR_GetValue>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_TEMPERATURE, Value);
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	2101      	movs	r1, #1
 8002af8:	2000      	movs	r0, #0
 8002afa:	f005 faf9 	bl	80080f0 <IKS01A2_ENV_SENSOR_GetValue>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_HUMIDITY, Value);
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	2104      	movs	r1, #4
 8002b12:	2000      	movs	r0, #0
 8002b14:	f005 faec 	bl	80080f0 <IKS01A2_ENV_SENSOR_GetValue>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8002b2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b2e:	2102      	movs	r1, #2
 8002b30:	2000      	movs	r0, #0
 8002b32:	f005 fe5b 	bl	80087ec <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	2102      	movs	r1, #2
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f005 fe94 	bl	8008878 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	226e      	movs	r2, #110	; 0x6e
 8002b64:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	2277      	movs	r2, #119	; 0x77
 8002b6c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3302      	adds	r3, #2
 8002b72:	2275      	movs	r2, #117	; 0x75
 8002b74:	701a      	strb	r2, [r3, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	226e      	movs	r2, #110	; 0x6e
 8002b8e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	2277      	movs	r2, #119	; 0x77
 8002b96:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	2275      	movs	r2, #117	; 0x75
 8002b9e:	701a      	strb	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	226e      	movs	r2, #110	; 0x6e
 8002bb8:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	2265      	movs	r2, #101	; 0x65
 8002bc0:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	2275      	movs	r2, #117	; 0x75
 8002bc8:	701a      	strb	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bda:	f006 fa6d 	bl	80090b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bde:	f000 f811 	bl	8002c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be2:	f7ff fd8f 	bl	8002704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002be6:	f000 fd93 	bl	8003710 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002bea:	f7ff f8e3 	bl	8001db4 <MX_CRC_Init>
  //MX_I2C1_Init();
  MX_RTC_Init();
 8002bee:	f000 f989 	bl	8002f04 <MX_RTC_Init>
  MX_DMA_Init();
 8002bf2:	f7ff fd69 	bl	80026c8 <MX_DMA_Init>
  MX_TIM3_Init();
 8002bf6:	f000 fd17 	bl	8003628 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8002bfa:	f7fe f979 	bl	8000ef0 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_MEMS_Process();
 8002bfe:	f7fe f97d 	bl	8000efc <MX_MEMS_Process>
 8002c02:	e7fc      	b.n	8002bfe <main+0x28>

08002c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b096      	sub	sp, #88	; 0x58
 8002c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	2244      	movs	r2, #68	; 0x44
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f017 fcc0 	bl	801a598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c2a:	f008 f83f 	bl	800acac <HAL_PWREx_ControlVoltageScaling>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c34:	f000 f87c 	bl	8002d30 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002c38:	230a      	movs	r3, #10
 8002c3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c42:	2310      	movs	r3, #16
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c56:	230a      	movs	r3, #10
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c62:	2302      	movs	r3, #2
 8002c64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f008 f874 	bl	800ad58 <HAL_RCC_OscConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002c76:	f000 f85b 	bl	8002d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c8e:	463b      	mov	r3, r7
 8002c90:	2104      	movs	r1, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f008 fc46 	bl	800b524 <HAL_RCC_ClockConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c9e:	f000 f847 	bl	8002d30 <Error_Handler>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3758      	adds	r7, #88	; 0x58
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbc:	d129      	bne.n	8002d12 <HAL_GPIO_EXTI_Callback+0x66>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <HAL_GPIO_EXTI_Callback+0x70>)
 8002cc0:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x74>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_GPIO_EXTI_Callback+0x78>)
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_EXTI_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002cde:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7fd fa75 	bl	80001d0 <strlen>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart2, cMessage, iMessageLength, 100) != HAL_OK)
 8002cea:	897a      	ldrh	r2, [r7, #10]
 8002cec:	2364      	movs	r3, #100	; 0x64
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_GPIO_EXTI_Callback+0x80>)
 8002cf2:	f00a fb23 	bl	800d33c <HAL_UART_Transmit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_GPIO_EXTI_Callback+0x54>
		{
			Error_Handler();
 8002cfc:	f000 f818 	bl	8002d30 <Error_Handler>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	2120      	movs	r1, #32
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f007 f94b 	bl	8009fa8 <HAL_GPIO_WritePin>
	}
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	0801ae4c 	.word	0x0801ae4c
 8002d20:	20000acc 	.word	0x20000acc
 8002d24:	0801ae50 	.word	0x0801ae50
 8002d28:	0801ae70 	.word	0x0801ae70
 8002d2c:	20001a18 	.word	0x20001a18

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <Error_Handler+0x8>
	...

08002d3c <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002d40:	f014 ff0e 	bl	8017b60 <MotionFX_GetStateSize>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8002d4a:	d901      	bls.n	8002d50 <MotionFX_manager_init+0x14>
    Error_Handler();
 8002d4c:	f7ff fff0 	bl	8002d30 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8002d50:	4821      	ldr	r0, [pc, #132]	; (8002dd8 <MotionFX_manager_init+0x9c>)
 8002d52:	f014 ff09 	bl	8017b68 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481e      	ldr	r0, [pc, #120]	; (8002dd8 <MotionFX_manager_init+0x9c>)
 8002d5e:	f014 ffe7 	bl	8017d30 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	331d      	adds	r3, #29
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fef5 	bl	8002b58 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3321      	adds	r3, #33	; 0x21
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff04 	bl	8002b82 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3325      	adds	r3, #37	; 0x25
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff13 	bl	8002bac <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <MotionFX_manager_init+0xa4>)
 8002d8c:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <MotionFX_manager_init+0xa8>)
 8002d94:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <MotionFX_manager_init+0xac>)
 8002d9c:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <MotionFX_manager_init+0xa0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <MotionFX_manager_init+0x9c>)
 8002dc0:	f014 ff6c 	bl	8017c9c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MotionFX_manager_init+0x9c>)
 8002dc8:	f014 ffee 	bl	8017da8 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <MotionFX_manager_init+0x9c>)
 8002dd0:	f015 f80a 	bl	8017de8 <MotionFX_enable_9X>
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000b04 	.word	0x20000b04
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	3ac88a48 	.word	0x3ac88a48
 8002de4:	3b83126f 	.word	0x3b83126f
 8002de8:	3b449ba6 	.word	0x3b449ba6

08002dec <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <MotionFX_manager_run+0x4c>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MotionFX_manager_run+0x50>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d10e      	bne.n	8002e24 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <MotionFX_manager_run+0x54>)
 8002e0e:	f015 f81b 	bl	8017e48 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2200      	movs	r2, #0
 8002e16:	9200      	str	r2, [sp, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4808      	ldr	r0, [pc, #32]	; (8002e40 <MotionFX_manager_run+0x54>)
 8002e1e:	f015 f803 	bl	8017e28 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002e22:	e004      	b.n	8002e2e <MotionFX_manager_run+0x42>
    discardedCount++;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <MotionFX_manager_run+0x4c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <MotionFX_manager_run+0x4c>)
 8002e2c:	6013      	str	r3, [r2, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000b00 	.word	0x20000b00
 8002e3c:	20000010 	.word	0x20000010
 8002e40:	20000b04 	.word	0x20000b04

08002e44 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4802      	ldr	r0, [pc, #8]	; (8002e54 <MotionFX_manager_start_6X+0x10>)
 8002e4c:	f014 ffac 	bl	8017da8 <MotionFX_enable_6X>
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000b04 	.word	0x20000b04

08002e58 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4802      	ldr	r0, [pc, #8]	; (8002e68 <MotionFX_manager_stop_6X+0x10>)
 8002e60:	f014 ffa2 	bl	8017da8 <MotionFX_enable_6X>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000b04 	.word	0x20000b04

08002e6c <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8002e70:	2101      	movs	r1, #1
 8002e72:	4802      	ldr	r0, [pc, #8]	; (8002e7c <MotionFX_manager_start_9X+0x10>)
 8002e74:	f014 ffb8 	bl	8017de8 <MotionFX_enable_9X>
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000b04 	.word	0x20000b04

08002e80 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002e84:	2100      	movs	r1, #0
 8002e86:	4802      	ldr	r0, [pc, #8]	; (8002e90 <MotionFX_manager_stop_9X+0x10>)
 8002e88:	f014 ffae 	bl	8017de8 <MotionFX_enable_9X>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000b04 	.word	0x20000b04

08002e94 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f015 fc18 	bl	80186d4 <MotionFX_GetLibVersion>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f015 f9aa 	bl	8018218 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f015 fbc9 	bl	801865c <MotionFX_MagCal_getParams>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8002eda:	2101      	movs	r1, #1
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f015 f905 	bl	80180ec <MotionFX_MagCal_init>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f015 f8f9 	bl	80180ec <MotionFX_MagCal_init>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002f18:	2300      	movs	r3, #0
 8002f1a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f1e:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <MX_RTC_Init+0xb4>)
 8002f20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f2a:	227f      	movs	r2, #127	; 0x7f
 8002f2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f4e:	f009 f9ab 	bl	800c2a8 <HAL_RTC_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002f58:	f7ff feea 	bl	8002d30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2201      	movs	r2, #1
 8002f74:	4619      	mov	r1, r3
 8002f76:	480f      	ldr	r0, [pc, #60]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f78:	f009 fa11 	bl	800c39e <HAL_RTC_SetTime>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002f82:	f7ff fed5 	bl	8002d30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f86:	2301      	movs	r3, #1
 8002f88:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f96:	463b      	mov	r3, r7
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_RTC_Init+0xb0>)
 8002f9e:	f009 faf7 	bl	800c590 <HAL_RTC_SetDate>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002fa8:	f7ff fec2 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20001a9c 	.word	0x20001a9c
 8002fb8:	40002800 	.word	0x40002800

08002fbc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b0a4      	sub	sp, #144	; 0x90
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	2288      	movs	r2, #136	; 0x88
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f017 fae3 	bl	801a598 <memset>
  if(rtcHandle->Instance==RTC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_RTC_MspInit+0x5c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d118      	bne.n	800300e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f008 fc9e 	bl	800b930 <HAL_RCCEx_PeriphCLKConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ffa:	f7ff fe99 	bl	8002d30 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_RTC_MspInit+0x60>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_RTC_MspInit+0x60>)
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800300e:	bf00      	nop
 8003010:	3790      	adds	r7, #144	; 0x90
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40002800 	.word	0x40002800
 800301c:	40021000 	.word	0x40021000

08003020 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800302c:	2302      	movs	r3, #2
 800302e:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	2bf0      	cmp	r3, #240	; 0xf0
 8003034:	d002      	beq.n	800303c <ByteStuffCopyByte+0x1c>
 8003036:	2bf1      	cmp	r3, #241	; 0xf1
 8003038:	d008      	beq.n	800304c <ByteStuffCopyByte+0x2c>
 800303a:	e00f      	b.n	800305c <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	22f1      	movs	r2, #241	; 0xf1
 8003040:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	22f2      	movs	r2, #242	; 0xf2
 8003048:	701a      	strb	r2, [r3, #0]
      break;
 800304a:	e00d      	b.n	8003068 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	22f1      	movs	r2, #241	; 0xf1
 8003050:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3301      	adds	r3, #1
 8003056:	22f1      	movs	r2, #241	; 0xf1
 8003058:	701a      	strb	r2, [r3, #0]
      break;
 800305a:	e005      	b.n	8003068 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
      break;
 8003066:	bf00      	nop
  }

  return ret;
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e011      	b.n	80030ae <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	18d0      	adds	r0, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	f7ff ffc0 	bl	8003020 <ByteStuffCopyByte>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3301      	adds	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3e8      	bcc.n	800308a <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	22f0      	movs	r2, #240	; 0xf0
 80030c0:	701a      	strb	r2, [r3, #0]
  count++;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
  return count;
 80030c8:	68bb      	ldr	r3, [r7, #8]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	603a      	str	r2, [r7, #0]
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	460b      	mov	r3, r1
 80030e0:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2bf1      	cmp	r3, #241	; 0xf1
 80030e6:	d111      	bne.n	800310c <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2bf1      	cmp	r3, #241	; 0xf1
 80030ec:	d104      	bne.n	80030f8 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	22f1      	movs	r2, #241	; 0xf1
 80030f2:	701a      	strb	r2, [r3, #0]
      return 2;
 80030f4:	2302      	movs	r3, #2
 80030f6:	e00d      	b.n	8003114 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 80030f8:	79bb      	ldrb	r3, [r7, #6]
 80030fa:	2bf2      	cmp	r3, #242	; 0xf2
 80030fc:	d104      	bne.n	8003108 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	22f0      	movs	r2, #240	; 0xf0
 8003102:	701a      	strb	r2, [r3, #0]
      return 2;
 8003104:	2302      	movs	r3, #2
 8003106:	e005      	b.n	8003114 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8003108:	2300      	movs	r3, #0
 800310a:	e003      	b.n	8003114 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	79fa      	ldrb	r2, [r7, #7]
 8003110:	701a      	strb	r2, [r3, #0]
    return 1;
 8003112:	2301      	movs	r3, #1
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	e00a      	b.n	8003148 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	d3ef      	bcc.n	8003132 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4413      	add	r3, r2
 8003158:	3304      	adds	r3, #4
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	e00a      	b.n	800319c <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	4413      	add	r3, r2
 8003194:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3301      	adds	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d3ef      	bcc.n	8003186 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80031e2:	e00d      	b.n	8003200 <Deserialize+0x38>
  {
    app <<= 8;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ee      	bne.n	80031e4 <Deserialize+0x1c>
  }

  return app;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e00f      	b.n	8003246 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4413      	add	r3, r2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3eb      	bcc.n	8003226 <Serialize_s32+0x12>
  }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_MspInit+0x44>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_MspInit+0x44>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6613      	str	r3, [r2, #96]	; 0x60
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_MspInit+0x44>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_MspInit+0x44>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_MspInit+0x44>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_MspInit+0x44>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f005 ff3e 	bl	8009170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <DMA1_Channel6_IRQHandler+0x10>)
 80032fe:	f006 fa8f 	bl	8009820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20001b0c 	.word	0x20001b0c

0800330c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <TIM3_IRQHandler+0x10>)
 8003312:	f009 fbda 	bl	800caca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20001ac0 	.word	0x20001ac0

08003320 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8003324:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003328:	f006 fe56 	bl	8009fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <BSP_I2C1_Init+0x70>)
 800333c:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <BSP_I2C1_Init+0x74>)
 800333e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <BSP_I2C1_Init+0x78>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	4918      	ldr	r1, [pc, #96]	; (80033a8 <BSP_I2C1_Init+0x78>)
 8003348:	600a      	str	r2, [r1, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d122      	bne.n	8003394 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800334e:	4814      	ldr	r0, [pc, #80]	; (80033a0 <BSP_I2C1_Init+0x70>)
 8003350:	f007 f946 	bl	800a5e0 <HAL_I2C_GetState>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11c      	bne.n	8003394 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800335a:	4811      	ldr	r0, [pc, #68]	; (80033a0 <BSP_I2C1_Init+0x70>)
 800335c:	f000 f8ba 	bl	80034d4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003366:	480e      	ldr	r0, [pc, #56]	; (80033a0 <BSP_I2C1_Init+0x70>)
 8003368:	f7ff fa3a 	bl	80027e0 <MX_I2C1_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003372:	f06f 0307 	mvn.w	r3, #7
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	e00c      	b.n	8003394 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800337a:	2100      	movs	r1, #0
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <BSP_I2C1_Init+0x70>)
 800337e:	f007 fbef 	bl	800ab60 <HAL_I2CEx_ConfigAnalogFilter>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003388:	f06f 0307 	mvn.w	r3, #7
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	e001      	b.n	8003394 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003390:	2300      	movs	r3, #0
 8003392:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200019cc 	.word	0x200019cc
 80033a4:	40005400 	.word	0x40005400
 80033a8:	20001484 	.word	0x20001484

080033ac <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <BSP_I2C1_DeInit+0x48>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <BSP_I2C1_DeInit+0x48>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <BSP_I2C1_DeInit+0x48>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <BSP_I2C1_DeInit+0x48>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80033d0:	4809      	ldr	r0, [pc, #36]	; (80033f8 <BSP_I2C1_DeInit+0x4c>)
 80033d2:	f000 f8c5 	bl	8003560 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80033d6:	4808      	ldr	r0, [pc, #32]	; (80033f8 <BSP_I2C1_DeInit+0x4c>)
 80033d8:	f006 fea5 	bl	800a126 <HAL_I2C_DeInit>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80033e2:	f06f 0307 	mvn.w	r3, #7
 80033e6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80033e8:	687b      	ldr	r3, [r7, #4]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20001484 	.word	0x20001484
 80033f8:	200019cc 	.word	0x200019cc

080033fc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af04      	add	r7, sp, #16
 8003402:	60ba      	str	r2, [r7, #8]
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	460b      	mov	r3, r1
 800340c:	81bb      	strh	r3, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003416:	89ba      	ldrh	r2, [r7, #12]
 8003418:	89f9      	ldrh	r1, [r7, #14]
 800341a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341e:	9302      	str	r3, [sp, #8]
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2301      	movs	r3, #1
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <BSP_I2C1_WriteReg+0x60>)
 800342c:	f006 feaa 	bl	800a184 <HAL_I2C_Mem_Write>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003436:	4809      	ldr	r0, [pc, #36]	; (800345c <BSP_I2C1_WriteReg+0x60>)
 8003438:	f007 f8e0 	bl	800a5fc <HAL_I2C_GetError>
 800343c:	4603      	mov	r3, r0
 800343e:	2b04      	cmp	r3, #4
 8003440:	d103      	bne.n	800344a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003442:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e002      	b.n	8003450 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800344a:	f06f 0303 	mvn.w	r3, #3
 800344e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003450:	697b      	ldr	r3, [r7, #20]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200019cc 	.word	0x200019cc

08003460 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af04      	add	r7, sp, #16
 8003466:	60ba      	str	r2, [r7, #8]
 8003468:	461a      	mov	r2, r3
 800346a:	4603      	mov	r3, r0
 800346c:	81fb      	strh	r3, [r7, #14]
 800346e:	460b      	mov	r3, r1
 8003470:	81bb      	strh	r3, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800347a:	89ba      	ldrh	r2, [r7, #12]
 800347c:	89f9      	ldrh	r1, [r7, #14]
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	480c      	ldr	r0, [pc, #48]	; (80034c0 <BSP_I2C1_ReadReg+0x60>)
 8003490:	f006 ff8c 	bl	800a3ac <HAL_I2C_Mem_Read>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800349a:	4809      	ldr	r0, [pc, #36]	; (80034c0 <BSP_I2C1_ReadReg+0x60>)
 800349c:	f007 f8ae 	bl	800a5fc <HAL_I2C_GetError>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d103      	bne.n	80034ae <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80034a6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e002      	b.n	80034b4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80034ae:	f06f 0303 	mvn.w	r3, #3
 80034b2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80034b4:	697b      	ldr	r3, [r7, #20]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200019cc 	.word	0x200019cc

080034c4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80034c8:	f005 fe66 	bl	8009198 <HAL_GetTick>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <I2C1_MspInit+0x84>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <I2C1_MspInit+0x84>)
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <I2C1_MspInit+0x84>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80034f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034fa:	2312      	movs	r3, #18
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003506:	2304      	movs	r3, #4
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4812      	ldr	r0, [pc, #72]	; (800355c <I2C1_MspInit+0x88>)
 8003512:	f006 fa93 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003528:	2304      	movs	r3, #4
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	480a      	ldr	r0, [pc, #40]	; (800355c <I2C1_MspInit+0x88>)
 8003534:	f006 fa82 	bl	8009a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <I2C1_MspInit+0x84>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	4a06      	ldr	r2, [pc, #24]	; (8003558 <I2C1_MspInit+0x84>)
 800353e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003542:	6593      	str	r3, [r2, #88]	; 0x58
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <I2C1_MspInit+0x84>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	48000400 	.word	0x48000400

08003560 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <I2C1_MspDeInit+0x30>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <I2C1_MspDeInit+0x30>)
 800356e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003572:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <I2C1_MspDeInit+0x34>)
 800357a:	f006 fc09 	bl	8009d90 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800357e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003582:	4804      	ldr	r0, [pc, #16]	; (8003594 <I2C1_MspDeInit+0x34>)
 8003584:	f006 fc04 	bl	8009d90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	48000400 	.word	0x48000400

08003598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <_sbrk+0x5c>)
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <_sbrk+0x60>)
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <_sbrk+0x64>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <_sbrk+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c8:	f016 ffae 	bl	801a528 <__errno>
 80035cc:	4603      	mov	r3, r0
 80035ce:	220c      	movs	r2, #12
 80035d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e009      	b.n	80035ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <_sbrk+0x64>)
 80035e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20018000 	.word	0x20018000
 80035f8:	00000400 	.word	0x00000400
 80035fc:	20001488 	.word	0x20001488
 8003600:	20002028 	.word	0x20002028

08003604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <SystemInit+0x20>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <SystemInit+0x20>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800362e:	f107 0310 	add.w	r3, r7, #16
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <MX_TIM3_Init+0x94>)
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <MX_TIM3_Init+0x98>)
 800364a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <MX_TIM3_Init+0x94>)
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <MX_TIM3_Init+0x94>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <MX_TIM3_Init+0x94>)
 800365a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <MX_TIM3_Init+0x94>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <MX_TIM3_Init+0x94>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800366c:	4813      	ldr	r0, [pc, #76]	; (80036bc <MX_TIM3_Init+0x94>)
 800366e:	f009 f935 	bl	800c8dc <HAL_TIM_Base_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003678:	f7ff fb5a 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	4619      	mov	r1, r3
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <MX_TIM3_Init+0x94>)
 800368a:	f009 fb3d 	bl	800cd08 <HAL_TIM_ConfigClockSource>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003694:	f7ff fb4c 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <MX_TIM3_Init+0x94>)
 80036a6:	f009 fd55 	bl	800d154 <HAL_TIMEx_MasterConfigSynchronization>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80036b0:	f7ff fb3e 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036b4:	bf00      	nop
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20001ac0 	.word	0x20001ac0
 80036c0:	40000400 	.word	0x40000400

080036c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_TIM_Base_MspInit+0x44>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d113      	bne.n	80036fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_TIM_Base_MspInit+0x48>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <HAL_TIM_Base_MspInit+0x48>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	6593      	str	r3, [r2, #88]	; 0x58
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_TIM_Base_MspInit+0x48>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201d      	movs	r0, #29
 80036f4:	f005 fe5b 	bl	80093ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036f8:	201d      	movs	r0, #29
 80036fa:	f005 fe74 	bl	80093e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40000400 	.word	0x40000400
 800370c:	40021000 	.word	0x40021000

08003710 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <MX_USART2_UART_Init+0x5c>)
 8003718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <MX_USART2_UART_Init+0x58>)
 800371c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <MX_USART2_UART_Init+0x58>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <MX_USART2_UART_Init+0x58>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003748:	2200      	movs	r2, #0
 800374a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_USART2_UART_Init+0x58>)
 800374e:	2200      	movs	r2, #0
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <MX_USART2_UART_Init+0x58>)
 8003754:	f009 fda4 	bl	800d2a0 <HAL_UART_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800375e:	f7ff fae7 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20001a18 	.word	0x20001a18
 800376c:	40004400 	.word	0x40004400

08003770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0ac      	sub	sp, #176	; 0xb0
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2288      	movs	r2, #136	; 0x88
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f016 ff01 	bl	801a598 <memset>
  if(uartHandle->Instance==USART2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a36      	ldr	r2, [pc, #216]	; (8003874 <HAL_UART_MspInit+0x104>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d164      	bne.n	800386a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037a0:	2302      	movs	r3, #2
 80037a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4618      	mov	r0, r3
 80037ae:	f008 f8bf 	bl	800b930 <HAL_RCCEx_PeriphCLKConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037b8:	f7ff faba 	bl	8002d30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037bc:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c6:	6593      	str	r3, [r2, #88]	; 0x58
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	4a27      	ldr	r2, [pc, #156]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_UART_MspInit+0x108>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80037ec:	230c      	movs	r3, #12
 80037ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003804:	2307      	movs	r3, #7
 8003806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800380e:	4619      	mov	r1, r3
 8003810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003814:	f006 f912 	bl	8009a3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_UART_MspInit+0x10c>)
 800381a:	4a19      	ldr	r2, [pc, #100]	; (8003880 <HAL_UART_MspInit+0x110>)
 800381c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003820:	2202      	movs	r2, #2
 8003822:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003824:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_UART_MspInit+0x10c>)
 800382c:	2200      	movs	r2, #0
 800382e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_UART_MspInit+0x10c>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003844:	2200      	movs	r2, #0
 8003846:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_UART_MspInit+0x10c>)
 800384a:	2200      	movs	r2, #0
 800384c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800384e:	480b      	ldr	r0, [pc, #44]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003850:	f005 fece 	bl	80095f0 <HAL_DMA_Init>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800385a:	f7ff fa69 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a06      	ldr	r2, [pc, #24]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003862:	671a      	str	r2, [r3, #112]	; 0x70
 8003864:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_UART_MspInit+0x10c>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800386a:	bf00      	nop
 800386c:	37b0      	adds	r7, #176	; 0xb0
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40004400 	.word	0x40004400
 8003878:	40021000 	.word	0x40021000
 800387c:	20001b0c 	.word	0x20001b0c
 8003880:	4002006c 	.word	0x4002006c

08003884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003888:	f7ff febc 	bl	8003604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800388e:	490d      	ldr	r1, [pc, #52]	; (80038c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <LoopForever+0xe>)
  movs r3, #0
 8003892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003894:	e002      	b.n	800389c <LoopCopyDataInit>

08003896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389a:	3304      	adds	r3, #4

0800389c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800389c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a0:	d3f9      	bcc.n	8003896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80038a4:	4c0a      	ldr	r4, [pc, #40]	; (80038d0 <LoopForever+0x16>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a8:	e001      	b.n	80038ae <LoopFillZerobss>

080038aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ac:	3204      	adds	r2, #4

080038ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b0:	d3fb      	bcc.n	80038aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038b2:	f016 fe3f 	bl	801a534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038b6:	f7ff f98e 	bl	8002bd6 <main>

080038ba <LoopForever>:

LoopForever:
    b LoopForever
 80038ba:	e7fe      	b.n	80038ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80038c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80038c8:	0801b3fc 	.word	0x0801b3fc
  ldr r2, =_sbss
 80038cc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80038d0:	20002028 	.word	0x20002028

080038d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038d4:	e7fe      	b.n	80038d4 <ADC1_2_IRQHandler>
	...

080038d8 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80038e8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e030      	b.n	8003952 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	7b1a      	ldrb	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <HTS221_RegisterBusIO+0x84>)
 800392c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <HTS221_RegisterBusIO+0x88>)
 8003932:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4798      	blx	r3
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	e002      	b.n	8003952 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08003f8f 	.word	0x08003f8f
 8003960:	08003ff1 	.word	0x08003ff1

08003964 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 faa4 	bl	8003ec4 <HTS221_Initialize>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e004      	b.n	8003992 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d111      	bne.n	80039d0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f878 	bl	8003aa2 <HTS221_HUM_Disable>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	e00d      	b.n	80039da <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f95f 	bl	8003c82 <HTS221_TEMP_Disable>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	e004      	b.n	80039da <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	331c      	adds	r3, #28
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fc28 	bl	8004248 <hts221_device_id_get>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	e000      	b.n	8003a06 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <HTS221_GetCapabilities+0x44>)
 8003a36:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4a06      	ldr	r2, [pc, #24]	; (8003a54 <HTS221_GetCapabilities+0x44>)
 8003a3c:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	41480000 	.word	0x41480000

08003a58 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e015      	b.n	8003a9a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	331c      	adds	r3, #28
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fbf3 	bl	800426a <hts221_power_on_set>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	e004      	b.n	8003a9a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e015      	b.n	8003ae4 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fbce 	bl	800426a <hts221_power_on_set>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	e004      	b.n	8003ae4 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f96f 	bl	8003ddc <HTS221_GetOutputDataRate>
 8003afe:	4603      	mov	r3, r0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003b14:	ed97 0a00 	vldr	s0, [r7]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f9a3 	bl	8003e64 <HTS221_SetOutputDataRate>
 8003b1e:	4603      	mov	r3, r0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	331c      	adds	r3, #28
 8003b36:	f107 020c 	add.w	r2, r7, #12
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fc58 	bl	80043f2 <hts221_hum_adc_point_0_get>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	e06b      	b.n	8003c26 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f103 021c 	add.w	r2, r3, #28
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f000 fbaa 	bl	80042b6 <hts221_hum_rh_point_0_get>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	e05b      	b.n	8003c26 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f103 021c 	add.w	r2, r3, #28
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	3308      	adds	r3, #8
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fc5c 	bl	800443a <hts221_hum_adc_point_1_get>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e04b      	b.n	8003c26 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f103 021c 	add.w	r2, r3, #28
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	330c      	adds	r3, #12
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 fba8 	bl	80042f2 <hts221_hum_rh_point_1_get>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	e03b      	b.n	8003c26 <HTS221_HUM_GetHumidity+0xfe>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	331c      	adds	r3, #28
 8003bb6:	f107 021c 	add.w	r2, r7, #28
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fafd 	bl	80041bc <hts221_humidity_raw_get>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	e02b      	b.n	8003c26 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8003bce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f99a 	bl	8003f1c <Linear_Interpolation>
 8003be8:	eef0 7a40 	vmov.f32	s15, s0
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d503      	bpl.n	8003c0a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003c30 <HTS221_HUM_GetHumidity+0x108>
 8003c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	dd02      	ble.n	8003c24 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HTS221_HUM_GetHumidity+0x10c>)
 8003c22:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	42c80000 	.word	0x42c80000
 8003c34:	42c80000 	.word	0x42c80000

08003c38 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e015      	b.n	8003c7a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fb03 	bl	800426a <hts221_power_on_set>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e004      	b.n	8003c7a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e015      	b.n	8003cc4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	331c      	adds	r3, #28
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fade 	bl	800426a <hts221_power_on_set>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e004      	b.n	8003cc4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f87f 	bl	8003ddc <HTS221_GetOutputDataRate>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8003cf4:	ed97 0a00 	vldr	s0, [r7]
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8b3 	bl	8003e64 <HTS221_SetOutputDataRate>
 8003cfe:	4603      	mov	r3, r0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	331c      	adds	r3, #28
 8003d16:	f107 020c 	add.w	r2, r7, #12
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fbb0 	bl	8004482 <hts221_temp_adc_point_0_get>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e052      	b.n	8003dd4 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f103 021c 	add.w	r2, r3, #28
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 faf6 	bl	800432e <hts221_temp_deg_point_0_get>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	e042      	b.n	8003dd4 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f103 021c 	add.w	r2, r3, #28
 8003d54:	f107 030c 	add.w	r3, r7, #12
 8003d58:	3308      	adds	r3, #8
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f000 fbb4 	bl	80044ca <hts221_temp_adc_point_1_get>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	e032      	b.n	8003dd4 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f103 021c 	add.w	r2, r3, #28
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	330c      	adds	r3, #12
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 fb07 	bl	8004390 <hts221_temp_deg_point_1_get>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e022      	b.n	8003dd4 <HTS221_TEMP_GetTemperature+0xcc>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	331c      	adds	r3, #28
 8003d96:	f107 021c 	add.w	r2, r7, #28
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fa30 	bl	8004202 <hts221_temperature_raw_get>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	e012      	b.n	8003dd4 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003dae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f8aa 	bl	8003f1c <Linear_Interpolation>
 8003dc8:	eef0 7a40 	vmov.f32	s15, s0
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	331c      	adds	r3, #28
 8003dee:	f107 020b 	add.w	r2, r7, #11
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f983 	bl	8004100 <hts221_data_rate_get>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	e025      	b.n	8003e52 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d81d      	bhi.n	8003e48 <HTS221_GetOutputDataRate+0x6c>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HTS221_GetOutputDataRate+0x38>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2f 	.word	0x08003e2f
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	08003e41 	.word	0x08003e41
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
      break;
 8003e2c:	e010      	b.n	8003e50 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e34:	601a      	str	r2, [r3, #0]
      break;
 8003e36:	e00b      	b.n	8003e50 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HTS221_GetOutputDataRate+0x80>)
 8003e3c:	601a      	str	r2, [r3, #0]
      break;
 8003e3e:	e007      	b.n	8003e50 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <HTS221_GetOutputDataRate+0x84>)
 8003e44:	601a      	str	r2, [r3, #0]
      break;
 8003e46:	e003      	b.n	8003e50 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	60fb      	str	r3, [r7, #12]
      break;
 8003e4e:	bf00      	nop
  }

  return ret;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40e00000 	.word	0x40e00000
 8003e60:	41480000 	.word	0x41480000

08003e64 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003e70:	edd7 7a00 	vldr	s15, [r7]
 8003e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e80:	d801      	bhi.n	8003e86 <HTS221_SetOutputDataRate+0x22>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e00b      	b.n	8003e9e <HTS221_SetOutputDataRate+0x3a>
 8003e86:	edd7 7a00 	vldr	s15, [r7]
 8003e8a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	d801      	bhi.n	8003e9c <HTS221_SetOutputDataRate+0x38>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e000      	b.n	8003e9e <HTS221_SetOutputDataRate+0x3a>
 8003e9c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003e9e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f902 	bl	80040b2 <hts221_data_rate_set>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e000      	b.n	8003ebc <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	331c      	adds	r3, #28
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f9c9 	bl	800426a <hts221_power_on_set>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e017      	b.n	8003f14 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	331c      	adds	r3, #28
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f940 	bl	8004170 <hts221_block_data_update_set>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e00b      	b.n	8003f14 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003efc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ffaf 	bl	8003e64 <HTS221_SetOutputDataRate>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	e000      	b.n	8003f14 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f38:	edd7 7a00 	vldr	s15, [r7]
 8003f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	ed93 6a00 	vldr	s12, [r3]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f7c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b087      	sub	sp, #28
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	72fb      	strb	r3, [r7, #11]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10e      	bne.n	8003fcc <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	695c      	ldr	r4, [r3, #20]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	7b1b      	ldrb	r3, [r3, #12]
 8003fb6:	b298      	uxth	r0, r3
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	893b      	ldrh	r3, [r7, #8]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	47a0      	blx	r4
 8003fc8:	4603      	mov	r3, r0
 8003fca:	e00d      	b.n	8003fe8 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	695c      	ldr	r4, [r3, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	7b1b      	ldrb	r3, [r3, #12]
 8003fd4:	b298      	uxth	r0, r3
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	b299      	uxth	r1, r3
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	47a0      	blx	r4
 8003fe6:	4603      	mov	r3, r0
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	72fb      	strb	r3, [r7, #11]
 8004000:	4613      	mov	r3, r2
 8004002:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10e      	bne.n	800402e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	691c      	ldr	r4, [r3, #16]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	7b1b      	ldrb	r3, [r3, #12]
 8004018:	b298      	uxth	r0, r3
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004020:	b2db      	uxtb	r3, r3
 8004022:	b299      	uxth	r1, r3
 8004024:	893b      	ldrh	r3, [r7, #8]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	47a0      	blx	r4
 800402a:	4603      	mov	r3, r0
 800402c:	e00d      	b.n	800404a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	691c      	ldr	r4, [r3, #16]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	7b1b      	ldrb	r3, [r3, #12]
 8004036:	b298      	uxth	r0, r3
 8004038:	7afb      	ldrb	r3, [r7, #11]
 800403a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403e:	b2db      	uxtb	r3, r3
 8004040:	b299      	uxth	r1, r3
 8004042:	893b      	ldrh	r3, [r7, #8]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	47a0      	blx	r4
 8004048:	4603      	mov	r3, r0
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	461a      	mov	r2, r3
 800405e:	460b      	mov	r3, r1
 8004060:	72fb      	strb	r3, [r7, #11]
 8004062:	4613      	mov	r3, r2
 8004064:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685c      	ldr	r4, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6898      	ldr	r0, [r3, #8]
 800406e:	893b      	ldrh	r3, [r7, #8]
 8004070:	7af9      	ldrb	r1, [r7, #11]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	47a0      	blx	r4
 8004076:	6178      	str	r0, [r7, #20]
  return ret;
 8004078:	697b      	ldr	r3, [r7, #20]
}
 800407a:	4618      	mov	r0, r3
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd90      	pop	{r4, r7, pc}

08004082 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004082:	b590      	push	{r4, r7, lr}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	461a      	mov	r2, r3
 800408e:	460b      	mov	r3, r1
 8004090:	72fb      	strb	r3, [r7, #11]
 8004092:	4613      	mov	r3, r2
 8004094:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681c      	ldr	r4, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6898      	ldr	r0, [r3, #8]
 800409e:	893b      	ldrh	r3, [r7, #8]
 80040a0:	7af9      	ldrb	r1, [r7, #11]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	47a0      	blx	r4
 80040a6:	6178      	str	r0, [r7, #20]
  return ret;
 80040a8:	697b      	ldr	r3, [r7, #20]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd90      	pop	{r4, r7, pc}

080040b2 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80040be:	f107 0208 	add.w	r2, r7, #8
 80040c2:	2301      	movs	r3, #1
 80040c4:	2120      	movs	r1, #32
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffc3 	bl	8004052 <hts221_read_reg>
 80040cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	7a3b      	ldrb	r3, [r7, #8]
 80040de:	f362 0301 	bfi	r3, r2, #0, #2
 80040e2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80040e4:	f107 0208 	add.w	r2, r7, #8
 80040e8:	2301      	movs	r3, #1
 80040ea:	2120      	movs	r1, #32
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ffc8 	bl	8004082 <hts221_write_reg>
 80040f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040f4:	68fb      	ldr	r3, [r7, #12]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800410a:	f107 0208 	add.w	r2, r7, #8
 800410e:	2301      	movs	r3, #1
 8004110:	2120      	movs	r1, #32
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ff9d 	bl	8004052 <hts221_read_reg>
 8004118:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800411a:	7a3b      	ldrb	r3, [r7, #8]
 800411c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b03      	cmp	r3, #3
 8004124:	d81a      	bhi.n	800415c <hts221_data_rate_get+0x5c>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <hts221_data_rate_get+0x2c>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004145 	.word	0x08004145
 8004134:	0800414d 	.word	0x0800414d
 8004138:	08004155 	.word	0x08004155
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e00f      	b.n	8004164 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e00b      	b.n	8004164 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
      break;
 8004152:	e007      	b.n	8004164 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2203      	movs	r2, #3
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e003      	b.n	8004164 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	bf00      	nop
  }

  return ret;
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop

08004170 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800417c:	f107 0208 	add.w	r2, r7, #8
 8004180:	2301      	movs	r3, #1
 8004182:	2120      	movs	r1, #32
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff64 	bl	8004052 <hts221_read_reg>
 800418a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	b2da      	uxtb	r2, r3
 800419a:	7a3b      	ldrb	r3, [r7, #8]
 800419c:	f362 0382 	bfi	r3, r2, #2, #1
 80041a0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80041a2:	f107 0208 	add.w	r2, r7, #8
 80041a6:	2301      	movs	r3, #1
 80041a8:	2120      	movs	r1, #32
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff69 	bl	8004082 <hts221_write_reg>
 80041b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80041c6:	f107 0208 	add.w	r2, r7, #8
 80041ca:	2302      	movs	r3, #2
 80041cc:	2128      	movs	r1, #40	; 0x28
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ff3f 	bl	8004052 <hts221_read_reg>
 80041d4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80041d6:	7a7b      	ldrb	r3, [r7, #9]
 80041d8:	b21a      	sxth	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	7a3b      	ldrb	r3, [r7, #8]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	801a      	strh	r2, [r3, #0]
  return ret;
 80041f8:	68fb      	ldr	r3, [r7, #12]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	2302      	movs	r3, #2
 8004212:	212a      	movs	r1, #42	; 0x2a
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff1c 	bl	8004052 <hts221_read_reg>
 800421a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800421c:	7a7b      	ldrb	r3, [r7, #9]
 800421e:	b21a      	sxth	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800422a:	b29b      	uxth	r3, r3
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	b29a      	uxth	r2, r3
 8004230:	7a3b      	ldrb	r3, [r7, #8]
 8004232:	b29b      	uxth	r3, r3
 8004234:	4413      	add	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	b21a      	sxth	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	801a      	strh	r2, [r3, #0]
  return ret;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8004252:	2301      	movs	r3, #1
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	210f      	movs	r1, #15
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fefa 	bl	8004052 <hts221_read_reg>
 800425e:	60f8      	str	r0, [r7, #12]
  return ret;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004276:	f107 0208 	add.w	r2, r7, #8
 800427a:	2301      	movs	r3, #1
 800427c:	2120      	movs	r1, #32
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fee7 	bl	8004052 <hts221_read_reg>
 8004284:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <hts221_power_on_set+0x42>
    reg.pd = val;
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	7a3b      	ldrb	r3, [r7, #8]
 8004296:	f362 13c7 	bfi	r3, r2, #7, #1
 800429a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800429c:	f107 0208 	add.w	r2, r7, #8
 80042a0:	2301      	movs	r3, #1
 80042a2:	2120      	movs	r1, #32
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff feec 	bl	8004082 <hts221_write_reg>
 80042aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80042c0:	f107 020b 	add.w	r2, r7, #11
 80042c4:	2301      	movs	r3, #1
 80042c6:	2130      	movs	r1, #48	; 0x30
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fec2 	bl	8004052 <hts221_read_reg>
 80042ce:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80042de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80042fc:	f107 020b 	add.w	r2, r7, #11
 8004300:	2301      	movs	r3, #1
 8004302:	2131      	movs	r1, #49	; 0x31
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fea4 	bl	8004052 <hts221_read_reg>
 800430a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004316:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800431a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004338:	f107 020f 	add.w	r2, r7, #15
 800433c:	2301      	movs	r3, #1
 800433e:	2132      	movs	r1, #50	; 0x32
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fe86 	bl	8004052 <hts221_read_reg>
 8004346:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11b      	bne.n	8004386 <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800434e:	f107 0210 	add.w	r2, r7, #16
 8004352:	2301      	movs	r3, #1
 8004354:	2135      	movs	r1, #53	; 0x35
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe7b 	bl	8004052 <hts221_read_reg>
 800435c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800435e:	7c3b      	ldrb	r3, [r7, #16]
 8004360:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	4413      	add	r3, r2
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004378:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800437c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800439a:	f107 020f 	add.w	r2, r7, #15
 800439e:	2301      	movs	r3, #1
 80043a0:	2133      	movs	r1, #51	; 0x33
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fe55 	bl	8004052 <hts221_read_reg>
 80043a8:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11b      	bne.n	80043e8 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80043b0:	f107 0210 	add.w	r2, r7, #16
 80043b4:	2301      	movs	r3, #1
 80043b6:	2135      	movs	r1, #53	; 0x35
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fe4a 	bl	8004052 <hts221_read_reg>
 80043be:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80043c0:	7c3b      	ldrb	r3, [r7, #16]
 80043c2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	4413      	add	r3, r2
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043da:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80043de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80043e8:	697b      	ldr	r3, [r7, #20]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80043fc:	f107 0208 	add.w	r2, r7, #8
 8004400:	2302      	movs	r3, #2
 8004402:	2136      	movs	r1, #54	; 0x36
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fe24 	bl	8004052 <hts221_read_reg>
 800440a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800440c:	7a7b      	ldrb	r3, [r7, #9]
 800440e:	b29b      	uxth	r3, r3
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	b29a      	uxth	r2, r3
 8004414:	7a3b      	ldrb	r3, [r7, #8]
 8004416:	b29b      	uxth	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800441e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004430:	68fb      	ldr	r3, [r7, #12]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004444:	f107 0208 	add.w	r2, r7, #8
 8004448:	2302      	movs	r3, #2
 800444a:	213a      	movs	r1, #58	; 0x3a
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fe00 	bl	8004052 <hts221_read_reg>
 8004452:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004454:	7a7b      	ldrb	r3, [r7, #9]
 8004456:	b29b      	uxth	r3, r3
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	b29a      	uxth	r2, r3
 800445c:	7a3b      	ldrb	r3, [r7, #8]
 800445e:	b29b      	uxth	r3, r3
 8004460:	4413      	add	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004466:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800448c:	f107 0208 	add.w	r2, r7, #8
 8004490:	2302      	movs	r3, #2
 8004492:	213c      	movs	r1, #60	; 0x3c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fddc 	bl	8004052 <hts221_read_reg>
 800449a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800449c:	7a7b      	ldrb	r3, [r7, #9]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	7a3b      	ldrb	r3, [r7, #8]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80044ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80044c0:	68fb      	ldr	r3, [r7, #12]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80044d4:	f107 0208 	add.w	r2, r7, #8
 80044d8:	2302      	movs	r3, #2
 80044da:	213e      	movs	r1, #62	; 0x3e
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fdb8 	bl	8004052 <hts221_read_reg>
 80044e2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80044e4:	7a7b      	ldrb	r3, [r7, #9]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	7a3b      	ldrb	r3, [r7, #8]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80044f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e04d      	b.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	7b1a      	ldrb	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <LPS22HB_RegisterBusIO+0xc4>)
 800456c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <LPS22HB_RegisterBusIO+0xc8>)
 8004572:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e020      	b.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4798      	blx	r3
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e016      	b.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d112      	bne.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80045b0:	2301      	movs	r3, #1
 80045b2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	461a      	mov	r2, r3
 80045b8:	2110      	movs	r1, #16
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9df 	bl	800497e <LPS22HB_Write_Reg>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	08004c3f 	.word	0x08004c3f
 80045dc:	08004cc5 	.word	0x08004cc5

080045e0 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 faca 	bl	8004b8c <LPS22HB_Initialize>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	e004      	b.n	800460e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004624:	2b01      	cmp	r3, #1
 8004626:	d111      	bne.n	800464c <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f877 	bl	800471c <LPS22HB_PRESS_Disable>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	e00d      	b.n	8004656 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f918 	bl	8004870 <LPS22HB_TEMP_Disable>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e004      	b.n	8004656 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	331c      	adds	r3, #28
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fcd0 	bl	8005014 <lps22hb_device_id_get>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e000      	b.n	8004682 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <LPS22HB_GetCapabilities+0x44>)
 80046ba:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <LPS22HB_GetCapabilities+0x44>)
 80046c0:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	42960000 	.word	0x42960000

080046d4 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e014      	b.n	8004714 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f103 021c 	add.w	r2, r3, #28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 fbd5 	bl	8004ea8 <lps22hb_data_rate_set>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	e004      	b.n	8004714 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e024      	b.n	800477c <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11a      	bne.n	8004772 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f103 021c 	add.w	r2, r3, #28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	332b      	adds	r3, #43	; 0x2b
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fbd3 	bl	8004ef4 <lps22hb_data_rate_get>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	e010      	b.n	800477c <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	331c      	adds	r3, #28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fba1 	bl	8004ea8 <lps22hb_data_rate_set>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	e004      	b.n	800477c <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f90f 	bl	80049b4 <LPS22HB_GetOutputDataRate>
 8004796:	4603      	mov	r3, r0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d106      	bne.n	80047c4 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047b6:	ed97 0a00 	vldr	s0, [r7]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f94e 	bl	8004a5c <LPS22HB_SetOutputDataRate_When_Enabled>
 80047c0:	4603      	mov	r3, r0
 80047c2:	e005      	b.n	80047d0 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80047c4:	ed97 0a00 	vldr	s0, [r7]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f99f 	bl	8004b0c <LPS22HB_SetOutputDataRate_When_Disabled>
 80047ce:	4603      	mov	r3, r0
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	2204      	movs	r2, #4
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f015 fed4 	bl	801a598 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	331c      	adds	r3, #28
 80047f4:	f107 020c 	add.w	r2, r7, #12
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fbbe 	bl	8004f7c <lps22hb_pressure_raw_get>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e009      	b.n	8004820 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 facc 	bl	8004dac <lps22hb_from_lsb_to_hpa>
 8004814:	eef0 7a40 	vmov.f32	s15, s0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e014      	b.n	8004868 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f103 021c 	add.w	r2, r3, #28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fb2b 	bl	8004ea8 <lps22hb_data_rate_set>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004858:	f04f 33ff 	mov.w	r3, #4294967295
 800485c:	e004      	b.n	8004868 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e024      	b.n	80048d0 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11a      	bne.n	80048c6 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 021c 	add.w	r2, r3, #28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	332b      	adds	r3, #43	; 0x2b
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fb29 	bl	8004ef4 <lps22hb_data_rate_get>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	e010      	b.n	80048d0 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	331c      	adds	r3, #28
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 faf7 	bl	8004ea8 <lps22hb_data_rate_set>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
 80048c4:	e004      	b.n	80048d0 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f865 	bl	80049b4 <LPS22HB_GetOutputDataRate>
 80048ea:	4603      	mov	r3, r0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004906:	2b01      	cmp	r3, #1
 8004908:	d106      	bne.n	8004918 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800490a:	ed97 0a00 	vldr	s0, [r7]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8a4 	bl	8004a5c <LPS22HB_SetOutputDataRate_When_Enabled>
 8004914:	4603      	mov	r3, r0
 8004916:	e005      	b.n	8004924 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004918:	ed97 0a00 	vldr	s0, [r7]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8f5 	bl	8004b0c <LPS22HB_SetOutputDataRate_When_Disabled>
 8004922:	4603      	mov	r3, r0
  }
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	2202      	movs	r2, #2
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f015 fe2a 	bl	801a598 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	331c      	adds	r3, #28
 8004948:	f107 020c 	add.w	r2, r7, #12
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fb3d 	bl	8004fce <lps22hb_temperature_raw_get>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e00a      	b.n	8004976 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8004960:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fa39 	bl	8004ddc <lps22hb_from_lsb_to_degc>
 800496a:	eef0 7a40 	vmov.f32	s15, s0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
 800498a:	4613      	mov	r3, r2
 800498c:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f103 001c 	add.w	r0, r3, #28
 8004994:	1cba      	adds	r2, r7, #2
 8004996:	78f9      	ldrb	r1, [r7, #3]
 8004998:	2301      	movs	r3, #1
 800499a:	f000 f9ee 	bl	8004d7a <lps22hb_write_reg>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	e000      	b.n	80049ac <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	331c      	adds	r3, #28
 80049c6:	f107 020b 	add.w	r2, r7, #11
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fa91 	bl	8004ef4 <lps22hb_data_rate_get>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e031      	b.n	8004a42 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d829      	bhi.n	8004a38 <LPS22HB_GetOutputDataRate+0x84>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <LPS22HB_GetOutputDataRate+0x38>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a0f 	.word	0x08004a0f
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a31 	.word	0x08004a31
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
      break;
 8004a0c:	e018      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a14:	601a      	str	r2, [r3, #0]
      break;
 8004a16:	e013      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <LPS22HB_GetOutputDataRate+0x98>)
 8004a1c:	601a      	str	r2, [r3, #0]
      break;
 8004a1e:	e00f      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4a0b      	ldr	r2, [pc, #44]	; (8004a50 <LPS22HB_GetOutputDataRate+0x9c>)
 8004a24:	601a      	str	r2, [r3, #0]
      break;
 8004a26:	e00b      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <LPS22HB_GetOutputDataRate+0xa0>)
 8004a2c:	601a      	str	r2, [r3, #0]
      break;
 8004a2e:	e007      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <LPS22HB_GetOutputDataRate+0xa4>)
 8004a34:	601a      	str	r2, [r3, #0]
      break;
 8004a36:	e003      	b.n	8004a40 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	60fb      	str	r3, [r7, #12]
      break;
 8004a3e:	bf00      	nop
  }

  return ret;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	41200000 	.word	0x41200000
 8004a50:	41c80000 	.word	0x41c80000
 8004a54:	42480000 	.word	0x42480000
 8004a58:	42960000 	.word	0x42960000

08004a5c <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d801      	bhi.n	8004a7e <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e021      	b.n	8004ac2 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004a7e:	edd7 7a00 	vldr	s15, [r7]
 8004a82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d801      	bhi.n	8004a94 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e016      	b.n	8004ac2 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004a94:	edd7 7a00 	vldr	s15, [r7]
 8004a98:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d801      	bhi.n	8004aaa <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00b      	b.n	8004ac2 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004aaa:	edd7 7a00 	vldr	s15, [r7]
 8004aae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004b08 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8004ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	d801      	bhi.n	8004ac0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8004abc:	2304      	movs	r3, #4
 8004abe:	e000      	b.n	8004ac2 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8004ac0:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004ac2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	331c      	adds	r3, #28
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f9eb 	bl	8004ea8 <lps22hb_data_rate_set>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e00f      	b.n	8004afe <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f103 021c 	add.w	r2, r3, #28
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	332b      	adds	r3, #43	; 0x2b
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fa02 	bl	8004ef4 <lps22hb_data_rate_get>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e000      	b.n	8004afe <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	42480000 	.word	0x42480000

08004b0c <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8004b18:	edd7 7a00 	vldr	s15, [r7]
 8004b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	d801      	bhi.n	8004b2e <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e021      	b.n	8004b72 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004b2e:	edd7 7a00 	vldr	s15, [r7]
 8004b32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3e:	d801      	bhi.n	8004b44 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e016      	b.n	8004b72 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004b44:	edd7 7a00 	vldr	s15, [r7]
 8004b48:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	d801      	bhi.n	8004b5a <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8004b56:	2303      	movs	r3, #3
 8004b58:	e00b      	b.n	8004b72 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004b5a:	edd7 7a00 	vldr	s15, [r7]
 8004b5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004b88 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8004b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6a:	d801      	bhi.n	8004b70 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e000      	b.n	8004b72 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8004b70:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	42480000 	.word	0x42480000

08004b8c <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	331c      	adds	r3, #28
 8004b98:	2101      	movs	r1, #1
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fa4b 	bl	8005036 <lps22hb_low_power_set>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8004baa:	e044      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	331c      	adds	r3, #28
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f978 	bl	8004ea8 <lps22hb_data_rate_set>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	e038      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	331c      	adds	r3, #28
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f946 	bl	8004e5c <lps22hb_low_pass_filter_mode_set>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	e02c      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	331c      	adds	r3, #28
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f914 	bl	8004e10 <lps22hb_block_data_update_set>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	e020      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	331c      	adds	r3, #28
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa3d 	bl	8005082 <lps22hb_auto_add_inc_set>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c12:	e010      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	331c      	adds	r3, #28
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fa31 	bl	8005082 <lps22hb_auto_add_inc_set>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e004      	b.n	8004c36 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c3e:	b590      	push	{r4, r7, lr}
 8004c40:	b089      	sub	sp, #36	; 0x24
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	72fb      	strb	r3, [r7, #11]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d121      	bne.n	8004ca6 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	83fb      	strh	r3, [r7, #30]
 8004c66:	e018      	b.n	8004c9a <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	695c      	ldr	r4, [r3, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	7b1b      	ldrb	r3, [r3, #12]
 8004c70:	b298      	uxth	r0, r3
 8004c72:	7afb      	ldrb	r3, [r7, #11]
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	8bfb      	ldrh	r3, [r7, #30]
 8004c78:	4413      	add	r3, r2
 8004c7a:	b299      	uxth	r1, r3
 8004c7c:	8bfb      	ldrh	r3, [r7, #30]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	441a      	add	r2, r3
 8004c82:	2301      	movs	r3, #1
 8004c84:	47a0      	blx	r4
 8004c86:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c92:	e013      	b.n	8004cbc <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004c94:	8bfb      	ldrh	r3, [r7, #30]
 8004c96:	3301      	adds	r3, #1
 8004c98:	83fb      	strh	r3, [r7, #30]
 8004c9a:	8bfa      	ldrh	r2, [r7, #30]
 8004c9c:	893b      	ldrh	r3, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d3e2      	bcc.n	8004c68 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	e00a      	b.n	8004cbc <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	695c      	ldr	r4, [r3, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	7b1b      	ldrb	r3, [r3, #12]
 8004cae:	b298      	uxth	r0, r3
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	b299      	uxth	r1, r3
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	47a0      	blx	r4
 8004cba:	4603      	mov	r3, r0
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3724      	adds	r7, #36	; 0x24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	72fb      	strb	r3, [r7, #11]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d121      	bne.n	8004d2c <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	83fb      	strh	r3, [r7, #30]
 8004cec:	e018      	b.n	8004d20 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	691c      	ldr	r4, [r3, #16]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	7b1b      	ldrb	r3, [r3, #12]
 8004cf6:	b298      	uxth	r0, r3
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	4413      	add	r3, r2
 8004d00:	b299      	uxth	r1, r3
 8004d02:	8bfb      	ldrh	r3, [r7, #30]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	441a      	add	r2, r3
 8004d08:	2301      	movs	r3, #1
 8004d0a:	47a0      	blx	r4
 8004d0c:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	e013      	b.n	8004d42 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004d1a:	8bfb      	ldrh	r3, [r7, #30]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	83fb      	strh	r3, [r7, #30]
 8004d20:	8bfa      	ldrh	r2, [r7, #30]
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3e2      	bcc.n	8004cee <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	e00a      	b.n	8004d42 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	691c      	ldr	r4, [r3, #16]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	7b1b      	ldrb	r3, [r3, #12]
 8004d34:	b298      	uxth	r0, r3
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	b299      	uxth	r1, r3
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	47a0      	blx	r4
 8004d40:	4603      	mov	r3, r0
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}

08004d4a <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d4a:	b590      	push	{r4, r7, lr}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	461a      	mov	r2, r3
 8004d56:	460b      	mov	r3, r1
 8004d58:	72fb      	strb	r3, [r7, #11]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685c      	ldr	r4, [r3, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6898      	ldr	r0, [r3, #8]
 8004d66:	893b      	ldrh	r3, [r7, #8]
 8004d68:	7af9      	ldrb	r1, [r7, #11]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	47a0      	blx	r4
 8004d6e:	6178      	str	r0, [r7, #20]
  return ret;
 8004d70:	697b      	ldr	r3, [r7, #20]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}

08004d7a <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d7a:	b590      	push	{r4, r7, lr}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	461a      	mov	r2, r3
 8004d86:	460b      	mov	r3, r1
 8004d88:	72fb      	strb	r3, [r7, #11]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681c      	ldr	r4, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6898      	ldr	r0, [r3, #8]
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	7af9      	ldrb	r1, [r7, #11]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	47a0      	blx	r4
 8004d9e:	6178      	str	r0, [r7, #20]
  return ret;
 8004da0:	697b      	ldr	r3, [r7, #20]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd90      	pop	{r4, r7, pc}
	...

08004dac <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004dd8 <lps22hb_from_lsb_to_hpa+0x2c>
 8004dc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dc6:	eef0 7a66 	vmov.f32	s15, s13
}
 8004dca:	eeb0 0a67 	vmov.f32	s0, s15
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	49800000 	.word	0x49800000

08004ddc <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 8004de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e0c <lps22hb_from_lsb_to_degc+0x30>
 8004df6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dfa:	eef0 7a66 	vmov.f32	s15, s13
}
 8004dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	42c80000 	.word	0x42c80000

08004e10 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	2301      	movs	r3, #1
 8004e22:	2110      	movs	r1, #16
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff90 	bl	8004d4a <lps22hb_read_reg>
 8004e2a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	7a3b      	ldrb	r3, [r7, #8]
 8004e3c:	f362 0341 	bfi	r3, r2, #1, #1
 8004e40:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	2301      	movs	r3, #1
 8004e48:	2110      	movs	r1, #16
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff95 	bl	8004d7a <lps22hb_write_reg>
 8004e50:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2110      	movs	r1, #16
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff6a 	bl	8004d4a <lps22hb_read_reg>
 8004e76:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	7a3b      	ldrb	r3, [r7, #8]
 8004e88:	f362 0383 	bfi	r3, r2, #2, #2
 8004e8c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2301      	movs	r3, #1
 8004e94:	2110      	movs	r1, #16
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ff6f 	bl	8004d7a <lps22hb_write_reg>
 8004e9c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004eb4:	f107 0208 	add.w	r2, r7, #8
 8004eb8:	2301      	movs	r3, #1
 8004eba:	2110      	movs	r1, #16
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ff44 	bl	8004d4a <lps22hb_read_reg>
 8004ec2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	7a3b      	ldrb	r3, [r7, #8]
 8004ed4:	f362 1306 	bfi	r3, r2, #4, #3
 8004ed8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004eda:	f107 0208 	add.w	r2, r7, #8
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff49 	bl	8004d7a <lps22hb_write_reg>
 8004ee8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	2301      	movs	r3, #1
 8004f04:	2110      	movs	r1, #16
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff1f 	bl	8004d4a <lps22hb_read_reg>
 8004f0c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8004f0e:	7a3b      	ldrb	r3, [r7, #8]
 8004f10:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d826      	bhi.n	8004f68 <lps22hb_data_rate_get+0x74>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <lps22hb_data_rate_get+0x2c>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f41 	.word	0x08004f41
 8004f28:	08004f49 	.word	0x08004f49
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
      break;
 8004f3e:	e017      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
      break;
 8004f46:	e013      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
      break;
 8004f4e:	e00f      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2203      	movs	r2, #3
 8004f54:	701a      	strb	r2, [r3, #0]
      break;
 8004f56:	e00b      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e007      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2205      	movs	r2, #5
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e003      	b.n	8004f70 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	bf00      	nop
  }

  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004f86:	f107 0208 	add.w	r2, r7, #8
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	2128      	movs	r1, #40	; 0x28
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fedb 	bl	8004d4a <lps22hb_read_reg>
 8004f94:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004f96:	7abb      	ldrb	r3, [r7, #10]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	7a7a      	ldrb	r2, [r7, #9]
 8004fa6:	441a      	add	r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	7a3a      	ldrb	r2, [r7, #8]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	601a      	str	r2, [r3, #0]
  return ret;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8004fd8:	f107 0208 	add.w	r2, r7, #8
 8004fdc:	2302      	movs	r3, #2
 8004fde:	212b      	movs	r1, #43	; 0x2b
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff feb2 	bl	8004d4a <lps22hb_read_reg>
 8004fe6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004fe8:	7a7b      	ldrb	r3, [r7, #9]
 8004fea:	b21a      	sxth	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	7a3b      	ldrb	r3, [r7, #8]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	4413      	add	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	b21a      	sxth	r2, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	801a      	strh	r2, [r3, #0]
  return ret;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 800501e:	2301      	movs	r3, #1
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	210f      	movs	r1, #15
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe90 	bl	8004d4a <lps22hb_read_reg>
 800502a:	60f8      	str	r0, [r7, #12]
  return ret;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8005042:	f107 0208 	add.w	r2, r7, #8
 8005046:	2301      	movs	r3, #1
 8005048:	211a      	movs	r1, #26
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fe7d 	bl	8004d4a <lps22hb_read_reg>
 8005050:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10f      	bne.n	8005078 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	7a3b      	ldrb	r3, [r7, #8]
 8005062:	f362 0300 	bfi	r3, r2, #0, #1
 8005066:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8005068:	f107 0208 	add.w	r2, r7, #8
 800506c:	2301      	movs	r3, #1
 800506e:	211a      	movs	r1, #26
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fe82 	bl	8004d7a <lps22hb_write_reg>
 8005076:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800508e:	f107 0208 	add.w	r2, r7, #8
 8005092:	2301      	movs	r3, #1
 8005094:	2111      	movs	r1, #17
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe57 	bl	8004d4a <lps22hb_read_reg>
 800509c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	7a3b      	ldrb	r3, [r7, #8]
 80050ae:	f362 1304 	bfi	r3, r2, #4, #1
 80050b2:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80050b4:	f107 0208 	add.w	r2, r7, #8
 80050b8:	2301      	movs	r3, #1
 80050ba:	2111      	movs	r1, #17
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fe5c 	bl	8004d7a <lps22hb_write_reg>
 80050c2:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e04d      	b.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	7b1a      	ldrb	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8005128:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800512e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e020      	b.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4798      	blx	r3
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e016      	b.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d112      	bne.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800516c:	2301      	movs	r3, #1
 800516e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	461a      	mov	r2, r3
 8005174:	2123      	movs	r1, #35	; 0x23
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fb55 	bl	8005826 <LSM303AGR_ACC_Write_Reg>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	e000      	b.n	800518a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	08006035 	.word	0x08006035
 8005198:	08006097 	.word	0x08006097

0800519c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	331c      	adds	r3, #28
 80051a8:	2101      	movs	r1, #1
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f94a 	bl	8006444 <lsm303agr_xl_block_data_update_set>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ba:	e02c      	b.n	8005216 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	331c      	adds	r3, #28
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 faed 	bl	80067a2 <lsm303agr_xl_fifo_mode_set>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	e020      	b.n	8005216 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2205      	movs	r2, #5
 80051d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	331c      	adds	r3, #28
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f84e 	bl	8006284 <lsm303agr_xl_data_rate_set>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e010      	b.n	8005216 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	331c      	adds	r3, #28
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 f8c4 	bl	8006388 <lsm303agr_xl_full_scale_set>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	e004      	b.n	8005216 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f87c 	bl	8005324 <LSM303AGR_ACC_Disable>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	e008      	b.n	800524a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	331c      	adds	r3, #28
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fa55 	bl	8006712 <lsm303agr_xl_device_id_get>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	e000      	b.n	8005276 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2200      	movs	r2, #0
 80052b2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4a06      	ldr	r2, [pc, #24]	; (80052d8 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80052c0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	43c80000 	.word	0x43c80000

080052dc <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e014      	b.n	800531c <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f103 021c 	add.w	r2, r3, #28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f000 ffbf 	bl	8006284 <lsm303agr_xl_data_rate_set>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	e004      	b.n	800531c <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e01f      	b.n	800537a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f103 021c 	add.w	r2, r3, #28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	332a      	adds	r3, #42	; 0x2a
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 ffc2 	bl	80062d0 <lsm303agr_xl_data_rate_get>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	e010      	b.n	800537a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	331c      	adds	r3, #28
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f000 ff90 	bl	8006284 <lsm303agr_xl_data_rate_set>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e004      	b.n	800537a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	331c      	adds	r3, #28
 8005394:	f107 020b 	add.w	r2, r7, #11
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 ff3e 	bl	800621c <lsm303agr_xl_operating_mode_get>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e031      	b.n	8005410 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80053ac:	7afb      	ldrb	r3, [r7, #11]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d01a      	beq.n	80053e8 <LSM303AGR_ACC_GetSensitivity+0x66>
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	dc22      	bgt.n	80053fc <LSM303AGR_ACC_GetSensitivity+0x7a>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d00a      	beq.n	80053d4 <LSM303AGR_ACC_GetSensitivity+0x52>
 80053be:	e01d      	b.n	80053fc <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fca8 	bl	8005d18 <LSM303AGR_ACC_GetSensitivityHR>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01a      	beq.n	8005404 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	e01d      	b.n	8005410 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fce4 	bl	8005da4 <LSM303AGR_ACC_GetSensitivityNM>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e013      	b.n	8005410 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fd20 	bl	8005e30 <LSM303AGR_ACC_GetSensitivityLP>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	e009      	b.n	8005410 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005400:	60fb      	str	r3, [r7, #12]
      break;
 8005402:	e004      	b.n	800540e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800540c:	bf00      	nop
  }

  return ret;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	331c      	adds	r3, #28
 800542a:	f107 020b 	add.w	r2, r7, #11
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fef3 	bl	800621c <lsm303agr_xl_operating_mode_get>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	e09d      	b.n	800557e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	331c      	adds	r3, #28
 8005446:	f107 020a 	add.w	r2, r7, #10
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 ff3f 	bl	80062d0 <lsm303agr_xl_data_rate_get>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	e08f      	b.n	800557e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d147      	bne.n	80054f4 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8005464:	7abb      	ldrb	r3, [r7, #10]
 8005466:	2b09      	cmp	r3, #9
 8005468:	d840      	bhi.n	80054ec <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005499 	.word	0x08005499
 8005474:	080054a3 	.word	0x080054a3
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054c5 	.word	0x080054c5
 8005488:	080054cd 	.word	0x080054cd
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054e5 	.word	0x080054e5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
        break;
 80054a0:	e06c      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80054a8:	601a      	str	r2, [r3, #0]
        break;
 80054aa:	e067      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4a36      	ldr	r2, [pc, #216]	; (8005588 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80054b0:	601a      	str	r2, [r3, #0]
        break;
 80054b2:	e063      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4a35      	ldr	r2, [pc, #212]	; (800558c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80054b8:	601a      	str	r2, [r3, #0]
        break;
 80054ba:	e05f      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4a34      	ldr	r2, [pc, #208]	; (8005590 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80054c0:	601a      	str	r2, [r3, #0]
        break;
 80054c2:	e05b      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	4a33      	ldr	r2, [pc, #204]	; (8005594 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80054c8:	601a      	str	r2, [r3, #0]
        break;
 80054ca:	e057      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4a32      	ldr	r2, [pc, #200]	; (8005598 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80054d0:	601a      	str	r2, [r3, #0]
        break;
 80054d2:	e053      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4a31      	ldr	r2, [pc, #196]	; (800559c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80054d8:	601a      	str	r2, [r3, #0]
        break;
 80054da:	e04f      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80054e0:	601a      	str	r2, [r3, #0]
        break;
 80054e2:	e04b      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80054e8:	601a      	str	r2, [r3, #0]
        break;
 80054ea:	e047      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	60fb      	str	r3, [r7, #12]
        break;
 80054f2:	e043      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80054f4:	7abb      	ldrb	r3, [r7, #10]
 80054f6:	2b09      	cmp	r3, #9
 80054f8:	d83c      	bhi.n	8005574 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005529 	.word	0x08005529
 8005504:	08005533 	.word	0x08005533
 8005508:	0800553d 	.word	0x0800553d
 800550c:	08005545 	.word	0x08005545
 8005510:	0800554d 	.word	0x0800554d
 8005514:	08005555 	.word	0x08005555
 8005518:	0800555d 	.word	0x0800555d
 800551c:	08005565 	.word	0x08005565
 8005520:	08005575 	.word	0x08005575
 8005524:	0800556d 	.word	0x0800556d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
        break;
 8005530:	e024      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005538:	601a      	str	r2, [r3, #0]
        break;
 800553a:	e01f      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8005540:	601a      	str	r2, [r3, #0]
        break;
 8005542:	e01b      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4a11      	ldr	r2, [pc, #68]	; (800558c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8005548:	601a      	str	r2, [r3, #0]
        break;
 800554a:	e017      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8005550:	601a      	str	r2, [r3, #0]
        break;
 8005552:	e013      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8005558:	601a      	str	r2, [r3, #0]
        break;
 800555a:	e00f      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8005560:	601a      	str	r2, [r3, #0]
        break;
 8005562:	e00b      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	4a0d      	ldr	r2, [pc, #52]	; (800559c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8005568:	601a      	str	r2, [r3, #0]
        break;
 800556a:	e007      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8005570:	601a      	str	r2, [r3, #0]
        break;
 8005572:	e003      	b.n	800557c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	60fb      	str	r3, [r7, #12]
        break;
 800557a:	bf00      	nop
    }
  }

  return ret;
 800557c:	68fb      	ldr	r3, [r7, #12]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	41200000 	.word	0x41200000
 800558c:	41c80000 	.word	0x41c80000
 8005590:	42480000 	.word	0x42480000
 8005594:	42c80000 	.word	0x42c80000
 8005598:	43480000 	.word	0x43480000
 800559c:	43c80000 	.word	0x43c80000
 80055a0:	44ca8000 	.word	0x44ca8000
 80055a4:	45a80000 	.word	0x45a80000
 80055a8:	44a80000 	.word	0x44a80000

080055ac <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d106      	bne.n	80055d0 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80055c2:	ed97 0a00 	vldr	s0, [r7]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fc78 	bl	8005ebc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	e005      	b.n	80055dc <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80055d0:	ed97 0a00 	vldr	s0, [r7]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fcd3 	bl	8005f80 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80055da:	4603      	mov	r3, r0
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	331c      	adds	r3, #28
 80055f6:	f107 020b 	add.w	r2, r7, #11
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fee9 	bl	80063d4 <lsm303agr_xl_full_scale_get>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8005608:	f04f 33ff 	mov.w	r3, #4294967295
 800560c:	e023      	b.n	8005656 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d81b      	bhi.n	800564c <LSM303AGR_ACC_GetFullScale+0x68>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <LSM303AGR_ACC_GetFullScale+0x38>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005635 	.word	0x08005635
 8005624:	0800563d 	.word	0x0800563d
 8005628:	08005645 	.word	0x08005645
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2202      	movs	r2, #2
 8005630:	601a      	str	r2, [r3, #0]
      break;
 8005632:	e00f      	b.n	8005654 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2204      	movs	r2, #4
 8005638:	601a      	str	r2, [r3, #0]
      break;
 800563a:	e00b      	b.n	8005654 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2208      	movs	r2, #8
 8005640:	601a      	str	r2, [r3, #0]
      break;
 8005642:	e007      	b.n	8005654 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2210      	movs	r2, #16
 8005648:	601a      	str	r2, [r3, #0]
      break;
 800564a:	e003      	b.n	8005654 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
 8005650:	60fb      	str	r3, [r7, #12]
      break;
 8005652:	bf00      	nop
  }

  return ret;
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop

08005660 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	dd0b      	ble.n	8005688 <LSM303AGR_ACC_SetFullScale+0x28>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b04      	cmp	r3, #4
 8005674:	dd06      	ble.n	8005684 <LSM303AGR_ACC_SetFullScale+0x24>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	dc01      	bgt.n	8005680 <LSM303AGR_ACC_SetFullScale+0x20>
 800567c:	2302      	movs	r3, #2
 800567e:	e004      	b.n	800568a <LSM303AGR_ACC_SetFullScale+0x2a>
 8005680:	2303      	movs	r3, #3
 8005682:	e002      	b.n	800568a <LSM303AGR_ACC_SetFullScale+0x2a>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <LSM303AGR_ACC_SetFullScale+0x2a>
 8005688:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800568a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	331c      	adds	r3, #28
 8005690:	7bfa      	ldrb	r2, [r7, #15]
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fe77 	bl	8006388 <lsm303agr_xl_full_scale_set>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	e000      	b.n	80056a8 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	331c      	adds	r3, #28
 80056c6:	f107 020f 	add.w	r2, r7, #15
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fda5 	bl	800621c <lsm303agr_xl_operating_mode_get>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	e04a      	b.n	8005774 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d00c      	beq.n	80056fe <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	dc0e      	bgt.n	8005706 <LSM303AGR_ACC_GetAxesRaw+0x56>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d003      	beq.n	80056f8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80056f0:	e009      	b.n	8005706 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80056f2:	2310      	movs	r3, #16
 80056f4:	83fb      	strh	r3, [r7, #30]
      break;
 80056f6:	e00a      	b.n	800570e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	83fb      	strh	r3, [r7, #30]
      break;
 80056fc:	e007      	b.n	800570e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80056fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005702:	83fb      	strh	r3, [r7, #30]
      break;
 8005704:	e003      	b.n	800570e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	61bb      	str	r3, [r7, #24]
      break;
 800570c:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d101      	bne.n	800571a <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	e02c      	b.n	8005774 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	331c      	adds	r3, #28
 800571e:	f107 0210 	add.w	r2, r7, #16
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f000 feb3 	bl	8006490 <lsm303agr_acceleration_raw_get>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	e01e      	b.n	8005774 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8005736:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800573a:	461a      	mov	r2, r3
 800573c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005740:	fb92 f3f3 	sdiv	r3, r2, r3
 8005744:	b21a      	sxth	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800574a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800574e:	461a      	mov	r2, r3
 8005750:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005754:	fb92 f3f3 	sdiv	r3, r2, r3
 8005758:	b21a      	sxth	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800575e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005762:	461a      	mov	r2, r3
 8005764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005768:	fb92 f3f3 	sdiv	r3, r2, r3
 800576c:	b21a      	sxth	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	809a      	strh	r2, [r3, #4]

  return ret;
 8005772:	69bb      	ldr	r3, [r7, #24]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800578c:	f107 0310 	add.w	r3, r7, #16
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ff8c 	bl	80056b0 <LSM303AGR_ACC_GetAxesRaw>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	e03c      	b.n	800581e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fde9 	bl	8005382 <LSM303AGR_ACC_GetSensitivity>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ba:	e030      	b.n	800581e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80057bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80057cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057d4:	ee17 2a90 	vmov	r2, s15
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80057dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f4:	ee17 2a90 	vmov	r2, s15
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80057fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005808:	edd7 7a03 	vldr	s15, [r7, #12]
 800580c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005814:	ee17 2a90 	vmov	r2, s15
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
 8005832:	4613      	mov	r3, r2
 8005834:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f103 001c 	add.w	r0, r3, #28
 800583c:	1cba      	adds	r2, r7, #2
 800583e:	78f9      	ldrb	r1, [r7, #3]
 8005840:	2301      	movs	r3, #1
 8005842:	f000 fcd3 	bl	80061ec <lsm303agr_write_reg>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	e000      	b.n	8005854 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e04b      	b.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	7b1a      	ldrb	r2, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1a      	ldr	r2, [pc, #104]	; (800591c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 80058b4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 80058ba:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e01e      	b.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4798      	blx	r3
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e014      	b.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	331c      	adds	r3, #28
 80058fc:	2101      	movs	r1, #1
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 ff75 	bl	80067ee <lsm303agr_mag_i2c_interface_set>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	e000      	b.n	8005912 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	080060f9 	.word	0x080060f9
 8005920:	0800615b 	.word	0x0800615b

08005924 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	331c      	adds	r3, #28
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fe7c 	bl	8006630 <lsm303agr_mag_block_data_update_set>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	e028      	b.n	8005996 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	331c      	adds	r3, #28
 8005948:	2102      	movs	r1, #2
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fdeb 	bl	8006526 <lsm303agr_mag_operating_mode_set>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	e01c      	b.n	8005996 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	331c      	adds	r3, #28
 8005960:	2103      	movs	r1, #3
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fe05 	bl	8006572 <lsm303agr_mag_data_rate_set>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e010      	b.n	8005996 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	331c      	adds	r3, #28
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f000 feeb 	bl	8006756 <lsm303agr_mag_self_test_set>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	e004      	b.n	8005996 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f874 	bl	8005a94 <LSM303AGR_MAG_Disable>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e004      	b.n	80059c2 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	331c      	adds	r3, #28
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 feaa 	bl	8006734 <lsm303agr_mag_device_id_get>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	e000      	b.n	80059ee <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2201      	movs	r2, #1
 8005a12:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2232      	movs	r2, #50	; 0x32
 8005a2a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8005a40:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	42c80000 	.word	0x42c80000

08005a54 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e010      	b.n	8005a8c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	331c      	adds	r3, #28
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fd58 	bl	8006526 <lsm303agr_mag_operating_mode_set>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a80:	e004      	b.n	8005a8c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e010      	b.n	8005acc <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	331c      	adds	r3, #28
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fd38 	bl	8006526 <lsm303agr_mag_operating_mode_set>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	e004      	b.n	8005acc <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005ae4:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	331c      	adds	r3, #28
 8005b06:	f107 020b 	add.w	r2, r7, #11
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fd57 	bl	80065c0 <lsm303agr_mag_data_rate_get>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	e023      	b.n	8005b66 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d81b      	bhi.n	8005b5c <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b45 	.word	0x08005b45
 8005b34:	08005b4d 	.word	0x08005b4d
 8005b38:	08005b55 	.word	0x08005b55
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	4a0c      	ldr	r2, [pc, #48]	; (8005b70 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8005b40:	601a      	str	r2, [r3, #0]
      break;
 8005b42:	e00f      	b.n	8005b64 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8005b48:	601a      	str	r2, [r3, #0]
      break;
 8005b4a:	e00b      	b.n	8005b64 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8005b50:	601a      	str	r2, [r3, #0]
      break;
 8005b52:	e007      	b.n	8005b64 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8005b58:	601a      	str	r2, [r3, #0]
      break;
 8005b5a:	e003      	b.n	8005b64 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	60fb      	str	r3, [r7, #12]
      break;
 8005b62:	bf00      	nop
  }

  return ret;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	41200000 	.word	0x41200000
 8005b74:	41a00000 	.word	0x41a00000
 8005b78:	42480000 	.word	0x42480000
 8005b7c:	42c80000 	.word	0x42c80000

08005b80 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8005b8c:	edd7 7a00 	vldr	s15, [r7]
 8005b90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9c:	d801      	bhi.n	8005ba2 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e016      	b.n	8005bd0 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8005ba2:	edd7 7a00 	vldr	s15, [r7]
 8005ba6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	d801      	bhi.n	8005bb8 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e00b      	b.n	8005bd0 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8005bb8:	edd7 7a00 	vldr	s15, [r7]
 8005bbc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005bf8 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8005bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc8:	d801      	bhi.n	8005bce <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e000      	b.n	8005bd0 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8005bce:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8005bd0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	331c      	adds	r3, #28
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fcc9 	bl	8006572 <lsm303agr_mag_data_rate_set>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	e000      	b.n	8005bee <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	42480000 	.word	0x42480000

08005bfc <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2232      	movs	r2, #50	; 0x32
 8005c0a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	331c      	adds	r3, #28
 8005c40:	f107 0208 	add.w	r2, r7, #8
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fd18 	bl	800667c <lsm303agr_magnetic_raw_get>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	e00c      	b.n	8005c72 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005c58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005c60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	331c      	adds	r3, #28
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fcf4 	bl	800667c <lsm303agr_magnetic_raw_get>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	e036      	b.n	8005d0e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ff14 	bl	8005ad4 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8005cac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc4:	ee17 2a90 	vmov	r2, s15
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce4:	ee17 2a90 	vmov	r2, s15
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005cec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d04:	ee17 2a90 	vmov	r2, s15
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	331c      	adds	r3, #28
 8005d2a:	f107 020b 	add.w	r2, r7, #11
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fb4f 	bl	80063d4 <lsm303agr_xl_full_scale_get>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	e023      	b.n	8005d8a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d81b      	bhi.n	8005d80 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d69 	.word	0x08005d69
 8005d58:	08005d71 	.word	0x08005d71
 8005d5c:	08005d79 	.word	0x08005d79
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005d64:	601a      	str	r2, [r3, #0]
      break;
 8005d66:	e00f      	b.n	8005d88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4a0b      	ldr	r2, [pc, #44]	; (8005d98 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005d6c:	601a      	str	r2, [r3, #0]
      break;
 8005d6e:	e00b      	b.n	8005d88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005d74:	601a      	str	r2, [r3, #0]
      break;
 8005d76:	e007      	b.n	8005d88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005d7c:	601a      	str	r2, [r3, #0]
      break;
 8005d7e:	e003      	b.n	8005d88 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	60fb      	str	r3, [r7, #12]
      break;
 8005d86:	bf00      	nop
  }

  return ret;
 8005d88:	68fb      	ldr	r3, [r7, #12]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	3f7ae148 	.word	0x3f7ae148
 8005d98:	3ff9999a 	.word	0x3ff9999a
 8005d9c:	4079999a 	.word	0x4079999a
 8005da0:	413b851f 	.word	0x413b851f

08005da4 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	331c      	adds	r3, #28
 8005db6:	f107 020b 	add.w	r2, r7, #11
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fb09 	bl	80063d4 <lsm303agr_xl_full_scale_get>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	e023      	b.n	8005e16 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d81b      	bhi.n	8005e0c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df5 	.word	0x08005df5
 8005de4:	08005dfd 	.word	0x08005dfd
 8005de8:	08005e05 	.word	0x08005e05
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4a0c      	ldr	r2, [pc, #48]	; (8005e20 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005df0:	601a      	str	r2, [r3, #0]
      break;
 8005df2:	e00f      	b.n	8005e14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005df8:	601a      	str	r2, [r3, #0]
      break;
 8005dfa:	e00b      	b.n	8005e14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005e00:	601a      	str	r2, [r3, #0]
      break;
 8005e02:	e007      	b.n	8005e14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005e08:	601a      	str	r2, [r3, #0]
      break;
 8005e0a:	e003      	b.n	8005e14 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e10:	60fb      	str	r3, [r7, #12]
      break;
 8005e12:	bf00      	nop
  }

  return ret;
 8005e14:	68fb      	ldr	r3, [r7, #12]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	4079999a 	.word	0x4079999a
 8005e24:	40fa3d71 	.word	0x40fa3d71
 8005e28:	417a147b 	.word	0x417a147b
 8005e2c:	423b999a 	.word	0x423b999a

08005e30 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	331c      	adds	r3, #28
 8005e42:	f107 020b 	add.w	r2, r7, #11
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fac3 	bl	80063d4 <lsm303agr_xl_full_scale_get>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295
 8005e58:	e023      	b.n	8005ea2 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d81b      	bhi.n	8005e98 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005e60:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e81 	.word	0x08005e81
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e91 	.word	0x08005e91
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005e7c:	601a      	str	r2, [r3, #0]
      break;
 8005e7e:	e00f      	b.n	8005ea0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005e84:	601a      	str	r2, [r3, #0]
      break;
 8005e86:	e00b      	b.n	8005ea0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005e8c:	601a      	str	r2, [r3, #0]
      break;
 8005e8e:	e007      	b.n	8005ea0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005e94:	601a      	str	r2, [r3, #0]
      break;
 8005e96:	e003      	b.n	8005ea0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9c:	60fb      	str	r3, [r7, #12]
      break;
 8005e9e:	bf00      	nop
  }

  return ret;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	417a147b 	.word	0x417a147b
 8005eb0:	41fa147b 	.word	0x41fa147b
 8005eb4:	427a147b 	.word	0x427a147b
 8005eb8:	433b947b 	.word	0x433b947b

08005ebc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005ec8:	edd7 7a00 	vldr	s15, [r7]
 8005ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed8:	d801      	bhi.n	8005ede <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e037      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005ede:	edd7 7a00 	vldr	s15, [r7]
 8005ee2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d801      	bhi.n	8005ef4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e02c      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005ef4:	edd7 7a00 	vldr	s15, [r7]
 8005ef8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f04:	d801      	bhi.n	8005f0a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005f06:	2303      	movs	r3, #3
 8005f08:	e021      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005f0a:	edd7 7a00 	vldr	s15, [r7]
 8005f0e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005f74 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8005f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1a:	d801      	bhi.n	8005f20 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	e016      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005f20:	edd7 7a00 	vldr	s15, [r7]
 8005f24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005f78 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f30:	d801      	bhi.n	8005f36 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005f32:	2305      	movs	r3, #5
 8005f34:	e00b      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005f36:	edd7 7a00 	vldr	s15, [r7]
 8005f3a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005f7c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	d801      	bhi.n	8005f4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005f48:	2306      	movs	r3, #6
 8005f4a:	e000      	b.n	8005f4e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8005f4c:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8005f4e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	331c      	adds	r3, #28
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f993 	bl	8006284 <lsm303agr_xl_data_rate_set>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295
 8005f68:	e000      	b.n	8005f6c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	42480000 	.word	0x42480000
 8005f78:	42c80000 	.word	0x42c80000
 8005f7c:	43480000 	.word	0x43480000

08005f80 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8005f8c:	edd7 7a00 	vldr	s15, [r7]
 8005f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9c:	d801      	bhi.n	8005fa2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e037      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005fa2:	edd7 7a00 	vldr	s15, [r7]
 8005fa6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	d801      	bhi.n	8005fb8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e02c      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005fb8:	edd7 7a00 	vldr	s15, [r7]
 8005fbc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc8:	d801      	bhi.n	8005fce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e021      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005fce:	edd7 7a00 	vldr	s15, [r7]
 8005fd2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006028 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8005fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fde:	d801      	bhi.n	8005fe4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e016      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005fe4:	edd7 7a00 	vldr	s15, [r7]
 8005fe8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800602c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8005fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff4:	d801      	bhi.n	8005ffa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005ff6:	2305      	movs	r3, #5
 8005ff8:	e00b      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8005ffa:	edd7 7a00 	vldr	s15, [r7]
 8005ffe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006030 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8006002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600a:	d801      	bhi.n	8006010 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800600c:	2306      	movs	r3, #6
 800600e:	e000      	b.n	8006012 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8006010:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	42480000 	.word	0x42480000
 800602c:	42c80000 	.word	0x42c80000
 8006030:	43480000 	.word	0x43480000

08006034 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	461a      	mov	r2, r3
 8006040:	460b      	mov	r3, r1
 8006042:	72fb      	strb	r3, [r7, #11]
 8006044:	4613      	mov	r3, r2
 8006046:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10e      	bne.n	8006072 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	695c      	ldr	r4, [r3, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	b298      	uxth	r0, r3
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006064:	b2db      	uxtb	r3, r3
 8006066:	b299      	uxth	r1, r3
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	47a0      	blx	r4
 800606e:	4603      	mov	r3, r0
 8006070:	e00d      	b.n	800608e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	695c      	ldr	r4, [r3, #20]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	7b1b      	ldrb	r3, [r3, #12]
 800607a:	b298      	uxth	r0, r3
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006082:	b2db      	uxtb	r3, r3
 8006084:	b299      	uxth	r1, r3
 8006086:	893b      	ldrh	r3, [r7, #8]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	47a0      	blx	r4
 800608c:	4603      	mov	r3, r0
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}

08006096 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006096:	b590      	push	{r4, r7, lr}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	461a      	mov	r2, r3
 80060a2:	460b      	mov	r3, r1
 80060a4:	72fb      	strb	r3, [r7, #11]
 80060a6:	4613      	mov	r3, r2
 80060a8:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10e      	bne.n	80060d4 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	691c      	ldr	r4, [r3, #16]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	7b1b      	ldrb	r3, [r3, #12]
 80060be:	b298      	uxth	r0, r3
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	b299      	uxth	r1, r3
 80060ca:	893b      	ldrh	r3, [r7, #8]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	47a0      	blx	r4
 80060d0:	4603      	mov	r3, r0
 80060d2:	e00d      	b.n	80060f0 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	691c      	ldr	r4, [r3, #16]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	7b1b      	ldrb	r3, [r3, #12]
 80060dc:	b298      	uxth	r0, r3
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	b299      	uxth	r1, r3
 80060e8:	893b      	ldrh	r3, [r7, #8]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	47a0      	blx	r4
 80060ee:	4603      	mov	r3, r0
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd90      	pop	{r4, r7, pc}

080060f8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	461a      	mov	r2, r3
 8006104:	460b      	mov	r3, r1
 8006106:	72fb      	strb	r3, [r7, #11]
 8006108:	4613      	mov	r3, r2
 800610a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10e      	bne.n	8006136 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	695c      	ldr	r4, [r3, #20]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	b298      	uxth	r0, r3
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	b299      	uxth	r1, r3
 800612c:	893b      	ldrh	r3, [r7, #8]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	47a0      	blx	r4
 8006132:	4603      	mov	r3, r0
 8006134:	e00d      	b.n	8006152 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	695c      	ldr	r4, [r3, #20]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	7b1b      	ldrb	r3, [r3, #12]
 800613e:	b298      	uxth	r0, r3
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006146:	b2db      	uxtb	r3, r3
 8006148:	b299      	uxth	r1, r3
 800614a:	893b      	ldrh	r3, [r7, #8]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	47a0      	blx	r4
 8006150:	4603      	mov	r3, r0
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800615a:	b590      	push	{r4, r7, lr}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	461a      	mov	r2, r3
 8006166:	460b      	mov	r3, r1
 8006168:	72fb      	strb	r3, [r7, #11]
 800616a:	4613      	mov	r3, r2
 800616c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	691c      	ldr	r4, [r3, #16]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	7b1b      	ldrb	r3, [r3, #12]
 8006182:	b298      	uxth	r0, r3
 8006184:	7afb      	ldrb	r3, [r7, #11]
 8006186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800618a:	b2db      	uxtb	r3, r3
 800618c:	b299      	uxth	r1, r3
 800618e:	893b      	ldrh	r3, [r7, #8]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	47a0      	blx	r4
 8006194:	4603      	mov	r3, r0
 8006196:	e00d      	b.n	80061b4 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	691c      	ldr	r4, [r3, #16]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	7b1b      	ldrb	r3, [r3, #12]
 80061a0:	b298      	uxth	r0, r3
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	b299      	uxth	r1, r3
 80061ac:	893b      	ldrh	r3, [r7, #8]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	47a0      	blx	r4
 80061b2:	4603      	mov	r3, r0
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd90      	pop	{r4, r7, pc}

080061bc <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	461a      	mov	r2, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	72fb      	strb	r3, [r7, #11]
 80061cc:	4613      	mov	r3, r2
 80061ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685c      	ldr	r4, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6898      	ldr	r0, [r3, #8]
 80061d8:	893b      	ldrh	r3, [r7, #8]
 80061da:	7af9      	ldrb	r1, [r7, #11]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	47a0      	blx	r4
 80061e0:	6178      	str	r0, [r7, #20]
  return ret;
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd90      	pop	{r4, r7, pc}

080061ec <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	461a      	mov	r2, r3
 80061f8:	460b      	mov	r3, r1
 80061fa:	72fb      	strb	r3, [r7, #11]
 80061fc:	4613      	mov	r3, r2
 80061fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681c      	ldr	r4, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6898      	ldr	r0, [r3, #8]
 8006208:	893b      	ldrh	r3, [r7, #8]
 800620a:	7af9      	ldrb	r1, [r7, #11]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	47a0      	blx	r4
 8006210:	6178      	str	r0, [r7, #20]
  return ret;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	bd90      	pop	{r4, r7, pc}

0800621c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006226:	f107 020c 	add.w	r2, r7, #12
 800622a:	2301      	movs	r3, #1
 800622c:	2120      	movs	r1, #32
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ffc4 	bl	80061bc <lsm303agr_read_reg>
 8006234:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800623c:	f107 0210 	add.w	r2, r7, #16
 8006240:	2301      	movs	r3, #1
 8006242:	2123      	movs	r1, #35	; 0x23
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ffb9 	bl	80061bc <lsm303agr_read_reg>
 800624a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 800624c:	7b3b      	ldrb	r3, [r7, #12]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2202      	movs	r2, #2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e00c      	b.n	800627a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8006260:	7c3b      	ldrb	r3, [r7, #16]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e002      	b.n	800627a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800627a:	697b      	ldr	r3, [r7, #20]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006290:	f107 0208 	add.w	r2, r7, #8
 8006294:	2301      	movs	r3, #1
 8006296:	2120      	movs	r1, #32
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ff8f 	bl	80061bc <lsm303agr_read_reg>
 800629e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10f      	bne.n	80062c6 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	7a3b      	ldrb	r3, [r7, #8]
 80062b0:	f362 1307 	bfi	r3, r2, #4, #4
 80062b4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80062b6:	f107 0208 	add.w	r2, r7, #8
 80062ba:	2301      	movs	r3, #1
 80062bc:	2120      	movs	r1, #32
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ff94 	bl	80061ec <lsm303agr_write_reg>
 80062c4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80062da:	f107 0208 	add.w	r2, r7, #8
 80062de:	2301      	movs	r3, #1
 80062e0:	2120      	movs	r1, #32
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff6a 	bl	80061bc <lsm303agr_read_reg>
 80062e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80062ea:	7a3b      	ldrb	r3, [r7, #8]
 80062ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b09      	cmp	r3, #9
 80062f4:	d83e      	bhi.n	8006374 <lsm303agr_xl_data_rate_get+0xa4>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <lsm303agr_xl_data_rate_get+0x2c>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	08006335 	.word	0x08006335
 8006308:	0800633d 	.word	0x0800633d
 800630c:	08006345 	.word	0x08006345
 8006310:	0800634d 	.word	0x0800634d
 8006314:	08006355 	.word	0x08006355
 8006318:	0800635d 	.word	0x0800635d
 800631c:	08006365 	.word	0x08006365
 8006320:	0800636d 	.word	0x0800636d
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
      break;
 800632a:	e027      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
      break;
 8006332:	e023      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2202      	movs	r2, #2
 8006338:	701a      	strb	r2, [r3, #0]
      break;
 800633a:	e01f      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2203      	movs	r2, #3
 8006340:	701a      	strb	r2, [r3, #0]
      break;
 8006342:	e01b      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2204      	movs	r2, #4
 8006348:	701a      	strb	r2, [r3, #0]
      break;
 800634a:	e017      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2205      	movs	r2, #5
 8006350:	701a      	strb	r2, [r3, #0]
      break;
 8006352:	e013      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2206      	movs	r2, #6
 8006358:	701a      	strb	r2, [r3, #0]
      break;
 800635a:	e00f      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2207      	movs	r2, #7
 8006360:	701a      	strb	r2, [r3, #0]
      break;
 8006362:	e00b      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2208      	movs	r2, #8
 8006368:	701a      	strb	r2, [r3, #0]
      break;
 800636a:	e007      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2209      	movs	r2, #9
 8006370:	701a      	strb	r2, [r3, #0]
      break;
 8006372:	e003      	b.n	800637c <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
      break;
 800637a:	bf00      	nop
  }

  return ret;
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop

08006388 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006394:	f107 0208 	add.w	r2, r7, #8
 8006398:	2301      	movs	r3, #1
 800639a:	2123      	movs	r1, #35	; 0x23
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff0d 	bl	80061bc <lsm303agr_read_reg>
 80063a2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	7a3b      	ldrb	r3, [r7, #8]
 80063b4:	f362 1305 	bfi	r3, r2, #4, #2
 80063b8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80063ba:	f107 0208 	add.w	r2, r7, #8
 80063be:	2301      	movs	r3, #1
 80063c0:	2123      	movs	r1, #35	; 0x23
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ff12 	bl	80061ec <lsm303agr_write_reg>
 80063c8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80063ca:	68fb      	ldr	r3, [r7, #12]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80063de:	f107 0208 	add.w	r2, r7, #8
 80063e2:	2301      	movs	r3, #1
 80063e4:	2123      	movs	r1, #35	; 0x23
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fee8 	bl	80061bc <lsm303agr_read_reg>
 80063ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 80063ee:	7a3b      	ldrb	r3, [r7, #8]
 80063f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d81a      	bhi.n	8006430 <lsm303agr_xl_full_scale_get+0x5c>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <lsm303agr_xl_full_scale_get+0x2c>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006411 	.word	0x08006411
 8006404:	08006419 	.word	0x08006419
 8006408:	08006421 	.word	0x08006421
 800640c:	08006429 	.word	0x08006429
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
      break;
 8006416:	e00f      	b.n	8006438 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
      break;
 800641e:	e00b      	b.n	8006438 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2202      	movs	r2, #2
 8006424:	701a      	strb	r2, [r3, #0]
      break;
 8006426:	e007      	b.n	8006438 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2203      	movs	r2, #3
 800642c:	701a      	strb	r2, [r3, #0]
      break;
 800642e:	e003      	b.n	8006438 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
      break;
 8006436:	bf00      	nop
  }

  return ret;
 8006438:	68fb      	ldr	r3, [r7, #12]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006450:	f107 0208 	add.w	r2, r7, #8
 8006454:	2301      	movs	r3, #1
 8006456:	2123      	movs	r1, #35	; 0x23
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff feaf 	bl	80061bc <lsm303agr_read_reg>
 800645e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	7a3b      	ldrb	r3, [r7, #8]
 8006470:	f362 13c7 	bfi	r3, r2, #7, #1
 8006474:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8006476:	f107 0208 	add.w	r2, r7, #8
 800647a:	2301      	movs	r3, #1
 800647c:	2123      	movs	r1, #35	; 0x23
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff feb4 	bl	80061ec <lsm303agr_write_reg>
 8006484:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8006486:	68fb      	ldr	r3, [r7, #12]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800649a:	f107 020c 	add.w	r2, r7, #12
 800649e:	2306      	movs	r3, #6
 80064a0:	2128      	movs	r1, #40	; 0x28
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fe8a 	bl	80061bc <lsm303agr_read_reg>
 80064a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80064aa:	7b7b      	ldrb	r3, [r7, #13]
 80064ac:	b21a      	sxth	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b29a      	uxth	r2, r3
 80064be:	7b3b      	ldrb	r3, [r7, #12]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80064cc:	7bfa      	ldrb	r2, [r7, #15]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3302      	adds	r3, #2
 80064d2:	b212      	sxth	r2, r2
 80064d4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	3302      	adds	r3, #2
 80064da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4413      	add	r3, r2
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	3302      	adds	r3, #2
 80064f0:	b212      	sxth	r2, r2
 80064f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80064f4:	7c7a      	ldrb	r2, [r7, #17]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	b212      	sxth	r2, r2
 80064fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	3304      	adds	r3, #4
 8006502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006506:	b29b      	uxth	r3, r3
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	b29a      	uxth	r2, r3
 800650c:	7c3b      	ldrb	r3, [r7, #16]
 800650e:	b29b      	uxth	r3, r3
 8006510:	4413      	add	r3, r2
 8006512:	b29a      	uxth	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	3304      	adds	r3, #4
 8006518:	b212      	sxth	r2, r2
 800651a:	801a      	strh	r2, [r3, #0]
  return ret;
 800651c:	697b      	ldr	r3, [r7, #20]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006532:	f107 0208 	add.w	r2, r7, #8
 8006536:	2301      	movs	r3, #1
 8006538:	2160      	movs	r1, #96	; 0x60
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fe3e 	bl	80061bc <lsm303agr_read_reg>
 8006540:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10f      	bne.n	8006568 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	b2da      	uxtb	r2, r3
 8006550:	7a3b      	ldrb	r3, [r7, #8]
 8006552:	f362 0301 	bfi	r3, r2, #0, #2
 8006556:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006558:	f107 0208 	add.w	r2, r7, #8
 800655c:	2301      	movs	r3, #1
 800655e:	2160      	movs	r1, #96	; 0x60
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff fe43 	bl	80061ec <lsm303agr_write_reg>
 8006566:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800657e:	f107 0208 	add.w	r2, r7, #8
 8006582:	2301      	movs	r3, #1
 8006584:	2160      	movs	r1, #96	; 0x60
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fe18 	bl	80061bc <lsm303agr_read_reg>
 800658c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	b2da      	uxtb	r2, r3
 800659c:	7a3b      	ldrb	r3, [r7, #8]
 800659e:	f362 0383 	bfi	r3, r2, #2, #2
 80065a2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80065a4:	f107 0208 	add.w	r2, r7, #8
 80065a8:	2301      	movs	r3, #1
 80065aa:	2160      	movs	r1, #96	; 0x60
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fe1d 	bl	80061ec <lsm303agr_write_reg>
 80065b2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80065b4:	68fb      	ldr	r3, [r7, #12]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80065ca:	f107 0208 	add.w	r2, r7, #8
 80065ce:	2301      	movs	r3, #1
 80065d0:	2160      	movs	r1, #96	; 0x60
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fdf2 	bl	80061bc <lsm303agr_read_reg>
 80065d8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 80065da:	7a3b      	ldrb	r3, [r7, #8]
 80065dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d81a      	bhi.n	800661c <lsm303agr_mag_data_rate_get+0x5c>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <lsm303agr_mag_data_rate_get+0x2c>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006605 	.word	0x08006605
 80065f4:	0800660d 	.word	0x0800660d
 80065f8:	08006615 	.word	0x08006615
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
      break;
 8006602:	e00f      	b.n	8006624 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
      break;
 800660a:	e00b      	b.n	8006624 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2202      	movs	r2, #2
 8006610:	701a      	strb	r2, [r3, #0]
      break;
 8006612:	e007      	b.n	8006624 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2203      	movs	r2, #3
 8006618:	701a      	strb	r2, [r3, #0]
      break;
 800661a:	e003      	b.n	8006624 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
      break;
 8006622:	bf00      	nop
  }

  return ret;
 8006624:	68fb      	ldr	r3, [r7, #12]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop

08006630 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800663c:	f107 0208 	add.w	r2, r7, #8
 8006640:	2301      	movs	r3, #1
 8006642:	2162      	movs	r1, #98	; 0x62
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fdb9 	bl	80061bc <lsm303agr_read_reg>
 800664a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	7a3b      	ldrb	r3, [r7, #8]
 800665c:	f362 1304 	bfi	r3, r2, #4, #1
 8006660:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006662:	f107 0208 	add.w	r2, r7, #8
 8006666:	2301      	movs	r3, #1
 8006668:	2162      	movs	r1, #98	; 0x62
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fdbe 	bl	80061ec <lsm303agr_write_reg>
 8006670:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8006686:	f107 020c 	add.w	r2, r7, #12
 800668a:	2306      	movs	r3, #6
 800668c:	2168      	movs	r1, #104	; 0x68
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fd94 	bl	80061bc <lsm303agr_read_reg>
 8006694:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006696:	7b7b      	ldrb	r3, [r7, #13]
 8006698:	b21a      	sxth	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	7b3b      	ldrb	r3, [r7, #12]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b21a      	sxth	r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80066b8:	7bfa      	ldrb	r2, [r7, #15]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	3302      	adds	r3, #2
 80066be:	b212      	sxth	r2, r2
 80066c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	3302      	adds	r3, #2
 80066c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	3302      	adds	r3, #2
 80066dc:	b212      	sxth	r2, r2
 80066de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80066e0:	7c7a      	ldrb	r2, [r7, #17]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	3304      	adds	r3, #4
 80066e6:	b212      	sxth	r2, r2
 80066e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	3304      	adds	r3, #4
 80066ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	7c3b      	ldrb	r3, [r7, #16]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	3304      	adds	r3, #4
 8006704:	b212      	sxth	r2, r2
 8006706:	801a      	strh	r2, [r3, #0]
  return ret;
 8006708:	697b      	ldr	r3, [r7, #20]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 800671c:	2301      	movs	r3, #1
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	210f      	movs	r1, #15
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fd4a 	bl	80061bc <lsm303agr_read_reg>
 8006728:	60f8      	str	r0, [r7, #12]
  return ret;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800673e:	2301      	movs	r3, #1
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	214f      	movs	r1, #79	; 0x4f
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fd39 	bl	80061bc <lsm303agr_read_reg>
 800674a:	60f8      	str	r0, [r7, #12]
  return ret;
 800674c:	68fb      	ldr	r3, [r7, #12]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006762:	f107 0208 	add.w	r2, r7, #8
 8006766:	2301      	movs	r3, #1
 8006768:	2162      	movs	r1, #98	; 0x62
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fd26 	bl	80061bc <lsm303agr_read_reg>
 8006770:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10f      	bne.n	8006798 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	7a3b      	ldrb	r3, [r7, #8]
 8006782:	f362 0341 	bfi	r3, r2, #1, #1
 8006786:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	2301      	movs	r3, #1
 800678e:	2162      	movs	r1, #98	; 0x62
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fd2b 	bl	80061ec <lsm303agr_write_reg>
 8006796:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80067ae:	f107 0208 	add.w	r2, r7, #8
 80067b2:	2301      	movs	r3, #1
 80067b4:	212e      	movs	r1, #46	; 0x2e
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fd00 	bl	80061bc <lsm303agr_read_reg>
 80067bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10f      	bne.n	80067e4 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	7a3b      	ldrb	r3, [r7, #8]
 80067ce:	f362 1387 	bfi	r3, r2, #6, #2
 80067d2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80067d4:	f107 0208 	add.w	r2, r7, #8
 80067d8:	2301      	movs	r3, #1
 80067da:	212e      	movs	r1, #46	; 0x2e
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff fd05 	bl	80061ec <lsm303agr_write_reg>
 80067e2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80067e4:	68fb      	ldr	r3, [r7, #12]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80067fa:	f107 0208 	add.w	r2, r7, #8
 80067fe:	2301      	movs	r3, #1
 8006800:	2162      	movs	r1, #98	; 0x62
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fcda 	bl	80061bc <lsm303agr_read_reg>
 8006808:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10f      	bne.n	8006830 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	b2da      	uxtb	r2, r3
 8006818:	7a3b      	ldrb	r3, [r7, #8]
 800681a:	f362 1345 	bfi	r3, r2, #5, #1
 800681e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006820:	f107 0208 	add.w	r2, r7, #8
 8006824:	2301      	movs	r3, #1
 8006826:	2162      	movs	r1, #98	; 0x62
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fcdf 	bl	80061ec <lsm303agr_write_reg>
 800682e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8006830:	68fb      	ldr	r3, [r7, #12]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8006850:	f04f 33ff 	mov.w	r3, #4294967295
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e04d      	b.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	7b1a      	ldrb	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1b      	ldr	r2, [pc, #108]	; (8006900 <LSM6DSL_RegisterBusIO+0xc4>)
 8006894:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a1a      	ldr	r2, [pc, #104]	; (8006904 <LSM6DSL_RegisterBusIO+0xc8>)
 800689a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e020      	b.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4798      	blx	r3
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80068be:	f04f 33ff 	mov.w	r3, #4294967295
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e016      	b.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d112      	bne.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80068d8:	230c      	movs	r3, #12
 80068da:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	461a      	mov	r2, r3
 80068e0:	2112      	movs	r1, #18
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fd2d 	bl	8007342 <LSM6DSL_Write_Reg>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	080077b1 	.word	0x080077b1
 8006904:	080077e7 	.word	0x080077e7

08006908 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	331c      	adds	r3, #28
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fa59 	bl	8007dce <lsm6dsl_auto_increment_set>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8006922:	f04f 33ff 	mov.w	r3, #4294967295
 8006926:	e054      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	331c      	adds	r3, #28
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f980 	bl	8007c34 <lsm6dsl_block_data_update_set>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	e048      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	331c      	adds	r3, #28
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f001 fa67 	bl	8007e1a <lsm6dsl_fifo_mode_set>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e03c      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2204      	movs	r2, #4
 800695c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	331c      	adds	r3, #28
 8006964:	2100      	movs	r1, #0
 8006966:	4618      	mov	r0, r3
 8006968:	f000 ffe6 	bl	8007938 <lsm6dsl_xl_data_rate_set>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	e02c      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	331c      	adds	r3, #28
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff7c 	bl	800787c <lsm6dsl_xl_full_scale_set>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e020      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2204      	movs	r2, #4
 8006994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	331c      	adds	r3, #28
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f8c0 	bl	8007b24 <lsm6dsl_gy_data_rate_set>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	e010      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	331c      	adds	r3, #28
 80069b4:	2106      	movs	r1, #6
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 f84c 	bl	8007a54 <lsm6dsl_gy_full_scale_set>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	e004      	b.n	80069d2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f888 	bl	8006af8 <LSM6DSL_ACC_Disable>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	e015      	b.n	8006a20 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa9a 	bl	8006f2e <LSM6DSL_GYRO_Disable>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	e00c      	b.n	8006a20 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	331c      	adds	r3, #28
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f9b7 	bl	8007dac <lsm6dsl_device_id_get>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
 8006a48:	e000      	b.n	8006a4c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2201      	movs	r2, #1
 8006a62:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2201      	movs	r2, #1
 8006a68:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a7c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2210      	movs	r2, #16
 8006a82:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	4a07      	ldr	r2, [pc, #28]	; (8006aac <LSM6DSL_GetCapabilities+0x58>)
 8006a8e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4a06      	ldr	r2, [pc, #24]	; (8006aac <LSM6DSL_GetCapabilities+0x58>)
 8006a94:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	45d02000 	.word	0x45d02000

08006ab0 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e014      	b.n	8006af0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f103 021c 	add.w	r2, r3, #28
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f000 ff2f 	bl	8007938 <lsm6dsl_xl_data_rate_set>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae4:	e004      	b.n	8006af0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e01f      	b.n	8006b4e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f103 021c 	add.w	r2, r3, #28
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	332b      	adds	r3, #43	; 0x2b
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f000 ff32 	bl	8007984 <lsm6dsl_xl_data_rate_get>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2a:	e010      	b.n	8006b4e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	331c      	adds	r3, #28
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 ff00 	bl	8007938 <lsm6dsl_xl_data_rate_set>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	e004      	b.n	8006b4e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	331c      	adds	r3, #28
 8006b6a:	f107 020b 	add.w	r2, r7, #11
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fea9 	bl	80078c8 <lsm6dsl_xl_full_scale_get>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	e023      	b.n	8006bca <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d81b      	bhi.n	8006bc0 <LSM6DSL_ACC_GetSensitivity+0x68>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bb1 	.word	0x08006bb1
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8006ba4:	601a      	str	r2, [r3, #0]
      break;
 8006ba6:	e00f      	b.n	8006bc8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8006bac:	601a      	str	r2, [r3, #0]
      break;
 8006bae:	e00b      	b.n	8006bc8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <LSM6DSL_ACC_GetSensitivity+0x84>)
 8006bb4:	601a      	str	r2, [r3, #0]
      break;
 8006bb6:	e007      	b.n	8006bc8 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8006bbc:	601a      	str	r2, [r3, #0]
      break;
 8006bbe:	e003      	b.n	8006bc8 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc4:	60fb      	str	r3, [r7, #12]
      break;
 8006bc6:	bf00      	nop
  }

  return ret;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	3d79db23 	.word	0x3d79db23
 8006bd8:	3df9db23 	.word	0x3df9db23
 8006bdc:	3e79db23 	.word	0x3e79db23
 8006be0:	3ef9db23 	.word	0x3ef9db23

08006be4 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	331c      	adds	r3, #28
 8006bf6:	f107 020b 	add.w	r2, r7, #11
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fec1 	bl	8007984 <lsm6dsl_xl_data_rate_get>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	e054      	b.n	8006cb8 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	2b0b      	cmp	r3, #11
 8006c12:	d84c      	bhi.n	8006cae <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c4d 	.word	0x08006c4d
 8006c20:	08006c5f 	.word	0x08006c5f
 8006c24:	08006c67 	.word	0x08006c67
 8006c28:	08006c6f 	.word	0x08006c6f
 8006c2c:	08006c77 	.word	0x08006c77
 8006c30:	08006c7f 	.word	0x08006c7f
 8006c34:	08006c87 	.word	0x08006c87
 8006c38:	08006c8f 	.word	0x08006c8f
 8006c3c:	08006c97 	.word	0x08006c97
 8006c40:	08006c9f 	.word	0x08006c9f
 8006c44:	08006ca7 	.word	0x08006ca7
 8006c48:	08006c57 	.word	0x08006c57
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
      break;
 8006c54:	e02f      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8006c5a:	601a      	str	r2, [r3, #0]
      break;
 8006c5c:	e02b      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8006c62:	601a      	str	r2, [r3, #0]
      break;
 8006c64:	e027      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8006c6a:	601a      	str	r2, [r3, #0]
      break;
 8006c6c:	e023      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	4a16      	ldr	r2, [pc, #88]	; (8006ccc <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8006c72:	601a      	str	r2, [r3, #0]
      break;
 8006c74:	e01f      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8006c7a:	601a      	str	r2, [r3, #0]
      break;
 8006c7c:	e01b      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8006c82:	601a      	str	r2, [r3, #0]
      break;
 8006c84:	e017      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8006c8a:	601a      	str	r2, [r3, #0]
      break;
 8006c8c:	e013      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8006c92:	601a      	str	r2, [r3, #0]
      break;
 8006c94:	e00f      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	4a11      	ldr	r2, [pc, #68]	; (8006ce0 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8006c9a:	601a      	str	r2, [r3, #0]
      break;
 8006c9c:	e00b      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8006ca2:	601a      	str	r2, [r3, #0]
      break;
 8006ca4:	e007      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	4a0f      	ldr	r2, [pc, #60]	; (8006ce8 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8006caa:	601a      	str	r2, [r3, #0]
      break;
 8006cac:	e003      	b.n	8006cb6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb2:	60fb      	str	r3, [r7, #12]
      break;
 8006cb4:	bf00      	nop
  }

  return ret;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	3fcccccd 	.word	0x3fcccccd
 8006cc4:	41480000 	.word	0x41480000
 8006cc8:	41d00000 	.word	0x41d00000
 8006ccc:	42500000 	.word	0x42500000
 8006cd0:	42d00000 	.word	0x42d00000
 8006cd4:	43500000 	.word	0x43500000
 8006cd8:	43d00000 	.word	0x43d00000
 8006cdc:	44504000 	.word	0x44504000
 8006ce0:	44cf8000 	.word	0x44cf8000
 8006ce4:	45502000 	.word	0x45502000
 8006ce8:	45d02000 	.word	0x45d02000

08006cec <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d106      	bne.n	8006d10 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006d02:	ed97 0a00 	vldr	s0, [r7]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb36 	bl	8007378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	e005      	b.n	8006d1c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006d10:	ed97 0a00 	vldr	s0, [r7]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbbb 	bl	8007490 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8006d1a:	4603      	mov	r3, r0
  }
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	331c      	adds	r3, #28
 8006d36:	f107 020b 	add.w	r2, r7, #11
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fdc3 	bl	80078c8 <lsm6dsl_xl_full_scale_get>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e023      	b.n	8006d96 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d81b      	bhi.n	8006d8c <LSM6DSL_ACC_GetFullScale+0x68>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <LSM6DSL_ACC_GetFullScale+0x38>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d7d 	.word	0x08006d7d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	601a      	str	r2, [r3, #0]
      break;
 8006d72:	e00f      	b.n	8006d94 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2204      	movs	r2, #4
 8006d78:	601a      	str	r2, [r3, #0]
      break;
 8006d7a:	e00b      	b.n	8006d94 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2208      	movs	r2, #8
 8006d80:	601a      	str	r2, [r3, #0]
      break;
 8006d82:	e007      	b.n	8006d94 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2210      	movs	r2, #16
 8006d88:	601a      	str	r2, [r3, #0]
      break;
 8006d8a:	e003      	b.n	8006d94 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8006d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d90:	60fb      	str	r3, [r7, #12]
      break;
 8006d92:	bf00      	nop
  }

  return ret;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	dd0b      	ble.n	8006dc8 <LSM6DSL_ACC_SetFullScale+0x28>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	dd06      	ble.n	8006dc4 <LSM6DSL_ACC_SetFullScale+0x24>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	dc01      	bgt.n	8006dc0 <LSM6DSL_ACC_SetFullScale+0x20>
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e004      	b.n	8006dca <LSM6DSL_ACC_SetFullScale+0x2a>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e002      	b.n	8006dca <LSM6DSL_ACC_SetFullScale+0x2a>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e000      	b.n	8006dca <LSM6DSL_ACC_SetFullScale+0x2a>
 8006dc8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8006dca:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	331c      	adds	r3, #28
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fd51 	bl	800787c <lsm6dsl_xl_full_scale_set>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295
 8006de4:	e000      	b.n	8006de8 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	331c      	adds	r3, #28
 8006dfe:	f107 0208 	add.w	r2, r7, #8
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 ff86 	bl	8007d16 <lsm6dsl_acceleration_raw_get>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295
 8006e14:	e00c      	b.n	8006e30 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006e16:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006e1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006e26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	331c      	adds	r3, #28
 8006e4c:	f107 0210 	add.w	r2, r7, #16
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 ff5f 	bl	8007d16 <lsm6dsl_acceleration_raw_get>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	e03c      	b.n	8006ede <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe74 	bl	8006b58 <LSM6DSL_ACC_GetSensitivity>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	e030      	b.n	8006ede <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006e7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e94:	ee17 2a90 	vmov	r2, s15
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006e9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ea8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eb4:	ee17 2a90 	vmov	r2, s15
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006ebc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed4:	ee17 2a90 	vmov	r2, s15
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e014      	b.n	8006f26 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 021c 	add.w	r2, r3, #28
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f000 fe0a 	bl	8007b24 <lsm6dsl_gy_data_rate_set>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	e004      	b.n	8006f26 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e01f      	b.n	8006f84 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f103 021c 	add.w	r2, r3, #28
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	332c      	adds	r3, #44	; 0x2c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f000 fe0d 	bl	8007b70 <lsm6dsl_gy_data_rate_get>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f60:	e010      	b.n	8006f84 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	331c      	adds	r3, #28
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fddb 	bl	8007b24 <lsm6dsl_gy_data_rate_set>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
 8006f78:	e004      	b.n	8006f84 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	331c      	adds	r3, #28
 8006f9e:	f107 020b 	add.w	r2, r7, #11
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fd7b 	bl	8007aa0 <lsm6dsl_gy_full_scale_get>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8006fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb4:	e02d      	b.n	8007012 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b06      	cmp	r3, #6
 8006fba:	d825      	bhi.n	8007008 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08007009 	.word	0x08007009
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	08007001 	.word	0x08007001
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	; (800701c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8006fe4:	601a      	str	r2, [r3, #0]
      break;
 8006fe6:	e013      	b.n	8007010 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8006fec:	601a      	str	r2, [r3, #0]
      break;
 8006fee:	e00f      	b.n	8007010 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4a0c      	ldr	r2, [pc, #48]	; (8007024 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8006ff4:	601a      	str	r2, [r3, #0]
      break;
 8006ff6:	e00b      	b.n	8007010 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	4a0b      	ldr	r2, [pc, #44]	; (8007028 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006ffc:	601a      	str	r2, [r3, #0]
      break;
 8006ffe:	e007      	b.n	8007010 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8007004:	601a      	str	r2, [r3, #0]
      break;
 8007006:	e003      	b.n	8007010 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8007008:	f04f 33ff 	mov.w	r3, #4294967295
 800700c:	60fb      	str	r3, [r7, #12]
      break;
 800700e:	bf00      	nop
  }

  return ret;
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	408c0000 	.word	0x408c0000
 8007020:	410c0000 	.word	0x410c0000
 8007024:	418c0000 	.word	0x418c0000
 8007028:	420c0000 	.word	0x420c0000
 800702c:	428c0000 	.word	0x428c0000

08007030 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	331c      	adds	r3, #28
 8007042:	f107 020b 	add.w	r2, r7, #11
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fd91 	bl	8007b70 <lsm6dsl_gy_data_rate_get>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	e04e      	b.n	80070f8 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	2b0a      	cmp	r3, #10
 800705e:	d846      	bhi.n	80070ee <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007095 	.word	0x08007095
 800706c:	0800709f 	.word	0x0800709f
 8007070:	080070a7 	.word	0x080070a7
 8007074:	080070af 	.word	0x080070af
 8007078:	080070b7 	.word	0x080070b7
 800707c:	080070bf 	.word	0x080070bf
 8007080:	080070c7 	.word	0x080070c7
 8007084:	080070cf 	.word	0x080070cf
 8007088:	080070d7 	.word	0x080070d7
 800708c:	080070df 	.word	0x080070df
 8007090:	080070e7 	.word	0x080070e7
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
      break;
 800709c:	e02b      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80070a2:	601a      	str	r2, [r3, #0]
      break;
 80070a4:	e027      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	4a16      	ldr	r2, [pc, #88]	; (8007104 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80070aa:	601a      	str	r2, [r3, #0]
      break;
 80070ac:	e023      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	4a15      	ldr	r2, [pc, #84]	; (8007108 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80070b2:	601a      	str	r2, [r3, #0]
      break;
 80070b4:	e01f      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	4a14      	ldr	r2, [pc, #80]	; (800710c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80070ba:	601a      	str	r2, [r3, #0]
      break;
 80070bc:	e01b      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4a13      	ldr	r2, [pc, #76]	; (8007110 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80070c2:	601a      	str	r2, [r3, #0]
      break;
 80070c4:	e017      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	4a12      	ldr	r2, [pc, #72]	; (8007114 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80070ca:	601a      	str	r2, [r3, #0]
      break;
 80070cc:	e013      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	4a11      	ldr	r2, [pc, #68]	; (8007118 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80070d2:	601a      	str	r2, [r3, #0]
      break;
 80070d4:	e00f      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	4a10      	ldr	r2, [pc, #64]	; (800711c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80070da:	601a      	str	r2, [r3, #0]
      break;
 80070dc:	e00b      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80070e2:	601a      	str	r2, [r3, #0]
      break;
 80070e4:	e007      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4a0e      	ldr	r2, [pc, #56]	; (8007124 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80070ea:	601a      	str	r2, [r3, #0]
      break;
 80070ec:	e003      	b.n	80070f6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	60fb      	str	r3, [r7, #12]
      break;
 80070f4:	bf00      	nop
  }

  return ret;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	41480000 	.word	0x41480000
 8007104:	41d00000 	.word	0x41d00000
 8007108:	42500000 	.word	0x42500000
 800710c:	42d00000 	.word	0x42d00000
 8007110:	43500000 	.word	0x43500000
 8007114:	43d00000 	.word	0x43d00000
 8007118:	44504000 	.word	0x44504000
 800711c:	44cf8000 	.word	0x44cf8000
 8007120:	45502000 	.word	0x45502000
 8007124:	45d02000 	.word	0x45d02000

08007128 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800713a:	2b01      	cmp	r3, #1
 800713c:	d106      	bne.n	800714c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800713e:	ed97 0a00 	vldr	s0, [r7]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa26 	bl	8007594 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8007148:	4603      	mov	r3, r0
 800714a:	e005      	b.n	8007158 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800714c:	ed97 0a00 	vldr	s0, [r7]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 faab 	bl	80076ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8007156:	4603      	mov	r3, r0
  }
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	331c      	adds	r3, #28
 8007172:	f107 020b 	add.w	r2, r7, #11
 8007176:	4611      	mov	r1, r2
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fc91 	bl	8007aa0 <lsm6dsl_gy_full_scale_get>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	e030      	b.n	80071ec <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	2b06      	cmp	r3, #6
 800718e:	d828      	bhi.n	80071e2 <LSM6DSL_GYRO_GetFullScale+0x82>
 8007190:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071b5 	.word	0x080071b5
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071e3 	.word	0x080071e3
 80071a8:	080071cf 	.word	0x080071cf
 80071ac:	080071e3 	.word	0x080071e3
 80071b0:	080071d9 	.word	0x080071d9
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	227d      	movs	r2, #125	; 0x7d
 80071b8:	601a      	str	r2, [r3, #0]
      break;
 80071ba:	e016      	b.n	80071ea <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	22fa      	movs	r2, #250	; 0xfa
 80071c0:	601a      	str	r2, [r3, #0]
      break;
 80071c2:	e012      	b.n	80071ea <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80071ca:	601a      	str	r2, [r3, #0]
      break;
 80071cc:	e00d      	b.n	80071ea <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071d4:	601a      	str	r2, [r3, #0]
      break;
 80071d6:	e008      	b.n	80071ea <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80071de:	601a      	str	r2, [r3, #0]
      break;
 80071e0:	e003      	b.n	80071ea <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	60fb      	str	r3, [r7, #12]
      break;
 80071e8:	bf00      	nop
  }

  return ret;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b7d      	cmp	r3, #125	; 0x7d
 8007202:	dd12      	ble.n	800722a <LSM6DSL_GYRO_SetFullScale+0x36>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2bfa      	cmp	r3, #250	; 0xfa
 8007208:	dd0d      	ble.n	8007226 <LSM6DSL_GYRO_SetFullScale+0x32>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007210:	dd07      	ble.n	8007222 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007218:	dc01      	bgt.n	800721e <LSM6DSL_GYRO_SetFullScale+0x2a>
 800721a:	2304      	movs	r3, #4
 800721c:	e006      	b.n	800722c <LSM6DSL_GYRO_SetFullScale+0x38>
 800721e:	2306      	movs	r3, #6
 8007220:	e004      	b.n	800722c <LSM6DSL_GYRO_SetFullScale+0x38>
 8007222:	2302      	movs	r3, #2
 8007224:	e002      	b.n	800722c <LSM6DSL_GYRO_SetFullScale+0x38>
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <LSM6DSL_GYRO_SetFullScale+0x38>
 800722a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800722c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	331c      	adds	r3, #28
 8007232:	7bfa      	ldrb	r2, [r7, #15]
 8007234:	4611      	mov	r1, r2
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fc0c 	bl	8007a54 <lsm6dsl_gy_full_scale_set>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8007242:	f04f 33ff 	mov.w	r3, #4294967295
 8007246:	e000      	b.n	800724a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	331c      	adds	r3, #28
 8007260:	f107 0208 	add.w	r2, r7, #8
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd0a 	bl	8007c80 <lsm6dsl_angular_rate_raw_get>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	e00c      	b.n	8007292 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007278:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007280:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007288:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	331c      	adds	r3, #28
 80072a8:	f107 0210 	add.w	r2, r7, #16
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fce6 	bl	8007c80 <lsm6dsl_angular_rate_raw_get>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	e03c      	b.n	800733a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80072c0:	f107 030c 	add.w	r3, r7, #12
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fe60 	bl	8006f8c <LSM6DSL_GYRO_GetSensitivity>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	e030      	b.n	800733a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80072d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80072e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072f0:	ee17 2a90 	vmov	r2, s15
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80072f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007304:	edd7 7a03 	vldr	s15, [r7, #12]
 8007308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007310:	ee17 2a90 	vmov	r2, s15
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007318:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007324:	edd7 7a03 	vldr	s15, [r7, #12]
 8007328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
 800734e:	4613      	mov	r3, r2
 8007350:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f103 001c 	add.w	r0, r3, #28
 8007358:	1cba      	adds	r2, r7, #2
 800735a:	78f9      	ldrb	r1, [r7, #3]
 800735c:	2301      	movs	r3, #1
 800735e:	f000 fa75 	bl	800784c <lsm6dsl_write_reg>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
 800736c:	e000      	b.n	8007370 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8007384:	edd7 7a00 	vldr	s15, [r7]
 8007388:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800738c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007394:	d801      	bhi.n	800739a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8007396:	2301      	movs	r3, #1
 8007398:	e058      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800739a:	edd7 7a00 	vldr	s15, [r7]
 800739e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80073a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073aa:	d801      	bhi.n	80073b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e04d      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80073b0:	edd7 7a00 	vldr	s15, [r7]
 80073b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007474 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80073b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c0:	d801      	bhi.n	80073c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80073c2:	2303      	movs	r3, #3
 80073c4:	e042      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80073c6:	edd7 7a00 	vldr	s15, [r7]
 80073ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007478 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80073ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	d801      	bhi.n	80073dc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80073d8:	2304      	movs	r3, #4
 80073da:	e037      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80073dc:	edd7 7a00 	vldr	s15, [r7]
 80073e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800747c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80073e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	d801      	bhi.n	80073f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80073ee:	2305      	movs	r3, #5
 80073f0:	e02c      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80073f2:	edd7 7a00 	vldr	s15, [r7]
 80073f6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007480 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80073fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	d801      	bhi.n	8007408 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007404:	2306      	movs	r3, #6
 8007406:	e021      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007408:	edd7 7a00 	vldr	s15, [r7]
 800740c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007484 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8007410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	d801      	bhi.n	800741e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800741a:	2307      	movs	r3, #7
 800741c:	e016      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800741e:	edd7 7a00 	vldr	s15, [r7]
 8007422:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007488 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	d801      	bhi.n	8007434 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8007430:	2308      	movs	r3, #8
 8007432:	e00b      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8007434:	edd7 7a00 	vldr	s15, [r7]
 8007438:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800748c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800743c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007444:	d801      	bhi.n	800744a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007446:	2309      	movs	r3, #9
 8007448:	e000      	b.n	800744c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800744a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800744c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	331c      	adds	r3, #28
 8007452:	7bfa      	ldrb	r2, [r7, #15]
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fa6e 	bl	8007938 <lsm6dsl_xl_data_rate_set>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8007462:	f04f 33ff 	mov.w	r3, #4294967295
 8007466:	e000      	b.n	800746a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	42500000 	.word	0x42500000
 8007478:	42d00000 	.word	0x42d00000
 800747c:	43500000 	.word	0x43500000
 8007480:	43d00000 	.word	0x43d00000
 8007484:	44504000 	.word	0x44504000
 8007488:	44cf8000 	.word	0x44cf8000
 800748c:	45502000 	.word	0x45502000

08007490 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800749c:	edd7 7a00 	vldr	s15, [r7]
 80074a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80074a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	d801      	bhi.n	80074b2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e058      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074b2:	edd7 7a00 	vldr	s15, [r7]
 80074b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80074ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d801      	bhi.n	80074c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e04d      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074c8:	edd7 7a00 	vldr	s15, [r7]
 80074cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007578 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80074d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d8:	d801      	bhi.n	80074de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80074da:	2303      	movs	r3, #3
 80074dc:	e042      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074de:	edd7 7a00 	vldr	s15, [r7]
 80074e2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800757c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80074e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ee:	d801      	bhi.n	80074f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80074f0:	2304      	movs	r3, #4
 80074f2:	e037      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074f4:	edd7 7a00 	vldr	s15, [r7]
 80074f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007580 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80074fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d801      	bhi.n	800750a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007506:	2305      	movs	r3, #5
 8007508:	e02c      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800750a:	edd7 7a00 	vldr	s15, [r7]
 800750e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007584 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d801      	bhi.n	8007520 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800751c:	2306      	movs	r3, #6
 800751e:	e021      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007520:	edd7 7a00 	vldr	s15, [r7]
 8007524:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007588 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007530:	d801      	bhi.n	8007536 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007532:	2307      	movs	r3, #7
 8007534:	e016      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007536:	edd7 7a00 	vldr	s15, [r7]
 800753a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800758c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800753e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d801      	bhi.n	800754c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007548:	2308      	movs	r3, #8
 800754a:	e00b      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800754c:	edd7 7a00 	vldr	s15, [r7]
 8007550:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007590 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d801      	bhi.n	8007562 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800755e:	2309      	movs	r3, #9
 8007560:	e000      	b.n	8007564 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007562:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	42500000 	.word	0x42500000
 800757c:	42d00000 	.word	0x42d00000
 8007580:	43500000 	.word	0x43500000
 8007584:	43d00000 	.word	0x43d00000
 8007588:	44504000 	.word	0x44504000
 800758c:	44cf8000 	.word	0x44cf8000
 8007590:	45502000 	.word	0x45502000

08007594 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80075a0:	edd7 7a00 	vldr	s15, [r7]
 80075a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80075a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b0:	d801      	bhi.n	80075b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e058      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80075b6:	edd7 7a00 	vldr	s15, [r7]
 80075ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80075be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	d801      	bhi.n	80075cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e04d      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80075cc:	edd7 7a00 	vldr	s15, [r7]
 80075d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007690 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80075d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075dc:	d801      	bhi.n	80075e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80075de:	2303      	movs	r3, #3
 80075e0:	e042      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80075e2:	edd7 7a00 	vldr	s15, [r7]
 80075e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007694 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80075ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d801      	bhi.n	80075f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80075f4:	2304      	movs	r3, #4
 80075f6:	e037      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80075f8:	edd7 7a00 	vldr	s15, [r7]
 80075fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007698 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007608:	d801      	bhi.n	800760e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800760a:	2305      	movs	r3, #5
 800760c:	e02c      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800760e:	edd7 7a00 	vldr	s15, [r7]
 8007612:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800769c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	d801      	bhi.n	8007624 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8007620:	2306      	movs	r3, #6
 8007622:	e021      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007624:	edd7 7a00 	vldr	s15, [r7]
 8007628:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80076a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800762c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	d801      	bhi.n	800763a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007636:	2307      	movs	r3, #7
 8007638:	e016      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800763a:	edd7 7a00 	vldr	s15, [r7]
 800763e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80076a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764a:	d801      	bhi.n	8007650 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800764c:	2308      	movs	r3, #8
 800764e:	e00b      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007650:	edd7 7a00 	vldr	s15, [r7]
 8007654:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80076a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d801      	bhi.n	8007666 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8007662:	2309      	movs	r3, #9
 8007664:	e000      	b.n	8007668 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007666:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8007668:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	331c      	adds	r3, #28
 800766e:	7bfa      	ldrb	r2, [r7, #15]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fa56 	bl	8007b24 <lsm6dsl_gy_data_rate_set>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	e000      	b.n	8007686 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	42500000 	.word	0x42500000
 8007694:	42d00000 	.word	0x42d00000
 8007698:	43500000 	.word	0x43500000
 800769c:	43d00000 	.word	0x43d00000
 80076a0:	44504000 	.word	0x44504000
 80076a4:	44cf8000 	.word	0x44cf8000
 80076a8:	45502000 	.word	0x45502000

080076ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80076b8:	edd7 7a00 	vldr	s15, [r7]
 80076bc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80076c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c8:	d801      	bhi.n	80076ce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e058      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076ce:	edd7 7a00 	vldr	s15, [r7]
 80076d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80076d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d801      	bhi.n	80076e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e04d      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076e4:	edd7 7a00 	vldr	s15, [r7]
 80076e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007794 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80076ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	d801      	bhi.n	80076fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80076f6:	2303      	movs	r3, #3
 80076f8:	e042      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076fa:	edd7 7a00 	vldr	s15, [r7]
 80076fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007798 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	d801      	bhi.n	8007710 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800770c:	2304      	movs	r3, #4
 800770e:	e037      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007710:	edd7 7a00 	vldr	s15, [r7]
 8007714:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800779c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007720:	d801      	bhi.n	8007726 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007722:	2305      	movs	r3, #5
 8007724:	e02c      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007726:	edd7 7a00 	vldr	s15, [r7]
 800772a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80077a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800772e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	d801      	bhi.n	800773c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007738:	2306      	movs	r3, #6
 800773a:	e021      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800773c:	edd7 7a00 	vldr	s15, [r7]
 8007740:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80077a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	d801      	bhi.n	8007752 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800774e:	2307      	movs	r3, #7
 8007750:	e016      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007752:	edd7 7a00 	vldr	s15, [r7]
 8007756:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800775a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	d801      	bhi.n	8007768 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007764:	2308      	movs	r3, #8
 8007766:	e00b      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007768:	edd7 7a00 	vldr	s15, [r7]
 800776c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80077ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	d801      	bhi.n	800777e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800777a:	2309      	movs	r3, #9
 800777c:	e000      	b.n	8007780 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800777e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	42500000 	.word	0x42500000
 8007798:	42d00000 	.word	0x42d00000
 800779c:	43500000 	.word	0x43500000
 80077a0:	43d00000 	.word	0x43d00000
 80077a4:	44504000 	.word	0x44504000
 80077a8:	44cf8000 	.word	0x44cf8000
 80077ac:	45502000 	.word	0x45502000

080077b0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	461a      	mov	r2, r3
 80077bc:	460b      	mov	r3, r1
 80077be:	72fb      	strb	r3, [r7, #11]
 80077c0:	4613      	mov	r3, r2
 80077c2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	695c      	ldr	r4, [r3, #20]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	b298      	uxth	r0, r3
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	b299      	uxth	r1, r3
 80077d6:	893b      	ldrh	r3, [r7, #8]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	47a0      	blx	r4
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd90      	pop	{r4, r7, pc}

080077e6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b087      	sub	sp, #28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	461a      	mov	r2, r3
 80077f2:	460b      	mov	r3, r1
 80077f4:	72fb      	strb	r3, [r7, #11]
 80077f6:	4613      	mov	r3, r2
 80077f8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	691c      	ldr	r4, [r3, #16]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	7b1b      	ldrb	r3, [r3, #12]
 8007806:	b298      	uxth	r0, r3
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	b299      	uxth	r1, r3
 800780c:	893b      	ldrh	r3, [r7, #8]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	47a0      	blx	r4
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}

0800781c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	461a      	mov	r2, r3
 8007828:	460b      	mov	r3, r1
 800782a:	72fb      	strb	r3, [r7, #11]
 800782c:	4613      	mov	r3, r2
 800782e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685c      	ldr	r4, [r3, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6898      	ldr	r0, [r3, #8]
 8007838:	893b      	ldrh	r3, [r7, #8]
 800783a:	7af9      	ldrb	r1, [r7, #11]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	47a0      	blx	r4
 8007840:	6178      	str	r0, [r7, #20]
  return ret;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd90      	pop	{r4, r7, pc}

0800784c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	461a      	mov	r2, r3
 8007858:	460b      	mov	r3, r1
 800785a:	72fb      	strb	r3, [r7, #11]
 800785c:	4613      	mov	r3, r2
 800785e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681c      	ldr	r4, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6898      	ldr	r0, [r3, #8]
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	7af9      	ldrb	r1, [r7, #11]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	47a0      	blx	r4
 8007870:	6178      	str	r0, [r7, #20]
  return ret;
 8007872:	697b      	ldr	r3, [r7, #20]
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8007888:	f107 0208 	add.w	r2, r7, #8
 800788c:	2301      	movs	r3, #1
 800788e:	2110      	movs	r1, #16
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ffc3 	bl	800781c <lsm6dsl_read_reg>
 8007896:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10f      	bne.n	80078be <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	7a3b      	ldrb	r3, [r7, #8]
 80078a8:	f362 0383 	bfi	r3, r2, #2, #2
 80078ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80078ae:	f107 0208 	add.w	r2, r7, #8
 80078b2:	2301      	movs	r3, #1
 80078b4:	2110      	movs	r1, #16
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff ffc8 	bl	800784c <lsm6dsl_write_reg>
 80078bc:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80078be:	68fb      	ldr	r3, [r7, #12]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80078d2:	f107 0208 	add.w	r2, r7, #8
 80078d6:	2301      	movs	r3, #1
 80078d8:	2110      	movs	r1, #16
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff ff9e 	bl	800781c <lsm6dsl_read_reg>
 80078e0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80078e2:	7a3b      	ldrb	r3, [r7, #8]
 80078e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d81a      	bhi.n	8007924 <lsm6dsl_xl_full_scale_get+0x5c>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007905 	.word	0x08007905
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	08007915 	.word	0x08007915
 8007900:	0800791d 	.word	0x0800791d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e00f      	b.n	800792c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2201      	movs	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e00b      	b.n	800792c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2202      	movs	r2, #2
 8007918:	701a      	strb	r2, [r3, #0]
      break;
 800791a:	e007      	b.n	800792c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2203      	movs	r2, #3
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e003      	b.n	800792c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2204      	movs	r2, #4
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	bf00      	nop
  }

  return ret;
 800792c:	68fb      	ldr	r3, [r7, #12]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop

08007938 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	2301      	movs	r3, #1
 800794a:	2110      	movs	r1, #16
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff65 	bl	800781c <lsm6dsl_read_reg>
 8007952:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	b2da      	uxtb	r2, r3
 8007962:	7a3b      	ldrb	r3, [r7, #8]
 8007964:	f362 1307 	bfi	r3, r2, #4, #4
 8007968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	2301      	movs	r3, #1
 8007970:	2110      	movs	r1, #16
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ff6a 	bl	800784c <lsm6dsl_write_reg>
 8007978:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800797a:	68fb      	ldr	r3, [r7, #12]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800798e:	f107 0208 	add.w	r2, r7, #8
 8007992:	2301      	movs	r3, #1
 8007994:	2110      	movs	r1, #16
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff ff40 	bl	800781c <lsm6dsl_read_reg>
 800799c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800799e:	7a3b      	ldrb	r3, [r7, #8]
 80079a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b0b      	cmp	r3, #11
 80079a8:	d84a      	bhi.n	8007a40 <lsm6dsl_xl_data_rate_get+0xbc>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <lsm6dsl_xl_data_rate_get+0x2c>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079e1 	.word	0x080079e1
 80079b4:	080079e9 	.word	0x080079e9
 80079b8:	080079f1 	.word	0x080079f1
 80079bc:	080079f9 	.word	0x080079f9
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a11 	.word	0x08007a11
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a21 	.word	0x08007a21
 80079d4:	08007a29 	.word	0x08007a29
 80079d8:	08007a31 	.word	0x08007a31
 80079dc:	08007a39 	.word	0x08007a39
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e02f      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e02b      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2202      	movs	r2, #2
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e027      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2203      	movs	r2, #3
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e023      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2204      	movs	r2, #4
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e01f      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	e01b      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2206      	movs	r2, #6
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e017      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	701a      	strb	r2, [r3, #0]
      break;
 8007a1e:	e013      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2208      	movs	r2, #8
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e00f      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2209      	movs	r2, #9
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e00b      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	220a      	movs	r2, #10
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e007      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	220b      	movs	r2, #11
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	e003      	b.n	8007a48 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	220c      	movs	r2, #12
 8007a44:	701a      	strb	r2, [r3, #0]
      break;
 8007a46:	bf00      	nop
  }

  return ret;
 8007a48:	68fb      	ldr	r3, [r7, #12]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a60:	f107 0208 	add.w	r2, r7, #8
 8007a64:	2301      	movs	r3, #1
 8007a66:	2111      	movs	r1, #17
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fed7 	bl	800781c <lsm6dsl_read_reg>
 8007a6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	7a3b      	ldrb	r3, [r7, #8]
 8007a80:	f362 0343 	bfi	r3, r2, #1, #3
 8007a84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a86:	f107 0208 	add.w	r2, r7, #8
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	2111      	movs	r1, #17
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fedc 	bl	800784c <lsm6dsl_write_reg>
 8007a94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007aaa:	f107 0208 	add.w	r2, r7, #8
 8007aae:	2301      	movs	r3, #1
 8007ab0:	2111      	movs	r1, #17
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff feb2 	bl	800781c <lsm6dsl_read_reg>
 8007ab8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8007aba:	7a3b      	ldrb	r3, [r7, #8]
 8007abc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d824      	bhi.n	8007b10 <lsm6dsl_gy_full_scale_get+0x70>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <lsm6dsl_gy_full_scale_get+0x2c>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b09 	.word	0x08007b09
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e013      	b.n	8007b18 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e00f      	b.n	8007b18 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2202      	movs	r2, #2
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e00b      	b.n	8007b18 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2204      	movs	r2, #4
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e007      	b.n	8007b18 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e003      	b.n	8007b18 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2207      	movs	r2, #7
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	bf00      	nop
  }

  return ret;
 8007b18:	68fb      	ldr	r3, [r7, #12]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b30:	f107 0208 	add.w	r2, r7, #8
 8007b34:	2301      	movs	r3, #1
 8007b36:	2111      	movs	r1, #17
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fe6f 	bl	800781c <lsm6dsl_read_reg>
 8007b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10f      	bne.n	8007b66 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	7a3b      	ldrb	r3, [r7, #8]
 8007b50:	f362 1307 	bfi	r3, r2, #4, #4
 8007b54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b56:	f107 0208 	add.w	r2, r7, #8
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	2111      	movs	r1, #17
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe74 	bl	800784c <lsm6dsl_write_reg>
 8007b64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b66:	68fb      	ldr	r3, [r7, #12]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b7a:	f107 0208 	add.w	r2, r7, #8
 8007b7e:	2301      	movs	r3, #1
 8007b80:	2111      	movs	r1, #17
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fe4a 	bl	800781c <lsm6dsl_read_reg>
 8007b88:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8007b8a:	7a3b      	ldrb	r3, [r7, #8]
 8007b8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b0a      	cmp	r3, #10
 8007b94:	d844      	bhi.n	8007c20 <lsm6dsl_gy_data_rate_get+0xb0>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <lsm6dsl_gy_data_rate_get+0x2c>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007bd1 	.word	0x08007bd1
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007be1 	.word	0x08007be1
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007bf9 	.word	0x08007bf9
 8007bb8:	08007c01 	.word	0x08007c01
 8007bbc:	08007c09 	.word	0x08007c09
 8007bc0:	08007c11 	.word	0x08007c11
 8007bc4:	08007c19 	.word	0x08007c19
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
      break;
 8007bce:	e02b      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	e027      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	701a      	strb	r2, [r3, #0]
      break;
 8007bde:	e023      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2203      	movs	r2, #3
 8007be4:	701a      	strb	r2, [r3, #0]
      break;
 8007be6:	e01f      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2204      	movs	r2, #4
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e01b      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	701a      	strb	r2, [r3, #0]
      break;
 8007bf6:	e017      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	701a      	strb	r2, [r3, #0]
      break;
 8007bfe:	e013      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2207      	movs	r2, #7
 8007c04:	701a      	strb	r2, [r3, #0]
      break;
 8007c06:	e00f      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
      break;
 8007c0e:	e00b      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2209      	movs	r2, #9
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e007      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e003      	b.n	8007c28 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	220b      	movs	r2, #11
 8007c24:	701a      	strb	r2, [r3, #0]
      break;
 8007c26:	bf00      	nop
  }

  return ret;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop

08007c34 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c40:	f107 0208 	add.w	r2, r7, #8
 8007c44:	2301      	movs	r3, #1
 8007c46:	2112      	movs	r1, #18
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff fde7 	bl	800781c <lsm6dsl_read_reg>
 8007c4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10f      	bne.n	8007c76 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	7a3b      	ldrb	r3, [r7, #8]
 8007c60:	f362 1386 	bfi	r3, r2, #6, #1
 8007c64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c66:	f107 0208 	add.w	r2, r7, #8
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	2112      	movs	r1, #18
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fdec 	bl	800784c <lsm6dsl_write_reg>
 8007c74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8007c8a:	f107 020c 	add.w	r2, r7, #12
 8007c8e:	2306      	movs	r3, #6
 8007c90:	2122      	movs	r1, #34	; 0x22
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fdc2 	bl	800781c <lsm6dsl_read_reg>
 8007c98:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007c9a:	7b7b      	ldrb	r3, [r7, #13]
 8007c9c:	b21a      	sxth	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	7b3b      	ldrb	r3, [r7, #12]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007cbc:	7bfa      	ldrb	r2, [r7, #15]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	b212      	sxth	r2, r2
 8007cc4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	3302      	adds	r3, #2
 8007cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	4413      	add	r3, r2
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	3302      	adds	r3, #2
 8007ce0:	b212      	sxth	r2, r2
 8007ce2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007ce4:	7c7a      	ldrb	r2, [r7, #17]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	b212      	sxth	r2, r2
 8007cec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	7c3b      	ldrb	r3, [r7, #16]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	3304      	adds	r3, #4
 8007d08:	b212      	sxth	r2, r2
 8007d0a:	801a      	strh	r2, [r3, #0]
  return ret;
 8007d0c:	697b      	ldr	r3, [r7, #20]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b086      	sub	sp, #24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8007d20:	f107 020c 	add.w	r2, r7, #12
 8007d24:	2306      	movs	r3, #6
 8007d26:	2128      	movs	r1, #40	; 0x28
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fd77 	bl	800781c <lsm6dsl_read_reg>
 8007d2e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007d30:	7b7b      	ldrb	r3, [r7, #13]
 8007d32:	b21a      	sxth	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	7b3b      	ldrb	r3, [r7, #12]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4413      	add	r3, r2
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	b21a      	sxth	r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3302      	adds	r3, #2
 8007d58:	b212      	sxth	r2, r2
 8007d5a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3302      	adds	r3, #2
 8007d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	4413      	add	r3, r2
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3302      	adds	r3, #2
 8007d76:	b212      	sxth	r2, r2
 8007d78:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d7a:	7c7a      	ldrb	r2, [r7, #17]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	b212      	sxth	r2, r2
 8007d82:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	7c3b      	ldrb	r3, [r7, #16]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	b212      	sxth	r2, r2
 8007da0:	801a      	strh	r2, [r3, #0]
  return ret;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007db6:	2301      	movs	r3, #1
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	210f      	movs	r1, #15
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff fd2d 	bl	800781c <lsm6dsl_read_reg>
 8007dc2:	60f8      	str	r0, [r7, #12]
  return ret;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	2301      	movs	r3, #1
 8007de0:	2112      	movs	r1, #18
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fd1a 	bl	800781c <lsm6dsl_read_reg>
 8007de8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10f      	bne.n	8007e10 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	7a3b      	ldrb	r3, [r7, #8]
 8007dfa:	f362 0382 	bfi	r3, r2, #2, #1
 8007dfe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007e00:	f107 0208 	add.w	r2, r7, #8
 8007e04:	2301      	movs	r3, #1
 8007e06:	2112      	movs	r1, #18
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fd1f 	bl	800784c <lsm6dsl_write_reg>
 8007e0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007e10:	68fb      	ldr	r3, [r7, #12]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8007e26:	f107 0208 	add.w	r2, r7, #8
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	210a      	movs	r1, #10
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fcf4 	bl	800781c <lsm6dsl_read_reg>
 8007e34:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10f      	bne.n	8007e5c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	7a3b      	ldrb	r3, [r7, #8]
 8007e46:	f362 0302 	bfi	r3, r2, #0, #3
 8007e4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8007e4c:	f107 0208 	add.w	r2, r7, #8
 8007e50:	2301      	movs	r3, #1
 8007e52:	210a      	movs	r1, #10
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fcf9 	bl	800784c <lsm6dsl_write_reg>
 8007e5a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007e76:	2301      	movs	r3, #1
 8007e78:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <IKS01A2_ENV_SENSOR_Init+0x24>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d032      	beq.n	8007ef0 <IKS01A2_ENV_SENSOR_Init+0x88>
 8007e8a:	e063      	b.n	8007f54 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007e8c:	6838      	ldr	r0, [r7, #0]
 8007e8e:	f000 f973 	bl	8008178 <HTS221_0_Probe>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8007e98:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9c:	e098      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007e9e:	4a4e      	ldr	r2, [pc, #312]	; (8007fd8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	494c      	ldr	r1, [pc, #304]	; (8007fdc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007ebe:	f06f 0306 	mvn.w	r3, #6
 8007ec2:	e085      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8007ec4:	7a3b      	ldrb	r3, [r7, #8]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d103      	bne.n	8007ed2 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007ed2:	7abb      	ldrb	r3, [r7, #10]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d103      	bne.n	8007ee0 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f043 0304 	orr.w	r3, r3, #4
 8007ede:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007ee0:	7a7b      	ldrb	r3, [r7, #9]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d13a      	bne.n	8007f5c <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f043 0302 	orr.w	r3, r3, #2
 8007eec:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007eee:	e035      	b.n	8007f5c <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8007ef0:	6838      	ldr	r0, [r7, #0]
 8007ef2:	f000 f9fb 	bl	80082ec <LPS22HB_0_Probe>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8007efc:	f04f 33ff 	mov.w	r3, #4294967295
 8007f00:	e066      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007f02:	4a35      	ldr	r2, [pc, #212]	; (8007fd8 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4933      	ldr	r1, [pc, #204]	; (8007fdc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007f22:	f06f 0306 	mvn.w	r3, #6
 8007f26:	e053      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8007f28:	7a3b      	ldrb	r3, [r7, #8]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d103      	bne.n	8007f36 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007f36:	7abb      	ldrb	r3, [r7, #10]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d103      	bne.n	8007f44 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f043 0304 	orr.w	r3, r3, #4
 8007f42:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007f44:	7a7b      	ldrb	r3, [r7, #9]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10a      	bne.n	8007f60 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007f52:	e005      	b.n	8007f60 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007f54:	f06f 0301 	mvn.w	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007f5a:	e002      	b.n	8007f62 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8007f5c:	bf00      	nop
 8007f5e:	e000      	b.n	8007f62 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8007f60:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	e031      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e02a      	b.n	8007fc8 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	4013      	ands	r3, r2
 8007f78:	6a3a      	ldr	r2, [r7, #32]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d11e      	bne.n	8007fbc <IKS01A2_ENV_SENSOR_Init+0x154>
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	4013      	ands	r3, r2
 8007f84:	6a3a      	ldr	r2, [r7, #32]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d118      	bne.n	8007fbc <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007f8a:	4a15      	ldr	r2, [pc, #84]	; (8007fe0 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f92:	4814      	ldr	r0, [pc, #80]	; (8007fe4 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	490d      	ldr	r1, [pc, #52]	; (8007fdc <IKS01A2_ENV_SENSOR_Init+0x174>)
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007fb6:	f06f 0304 	mvn.w	r3, #4
 8007fba:	e009      	b.n	8007fd0 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d9d1      	bls.n	8007f72 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3728      	adds	r7, #40	; 0x28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200014a4 	.word	0x200014a4
 8007fdc:	20001b54 	.word	0x20001b54
 8007fe0:	20000148 	.word	0x20000148
 8007fe4:	2000148c 	.word	0x2000148c

08007fe8 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d903      	bls.n	8008000 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007ff8:	f06f 0301 	mvn.w	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e028      	b.n	8008052 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008000:	4a16      	ldr	r2, [pc, #88]	; (800805c <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	4013      	ands	r3, r2
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d11c      	bne.n	800804c <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008012:	4a13      	ldr	r2, [pc, #76]	; (8008060 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800801a:	4812      	ldr	r0, [pc, #72]	; (8008064 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	440b      	add	r3, r1
 8008026:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	490e      	ldr	r1, [pc, #56]	; (8008068 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800803e:	f06f 0304 	mvn.w	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e005      	b.n	8008052 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e002      	b.n	8008052 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800804c:	f06f 0301 	mvn.w	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008052:	68fb      	ldr	r3, [r7, #12]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200014ac 	.word	0x200014ac
 8008060:	20000148 	.word	0x20000148
 8008064:	2000148c 	.word	0x2000148c
 8008068:	20001b54 	.word	0x20001b54

0800806c <IKS01A2_ENV_SENSOR_Disable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d903      	bls.n	8008084 <IKS01A2_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800807c:	f06f 0301 	mvn.w	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e028      	b.n	80080d6 <IKS01A2_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <IKS01A2_ENV_SENSOR_Disable+0x74>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4013      	ands	r3, r2
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d11c      	bne.n	80080d0 <IKS01A2_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008096:	4a13      	ldr	r2, [pc, #76]	; (80080e4 <IKS01A2_ENV_SENSOR_Disable+0x78>)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800809e:	4812      	ldr	r0, [pc, #72]	; (80080e8 <IKS01A2_ENV_SENSOR_Disable+0x7c>)
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	440b      	add	r3, r1
 80080aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	490e      	ldr	r1, [pc, #56]	; (80080ec <IKS01A2_ENV_SENSOR_Disable+0x80>)
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <IKS01A2_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080c2:	f06f 0304 	mvn.w	r3, #4
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e005      	b.n	80080d6 <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e002      	b.n	80080d6 <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80080d0:	f06f 0301 	mvn.w	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	200014ac 	.word	0x200014ac
 80080e4:	20000148 	.word	0x20000148
 80080e8:	2000148c 	.word	0x2000148c
 80080ec:	20001b54 	.word	0x20001b54

080080f0 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d903      	bls.n	800810a <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008102:	f06f 0301 	mvn.w	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e029      	b.n	800815e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800810a:	4a17      	ldr	r2, [pc, #92]	; (8008168 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4013      	ands	r3, r2
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d11d      	bne.n	8008158 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008124:	4812      	ldr	r0, [pc, #72]	; (8008170 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4613      	mov	r3, r2
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	4413      	add	r3, r2
 800812e:	440b      	add	r3, r1
 8008130:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	490f      	ldr	r1, [pc, #60]	; (8008174 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800814a:	f06f 0304 	mvn.w	r3, #4
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e005      	b.n	800815e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e002      	b.n	800815e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008158:	f06f 0301 	mvn.w	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800815e:	697b      	ldr	r3, [r7, #20]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200014ac 	.word	0x200014ac
 800816c:	20000148 	.word	0x20000148
 8008170:	2000148c 	.word	0x2000148c
 8008174:	20001b54 	.word	0x20001b54

08008178 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b090      	sub	sp, #64	; 0x40
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8008180:	2300      	movs	r3, #0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008184:	2300      	movs	r3, #0
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008188:	23bf      	movs	r3, #191	; 0xbf
 800818a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800818e:	4b49      	ldr	r3, [pc, #292]	; (80082b4 <HTS221_0_Probe+0x13c>)
 8008190:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008192:	4b49      	ldr	r3, [pc, #292]	; (80082b8 <HTS221_0_Probe+0x140>)
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008196:	4b49      	ldr	r3, [pc, #292]	; (80082bc <HTS221_0_Probe+0x144>)
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800819a:	4b49      	ldr	r3, [pc, #292]	; (80082c0 <HTS221_0_Probe+0x148>)
 800819c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800819e:	4b49      	ldr	r3, [pc, #292]	; (80082c4 <HTS221_0_Probe+0x14c>)
 80081a0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80081a2:	f107 0320 	add.w	r3, r7, #32
 80081a6:	4619      	mov	r1, r3
 80081a8:	4847      	ldr	r0, [pc, #284]	; (80082c8 <HTS221_0_Probe+0x150>)
 80081aa:	f7fb fb95 	bl	80038d8 <HTS221_RegisterBusIO>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081b4:	f06f 0306 	mvn.w	r3, #6
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ba:	e076      	b.n	80082aa <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80081bc:	f107 031f 	add.w	r3, r7, #31
 80081c0:	4619      	mov	r1, r3
 80081c2:	4841      	ldr	r0, [pc, #260]	; (80082c8 <HTS221_0_Probe+0x150>)
 80081c4:	f7fb fc0d 	bl	80039e2 <HTS221_ReadID>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081ce:	f06f 0306 	mvn.w	r3, #6
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d4:	e069      	b.n	80082aa <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80081d6:	7ffb      	ldrb	r3, [r7, #31]
 80081d8:	2bbc      	cmp	r3, #188	; 0xbc
 80081da:	d003      	beq.n	80081e4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081dc:	f06f 0306 	mvn.w	r3, #6
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e2:	e062      	b.n	80082aa <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	4619      	mov	r1, r3
 80081ea:	4837      	ldr	r0, [pc, #220]	; (80082c8 <HTS221_0_Probe+0x150>)
 80081ec:	f7fb fc10 	bl	8003a10 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80081f0:	7b3b      	ldrb	r3, [r7, #12]
 80081f2:	461a      	mov	r2, r3
 80081f4:	7b7b      	ldrb	r3, [r7, #13]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80081fe:	4313      	orrs	r3, r2
 8008200:	4a32      	ldr	r2, [pc, #200]	; (80082cc <HTS221_0_Probe+0x154>)
 8008202:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8008204:	4b32      	ldr	r3, [pc, #200]	; (80082d0 <HTS221_0_Probe+0x158>)
 8008206:	4a30      	ldr	r2, [pc, #192]	; (80082c8 <HTS221_0_Probe+0x150>)
 8008208:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800820a:	4b32      	ldr	r3, [pc, #200]	; (80082d4 <HTS221_0_Probe+0x15c>)
 800820c:	4a32      	ldr	r2, [pc, #200]	; (80082d8 <HTS221_0_Probe+0x160>)
 800820e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d11d      	bne.n	8008252 <HTS221_0_Probe+0xda>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <HTS221_0_Probe+0xda>
 8008220:	7b3b      	ldrb	r3, [r7, #12]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d115      	bne.n	8008252 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8008226:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <HTS221_0_Probe+0x164>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	4a2d      	ldr	r2, [pc, #180]	; (80082e0 <HTS221_0_Probe+0x168>)
 800822c:	492d      	ldr	r1, [pc, #180]	; (80082e4 <HTS221_0_Probe+0x16c>)
 800822e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8008232:	4b28      	ldr	r3, [pc, #160]	; (80082d4 <HTS221_0_Probe+0x15c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a25      	ldr	r2, [pc, #148]	; (80082d0 <HTS221_0_Probe+0x158>)
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008246:	f06f 0304 	mvn.w	r3, #4
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800824c:	e001      	b.n	8008252 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11d      	bne.n	8008294 <HTS221_0_Probe+0x11c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d018      	beq.n	8008294 <HTS221_0_Probe+0x11c>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d115      	bne.n	8008294 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008268:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <HTS221_0_Probe+0x164>)
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HTS221_0_Probe+0x168>)
 800826e:	491e      	ldr	r1, [pc, #120]	; (80082e8 <HTS221_0_Probe+0x170>)
 8008270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <HTS221_0_Probe+0x15c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <HTS221_0_Probe+0x158>)
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	4610      	mov	r0, r2
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008288:	f06f 0304 	mvn.w	r3, #4
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800828e:	e001      	b.n	8008294 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d107      	bne.n	80082aa <HTS221_0_Probe+0x132>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80082a4:	f06f 0304 	mvn.w	r3, #4
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3740      	adds	r7, #64	; 0x40
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	08003331 	.word	0x08003331
 80082b8:	080033ad 	.word	0x080033ad
 80082bc:	08003461 	.word	0x08003461
 80082c0:	080033fd 	.word	0x080033fd
 80082c4:	080034c5 	.word	0x080034c5
 80082c8:	200014b4 	.word	0x200014b4
 80082cc:	200014ac 	.word	0x200014ac
 80082d0:	20001b54 	.word	0x20001b54
 80082d4:	200014a4 	.word	0x200014a4
 80082d8:	20000018 	.word	0x20000018
 80082dc:	20000148 	.word	0x20000148
 80082e0:	2000148c 	.word	0x2000148c
 80082e4:	2000003c 	.word	0x2000003c
 80082e8:	20000028 	.word	0x20000028

080082ec <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b090      	sub	sp, #64	; 0x40
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80082f8:	2300      	movs	r3, #0
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80082fc:	23bb      	movs	r3, #187	; 0xbb
 80082fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008302:	4b4a      	ldr	r3, [pc, #296]	; (800842c <LPS22HB_0_Probe+0x140>)
 8008304:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008306:	4b4a      	ldr	r3, [pc, #296]	; (8008430 <LPS22HB_0_Probe+0x144>)
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800830a:	4b4a      	ldr	r3, [pc, #296]	; (8008434 <LPS22HB_0_Probe+0x148>)
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800830e:	4b4a      	ldr	r3, [pc, #296]	; (8008438 <LPS22HB_0_Probe+0x14c>)
 8008310:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008312:	4b4a      	ldr	r3, [pc, #296]	; (800843c <LPS22HB_0_Probe+0x150>)
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8008316:	f107 0320 	add.w	r3, r7, #32
 800831a:	4619      	mov	r1, r3
 800831c:	4848      	ldr	r0, [pc, #288]	; (8008440 <LPS22HB_0_Probe+0x154>)
 800831e:	f7fc f8f9 	bl	8004514 <LPS22HB_RegisterBusIO>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008328:	f06f 0306 	mvn.w	r3, #6
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832e:	e078      	b.n	8008422 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8008330:	f107 031f 	add.w	r3, r7, #31
 8008334:	4619      	mov	r1, r3
 8008336:	4842      	ldr	r0, [pc, #264]	; (8008440 <LPS22HB_0_Probe+0x154>)
 8008338:	f7fc f991 	bl	800465e <LPS22HB_ReadID>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008342:	f06f 0306 	mvn.w	r3, #6
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008348:	e06b      	b.n	8008422 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800834a:	7ffb      	ldrb	r3, [r7, #31]
 800834c:	2bb1      	cmp	r3, #177	; 0xb1
 800834e:	d003      	beq.n	8008358 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008350:	f06f 0306 	mvn.w	r3, #6
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008356:	e064      	b.n	8008422 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4619      	mov	r1, r3
 800835e:	4838      	ldr	r0, [pc, #224]	; (8008440 <LPS22HB_0_Probe+0x154>)
 8008360:	f7fc f994 	bl	800468c <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008364:	7b3b      	ldrb	r3, [r7, #12]
 8008366:	461a      	mov	r2, r3
 8008368:	7b7b      	ldrb	r3, [r7, #13]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008372:	4313      	orrs	r3, r2
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <LPS22HB_0_Probe+0x158>)
 8008376:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8008378:	4b33      	ldr	r3, [pc, #204]	; (8008448 <LPS22HB_0_Probe+0x15c>)
 800837a:	4a31      	ldr	r2, [pc, #196]	; (8008440 <LPS22HB_0_Probe+0x154>)
 800837c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800837e:	4b33      	ldr	r3, [pc, #204]	; (800844c <LPS22HB_0_Probe+0x160>)
 8008380:	4a33      	ldr	r2, [pc, #204]	; (8008450 <LPS22HB_0_Probe+0x164>)
 8008382:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11e      	bne.n	80083c8 <LPS22HB_0_Probe+0xdc>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d019      	beq.n	80083c8 <LPS22HB_0_Probe+0xdc>
 8008394:	7b3b      	ldrb	r3, [r7, #12]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d116      	bne.n	80083c8 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800839a:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <LPS22HB_0_Probe+0x168>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	4a2e      	ldr	r2, [pc, #184]	; (8008458 <LPS22HB_0_Probe+0x16c>)
 80083a0:	3303      	adds	r3, #3
 80083a2:	492e      	ldr	r1, [pc, #184]	; (800845c <LPS22HB_0_Probe+0x170>)
 80083a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80083a8:	4b28      	ldr	r3, [pc, #160]	; (800844c <LPS22HB_0_Probe+0x160>)
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a26      	ldr	r2, [pc, #152]	; (8008448 <LPS22HB_0_Probe+0x15c>)
 80083b0:	6852      	ldr	r2, [r2, #4]
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083bc:	f06f 0304 	mvn.w	r3, #4
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083c2:	e001      	b.n	80083c8 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80083c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d11e      	bne.n	800840c <LPS22HB_0_Probe+0x120>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d019      	beq.n	800840c <LPS22HB_0_Probe+0x120>
 80083d8:	7b7b      	ldrb	r3, [r7, #13]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d116      	bne.n	800840c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <LPS22HB_0_Probe+0x168>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <LPS22HB_0_Probe+0x16c>)
 80083e4:	3303      	adds	r3, #3
 80083e6:	491e      	ldr	r1, [pc, #120]	; (8008460 <LPS22HB_0_Probe+0x174>)
 80083e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80083ec:	4b17      	ldr	r3, [pc, #92]	; (800844c <LPS22HB_0_Probe+0x160>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <LPS22HB_0_Probe+0x15c>)
 80083f4:	6852      	ldr	r2, [r2, #4]
 80083f6:	4610      	mov	r0, r2
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008400:	f06f 0304 	mvn.w	r3, #4
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008406:	e001      	b.n	800840c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <LPS22HB_0_Probe+0x136>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800841c:	f06f 0304 	mvn.w	r3, #4
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008424:	4618      	mov	r0, r3
 8008426:	3740      	adds	r7, #64	; 0x40
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	08003331 	.word	0x08003331
 8008430:	080033ad 	.word	0x080033ad
 8008434:	08003461 	.word	0x08003461
 8008438:	080033fd 	.word	0x080033fd
 800843c:	080034c5 	.word	0x080034c5
 8008440:	200014e0 	.word	0x200014e0
 8008444:	200014ac 	.word	0x200014ac
 8008448:	20001b54 	.word	0x20001b54
 800844c:	200014a4 	.word	0x200014a4
 8008450:	20000050 	.word	0x20000050
 8008454:	20000148 	.word	0x20000148
 8008458:	2000148c 	.word	0x2000148c
 800845c:	20000074 	.word	0x20000074
 8008460:	20000060 	.word	0x20000060

08008464 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	; 0x38
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008472:	2301      	movs	r3, #1
 8008474:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d06e      	beq.n	800855e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b02      	cmp	r3, #2
 8008484:	f200 809d 	bhi.w	80085c2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d032      	beq.n	80084fa <IKS01A2_MOTION_SENSOR_Init+0x96>
 8008494:	e095      	b.n	80085c2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008496:	6838      	ldr	r0, [r7, #0]
 8008498:	f000 fa32 	bl	8008900 <LSM6DSL_0_Probe>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	e0cc      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80084a8:	4a68      	ldr	r2, [pc, #416]	; (800864c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	4967      	ldr	r1, [pc, #412]	; (8008650 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084ba:	f107 010c 	add.w	r1, r7, #12
 80084be:	4610      	mov	r0, r2
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80084c8:	f06f 0306 	mvn.w	r3, #6
 80084cc:	e0b9      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80084ce:	7b3b      	ldrb	r3, [r7, #12]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d103      	bne.n	80084dc <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	f043 0302 	orr.w	r3, r3, #2
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80084dc:	7b7b      	ldrb	r3, [r7, #13]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d103      	bne.n	80084ea <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d16c      	bne.n	80085ca <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f043 0304 	orr.w	r3, r3, #4
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80084f8:	e067      	b.n	80085ca <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80084fa:	6838      	ldr	r0, [r7, #0]
 80084fc:	f000 fabc 	bl	8008a78 <LSM303AGR_ACC_0_Probe>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008506:	f04f 33ff 	mov.w	r3, #4294967295
 800850a:	e09a      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800850c:	4a4f      	ldr	r2, [pc, #316]	; (800864c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	494e      	ldr	r1, [pc, #312]	; (8008650 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800851e:	f107 010c 	add.w	r1, r7, #12
 8008522:	4610      	mov	r0, r2
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800852c:	f06f 0306 	mvn.w	r3, #6
 8008530:	e087      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008532:	7b3b      	ldrb	r3, [r7, #12]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d103      	bne.n	8008540 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	f043 0302 	orr.w	r3, r3, #2
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008540:	7b7b      	ldrb	r3, [r7, #13]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d103      	bne.n	800854e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d13c      	bne.n	80085ce <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	f043 0304 	orr.w	r3, r3, #4
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800855c:	e037      	b.n	80085ce <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800855e:	6838      	ldr	r0, [r7, #0]
 8008560:	f000 fb2e 	bl	8008bc0 <LSM303AGR_MAG_0_Probe>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	e068      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008570:	4a36      	ldr	r2, [pc, #216]	; (800864c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	4935      	ldr	r1, [pc, #212]	; (8008650 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008582:	f107 010c 	add.w	r1, r7, #12
 8008586:	4610      	mov	r0, r2
 8008588:	4798      	blx	r3
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008590:	f06f 0306 	mvn.w	r3, #6
 8008594:	e055      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008596:	7b3b      	ldrb	r3, [r7, #12]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d103      	bne.n	80085a4 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	f043 0302 	orr.w	r3, r3, #2
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80085a4:	7b7b      	ldrb	r3, [r7, #13]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d103      	bne.n	80085b2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10c      	bne.n	80085d2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	f043 0304 	orr.w	r3, r3, #4
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80085c0:	e007      	b.n	80085d2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80085c2:	f06f 0301 	mvn.w	r3, #1
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80085c8:	e004      	b.n	80085d4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80085d2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80085da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085dc:	e031      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80085de:	2300      	movs	r3, #0
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e2:	e02a      	b.n	800863a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	4013      	ands	r3, r2
 80085ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d11e      	bne.n	800862e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 80085f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	4013      	ands	r3, r2
 80085f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d118      	bne.n	800862e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80085fc:	4a15      	ldr	r2, [pc, #84]	; (8008654 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008604:	4814      	ldr	r0, [pc, #80]	; (8008658 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	440b      	add	r3, r1
 8008610:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	490e      	ldr	r1, [pc, #56]	; (8008650 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800861e:	4610      	mov	r0, r2
 8008620:	4798      	blx	r3
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008628:	f06f 0304 	mvn.w	r3, #4
 800862c:	e009      	b.n	8008642 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	3301      	adds	r3, #1
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b02      	cmp	r3, #2
 800863e:	d9d1      	bls.n	80085e4 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008642:	4618      	mov	r0, r3
 8008644:	3738      	adds	r7, #56	; 0x38
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20001530 	.word	0x20001530
 8008650:	20001b5c 	.word	0x20001b5c
 8008654:	2000015c 	.word	0x2000015c
 8008658:	2000150c 	.word	0x2000150c

0800865c <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d903      	bls.n	8008674 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800866c:	f06f 0301 	mvn.w	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e028      	b.n	80086c6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008674:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4013      	ands	r3, r2
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d11c      	bne.n	80086c0 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008686:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800868e:	4812      	ldr	r0, [pc, #72]	; (80086d8 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	4413      	add	r3, r2
 8008698:	440b      	add	r3, r1
 800869a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	490e      	ldr	r1, [pc, #56]	; (80086dc <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086b2:	f06f 0304 	mvn.w	r3, #4
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	e005      	b.n	80086c6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e002      	b.n	80086c6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80086c0:	f06f 0301 	mvn.w	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80086c6:	68fb      	ldr	r3, [r7, #12]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	2000153c 	.word	0x2000153c
 80086d4:	2000015c 	.word	0x2000015c
 80086d8:	2000150c 	.word	0x2000150c
 80086dc:	20001b5c 	.word	0x20001b5c

080086e0 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d903      	bls.n	80086f8 <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80086f0:	f06f 0301 	mvn.w	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e028      	b.n	800874a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80086f8:	4a16      	ldr	r2, [pc, #88]	; (8008754 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	4013      	ands	r3, r2
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d11c      	bne.n	8008744 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800870a:	4a13      	ldr	r2, [pc, #76]	; (8008758 <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008712:	4812      	ldr	r0, [pc, #72]	; (800875c <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	4413      	add	r3, r2
 800871c:	440b      	add	r3, r1
 800871e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	490e      	ldr	r1, [pc, #56]	; (8008760 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008736:	f06f 0304 	mvn.w	r3, #4
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e005      	b.n	800874a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	e002      	b.n	800874a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008744:	f06f 0301 	mvn.w	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800874a:	68fb      	ldr	r3, [r7, #12]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	2000153c 	.word	0x2000153c
 8008758:	2000015c 	.word	0x2000015c
 800875c:	2000150c 	.word	0x2000150c
 8008760:	20001b5c 	.word	0x20001b5c

08008764 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d903      	bls.n	800877e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008776:	f06f 0301 	mvn.w	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	e029      	b.n	80087d2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800877e:	4a17      	ldr	r2, [pc, #92]	; (80087dc <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	d11d      	bne.n	80087cc <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008790:	4a13      	ldr	r2, [pc, #76]	; (80087e0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008798:	4812      	ldr	r0, [pc, #72]	; (80087e4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4613      	mov	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	4413      	add	r3, r2
 80087a2:	440b      	add	r3, r1
 80087a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	490f      	ldr	r1, [pc, #60]	; (80087e8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80087be:	f06f 0304 	mvn.w	r3, #4
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e005      	b.n	80087d2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	e002      	b.n	80087d2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80087cc:	f06f 0301 	mvn.w	r3, #1
 80087d0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80087d2:	697b      	ldr	r3, [r7, #20]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	2000153c 	.word	0x2000153c
 80087e0:	2000015c 	.word	0x2000015c
 80087e4:	2000150c 	.word	0x2000150c
 80087e8:	20001b5c 	.word	0x20001b5c

080087ec <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d903      	bls.n	8008808 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008800:	f06f 0301 	mvn.w	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	e02a      	b.n	800885e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008808:	4a17      	ldr	r2, [pc, #92]	; (8008868 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4013      	ands	r3, r2
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	d11e      	bne.n	8008858 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800881a:	4a14      	ldr	r2, [pc, #80]	; (800886c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008822:	4813      	ldr	r0, [pc, #76]	; (8008870 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4613      	mov	r3, r2
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	4413      	add	r3, r2
 800882c:	440b      	add	r3, r1
 800882e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	490f      	ldr	r1, [pc, #60]	; (8008874 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800883c:	ed97 0a01 	vldr	s0, [r7, #4]
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800884a:	f06f 0304 	mvn.w	r3, #4
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e005      	b.n	800885e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e002      	b.n	800885e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008858:	f06f 0301 	mvn.w	r3, #1
 800885c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800885e:	697b      	ldr	r3, [r7, #20]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	2000153c 	.word	0x2000153c
 800886c:	2000015c 	.word	0x2000015c
 8008870:	2000150c 	.word	0x2000150c
 8008874:	20001b5c 	.word	0x20001b5c

08008878 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d903      	bls.n	8008892 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800888a:	f06f 0301 	mvn.w	r3, #1
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	e029      	b.n	80088e6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008892:	4a17      	ldr	r2, [pc, #92]	; (80088f0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	4013      	ands	r3, r2
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d11d      	bne.n	80088e0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 80088a4:	4a13      	ldr	r2, [pc, #76]	; (80088f4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088ac:	4812      	ldr	r0, [pc, #72]	; (80088f8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4613      	mov	r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	440b      	add	r3, r1
 80088b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	490f      	ldr	r1, [pc, #60]	; (80088fc <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80088d2:	f06f 0304 	mvn.w	r3, #4
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e005      	b.n	80088e6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	e002      	b.n	80088e6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80088e0:	f06f 0301 	mvn.w	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80088e6:	697b      	ldr	r3, [r7, #20]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	2000153c 	.word	0x2000153c
 80088f4:	2000015c 	.word	0x2000015c
 80088f8:	2000150c 	.word	0x2000150c
 80088fc:	20001b5c 	.word	0x20001b5c

08008900 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b092      	sub	sp, #72	; 0x48
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008908:	2300      	movs	r3, #0
 800890a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800890c:	2300      	movs	r3, #0
 800890e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8008910:	23d7      	movs	r3, #215	; 0xd7
 8008912:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008916:	4b4a      	ldr	r3, [pc, #296]	; (8008a40 <LSM6DSL_0_Probe+0x140>)
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800891a:	4b4a      	ldr	r3, [pc, #296]	; (8008a44 <LSM6DSL_0_Probe+0x144>)
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800891e:	4b4a      	ldr	r3, [pc, #296]	; (8008a48 <LSM6DSL_0_Probe+0x148>)
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008922:	4b4a      	ldr	r3, [pc, #296]	; (8008a4c <LSM6DSL_0_Probe+0x14c>)
 8008924:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008926:	4b4a      	ldr	r3, [pc, #296]	; (8008a50 <LSM6DSL_0_Probe+0x150>)
 8008928:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800892a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800892e:	4619      	mov	r1, r3
 8008930:	4848      	ldr	r0, [pc, #288]	; (8008a54 <LSM6DSL_0_Probe+0x154>)
 8008932:	f7fd ff83 	bl	800683c <LSM6DSL_RegisterBusIO>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800893c:	f06f 0306 	mvn.w	r3, #6
 8008940:	647b      	str	r3, [r7, #68]	; 0x44
 8008942:	e077      	b.n	8008a34 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8008944:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008948:	4619      	mov	r1, r3
 800894a:	4842      	ldr	r0, [pc, #264]	; (8008a54 <LSM6DSL_0_Probe+0x154>)
 800894c:	f7fe f86c 	bl	8006a28 <LSM6DSL_ReadID>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008956:	f06f 0306 	mvn.w	r3, #6
 800895a:	647b      	str	r3, [r7, #68]	; 0x44
 800895c:	e06a      	b.n	8008a34 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800895e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008962:	2b6a      	cmp	r3, #106	; 0x6a
 8008964:	d003      	beq.n	800896e <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008966:	f06f 0306 	mvn.w	r3, #6
 800896a:	647b      	str	r3, [r7, #68]	; 0x44
 800896c:	e062      	b.n	8008a34 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800896e:	f107 0308 	add.w	r3, r7, #8
 8008972:	4619      	mov	r1, r3
 8008974:	4837      	ldr	r0, [pc, #220]	; (8008a54 <LSM6DSL_0_Probe+0x154>)
 8008976:	f7fe f86d 	bl	8006a54 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800897a:	7a7b      	ldrb	r3, [r7, #9]
 800897c:	461a      	mov	r2, r3
 800897e:	7a3b      	ldrb	r3, [r7, #8]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	431a      	orrs	r2, r3
 8008984:	7abb      	ldrb	r3, [r7, #10]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4313      	orrs	r3, r2
 800898a:	4a33      	ldr	r2, [pc, #204]	; (8008a58 <LSM6DSL_0_Probe+0x158>)
 800898c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800898e:	4b33      	ldr	r3, [pc, #204]	; (8008a5c <LSM6DSL_0_Probe+0x15c>)
 8008990:	4a30      	ldr	r2, [pc, #192]	; (8008a54 <LSM6DSL_0_Probe+0x154>)
 8008992:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <LSM6DSL_0_Probe+0x160>)
 8008996:	4a33      	ldr	r2, [pc, #204]	; (8008a64 <LSM6DSL_0_Probe+0x164>)
 8008998:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800899a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899c:	2b00      	cmp	r3, #0
 800899e:	d11d      	bne.n	80089dc <LSM6DSL_0_Probe+0xdc>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d018      	beq.n	80089dc <LSM6DSL_0_Probe+0xdc>
 80089aa:	7a7b      	ldrb	r3, [r7, #9]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d115      	bne.n	80089dc <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80089b0:	4b2d      	ldr	r3, [pc, #180]	; (8008a68 <LSM6DSL_0_Probe+0x168>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4a2d      	ldr	r2, [pc, #180]	; (8008a6c <LSM6DSL_0_Probe+0x16c>)
 80089b6:	492e      	ldr	r1, [pc, #184]	; (8008a70 <LSM6DSL_0_Probe+0x170>)
 80089b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80089bc:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <LSM6DSL_0_Probe+0x160>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a26      	ldr	r2, [pc, #152]	; (8008a5c <LSM6DSL_0_Probe+0x15c>)
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	4610      	mov	r0, r2
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80089d0:	f06f 0304 	mvn.w	r3, #4
 80089d4:	647b      	str	r3, [r7, #68]	; 0x44
 80089d6:	e001      	b.n	80089dc <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80089d8:	2300      	movs	r3, #0
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80089dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d11d      	bne.n	8008a1e <LSM6DSL_0_Probe+0x11e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d018      	beq.n	8008a1e <LSM6DSL_0_Probe+0x11e>
 80089ec:	7a3b      	ldrb	r3, [r7, #8]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d115      	bne.n	8008a1e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <LSM6DSL_0_Probe+0x168>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <LSM6DSL_0_Probe+0x16c>)
 80089f8:	491e      	ldr	r1, [pc, #120]	; (8008a74 <LSM6DSL_0_Probe+0x174>)
 80089fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <LSM6DSL_0_Probe+0x160>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a15      	ldr	r2, [pc, #84]	; (8008a5c <LSM6DSL_0_Probe+0x15c>)
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a12:	f06f 0304 	mvn.w	r3, #4
 8008a16:	647b      	str	r3, [r7, #68]	; 0x44
 8008a18:	e001      	b.n	8008a1e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <LSM6DSL_0_Probe+0x134>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a2e:	f06f 0304 	mvn.w	r3, #4
 8008a32:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3748      	adds	r7, #72	; 0x48
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	08003331 	.word	0x08003331
 8008a44:	080033ad 	.word	0x080033ad
 8008a48:	08003461 	.word	0x08003461
 8008a4c:	080033fd 	.word	0x080033fd
 8008a50:	080034c5 	.word	0x080034c5
 8008a54:	20001548 	.word	0x20001548
 8008a58:	2000153c 	.word	0x2000153c
 8008a5c:	20001b5c 	.word	0x20001b5c
 8008a60:	20001530 	.word	0x20001530
 8008a64:	200000f0 	.word	0x200000f0
 8008a68:	2000015c 	.word	0x2000015c
 8008a6c:	2000150c 	.word	0x2000150c
 8008a70:	20000124 	.word	0x20000124
 8008a74:	20000100 	.word	0x20000100

08008a78 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b092      	sub	sp, #72	; 0x48
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8008a84:	2300      	movs	r3, #0
 8008a86:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8008a88:	2333      	movs	r3, #51	; 0x33
 8008a8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008a8e:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <LSM303AGR_ACC_0_Probe+0x114>)
 8008a90:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <LSM303AGR_ACC_0_Probe+0x118>)
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008a96:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <LSM303AGR_ACC_0_Probe+0x11c>)
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008a9a:	4b3f      	ldr	r3, [pc, #252]	; (8008b98 <LSM303AGR_ACC_0_Probe+0x120>)
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008a9e:	4b3f      	ldr	r3, [pc, #252]	; (8008b9c <LSM303AGR_ACC_0_Probe+0x124>)
 8008aa0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8008aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	483d      	ldr	r0, [pc, #244]	; (8008ba0 <LSM303AGR_ACC_0_Probe+0x128>)
 8008aaa:	f7fc fb11 	bl	80050d0 <LSM303AGR_ACC_RegisterBusIO>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ab4:	f06f 0306 	mvn.w	r3, #6
 8008ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aba:	e062      	b.n	8008b82 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8008abc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4837      	ldr	r0, [pc, #220]	; (8008ba0 <LSM303AGR_ACC_0_Probe+0x128>)
 8008ac4:	f7fc fbc5 	bl	8005252 <LSM303AGR_ACC_ReadID>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ace:	f06f 0306 	mvn.w	r3, #6
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad4:	e055      	b.n	8008b82 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8008ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ada:	2b33      	cmp	r3, #51	; 0x33
 8008adc:	d003      	beq.n	8008ae6 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ade:	f06f 0306 	mvn.w	r3, #6
 8008ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae4:	e04d      	b.n	8008b82 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	482c      	ldr	r0, [pc, #176]	; (8008ba0 <LSM303AGR_ACC_0_Probe+0x128>)
 8008aee:	f7fc fbc7 	bl	8005280 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008af2:	7a7b      	ldrb	r3, [r7, #9]
 8008af4:	461a      	mov	r2, r3
 8008af6:	7a3b      	ldrb	r3, [r7, #8]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8008afc:	7abb      	ldrb	r3, [r7, #10]
 8008afe:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008b00:	4313      	orrs	r3, r2
 8008b02:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <LSM303AGR_ACC_0_Probe+0x12c>)
 8008b04:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8008b06:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <LSM303AGR_ACC_0_Probe+0x130>)
 8008b08:	4a25      	ldr	r2, [pc, #148]	; (8008ba0 <LSM303AGR_ACC_0_Probe+0x128>)
 8008b0a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8008b0c:	4b27      	ldr	r3, [pc, #156]	; (8008bac <LSM303AGR_ACC_0_Probe+0x134>)
 8008b0e:	4a28      	ldr	r2, [pc, #160]	; (8008bb0 <LSM303AGR_ACC_0_Probe+0x138>)
 8008b10:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11e      	bne.n	8008b56 <LSM303AGR_ACC_0_Probe+0xde>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d019      	beq.n	8008b56 <LSM303AGR_ACC_0_Probe+0xde>
 8008b22:	7a3b      	ldrb	r3, [r7, #8]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d116      	bne.n	8008b56 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008b28:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <LSM303AGR_ACC_0_Probe+0x13c>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <LSM303AGR_ACC_0_Probe+0x140>)
 8008b2e:	3303      	adds	r3, #3
 8008b30:	4922      	ldr	r1, [pc, #136]	; (8008bbc <LSM303AGR_ACC_0_Probe+0x144>)
 8008b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8008b36:	4b1d      	ldr	r3, [pc, #116]	; (8008bac <LSM303AGR_ACC_0_Probe+0x134>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ba8 <LSM303AGR_ACC_0_Probe+0x130>)
 8008b3e:	6852      	ldr	r2, [r2, #4]
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b4a:	f06f 0304 	mvn.w	r3, #4
 8008b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b50:	e001      	b.n	8008b56 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d107      	bne.n	8008b6c <LSM303AGR_ACC_0_Probe+0xf4>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b66:	f06f 0304 	mvn.w	r3, #4
 8008b6a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d107      	bne.n	8008b82 <LSM303AGR_ACC_0_Probe+0x10a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b7c:	f06f 0304 	mvn.w	r3, #4
 8008b80:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3748      	adds	r7, #72	; 0x48
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08003331 	.word	0x08003331
 8008b90:	080033ad 	.word	0x080033ad
 8008b94:	08003461 	.word	0x08003461
 8008b98:	080033fd 	.word	0x080033fd
 8008b9c:	080034c5 	.word	0x080034c5
 8008ba0:	20001578 	.word	0x20001578
 8008ba4:	2000153c 	.word	0x2000153c
 8008ba8:	20001b5c 	.word	0x20001b5c
 8008bac:	20001530 	.word	0x20001530
 8008bb0:	20000088 	.word	0x20000088
 8008bb4:	2000015c 	.word	0x2000015c
 8008bb8:	2000150c 	.word	0x2000150c
 8008bbc:	20000098 	.word	0x20000098

08008bc0 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b092      	sub	sp, #72	; 0x48
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8008bcc:	2300      	movs	r3, #0
 8008bce:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8008bd0:	233d      	movs	r3, #61	; 0x3d
 8008bd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8008bd6:	4b3f      	ldr	r3, [pc, #252]	; (8008cd4 <LSM303AGR_MAG_0_Probe+0x114>)
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8008bda:	4b3f      	ldr	r3, [pc, #252]	; (8008cd8 <LSM303AGR_MAG_0_Probe+0x118>)
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8008bde:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <LSM303AGR_MAG_0_Probe+0x11c>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8008be2:	4b3f      	ldr	r3, [pc, #252]	; (8008ce0 <LSM303AGR_MAG_0_Probe+0x120>)
 8008be4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8008be6:	4b3f      	ldr	r3, [pc, #252]	; (8008ce4 <LSM303AGR_MAG_0_Probe+0x124>)
 8008be8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8008bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bee:	4619      	mov	r1, r3
 8008bf0:	483d      	ldr	r0, [pc, #244]	; (8008ce8 <LSM303AGR_MAG_0_Probe+0x128>)
 8008bf2:	f7fc fe33 	bl	800585c <LSM303AGR_MAG_RegisterBusIO>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bfc:	f06f 0306 	mvn.w	r3, #6
 8008c00:	647b      	str	r3, [r7, #68]	; 0x44
 8008c02:	e062      	b.n	8008cca <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8008c04:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4837      	ldr	r0, [pc, #220]	; (8008ce8 <LSM303AGR_MAG_0_Probe+0x128>)
 8008c0c:	f7fc fedd 	bl	80059ca <LSM303AGR_MAG_ReadID>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c16:	f06f 0306 	mvn.w	r3, #6
 8008c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1c:	e055      	b.n	8008cca <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8008c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	d003      	beq.n	8008c2e <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008c26:	f06f 0306 	mvn.w	r3, #6
 8008c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2c:	e04d      	b.n	8008cca <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8008c2e:	f107 0308 	add.w	r3, r7, #8
 8008c32:	4619      	mov	r1, r3
 8008c34:	482c      	ldr	r0, [pc, #176]	; (8008ce8 <LSM303AGR_MAG_0_Probe+0x128>)
 8008c36:	f7fc fedf 	bl	80059f8 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008c3a:	7a7b      	ldrb	r3, [r7, #9]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	7a3b      	ldrb	r3, [r7, #8]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8008c44:	7abb      	ldrb	r3, [r7, #10]
 8008c46:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	4a28      	ldr	r2, [pc, #160]	; (8008cec <LSM303AGR_MAG_0_Probe+0x12c>)
 8008c4c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8008c4e:	4b28      	ldr	r3, [pc, #160]	; (8008cf0 <LSM303AGR_MAG_0_Probe+0x130>)
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <LSM303AGR_MAG_0_Probe+0x128>)
 8008c52:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8008c54:	4b27      	ldr	r3, [pc, #156]	; (8008cf4 <LSM303AGR_MAG_0_Probe+0x134>)
 8008c56:	4a28      	ldr	r2, [pc, #160]	; (8008cf8 <LSM303AGR_MAG_0_Probe+0x138>)
 8008c58:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11e      	bne.n	8008c9e <LSM303AGR_MAG_0_Probe+0xde>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d019      	beq.n	8008c9e <LSM303AGR_MAG_0_Probe+0xde>
 8008c6a:	7abb      	ldrb	r3, [r7, #10]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d116      	bne.n	8008c9e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008c70:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <LSM303AGR_MAG_0_Probe+0x13c>)
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	4a22      	ldr	r2, [pc, #136]	; (8008d00 <LSM303AGR_MAG_0_Probe+0x140>)
 8008c76:	3306      	adds	r3, #6
 8008c78:	4922      	ldr	r1, [pc, #136]	; (8008d04 <LSM303AGR_MAG_0_Probe+0x144>)
 8008c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <LSM303AGR_MAG_0_Probe+0x134>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <LSM303AGR_MAG_0_Probe+0x130>)
 8008c86:	6892      	ldr	r2, [r2, #8]
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c92:	f06f 0304 	mvn.w	r3, #4
 8008c96:	647b      	str	r3, [r7, #68]	; 0x44
 8008c98:	e001      	b.n	8008c9e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d107      	bne.n	8008cb4 <LSM303AGR_MAG_0_Probe+0xf4>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cae:	f06f 0304 	mvn.w	r3, #4
 8008cb2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d107      	bne.n	8008cca <LSM303AGR_MAG_0_Probe+0x10a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cc4:	f06f 0304 	mvn.w	r3, #4
 8008cc8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3748      	adds	r7, #72	; 0x48
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	08003331 	.word	0x08003331
 8008cd8:	080033ad 	.word	0x080033ad
 8008cdc:	08003461 	.word	0x08003461
 8008ce0:	080033fd 	.word	0x080033fd
 8008ce4:	080034c5 	.word	0x080034c5
 8008ce8:	200015a4 	.word	0x200015a4
 8008cec:	2000153c 	.word	0x2000153c
 8008cf0:	20001b5c 	.word	0x20001b5c
 8008cf4:	20001530 	.word	0x20001530
 8008cf8:	200000bc 	.word	0x200000bc
 8008cfc:	2000015c 	.word	0x2000015c
 8008d00:	2000150c 	.word	0x2000150c
 8008d04:	200000cc 	.word	0x200000cc

08008d08 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	4a04      	ldr	r2, [pc, #16]	; (8008d28 <BSP_LED_Init+0x20>)
 8008d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d1a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	0801af28 	.word	0x0801af28

08008d2c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <BSP_LED_On+0x28>)
 8008d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3e:	2120      	movs	r1, #32
 8008d40:	2201      	movs	r2, #1
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f930 	bl	8009fa8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000170 	.word	0x20000170

08008d58 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	4a06      	ldr	r2, [pc, #24]	; (8008d80 <BSP_LED_Off+0x28>)
 8008d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6a:	2120      	movs	r1, #32
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 f91a 	bl	8009fa8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000170 	.word	0x20000170

08008d84 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d8a:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8e:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d96:	4b19      	ldr	r3, [pc, #100]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da2:	f107 030c 	add.w	r3, r7, #12
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	605a      	str	r2, [r3, #4]
 8008dac:	609a      	str	r2, [r3, #8]
 8008dae:	60da      	str	r2, [r3, #12]
 8008db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <LED_USER_GPIO_Init+0x78>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	607b      	str	r3, [r7, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2120      	movs	r1, #32
 8008dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008dd2:	f001 f8e9 	bl	8009fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8008dd6:	2320      	movs	r3, #32
 8008dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8008de6:	f107 030c 	add.w	r3, r7, #12
 8008dea:	4619      	mov	r1, r3
 8008dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008df0:	f000 fe24 	bl	8009a3c <HAL_GPIO_Init>

}
 8008df4:	bf00      	nop
 8008df6:	3720      	adds	r7, #32
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40021000 	.word	0x40021000

08008e00 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	460a      	mov	r2, r1
 8008e0a:	71fb      	strb	r3, [r7, #7]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <BSP_PB_Init+0x94>)
 8008e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e1c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8008e1e:	79bb      	ldrb	r3, [r7, #6]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d132      	bne.n	8008e8a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4a1b      	ldr	r2, [pc, #108]	; (8008e98 <BSP_PB_Init+0x98>)
 8008e2a:	441a      	add	r2, r3
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	491b      	ldr	r1, [pc, #108]	; (8008e9c <BSP_PB_Init+0x9c>)
 8008e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f000 fdeb 	bl	8009a12 <HAL_EXTI_GetHandle>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008e42:	f06f 0303 	mvn.w	r3, #3
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	e01f      	b.n	8008e8a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	4a12      	ldr	r2, [pc, #72]	; (8008e98 <BSP_PB_Init+0x98>)
 8008e50:	1898      	adds	r0, r3, r2
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	4a12      	ldr	r2, [pc, #72]	; (8008ea0 <BSP_PB_Init+0xa0>)
 8008e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f000 fdbe 	bl	80099de <HAL_EXTI_RegisterCallback>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008e68:	f06f 0303 	mvn.w	r3, #3
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e00c      	b.n	8008e8a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008e70:	2028      	movs	r0, #40	; 0x28
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4a0b      	ldr	r2, [pc, #44]	; (8008ea4 <BSP_PB_Init+0xa4>)
 8008e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f000 fa96 	bl	80093ae <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008e82:	2328      	movs	r3, #40	; 0x28
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 faae 	bl	80093e6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	0801af2c 	.word	0x0801af2c
 8008e98:	20000178 	.word	0x20000178
 8008e9c:	0801af30 	.word	0x0801af30
 8008ea0:	0801af34 	.word	0x0801af34
 8008ea4:	0801af38 	.word	0x0801af38

08008ea8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	4a09      	ldr	r2, [pc, #36]	; (8008edc <BSP_PB_GetState+0x34>)
 8008eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 f859 	bl	8009f78 <HAL_GPIO_ReadPin>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20000174 	.word	0x20000174

08008ee0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f7f8 fab5 	bl	8001454 <BSP_PB_Callback>
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ef6:	4b19      	ldr	r3, [pc, #100]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008efa:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008efc:	f043 0304 	orr.w	r3, r3, #4
 8008f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f02:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	60bb      	str	r3, [r7, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f0e:	f107 030c 	add.w	r3, r7, #12
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	605a      	str	r2, [r3, #4]
 8008f18:	609a      	str	r2, [r3, #8]
 8008f1a:	60da      	str	r2, [r3, #12]
 8008f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f22:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008f24:	f043 0304 	orr.w	r3, r3, #4
 8008f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <BUTTON_USER_GPIO_Init+0x6c>)
 8008f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008f3c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4804      	ldr	r0, [pc, #16]	; (8008f60 <BUTTON_USER_GPIO_Init+0x70>)
 8008f4e:	f000 fd75 	bl	8009a3c <HAL_GPIO_Init>

}
 8008f52:	bf00      	nop
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40021000 	.word	0x40021000
 8008f60:	48000800 	.word	0x48000800

08008f64 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d903      	bls.n	8008f80 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008f78:	f06f 0301 	mvn.w	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e025      	b.n	8008fcc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	79fa      	ldrb	r2, [r7, #7]
 8008f84:	4914      	ldr	r1, [pc, #80]	; (8008fd8 <BSP_COM_Init+0x74>)
 8008f86:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f8a:	4814      	ldr	r0, [pc, #80]	; (8008fdc <BSP_COM_Init+0x78>)
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	015b      	lsls	r3, r3, #5
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4403      	add	r3, r0
 8008f96:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8008f98:	79fa      	ldrb	r2, [r7, #7]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	015b      	lsls	r3, r3, #5
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4a0e      	ldr	r2, [pc, #56]	; (8008fdc <BSP_COM_Init+0x78>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f81a 	bl	8008fe0 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008fac:	79fa      	ldrb	r2, [r7, #7]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	015b      	lsls	r3, r3, #5
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <BSP_COM_Init+0x78>)
 8008fb8:	4413      	add	r3, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fa fba8 	bl	8003710 <MX_USART2_UART_Init>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008fc6:	f06f 0303 	mvn.w	r3, #3
 8008fca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000180 	.word	0x20000180
 8008fdc:	20001b68 	.word	0x20001b68

08008fe0 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	; 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008fe8:	4b30      	ldr	r3, [pc, #192]	; (80090ac <USART2_MspInit+0xcc>)
 8008fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fec:	4a2f      	ldr	r2, [pc, #188]	; (80090ac <USART2_MspInit+0xcc>)
 8008fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ff4:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <USART2_MspInit+0xcc>)
 8008ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffc:	613b      	str	r3, [r7, #16]
 8008ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009000:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <USART2_MspInit+0xcc>)
 8009002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009004:	4a29      	ldr	r2, [pc, #164]	; (80090ac <USART2_MspInit+0xcc>)
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800900c:	4b27      	ldr	r3, [pc, #156]	; (80090ac <USART2_MspInit+0xcc>)
 800900e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8009018:	2304      	movs	r3, #4
 800901a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901c:	2302      	movs	r3, #2
 800901e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009024:	2303      	movs	r3, #3
 8009026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009028:	2307      	movs	r3, #7
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4619      	mov	r1, r3
 8009032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009036:	f000 fd01 	bl	8009a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800903a:	2308      	movs	r3, #8
 800903c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800903e:	2302      	movs	r3, #2
 8009040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009046:	2303      	movs	r3, #3
 8009048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800904a:	2307      	movs	r3, #7
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	4619      	mov	r1, r3
 8009054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009058:	f000 fcf0 	bl	8009a3c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 800905c:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <USART2_MspInit+0xd0>)
 800905e:	4a15      	ldr	r2, [pc, #84]	; (80090b4 <USART2_MspInit+0xd4>)
 8009060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8009062:	4b13      	ldr	r3, [pc, #76]	; (80090b0 <USART2_MspInit+0xd0>)
 8009064:	2202      	movs	r2, #2
 8009066:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <USART2_MspInit+0xd0>)
 800906a:	2200      	movs	r2, #0
 800906c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800906e:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <USART2_MspInit+0xd0>)
 8009070:	2200      	movs	r2, #0
 8009072:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <USART2_MspInit+0xd0>)
 8009076:	2280      	movs	r2, #128	; 0x80
 8009078:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800907a:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <USART2_MspInit+0xd0>)
 800907c:	2200      	movs	r2, #0
 800907e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <USART2_MspInit+0xd0>)
 8009082:	2200      	movs	r2, #0
 8009084:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009086:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <USART2_MspInit+0xd0>)
 8009088:	2220      	movs	r2, #32
 800908a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800908c:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <USART2_MspInit+0xd0>)
 800908e:	2200      	movs	r2, #0
 8009090:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8009092:	4807      	ldr	r0, [pc, #28]	; (80090b0 <USART2_MspInit+0xd0>)
 8009094:	f000 faac 	bl	80095f0 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a05      	ldr	r2, [pc, #20]	; (80090b0 <USART2_MspInit+0xd0>)
 800909c:	671a      	str	r2, [r3, #112]	; 0x70
 800909e:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <USART2_MspInit+0xd0>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80090a4:	bf00      	nop
 80090a6:	3728      	adds	r7, #40	; 0x28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40021000 	.word	0x40021000
 80090b0:	20001b0c 	.word	0x20001b0c
 80090b4:	4002006c 	.word	0x4002006c

080090b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <HAL_Init+0x3c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <HAL_Init+0x3c>)
 80090c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090ce:	2003      	movs	r0, #3
 80090d0:	f000 f962 	bl	8009398 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090d4:	2000      	movs	r0, #0
 80090d6:	f000 f80f 	bl	80090f8 <HAL_InitTick>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	71fb      	strb	r3, [r7, #7]
 80090e4:	e001      	b.n	80090ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80090e6:	f7fa f8b9 	bl	800325c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090ea:	79fb      	ldrb	r3, [r7, #7]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40022000 	.word	0x40022000

080090f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009104:	4b17      	ldr	r3, [pc, #92]	; (8009164 <HAL_InitTick+0x6c>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d023      	beq.n	8009154 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800910c:	4b16      	ldr	r3, [pc, #88]	; (8009168 <HAL_InitTick+0x70>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	4b14      	ldr	r3, [pc, #80]	; (8009164 <HAL_InitTick+0x6c>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	4619      	mov	r1, r3
 8009116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800911a:	fbb3 f3f1 	udiv	r3, r3, r1
 800911e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f96d 	bl	8009402 <HAL_SYSTICK_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10f      	bne.n	800914e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b0f      	cmp	r3, #15
 8009132:	d809      	bhi.n	8009148 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009134:	2200      	movs	r2, #0
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	f04f 30ff 	mov.w	r0, #4294967295
 800913c:	f000 f937 	bl	80093ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009140:	4a0a      	ldr	r2, [pc, #40]	; (800916c <HAL_InitTick+0x74>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	e007      	b.n	8009158 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
 800914c:	e004      	b.n	8009158 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	e001      	b.n	8009158 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000188 	.word	0x20000188
 8009168:	20000014 	.word	0x20000014
 800916c:	20000184 	.word	0x20000184

08009170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009174:	4b06      	ldr	r3, [pc, #24]	; (8009190 <HAL_IncTick+0x20>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <HAL_IncTick+0x24>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4413      	add	r3, r2
 8009180:	4a04      	ldr	r2, [pc, #16]	; (8009194 <HAL_IncTick+0x24>)
 8009182:	6013      	str	r3, [r2, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000188 	.word	0x20000188
 8009194:	20001bec 	.word	0x20001bec

08009198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  return uwTick;
 800919c:	4b03      	ldr	r3, [pc, #12]	; (80091ac <HAL_GetTick+0x14>)
 800919e:	681b      	ldr	r3, [r3, #0]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	20001bec 	.word	0x20001bec

080091b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80091b8:	f7ff ffee 	bl	8009198 <HAL_GetTick>
 80091bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d005      	beq.n	80091d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <HAL_Delay+0x44>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80091d6:	bf00      	nop
 80091d8:	f7ff ffde 	bl	8009198 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d8f7      	bhi.n	80091d8 <HAL_Delay+0x28>
  {
  }
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000188 	.word	0x20000188

080091f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009208:	4b0c      	ldr	r3, [pc, #48]	; (800923c <__NVIC_SetPriorityGrouping+0x44>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009214:	4013      	ands	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800922a:	4a04      	ldr	r2, [pc, #16]	; (800923c <__NVIC_SetPriorityGrouping+0x44>)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	60d3      	str	r3, [r2, #12]
}
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	e000ed00 	.word	0xe000ed00

08009240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009244:	4b04      	ldr	r3, [pc, #16]	; (8009258 <__NVIC_GetPriorityGrouping+0x18>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	0a1b      	lsrs	r3, r3, #8
 800924a:	f003 0307 	and.w	r3, r3, #7
}
 800924e:	4618      	mov	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	e000ed00 	.word	0xe000ed00

0800925c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	db0b      	blt.n	8009286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	f003 021f 	and.w	r2, r3, #31
 8009274:	4907      	ldr	r1, [pc, #28]	; (8009294 <__NVIC_EnableIRQ+0x38>)
 8009276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	2001      	movs	r0, #1
 800927e:	fa00 f202 	lsl.w	r2, r0, r2
 8009282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	e000e100 	.word	0xe000e100

08009298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	db0a      	blt.n	80092c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	490c      	ldr	r1, [pc, #48]	; (80092e4 <__NVIC_SetPriority+0x4c>)
 80092b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b6:	0112      	lsls	r2, r2, #4
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	440b      	add	r3, r1
 80092bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80092c0:	e00a      	b.n	80092d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	4908      	ldr	r1, [pc, #32]	; (80092e8 <__NVIC_SetPriority+0x50>)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	3b04      	subs	r3, #4
 80092d0:	0112      	lsls	r2, r2, #4
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	440b      	add	r3, r1
 80092d6:	761a      	strb	r2, [r3, #24]
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	e000e100 	.word	0xe000e100
 80092e8:	e000ed00 	.word	0xe000ed00

080092ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f1c3 0307 	rsb	r3, r3, #7
 8009306:	2b04      	cmp	r3, #4
 8009308:	bf28      	it	cs
 800930a:	2304      	movcs	r3, #4
 800930c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	3304      	adds	r3, #4
 8009312:	2b06      	cmp	r3, #6
 8009314:	d902      	bls.n	800931c <NVIC_EncodePriority+0x30>
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	3b03      	subs	r3, #3
 800931a:	e000      	b.n	800931e <NVIC_EncodePriority+0x32>
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009320:	f04f 32ff 	mov.w	r2, #4294967295
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	fa02 f303 	lsl.w	r3, r2, r3
 800932a:	43da      	mvns	r2, r3
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	401a      	ands	r2, r3
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009334:	f04f 31ff 	mov.w	r1, #4294967295
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	fa01 f303 	lsl.w	r3, r1, r3
 800933e:	43d9      	mvns	r1, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009344:	4313      	orrs	r3, r2
         );
}
 8009346:	4618      	mov	r0, r3
 8009348:	3724      	adds	r7, #36	; 0x24
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
	...

08009354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3b01      	subs	r3, #1
 8009360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009364:	d301      	bcc.n	800936a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009366:	2301      	movs	r3, #1
 8009368:	e00f      	b.n	800938a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800936a:	4a0a      	ldr	r2, [pc, #40]	; (8009394 <SysTick_Config+0x40>)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3b01      	subs	r3, #1
 8009370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009372:	210f      	movs	r1, #15
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	f7ff ff8e 	bl	8009298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <SysTick_Config+0x40>)
 800937e:	2200      	movs	r2, #0
 8009380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009382:	4b04      	ldr	r3, [pc, #16]	; (8009394 <SysTick_Config+0x40>)
 8009384:	2207      	movs	r2, #7
 8009386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	e000e010 	.word	0xe000e010

08009398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff ff29 	bl	80091f8 <__NVIC_SetPriorityGrouping>
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	4603      	mov	r3, r0
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80093c0:	f7ff ff3e 	bl	8009240 <__NVIC_GetPriorityGrouping>
 80093c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	6978      	ldr	r0, [r7, #20]
 80093cc:	f7ff ff8e 	bl	80092ec <NVIC_EncodePriority>
 80093d0:	4602      	mov	r2, r0
 80093d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff ff5d 	bl	8009298 <__NVIC_SetPriority>
}
 80093de:	bf00      	nop
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	4603      	mov	r3, r0
 80093ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff ff31 	bl	800925c <__NVIC_EnableIRQ>
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff ffa2 	bl	8009354 <SysTick_Config>
 8009410:	4603      	mov	r3, r0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e054      	b.n	80094d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7f5b      	ldrb	r3, [r3, #29]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f8 fcda 	bl	8001df8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	791b      	ldrb	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10c      	bne.n	800946c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <HAL_CRC_Init+0xc4>)
 8009458:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0218 	bic.w	r2, r2, #24
 8009468:	609a      	str	r2, [r3, #8]
 800946a:	e00c      	b.n	8009486 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6899      	ldr	r1, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	461a      	mov	r2, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f834 	bl	80094e4 <HAL_CRCEx_Polynomial_Set>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e028      	b.n	80094d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	795b      	ldrb	r3, [r3, #5]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d105      	bne.n	800949a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f04f 32ff 	mov.w	r2, #4294967295
 8009496:	611a      	str	r2, [r3, #16]
 8009498:	e004      	b.n	80094a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6912      	ldr	r2, [r2, #16]
 80094a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	695a      	ldr	r2, [r3, #20]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	04c11db7 	.word	0x04c11db7

080094e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80094f4:	231f      	movs	r3, #31
 80094f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80094f8:	bf00      	nop
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	1e5a      	subs	r2, r3, #1
 80094fe:	613a      	str	r2, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <HAL_CRCEx_Polynomial_Set+0x34>
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0f0      	beq.n	80094fa <HAL_CRCEx_Polynomial_Set+0x16>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b18      	cmp	r3, #24
 800951c:	d846      	bhi.n	80095ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	080095b3 	.word	0x080095b3
 8009528:	080095ad 	.word	0x080095ad
 800952c:	080095ad 	.word	0x080095ad
 8009530:	080095ad 	.word	0x080095ad
 8009534:	080095ad 	.word	0x080095ad
 8009538:	080095ad 	.word	0x080095ad
 800953c:	080095ad 	.word	0x080095ad
 8009540:	080095ad 	.word	0x080095ad
 8009544:	080095a1 	.word	0x080095a1
 8009548:	080095ad 	.word	0x080095ad
 800954c:	080095ad 	.word	0x080095ad
 8009550:	080095ad 	.word	0x080095ad
 8009554:	080095ad 	.word	0x080095ad
 8009558:	080095ad 	.word	0x080095ad
 800955c:	080095ad 	.word	0x080095ad
 8009560:	080095ad 	.word	0x080095ad
 8009564:	08009595 	.word	0x08009595
 8009568:	080095ad 	.word	0x080095ad
 800956c:	080095ad 	.word	0x080095ad
 8009570:	080095ad 	.word	0x080095ad
 8009574:	080095ad 	.word	0x080095ad
 8009578:	080095ad 	.word	0x080095ad
 800957c:	080095ad 	.word	0x080095ad
 8009580:	080095ad 	.word	0x080095ad
 8009584:	08009589 	.word	0x08009589
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b06      	cmp	r3, #6
 800958c:	d913      	bls.n	80095b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009592:	e010      	b.n	80095b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2b07      	cmp	r3, #7
 8009598:	d90f      	bls.n	80095ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800959e:	e00c      	b.n	80095ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	2b0f      	cmp	r3, #15
 80095a4:	d90b      	bls.n	80095be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80095aa:	e008      	b.n	80095be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
      break;
 80095b0:	e006      	b.n	80095c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80095b2:	bf00      	nop
 80095b4:	e004      	b.n	80095c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80095be:	bf00      	nop
  }
  if (status == HAL_OK)
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10d      	bne.n	80095e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f023 0118 	bic.w	r1, r3, #24
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	430a      	orrs	r2, r1
 80095e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	371c      	adds	r7, #28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e098      	b.n	8009734 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	4b4d      	ldr	r3, [pc, #308]	; (8009740 <HAL_DMA_Init+0x150>)
 800960a:	429a      	cmp	r2, r3
 800960c:	d80f      	bhi.n	800962e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	4b4b      	ldr	r3, [pc, #300]	; (8009744 <HAL_DMA_Init+0x154>)
 8009616:	4413      	add	r3, r2
 8009618:	4a4b      	ldr	r2, [pc, #300]	; (8009748 <HAL_DMA_Init+0x158>)
 800961a:	fba2 2303 	umull	r2, r3, r2, r3
 800961e:	091b      	lsrs	r3, r3, #4
 8009620:	009a      	lsls	r2, r3, #2
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a48      	ldr	r2, [pc, #288]	; (800974c <HAL_DMA_Init+0x15c>)
 800962a:	641a      	str	r2, [r3, #64]	; 0x40
 800962c:	e00e      	b.n	800964c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	4b46      	ldr	r3, [pc, #280]	; (8009750 <HAL_DMA_Init+0x160>)
 8009636:	4413      	add	r3, r2
 8009638:	4a43      	ldr	r2, [pc, #268]	; (8009748 <HAL_DMA_Init+0x158>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	091b      	lsrs	r3, r3, #4
 8009640:	009a      	lsls	r2, r3, #2
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a42      	ldr	r2, [pc, #264]	; (8009754 <HAL_DMA_Init+0x164>)
 800964a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009666:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800967c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096a6:	d039      	beq.n	800971c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	4a27      	ldr	r2, [pc, #156]	; (800974c <HAL_DMA_Init+0x15c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d11a      	bne.n	80096e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80096b2:	4b29      	ldr	r3, [pc, #164]	; (8009758 <HAL_DMA_Init+0x168>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	f003 031c 	and.w	r3, r3, #28
 80096be:	210f      	movs	r1, #15
 80096c0:	fa01 f303 	lsl.w	r3, r1, r3
 80096c4:	43db      	mvns	r3, r3
 80096c6:	4924      	ldr	r1, [pc, #144]	; (8009758 <HAL_DMA_Init+0x168>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80096cc:	4b22      	ldr	r3, [pc, #136]	; (8009758 <HAL_DMA_Init+0x168>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6859      	ldr	r1, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f003 031c 	and.w	r3, r3, #28
 80096dc:	fa01 f303 	lsl.w	r3, r1, r3
 80096e0:	491d      	ldr	r1, [pc, #116]	; (8009758 <HAL_DMA_Init+0x168>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]
 80096e6:	e019      	b.n	800971c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80096e8:	4b1c      	ldr	r3, [pc, #112]	; (800975c <HAL_DMA_Init+0x16c>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	f003 031c 	and.w	r3, r3, #28
 80096f4:	210f      	movs	r1, #15
 80096f6:	fa01 f303 	lsl.w	r3, r1, r3
 80096fa:	43db      	mvns	r3, r3
 80096fc:	4917      	ldr	r1, [pc, #92]	; (800975c <HAL_DMA_Init+0x16c>)
 80096fe:	4013      	ands	r3, r2
 8009700:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009702:	4b16      	ldr	r3, [pc, #88]	; (800975c <HAL_DMA_Init+0x16c>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6859      	ldr	r1, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970e:	f003 031c 	and.w	r3, r3, #28
 8009712:	fa01 f303 	lsl.w	r3, r1, r3
 8009716:	4911      	ldr	r1, [pc, #68]	; (800975c <HAL_DMA_Init+0x16c>)
 8009718:	4313      	orrs	r3, r2
 800971a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40020407 	.word	0x40020407
 8009744:	bffdfff8 	.word	0xbffdfff8
 8009748:	cccccccd 	.word	0xcccccccd
 800974c:	40020000 	.word	0x40020000
 8009750:	bffdfbf8 	.word	0xbffdfbf8
 8009754:	40020400 	.word	0x40020400
 8009758:	400200a8 	.word	0x400200a8
 800975c:	400204a8 	.word	0x400204a8

08009760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_DMA_Start_IT+0x20>
 800977c:	2302      	movs	r3, #2
 800977e:	e04b      	b.n	8009818 <HAL_DMA_Start_IT+0xb8>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d13a      	bne.n	800980a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f8e0 	bl	800997e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 020e 	orr.w	r2, r2, #14
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	e00f      	b.n	80097f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0204 	bic.w	r2, r2, #4
 80097e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 020a 	orr.w	r2, r2, #10
 80097f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f042 0201 	orr.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	e005      	b.n	8009816 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009812:	2302      	movs	r3, #2
 8009814:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	f003 031c 	and.w	r3, r3, #28
 8009840:	2204      	movs	r2, #4
 8009842:	409a      	lsls	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4013      	ands	r3, r2
 8009848:	2b00      	cmp	r3, #0
 800984a:	d026      	beq.n	800989a <HAL_DMA_IRQHandler+0x7a>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d021      	beq.n	800989a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0204 	bic.w	r2, r2, #4
 8009872:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	f003 021c 	and.w	r2, r3, #28
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009880:	2104      	movs	r1, #4
 8009882:	fa01 f202 	lsl.w	r2, r1, r2
 8009886:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d071      	beq.n	8009974 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009898:	e06c      	b.n	8009974 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989e:	f003 031c 	and.w	r3, r3, #28
 80098a2:	2202      	movs	r2, #2
 80098a4:	409a      	lsls	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4013      	ands	r3, r2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d02e      	beq.n	800990c <HAL_DMA_IRQHandler+0xec>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d029      	beq.n	800990c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 020a 	bic.w	r2, r2, #10
 80098d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e2:	f003 021c 	and.w	r2, r3, #28
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	2102      	movs	r1, #2
 80098ec:	fa01 f202 	lsl.w	r2, r1, r2
 80098f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d038      	beq.n	8009974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800990a:	e033      	b.n	8009974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009910:	f003 031c 	and.w	r3, r3, #28
 8009914:	2208      	movs	r2, #8
 8009916:	409a      	lsls	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d02a      	beq.n	8009976 <HAL_DMA_IRQHandler+0x156>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f003 0308 	and.w	r3, r3, #8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d025      	beq.n	8009976 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 020e 	bic.w	r2, r2, #14
 8009938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993e:	f003 021c 	and.w	r2, r3, #28
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	2101      	movs	r1, #1
 8009948:	fa01 f202 	lsl.w	r2, r1, r2
 800994c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009974:	bf00      	nop
 8009976:	bf00      	nop
}
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800997e:	b480      	push	{r7}
 8009980:	b085      	sub	sp, #20
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009990:	f003 021c 	and.w	r2, r3, #28
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	2101      	movs	r1, #1
 800999a:	fa01 f202 	lsl.w	r2, r1, r2
 800999e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b10      	cmp	r3, #16
 80099ae:	d108      	bne.n	80099c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099c0:	e007      	b.n	80099d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	60da      	str	r2, [r3, #12]
}
 80099d2:	bf00      	nop
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80099de:	b480      	push	{r7}
 80099e0:	b087      	sub	sp, #28
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	460b      	mov	r3, r1
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d103      	bne.n	80099fe <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]
      break;
 80099fc:	e002      	b.n	8009a04 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
      break;
 8009a02:	bf00      	nop
  }

  return status;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e003      	b.n	8009a2e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
  }
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
	...

08009a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a4a:	e17f      	b.n	8009d4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	2101      	movs	r1, #1
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	fa01 f303 	lsl.w	r3, r1, r3
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8171 	beq.w	8009d46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f003 0303 	and.w	r3, r3, #3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d005      	beq.n	8009a7c <HAL_GPIO_Init+0x40>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d130      	bne.n	8009ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	2203      	movs	r2, #3
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4013      	ands	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	43db      	mvns	r3, r3
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	091b      	lsrs	r3, r3, #4
 8009ac8:	f003 0201 	and.w	r2, r3, #1
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d118      	bne.n	8009b1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009af0:	2201      	movs	r2, #1
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	fa02 f303 	lsl.w	r3, r2, r3
 8009af8:	43db      	mvns	r3, r3
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4013      	ands	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f003 0201 	and.w	r2, r3, #1
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d017      	beq.n	8009b58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	2203      	movs	r2, #3
 8009b34:	fa02 f303 	lsl.w	r3, r2, r3
 8009b38:	43db      	mvns	r3, r3
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d123      	bne.n	8009bac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	08da      	lsrs	r2, r3, #3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3208      	adds	r2, #8
 8009b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f003 0307 	and.w	r3, r3, #7
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	220f      	movs	r2, #15
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	43db      	mvns	r3, r3
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4013      	ands	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	691a      	ldr	r2, [r3, #16]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	08da      	lsrs	r2, r3, #3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3208      	adds	r2, #8
 8009ba6:	6939      	ldr	r1, [r7, #16]
 8009ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f003 0203 	and.w	r2, r3, #3
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80ac 	beq.w	8009d46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bee:	4b5f      	ldr	r3, [pc, #380]	; (8009d6c <HAL_GPIO_Init+0x330>)
 8009bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf2:	4a5e      	ldr	r2, [pc, #376]	; (8009d6c <HAL_GPIO_Init+0x330>)
 8009bf4:	f043 0301 	orr.w	r3, r3, #1
 8009bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8009bfa:	4b5c      	ldr	r3, [pc, #368]	; (8009d6c <HAL_GPIO_Init+0x330>)
 8009bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	60bb      	str	r3, [r7, #8]
 8009c04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009c06:	4a5a      	ldr	r2, [pc, #360]	; (8009d70 <HAL_GPIO_Init+0x334>)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	089b      	lsrs	r3, r3, #2
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	220f      	movs	r2, #15
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	43db      	mvns	r3, r3
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	4013      	ands	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009c30:	d025      	beq.n	8009c7e <HAL_GPIO_Init+0x242>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a4f      	ldr	r2, [pc, #316]	; (8009d74 <HAL_GPIO_Init+0x338>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01f      	beq.n	8009c7a <HAL_GPIO_Init+0x23e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a4e      	ldr	r2, [pc, #312]	; (8009d78 <HAL_GPIO_Init+0x33c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d019      	beq.n	8009c76 <HAL_GPIO_Init+0x23a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a4d      	ldr	r2, [pc, #308]	; (8009d7c <HAL_GPIO_Init+0x340>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d013      	beq.n	8009c72 <HAL_GPIO_Init+0x236>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a4c      	ldr	r2, [pc, #304]	; (8009d80 <HAL_GPIO_Init+0x344>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00d      	beq.n	8009c6e <HAL_GPIO_Init+0x232>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a4b      	ldr	r2, [pc, #300]	; (8009d84 <HAL_GPIO_Init+0x348>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <HAL_GPIO_Init+0x22e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a4a      	ldr	r2, [pc, #296]	; (8009d88 <HAL_GPIO_Init+0x34c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <HAL_GPIO_Init+0x22a>
 8009c62:	2306      	movs	r3, #6
 8009c64:	e00c      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c66:	2307      	movs	r3, #7
 8009c68:	e00a      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c6a:	2305      	movs	r3, #5
 8009c6c:	e008      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c6e:	2304      	movs	r3, #4
 8009c70:	e006      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c72:	2303      	movs	r3, #3
 8009c74:	e004      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e002      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <HAL_GPIO_Init+0x244>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	f002 0203 	and.w	r2, r2, #3
 8009c86:	0092      	lsls	r2, r2, #2
 8009c88:	4093      	lsls	r3, r2
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009c90:	4937      	ldr	r1, [pc, #220]	; (8009d70 <HAL_GPIO_Init+0x334>)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	089b      	lsrs	r3, r3, #2
 8009c96:	3302      	adds	r3, #2
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	43db      	mvns	r3, r3
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4013      	ands	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009cc2:	4a32      	ldr	r2, [pc, #200]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009cc8:	4b30      	ldr	r3, [pc, #192]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009cec:	4a27      	ldr	r2, [pc, #156]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009cf2:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	43db      	mvns	r3, r3
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009d16:	4a1d      	ldr	r2, [pc, #116]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009d1c:	4b1b      	ldr	r3, [pc, #108]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	43db      	mvns	r3, r3
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009d40:	4a12      	ldr	r2, [pc, #72]	; (8009d8c <HAL_GPIO_Init+0x350>)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	fa22 f303 	lsr.w	r3, r2, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f47f ae78 	bne.w	8009a4c <HAL_GPIO_Init+0x10>
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	40021000 	.word	0x40021000
 8009d70:	40010000 	.word	0x40010000
 8009d74:	48000400 	.word	0x48000400
 8009d78:	48000800 	.word	0x48000800
 8009d7c:	48000c00 	.word	0x48000c00
 8009d80:	48001000 	.word	0x48001000
 8009d84:	48001400 	.word	0x48001400
 8009d88:	48001800 	.word	0x48001800
 8009d8c:	40010400 	.word	0x40010400

08009d90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009d9e:	e0cd      	b.n	8009f3c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009da0:	2201      	movs	r2, #1
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	fa02 f303 	lsl.w	r3, r2, r3
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80c0 	beq.w	8009f36 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009db6:	4a68      	ldr	r2, [pc, #416]	; (8009f58 <HAL_GPIO_DeInit+0x1c8>)
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	089b      	lsrs	r3, r3, #2
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	220f      	movs	r2, #15
 8009dce:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009dde:	d025      	beq.n	8009e2c <HAL_GPIO_DeInit+0x9c>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a5e      	ldr	r2, [pc, #376]	; (8009f5c <HAL_GPIO_DeInit+0x1cc>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d01f      	beq.n	8009e28 <HAL_GPIO_DeInit+0x98>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a5d      	ldr	r2, [pc, #372]	; (8009f60 <HAL_GPIO_DeInit+0x1d0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d019      	beq.n	8009e24 <HAL_GPIO_DeInit+0x94>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a5c      	ldr	r2, [pc, #368]	; (8009f64 <HAL_GPIO_DeInit+0x1d4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <HAL_GPIO_DeInit+0x90>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a5b      	ldr	r2, [pc, #364]	; (8009f68 <HAL_GPIO_DeInit+0x1d8>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d00d      	beq.n	8009e1c <HAL_GPIO_DeInit+0x8c>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a5a      	ldr	r2, [pc, #360]	; (8009f6c <HAL_GPIO_DeInit+0x1dc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d007      	beq.n	8009e18 <HAL_GPIO_DeInit+0x88>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a59      	ldr	r2, [pc, #356]	; (8009f70 <HAL_GPIO_DeInit+0x1e0>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d101      	bne.n	8009e14 <HAL_GPIO_DeInit+0x84>
 8009e10:	2306      	movs	r3, #6
 8009e12:	e00c      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e14:	2307      	movs	r3, #7
 8009e16:	e00a      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e18:	2305      	movs	r3, #5
 8009e1a:	e008      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	e006      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e20:	2303      	movs	r3, #3
 8009e22:	e004      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e002      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <HAL_GPIO_DeInit+0x9e>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	f002 0203 	and.w	r2, r2, #3
 8009e34:	0092      	lsls	r2, r2, #2
 8009e36:	4093      	lsls	r3, r2
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d132      	bne.n	8009ea4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009e3e:	4b4d      	ldr	r3, [pc, #308]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	43db      	mvns	r3, r3
 8009e46:	494b      	ldr	r1, [pc, #300]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009e4c:	4b49      	ldr	r3, [pc, #292]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	43db      	mvns	r3, r3
 8009e54:	4947      	ldr	r1, [pc, #284]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009e5a:	4b46      	ldr	r3, [pc, #280]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	4944      	ldr	r1, [pc, #272]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e64:	4013      	ands	r3, r2
 8009e66:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8009e68:	4b42      	ldr	r3, [pc, #264]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	43db      	mvns	r3, r3
 8009e70:	4940      	ldr	r1, [pc, #256]	; (8009f74 <HAL_GPIO_DeInit+0x1e4>)
 8009e72:	4013      	ands	r3, r2
 8009e74:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 0303 	and.w	r3, r3, #3
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	220f      	movs	r2, #15
 8009e80:	fa02 f303 	lsl.w	r3, r2, r3
 8009e84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009e86:	4a34      	ldr	r2, [pc, #208]	; (8009f58 <HAL_GPIO_DeInit+0x1c8>)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	089b      	lsrs	r3, r3, #2
 8009e8c:	3302      	adds	r3, #2
 8009e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	43da      	mvns	r2, r3
 8009e96:	4830      	ldr	r0, [pc, #192]	; (8009f58 <HAL_GPIO_DeInit+0x1c8>)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	089b      	lsrs	r3, r3, #2
 8009e9c:	400a      	ands	r2, r1
 8009e9e:	3302      	adds	r3, #2
 8009ea0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	2103      	movs	r1, #3
 8009eae:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	08da      	lsrs	r2, r3, #3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3208      	adds	r2, #8
 8009ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	220f      	movs	r2, #15
 8009ece:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed2:	43db      	mvns	r3, r3
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	08d2      	lsrs	r2, r2, #3
 8009ed8:	4019      	ands	r1, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3208      	adds	r2, #8
 8009ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	2103      	movs	r1, #3
 8009eec:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	2101      	movs	r1, #1
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	fa01 f303 	lsl.w	r3, r1, r3
 8009f04:	43db      	mvns	r3, r3
 8009f06:	401a      	ands	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	2103      	movs	r1, #3
 8009f16:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1a:	43db      	mvns	r3, r3
 8009f1c:	401a      	ands	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	2101      	movs	r1, #1
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2e:	43db      	mvns	r3, r3
 8009f30:	401a      	ands	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f47f af2b 	bne.w	8009da0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	40010000 	.word	0x40010000
 8009f5c:	48000400 	.word	0x48000400
 8009f60:	48000800 	.word	0x48000800
 8009f64:	48000c00 	.word	0x48000c00
 8009f68:	48001000 	.word	0x48001000
 8009f6c:	48001400 	.word	0x48001400
 8009f70:	48001800 	.word	0x48001800
 8009f74:	40010400 	.word	0x40010400

08009f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	887b      	ldrh	r3, [r7, #2]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
 8009f94:	e001      	b.n	8009f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	807b      	strh	r3, [r7, #2]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009fb8:	787b      	ldrb	r3, [r7, #1]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009fbe:	887a      	ldrh	r2, [r7, #2]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009fc4:	e002      	b.n	8009fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009fc6:	887a      	ldrh	r2, [r7, #2]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009fe2:	4b08      	ldr	r3, [pc, #32]	; (800a004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d006      	beq.n	8009ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009fee:	4a05      	ldr	r2, [pc, #20]	; (800a004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ff0:	88fb      	ldrh	r3, [r7, #6]
 8009ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f8 fe58 	bl	8002cac <HAL_GPIO_EXTI_Callback>
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	40010400 	.word	0x40010400

0800a008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e081      	b.n	800a11e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7f8 fc16 	bl	8002860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2224      	movs	r2, #36	; 0x24
 800a038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0201 	bic.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a058:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a068:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d107      	bne.n	800a082 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a07e:	609a      	str	r2, [r3, #8]
 800a080:	e006      	b.n	800a090 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a08e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d104      	bne.n	800a0a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	69d9      	ldr	r1, [r3, #28]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1a      	ldr	r2, [r3, #32]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e021      	b.n	800a17c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2224      	movs	r2, #36	; 0x24
 800a13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 0201 	bic.w	r2, r2, #1
 800a14e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7f8 fbe3 	bl	800291c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af02      	add	r7, sp, #8
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	461a      	mov	r2, r3
 800a192:	4603      	mov	r3, r0
 800a194:	817b      	strh	r3, [r7, #10]
 800a196:	460b      	mov	r3, r1
 800a198:	813b      	strh	r3, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	f040 80f9 	bne.w	800a39e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_I2C_Mem_Write+0x34>
 800a1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d105      	bne.n	800a1c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e0ed      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <HAL_I2C_Mem_Write+0x4e>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e0e6      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a1da:	f7fe ffdd 	bl	8009198 <HAL_GetTick>
 800a1de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2319      	movs	r3, #25
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fadd 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e0d1      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2221      	movs	r2, #33	; 0x21
 800a200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2240      	movs	r2, #64	; 0x40
 800a208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a3a      	ldr	r2, [r7, #32]
 800a216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a21c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a224:	88f8      	ldrh	r0, [r7, #6]
 800a226:	893a      	ldrh	r2, [r7, #8]
 800a228:	8979      	ldrh	r1, [r7, #10]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4603      	mov	r3, r0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f9ed 	bl	800a614 <I2C_RequestMemoryWrite>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e0a9      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a250:	b29b      	uxth	r3, r3
 800a252:	2bff      	cmp	r3, #255	; 0xff
 800a254:	d90e      	bls.n	800a274 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	22ff      	movs	r2, #255	; 0xff
 800a25a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a260:	b2da      	uxtb	r2, r3
 800a262:	8979      	ldrh	r1, [r7, #10]
 800a264:	2300      	movs	r3, #0
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 fc45 	bl	800aafc <I2C_TransferConfig>
 800a272:	e00f      	b.n	800a294 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a282:	b2da      	uxtb	r2, r3
 800a284:	8979      	ldrh	r1, [r7, #10]
 800a286:	2300      	movs	r3, #0
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fc34 	bl	800aafc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fac7 	bl	800a82c <I2C_WaitOnTXISFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e07b      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d034      	beq.n	800a34c <HAL_I2C_Mem_Write+0x1c8>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d130      	bne.n	800a34c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2180      	movs	r1, #128	; 0x80
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 fa59 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e04d      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2bff      	cmp	r3, #255	; 0xff
 800a30c:	d90e      	bls.n	800a32c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	22ff      	movs	r2, #255	; 0xff
 800a312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	8979      	ldrh	r1, [r7, #10]
 800a31c:	2300      	movs	r3, #0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fbe9 	bl	800aafc <I2C_TransferConfig>
 800a32a:	e00f      	b.n	800a34c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	8979      	ldrh	r1, [r7, #10]
 800a33e:	2300      	movs	r3, #0
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fbd8 	bl	800aafc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d19e      	bne.n	800a294 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 faa6 	bl	800a8ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e01a      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2220      	movs	r2, #32
 800a370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6859      	ldr	r1, [r3, #4]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <HAL_I2C_Mem_Write+0x224>)
 800a37e:	400b      	ands	r3, r1
 800a380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e000      	b.n	800a3a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a39e:	2302      	movs	r3, #2
  }
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	fe00e800 	.word	0xfe00e800

0800a3ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	817b      	strh	r3, [r7, #10]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	813b      	strh	r3, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	f040 80fd 	bne.w	800a5ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_I2C_Mem_Read+0x34>
 800a3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d105      	bne.n	800a3ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e0f1      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d101      	bne.n	800a3fa <HAL_I2C_Mem_Read+0x4e>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e0ea      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a402:	f7fe fec9 	bl	8009198 <HAL_GetTick>
 800a406:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2319      	movs	r3, #25
 800a40e:	2201      	movs	r2, #1
 800a410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f9c9 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e0d5      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2222      	movs	r2, #34	; 0x22
 800a428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2240      	movs	r2, #64	; 0x40
 800a430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a3a      	ldr	r2, [r7, #32]
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a44c:	88f8      	ldrh	r0, [r7, #6]
 800a44e:	893a      	ldrh	r2, [r7, #8]
 800a450:	8979      	ldrh	r1, [r7, #10]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4603      	mov	r3, r0
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f92d 	bl	800a6bc <I2C_RequestMemoryRead>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0ad      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a478:	b29b      	uxth	r3, r3
 800a47a:	2bff      	cmp	r3, #255	; 0xff
 800a47c:	d90e      	bls.n	800a49c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	22ff      	movs	r2, #255	; 0xff
 800a482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	8979      	ldrh	r1, [r7, #10]
 800a48c:	4b52      	ldr	r3, [pc, #328]	; (800a5d8 <HAL_I2C_Mem_Read+0x22c>)
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fb31 	bl	800aafc <I2C_TransferConfig>
 800a49a:	e00f      	b.n	800a4bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	8979      	ldrh	r1, [r7, #10]
 800a4ae:	4b4a      	ldr	r3, [pc, #296]	; (800a5d8 <HAL_I2C_Mem_Read+0x22c>)
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fb20 	bl	800aafc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f970 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e07c      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	b2d2      	uxtb	r2, r2
 800a4e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	3b01      	subs	r3, #1
 800a502:	b29a      	uxth	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d034      	beq.n	800a57c <HAL_I2C_Mem_Read+0x1d0>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a516:	2b00      	cmp	r3, #0
 800a518:	d130      	bne.n	800a57c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	2200      	movs	r2, #0
 800a522:	2180      	movs	r1, #128	; 0x80
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 f941 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e04d      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a538:	b29b      	uxth	r3, r3
 800a53a:	2bff      	cmp	r3, #255	; 0xff
 800a53c:	d90e      	bls.n	800a55c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	8979      	ldrh	r1, [r7, #10]
 800a54c:	2300      	movs	r3, #0
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fad1 	bl	800aafc <I2C_TransferConfig>
 800a55a:	e00f      	b.n	800a57c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a560:	b29a      	uxth	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	8979      	ldrh	r1, [r7, #10]
 800a56e:	2300      	movs	r3, #0
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fac0 	bl	800aafc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a580:	b29b      	uxth	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d19a      	bne.n	800a4bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f98e 	bl	800a8ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e01a      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6859      	ldr	r1, [r3, #4]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <HAL_I2C_Mem_Read+0x230>)
 800a5ae:	400b      	ands	r3, r1
 800a5b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e000      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a5ce:	2302      	movs	r3, #2
  }
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	80002400 	.word	0x80002400
 800a5dc:	fe00e800 	.word	0xfe00e800

0800a5e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5ee:	b2db      	uxtb	r3, r3
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	4603      	mov	r3, r0
 800a624:	817b      	strh	r3, [r7, #10]
 800a626:	460b      	mov	r3, r1
 800a628:	813b      	strh	r3, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	b2da      	uxtb	r2, r3
 800a632:	8979      	ldrh	r1, [r7, #10]
 800a634:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <I2C_RequestMemoryWrite+0xa4>)
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 fa5d 	bl	800aafc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	69b9      	ldr	r1, [r7, #24]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f8f0 	bl	800a82c <I2C_WaitOnTXISFlagUntilTimeout>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e02c      	b.n	800a6b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a656:	88fb      	ldrh	r3, [r7, #6]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d105      	bne.n	800a668 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a65c:	893b      	ldrh	r3, [r7, #8]
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	629a      	str	r2, [r3, #40]	; 0x28
 800a666:	e015      	b.n	800a694 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a668:	893b      	ldrh	r3, [r7, #8]
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	69b9      	ldr	r1, [r7, #24]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f8d6 	bl	800a82c <I2C_WaitOnTXISFlagUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e012      	b.n	800a6b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a68a:	893b      	ldrh	r3, [r7, #8]
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2200      	movs	r2, #0
 800a69c:	2180      	movs	r1, #128	; 0x80
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f884 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	80002000 	.word	0x80002000

0800a6bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	817b      	strh	r3, [r7, #10]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	813b      	strh	r3, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	8979      	ldrh	r1, [r7, #10]
 800a6dc:	4b20      	ldr	r3, [pc, #128]	; (800a760 <I2C_RequestMemoryRead+0xa4>)
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fa0a 	bl	800aafc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	69b9      	ldr	r1, [r7, #24]
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f89d 	bl	800a82c <I2C_WaitOnTXISFlagUntilTimeout>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e02c      	b.n	800a756 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d105      	bne.n	800a70e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a702:	893b      	ldrh	r3, [r7, #8]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	629a      	str	r2, [r3, #40]	; 0x28
 800a70c:	e015      	b.n	800a73a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a70e:	893b      	ldrh	r3, [r7, #8]
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	b29b      	uxth	r3, r3
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a71c:	69fa      	ldr	r2, [r7, #28]
 800a71e:	69b9      	ldr	r1, [r7, #24]
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f883 	bl	800a82c <I2C_WaitOnTXISFlagUntilTimeout>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e012      	b.n	800a756 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a730:	893b      	ldrh	r3, [r7, #8]
 800a732:	b2da      	uxtb	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	2200      	movs	r2, #0
 800a742:	2140      	movs	r1, #64	; 0x40
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 f831 	bl	800a7ac <I2C_WaitOnFlagUntilTimeout>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	80002000 	.word	0x80002000

0800a764 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b02      	cmp	r3, #2
 800a778:	d103      	bne.n	800a782 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2200      	movs	r2, #0
 800a780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d007      	beq.n	800a7a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f042 0201 	orr.w	r2, r2, #1
 800a79e:	619a      	str	r2, [r3, #24]
  }
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7bc:	e022      	b.n	800a804 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d01e      	beq.n	800a804 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7c6:	f7fe fce7 	bl	8009198 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d302      	bcc.n	800a7dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d113      	bne.n	800a804 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e0:	f043 0220 	orr.w	r2, r3, #32
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e00f      	b.n	800a824 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	4013      	ands	r3, r2
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d0cd      	beq.n	800a7be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a838:	e02c      	b.n	800a894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f870 	bl	800a924 <I2C_IsErrorOccurred>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e02a      	b.n	800a8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a854:	d01e      	beq.n	800a894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a856:	f7fe fc9f 	bl	8009198 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	d302      	bcc.n	800a86c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d113      	bne.n	800a894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a870:	f043 0220 	orr.w	r2, r3, #32
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e007      	b.n	800a8a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d1cb      	bne.n	800a83a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8b8:	e028      	b.n	800a90c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	68b9      	ldr	r1, [r7, #8]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f830 	bl	800a924 <I2C_IsErrorOccurred>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e026      	b.n	800a91c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ce:	f7fe fc63 	bl	8009198 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d113      	bne.n	800a90c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e8:	f043 0220 	orr.w	r2, r3, #32
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e007      	b.n	800a91c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b20      	cmp	r3, #32
 800a918:	d1cf      	bne.n	800a8ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f003 0310 	and.w	r3, r3, #16
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d075      	beq.n	800aa3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2210      	movs	r2, #16
 800a956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a958:	e056      	b.n	800aa08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a960:	d052      	beq.n	800aa08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a962:	f7fe fc19 	bl	8009198 <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d302      	bcc.n	800a978 <I2C_IsErrorOccurred+0x54>
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d147      	bne.n	800aa08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a98a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a99a:	d12e      	bne.n	800a9fa <I2C_IsErrorOccurred+0xd6>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9a2:	d02a      	beq.n	800a9fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a9a4:	7cfb      	ldrb	r3, [r7, #19]
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	d027      	beq.n	800a9fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a9ba:	f7fe fbed 	bl	8009198 <HAL_GetTick>
 800a9be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9c0:	e01b      	b.n	800a9fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a9c2:	f7fe fbe9 	bl	8009198 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b19      	cmp	r3, #25
 800a9ce:	d914      	bls.n	800a9fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d4:	f043 0220 	orr.w	r2, r3, #32
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d1dc      	bne.n	800a9c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	f003 0320 	and.w	r3, r3, #32
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d003      	beq.n	800aa1e <I2C_IsErrorOccurred+0xfa>
 800aa16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d09d      	beq.n	800a95a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800aa1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d103      	bne.n	800aa2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	f043 0304 	orr.w	r3, r3, #4
 800aa34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00b      	beq.n	800aa66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	f043 0308 	orr.w	r3, r3, #8
 800aa76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00b      	beq.n	800aaaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	f043 0302 	orr.w	r3, r3, #2
 800aa98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aaaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d01c      	beq.n	800aaec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7ff fe56 	bl	800a764 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6859      	ldr	r1, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	4b0d      	ldr	r3, [pc, #52]	; (800aaf8 <I2C_IsErrorOccurred+0x1d4>)
 800aac4:	400b      	ands	r3, r1
 800aac6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	431a      	orrs	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2220      	movs	r2, #32
 800aad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800aaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3728      	adds	r7, #40	; 0x28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	fe00e800 	.word	0xfe00e800

0800aafc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	607b      	str	r3, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	817b      	strh	r3, [r7, #10]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab0e:	897b      	ldrh	r3, [r7, #10]
 800ab10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab14:	7a7b      	ldrb	r3, [r7, #9]
 800ab16:	041b      	lsls	r3, r3, #16
 800ab18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab1c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	0d5b      	lsrs	r3, r3, #21
 800ab36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab3a:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <I2C_TransferConfig+0x60>)
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	43db      	mvns	r3, r3
 800ab40:	ea02 0103 	and.w	r1, r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ab4e:	bf00      	nop
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	03ff63ff 	.word	0x03ff63ff

0800ab60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d138      	bne.n	800abe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e032      	b.n	800abea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2224      	movs	r2, #36	; 0x24
 800ab90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6819      	ldr	r1, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f042 0201 	orr.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2220      	movs	r2, #32
 800abd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	e000      	b.n	800abea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abe8:	2302      	movs	r3, #2
  }
}
 800abea:	4618      	mov	r0, r3
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b20      	cmp	r3, #32
 800ac0a:	d139      	bne.n	800ac80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d101      	bne.n	800ac1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ac16:	2302      	movs	r3, #2
 800ac18:	e033      	b.n	800ac82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2224      	movs	r2, #36	; 0x24
 800ac26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 0201 	bic.w	r2, r2, #1
 800ac38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	021b      	lsls	r3, r3, #8
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e000      	b.n	800ac82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <HAL_PWREx_GetVoltageRange+0x18>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	40007000 	.word	0x40007000

0800acac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acba:	d130      	bne.n	800ad1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800acbc:	4b23      	ldr	r3, [pc, #140]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acc8:	d038      	beq.n	800ad3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800acca:	4b20      	ldr	r3, [pc, #128]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800acd2:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800acd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800acda:	4b1d      	ldr	r3, [pc, #116]	; (800ad50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2232      	movs	r2, #50	; 0x32
 800ace0:	fb02 f303 	mul.w	r3, r2, r3
 800ace4:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	0c9b      	lsrs	r3, r3, #18
 800acec:	3301      	adds	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800acf0:	e002      	b.n	800acf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800acf8:	4b14      	ldr	r3, [pc, #80]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad04:	d102      	bne.n	800ad0c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f2      	bne.n	800acf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ad0c:	4b0f      	ldr	r3, [pc, #60]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad18:	d110      	bne.n	800ad3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e00f      	b.n	800ad3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad2a:	d007      	beq.n	800ad3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ad2c:	4b07      	ldr	r3, [pc, #28]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad34:	4a05      	ldr	r2, [pc, #20]	; (800ad4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ad36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40007000 	.word	0x40007000
 800ad50:	20000014 	.word	0x20000014
 800ad54:	431bde83 	.word	0x431bde83

0800ad58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e3d4      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad6a:	4ba1      	ldr	r3, [pc, #644]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 030c 	and.w	r3, r3, #12
 800ad72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad74:	4b9e      	ldr	r3, [pc, #632]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f003 0303 	and.w	r3, r3, #3
 800ad7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0310 	and.w	r3, r3, #16
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 80e4 	beq.w	800af54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <HAL_RCC_OscConfig+0x4a>
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	2b0c      	cmp	r3, #12
 800ad96:	f040 808b 	bne.w	800aeb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	f040 8087 	bne.w	800aeb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ada2:	4b93      	ldr	r3, [pc, #588]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d005      	beq.n	800adba <HAL_RCC_OscConfig+0x62>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e3ac      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1a      	ldr	r2, [r3, #32]
 800adbe:	4b8c      	ldr	r3, [pc, #560]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <HAL_RCC_OscConfig+0x7c>
 800adca:	4b89      	ldr	r3, [pc, #548]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800add2:	e005      	b.n	800ade0 <HAL_RCC_OscConfig+0x88>
 800add4:	4b86      	ldr	r3, [pc, #536]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800add6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adda:	091b      	lsrs	r3, r3, #4
 800addc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d223      	bcs.n	800ae2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fd41 	bl	800b870 <RCC_SetFlashLatencyFromMSIRange>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e38d      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800adf8:	4b7d      	ldr	r3, [pc, #500]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a7c      	ldr	r2, [pc, #496]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800adfe:	f043 0308 	orr.w	r3, r3, #8
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	4b7a      	ldr	r3, [pc, #488]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	4977      	ldr	r1, [pc, #476]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae16:	4b76      	ldr	r3, [pc, #472]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	4972      	ldr	r1, [pc, #456]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	604b      	str	r3, [r1, #4]
 800ae2a:	e025      	b.n	800ae78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae2c:	4b70      	ldr	r3, [pc, #448]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a6f      	ldr	r2, [pc, #444]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae32:	f043 0308 	orr.w	r3, r3, #8
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	4b6d      	ldr	r3, [pc, #436]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	496a      	ldr	r1, [pc, #424]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae4a:	4b69      	ldr	r3, [pc, #420]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	4965      	ldr	r1, [pc, #404]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fd01 	bl	800b870 <RCC_SetFlashLatencyFromMSIRange>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e34d      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae78:	f000 fc36 	bl	800b6e8 <HAL_RCC_GetSysClockFreq>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	4b5c      	ldr	r3, [pc, #368]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	091b      	lsrs	r3, r3, #4
 800ae84:	f003 030f 	and.w	r3, r3, #15
 800ae88:	495a      	ldr	r1, [pc, #360]	; (800aff4 <HAL_RCC_OscConfig+0x29c>)
 800ae8a:	5ccb      	ldrb	r3, [r1, r3]
 800ae8c:	f003 031f 	and.w	r3, r3, #31
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	4a58      	ldr	r2, [pc, #352]	; (800aff8 <HAL_RCC_OscConfig+0x2a0>)
 800ae96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ae98:	4b58      	ldr	r3, [pc, #352]	; (800affc <HAL_RCC_OscConfig+0x2a4>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe f92b 	bl	80090f8 <HAL_InitTick>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d052      	beq.n	800af52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	e331      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d032      	beq.n	800af1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aeb8:	4b4d      	ldr	r3, [pc, #308]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a4c      	ldr	r2, [pc, #304]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aebe:	f043 0301 	orr.w	r3, r3, #1
 800aec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aec4:	f7fe f968 	bl	8009198 <HAL_GetTick>
 800aec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aeca:	e008      	b.n	800aede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aecc:	f7fe f964 	bl	8009198 <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d901      	bls.n	800aede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e31a      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aede:	4b44      	ldr	r3, [pc, #272]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0f0      	beq.n	800aecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aeea:	4b41      	ldr	r3, [pc, #260]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a40      	ldr	r2, [pc, #256]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aef0:	f043 0308 	orr.w	r3, r3, #8
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	4b3e      	ldr	r3, [pc, #248]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	493b      	ldr	r1, [pc, #236]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af04:	4313      	orrs	r3, r2
 800af06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	4936      	ldr	r1, [pc, #216]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	604b      	str	r3, [r1, #4]
 800af1c:	e01a      	b.n	800af54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800af1e:	4b34      	ldr	r3, [pc, #208]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a33      	ldr	r2, [pc, #204]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af24:	f023 0301 	bic.w	r3, r3, #1
 800af28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800af2a:	f7fe f935 	bl	8009198 <HAL_GetTick>
 800af2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af30:	e008      	b.n	800af44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af32:	f7fe f931 	bl	8009198 <HAL_GetTick>
 800af36:	4602      	mov	r2, r0
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d901      	bls.n	800af44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e2e7      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800af44:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1f0      	bne.n	800af32 <HAL_RCC_OscConfig+0x1da>
 800af50:	e000      	b.n	800af54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d074      	beq.n	800b04a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b08      	cmp	r3, #8
 800af64:	d005      	beq.n	800af72 <HAL_RCC_OscConfig+0x21a>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b0c      	cmp	r3, #12
 800af6a:	d10e      	bne.n	800af8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d10b      	bne.n	800af8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af72:	4b1f      	ldr	r3, [pc, #124]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d064      	beq.n	800b048 <HAL_RCC_OscConfig+0x2f0>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d160      	bne.n	800b048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e2c4      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af92:	d106      	bne.n	800afa2 <HAL_RCC_OscConfig+0x24a>
 800af94:	4b16      	ldr	r3, [pc, #88]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800af9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	e01d      	b.n	800afde <HAL_RCC_OscConfig+0x286>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afaa:	d10c      	bne.n	800afc6 <HAL_RCC_OscConfig+0x26e>
 800afac:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a0f      	ldr	r2, [pc, #60]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	e00b      	b.n	800afde <HAL_RCC_OscConfig+0x286>
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a06      	ldr	r2, [pc, #24]	; (800aff0 <HAL_RCC_OscConfig+0x298>)
 800afd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d01c      	beq.n	800b020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe6:	f7fe f8d7 	bl	8009198 <HAL_GetTick>
 800afea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afec:	e011      	b.n	800b012 <HAL_RCC_OscConfig+0x2ba>
 800afee:	bf00      	nop
 800aff0:	40021000 	.word	0x40021000
 800aff4:	0801aee0 	.word	0x0801aee0
 800aff8:	20000014 	.word	0x20000014
 800affc:	20000184 	.word	0x20000184
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b000:	f7fe f8ca 	bl	8009198 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b64      	cmp	r3, #100	; 0x64
 800b00c:	d901      	bls.n	800b012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e280      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b012:	4baf      	ldr	r3, [pc, #700]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0f0      	beq.n	800b000 <HAL_RCC_OscConfig+0x2a8>
 800b01e:	e014      	b.n	800b04a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b020:	f7fe f8ba 	bl	8009198 <HAL_GetTick>
 800b024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b026:	e008      	b.n	800b03a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b028:	f7fe f8b6 	bl	8009198 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b64      	cmp	r3, #100	; 0x64
 800b034:	d901      	bls.n	800b03a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e26c      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b03a:	4ba5      	ldr	r3, [pc, #660]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f0      	bne.n	800b028 <HAL_RCC_OscConfig+0x2d0>
 800b046:	e000      	b.n	800b04a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d060      	beq.n	800b118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d005      	beq.n	800b068 <HAL_RCC_OscConfig+0x310>
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	d119      	bne.n	800b096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d116      	bne.n	800b096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b068:	4b99      	ldr	r3, [pc, #612]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <HAL_RCC_OscConfig+0x328>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e249      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b080:	4b93      	ldr	r3, [pc, #588]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	061b      	lsls	r3, r3, #24
 800b08e:	4990      	ldr	r1, [pc, #576]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b090:	4313      	orrs	r3, r2
 800b092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b094:	e040      	b.n	800b118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d023      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b09e:	4b8c      	ldr	r3, [pc, #560]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a8b      	ldr	r2, [pc, #556]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0aa:	f7fe f875 	bl	8009198 <HAL_GetTick>
 800b0ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0b0:	e008      	b.n	800b0c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0b2:	f7fe f871 	bl	8009198 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d901      	bls.n	800b0c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e227      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0c4:	4b82      	ldr	r3, [pc, #520]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0f0      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0d0:	4b7f      	ldr	r3, [pc, #508]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	061b      	lsls	r3, r3, #24
 800b0de:	497c      	ldr	r1, [pc, #496]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	604b      	str	r3, [r1, #4]
 800b0e4:	e018      	b.n	800b118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0e6:	4b7a      	ldr	r3, [pc, #488]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a79      	ldr	r2, [pc, #484]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f2:	f7fe f851 	bl	8009198 <HAL_GetTick>
 800b0f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0f8:	e008      	b.n	800b10c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0fa:	f7fe f84d 	bl	8009198 <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b02      	cmp	r3, #2
 800b106:	d901      	bls.n	800b10c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e203      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b10c:	4b70      	ldr	r3, [pc, #448]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1f0      	bne.n	800b0fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0308 	and.w	r3, r3, #8
 800b120:	2b00      	cmp	r3, #0
 800b122:	d03c      	beq.n	800b19e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d01c      	beq.n	800b166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b12c:	4b68      	ldr	r3, [pc, #416]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b132:	4a67      	ldr	r2, [pc, #412]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b134:	f043 0301 	orr.w	r3, r3, #1
 800b138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b13c:	f7fe f82c 	bl	8009198 <HAL_GetTick>
 800b140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b142:	e008      	b.n	800b156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b144:	f7fe f828 	bl	8009198 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e1de      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b156:	4b5e      	ldr	r3, [pc, #376]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b15c:	f003 0302 	and.w	r3, r3, #2
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0ef      	beq.n	800b144 <HAL_RCC_OscConfig+0x3ec>
 800b164:	e01b      	b.n	800b19e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b166:	4b5a      	ldr	r3, [pc, #360]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b16c:	4a58      	ldr	r2, [pc, #352]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b16e:	f023 0301 	bic.w	r3, r3, #1
 800b172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b176:	f7fe f80f 	bl	8009198 <HAL_GetTick>
 800b17a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b17c:	e008      	b.n	800b190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b17e:	f7fe f80b 	bl	8009198 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d901      	bls.n	800b190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e1c1      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b190:	4b4f      	ldr	r3, [pc, #316]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b196:	f003 0302 	and.w	r3, r3, #2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1ef      	bne.n	800b17e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0304 	and.w	r3, r3, #4
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 80a6 	beq.w	800b2f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b1b0:	4b47      	ldr	r3, [pc, #284]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10d      	bne.n	800b1d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1bc:	4b44      	ldr	r3, [pc, #272]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c0:	4a43      	ldr	r2, [pc, #268]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b1c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b1c8:	4b41      	ldr	r3, [pc, #260]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d0:	60bb      	str	r3, [r7, #8]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d8:	4b3e      	ldr	r3, [pc, #248]	; (800b2d4 <HAL_RCC_OscConfig+0x57c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d118      	bne.n	800b216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1e4:	4b3b      	ldr	r3, [pc, #236]	; (800b2d4 <HAL_RCC_OscConfig+0x57c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a3a      	ldr	r2, [pc, #232]	; (800b2d4 <HAL_RCC_OscConfig+0x57c>)
 800b1ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1f0:	f7fd ffd2 	bl	8009198 <HAL_GetTick>
 800b1f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1f8:	f7fd ffce 	bl	8009198 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b02      	cmp	r3, #2
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e184      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b20a:	4b32      	ldr	r3, [pc, #200]	; (800b2d4 <HAL_RCC_OscConfig+0x57c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0f0      	beq.n	800b1f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d108      	bne.n	800b230 <HAL_RCC_OscConfig+0x4d8>
 800b21e:	4b2c      	ldr	r3, [pc, #176]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b224:	4a2a      	ldr	r2, [pc, #168]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b22e:	e024      	b.n	800b27a <HAL_RCC_OscConfig+0x522>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	2b05      	cmp	r3, #5
 800b236:	d110      	bne.n	800b25a <HAL_RCC_OscConfig+0x502>
 800b238:	4b25      	ldr	r3, [pc, #148]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23e:	4a24      	ldr	r2, [pc, #144]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b240:	f043 0304 	orr.w	r3, r3, #4
 800b244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b248:	4b21      	ldr	r3, [pc, #132]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24e:	4a20      	ldr	r2, [pc, #128]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b250:	f043 0301 	orr.w	r3, r3, #1
 800b254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b258:	e00f      	b.n	800b27a <HAL_RCC_OscConfig+0x522>
 800b25a:	4b1d      	ldr	r3, [pc, #116]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b260:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b270:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b272:	f023 0304 	bic.w	r3, r3, #4
 800b276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d016      	beq.n	800b2b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b282:	f7fd ff89 	bl	8009198 <HAL_GetTick>
 800b286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b288:	e00a      	b.n	800b2a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b28a:	f7fd ff85 	bl	8009198 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	f241 3288 	movw	r2, #5000	; 0x1388
 800b298:	4293      	cmp	r3, r2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e139      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <HAL_RCC_OscConfig+0x578>)
 800b2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2a6:	f003 0302 	and.w	r3, r3, #2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0ed      	beq.n	800b28a <HAL_RCC_OscConfig+0x532>
 800b2ae:	e01a      	b.n	800b2e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2b0:	f7fd ff72 	bl	8009198 <HAL_GetTick>
 800b2b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2b6:	e00f      	b.n	800b2d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2b8:	f7fd ff6e 	bl	8009198 <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d906      	bls.n	800b2d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e122      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
 800b2ce:	bf00      	nop
 800b2d0:	40021000 	.word	0x40021000
 800b2d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2d8:	4b90      	ldr	r3, [pc, #576]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e8      	bne.n	800b2b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2e6:	7ffb      	ldrb	r3, [r7, #31]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d105      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2ec:	4b8b      	ldr	r3, [pc, #556]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f0:	4a8a      	ldr	r2, [pc, #552]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b2f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 8108 	beq.w	800b512 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	2b02      	cmp	r3, #2
 800b308:	f040 80d0 	bne.w	800b4ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b30c:	4b83      	ldr	r3, [pc, #524]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f003 0203 	and.w	r2, r3, #3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d130      	bne.n	800b382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32a:	3b01      	subs	r3, #1
 800b32c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b32e:	429a      	cmp	r2, r3
 800b330:	d127      	bne.n	800b382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b33e:	429a      	cmp	r2, r3
 800b340:	d11f      	bne.n	800b382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b34c:	2a07      	cmp	r2, #7
 800b34e:	bf14      	ite	ne
 800b350:	2201      	movne	r2, #1
 800b352:	2200      	moveq	r2, #0
 800b354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b356:	4293      	cmp	r3, r2
 800b358:	d113      	bne.n	800b382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b364:	085b      	lsrs	r3, r3, #1
 800b366:	3b01      	subs	r3, #1
 800b368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d109      	bne.n	800b382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	085b      	lsrs	r3, r3, #1
 800b37a:	3b01      	subs	r3, #1
 800b37c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b37e:	429a      	cmp	r2, r3
 800b380:	d06e      	beq.n	800b460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b0c      	cmp	r3, #12
 800b386:	d069      	beq.n	800b45c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b388:	4b64      	ldr	r3, [pc, #400]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b394:	4b61      	ldr	r3, [pc, #388]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0b7      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b3a4:	4b5d      	ldr	r3, [pc, #372]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a5c      	ldr	r2, [pc, #368]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b3aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b3b0:	f7fd fef2 	bl	8009198 <HAL_GetTick>
 800b3b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3b6:	e008      	b.n	800b3ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3b8:	f7fd feee 	bl	8009198 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d901      	bls.n	800b3ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e0a4      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3ca:	4b54      	ldr	r3, [pc, #336]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1f0      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3d6:	4b51      	ldr	r3, [pc, #324]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	4b51      	ldr	r3, [pc, #324]	; (800b520 <HAL_RCC_OscConfig+0x7c8>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3e6:	3a01      	subs	r2, #1
 800b3e8:	0112      	lsls	r2, r2, #4
 800b3ea:	4311      	orrs	r1, r2
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3f0:	0212      	lsls	r2, r2, #8
 800b3f2:	4311      	orrs	r1, r2
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3f8:	0852      	lsrs	r2, r2, #1
 800b3fa:	3a01      	subs	r2, #1
 800b3fc:	0552      	lsls	r2, r2, #21
 800b3fe:	4311      	orrs	r1, r2
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b404:	0852      	lsrs	r2, r2, #1
 800b406:	3a01      	subs	r2, #1
 800b408:	0652      	lsls	r2, r2, #25
 800b40a:	4311      	orrs	r1, r2
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b410:	0912      	lsrs	r2, r2, #4
 800b412:	0452      	lsls	r2, r2, #17
 800b414:	430a      	orrs	r2, r1
 800b416:	4941      	ldr	r1, [pc, #260]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b41c:	4b3f      	ldr	r3, [pc, #252]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a3e      	ldr	r2, [pc, #248]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b428:	4b3c      	ldr	r3, [pc, #240]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	4a3b      	ldr	r2, [pc, #236]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b42e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b434:	f7fd feb0 	bl	8009198 <HAL_GetTick>
 800b438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b43c:	f7fd feac 	bl	8009198 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e062      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b44e:	4b33      	ldr	r3, [pc, #204]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0f0      	beq.n	800b43c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b45a:	e05a      	b.n	800b512 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e059      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b460:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d152      	bne.n	800b512 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b46c:	4b2b      	ldr	r3, [pc, #172]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a2a      	ldr	r2, [pc, #168]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b478:	4b28      	ldr	r3, [pc, #160]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	4a27      	ldr	r2, [pc, #156]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b47e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b484:	f7fd fe88 	bl	8009198 <HAL_GetTick>
 800b488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b48a:	e008      	b.n	800b49e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b48c:	f7fd fe84 	bl	8009198 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	2b02      	cmp	r3, #2
 800b498:	d901      	bls.n	800b49e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e03a      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b49e:	4b1f      	ldr	r3, [pc, #124]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d0f0      	beq.n	800b48c <HAL_RCC_OscConfig+0x734>
 800b4aa:	e032      	b.n	800b512 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	2b0c      	cmp	r3, #12
 800b4b0:	d02d      	beq.n	800b50e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4b2:	4b1a      	ldr	r3, [pc, #104]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a19      	ldr	r2, [pc, #100]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800b4be:	4b17      	ldr	r3, [pc, #92]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d105      	bne.n	800b4d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b4ca:	4b14      	ldr	r3, [pc, #80]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	4a13      	ldr	r2, [pc, #76]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	4a10      	ldr	r2, [pc, #64]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b4dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b4e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e6:	f7fd fe57 	bl	8009198 <HAL_GetTick>
 800b4ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4ec:	e008      	b.n	800b500 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ee:	f7fd fe53 	bl	8009198 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d901      	bls.n	800b500 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e009      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <HAL_RCC_OscConfig+0x7c4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f0      	bne.n	800b4ee <HAL_RCC_OscConfig+0x796>
 800b50c:	e001      	b.n	800b512 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e000      	b.n	800b514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3720      	adds	r7, #32
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	40021000 	.word	0x40021000
 800b520:	f99d808c 	.word	0xf99d808c

0800b524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e0c8      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b538:	4b66      	ldr	r3, [pc, #408]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d910      	bls.n	800b568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b546:	4b63      	ldr	r3, [pc, #396]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f023 0207 	bic.w	r2, r3, #7
 800b54e:	4961      	ldr	r1, [pc, #388]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	4313      	orrs	r3, r2
 800b554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b556:	4b5f      	ldr	r3, [pc, #380]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0307 	and.w	r3, r3, #7
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d001      	beq.n	800b568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e0b0      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d04c      	beq.n	800b60e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d107      	bne.n	800b58c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b57c:	4b56      	ldr	r3, [pc, #344]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d121      	bne.n	800b5cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e09e      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d107      	bne.n	800b5a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b594:	4b50      	ldr	r3, [pc, #320]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d115      	bne.n	800b5cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e092      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d107      	bne.n	800b5bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b5ac:	4b4a      	ldr	r3, [pc, #296]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d109      	bne.n	800b5cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e086      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5bc:	4b46      	ldr	r3, [pc, #280]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e07e      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5cc:	4b42      	ldr	r3, [pc, #264]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f023 0203 	bic.w	r2, r3, #3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	493f      	ldr	r1, [pc, #252]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5de:	f7fd fddb 	bl	8009198 <HAL_GetTick>
 800b5e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5e4:	e00a      	b.n	800b5fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5e6:	f7fd fdd7 	bl	8009198 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d901      	bls.n	800b5fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	e066      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f003 020c 	and.w	r2, r3, #12
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d1eb      	bne.n	800b5e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	2b00      	cmp	r3, #0
 800b618:	d008      	beq.n	800b62c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b61a:	4b2f      	ldr	r3, [pc, #188]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	492c      	ldr	r1, [pc, #176]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b62c:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0307 	and.w	r3, r3, #7
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d210      	bcs.n	800b65c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b63a:	4b26      	ldr	r3, [pc, #152]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f023 0207 	bic.w	r2, r3, #7
 800b642:	4924      	ldr	r1, [pc, #144]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	4313      	orrs	r3, r2
 800b648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b64a:	4b22      	ldr	r3, [pc, #136]	; (800b6d4 <HAL_RCC_ClockConfig+0x1b0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d001      	beq.n	800b65c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e036      	b.n	800b6ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d008      	beq.n	800b67a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b668:	4b1b      	ldr	r3, [pc, #108]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	4918      	ldr	r1, [pc, #96]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b676:	4313      	orrs	r3, r2
 800b678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0308 	and.w	r3, r3, #8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b686:	4b14      	ldr	r3, [pc, #80]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	4910      	ldr	r1, [pc, #64]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b696:	4313      	orrs	r3, r2
 800b698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b69a:	f000 f825 	bl	800b6e8 <HAL_RCC_GetSysClockFreq>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b0d      	ldr	r3, [pc, #52]	; (800b6d8 <HAL_RCC_ClockConfig+0x1b4>)
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	091b      	lsrs	r3, r3, #4
 800b6a6:	f003 030f 	and.w	r3, r3, #15
 800b6aa:	490c      	ldr	r1, [pc, #48]	; (800b6dc <HAL_RCC_ClockConfig+0x1b8>)
 800b6ac:	5ccb      	ldrb	r3, [r1, r3]
 800b6ae:	f003 031f 	and.w	r3, r3, #31
 800b6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b6:	4a0a      	ldr	r2, [pc, #40]	; (800b6e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b6b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b6ba:	4b0a      	ldr	r3, [pc, #40]	; (800b6e4 <HAL_RCC_ClockConfig+0x1c0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fd fd1a 	bl	80090f8 <HAL_InitTick>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	72fb      	strb	r3, [r7, #11]

  return status;
 800b6c8:	7afb      	ldrb	r3, [r7, #11]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	40022000 	.word	0x40022000
 800b6d8:	40021000 	.word	0x40021000
 800b6dc:	0801aee0 	.word	0x0801aee0
 800b6e0:	20000014 	.word	0x20000014
 800b6e4:	20000184 	.word	0x20000184

0800b6e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b089      	sub	sp, #36	; 0x24
 800b6ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	61fb      	str	r3, [r7, #28]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6f6:	4b3e      	ldr	r3, [pc, #248]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f003 030c 	and.w	r3, r3, #12
 800b6fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b700:	4b3b      	ldr	r3, [pc, #236]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <HAL_RCC_GetSysClockFreq+0x34>
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b0c      	cmp	r3, #12
 800b714:	d121      	bne.n	800b75a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d11e      	bne.n	800b75a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b71c:	4b34      	ldr	r3, [pc, #208]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0308 	and.w	r3, r3, #8
 800b724:	2b00      	cmp	r3, #0
 800b726:	d107      	bne.n	800b738 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b728:	4b31      	ldr	r3, [pc, #196]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b72a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	e005      	b.n	800b744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b738:	4b2d      	ldr	r3, [pc, #180]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	091b      	lsrs	r3, r3, #4
 800b73e:	f003 030f 	and.w	r3, r3, #15
 800b742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b744:	4a2b      	ldr	r2, [pc, #172]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b74c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10d      	bne.n	800b770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b758:	e00a      	b.n	800b770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d102      	bne.n	800b766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b760:	4b25      	ldr	r3, [pc, #148]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b762:	61bb      	str	r3, [r7, #24]
 800b764:	e004      	b.n	800b770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d101      	bne.n	800b770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b76c:	4b23      	ldr	r3, [pc, #140]	; (800b7fc <HAL_RCC_GetSysClockFreq+0x114>)
 800b76e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b0c      	cmp	r3, #12
 800b774:	d134      	bne.n	800b7e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b776:	4b1e      	ldr	r3, [pc, #120]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0303 	and.w	r3, r3, #3
 800b77e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d003      	beq.n	800b78e <HAL_RCC_GetSysClockFreq+0xa6>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d003      	beq.n	800b794 <HAL_RCC_GetSysClockFreq+0xac>
 800b78c:	e005      	b.n	800b79a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b78e:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b790:	617b      	str	r3, [r7, #20]
      break;
 800b792:	e005      	b.n	800b7a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b794:	4b19      	ldr	r3, [pc, #100]	; (800b7fc <HAL_RCC_GetSysClockFreq+0x114>)
 800b796:	617b      	str	r3, [r7, #20]
      break;
 800b798:	e002      	b.n	800b7a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	617b      	str	r3, [r7, #20]
      break;
 800b79e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7a0:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	091b      	lsrs	r3, r3, #4
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b7ae:	4b10      	ldr	r3, [pc, #64]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	fb02 f203 	mul.w	r2, r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b7c6:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	0e5b      	lsrs	r3, r3, #25
 800b7cc:	f003 0303 	and.w	r3, r3, #3
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3724      	adds	r7, #36	; 0x24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	0801aef8 	.word	0x0801aef8
 800b7f8:	00f42400 	.word	0x00f42400
 800b7fc:	007a1200 	.word	0x007a1200

0800b800 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b800:	b480      	push	{r7}
 800b802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b804:	4b03      	ldr	r3, [pc, #12]	; (800b814 <HAL_RCC_GetHCLKFreq+0x14>)
 800b806:	681b      	ldr	r3, [r3, #0]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000014 	.word	0x20000014

0800b818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b81c:	f7ff fff0 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b820:	4602      	mov	r2, r0
 800b822:	4b06      	ldr	r3, [pc, #24]	; (800b83c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	0a1b      	lsrs	r3, r3, #8
 800b828:	f003 0307 	and.w	r3, r3, #7
 800b82c:	4904      	ldr	r1, [pc, #16]	; (800b840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b82e:	5ccb      	ldrb	r3, [r1, r3]
 800b830:	f003 031f 	and.w	r3, r3, #31
 800b834:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b838:	4618      	mov	r0, r3
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	40021000 	.word	0x40021000
 800b840:	0801aef0 	.word	0x0801aef0

0800b844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b848:	f7ff ffda 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b84c:	4602      	mov	r2, r0
 800b84e:	4b06      	ldr	r3, [pc, #24]	; (800b868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	0adb      	lsrs	r3, r3, #11
 800b854:	f003 0307 	and.w	r3, r3, #7
 800b858:	4904      	ldr	r1, [pc, #16]	; (800b86c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b85a:	5ccb      	ldrb	r3, [r1, r3]
 800b85c:	f003 031f 	and.w	r3, r3, #31
 800b860:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b864:	4618      	mov	r0, r3
 800b866:	bd80      	pop	{r7, pc}
 800b868:	40021000 	.word	0x40021000
 800b86c:	0801aef0 	.word	0x0801aef0

0800b870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b87c:	4b2a      	ldr	r3, [pc, #168]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b888:	f7ff fa02 	bl	800ac90 <HAL_PWREx_GetVoltageRange>
 800b88c:	6178      	str	r0, [r7, #20]
 800b88e:	e014      	b.n	800b8ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b894:	4a24      	ldr	r2, [pc, #144]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b89a:	6593      	str	r3, [r2, #88]	; 0x58
 800b89c:	4b22      	ldr	r3, [pc, #136]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b8a8:	f7ff f9f2 	bl	800ac90 <HAL_PWREx_GetVoltageRange>
 800b8ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b8ae:	4b1e      	ldr	r3, [pc, #120]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b2:	4a1d      	ldr	r2, [pc, #116]	; (800b928 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b8b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c0:	d10b      	bne.n	800b8da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b80      	cmp	r3, #128	; 0x80
 800b8c6:	d919      	bls.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2ba0      	cmp	r3, #160	; 0xa0
 800b8cc:	d902      	bls.n	800b8d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	613b      	str	r3, [r7, #16]
 800b8d2:	e013      	b.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	613b      	str	r3, [r7, #16]
 800b8d8:	e010      	b.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b80      	cmp	r3, #128	; 0x80
 800b8de:	d902      	bls.n	800b8e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	613b      	str	r3, [r7, #16]
 800b8e4:	e00a      	b.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b80      	cmp	r3, #128	; 0x80
 800b8ea:	d102      	bne.n	800b8f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	e004      	b.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b70      	cmp	r3, #112	; 0x70
 800b8f6:	d101      	bne.n	800b8fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b8fc:	4b0b      	ldr	r3, [pc, #44]	; (800b92c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f023 0207 	bic.w	r2, r3, #7
 800b904:	4909      	ldr	r1, [pc, #36]	; (800b92c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	4313      	orrs	r3, r2
 800b90a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b90c:	4b07      	ldr	r3, [pc, #28]	; (800b92c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	429a      	cmp	r2, r3
 800b918:	d001      	beq.n	800b91e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e000      	b.n	800b920 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	40021000 	.word	0x40021000
 800b92c:	40022000 	.word	0x40022000

0800b930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b938:	2300      	movs	r3, #0
 800b93a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b93c:	2300      	movs	r3, #0
 800b93e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d041      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b950:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b954:	d02a      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b956:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b95a:	d824      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b95c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b960:	d008      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b966:	d81e      	bhi.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00a      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b970:	d010      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b972:	e018      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b974:	4b86      	ldr	r3, [pc, #536]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	4a85      	ldr	r2, [pc, #532]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b97a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b97e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b980:	e015      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3304      	adds	r3, #4
 800b986:	2100      	movs	r1, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fabb 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b992:	e00c      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3320      	adds	r3, #32
 800b998:	2100      	movs	r1, #0
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 fba6 	bl	800c0ec <RCCEx_PLLSAI2_Config>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b9a4:	e003      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	74fb      	strb	r3, [r7, #19]
      break;
 800b9aa:	e000      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b9ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9ae:	7cfb      	ldrb	r3, [r7, #19]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10b      	bne.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9b4:	4b76      	ldr	r3, [pc, #472]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9c2:	4973      	ldr	r1, [pc, #460]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b9ca:	e001      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9cc:	7cfb      	ldrb	r3, [r7, #19]
 800b9ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d041      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9e4:	d02a      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b9e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9ea:	d824      	bhi.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b9ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9f0:	d008      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b9f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9f6:	d81e      	bhi.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b9fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba00:	d010      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ba02:	e018      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ba04:	4b62      	ldr	r3, [pc, #392]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	4a61      	ldr	r2, [pc, #388]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba10:	e015      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3304      	adds	r3, #4
 800ba16:	2100      	movs	r1, #0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 fa73 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba22:	e00c      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3320      	adds	r3, #32
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fb5e 	bl	800c0ec <RCCEx_PLLSAI2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba34:	e003      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	74fb      	strb	r3, [r7, #19]
      break;
 800ba3a:	e000      	b.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ba3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba3e:	7cfb      	ldrb	r3, [r7, #19]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10b      	bne.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba44:	4b52      	ldr	r3, [pc, #328]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba52:	494f      	ldr	r1, [pc, #316]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ba5a:	e001      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5c:	7cfb      	ldrb	r3, [r7, #19]
 800ba5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 80a0 	beq.w	800bbae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba72:	4b47      	ldr	r3, [pc, #284]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e000      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ba82:	2300      	movs	r3, #0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00d      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba88:	4b41      	ldr	r3, [pc, #260]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba8c:	4a40      	ldr	r2, [pc, #256]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba92:	6593      	str	r3, [r2, #88]	; 0x58
 800ba94:	4b3e      	ldr	r3, [pc, #248]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800baa0:	2301      	movs	r3, #1
 800baa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baa4:	4b3b      	ldr	r3, [pc, #236]	; (800bb94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a3a      	ldr	r2, [pc, #232]	; (800bb94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800baaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bab0:	f7fd fb72 	bl	8009198 <HAL_GetTick>
 800bab4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bab6:	e009      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bab8:	f7fd fb6e 	bl	8009198 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d902      	bls.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	74fb      	strb	r3, [r7, #19]
        break;
 800baca:	e005      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bacc:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0ef      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800bad8:	7cfb      	ldrb	r3, [r7, #19]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d15c      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bade:	4b2c      	ldr	r3, [pc, #176]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bae8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01f      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d019      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bafc:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb08:	4b21      	ldr	r3, [pc, #132]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0e:	4a20      	ldr	r2, [pc, #128]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb18:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb1e:	4a1c      	ldr	r2, [pc, #112]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bb28:	4a19      	ldr	r2, [pc, #100]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d016      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3a:	f7fd fb2d 	bl	8009198 <HAL_GetTick>
 800bb3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb40:	e00b      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb42:	f7fd fb29 	bl	8009198 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d902      	bls.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	74fb      	strb	r3, [r7, #19]
            break;
 800bb58:	e006      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb5a:	4b0d      	ldr	r3, [pc, #52]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb60:	f003 0302 	and.w	r3, r3, #2
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d0ec      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bb68:	7cfb      	ldrb	r3, [r7, #19]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10c      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb6e:	4b08      	ldr	r3, [pc, #32]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7e:	4904      	ldr	r1, [pc, #16]	; (800bb90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb80:	4313      	orrs	r3, r2
 800bb82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb86:	e009      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb88:	7cfb      	ldrb	r3, [r7, #19]
 800bb8a:	74bb      	strb	r3, [r7, #18]
 800bb8c:	e006      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800bb8e:	bf00      	nop
 800bb90:	40021000 	.word	0x40021000
 800bb94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	7cfb      	ldrb	r3, [r7, #19]
 800bb9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb9c:	7c7b      	ldrb	r3, [r7, #17]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d105      	bne.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bba2:	4b9e      	ldr	r3, [pc, #632]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba6:	4a9d      	ldr	r2, [pc, #628]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bbba:	4b98      	ldr	r3, [pc, #608]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbc0:	f023 0203 	bic.w	r2, r3, #3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	4994      	ldr	r1, [pc, #592]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00a      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bbdc:	4b8f      	ldr	r3, [pc, #572]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe2:	f023 020c 	bic.w	r2, r3, #12
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	498c      	ldr	r1, [pc, #560]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bbec:	4313      	orrs	r3, r2
 800bbee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0304 	and.w	r3, r3, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bbfe:	4b87      	ldr	r3, [pc, #540]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0c:	4983      	ldr	r1, [pc, #524]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 0308 	and.w	r3, r3, #8
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc20:	4b7e      	ldr	r3, [pc, #504]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2e:	497b      	ldr	r1, [pc, #492]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0310 	and.w	r3, r3, #16
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bc42:	4b76      	ldr	r3, [pc, #472]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc50:	4972      	ldr	r1, [pc, #456]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc52:	4313      	orrs	r3, r2
 800bc54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00a      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc64:	4b6d      	ldr	r3, [pc, #436]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc72:	496a      	ldr	r1, [pc, #424]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc86:	4b65      	ldr	r3, [pc, #404]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc94:	4961      	ldr	r1, [pc, #388]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bc96:	4313      	orrs	r3, r2
 800bc98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00a      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bca8:	4b5c      	ldr	r3, [pc, #368]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb6:	4959      	ldr	r1, [pc, #356]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bcca:	4b54      	ldr	r3, [pc, #336]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd8:	4950      	ldr	r1, [pc, #320]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bcec:	4b4b      	ldr	r3, [pc, #300]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	4948      	ldr	r1, [pc, #288]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00a      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd0e:	4b43      	ldr	r3, [pc, #268]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd1c:	493f      	ldr	r1, [pc, #252]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d028      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd30:	4b3a      	ldr	r3, [pc, #232]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3e:	4937      	ldr	r1, [pc, #220]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd4e:	d106      	bne.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd50:	4b32      	ldr	r3, [pc, #200]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4a31      	ldr	r2, [pc, #196]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd5a:	60d3      	str	r3, [r2, #12]
 800bd5c:	e011      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd66:	d10c      	bne.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f8c8 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800bd74:	4603      	mov	r3, r0
 800bd76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bd78:	7cfb      	ldrb	r3, [r7, #19]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800bd7e:	7cfb      	ldrb	r3, [r7, #19]
 800bd80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d028      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bd8e:	4b23      	ldr	r3, [pc, #140]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9c:	491f      	ldr	r1, [pc, #124]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdac:	d106      	bne.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdae:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	4a1a      	ldr	r2, [pc, #104]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdb8:	60d3      	str	r3, [r2, #12]
 800bdba:	e011      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdc4:	d10c      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	2101      	movs	r1, #1
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f899 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bdd6:	7cfb      	ldrb	r3, [r7, #19]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800bddc:	7cfb      	ldrb	r3, [r7, #19]
 800bdde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02b      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdec:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdfa:	4908      	ldr	r1, [pc, #32]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be0a:	d109      	bne.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be0c:	4b03      	ldr	r3, [pc, #12]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	4a02      	ldr	r2, [pc, #8]	; (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800be12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be16:	60d3      	str	r3, [r2, #12]
 800be18:	e014      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800be1a:	bf00      	nop
 800be1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be28:	d10c      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3304      	adds	r3, #4
 800be2e:	2101      	movs	r1, #1
 800be30:	4618      	mov	r0, r3
 800be32:	f000 f867 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800be36:	4603      	mov	r3, r0
 800be38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be3a:	7cfb      	ldrb	r3, [r7, #19]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800be40:	7cfb      	ldrb	r3, [r7, #19]
 800be42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d02f      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be50:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800be52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be5e:	4928      	ldr	r1, [pc, #160]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800be60:	4313      	orrs	r3, r2
 800be62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be6e:	d10d      	bne.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3304      	adds	r3, #4
 800be74:	2102      	movs	r1, #2
 800be76:	4618      	mov	r0, r3
 800be78:	f000 f844 	bl	800bf04 <RCCEx_PLLSAI1_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be80:	7cfb      	ldrb	r3, [r7, #19]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d014      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800be86:	7cfb      	ldrb	r3, [r7, #19]
 800be88:	74bb      	strb	r3, [r7, #18]
 800be8a:	e011      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be94:	d10c      	bne.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3320      	adds	r3, #32
 800be9a:	2102      	movs	r1, #2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 f925 	bl	800c0ec <RCCEx_PLLSAI2_Config>
 800bea2:	4603      	mov	r3, r0
 800bea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bea6:	7cfb      	ldrb	r3, [r7, #19]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800beac:	7cfb      	ldrb	r3, [r7, #19]
 800beae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beca:	490d      	ldr	r1, [pc, #52]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800becc:	4313      	orrs	r3, r2
 800bece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00b      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bede:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beee:	4904      	ldr	r1, [pc, #16]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bef6:	7cbb      	ldrb	r3, [r7, #18]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	40021000 	.word	0x40021000

0800bf04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bf12:	4b75      	ldr	r3, [pc, #468]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d018      	beq.n	800bf50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800bf1e:	4b72      	ldr	r3, [pc, #456]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f003 0203 	and.w	r2, r3, #3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d10d      	bne.n	800bf4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
       ||
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d009      	beq.n	800bf4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bf36:	4b6c      	ldr	r3, [pc, #432]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	091b      	lsrs	r3, r3, #4
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
       ||
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d047      	beq.n	800bfda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	73fb      	strb	r3, [r7, #15]
 800bf4e:	e044      	b.n	800bfda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	d018      	beq.n	800bf8a <RCCEx_PLLSAI1_Config+0x86>
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d825      	bhi.n	800bfa8 <RCCEx_PLLSAI1_Config+0xa4>
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d002      	beq.n	800bf66 <RCCEx_PLLSAI1_Config+0x62>
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d009      	beq.n	800bf78 <RCCEx_PLLSAI1_Config+0x74>
 800bf64:	e020      	b.n	800bfa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bf66:	4b60      	ldr	r3, [pc, #384]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11d      	bne.n	800bfae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf76:	e01a      	b.n	800bfae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bf78:	4b5b      	ldr	r3, [pc, #364]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d116      	bne.n	800bfb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf88:	e013      	b.n	800bfb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bf8a:	4b57      	ldr	r3, [pc, #348]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10f      	bne.n	800bfb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bf96:	4b54      	ldr	r3, [pc, #336]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfa6:	e006      	b.n	800bfb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bfac:	e004      	b.n	800bfb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bfae:	bf00      	nop
 800bfb0:	e002      	b.n	800bfb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bfb2:	bf00      	nop
 800bfb4:	e000      	b.n	800bfb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bfb6:	bf00      	nop
    }

    if(status == HAL_OK)
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10d      	bne.n	800bfda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bfbe:	4b4a      	ldr	r3, [pc, #296]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	011b      	lsls	r3, r3, #4
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	4944      	ldr	r1, [pc, #272]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d17d      	bne.n	800c0dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bfe0:	4b41      	ldr	r3, [pc, #260]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a40      	ldr	r2, [pc, #256]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bfe6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfec:	f7fd f8d4 	bl	8009198 <HAL_GetTick>
 800bff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bff2:	e009      	b.n	800c008 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bff4:	f7fd f8d0 	bl	8009198 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d902      	bls.n	800c008 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	73fb      	strb	r3, [r7, #15]
        break;
 800c006:	e005      	b.n	800c014 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c008:	4b37      	ldr	r3, [pc, #220]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1ef      	bne.n	800bff4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d160      	bne.n	800c0dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d111      	bne.n	800c044 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c020:	4b31      	ldr	r3, [pc, #196]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6892      	ldr	r2, [r2, #8]
 800c030:	0211      	lsls	r1, r2, #8
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	68d2      	ldr	r2, [r2, #12]
 800c036:	0912      	lsrs	r2, r2, #4
 800c038:	0452      	lsls	r2, r2, #17
 800c03a:	430a      	orrs	r2, r1
 800c03c:	492a      	ldr	r1, [pc, #168]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	610b      	str	r3, [r1, #16]
 800c042:	e027      	b.n	800c094 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d112      	bne.n	800c070 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c04a:	4b27      	ldr	r3, [pc, #156]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6892      	ldr	r2, [r2, #8]
 800c05a:	0211      	lsls	r1, r2, #8
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6912      	ldr	r2, [r2, #16]
 800c060:	0852      	lsrs	r2, r2, #1
 800c062:	3a01      	subs	r2, #1
 800c064:	0552      	lsls	r2, r2, #21
 800c066:	430a      	orrs	r2, r1
 800c068:	491f      	ldr	r1, [pc, #124]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	610b      	str	r3, [r1, #16]
 800c06e:	e011      	b.n	800c094 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c070:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	6892      	ldr	r2, [r2, #8]
 800c080:	0211      	lsls	r1, r2, #8
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	6952      	ldr	r2, [r2, #20]
 800c086:	0852      	lsrs	r2, r2, #1
 800c088:	3a01      	subs	r2, #1
 800c08a:	0652      	lsls	r2, r2, #25
 800c08c:	430a      	orrs	r2, r1
 800c08e:	4916      	ldr	r1, [pc, #88]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c090:	4313      	orrs	r3, r2
 800c092:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c094:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a13      	ldr	r2, [pc, #76]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c09a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c09e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a0:	f7fd f87a 	bl	8009198 <HAL_GetTick>
 800c0a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c0a6:	e009      	b.n	800c0bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c0a8:	f7fd f876 	bl	8009198 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d902      	bls.n	800c0bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	73fb      	strb	r3, [r7, #15]
          break;
 800c0ba:	e005      	b.n	800c0c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0ef      	beq.n	800c0a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	4904      	ldr	r1, [pc, #16]	; (800c0e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	40021000 	.word	0x40021000

0800c0ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c0fa:	4b6a      	ldr	r3, [pc, #424]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f003 0303 	and.w	r3, r3, #3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d018      	beq.n	800c138 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c106:	4b67      	ldr	r3, [pc, #412]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f003 0203 	and.w	r2, r3, #3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d10d      	bne.n	800c132 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
       ||
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d009      	beq.n	800c132 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c11e:	4b61      	ldr	r3, [pc, #388]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	091b      	lsrs	r3, r3, #4
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
       ||
 800c12e:	429a      	cmp	r2, r3
 800c130:	d047      	beq.n	800c1c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	73fb      	strb	r3, [r7, #15]
 800c136:	e044      	b.n	800c1c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d018      	beq.n	800c172 <RCCEx_PLLSAI2_Config+0x86>
 800c140:	2b03      	cmp	r3, #3
 800c142:	d825      	bhi.n	800c190 <RCCEx_PLLSAI2_Config+0xa4>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d002      	beq.n	800c14e <RCCEx_PLLSAI2_Config+0x62>
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d009      	beq.n	800c160 <RCCEx_PLLSAI2_Config+0x74>
 800c14c:	e020      	b.n	800c190 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c14e:	4b55      	ldr	r3, [pc, #340]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d11d      	bne.n	800c196 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c15e:	e01a      	b.n	800c196 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c160:	4b50      	ldr	r3, [pc, #320]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d116      	bne.n	800c19a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c170:	e013      	b.n	800c19a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c172:	4b4c      	ldr	r3, [pc, #304]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10f      	bne.n	800c19e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c17e:	4b49      	ldr	r3, [pc, #292]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c18e:	e006      	b.n	800c19e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	73fb      	strb	r3, [r7, #15]
      break;
 800c194:	e004      	b.n	800c1a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c196:	bf00      	nop
 800c198:	e002      	b.n	800c1a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c19a:	bf00      	nop
 800c19c:	e000      	b.n	800c1a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c19e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10d      	bne.n	800c1c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c1a6:	4b3f      	ldr	r3, [pc, #252]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6819      	ldr	r1, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	011b      	lsls	r3, r3, #4
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	4939      	ldr	r1, [pc, #228]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d167      	bne.n	800c298 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c1c8:	4b36      	ldr	r3, [pc, #216]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a35      	ldr	r2, [pc, #212]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1d4:	f7fc ffe0 	bl	8009198 <HAL_GetTick>
 800c1d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c1da:	e009      	b.n	800c1f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c1dc:	f7fc ffdc 	bl	8009198 <HAL_GetTick>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d902      	bls.n	800c1f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	73fb      	strb	r3, [r7, #15]
        break;
 800c1ee:	e005      	b.n	800c1fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c1f0:	4b2c      	ldr	r3, [pc, #176]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1ef      	bne.n	800c1dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d14a      	bne.n	800c298 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d111      	bne.n	800c22c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c208:	4b26      	ldr	r3, [pc, #152]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6892      	ldr	r2, [r2, #8]
 800c218:	0211      	lsls	r1, r2, #8
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	68d2      	ldr	r2, [r2, #12]
 800c21e:	0912      	lsrs	r2, r2, #4
 800c220:	0452      	lsls	r2, r2, #17
 800c222:	430a      	orrs	r2, r1
 800c224:	491f      	ldr	r1, [pc, #124]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c226:	4313      	orrs	r3, r2
 800c228:	614b      	str	r3, [r1, #20]
 800c22a:	e011      	b.n	800c250 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c234:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	6892      	ldr	r2, [r2, #8]
 800c23c:	0211      	lsls	r1, r2, #8
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6912      	ldr	r2, [r2, #16]
 800c242:	0852      	lsrs	r2, r2, #1
 800c244:	3a01      	subs	r2, #1
 800c246:	0652      	lsls	r2, r2, #25
 800c248:	430a      	orrs	r2, r1
 800c24a:	4916      	ldr	r1, [pc, #88]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c24c:	4313      	orrs	r3, r2
 800c24e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c250:	4b14      	ldr	r3, [pc, #80]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a13      	ldr	r2, [pc, #76]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c25a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c25c:	f7fc ff9c 	bl	8009198 <HAL_GetTick>
 800c260:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c262:	e009      	b.n	800c278 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c264:	f7fc ff98 	bl	8009198 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d902      	bls.n	800c278 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	73fb      	strb	r3, [r7, #15]
          break;
 800c276:	e005      	b.n	800c284 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0ef      	beq.n	800c264 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c28a:	4b06      	ldr	r3, [pc, #24]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c28c:	695a      	ldr	r2, [r3, #20]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	4904      	ldr	r1, [pc, #16]	; (800c2a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c294:	4313      	orrs	r3, r2
 800c296:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	40021000 	.word	0x40021000

0800c2a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d06c      	beq.n	800c394 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d106      	bne.n	800c2d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7f6 fe74 	bl	8002fbc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	22ca      	movs	r2, #202	; 0xca
 800c2e2:	625a      	str	r2, [r3, #36]	; 0x24
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2253      	movs	r2, #83	; 0x53
 800c2ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fa49 	bl	800c784 <RTC_EnterInitMode>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d14b      	bne.n	800c394 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6812      	ldr	r2, [r2, #0]
 800c306:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c30e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6899      	ldr	r1, [r3, #8]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	431a      	orrs	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	431a      	orrs	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	68d2      	ldr	r2, [r2, #12]
 800c336:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6919      	ldr	r1, [r3, #16]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	041a      	lsls	r2, r3, #16
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fa4d 	bl	800c7ec <RTC_ExitInitMode>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d11b      	bne.n	800c394 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f022 0203 	bic.w	r2, r2, #3
 800c36a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	69da      	ldr	r2, [r3, #28]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	22ff      	movs	r2, #255	; 0xff
 800c38a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c39e:	b590      	push	{r4, r7, lr}
 800c3a0:	b087      	sub	sp, #28
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	60b9      	str	r1, [r7, #8]
 800c3a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d101      	bne.n	800c3b8 <HAL_RTC_SetTime+0x1a>
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	e08b      	b.n	800c4d0 <HAL_RTC_SetTime+0x132>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	22ca      	movs	r2, #202	; 0xca
 800c3ce:	625a      	str	r2, [r3, #36]	; 0x24
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2253      	movs	r2, #83	; 0x53
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f9d3 	bl	800c784 <RTC_EnterInitMode>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3e2:	7cfb      	ldrb	r3, [r7, #19]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d163      	bne.n	800c4b0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d126      	bne.n	800c43c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2200      	movs	r2, #0
 800c400:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	4618      	mov	r0, r3
 800c408:	f000 fa2e 	bl	800c868 <RTC_ByteToBcd2>
 800c40c:	4603      	mov	r3, r0
 800c40e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	785b      	ldrb	r3, [r3, #1]
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fa27 	bl	800c868 <RTC_ByteToBcd2>
 800c41a:	4603      	mov	r3, r0
 800c41c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c41e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	789b      	ldrb	r3, [r3, #2]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fa1f 	bl	800c868 <RTC_ByteToBcd2>
 800c42a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c42c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	78db      	ldrb	r3, [r3, #3]
 800c434:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c436:	4313      	orrs	r3, r2
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	e018      	b.n	800c46e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d102      	bne.n	800c450 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2200      	movs	r2, #0
 800c44e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	785b      	ldrb	r3, [r3, #1]
 800c45a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c45c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c462:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	78db      	ldrb	r3, [r3, #3]
 800c468:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c478:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c47c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689a      	ldr	r2, [r3, #8]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c48c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6899      	ldr	r1, [r3, #8]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	68da      	ldr	r2, [r3, #12]
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	431a      	orrs	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f000 f9a0 	bl	800c7ec <RTC_ExitInitMode>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	22ff      	movs	r2, #255	; 0xff
 800c4b6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c4b8:	7cfb      	ldrb	r3, [r7, #19]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c4ce:	7cfb      	ldrb	r3, [r7, #19]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	371c      	adds	r7, #28
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd90      	pop	{r4, r7, pc}

0800c4d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c506:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c50a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	0c1b      	lsrs	r3, r3, #16
 800c510:	b2db      	uxtb	r3, r3
 800c512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c516:	b2da      	uxtb	r2, r3
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c526:	b2da      	uxtb	r2, r3
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c534:	b2da      	uxtb	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	0d9b      	lsrs	r3, r3, #22
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	b2da      	uxtb	r2, r3
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d11a      	bne.n	800c586 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f000 f9a7 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c55a:	4603      	mov	r3, r0
 800c55c:	461a      	mov	r2, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	785b      	ldrb	r3, [r3, #1]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f99e 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c56c:	4603      	mov	r3, r0
 800c56e:	461a      	mov	r2, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	789b      	ldrb	r3, [r3, #2]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 f995 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c57e:	4603      	mov	r3, r0
 800c580:	461a      	mov	r2, r3
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_RTC_SetDate+0x1a>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e075      	b.n	800c696 <HAL_RTC_SetDate+0x106>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2202      	movs	r2, #2
 800c5b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10e      	bne.n	800c5de <HAL_RTC_SetDate+0x4e>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	785b      	ldrb	r3, [r3, #1]
 800c5c4:	f003 0310 	and.w	r3, r3, #16
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d008      	beq.n	800c5de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	785b      	ldrb	r3, [r3, #1]
 800c5d0:	f023 0310 	bic.w	r3, r3, #16
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	330a      	adds	r3, #10
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d11c      	bne.n	800c61e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	78db      	ldrb	r3, [r3, #3]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f93d 	bl	800c868 <RTC_ByteToBcd2>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 f936 	bl	800c868 <RTC_ByteToBcd2>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c600:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	789b      	ldrb	r3, [r3, #2]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f92e 	bl	800c868 <RTC_ByteToBcd2>
 800c60c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c60e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c618:	4313      	orrs	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	e00e      	b.n	800c63c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	78db      	ldrb	r3, [r3, #3]
 800c622:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	785b      	ldrb	r3, [r3, #1]
 800c628:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c62a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c630:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	22ca      	movs	r2, #202	; 0xca
 800c642:	625a      	str	r2, [r3, #36]	; 0x24
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2253      	movs	r2, #83	; 0x53
 800c64a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 f899 	bl	800c784 <RTC_EnterInitMode>
 800c652:	4603      	mov	r3, r0
 800c654:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c656:	7cfb      	ldrb	r3, [r7, #19]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10c      	bne.n	800c676 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c666:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c66a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f000 f8bd 	bl	800c7ec <RTC_ExitInitMode>
 800c672:	4603      	mov	r3, r0
 800c674:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	22ff      	movs	r2, #255	; 0xff
 800c67c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c67e:	7cfb      	ldrb	r3, [r7, #19]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d103      	bne.n	800c68c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c694:	7cfb      	ldrb	r3, [r7, #19]
}
 800c696:	4618      	mov	r0, r3
 800c698:	371c      	adds	r7, #28
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd90      	pop	{r4, r7, pc}

0800c69e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b086      	sub	sp, #24
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c6b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c6b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	0c1b      	lsrs	r3, r3, #16
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	0a1b      	lsrs	r3, r3, #8
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	f003 031f 	and.w	r3, r3, #31
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	0b5b      	lsrs	r3, r3, #13
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d11a      	bne.n	800c72e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	78db      	ldrb	r3, [r3, #3]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f8d3 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c702:	4603      	mov	r3, r0
 800c704:	461a      	mov	r2, r3
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	785b      	ldrb	r3, [r3, #1]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f8ca 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c714:	4603      	mov	r3, r0
 800c716:	461a      	mov	r2, r3
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	789b      	ldrb	r3, [r3, #2]
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f8c1 	bl	800c8a8 <RTC_Bcd2ToByte>
 800c726:	4603      	mov	r3, r0
 800c728:	461a      	mov	r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c74e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c750:	f7fc fd22 	bl	8009198 <HAL_GetTick>
 800c754:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c756:	e009      	b.n	800c76c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c758:	f7fc fd1e 	bl	8009198 <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c766:	d901      	bls.n	800c76c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e007      	b.n	800c77c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	f003 0320 	and.w	r3, r3, #32
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0ee      	beq.n	800c758 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d120      	bne.n	800c7e0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c7a8:	f7fc fcf6 	bl	8009198 <HAL_GetTick>
 800c7ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c7ae:	e00d      	b.n	800c7cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c7b0:	f7fc fcf2 	bl	8009198 <HAL_GetTick>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7be:	d905      	bls.n	800c7cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <RTC_EnterInitMode+0x5c>
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d1e7      	bne.n	800c7b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	4a19      	ldr	r2, [pc, #100]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c802:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c804:	4b17      	ldr	r3, [pc, #92]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10c      	bne.n	800c82a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ff91 	bl	800c738 <HAL_RTC_WaitForSynchro>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d01e      	beq.n	800c85a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2203      	movs	r2, #3
 800c820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	73fb      	strb	r3, [r7, #15]
 800c828:	e017      	b.n	800c85a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c82a:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	4a0d      	ldr	r2, [pc, #52]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c830:	f023 0320 	bic.w	r3, r3, #32
 800c834:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff ff7e 	bl	800c738 <HAL_RTC_WaitForSynchro>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d005      	beq.n	800c84e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2203      	movs	r2, #3
 800c846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c84e:	4b05      	ldr	r3, [pc, #20]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	4a04      	ldr	r2, [pc, #16]	; (800c864 <RTC_ExitInitMode+0x78>)
 800c854:	f043 0320 	orr.w	r3, r3, #32
 800c858:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	40002800 	.word	0x40002800

0800c868 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c87a:	e005      	b.n	800c888 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3301      	adds	r3, #1
 800c880:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c882:	7afb      	ldrb	r3, [r7, #11]
 800c884:	3b0a      	subs	r3, #10
 800c886:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	2b09      	cmp	r3, #9
 800c88c:	d8f6      	bhi.n	800c87c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	b2db      	uxtb	r3, r3
 800c892:	011b      	lsls	r3, r3, #4
 800c894:	b2da      	uxtb	r2, r3
 800c896:	7afb      	ldrb	r3, [r7, #11]
 800c898:	4313      	orrs	r3, r2
 800c89a:	b2db      	uxtb	r3, r3
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	091b      	lsrs	r3, r3, #4
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	0092      	lsls	r2, r2, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c8c2:	79fb      	ldrb	r3, [r7, #7]
 800c8c4:	f003 030f 	and.w	r3, r3, #15
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	b2db      	uxtb	r3, r3
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e049      	b.n	800c982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d106      	bne.n	800c908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7f6 fede 	bl	80036c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3304      	adds	r3, #4
 800c918:	4619      	mov	r1, r3
 800c91a:	4610      	mov	r0, r2
 800c91c:	f000 fae6 	bl	800ceec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d001      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e04f      	b.n	800ca44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f042 0201 	orr.w	r2, r2, #1
 800c9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a23      	ldr	r2, [pc, #140]	; (800ca50 <HAL_TIM_Base_Start_IT+0xc4>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d01d      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9ce:	d018      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a1f      	ldr	r2, [pc, #124]	; (800ca54 <HAL_TIM_Base_Start_IT+0xc8>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d013      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a1e      	ldr	r2, [pc, #120]	; (800ca58 <HAL_TIM_Base_Start_IT+0xcc>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d00e      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1c      	ldr	r2, [pc, #112]	; (800ca5c <HAL_TIM_Base_Start_IT+0xd0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d009      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a1b      	ldr	r2, [pc, #108]	; (800ca60 <HAL_TIM_Base_Start_IT+0xd4>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d004      	beq.n	800ca02 <HAL_TIM_Base_Start_IT+0x76>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a19      	ldr	r2, [pc, #100]	; (800ca64 <HAL_TIM_Base_Start_IT+0xd8>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d115      	bne.n	800ca2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	4b17      	ldr	r3, [pc, #92]	; (800ca68 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b06      	cmp	r3, #6
 800ca12:	d015      	beq.n	800ca40 <HAL_TIM_Base_Start_IT+0xb4>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca1a:	d011      	beq.n	800ca40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f042 0201 	orr.w	r2, r2, #1
 800ca2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca2c:	e008      	b.n	800ca40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f042 0201 	orr.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	e000      	b.n	800ca42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr
 800ca50:	40012c00 	.word	0x40012c00
 800ca54:	40000400 	.word	0x40000400
 800ca58:	40000800 	.word	0x40000800
 800ca5c:	40000c00 	.word	0x40000c00
 800ca60:	40013400 	.word	0x40013400
 800ca64:	40014000 	.word	0x40014000
 800ca68:	00010007 	.word	0x00010007

0800ca6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0201 	bic.w	r2, r2, #1
 800ca82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6a1a      	ldr	r2, [r3, #32]
 800ca8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10f      	bne.n	800cab4 <HAL_TIM_Base_Stop_IT+0x48>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6a1a      	ldr	r2, [r3, #32]
 800ca9a:	f240 4344 	movw	r3, #1092	; 0x444
 800ca9e:	4013      	ands	r3, r2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d107      	bne.n	800cab4 <HAL_TIM_Base_Stop_IT+0x48>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f022 0201 	bic.w	r2, r2, #1
 800cab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b082      	sub	sp, #8
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	f003 0302 	and.w	r3, r3, #2
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d122      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b02      	cmp	r3, #2
 800caec:	d11b      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f06f 0202 	mvn.w	r2, #2
 800caf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f003 0303 	and.w	r3, r3, #3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f9ce 	bl	800ceae <HAL_TIM_IC_CaptureCallback>
 800cb12:	e005      	b.n	800cb20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f9c0 	bl	800ce9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f9d1 	bl	800cec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b04      	cmp	r3, #4
 800cb32:	d122      	bne.n	800cb7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d11b      	bne.n	800cb7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f06f 0204 	mvn.w	r2, #4
 800cb4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2202      	movs	r2, #2
 800cb50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f9a4 	bl	800ceae <HAL_TIM_IC_CaptureCallback>
 800cb66:	e005      	b.n	800cb74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f996 	bl	800ce9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9a7 	bl	800cec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0308 	and.w	r3, r3, #8
 800cb84:	2b08      	cmp	r3, #8
 800cb86:	d122      	bne.n	800cbce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b08      	cmp	r3, #8
 800cb94:	d11b      	bne.n	800cbce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f06f 0208 	mvn.w	r2, #8
 800cb9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2204      	movs	r2, #4
 800cba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d003      	beq.n	800cbbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f97a 	bl	800ceae <HAL_TIM_IC_CaptureCallback>
 800cbba:	e005      	b.n	800cbc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f96c 	bl	800ce9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f97d 	bl	800cec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f003 0310 	and.w	r3, r3, #16
 800cbd8:	2b10      	cmp	r3, #16
 800cbda:	d122      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f003 0310 	and.w	r3, r3, #16
 800cbe6:	2b10      	cmp	r3, #16
 800cbe8:	d11b      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f06f 0210 	mvn.w	r2, #16
 800cbf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2208      	movs	r2, #8
 800cbf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d003      	beq.n	800cc10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f950 	bl	800ceae <HAL_TIM_IC_CaptureCallback>
 800cc0e:	e005      	b.n	800cc1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f942 	bl	800ce9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f953 	bl	800cec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d10e      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d107      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f06f 0201 	mvn.w	r2, #1
 800cc46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7f4 f95d 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc58:	2b80      	cmp	r3, #128	; 0x80
 800cc5a:	d10e      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc66:	2b80      	cmp	r3, #128	; 0x80
 800cc68:	d107      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 faff 	bl	800d278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc88:	d10e      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc94:	2b80      	cmp	r3, #128	; 0x80
 800cc96:	d107      	bne.n	800cca8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 faf2 	bl	800d28c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb2:	2b40      	cmp	r3, #64	; 0x40
 800ccb4:	d10e      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc0:	2b40      	cmp	r3, #64	; 0x40
 800ccc2:	d107      	bne.n	800ccd4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f901 	bl	800ced6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	d10e      	bne.n	800cd00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b20      	cmp	r3, #32
 800ccee:	d107      	bne.n	800cd00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f06f 0220 	mvn.w	r2, #32
 800ccf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fab2 	bl	800d264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d101      	bne.n	800cd24 <HAL_TIM_ConfigClockSource+0x1c>
 800cd20:	2302      	movs	r3, #2
 800cd22:	e0b6      	b.n	800ce92 <HAL_TIM_ConfigClockSource+0x18a>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd60:	d03e      	beq.n	800cde0 <HAL_TIM_ConfigClockSource+0xd8>
 800cd62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd66:	f200 8087 	bhi.w	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd6e:	f000 8086 	beq.w	800ce7e <HAL_TIM_ConfigClockSource+0x176>
 800cd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd76:	d87f      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd78:	2b70      	cmp	r3, #112	; 0x70
 800cd7a:	d01a      	beq.n	800cdb2 <HAL_TIM_ConfigClockSource+0xaa>
 800cd7c:	2b70      	cmp	r3, #112	; 0x70
 800cd7e:	d87b      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd80:	2b60      	cmp	r3, #96	; 0x60
 800cd82:	d050      	beq.n	800ce26 <HAL_TIM_ConfigClockSource+0x11e>
 800cd84:	2b60      	cmp	r3, #96	; 0x60
 800cd86:	d877      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd88:	2b50      	cmp	r3, #80	; 0x50
 800cd8a:	d03c      	beq.n	800ce06 <HAL_TIM_ConfigClockSource+0xfe>
 800cd8c:	2b50      	cmp	r3, #80	; 0x50
 800cd8e:	d873      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	d058      	beq.n	800ce46 <HAL_TIM_ConfigClockSource+0x13e>
 800cd94:	2b40      	cmp	r3, #64	; 0x40
 800cd96:	d86f      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cd98:	2b30      	cmp	r3, #48	; 0x30
 800cd9a:	d064      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x15e>
 800cd9c:	2b30      	cmp	r3, #48	; 0x30
 800cd9e:	d86b      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d060      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x15e>
 800cda4:	2b20      	cmp	r3, #32
 800cda6:	d867      	bhi.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d05c      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x15e>
 800cdac:	2b10      	cmp	r3, #16
 800cdae:	d05a      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x15e>
 800cdb0:	e062      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	6899      	ldr	r1, [r3, #8]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f000 f9a7 	bl	800d114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cdd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	609a      	str	r2, [r3, #8]
      break;
 800cdde:	e04f      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6818      	ldr	r0, [r3, #0]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	6899      	ldr	r1, [r3, #8]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f000 f990 	bl	800d114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689a      	ldr	r2, [r3, #8]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce02:	609a      	str	r2, [r3, #8]
      break;
 800ce04:	e03c      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	6859      	ldr	r1, [r3, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f000 f904 	bl	800d020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2150      	movs	r1, #80	; 0x50
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 f95d 	bl	800d0de <TIM_ITRx_SetConfig>
      break;
 800ce24:	e02c      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	6859      	ldr	r1, [r3, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	461a      	mov	r2, r3
 800ce34:	f000 f923 	bl	800d07e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2160      	movs	r1, #96	; 0x60
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f94d 	bl	800d0de <TIM_ITRx_SetConfig>
      break;
 800ce44:	e01c      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	6859      	ldr	r1, [r3, #4]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	461a      	mov	r2, r3
 800ce54:	f000 f8e4 	bl	800d020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2140      	movs	r1, #64	; 0x40
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f93d 	bl	800d0de <TIM_ITRx_SetConfig>
      break;
 800ce64:	e00c      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f000 f934 	bl	800d0de <TIM_ITRx_SetConfig>
      break;
 800ce76:	e003      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce7c:	e000      	b.n	800ce80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ce7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b083      	sub	sp, #12
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b083      	sub	sp, #12
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b083      	sub	sp, #12
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cede:	bf00      	nop
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
	...

0800ceec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a40      	ldr	r2, [pc, #256]	; (800d000 <TIM_Base_SetConfig+0x114>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d013      	beq.n	800cf2c <TIM_Base_SetConfig+0x40>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf0a:	d00f      	beq.n	800cf2c <TIM_Base_SetConfig+0x40>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a3d      	ldr	r2, [pc, #244]	; (800d004 <TIM_Base_SetConfig+0x118>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d00b      	beq.n	800cf2c <TIM_Base_SetConfig+0x40>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a3c      	ldr	r2, [pc, #240]	; (800d008 <TIM_Base_SetConfig+0x11c>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d007      	beq.n	800cf2c <TIM_Base_SetConfig+0x40>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a3b      	ldr	r2, [pc, #236]	; (800d00c <TIM_Base_SetConfig+0x120>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d003      	beq.n	800cf2c <TIM_Base_SetConfig+0x40>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a3a      	ldr	r2, [pc, #232]	; (800d010 <TIM_Base_SetConfig+0x124>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d108      	bne.n	800cf3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a2f      	ldr	r2, [pc, #188]	; (800d000 <TIM_Base_SetConfig+0x114>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d01f      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf4c:	d01b      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a2c      	ldr	r2, [pc, #176]	; (800d004 <TIM_Base_SetConfig+0x118>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d017      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a2b      	ldr	r2, [pc, #172]	; (800d008 <TIM_Base_SetConfig+0x11c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d013      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a2a      	ldr	r2, [pc, #168]	; (800d00c <TIM_Base_SetConfig+0x120>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00f      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a29      	ldr	r2, [pc, #164]	; (800d010 <TIM_Base_SetConfig+0x124>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d00b      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a28      	ldr	r2, [pc, #160]	; (800d014 <TIM_Base_SetConfig+0x128>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d007      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a27      	ldr	r2, [pc, #156]	; (800d018 <TIM_Base_SetConfig+0x12c>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d003      	beq.n	800cf86 <TIM_Base_SetConfig+0x9a>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4a26      	ldr	r2, [pc, #152]	; (800d01c <TIM_Base_SetConfig+0x130>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d108      	bne.n	800cf98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a10      	ldr	r2, [pc, #64]	; (800d000 <TIM_Base_SetConfig+0x114>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d00f      	beq.n	800cfe4 <TIM_Base_SetConfig+0xf8>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a12      	ldr	r2, [pc, #72]	; (800d010 <TIM_Base_SetConfig+0x124>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d00b      	beq.n	800cfe4 <TIM_Base_SetConfig+0xf8>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a11      	ldr	r2, [pc, #68]	; (800d014 <TIM_Base_SetConfig+0x128>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d007      	beq.n	800cfe4 <TIM_Base_SetConfig+0xf8>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a10      	ldr	r2, [pc, #64]	; (800d018 <TIM_Base_SetConfig+0x12c>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d003      	beq.n	800cfe4 <TIM_Base_SetConfig+0xf8>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a0f      	ldr	r2, [pc, #60]	; (800d01c <TIM_Base_SetConfig+0x130>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d103      	bne.n	800cfec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	691a      	ldr	r2, [r3, #16]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	615a      	str	r2, [r3, #20]
}
 800cff2:	bf00      	nop
 800cff4:	3714      	adds	r7, #20
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	40012c00 	.word	0x40012c00
 800d004:	40000400 	.word	0x40000400
 800d008:	40000800 	.word	0x40000800
 800d00c:	40000c00 	.word	0x40000c00
 800d010:	40013400 	.word	0x40013400
 800d014:	40014000 	.word	0x40014000
 800d018:	40014400 	.word	0x40014400
 800d01c:	40014800 	.word	0x40014800

0800d020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	f023 0201 	bic.w	r2, r3, #1
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d04a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	011b      	lsls	r3, r3, #4
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	4313      	orrs	r3, r2
 800d054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f023 030a 	bic.w	r3, r3, #10
 800d05c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	4313      	orrs	r3, r2
 800d064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	621a      	str	r2, [r3, #32]
}
 800d072:	bf00      	nop
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d07e:	b480      	push	{r7}
 800d080:	b087      	sub	sp, #28
 800d082:	af00      	add	r7, sp, #0
 800d084:	60f8      	str	r0, [r7, #12]
 800d086:	60b9      	str	r1, [r7, #8]
 800d088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	f023 0210 	bic.w	r2, r3, #16
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a1b      	ldr	r3, [r3, #32]
 800d0a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d0a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	031b      	lsls	r3, r3, #12
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d0ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	011b      	lsls	r3, r3, #4
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	693a      	ldr	r2, [r7, #16]
 800d0d0:	621a      	str	r2, [r3, #32]
}
 800d0d2:	bf00      	nop
 800d0d4:	371c      	adds	r7, #28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	f043 0307 	orr.w	r3, r3, #7
 800d100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	609a      	str	r2, [r3, #8]
}
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d12e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	021a      	lsls	r2, r3, #8
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	431a      	orrs	r2, r3
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	4313      	orrs	r3, r2
 800d140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	609a      	str	r2, [r3, #8]
}
 800d148:	bf00      	nop
 800d14a:	371c      	adds	r7, #28
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d168:	2302      	movs	r3, #2
 800d16a:	e068      	b.n	800d23e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a2e      	ldr	r2, [pc, #184]	; (800d24c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d004      	beq.n	800d1a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a2d      	ldr	r2, [pc, #180]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d108      	bne.n	800d1b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d1a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1e      	ldr	r2, [pc, #120]	; (800d24c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d01d      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1de:	d018      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a1b      	ldr	r2, [pc, #108]	; (800d254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d013      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a1a      	ldr	r2, [pc, #104]	; (800d258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d00e      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a18      	ldr	r2, [pc, #96]	; (800d25c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d009      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a13      	ldr	r2, [pc, #76]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d004      	beq.n	800d212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a14      	ldr	r2, [pc, #80]	; (800d260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d10c      	bne.n	800d22c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	4313      	orrs	r3, r2
 800d222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	40012c00 	.word	0x40012c00
 800d250:	40013400 	.word	0x40013400
 800d254:	40000400 	.word	0x40000400
 800d258:	40000800 	.word	0x40000800
 800d25c:	40000c00 	.word	0x40000c00
 800d260:	40014000 	.word	0x40014000

0800d264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d26c:	bf00      	nop
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e040      	b.n	800d334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7f6 fa54 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2224      	movs	r2, #36	; 0x24
 800d2cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f022 0201 	bic.w	r2, r2, #1
 800d2dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f940 	bl	800d564 <UART_SetConfig>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d101      	bne.n	800d2ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e022      	b.n	800d334 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fbbe 	bl	800da78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d30a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	689a      	ldr	r2, [r3, #8]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d31a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f042 0201 	orr.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fc45 	bl	800dbbc <UART_CheckIdleState>
 800d332:	4603      	mov	r3, r0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	; 0x28
 800d340:	af02      	add	r7, sp, #8
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	603b      	str	r3, [r7, #0]
 800d348:	4613      	mov	r3, r2
 800d34a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d350:	2b20      	cmp	r3, #32
 800d352:	f040 8082 	bne.w	800d45a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <HAL_UART_Transmit+0x26>
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e07a      	b.n	800d45c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_UART_Transmit+0x38>
 800d370:	2302      	movs	r3, #2
 800d372:	e073      	b.n	800d45c <HAL_UART_Transmit+0x120>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2221      	movs	r2, #33	; 0x21
 800d388:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d38a:	f7fb ff05 	bl	8009198 <HAL_GetTick>
 800d38e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	88fa      	ldrh	r2, [r7, #6]
 800d394:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	88fa      	ldrh	r2, [r7, #6]
 800d39c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3a8:	d108      	bne.n	800d3bc <HAL_UART_Transmit+0x80>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	e003      	b.n	800d3c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d3cc:	e02d      	b.n	800d42a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	2180      	movs	r1, #128	; 0x80
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f000 fc38 	bl	800dc4e <UART_WaitOnFlagUntilTimeout>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e039      	b.n	800d45c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10b      	bne.n	800d406 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	881a      	ldrh	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3fa:	b292      	uxth	r2, r2
 800d3fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	3302      	adds	r3, #2
 800d402:	61bb      	str	r3, [r7, #24]
 800d404:	e008      	b.n	800d418 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	781a      	ldrb	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	b292      	uxth	r2, r2
 800d410:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	3301      	adds	r3, #1
 800d416:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d41e:	b29b      	uxth	r3, r3
 800d420:	3b01      	subs	r3, #1
 800d422:	b29a      	uxth	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d430:	b29b      	uxth	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1cb      	bne.n	800d3ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2200      	movs	r2, #0
 800d43e:	2140      	movs	r1, #64	; 0x40
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 fc04 	bl	800dc4e <UART_WaitOnFlagUntilTimeout>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e005      	b.n	800d45c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2220      	movs	r2, #32
 800d454:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	e000      	b.n	800d45c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d45a:	2302      	movs	r3, #2
  }
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08a      	sub	sp, #40	; 0x28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	4613      	mov	r3, r2
 800d470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d476:	2b20      	cmp	r3, #32
 800d478:	d142      	bne.n	800d500 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <HAL_UART_Receive_DMA+0x22>
 800d480:	88fb      	ldrh	r3, [r7, #6]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e03b      	b.n	800d502 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d490:	2b01      	cmp	r3, #1
 800d492:	d101      	bne.n	800d498 <HAL_UART_Receive_DMA+0x34>
 800d494:	2302      	movs	r3, #2
 800d496:	e034      	b.n	800d502 <HAL_UART_Receive_DMA+0x9e>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a18      	ldr	r2, [pc, #96]	; (800d50c <HAL_UART_Receive_DMA+0xa8>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d01f      	beq.n	800d4f0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d018      	beq.n	800d4f0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	623b      	str	r3, [r7, #32]
 800d4de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	69f9      	ldr	r1, [r7, #28]
 800d4e2:	6a3a      	ldr	r2, [r7, #32]
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d4f0:	88fb      	ldrh	r3, [r7, #6]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f000 fc6e 	bl	800ddd8 <UART_Start_Receive_DMA>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	e000      	b.n	800d502 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d500:	2302      	movs	r3, #2
  }
}
 800d502:	4618      	mov	r0, r3
 800d504:	3728      	adds	r7, #40	; 0x28
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	40008000 	.word	0x40008000

0800d510 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d564:	b5b0      	push	{r4, r5, r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	431a      	orrs	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	431a      	orrs	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	69db      	ldr	r3, [r3, #28]
 800d584:	4313      	orrs	r3, r2
 800d586:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4bad      	ldr	r3, [pc, #692]	; (800d844 <UART_SetConfig+0x2e0>)
 800d590:	4013      	ands	r3, r2
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	6812      	ldr	r2, [r2, #0]
 800d596:	69f9      	ldr	r1, [r7, #28]
 800d598:	430b      	orrs	r3, r1
 800d59a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68da      	ldr	r2, [r3, #12]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4aa2      	ldr	r2, [pc, #648]	; (800d848 <UART_SetConfig+0x2e4>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d004      	beq.n	800d5cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	69fa      	ldr	r2, [r7, #28]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	69fa      	ldr	r2, [r7, #28]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a99      	ldr	r2, [pc, #612]	; (800d84c <UART_SetConfig+0x2e8>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d121      	bne.n	800d62e <UART_SetConfig+0xca>
 800d5ea:	4b99      	ldr	r3, [pc, #612]	; (800d850 <UART_SetConfig+0x2ec>)
 800d5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5f0:	f003 0303 	and.w	r3, r3, #3
 800d5f4:	2b03      	cmp	r3, #3
 800d5f6:	d817      	bhi.n	800d628 <UART_SetConfig+0xc4>
 800d5f8:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <UART_SetConfig+0x9c>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d611 	.word	0x0800d611
 800d604:	0800d61d 	.word	0x0800d61d
 800d608:	0800d617 	.word	0x0800d617
 800d60c:	0800d623 	.word	0x0800d623
 800d610:	2301      	movs	r3, #1
 800d612:	76fb      	strb	r3, [r7, #27]
 800d614:	e0e7      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d616:	2302      	movs	r3, #2
 800d618:	76fb      	strb	r3, [r7, #27]
 800d61a:	e0e4      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d61c:	2304      	movs	r3, #4
 800d61e:	76fb      	strb	r3, [r7, #27]
 800d620:	e0e1      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d622:	2308      	movs	r3, #8
 800d624:	76fb      	strb	r3, [r7, #27]
 800d626:	e0de      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d628:	2310      	movs	r3, #16
 800d62a:	76fb      	strb	r3, [r7, #27]
 800d62c:	e0db      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a88      	ldr	r2, [pc, #544]	; (800d854 <UART_SetConfig+0x2f0>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d132      	bne.n	800d69e <UART_SetConfig+0x13a>
 800d638:	4b85      	ldr	r3, [pc, #532]	; (800d850 <UART_SetConfig+0x2ec>)
 800d63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d63e:	f003 030c 	and.w	r3, r3, #12
 800d642:	2b0c      	cmp	r3, #12
 800d644:	d828      	bhi.n	800d698 <UART_SetConfig+0x134>
 800d646:	a201      	add	r2, pc, #4	; (adr r2, 800d64c <UART_SetConfig+0xe8>)
 800d648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64c:	0800d681 	.word	0x0800d681
 800d650:	0800d699 	.word	0x0800d699
 800d654:	0800d699 	.word	0x0800d699
 800d658:	0800d699 	.word	0x0800d699
 800d65c:	0800d68d 	.word	0x0800d68d
 800d660:	0800d699 	.word	0x0800d699
 800d664:	0800d699 	.word	0x0800d699
 800d668:	0800d699 	.word	0x0800d699
 800d66c:	0800d687 	.word	0x0800d687
 800d670:	0800d699 	.word	0x0800d699
 800d674:	0800d699 	.word	0x0800d699
 800d678:	0800d699 	.word	0x0800d699
 800d67c:	0800d693 	.word	0x0800d693
 800d680:	2300      	movs	r3, #0
 800d682:	76fb      	strb	r3, [r7, #27]
 800d684:	e0af      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d686:	2302      	movs	r3, #2
 800d688:	76fb      	strb	r3, [r7, #27]
 800d68a:	e0ac      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d68c:	2304      	movs	r3, #4
 800d68e:	76fb      	strb	r3, [r7, #27]
 800d690:	e0a9      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d692:	2308      	movs	r3, #8
 800d694:	76fb      	strb	r3, [r7, #27]
 800d696:	e0a6      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d698:	2310      	movs	r3, #16
 800d69a:	76fb      	strb	r3, [r7, #27]
 800d69c:	e0a3      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a6d      	ldr	r2, [pc, #436]	; (800d858 <UART_SetConfig+0x2f4>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d120      	bne.n	800d6ea <UART_SetConfig+0x186>
 800d6a8:	4b69      	ldr	r3, [pc, #420]	; (800d850 <UART_SetConfig+0x2ec>)
 800d6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d6b2:	2b30      	cmp	r3, #48	; 0x30
 800d6b4:	d013      	beq.n	800d6de <UART_SetConfig+0x17a>
 800d6b6:	2b30      	cmp	r3, #48	; 0x30
 800d6b8:	d814      	bhi.n	800d6e4 <UART_SetConfig+0x180>
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	d009      	beq.n	800d6d2 <UART_SetConfig+0x16e>
 800d6be:	2b20      	cmp	r3, #32
 800d6c0:	d810      	bhi.n	800d6e4 <UART_SetConfig+0x180>
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d002      	beq.n	800d6cc <UART_SetConfig+0x168>
 800d6c6:	2b10      	cmp	r3, #16
 800d6c8:	d006      	beq.n	800d6d8 <UART_SetConfig+0x174>
 800d6ca:	e00b      	b.n	800d6e4 <UART_SetConfig+0x180>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	76fb      	strb	r3, [r7, #27]
 800d6d0:	e089      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	76fb      	strb	r3, [r7, #27]
 800d6d6:	e086      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d6d8:	2304      	movs	r3, #4
 800d6da:	76fb      	strb	r3, [r7, #27]
 800d6dc:	e083      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d6de:	2308      	movs	r3, #8
 800d6e0:	76fb      	strb	r3, [r7, #27]
 800d6e2:	e080      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d6e4:	2310      	movs	r3, #16
 800d6e6:	76fb      	strb	r3, [r7, #27]
 800d6e8:	e07d      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a5b      	ldr	r2, [pc, #364]	; (800d85c <UART_SetConfig+0x2f8>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d120      	bne.n	800d736 <UART_SetConfig+0x1d2>
 800d6f4:	4b56      	ldr	r3, [pc, #344]	; (800d850 <UART_SetConfig+0x2ec>)
 800d6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d6fe:	2bc0      	cmp	r3, #192	; 0xc0
 800d700:	d013      	beq.n	800d72a <UART_SetConfig+0x1c6>
 800d702:	2bc0      	cmp	r3, #192	; 0xc0
 800d704:	d814      	bhi.n	800d730 <UART_SetConfig+0x1cc>
 800d706:	2b80      	cmp	r3, #128	; 0x80
 800d708:	d009      	beq.n	800d71e <UART_SetConfig+0x1ba>
 800d70a:	2b80      	cmp	r3, #128	; 0x80
 800d70c:	d810      	bhi.n	800d730 <UART_SetConfig+0x1cc>
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d002      	beq.n	800d718 <UART_SetConfig+0x1b4>
 800d712:	2b40      	cmp	r3, #64	; 0x40
 800d714:	d006      	beq.n	800d724 <UART_SetConfig+0x1c0>
 800d716:	e00b      	b.n	800d730 <UART_SetConfig+0x1cc>
 800d718:	2300      	movs	r3, #0
 800d71a:	76fb      	strb	r3, [r7, #27]
 800d71c:	e063      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d71e:	2302      	movs	r3, #2
 800d720:	76fb      	strb	r3, [r7, #27]
 800d722:	e060      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d724:	2304      	movs	r3, #4
 800d726:	76fb      	strb	r3, [r7, #27]
 800d728:	e05d      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d72a:	2308      	movs	r3, #8
 800d72c:	76fb      	strb	r3, [r7, #27]
 800d72e:	e05a      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d730:	2310      	movs	r3, #16
 800d732:	76fb      	strb	r3, [r7, #27]
 800d734:	e057      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a49      	ldr	r2, [pc, #292]	; (800d860 <UART_SetConfig+0x2fc>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d125      	bne.n	800d78c <UART_SetConfig+0x228>
 800d740:	4b43      	ldr	r3, [pc, #268]	; (800d850 <UART_SetConfig+0x2ec>)
 800d742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d74a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d74e:	d017      	beq.n	800d780 <UART_SetConfig+0x21c>
 800d750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d754:	d817      	bhi.n	800d786 <UART_SetConfig+0x222>
 800d756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d75a:	d00b      	beq.n	800d774 <UART_SetConfig+0x210>
 800d75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d760:	d811      	bhi.n	800d786 <UART_SetConfig+0x222>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <UART_SetConfig+0x20a>
 800d766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d76a:	d006      	beq.n	800d77a <UART_SetConfig+0x216>
 800d76c:	e00b      	b.n	800d786 <UART_SetConfig+0x222>
 800d76e:	2300      	movs	r3, #0
 800d770:	76fb      	strb	r3, [r7, #27]
 800d772:	e038      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d774:	2302      	movs	r3, #2
 800d776:	76fb      	strb	r3, [r7, #27]
 800d778:	e035      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d77a:	2304      	movs	r3, #4
 800d77c:	76fb      	strb	r3, [r7, #27]
 800d77e:	e032      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d780:	2308      	movs	r3, #8
 800d782:	76fb      	strb	r3, [r7, #27]
 800d784:	e02f      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d786:	2310      	movs	r3, #16
 800d788:	76fb      	strb	r3, [r7, #27]
 800d78a:	e02c      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a2d      	ldr	r2, [pc, #180]	; (800d848 <UART_SetConfig+0x2e4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d125      	bne.n	800d7e2 <UART_SetConfig+0x27e>
 800d796:	4b2e      	ldr	r3, [pc, #184]	; (800d850 <UART_SetConfig+0x2ec>)
 800d798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d79c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d7a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7a4:	d017      	beq.n	800d7d6 <UART_SetConfig+0x272>
 800d7a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7aa:	d817      	bhi.n	800d7dc <UART_SetConfig+0x278>
 800d7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7b0:	d00b      	beq.n	800d7ca <UART_SetConfig+0x266>
 800d7b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7b6:	d811      	bhi.n	800d7dc <UART_SetConfig+0x278>
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d003      	beq.n	800d7c4 <UART_SetConfig+0x260>
 800d7bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7c0:	d006      	beq.n	800d7d0 <UART_SetConfig+0x26c>
 800d7c2:	e00b      	b.n	800d7dc <UART_SetConfig+0x278>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	76fb      	strb	r3, [r7, #27]
 800d7c8:	e00d      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	76fb      	strb	r3, [r7, #27]
 800d7ce:	e00a      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d7d0:	2304      	movs	r3, #4
 800d7d2:	76fb      	strb	r3, [r7, #27]
 800d7d4:	e007      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d7d6:	2308      	movs	r3, #8
 800d7d8:	76fb      	strb	r3, [r7, #27]
 800d7da:	e004      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d7dc:	2310      	movs	r3, #16
 800d7de:	76fb      	strb	r3, [r7, #27]
 800d7e0:	e001      	b.n	800d7e6 <UART_SetConfig+0x282>
 800d7e2:	2310      	movs	r3, #16
 800d7e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a17      	ldr	r2, [pc, #92]	; (800d848 <UART_SetConfig+0x2e4>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	f040 8087 	bne.w	800d900 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7f2:	7efb      	ldrb	r3, [r7, #27]
 800d7f4:	2b08      	cmp	r3, #8
 800d7f6:	d837      	bhi.n	800d868 <UART_SetConfig+0x304>
 800d7f8:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <UART_SetConfig+0x29c>)
 800d7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fe:	bf00      	nop
 800d800:	0800d825 	.word	0x0800d825
 800d804:	0800d869 	.word	0x0800d869
 800d808:	0800d82d 	.word	0x0800d82d
 800d80c:	0800d869 	.word	0x0800d869
 800d810:	0800d833 	.word	0x0800d833
 800d814:	0800d869 	.word	0x0800d869
 800d818:	0800d869 	.word	0x0800d869
 800d81c:	0800d869 	.word	0x0800d869
 800d820:	0800d83b 	.word	0x0800d83b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d824:	f7fd fff8 	bl	800b818 <HAL_RCC_GetPCLK1Freq>
 800d828:	6178      	str	r0, [r7, #20]
        break;
 800d82a:	e022      	b.n	800d872 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <UART_SetConfig+0x300>)
 800d82e:	617b      	str	r3, [r7, #20]
        break;
 800d830:	e01f      	b.n	800d872 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d832:	f7fd ff59 	bl	800b6e8 <HAL_RCC_GetSysClockFreq>
 800d836:	6178      	str	r0, [r7, #20]
        break;
 800d838:	e01b      	b.n	800d872 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d83e:	617b      	str	r3, [r7, #20]
        break;
 800d840:	e017      	b.n	800d872 <UART_SetConfig+0x30e>
 800d842:	bf00      	nop
 800d844:	efff69f3 	.word	0xefff69f3
 800d848:	40008000 	.word	0x40008000
 800d84c:	40013800 	.word	0x40013800
 800d850:	40021000 	.word	0x40021000
 800d854:	40004400 	.word	0x40004400
 800d858:	40004800 	.word	0x40004800
 800d85c:	40004c00 	.word	0x40004c00
 800d860:	40005000 	.word	0x40005000
 800d864:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d868:	2300      	movs	r3, #0
 800d86a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	76bb      	strb	r3, [r7, #26]
        break;
 800d870:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 80f1 	beq.w	800da5c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	4613      	mov	r3, r2
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	4413      	add	r3, r2
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	429a      	cmp	r2, r3
 800d888:	d305      	bcc.n	800d896 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	429a      	cmp	r2, r3
 800d894:	d902      	bls.n	800d89c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	76bb      	strb	r3, [r7, #26]
 800d89a:	e0df      	b.n	800da5c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f04f 0100 	mov.w	r1, #0
 800d8a4:	f04f 0200 	mov.w	r2, #0
 800d8a8:	f04f 0300 	mov.w	r3, #0
 800d8ac:	020b      	lsls	r3, r1, #8
 800d8ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8b2:	0202      	lsls	r2, r0, #8
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	6849      	ldr	r1, [r1, #4]
 800d8b8:	0849      	lsrs	r1, r1, #1
 800d8ba:	4608      	mov	r0, r1
 800d8bc:	f04f 0100 	mov.w	r1, #0
 800d8c0:	1814      	adds	r4, r2, r0
 800d8c2:	eb43 0501 	adc.w	r5, r3, r1
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f04f 0300 	mov.w	r3, #0
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f3 f990 	bl	8000bf8 <__aeabi_uldivmod>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4613      	mov	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8e6:	d308      	bcc.n	800d8fa <UART_SetConfig+0x396>
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8ee:	d204      	bcs.n	800d8fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	60da      	str	r2, [r3, #12]
 800d8f8:	e0b0      	b.n	800da5c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	76bb      	strb	r3, [r7, #26]
 800d8fe:	e0ad      	b.n	800da5c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d908:	d15b      	bne.n	800d9c2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800d90a:	7efb      	ldrb	r3, [r7, #27]
 800d90c:	2b08      	cmp	r3, #8
 800d90e:	d828      	bhi.n	800d962 <UART_SetConfig+0x3fe>
 800d910:	a201      	add	r2, pc, #4	; (adr r2, 800d918 <UART_SetConfig+0x3b4>)
 800d912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d916:	bf00      	nop
 800d918:	0800d93d 	.word	0x0800d93d
 800d91c:	0800d945 	.word	0x0800d945
 800d920:	0800d94d 	.word	0x0800d94d
 800d924:	0800d963 	.word	0x0800d963
 800d928:	0800d953 	.word	0x0800d953
 800d92c:	0800d963 	.word	0x0800d963
 800d930:	0800d963 	.word	0x0800d963
 800d934:	0800d963 	.word	0x0800d963
 800d938:	0800d95b 	.word	0x0800d95b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d93c:	f7fd ff6c 	bl	800b818 <HAL_RCC_GetPCLK1Freq>
 800d940:	6178      	str	r0, [r7, #20]
        break;
 800d942:	e013      	b.n	800d96c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d944:	f7fd ff7e 	bl	800b844 <HAL_RCC_GetPCLK2Freq>
 800d948:	6178      	str	r0, [r7, #20]
        break;
 800d94a:	e00f      	b.n	800d96c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d94c:	4b49      	ldr	r3, [pc, #292]	; (800da74 <UART_SetConfig+0x510>)
 800d94e:	617b      	str	r3, [r7, #20]
        break;
 800d950:	e00c      	b.n	800d96c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d952:	f7fd fec9 	bl	800b6e8 <HAL_RCC_GetSysClockFreq>
 800d956:	6178      	str	r0, [r7, #20]
        break;
 800d958:	e008      	b.n	800d96c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d95e:	617b      	str	r3, [r7, #20]
        break;
 800d960:	e004      	b.n	800d96c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	76bb      	strb	r3, [r7, #26]
        break;
 800d96a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d074      	beq.n	800da5c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	005a      	lsls	r2, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	085b      	lsrs	r3, r3, #1
 800d97c:	441a      	add	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	fbb2 f3f3 	udiv	r3, r2, r3
 800d986:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2b0f      	cmp	r3, #15
 800d98c:	d916      	bls.n	800d9bc <UART_SetConfig+0x458>
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d994:	d212      	bcs.n	800d9bc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	f023 030f 	bic.w	r3, r3, #15
 800d99e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	085b      	lsrs	r3, r3, #1
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	89fb      	ldrh	r3, [r7, #14]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	89fa      	ldrh	r2, [r7, #14]
 800d9b8:	60da      	str	r2, [r3, #12]
 800d9ba:	e04f      	b.n	800da5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	76bb      	strb	r3, [r7, #26]
 800d9c0:	e04c      	b.n	800da5c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9c2:	7efb      	ldrb	r3, [r7, #27]
 800d9c4:	2b08      	cmp	r3, #8
 800d9c6:	d828      	bhi.n	800da1a <UART_SetConfig+0x4b6>
 800d9c8:	a201      	add	r2, pc, #4	; (adr r2, 800d9d0 <UART_SetConfig+0x46c>)
 800d9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ce:	bf00      	nop
 800d9d0:	0800d9f5 	.word	0x0800d9f5
 800d9d4:	0800d9fd 	.word	0x0800d9fd
 800d9d8:	0800da05 	.word	0x0800da05
 800d9dc:	0800da1b 	.word	0x0800da1b
 800d9e0:	0800da0b 	.word	0x0800da0b
 800d9e4:	0800da1b 	.word	0x0800da1b
 800d9e8:	0800da1b 	.word	0x0800da1b
 800d9ec:	0800da1b 	.word	0x0800da1b
 800d9f0:	0800da13 	.word	0x0800da13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9f4:	f7fd ff10 	bl	800b818 <HAL_RCC_GetPCLK1Freq>
 800d9f8:	6178      	str	r0, [r7, #20]
        break;
 800d9fa:	e013      	b.n	800da24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9fc:	f7fd ff22 	bl	800b844 <HAL_RCC_GetPCLK2Freq>
 800da00:	6178      	str	r0, [r7, #20]
        break;
 800da02:	e00f      	b.n	800da24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da04:	4b1b      	ldr	r3, [pc, #108]	; (800da74 <UART_SetConfig+0x510>)
 800da06:	617b      	str	r3, [r7, #20]
        break;
 800da08:	e00c      	b.n	800da24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da0a:	f7fd fe6d 	bl	800b6e8 <HAL_RCC_GetSysClockFreq>
 800da0e:	6178      	str	r0, [r7, #20]
        break;
 800da10:	e008      	b.n	800da24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da16:	617b      	str	r3, [r7, #20]
        break;
 800da18:	e004      	b.n	800da24 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	76bb      	strb	r3, [r7, #26]
        break;
 800da22:	bf00      	nop
    }

    if (pclk != 0U)
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	085a      	lsrs	r2, r3, #1
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	441a      	add	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	2b0f      	cmp	r3, #15
 800da42:	d909      	bls.n	800da58 <UART_SetConfig+0x4f4>
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da4a:	d205      	bcs.n	800da58 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	b29a      	uxth	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	e001      	b.n	800da5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800da68:	7ebb      	ldrb	r3, [r7, #26]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3720      	adds	r7, #32
 800da6e:	46bd      	mov	sp, r7
 800da70:	bdb0      	pop	{r4, r5, r7, pc}
 800da72:	bf00      	nop
 800da74:	00f42400 	.word	0x00f42400

0800da78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	430a      	orrs	r2, r1
 800dac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac8:	f003 0304 	and.w	r3, r3, #4
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00a      	beq.n	800dae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	430a      	orrs	r2, r1
 800dae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daea:	f003 0308 	and.w	r3, r3, #8
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0c:	f003 0310 	and.w	r3, r3, #16
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2e:	f003 0320 	and.w	r3, r3, #32
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	430a      	orrs	r2, r1
 800db4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db54:	2b00      	cmp	r3, #0
 800db56:	d01a      	beq.n	800db8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db76:	d10a      	bne.n	800db8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	430a      	orrs	r2, r1
 800dbae:	605a      	str	r2, [r3, #4]
  }
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af02      	add	r7, sp, #8
 800dbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dbcc:	f7fb fae4 	bl	8009198 <HAL_GetTick>
 800dbd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0308 	and.w	r3, r3, #8
 800dbdc:	2b08      	cmp	r3, #8
 800dbde:	d10e      	bne.n	800dbfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f82d 	bl	800dc4e <UART_WaitOnFlagUntilTimeout>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e023      	b.n	800dc46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0304 	and.w	r3, r3, #4
 800dc08:	2b04      	cmp	r3, #4
 800dc0a:	d10e      	bne.n	800dc2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f817 	bl	800dc4e <UART_WaitOnFlagUntilTimeout>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d001      	beq.n	800dc2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e00d      	b.n	800dc46 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2220      	movs	r2, #32
 800dc34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b09c      	sub	sp, #112	; 0x70
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	60b9      	str	r1, [r7, #8]
 800dc58:	603b      	str	r3, [r7, #0]
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc5e:	e0a5      	b.n	800ddac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc66:	f000 80a1 	beq.w	800ddac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc6a:	f7fb fa95 	bl	8009198 <HAL_GetTick>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	1ad3      	subs	r3, r2, r3
 800dc74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d302      	bcc.n	800dc80 <UART_WaitOnFlagUntilTimeout+0x32>
 800dc7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d13e      	bne.n	800dcfe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc88:	e853 3f00 	ldrex	r3, [r3]
 800dc8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc94:	667b      	str	r3, [r7, #100]	; 0x64
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dca0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dca6:	e841 2300 	strex	r3, r2, [r1]
 800dcaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1e6      	bne.n	800dc80 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcbc:	e853 3f00 	ldrex	r3, [r3]
 800dcc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	f023 0301 	bic.w	r3, r3, #1
 800dcc8:	663b      	str	r3, [r7, #96]	; 0x60
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3308      	adds	r3, #8
 800dcd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcd2:	64ba      	str	r2, [r7, #72]	; 0x48
 800dcd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcda:	e841 2300 	strex	r3, r2, [r1]
 800dcde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1e5      	bne.n	800dcb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2220      	movs	r2, #32
 800dcea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e067      	b.n	800ddce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f003 0304 	and.w	r3, r3, #4
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d04f      	beq.n	800ddac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd1a:	d147      	bne.n	800ddac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd24:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	e853 3f00 	ldrex	r3, [r3]
 800dd32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dd3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	461a      	mov	r2, r3
 800dd42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd44:	637b      	str	r3, [r7, #52]	; 0x34
 800dd46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd4c:	e841 2300 	strex	r3, r2, [r1]
 800dd50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e6      	bne.n	800dd26 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	e853 3f00 	ldrex	r3, [r3]
 800dd66:	613b      	str	r3, [r7, #16]
   return(result);
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	f023 0301 	bic.w	r3, r3, #1
 800dd6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3308      	adds	r3, #8
 800dd76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd78:	623a      	str	r2, [r7, #32]
 800dd7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	69f9      	ldr	r1, [r7, #28]
 800dd7e:	6a3a      	ldr	r2, [r7, #32]
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e5      	bne.n	800dd58 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2220      	movs	r2, #32
 800dd96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e010      	b.n	800ddce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	69da      	ldr	r2, [r3, #28]
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	bf0c      	ite	eq
 800ddbc:	2301      	moveq	r3, #1
 800ddbe:	2300      	movne	r3, #0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	f43f af4a 	beq.w	800dc60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3770      	adds	r7, #112	; 0x70
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
	...

0800ddd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b096      	sub	sp, #88	; 0x58
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	88fa      	ldrh	r2, [r7, #6]
 800ddf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2222      	movs	r2, #34	; 0x22
 800de00:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de06:	2b00      	cmp	r3, #0
 800de08:	d02b      	beq.n	800de62 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de0e:	4a42      	ldr	r2, [pc, #264]	; (800df18 <UART_Start_Receive_DMA+0x140>)
 800de10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de16:	4a41      	ldr	r2, [pc, #260]	; (800df1c <UART_Start_Receive_DMA+0x144>)
 800de18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de1e:	4a40      	ldr	r2, [pc, #256]	; (800df20 <UART_Start_Receive_DMA+0x148>)
 800de20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	2200      	movs	r2, #0
 800de28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3324      	adds	r3, #36	; 0x24
 800de34:	4619      	mov	r1, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3a:	461a      	mov	r2, r3
 800de3c:	88fb      	ldrh	r3, [r7, #6]
 800de3e:	f7fb fc8f 	bl	8009760 <HAL_DMA_Start_IT>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00c      	beq.n	800de62 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2210      	movs	r2, #16
 800de4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2220      	movs	r2, #32
 800de5c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e055      	b.n	800df0e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d018      	beq.n	800dea4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de7a:	e853 3f00 	ldrex	r3, [r3]
 800de7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de86:	657b      	str	r3, [r7, #84]	; 0x54
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de90:	64bb      	str	r3, [r7, #72]	; 0x48
 800de92:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de98:	e841 2300 	strex	r3, r2, [r1]
 800de9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1e6      	bne.n	800de72 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3308      	adds	r3, #8
 800deaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	e853 3f00 	ldrex	r3, [r3]
 800deb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	f043 0301 	orr.w	r3, r3, #1
 800deba:	653b      	str	r3, [r7, #80]	; 0x50
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3308      	adds	r3, #8
 800dec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec4:	637a      	str	r2, [r7, #52]	; 0x34
 800dec6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800deca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800decc:	e841 2300 	strex	r3, r2, [r1]
 800ded0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1e5      	bne.n	800dea4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3308      	adds	r3, #8
 800dede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	e853 3f00 	ldrex	r3, [r3]
 800dee6:	613b      	str	r3, [r7, #16]
   return(result);
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3308      	adds	r3, #8
 800def6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def8:	623a      	str	r2, [r7, #32]
 800defa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defc:	69f9      	ldr	r1, [r7, #28]
 800defe:	6a3a      	ldr	r2, [r7, #32]
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	61bb      	str	r3, [r7, #24]
   return(result);
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e5      	bne.n	800ded8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3758      	adds	r7, #88	; 0x58
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	0800e037 	.word	0x0800e037
 800df1c:	0800e15b 	.word	0x0800e15b
 800df20:	0800e193 	.word	0x0800e193

0800df24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800df24:	b480      	push	{r7}
 800df26:	b089      	sub	sp, #36	; 0x24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	e853 3f00 	ldrex	r3, [r3]
 800df38:	60bb      	str	r3, [r7, #8]
   return(result);
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800df40:	61fb      	str	r3, [r7, #28]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	461a      	mov	r2, r3
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	61bb      	str	r3, [r7, #24]
 800df4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4e:	6979      	ldr	r1, [r7, #20]
 800df50:	69ba      	ldr	r2, [r7, #24]
 800df52:	e841 2300 	strex	r3, r2, [r1]
 800df56:	613b      	str	r3, [r7, #16]
   return(result);
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1e6      	bne.n	800df2c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2220      	movs	r2, #32
 800df62:	679a      	str	r2, [r3, #120]	; 0x78
}
 800df64:	bf00      	nop
 800df66:	3724      	adds	r7, #36	; 0x24
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df70:	b480      	push	{r7}
 800df72:	b095      	sub	sp, #84	; 0x54
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df80:	e853 3f00 	ldrex	r3, [r3]
 800df84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	461a      	mov	r2, r3
 800df94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df96:	643b      	str	r3, [r7, #64]	; 0x40
 800df98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df9e:	e841 2300 	strex	r3, r2, [r1]
 800dfa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1e6      	bne.n	800df78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	e853 3f00 	ldrex	r3, [r3]
 800dfb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	f023 0301 	bic.w	r3, r3, #1
 800dfc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfd2:	e841 2300 	strex	r3, r2, [r1]
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1e5      	bne.n	800dfaa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d118      	bne.n	800e018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e853 3f00 	ldrex	r3, [r3]
 800dff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f023 0310 	bic.w	r3, r3, #16
 800dffa:	647b      	str	r3, [r7, #68]	; 0x44
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	461a      	mov	r2, r3
 800e002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e008:	6979      	ldr	r1, [r7, #20]
 800e00a:	69ba      	ldr	r2, [r7, #24]
 800e00c:	e841 2300 	strex	r3, r2, [r1]
 800e010:	613b      	str	r3, [r7, #16]
   return(result);
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1e6      	bne.n	800dfe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2220      	movs	r2, #32
 800e01c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e02a:	bf00      	nop
 800e02c:	3754      	adds	r7, #84	; 0x54
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b09c      	sub	sp, #112	; 0x70
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e042:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0320 	and.w	r3, r3, #32
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d170      	bne.n	800e134 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800e052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e054:	2200      	movs	r2, #0
 800e056:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e062:	e853 3f00 	ldrex	r3, [r3]
 800e066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e06e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	461a      	mov	r2, r3
 800e076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e078:	65bb      	str	r3, [r7, #88]	; 0x58
 800e07a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e07e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e080:	e841 2300 	strex	r3, r2, [r1]
 800e084:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1e6      	bne.n	800e05a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3308      	adds	r3, #8
 800e092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	e853 3f00 	ldrex	r3, [r3]
 800e09a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	667b      	str	r3, [r7, #100]	; 0x64
 800e0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0ac:	647a      	str	r2, [r7, #68]	; 0x44
 800e0ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0b4:	e841 2300 	strex	r3, r2, [r1]
 800e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e5      	bne.n	800e08c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	e853 3f00 	ldrex	r3, [r3]
 800e0ce:	623b      	str	r3, [r7, #32]
   return(result);
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d6:	663b      	str	r3, [r7, #96]	; 0x60
 800e0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	3308      	adds	r3, #8
 800e0de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0e0:	633a      	str	r2, [r7, #48]	; 0x30
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0e8:	e841 2300 	strex	r3, r2, [r1]
 800e0ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1e5      	bne.n	800e0c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d118      	bne.n	800e134 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	e853 3f00 	ldrex	r3, [r3]
 800e10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f023 0310 	bic.w	r3, r3, #16
 800e116:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e120:	61fb      	str	r3, [r7, #28]
 800e122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e124:	69b9      	ldr	r1, [r7, #24]
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	e841 2300 	strex	r3, r2, [r1]
 800e12c:	617b      	str	r3, [r7, #20]
   return(result);
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e6      	bne.n	800e102 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d107      	bne.n	800e14c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e13e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e142:	4619      	mov	r1, r3
 800e144:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e146:	f7ff fa01 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e14a:	e002      	b.n	800e152 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800e14c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e14e:	f7ff f9df 	bl	800d510 <HAL_UART_RxCpltCallback>
}
 800e152:	bf00      	nop
 800e154:	3770      	adds	r7, #112	; 0x70
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e166:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d109      	bne.n	800e184 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e176:	085b      	lsrs	r3, r3, #1
 800e178:	b29b      	uxth	r3, r3
 800e17a:	4619      	mov	r1, r3
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff f9e5 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e182:	e002      	b.n	800e18a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff f9cd 	bl	800d524 <HAL_UART_RxHalfCpltCallback>
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1b6:	2b80      	cmp	r3, #128	; 0x80
 800e1b8:	d109      	bne.n	800e1ce <UART_DMAError+0x3c>
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	2b21      	cmp	r3, #33	; 0x21
 800e1be:	d106      	bne.n	800e1ce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e1c8:	6978      	ldr	r0, [r7, #20]
 800e1ca:	f7ff feab 	bl	800df24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d8:	2b40      	cmp	r3, #64	; 0x40
 800e1da:	d109      	bne.n	800e1f0 <UART_DMAError+0x5e>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b22      	cmp	r3, #34	; 0x22
 800e1e0:	d106      	bne.n	800e1f0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e1ea:	6978      	ldr	r0, [r7, #20]
 800e1ec:	f7ff fec0 	bl	800df70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f6:	f043 0210 	orr.w	r2, r3, #16
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e200:	6978      	ldr	r0, [r7, #20]
 800e202:	f7ff f999 	bl	800d538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e206:	bf00      	nop
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <DataHist_parameters>:
 800e210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e216:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e218:	7020      	strb	r0, [r4, #0]
 800e21a:	6808      	ldr	r0, [r1, #0]
 800e21c:	6060      	str	r0, [r4, #4]
 800e21e:	6848      	ldr	r0, [r1, #4]
 800e220:	60a0      	str	r0, [r4, #8]
 800e222:	6888      	ldr	r0, [r1, #8]
 800e224:	60e0      	str	r0, [r4, #12]
 800e226:	68c8      	ldr	r0, [r1, #12]
 800e228:	6120      	str	r0, [r4, #16]
 800e22a:	6908      	ldr	r0, [r1, #16]
 800e22c:	6160      	str	r0, [r4, #20]
 800e22e:	6948      	ldr	r0, [r1, #20]
 800e230:	61a0      	str	r0, [r4, #24]
 800e232:	6988      	ldr	r0, [r1, #24]
 800e234:	61e0      	str	r0, [r4, #28]
 800e236:	69c8      	ldr	r0, [r1, #28]
 800e238:	6220      	str	r0, [r4, #32]
 800e23a:	6a09      	ldr	r1, [r1, #32]
 800e23c:	6261      	str	r1, [r4, #36]	; 0x24
 800e23e:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800e242:	8811      	ldrh	r1, [r2, #0]
 800e244:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800e248:	8521      	strh	r1, [r4, #40]	; 0x28
 800e24a:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800e24e:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800e252:	f04f 0e00 	mov.w	lr, #0
 800e256:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800e25a:	4641      	mov	r1, r8
 800e25c:	f852 0b04 	ldr.w	r0, [r2], #4
 800e260:	f841 0b04 	str.w	r0, [r1], #4
 800e264:	4562      	cmp	r2, ip
 800e266:	d1f9      	bne.n	800e25c <DataHist_parameters+0x4c>
 800e268:	f10e 0e1e 	add.w	lr, lr, #30
 800e26c:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800e270:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800e274:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800e278:	d1ed      	bne.n	800e256 <DataHist_parameters+0x46>
 800e27a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800e27e:	881a      	ldrh	r2, [r3, #0]
 800e280:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e284:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800e288:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800e28c:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800e290:	f04f 0c00 	mov.w	ip, #0
 800e294:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800e298:	4672      	mov	r2, lr
 800e29a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e29e:	f842 1b04 	str.w	r1, [r2], #4
 800e2a2:	4283      	cmp	r3, r0
 800e2a4:	d1f9      	bne.n	800e29a <DataHist_parameters+0x8a>
 800e2a6:	f10c 0c1e 	add.w	ip, ip, #30
 800e2aa:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800e2ae:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800e2b2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800e2b6:	d1ed      	bne.n	800e294 <DataHist_parameters+0x84>
 800e2b8:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800e2bc:	883b      	ldrh	r3, [r7, #0]
 800e2be:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800e2c2:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800e2c6:	3780      	adds	r7, #128	; 0x80
 800e2c8:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800e2d2:	4662      	mov	r2, ip
 800e2d4:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2d8:	f842 1b04 	str.w	r1, [r2], #4
 800e2dc:	42bb      	cmp	r3, r7
 800e2de:	d1f9      	bne.n	800e2d4 <DataHist_parameters+0xc4>
 800e2e0:	301e      	adds	r0, #30
 800e2e2:	285a      	cmp	r0, #90	; 0x5a
 800e2e4:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800e2e8:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800e2ec:	d1ef      	bne.n	800e2ce <DataHist_parameters+0xbe>
 800e2ee:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800e2f2:	8833      	ldrh	r3, [r6, #0]
 800e2f4:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800e2f8:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800e2fc:	3680      	adds	r6, #128	; 0x80
 800e2fe:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800e302:	2000      	movs	r0, #0
 800e304:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800e308:	463a      	mov	r2, r7
 800e30a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e30e:	f842 1b04 	str.w	r1, [r2], #4
 800e312:	429e      	cmp	r6, r3
 800e314:	d1f9      	bne.n	800e30a <DataHist_parameters+0xfa>
 800e316:	301e      	adds	r0, #30
 800e318:	285a      	cmp	r0, #90	; 0x5a
 800e31a:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800e31e:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800e322:	d1ef      	bne.n	800e304 <DataHist_parameters+0xf4>
 800e324:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800e328:	69aa      	ldr	r2, [r5, #24]
 800e32a:	f8c3 c004 	str.w	ip, [r3, #4]
 800e32e:	782b      	ldrb	r3, [r5, #0]
 800e330:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800e334:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800e338:	619a      	str	r2, [r3, #24]
 800e33a:	686a      	ldr	r2, [r5, #4]
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800e342:	68a9      	ldr	r1, [r5, #8]
 800e344:	6011      	str	r1, [r2, #0]
 800e346:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800e34a:	68e9      	ldr	r1, [r5, #12]
 800e34c:	6011      	str	r1, [r2, #0]
 800e34e:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800e352:	6929      	ldr	r1, [r5, #16]
 800e354:	6011      	str	r1, [r2, #0]
 800e356:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800e35a:	6969      	ldr	r1, [r5, #20]
 800e35c:	6011      	str	r1, [r2, #0]
 800e35e:	69ea      	ldr	r2, [r5, #28]
 800e360:	61da      	str	r2, [r3, #28]
 800e362:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800e366:	6a2a      	ldr	r2, [r5, #32]
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800e36e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800e376:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800e37e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e386:	bf00      	nop

0800e388 <rotVect>:
 800e388:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800e38c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e390:	edd2 5a00 	vldr	s11, [r2]
 800e394:	ed92 6a02 	vldr	s12, [r2, #8]
 800e398:	ee07 3a90 	vmov	s15, r3
 800e39c:	f991 3000 	ldrsb.w	r3, [r1]
 800e3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3a4:	ee06 3a90 	vmov	s13, r3
 800e3a8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e3ac:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800e3b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e3b4:	ee07 3a10 	vmov	s14, r3
 800e3b8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e3bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3c0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e3c4:	edc0 7a00 	vstr	s15, [r0]
 800e3c8:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800e3cc:	ed92 5a01 	vldr	s10, [r2, #4]
 800e3d0:	edd2 5a00 	vldr	s11, [r2]
 800e3d4:	ed92 6a02 	vldr	s12, [r2, #8]
 800e3d8:	ee07 3a90 	vmov	s15, r3
 800e3dc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800e3e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3e4:	ee06 3a90 	vmov	s13, r3
 800e3e8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e3ec:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800e3f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e3f4:	ee07 3a10 	vmov	s14, r3
 800e3f8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e3fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e400:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e404:	edc0 7a01 	vstr	s15, [r0, #4]
 800e408:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800e40c:	ed92 5a01 	vldr	s10, [r2, #4]
 800e410:	edd2 5a00 	vldr	s11, [r2]
 800e414:	ed92 6a02 	vldr	s12, [r2, #8]
 800e418:	ee07 3a90 	vmov	s15, r3
 800e41c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800e420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e424:	ee06 3a90 	vmov	s13, r3
 800e428:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e42c:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800e430:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e434:	ee07 3a10 	vmov	s14, r3
 800e438:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e43c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e440:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e444:	edc0 7a02 	vstr	s15, [r0, #8]
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop

0800e44c <findAxis>:
 800e44c:	f990 3000 	ldrsb.w	r3, [r0]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d027      	beq.n	800e4a4 <findAxis+0x58>
 800e454:	3301      	adds	r3, #1
 800e456:	d00e      	beq.n	800e476 <findAxis+0x2a>
 800e458:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d053      	beq.n	800e508 <findAxis+0xbc>
 800e460:	3301      	adds	r3, #1
 800e462:	d048      	beq.n	800e4f6 <findAxis+0xaa>
 800e464:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d053      	beq.n	800e514 <findAxis+0xc8>
 800e46c:	3301      	adds	r3, #1
 800e46e:	d104      	bne.n	800e47a <findAxis+0x2e>
 800e470:	2364      	movs	r3, #100	; 0x64
 800e472:	700b      	strb	r3, [r1, #0]
 800e474:	e001      	b.n	800e47a <findAxis+0x2e>
 800e476:	2377      	movs	r3, #119	; 0x77
 800e478:	700b      	strb	r3, [r1, #0]
 800e47a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d016      	beq.n	800e4b0 <findAxis+0x64>
 800e482:	3301      	adds	r3, #1
 800e484:	d02e      	beq.n	800e4e4 <findAxis+0x98>
 800e486:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d039      	beq.n	800e502 <findAxis+0xb6>
 800e48e:	3301      	adds	r3, #1
 800e490:	d034      	beq.n	800e4fc <findAxis+0xb0>
 800e492:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d03f      	beq.n	800e51a <findAxis+0xce>
 800e49a:	3301      	adds	r3, #1
 800e49c:	d10a      	bne.n	800e4b4 <findAxis+0x68>
 800e49e:	2364      	movs	r3, #100	; 0x64
 800e4a0:	704b      	strb	r3, [r1, #1]
 800e4a2:	e007      	b.n	800e4b4 <findAxis+0x68>
 800e4a4:	2365      	movs	r3, #101	; 0x65
 800e4a6:	700b      	strb	r3, [r1, #0]
 800e4a8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d1e8      	bne.n	800e482 <findAxis+0x36>
 800e4b0:	2365      	movs	r3, #101	; 0x65
 800e4b2:	704b      	strb	r3, [r1, #1]
 800e4b4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d010      	beq.n	800e4de <findAxis+0x92>
 800e4bc:	3301      	adds	r3, #1
 800e4be:	d014      	beq.n	800e4ea <findAxis+0x9e>
 800e4c0:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d022      	beq.n	800e50e <findAxis+0xc2>
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	d011      	beq.n	800e4f0 <findAxis+0xa4>
 800e4cc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d025      	beq.n	800e520 <findAxis+0xd4>
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	bf04      	itt	eq
 800e4d8:	2364      	moveq	r3, #100	; 0x64
 800e4da:	708b      	strbeq	r3, [r1, #2]
 800e4dc:	4770      	bx	lr
 800e4de:	2365      	movs	r3, #101	; 0x65
 800e4e0:	708b      	strb	r3, [r1, #2]
 800e4e2:	4770      	bx	lr
 800e4e4:	2377      	movs	r3, #119	; 0x77
 800e4e6:	704b      	strb	r3, [r1, #1]
 800e4e8:	e7e4      	b.n	800e4b4 <findAxis+0x68>
 800e4ea:	2377      	movs	r3, #119	; 0x77
 800e4ec:	708b      	strb	r3, [r1, #2]
 800e4ee:	4770      	bx	lr
 800e4f0:	2373      	movs	r3, #115	; 0x73
 800e4f2:	708b      	strb	r3, [r1, #2]
 800e4f4:	4770      	bx	lr
 800e4f6:	2373      	movs	r3, #115	; 0x73
 800e4f8:	700b      	strb	r3, [r1, #0]
 800e4fa:	e7be      	b.n	800e47a <findAxis+0x2e>
 800e4fc:	2373      	movs	r3, #115	; 0x73
 800e4fe:	704b      	strb	r3, [r1, #1]
 800e500:	e7d8      	b.n	800e4b4 <findAxis+0x68>
 800e502:	236e      	movs	r3, #110	; 0x6e
 800e504:	704b      	strb	r3, [r1, #1]
 800e506:	e7d5      	b.n	800e4b4 <findAxis+0x68>
 800e508:	236e      	movs	r3, #110	; 0x6e
 800e50a:	700b      	strb	r3, [r1, #0]
 800e50c:	e7b5      	b.n	800e47a <findAxis+0x2e>
 800e50e:	236e      	movs	r3, #110	; 0x6e
 800e510:	708b      	strb	r3, [r1, #2]
 800e512:	4770      	bx	lr
 800e514:	2375      	movs	r3, #117	; 0x75
 800e516:	700b      	strb	r3, [r1, #0]
 800e518:	e7af      	b.n	800e47a <findAxis+0x2e>
 800e51a:	2375      	movs	r3, #117	; 0x75
 800e51c:	704b      	strb	r3, [r1, #1]
 800e51e:	e7c9      	b.n	800e4b4 <findAxis+0x68>
 800e520:	2375      	movs	r3, #117	; 0x75
 800e522:	708b      	strb	r3, [r1, #2]
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop

0800e528 <findDirection>:
 800e528:	b5d0      	push	{r4, r6, r7, lr}
 800e52a:	ed2d 8b04 	vpush	{d8-d9}
 800e52e:	eef0 8ac0 	vabs.f32	s17, s0
 800e532:	eeb0 8ae0 	vabs.f32	s16, s1
 800e536:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53e:	4604      	mov	r4, r0
 800e540:	eeb0 9ac1 	vabs.f32	s18, s2
 800e544:	dd36      	ble.n	800e5b4 <findDirection+0x8c>
 800e546:	eef4 8ac9 	vcmpe.f32	s17, s18
 800e54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54e:	dd31      	ble.n	800e5b4 <findDirection+0x8c>
 800e550:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e558:	ee18 0a90 	vmov	r0, s17
 800e55c:	f340 8094 	ble.w	800e688 <findDirection+0x160>
 800e560:	f7f1 fff2 	bl	8000548 <__aeabi_f2d>
 800e564:	4606      	mov	r6, r0
 800e566:	ee18 0a10 	vmov	r0, s16
 800e56a:	460f      	mov	r7, r1
 800e56c:	f7f1 ffec 	bl	8000548 <__aeabi_f2d>
 800e570:	a387      	add	r3, pc, #540	; (adr r3, 800e790 <findDirection+0x268>)
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	f7f2 f83f 	bl	80005f8 <__aeabi_dmul>
 800e57a:	4602      	mov	r2, r0
 800e57c:	460b      	mov	r3, r1
 800e57e:	4630      	mov	r0, r6
 800e580:	4639      	mov	r1, r7
 800e582:	f7f2 fac9 	bl	8000b18 <__aeabi_dcmpgt>
 800e586:	b188      	cbz	r0, 800e5ac <findDirection+0x84>
 800e588:	ee19 0a10 	vmov	r0, s18
 800e58c:	f7f1 ffdc 	bl	8000548 <__aeabi_f2d>
 800e590:	a37f      	add	r3, pc, #508	; (adr r3, 800e790 <findDirection+0x268>)
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	f7f2 f82f 	bl	80005f8 <__aeabi_dmul>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	4630      	mov	r0, r6
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	f7f2 fab9 	bl	8000b18 <__aeabi_dcmpgt>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	bf18      	it	ne
 800e5aa:	2404      	movne	r4, #4
 800e5ac:	ecbd 8b04 	vpop	{d8-d9}
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	bdd0      	pop	{r4, r6, r7, pc}
 800e5b4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5bc:	dd32      	ble.n	800e624 <findDirection+0xfc>
 800e5be:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c6:	ee18 0a10 	vmov	r0, s16
 800e5ca:	f340 8086 	ble.w	800e6da <findDirection+0x1b2>
 800e5ce:	f7f1 ffbb 	bl	8000548 <__aeabi_f2d>
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	ee18 0a90 	vmov	r0, s17
 800e5d8:	460f      	mov	r7, r1
 800e5da:	f7f1 ffb5 	bl	8000548 <__aeabi_f2d>
 800e5de:	a36c      	add	r3, pc, #432	; (adr r3, 800e790 <findDirection+0x268>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	f7f2 f808 	bl	80005f8 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f2 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d0d9      	beq.n	800e5ac <findDirection+0x84>
 800e5f8:	ee19 0a10 	vmov	r0, s18
 800e5fc:	f7f1 ffa4 	bl	8000548 <__aeabi_f2d>
 800e600:	a363      	add	r3, pc, #396	; (adr r3, 800e790 <findDirection+0x268>)
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	f7f1 fff7 	bl	80005f8 <__aeabi_dmul>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4630      	mov	r0, r6
 800e610:	4639      	mov	r1, r7
 800e612:	f7f2 fa81 	bl	8000b18 <__aeabi_dcmpgt>
 800e616:	ecbd 8b04 	vpop	{d8-d9}
 800e61a:	2800      	cmp	r0, #0
 800e61c:	bf18      	it	ne
 800e61e:	2401      	movne	r4, #1
 800e620:	4620      	mov	r0, r4
 800e622:	bdd0      	pop	{r4, r6, r7, pc}
 800e624:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62c:	ee19 0a10 	vmov	r0, s18
 800e630:	dd7f      	ble.n	800e732 <findDirection+0x20a>
 800e632:	f7f1 ff89 	bl	8000548 <__aeabi_f2d>
 800e636:	4606      	mov	r6, r0
 800e638:	ee18 0a10 	vmov	r0, s16
 800e63c:	460f      	mov	r7, r1
 800e63e:	f7f1 ff83 	bl	8000548 <__aeabi_f2d>
 800e642:	a353      	add	r3, pc, #332	; (adr r3, 800e790 <findDirection+0x268>)
 800e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	4630      	mov	r0, r6
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 800e658:	2800      	cmp	r0, #0
 800e65a:	d0a7      	beq.n	800e5ac <findDirection+0x84>
 800e65c:	ee18 0a90 	vmov	r0, s17
 800e660:	f7f1 ff72 	bl	8000548 <__aeabi_f2d>
 800e664:	a34a      	add	r3, pc, #296	; (adr r3, 800e790 <findDirection+0x268>)
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	f7f1 ffc5 	bl	80005f8 <__aeabi_dmul>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f2 fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800e67a:	ecbd 8b04 	vpop	{d8-d9}
 800e67e:	2800      	cmp	r0, #0
 800e680:	bf18      	it	ne
 800e682:	2400      	movne	r4, #0
 800e684:	4620      	mov	r0, r4
 800e686:	bdd0      	pop	{r4, r6, r7, pc}
 800e688:	f7f1 ff5e 	bl	8000548 <__aeabi_f2d>
 800e68c:	4606      	mov	r6, r0
 800e68e:	ee18 0a10 	vmov	r0, s16
 800e692:	460f      	mov	r7, r1
 800e694:	f7f1 ff58 	bl	8000548 <__aeabi_f2d>
 800e698:	a33d      	add	r3, pc, #244	; (adr r3, 800e790 <findDirection+0x268>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f7f1 ffab 	bl	80005f8 <__aeabi_dmul>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	f7f2 fa35 	bl	8000b18 <__aeabi_dcmpgt>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f af7c 	beq.w	800e5ac <findDirection+0x84>
 800e6b4:	ee19 0a10 	vmov	r0, s18
 800e6b8:	f7f1 ff46 	bl	8000548 <__aeabi_f2d>
 800e6bc:	a334      	add	r3, pc, #208	; (adr r3, 800e790 <findDirection+0x268>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 ff99 	bl	80005f8 <__aeabi_dmul>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	f7f2 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	bf18      	it	ne
 800e6d6:	2405      	movne	r4, #5
 800e6d8:	e768      	b.n	800e5ac <findDirection+0x84>
 800e6da:	f7f1 ff35 	bl	8000548 <__aeabi_f2d>
 800e6de:	4606      	mov	r6, r0
 800e6e0:	ee18 0a90 	vmov	r0, s17
 800e6e4:	460f      	mov	r7, r1
 800e6e6:	f7f1 ff2f 	bl	8000548 <__aeabi_f2d>
 800e6ea:	a329      	add	r3, pc, #164	; (adr r3, 800e790 <findDirection+0x268>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 ff82 	bl	80005f8 <__aeabi_dmul>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f2 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 800e700:	2800      	cmp	r0, #0
 800e702:	f43f af53 	beq.w	800e5ac <findDirection+0x84>
 800e706:	ee19 0a10 	vmov	r0, s18
 800e70a:	f7f1 ff1d 	bl	8000548 <__aeabi_f2d>
 800e70e:	a320      	add	r3, pc, #128	; (adr r3, 800e790 <findDirection+0x268>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	f7f1 ff70 	bl	80005f8 <__aeabi_dmul>
 800e718:	4602      	mov	r2, r0
 800e71a:	460b      	mov	r3, r1
 800e71c:	4630      	mov	r0, r6
 800e71e:	4639      	mov	r1, r7
 800e720:	f7f2 f9fa 	bl	8000b18 <__aeabi_dcmpgt>
 800e724:	ecbd 8b04 	vpop	{d8-d9}
 800e728:	2800      	cmp	r0, #0
 800e72a:	bf18      	it	ne
 800e72c:	2403      	movne	r4, #3
 800e72e:	4620      	mov	r0, r4
 800e730:	bdd0      	pop	{r4, r6, r7, pc}
 800e732:	f7f1 ff09 	bl	8000548 <__aeabi_f2d>
 800e736:	4606      	mov	r6, r0
 800e738:	ee18 0a10 	vmov	r0, s16
 800e73c:	460f      	mov	r7, r1
 800e73e:	f7f1 ff03 	bl	8000548 <__aeabi_f2d>
 800e742:	a313      	add	r3, pc, #76	; (adr r3, 800e790 <findDirection+0x268>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	f7f1 ff56 	bl	80005f8 <__aeabi_dmul>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4630      	mov	r0, r6
 800e752:	4639      	mov	r1, r7
 800e754:	f7f2 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 800e758:	2800      	cmp	r0, #0
 800e75a:	f43f af27 	beq.w	800e5ac <findDirection+0x84>
 800e75e:	ee18 0a90 	vmov	r0, s17
 800e762:	f7f1 fef1 	bl	8000548 <__aeabi_f2d>
 800e766:	a30a      	add	r3, pc, #40	; (adr r3, 800e790 <findDirection+0x268>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 ff44 	bl	80005f8 <__aeabi_dmul>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	4630      	mov	r0, r6
 800e776:	4639      	mov	r1, r7
 800e778:	f7f2 f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800e77c:	ecbd 8b04 	vpop	{d8-d9}
 800e780:	2800      	cmp	r0, #0
 800e782:	bf18      	it	ne
 800e784:	2402      	movne	r4, #2
 800e786:	4620      	mov	r0, r4
 800e788:	bdd0      	pop	{r4, r6, r7, pc}
 800e78a:	bf00      	nop
 800e78c:	f3af 8000 	nop.w
 800e790:	e0000000 	.word	0xe0000000
 800e794:	3ff6b851 	.word	0x3ff6b851

0800e798 <updateOrientation>:
 800e798:	b410      	push	{r4}
 800e79a:	2300      	movs	r3, #0
 800e79c:	6003      	str	r3, [r0, #0]
 800e79e:	6043      	str	r3, [r0, #4]
 800e7a0:	7203      	strb	r3, [r0, #8]
 800e7a2:	780c      	ldrb	r4, [r1, #0]
 800e7a4:	784a      	ldrb	r2, [r1, #1]
 800e7a6:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800e7aa:	2b17      	cmp	r3, #23
 800e7ac:	bf98      	it	ls
 800e7ae:	3420      	addls	r4, #32
 800e7b0:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800e7b4:	bf98      	it	ls
 800e7b6:	b2e4      	uxtbls	r4, r4
 800e7b8:	2b17      	cmp	r3, #23
 800e7ba:	788b      	ldrb	r3, [r1, #2]
 800e7bc:	bf98      	it	ls
 800e7be:	3220      	addls	r2, #32
 800e7c0:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800e7c4:	bf98      	it	ls
 800e7c6:	b2d2      	uxtbls	r2, r2
 800e7c8:	2917      	cmp	r1, #23
 800e7ca:	bf98      	it	ls
 800e7cc:	3320      	addls	r3, #32
 800e7ce:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800e7d2:	bf98      	it	ls
 800e7d4:	b2db      	uxtbls	r3, r3
 800e7d6:	2c13      	cmp	r4, #19
 800e7d8:	d80d      	bhi.n	800e7f6 <updateOrientation+0x5e>
 800e7da:	e8df f004 	tbb	[pc, r4]
 800e7de:	0a36      	.short	0x0a36
 800e7e0:	0c0c0c0c 	.word	0x0c0c0c0c
 800e7e4:	0c0c0c0c 	.word	0x0c0c0c0c
 800e7e8:	0c0c0c39 	.word	0x0c0c0c39
 800e7ec:	3f0c3c0c 	.word	0x3f0c3c0c
 800e7f0:	420c      	.short	0x420c
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	7001      	strb	r1, [r0, #0]
 800e7f6:	3a64      	subs	r2, #100	; 0x64
 800e7f8:	2a13      	cmp	r2, #19
 800e7fa:	d80d      	bhi.n	800e818 <updateOrientation+0x80>
 800e7fc:	e8df f002 	tbb	[pc, r2]
 800e800:	0c0c0a34 	.word	0x0c0c0a34
 800e804:	0c0c0c0c 	.word	0x0c0c0c0c
 800e808:	0c370c0c 	.word	0x0c370c0c
 800e80c:	3a0c0c0c 	.word	0x3a0c0c0c
 800e810:	400c3d0c 	.word	0x400c3d0c
 800e814:	2201      	movs	r2, #1
 800e816:	7042      	strb	r2, [r0, #1]
 800e818:	3b64      	subs	r3, #100	; 0x64
 800e81a:	2b13      	cmp	r3, #19
 800e81c:	d80d      	bhi.n	800e83a <updateOrientation+0xa2>
 800e81e:	e8df f003 	tbb	[pc, r3]
 800e822:	320a      	.short	0x320a
 800e824:	0c0c0c0c 	.word	0x0c0c0c0c
 800e828:	0c0c0c0c 	.word	0x0c0c0c0c
 800e82c:	0c0c0c37 	.word	0x0c0c0c37
 800e830:	410c3c0c 	.word	0x410c3c0c
 800e834:	0f0c      	.short	0x0f0c
 800e836:	23ff      	movs	r3, #255	; 0xff
 800e838:	7203      	strb	r3, [r0, #8]
 800e83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	23ff      	movs	r3, #255	; 0xff
 800e842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e846:	7083      	strb	r3, [r0, #2]
 800e848:	4770      	bx	lr
 800e84a:	21ff      	movs	r1, #255	; 0xff
 800e84c:	7181      	strb	r1, [r0, #6]
 800e84e:	e7d2      	b.n	800e7f6 <updateOrientation+0x5e>
 800e850:	2101      	movs	r1, #1
 800e852:	70c1      	strb	r1, [r0, #3]
 800e854:	e7cf      	b.n	800e7f6 <updateOrientation+0x5e>
 800e856:	21ff      	movs	r1, #255	; 0xff
 800e858:	70c1      	strb	r1, [r0, #3]
 800e85a:	e7cc      	b.n	800e7f6 <updateOrientation+0x5e>
 800e85c:	2101      	movs	r1, #1
 800e85e:	7181      	strb	r1, [r0, #6]
 800e860:	e7c9      	b.n	800e7f6 <updateOrientation+0x5e>
 800e862:	21ff      	movs	r1, #255	; 0xff
 800e864:	7001      	strb	r1, [r0, #0]
 800e866:	e7c6      	b.n	800e7f6 <updateOrientation+0x5e>
 800e868:	22ff      	movs	r2, #255	; 0xff
 800e86a:	71c2      	strb	r2, [r0, #7]
 800e86c:	e7d4      	b.n	800e818 <updateOrientation+0x80>
 800e86e:	2201      	movs	r2, #1
 800e870:	7102      	strb	r2, [r0, #4]
 800e872:	e7d1      	b.n	800e818 <updateOrientation+0x80>
 800e874:	22ff      	movs	r2, #255	; 0xff
 800e876:	7102      	strb	r2, [r0, #4]
 800e878:	e7ce      	b.n	800e818 <updateOrientation+0x80>
 800e87a:	2201      	movs	r2, #1
 800e87c:	71c2      	strb	r2, [r0, #7]
 800e87e:	e7cb      	b.n	800e818 <updateOrientation+0x80>
 800e880:	22ff      	movs	r2, #255	; 0xff
 800e882:	7042      	strb	r2, [r0, #1]
 800e884:	e7c8      	b.n	800e818 <updateOrientation+0x80>
 800e886:	2301      	movs	r3, #1
 800e888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88c:	7083      	strb	r3, [r0, #2]
 800e88e:	4770      	bx	lr
 800e890:	2301      	movs	r3, #1
 800e892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e896:	7143      	strb	r3, [r0, #5]
 800e898:	4770      	bx	lr
 800e89a:	23ff      	movs	r3, #255	; 0xff
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	7143      	strb	r3, [r0, #5]
 800e8a2:	4770      	bx	lr
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8aa:	7203      	strb	r3, [r0, #8]
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop

0800e8b0 <qmult>:
 800e8b0:	ed91 2a03 	vldr	s4, [r1, #12]
 800e8b4:	ed90 3a01 	vldr	s6, [r0, #4]
 800e8b8:	edd0 5a02 	vldr	s11, [r0, #8]
 800e8bc:	edd1 4a01 	vldr	s9, [r1, #4]
 800e8c0:	ed90 4a00 	vldr	s8, [r0]
 800e8c4:	edd1 3a00 	vldr	s7, [r1]
 800e8c8:	ed91 5a02 	vldr	s10, [r1, #8]
 800e8cc:	edd0 2a03 	vldr	s5, [r0, #12]
 800e8d0:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800e8d4:	ee62 6a03 	vmul.f32	s13, s4, s6
 800e8d8:	ee22 7a25 	vmul.f32	s14, s4, s11
 800e8dc:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800e8e0:	eea4 6a02 	vfma.f32	s12, s8, s4
 800e8e4:	eee4 6a05 	vfma.f32	s13, s8, s10
 800e8e8:	eea3 7a23 	vfma.f32	s14, s6, s7
 800e8ec:	eee4 7a63 	vfms.f32	s15, s8, s7
 800e8f0:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800e8f4:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800e8f8:	eea5 7a22 	vfma.f32	s14, s10, s5
 800e8fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e900:	eea3 6a45 	vfms.f32	s12, s6, s10
 800e904:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800e908:	eea4 7a64 	vfms.f32	s14, s8, s9
 800e90c:	eee5 7a65 	vfms.f32	s15, s10, s11
 800e910:	ed82 6a00 	vstr	s12, [r2]
 800e914:	edc2 6a01 	vstr	s13, [r2, #4]
 800e918:	ed82 7a02 	vstr	s14, [r2, #8]
 800e91c:	edc2 7a03 	vstr	s15, [r2, #12]
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <MEMS_setMagIndexToOne>:
 800e924:	291f      	cmp	r1, #31
 800e926:	b430      	push	{r4, r5}
 800e928:	d920      	bls.n	800e96c <MEMS_setMagIndexToOne+0x48>
 800e92a:	6885      	ldr	r5, [r0, #8]
 800e92c:	3920      	subs	r1, #32
 800e92e:	2401      	movs	r4, #1
 800e930:	fa04 f101 	lsl.w	r1, r4, r1
 800e934:	ea21 0105 	bic.w	r1, r1, r5
 800e938:	4069      	eors	r1, r5
 800e93a:	2a1f      	cmp	r2, #31
 800e93c:	6081      	str	r1, [r0, #8]
 800e93e:	d91f      	bls.n	800e980 <MEMS_setMagIndexToOne+0x5c>
 800e940:	6901      	ldr	r1, [r0, #16]
 800e942:	f1a2 0420 	sub.w	r4, r2, #32
 800e946:	2201      	movs	r2, #1
 800e948:	40a2      	lsls	r2, r4
 800e94a:	ea22 0201 	bic.w	r2, r2, r1
 800e94e:	404a      	eors	r2, r1
 800e950:	2b1f      	cmp	r3, #31
 800e952:	6102      	str	r2, [r0, #16]
 800e954:	d91e      	bls.n	800e994 <MEMS_setMagIndexToOne+0x70>
 800e956:	69c2      	ldr	r2, [r0, #28]
 800e958:	f1a3 0120 	sub.w	r1, r3, #32
 800e95c:	2301      	movs	r3, #1
 800e95e:	408b      	lsls	r3, r1
 800e960:	ea23 0302 	bic.w	r3, r3, r2
 800e964:	4053      	eors	r3, r2
 800e966:	bc30      	pop	{r4, r5}
 800e968:	61c3      	str	r3, [r0, #28]
 800e96a:	4770      	bx	lr
 800e96c:	68c5      	ldr	r5, [r0, #12]
 800e96e:	2401      	movs	r4, #1
 800e970:	fa04 f101 	lsl.w	r1, r4, r1
 800e974:	ea21 0105 	bic.w	r1, r1, r5
 800e978:	4069      	eors	r1, r5
 800e97a:	2a1f      	cmp	r2, #31
 800e97c:	60c1      	str	r1, [r0, #12]
 800e97e:	d8df      	bhi.n	800e940 <MEMS_setMagIndexToOne+0x1c>
 800e980:	6944      	ldr	r4, [r0, #20]
 800e982:	2101      	movs	r1, #1
 800e984:	fa01 f202 	lsl.w	r2, r1, r2
 800e988:	ea22 0204 	bic.w	r2, r2, r4
 800e98c:	4062      	eors	r2, r4
 800e98e:	2b1f      	cmp	r3, #31
 800e990:	6142      	str	r2, [r0, #20]
 800e992:	d8e0      	bhi.n	800e956 <MEMS_setMagIndexToOne+0x32>
 800e994:	6981      	ldr	r1, [r0, #24]
 800e996:	2201      	movs	r2, #1
 800e998:	fa02 f303 	lsl.w	r3, r2, r3
 800e99c:	ea23 0301 	bic.w	r3, r3, r1
 800e9a0:	404b      	eors	r3, r1
 800e9a2:	bc30      	pop	{r4, r5}
 800e9a4:	6183      	str	r3, [r0, #24]
 800e9a6:	4770      	bx	lr

0800e9a8 <getRotationMatrix>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	4610      	mov	r0, r2
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	2224      	movs	r2, #36	; 0x24
 800e9b4:	f00b fdf0 	bl	801a598 <memset>
 800e9b8:	edd5 5a00 	vldr	s11, [r5]
 800e9bc:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800eae4 <getRotationMatrix+0x13c>
 800e9c0:	edc0 5a02 	vstr	s11, [r0, #8]
 800e9c4:	ed95 7a01 	vldr	s14, [r5, #4]
 800e9c8:	ed80 7a05 	vstr	s14, [r0, #20]
 800e9cc:	ed95 5a02 	vldr	s10, [r5, #8]
 800e9d0:	ed80 5a08 	vstr	s10, [r0, #32]
 800e9d4:	ed94 4a02 	vldr	s8, [r4, #8]
 800e9d8:	edd4 3a01 	vldr	s7, [r4, #4]
 800e9dc:	edd4 4a00 	vldr	s9, [r4]
 800e9e0:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800e9e4:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800e9e8:	eee3 7a85 	vfma.f32	s15, s7, s10
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	eee4 6a87 	vfma.f32	s13, s9, s14
 800e9f2:	eeb0 7ae7 	vabs.f32	s14, s15
 800e9f6:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800e9fa:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800e9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea02:	eea4 6a25 	vfma.f32	s12, s8, s11
 800ea06:	bfdc      	itt	le
 800ea08:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800ea0c:	eeb0 7a43 	vmovle.f32	s14, s6
 800ea10:	eeb0 5ac6 	vabs.f32	s10, s12
 800ea14:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ea18:	edc0 6a06 	vstr	s13, [r0, #24]
 800ea1c:	bfd4      	ite	le
 800ea1e:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800ea22:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2a:	ed80 6a03 	vstr	s12, [r0, #12]
 800ea2e:	edc0 7a00 	vstr	s15, [r0]
 800ea32:	d447      	bmi.n	800eac4 <getRotationMatrix+0x11c>
 800ea34:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800ea38:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800ea3c:	eef0 5a66 	vmov.f32	s11, s13
 800ea40:	edd3 6a06 	vldr	s13, [r3, #24]
 800ea44:	eeb0 5ae6 	vabs.f32	s10, s13
 800ea48:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ea4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea50:	d543      	bpl.n	800eada <getRotationMatrix+0x132>
 800ea52:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800ea56:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800ea5a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800ea5e:	eeb0 7a45 	vmov.f32	s14, s10
 800ea62:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800ea66:	eef0 5a44 	vmov.f32	s11, s8
 800ea6a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800ea6e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800ea72:	ee65 5a07 	vmul.f32	s11, s10, s14
 800ea76:	edd3 3a08 	vldr	s7, [r3, #32]
 800ea7a:	edd3 4a02 	vldr	s9, [r3, #8]
 800ea7e:	ed93 4a05 	vldr	s8, [r3, #20]
 800ea82:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800ea86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea8a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ea8e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ea92:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800ea96:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800ea9a:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800ea9e:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800eaa2:	eee4 5a07 	vfma.f32	s11, s8, s14
 800eaa6:	eee6 6a24 	vfma.f32	s13, s12, s9
 800eaaa:	edc3 7a00 	vstr	s15, [r3]
 800eaae:	ed83 6a03 	vstr	s12, [r3, #12]
 800eab2:	ed83 7a06 	vstr	s14, [r3, #24]
 800eab6:	ed83 5a04 	vstr	s10, [r3, #16]
 800eaba:	edc3 5a01 	vstr	s11, [r3, #4]
 800eabe:	edc3 6a07 	vstr	s13, [r3, #28]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800eac8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800eacc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800ead0:	eeb0 7a45 	vmov.f32	s14, s10
 800ead4:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800ead8:	e7b2      	b.n	800ea40 <getRotationMatrix+0x98>
 800eada:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800eade:	eee5 5a05 	vfma.f32	s11, s10, s10
 800eae2:	e7c2      	b.n	800ea6a <getRotationMatrix+0xc2>
 800eae4:	00000000 	.word	0x00000000

0800eae8 <b_dcm2q>:
 800eae8:	ed90 5a08 	vldr	s10, [r0, #32]
 800eaec:	edd0 7a00 	vldr	s15, [r0]
 800eaf0:	edd0 6a04 	vldr	s13, [r0, #16]
 800eaf4:	ee37 7a85 	vadd.f32	s14, s15, s10
 800eaf8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800eafc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eb00:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800eb04:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800eb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb0c:	bfc5      	ittet	gt
 800eb0e:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800eb12:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800eb16:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800ec24 <b_dcm2q+0x13c>
 800eb1a:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800eb1e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800eb22:	ee35 6a47 	vsub.f32	s12, s10, s14
 800eb26:	ee35 7a07 	vadd.f32	s14, s10, s14
 800eb2a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800eb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb32:	bfc5      	ittet	gt
 800eb34:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800eb38:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800eb3c:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800ec24 <b_dcm2q+0x13c>
 800eb40:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800eb44:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800eb48:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800eb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb50:	dd5b      	ble.n	800ec0a <b_dcm2q+0x122>
 800eb52:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800eb56:	ee37 7a24 	vadd.f32	s14, s14, s9
 800eb5a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800eb5e:	eef1 4ac7 	vsqrt.f32	s9, s14
 800eb62:	ee64 4a84 	vmul.f32	s9, s9, s8
 800eb66:	ee76 6a85 	vadd.f32	s13, s13, s10
 800eb6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb72:	edd0 6a07 	vldr	s13, [r0, #28]
 800eb76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7e:	bf85      	ittet	hi
 800eb80:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800eb84:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800eb88:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800ec24 <b_dcm2q+0x13c>
 800eb8c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800eb90:	edd0 7a05 	vldr	s15, [r0, #20]
 800eb94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba0:	d43c      	bmi.n	800ec1c <b_dcm2q+0x134>
 800eba2:	bfd8      	it	le
 800eba4:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800eba8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebb0:	ed81 7a00 	vstr	s14, [r1]
 800ebb4:	edd0 7a06 	vldr	s15, [r0, #24]
 800ebb8:	ed90 7a02 	vldr	s14, [r0, #8]
 800ebbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc8:	d425      	bmi.n	800ec16 <b_dcm2q+0x12e>
 800ebca:	bfd8      	it	le
 800ebcc:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800ebd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebd4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ebd8:	edc1 5a01 	vstr	s11, [r1, #4]
 800ebdc:	edd0 7a01 	vldr	s15, [r0, #4]
 800ebe0:	ed90 7a03 	vldr	s14, [r0, #12]
 800ebe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ebec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf0:	d40e      	bmi.n	800ec10 <b_dcm2q+0x128>
 800ebf2:	bfd8      	it	le
 800ebf4:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800ebf8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ebfc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ec00:	edc1 4a03 	vstr	s9, [r1, #12]
 800ec04:	ed81 6a02 	vstr	s12, [r1, #8]
 800ec08:	4770      	bx	lr
 800ec0a:	eddf 4a06 	vldr	s9, [pc, #24]	; 800ec24 <b_dcm2q+0x13c>
 800ec0e:	e7aa      	b.n	800eb66 <b_dcm2q+0x7e>
 800ec10:	eeb1 6a46 	vneg.f32	s12, s12
 800ec14:	e7f0      	b.n	800ebf8 <b_dcm2q+0x110>
 800ec16:	eef1 5a65 	vneg.f32	s11, s11
 800ec1a:	e7d9      	b.n	800ebd0 <b_dcm2q+0xe8>
 800ec1c:	eeb1 7a47 	vneg.f32	s14, s14
 800ec20:	e7c2      	b.n	800eba8 <b_dcm2q+0xc0>
 800ec22:	bf00      	nop
 800ec24:	00000000 	.word	0x00000000

0800ec28 <q2hpr>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	ed90 7a00 	vldr	s14, [r0]
 800ec2e:	edd0 6a01 	vldr	s13, [r0, #4]
 800ec32:	edd0 7a02 	vldr	s15, [r0, #8]
 800ec36:	ed90 5a03 	vldr	s10, [r0, #12]
 800ec3a:	ed2d 8b0a 	vpush	{d8-d12}
 800ec3e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ec42:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ec46:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800ec4a:	ee67 0a07 	vmul.f32	s1, s14, s14
 800ec4e:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800ec52:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ec56:	ee27 7a05 	vmul.f32	s14, s14, s10
 800ec5a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ec5e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ec62:	ee78 aa08 	vadd.f32	s21, s16, s16
 800ec66:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800ec6a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800ec6e:	ee30 ca00 	vadd.f32	s24, s0, s0
 800ec72:	ee36 ba06 	vadd.f32	s22, s12, s12
 800ec76:	ee77 8a07 	vadd.f32	s17, s14, s14
 800ec7a:	ee75 baa5 	vadd.f32	s23, s11, s11
 800ec7e:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800ec82:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800ec86:	460c      	mov	r4, r1
 800ec88:	bb8a      	cbnz	r2, 800ecee <q2hpr+0xc6>
 800ec8a:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800ec8e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800ec92:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ec96:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800ec9a:	f009 ffaf 	bl	8018bfc <atan2f>
 800ec9e:	eeb0 8a40 	vmov.f32	s16, s0
 800eca2:	ed84 8a00 	vstr	s16, [r4]
 800eca6:	ee38 0aab 	vadd.f32	s0, s17, s23
 800ecaa:	f009 ff75 	bl	8018b98 <asinf>
 800ecae:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800ecb2:	eef0 8a40 	vmov.f32	s17, s0
 800ecb6:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800ecba:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800ecbe:	f009 ff9d 	bl	8018bfc <atan2f>
 800ecc2:	eef1 8a68 	vneg.f32	s17, s17
 800ecc6:	eeb0 9a40 	vmov.f32	s18, s0
 800ecca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	ed84 9a02 	vstr	s18, [r4, #8]
 800ecd6:	edc4 8a01 	vstr	s17, [r4, #4]
 800ecda:	d505      	bpl.n	800ece8 <q2hpr+0xc0>
 800ecdc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ed34 <q2hpr+0x10c>
 800ece0:	ee38 8a00 	vadd.f32	s16, s16, s0
 800ece4:	ed84 8a00 	vstr	s16, [r4]
 800ece8:	ecbd 8b0a 	vpop	{d8-d12}
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800ecf2:	f009 ff51 	bl	8018b98 <asinf>
 800ecf6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800ecfa:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800ecfe:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800ed02:	eeb0 9a40 	vmov.f32	s18, s0
 800ed06:	ee38 0aab 	vadd.f32	s0, s17, s23
 800ed0a:	f009 ff77 	bl	8018bfc <atan2f>
 800ed0e:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800ed12:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800ed16:	eef0 8a40 	vmov.f32	s17, s0
 800ed1a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800ed1e:	eeb1 0a48 	vneg.f32	s0, s16
 800ed22:	f009 ff6b 	bl	8018bfc <atan2f>
 800ed26:	eef1 8a68 	vneg.f32	s17, s17
 800ed2a:	eeb0 8a40 	vmov.f32	s16, s0
 800ed2e:	ed84 0a00 	vstr	s0, [r4]
 800ed32:	e7ca      	b.n	800ecca <q2hpr+0xa2>
 800ed34:	40c90fdb 	.word	0x40c90fdb

0800ed38 <llEvaluate.constprop.0>:
 800ed38:	edd2 0a00 	vldr	s1, [r2]
 800ed3c:	ed90 1a00 	vldr	s2, [r0]
 800ed40:	edd0 1a04 	vldr	s3, [r0, #16]
 800ed44:	edd2 5a01 	vldr	s11, [r2, #4]
 800ed48:	ed90 6a08 	vldr	s12, [r0, #32]
 800ed4c:	ed90 2a05 	vldr	s4, [r0, #20]
 800ed50:	ed92 7a02 	vldr	s14, [r2, #8]
 800ed54:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800ed58:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800ed5c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800ed60:	edd2 7a03 	vldr	s15, [r2, #12]
 800ed64:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800ed68:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800ed6c:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800ed70:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800ed74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed78:	b084      	sub	sp, #16
 800ed7a:	f10d 0810 	add.w	r8, sp, #16
 800ed7e:	2704      	movs	r7, #4
 800ed80:	f101 0510 	add.w	r5, r1, #16
 800ed84:	2f04      	cmp	r7, #4
 800ed86:	4686      	mov	lr, r0
 800ed88:	f04f 0c03 	mov.w	ip, #3
 800ed8c:	b27b      	sxtb	r3, r7
 800ed8e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800ed92:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800ed96:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800ed9a:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800ed9e:	eea6 7a43 	vfms.f32	s14, s12, s6
 800eda2:	edcd 6a00 	vstr	s13, [sp]
 800eda6:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800edaa:	eee6 7a63 	vfms.f32	s15, s12, s7
 800edae:	ed8d 6a01 	vstr	s12, [sp, #4]
 800edb2:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800edb6:	edcd 6a02 	vstr	s13, [sp, #8]
 800edba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800edbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800edc2:	ed78 7a01 	vldmdb	r8!, {s15}
 800edc6:	ed65 7a01 	vstmdb	r5!, {s15}
 800edca:	d029      	beq.n	800ee20 <llEvaluate.constprop.0+0xe8>
 800edcc:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800edd0:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800edd4:	4432      	add	r2, r6
 800edd6:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800edda:	edd2 6a00 	vldr	s13, [r2]
 800edde:	ed94 7a00 	vldr	s14, [r4]
 800ede2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ede6:	3301      	adds	r3, #1
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	2a04      	cmp	r2, #4
 800edec:	b25b      	sxtb	r3, r3
 800edee:	edc5 7a00 	vstr	s15, [r5]
 800edf2:	d1ed      	bne.n	800edd0 <llEvaluate.constprop.0+0x98>
 800edf4:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800edf8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800edfc:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800ee00:	ed85 7a00 	vstr	s14, [r5]
 800ee04:	d013      	beq.n	800ee2e <llEvaluate.constprop.0+0xf6>
 800ee06:	3f01      	subs	r7, #1
 800ee08:	b2ff      	uxtb	r7, r7
 800ee0a:	ed78 7a01 	vldmdb	r8!, {s15}
 800ee0e:	2f04      	cmp	r7, #4
 800ee10:	f1ae 0e14 	sub.w	lr, lr, #20
 800ee14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ee18:	b27b      	sxtb	r3, r7
 800ee1a:	ed65 7a01 	vstmdb	r5!, {s15}
 800ee1e:	d1d5      	bne.n	800edcc <llEvaluate.constprop.0+0x94>
 800ee20:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800ee24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee28:	ed85 7a00 	vstr	s14, [r5]
 800ee2c:	e7eb      	b.n	800ee06 <llEvaluate.constprop.0+0xce>
 800ee2e:	b004      	add	sp, #16
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee34 <MEMS_updateMagBufferIndex>:
 800ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee38:	ed2d 8b02 	vpush	{d8}
 800ee3c:	7804      	ldrb	r4, [r0, #0]
 800ee3e:	7842      	ldrb	r2, [r0, #1]
 800ee40:	4606      	mov	r6, r0
 800ee42:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ee46:	2300      	movs	r3, #0
 800ee48:	4294      	cmp	r4, r2
 800ee4a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800ee4e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800ee52:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800ee56:	b083      	sub	sp, #12
 800ee58:	460d      	mov	r5, r1
 800ee5a:	f100 0001 	add.w	r0, r0, #1
 800ee5e:	f000 8083 	beq.w	800ef68 <MEMS_updateMagBufferIndex+0x134>
 800ee62:	1b00      	subs	r0, r0, r4
 800ee64:	fb90 f8f2 	sdiv	r8, r0, r2
 800ee68:	fb02 0018 	mls	r0, r2, r8, r0
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	bfb6      	itet	lt
 800ee70:	eb02 0800 	addlt.w	r8, r2, r0
 800ee74:	fa0f f880 	sxthge.w	r8, r0
 800ee78:	fa0f f888 	sxthlt.w	r8, r8
 800ee7c:	b934      	cbnz	r4, 800ee8c <MEMS_updateMagBufferIndex+0x58>
 800ee7e:	23ff      	movs	r3, #255	; 0xff
 800ee80:	70b3      	strb	r3, [r6, #2]
 800ee82:	b003      	add	sp, #12
 800ee84:	ecbd 8b02 	vpop	{d8}
 800ee88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ee90:	2700      	movs	r7, #0
 800ee92:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800ee96:	463b      	mov	r3, r7
 800ee98:	e000      	b.n	800ee9c <MEMS_updateMagBufferIndex+0x68>
 800ee9a:	7872      	ldrb	r2, [r6, #1]
 800ee9c:	4443      	add	r3, r8
 800ee9e:	fb93 f4f2 	sdiv	r4, r3, r2
 800eea2:	fb02 3314 	mls	r3, r2, r4, r3
 800eea6:	b2dc      	uxtb	r4, r3
 800eea8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800eeac:	3701      	adds	r7, #1
 800eeae:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800eeb2:	fb92 f3f5 	sdiv	r3, r2, r5
 800eeb6:	fb05 2313 	mls	r3, r5, r3, r2
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	bfb8      	it	lt
 800eebe:	195b      	addlt	r3, r3, r5
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	ee00 3a10 	vmov	s0, r3
 800eec6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eeca:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eece:	f009 fd6b 	bl	80189a8 <roundf>
 800eed2:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800eed6:	fb92 f3f5 	sdiv	r3, r2, r5
 800eeda:	fb05 2313 	mls	r3, r5, r3, r2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	bfb8      	it	lt
 800eee2:	195b      	addlt	r3, r3, r5
 800eee4:	b21b      	sxth	r3, r3
 800eee6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800eeea:	ee00 3a10 	vmov	s0, r3
 800eeee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eef2:	edcd 7a01 	vstr	s15, [sp, #4]
 800eef6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eefa:	f009 fd55 	bl	80189a8 <roundf>
 800eefe:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800ef02:	fb92 f3f5 	sdiv	r3, r2, r5
 800ef06:	fb05 2313 	mls	r3, r5, r3, r2
 800ef0a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ef0e:	18ea      	adds	r2, r5, r3
 800ef10:	b219      	sxth	r1, r3
 800ef12:	b212      	sxth	r2, r2
 800ef14:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800ef18:	edcd 7a01 	vstr	s15, [sp, #4]
 800ef1c:	ee00 1a10 	vmov	s0, r1
 800ef20:	ee07 2a90 	vmov	s15, r2
 800ef24:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ef28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ef32:	bfb8      	it	lt
 800ef34:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800ef38:	f009 fd36 	bl	80189a8 <roundf>
 800ef3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ef40:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800ef44:	edcd 7a01 	vstr	s15, [sp, #4]
 800ef48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	4649      	mov	r1, r9
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff fce7 	bl	800e924 <MEMS_setMagIndexToOne>
 800ef56:	7832      	ldrb	r2, [r6, #0]
 800ef58:	b2fb      	uxtb	r3, r7
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d89d      	bhi.n	800ee9a <MEMS_updateMagBufferIndex+0x66>
 800ef5e:	b003      	add	sp, #12
 800ef60:	ecbd 8b02 	vpop	{d8}
 800ef64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef68:	fb90 f8f4 	sdiv	r8, r0, r4
 800ef6c:	fb04 0018 	mls	r0, r4, r8, r0
 800ef70:	fa0f f880 	sxth.w	r8, r0
 800ef74:	e782      	b.n	800ee7c <MEMS_updateMagBufferIndex+0x48>
 800ef76:	bf00      	nop

0800ef78 <getMagStats.constprop.0>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef7e:	2400      	movs	r4, #0
 800ef80:	4607      	mov	r7, r0
 800ef82:	6034      	str	r4, [r6, #0]
 800ef84:	601c      	str	r4, [r3, #0]
 800ef86:	7800      	ldrb	r0, [r0, #0]
 800ef88:	787d      	ldrb	r5, [r7, #1]
 800ef8a:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800ef8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef92:	42a8      	cmp	r0, r5
 800ef94:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800ef98:	f000 80c0 	beq.w	800f11c <getMagStats.constprop.0+0x1a4>
 800ef9c:	3401      	adds	r4, #1
 800ef9e:	eba4 0c00 	sub.w	ip, r4, r0
 800efa2:	fb9c f4f5 	sdiv	r4, ip, r5
 800efa6:	fb05 c414 	mls	r4, r5, r4, ip
 800efaa:	2c00      	cmp	r4, #0
 800efac:	bfb8      	it	lt
 800efae:	1964      	addlt	r4, r4, r5
 800efb0:	b224      	sxth	r4, r4
 800efb2:	ee04 0a90 	vmov	s9, r0
 800efb6:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800f138 <getMagStats.constprop.0+0x1c0>
 800efba:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800efbe:	ee25 5a85 	vmul.f32	s10, s11, s10
 800efc2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800efc6:	2800      	cmp	r0, #0
 800efc8:	f000 80b2 	beq.w	800f130 <getMagStats.constprop.0+0x1b8>
 800efcc:	3801      	subs	r0, #1
 800efce:	fa54 fc80 	uxtab	ip, r4, r0
 800efd2:	f8b1 9000 	ldrh.w	r9, [r1]
 800efd6:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800efda:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800efde:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800f13c <getMagStats.constprop.0+0x1c4>
 800efe2:	2000      	movs	r0, #0
 800efe4:	e002      	b.n	800efec <getMagStats.constprop.0+0x74>
 800efe6:	ed93 3a00 	vldr	s6, [r3]
 800efea:	3401      	adds	r4, #1
 800efec:	fb94 f1f5 	sdiv	r1, r4, r5
 800eff0:	fb05 4111 	mls	r1, r5, r1, r4
 800eff4:	b2c9      	uxtb	r1, r1
 800eff6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800effa:	edd2 3a00 	vldr	s7, [r2]
 800effe:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800f002:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800f006:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800f008:	ed92 4a04 	vldr	s8, [r2, #16]
 800f00c:	ed92 6a08 	vldr	s12, [r2, #32]
 800f010:	ebaa 0a09 	sub.w	sl, sl, r9
 800f014:	ebab 0b08 	sub.w	fp, fp, r8
 800f018:	fa0f fa8a 	sxth.w	sl, sl
 800f01c:	ee07 aa10 	vmov	s14, sl
 800f020:	fa0f fa8b 	sxth.w	sl, fp
 800f024:	ee06 aa90 	vmov	s13, sl
 800f028:	eba1 010e 	sub.w	r1, r1, lr
 800f02c:	b209      	sxth	r1, r1
 800f02e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f032:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f036:	ee07 1a90 	vmov	s15, r1
 800f03a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f03e:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f046:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800f04a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800f04e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f052:	ee16 1a90 	vmov	r1, s13
 800f056:	ee17 aa10 	vmov	sl, s14
 800f05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f05e:	fb11 f101 	smulbb	r1, r1, r1
 800f062:	fa0f fa8a 	sxth.w	sl, sl
 800f066:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800f06a:	ee17 1a90 	vmov	r1, s15
 800f06e:	b209      	sxth	r1, r1
 800f070:	fb01 a101 	mla	r1, r1, r1, sl
 800f074:	ee07 1a90 	vmov	s15, r1
 800f078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f07c:	f100 0a01 	add.w	sl, r0, #1
 800f080:	eef1 6ae7 	vsqrt.f32	s13, s15
 800f084:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f088:	ee17 1a90 	vmov	r1, s15
 800f08c:	b209      	sxth	r1, r1
 800f08e:	ee07 1a10 	vmov	s14, r1
 800f092:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f096:	ee77 7a45 	vsub.f32	s15, s14, s10
 800f09a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800f09e:	eef0 7ae7 	vabs.f32	s15, s15
 800f0a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0a6:	ed83 7a00 	vstr	s14, [r3]
 800f0aa:	ee17 1a90 	vmov	r1, s15
 800f0ae:	b209      	sxth	r1, r1
 800f0b0:	fb01 fb01 	mul.w	fp, r1, r1
 800f0b4:	ee07 ba90 	vmov	s15, fp
 800f0b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0bc:	ee07 1a90 	vmov	s15, r1
 800f0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0c4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f0c8:	edd6 7a00 	vldr	s15, [r6]
 800f0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0d4:	bf48      	it	mi
 800f0d6:	fa5f f08a 	uxtbmi.w	r0, sl
 800f0da:	45a4      	cmp	ip, r4
 800f0dc:	edc6 7a00 	vstr	s15, [r6]
 800f0e0:	d181      	bne.n	800efe6 <getMagStats.constprop.0+0x6e>
 800f0e2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800f0e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800f140 <getMagStats.constprop.0+0x1c8>
 800f0ea:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800f0ee:	eef1 7ae6 	vsqrt.f32	s15, s13
 800f0f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f0f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fe:	bfb8      	it	lt
 800f100:	eef0 7a47 	vmovlt.f32	s15, s14
 800f104:	edc6 7a00 	vstr	s15, [r6]
 800f108:	edd3 7a00 	vldr	s15, [r3]
 800f10c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f110:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800f114:	edc3 7a00 	vstr	s15, [r3]
 800f118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11c:	1c65      	adds	r5, r4, #1
 800f11e:	fb95 f4f0 	sdiv	r4, r5, r0
 800f122:	fb00 5414 	mls	r4, r0, r4, r5
 800f126:	ee04 0a90 	vmov	s9, r0
 800f12a:	b224      	sxth	r4, r4
 800f12c:	4605      	mov	r5, r0
 800f12e:	e742      	b.n	800efb6 <getMagStats.constprop.0+0x3e>
 800f130:	edd6 7a00 	vldr	s15, [r6]
 800f134:	e7d5      	b.n	800f0e2 <getMagStats.constprop.0+0x16a>
 800f136:	bf00      	nop
 800f138:	423c0000 	.word	0x423c0000
 800f13c:	00000000 	.word	0x00000000
 800f140:	3f59999a 	.word	0x3f59999a

0800f144 <MFX_emptyAttitude>:
 800f144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f148:	ed2d 8b10 	vpush	{d8-d15}
 800f14c:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800f150:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800f154:	f04f 0a00 	mov.w	sl, #0
 800f158:	4fef      	ldr	r7, [pc, #956]	; (800f518 <MFX_emptyAttitude+0x3d4>)
 800f15a:	f8c4 a008 	str.w	sl, [r4, #8]
 800f15e:	e9c4 aa00 	strd	sl, sl, [r4]
 800f162:	f837 3b04 	ldrh.w	r3, [r7], #4
 800f166:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800f16a:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800f16e:	4680      	mov	r8, r0
 800f170:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800f174:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800f178:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f17c:	0c1b      	lsrs	r3, r3, #16
 800f17e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800f182:	ab27      	add	r3, sp, #156	; 0x9c
 800f184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f188:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800f18c:	ab2d      	add	r3, sp, #180	; 0xb4
 800f18e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800f192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f196:	ab30      	add	r3, sp, #192	; 0xc0
 800f198:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f19c:	ab33      	add	r3, sp, #204	; 0xcc
 800f19e:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800f1a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f1a6:	f04f 0c00 	mov.w	ip, #0
 800f1aa:	ab36      	add	r3, sp, #216	; 0xd8
 800f1ac:	f04f 0b00 	mov.w	fp, #0
 800f1b0:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800f1b4:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800f1b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f1bc:	4628      	mov	r0, r5
 800f1be:	2224      	movs	r2, #36	; 0x24
 800f1c0:	f00b f9ea 	bl	801a598 <memset>
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f1cc:	ed9f bad3 	vldr	s22, [pc, #844]	; 800f51c <MFX_emptyAttitude+0x3d8>
 800f1d0:	eddf ead3 	vldr	s29, [pc, #844]	; 800f520 <MFX_emptyAttitude+0x3dc>
 800f1d4:	f00b f9e0 	bl	801a598 <memset>
 800f1d8:	edd5 4a00 	vldr	s9, [r5]
 800f1dc:	ed95 5a01 	vldr	s10, [r5, #4]
 800f1e0:	edd5 5a02 	vldr	s11, [r5, #8]
 800f1e4:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800f1e8:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800f1ec:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800f1f0:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800f1f4:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800f1f8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800f1fc:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800f200:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800f204:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800f208:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800f20c:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800f210:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800f214:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800f218:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800f21c:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800f220:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800f224:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800f228:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800f22c:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800f230:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800f234:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800f238:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800f23c:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800f240:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800f244:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800f248:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800f24c:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800f250:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800f254:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800f258:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800f25c:	ed95 6a03 	vldr	s12, [r5, #12]
 800f260:	edd5 6a04 	vldr	s13, [r5, #16]
 800f264:	ed95 7a05 	vldr	s14, [r5, #20]
 800f268:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800f26c:	ed8d 6a08 	vstr	s12, [sp, #32]
 800f270:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f274:	edcd 6a07 	vstr	s13, [sp, #28]
 800f278:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800f27c:	ed8d 7a06 	vstr	s14, [sp, #24]
 800f280:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800f284:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800f288:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800f28c:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800f290:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800f294:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800f298:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800f29c:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800f2a0:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800f2a4:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800f2a8:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800f2ac:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800f2b0:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800f2b4:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800f2b8:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800f2bc:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800f2c0:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800f2c4:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800f2c8:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800f2cc:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800f2d0:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800f2d4:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800f2d8:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800f2dc:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800f2e0:	edd5 7a06 	vldr	s15, [r5, #24]
 800f2e4:	edd5 fa07 	vldr	s31, [r5, #28]
 800f2e8:	ed95 fa08 	vldr	s30, [r5, #32]
 800f2ec:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800f2f0:	edcd 7a05 	vstr	s15, [sp, #20]
 800f2f4:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800f2f8:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800f2fc:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800f300:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800f304:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800f308:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800f30c:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800f310:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800f314:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800f318:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800f31c:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800f320:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800f324:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800f328:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800f32c:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800f330:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800f334:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800f338:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800f33c:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800f340:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800f344:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800f348:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800f34c:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800f350:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800f354:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800f358:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800f35c:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800f360:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800f364:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f366:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800f36a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f36e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f370:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	f8cc 3000 	str.w	r3, [ip]
 800f37a:	4651      	mov	r1, sl
 800f37c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f380:	4620      	mov	r0, r4
 800f382:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800f386:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800f38a:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800f38e:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800f392:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800f396:	f00b f8ff 	bl	801a598 <memset>
 800f39a:	4621      	mov	r1, r4
 800f39c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3a0:	a898      	add	r0, sp, #608	; 0x260
 800f3a2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f3a6:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800f3aa:	f00b f8e7 	bl	801a57c <memcpy>
 800f3ae:	4651      	mov	r1, sl
 800f3b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800f3ba:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800f3be:	f00b f8eb 	bl	801a598 <memset>
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3c8:	a8f4      	add	r0, sp, #976	; 0x3d0
 800f3ca:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800f3ce:	f00b f8d5 	bl	801a57c <memcpy>
 800f3d2:	4651      	mov	r1, sl
 800f3d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3d8:	4620      	mov	r0, r4
 800f3da:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800f3de:	f00b f8db 	bl	801a598 <memset>
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	8037      	strh	r7, [r6, #0]
 800f3e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3ea:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800f3ee:	f00b f8c5 	bl	801a57c <memcpy>
 800f3f2:	4651      	mov	r1, sl
 800f3f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	ed86 8a01 	vstr	s16, [r6, #4]
 800f3fe:	f00b f8cb 	bl	801a598 <memset>
 800f402:	4621      	mov	r1, r4
 800f404:	802f      	strh	r7, [r5, #0]
 800f406:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f40a:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800f40e:	f00b f8b5 	bl	801a57c <memcpy>
 800f412:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800f416:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800f41a:	2701      	movs	r7, #1
 800f41c:	9600      	str	r6, [sp, #0]
 800f41e:	9403      	str	r4, [sp, #12]
 800f420:	eddf 3a40 	vldr	s7, [pc, #256]	; 800f524 <MFX_emptyAttitude+0x3e0>
 800f424:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800f528 <MFX_emptyAttitude+0x3e4>
 800f428:	ed85 8a01 	vstr	s16, [r5, #4]
 800f42c:	483f      	ldr	r0, [pc, #252]	; (800f52c <MFX_emptyAttitude+0x3e8>)
 800f42e:	4d40      	ldr	r5, [pc, #256]	; (800f530 <MFX_emptyAttitude+0x3ec>)
 800f430:	f8df e120 	ldr.w	lr, [pc, #288]	; 800f554 <MFX_emptyAttitude+0x410>
 800f434:	951c      	str	r5, [sp, #112]	; 0x70
 800f436:	abf2      	add	r3, sp, #968	; 0x3c8
 800f438:	aa96      	add	r2, sp, #600	; 0x258
 800f43a:	a90d      	add	r1, sp, #52	; 0x34
 800f43c:	9017      	str	r0, [sp, #92]	; 0x5c
 800f43e:	4d3d      	ldr	r5, [pc, #244]	; (800f534 <MFX_emptyAttitude+0x3f0>)
 800f440:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800f444:	4638      	mov	r0, r7
 800f446:	ae27      	add	r6, sp, #156	; 0x9c
 800f448:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800f44c:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800f450:	951b      	str	r5, [sp, #108]	; 0x6c
 800f452:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800f456:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800f45a:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800f45e:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800f462:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800f466:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800f46a:	f7fe fed1 	bl	800e210 <DataHist_parameters>
 800f46e:	ce07      	ldmia	r6!, {r0, r1, r2}
 800f470:	4b31      	ldr	r3, [pc, #196]	; (800f538 <MFX_emptyAttitude+0x3f4>)
 800f472:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800f476:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800f47a:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800f47e:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800f482:	f8c8 300c 	str.w	r3, [r8, #12]
 800f486:	4b2d      	ldr	r3, [pc, #180]	; (800f53c <MFX_emptyAttitude+0x3f8>)
 800f488:	f8c8 3014 	str.w	r3, [r8, #20]
 800f48c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800f490:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800f540 <MFX_emptyAttitude+0x3fc>
 800f494:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800f544 <MFX_emptyAttitude+0x400>
 800f498:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800f548 <MFX_emptyAttitude+0x404>
 800f49c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800f54c <MFX_emptyAttitude+0x408>
 800f4a0:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800f550 <MFX_emptyAttitude+0x40c>
 800f4a4:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800f4a8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800f558 <MFX_emptyAttitude+0x414>
 800f4ac:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800f55c <MFX_emptyAttitude+0x418>
 800f4b0:	edc8 2a06 	vstr	s5, [r8, #24]
 800f4b4:	f04f 0b00 	mov.w	fp, #0
 800f4b8:	f04f 0c00 	mov.w	ip, #0
 800f4bc:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800f4c0:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800f4c4:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800f4c8:	ad2d      	add	r5, sp, #180	; 0xb4
 800f4ca:	469b      	mov	fp, r3
 800f4cc:	f8df c090 	ldr.w	ip, [pc, #144]	; 800f560 <MFX_emptyAttitude+0x41c>
 800f4d0:	ed88 3a07 	vstr	s6, [r8, #28]
 800f4d4:	f240 1301 	movw	r3, #257	; 0x101
 800f4d8:	edc8 3a08 	vstr	s7, [r8, #32]
 800f4dc:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800f4e0:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800f4e4:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800f4e8:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800f4ec:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800f4f0:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800f4f4:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800f4f8:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800f4fc:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800f500:	f8c8 3000 	str.w	r3, [r8]
 800f504:	f8a8 3004 	strh.w	r3, [r8, #4]
 800f508:	ed88 8a02 	vstr	s16, [r8, #8]
 800f50c:	ed88 8a04 	vstr	s16, [r8, #16]
 800f510:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800f514:	e028      	b.n	800f568 <MFX_emptyAttitude+0x424>
 800f516:	bf00      	nop
 800f518:	0801ae94 	.word	0x0801ae94
 800f51c:	00000000 	.word	0x00000000
 800f520:	447a0000 	.word	0x447a0000
 800f524:	3e93ffa3 	.word	0x3e93ffa3
 800f528:	3e5cec8f 	.word	0x3e5cec8f
 800f52c:	3ea25c13 	.word	0x3ea25c13
 800f530:	40a00000 	.word	0x40a00000
 800f534:	3d57bb3d 	.word	0x3d57bb3d
 800f538:	01010100 	.word	0x01010100
 800f53c:	41200000 	.word	0x41200000
 800f540:	3a9d4952 	.word	0x3a9d4952
 800f544:	3ac49ba6 	.word	0x3ac49ba6
 800f548:	3b03126f 	.word	0x3b03126f
 800f54c:	402ab021 	.word	0x402ab021
 800f550:	3a83126f 	.word	0x3a83126f
 800f554:	3e006d36 	.word	0x3e006d36
 800f558:	3f639581 	.word	0x3f639581
 800f55c:	3f13f7cf 	.word	0x3f13f7cf
 800f560:	3f2ac083 	.word	0x3f2ac083
 800f564:	3f4ccccd 	.word	0x3f4ccccd
 800f568:	cd07      	ldmia	r5!, {r0, r1, r2}
 800f56a:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800f56e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800f572:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800f576:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800f57a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800f57e:	ab33      	add	r3, sp, #204	; 0xcc
 800f580:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800f584:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800f588:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800f58c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f58e:	ab36      	add	r3, sp, #216	; 0xd8
 800f590:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800f594:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800f598:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800f59c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f59e:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800f564 <MFX_emptyAttitude+0x420>
 800f5a2:	4bd6      	ldr	r3, [pc, #856]	; (800f8fc <MFX_emptyAttitude+0x7b8>)
 800f5a4:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800f5a8:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800f5ac:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800f5b0:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800f5b4:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800f5b8:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800f5bc:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800f5c0:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800f5c4:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800f5c8:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800f5cc:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800f5d0:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800f5d4:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800f5d8:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800f5dc:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800f5e0:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800f5e4:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800f5e8:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800f5ec:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800f5f0:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800f5f4:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800f5f8:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800f5fc:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800f600:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800f604:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800f608:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800f60c:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800f610:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800f614:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800f618:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800f61c:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800f620:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800f624:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800f628:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800f62c:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800f630:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800f634:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800f638:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800f63c:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800f640:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800f644:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800f648:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800f64c:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800f650:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800f654:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800f658:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800f65c:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800f660:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800f664:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800f668:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800f66c:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800f670:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800f674:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800f678:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800f67c:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800f680:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800f684:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800f688:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800f68c:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800f690:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800f694:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800f698:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800f69c:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800f6a0:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800f6a4:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800f6a8:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800f6ac:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800f6b0:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800f6b4:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800f6b8:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800f6bc:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800f6c0:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800f6c4:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800f6c8:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800f6cc:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800f6d0:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800f6d4:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800f6d8:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800f6dc:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800f6e0:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800f6e4:	ed9d 6a08 	vldr	s12, [sp, #32]
 800f6e8:	eddd 6a07 	vldr	s13, [sp, #28]
 800f6ec:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800f6f0:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800f6f4:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800f6f8:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800f6fc:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800f700:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800f704:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800f708:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800f70c:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800f710:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800f714:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800f718:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800f71c:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800f720:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800f724:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800f728:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800f72c:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800f730:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800f734:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800f738:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800f73c:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800f740:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800f744:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800f748:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800f74c:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800f750:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800f754:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800f758:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800f75c:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800f760:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800f764:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800f768:	ed9d 7a06 	vldr	s14, [sp, #24]
 800f76c:	eddd 7a05 	vldr	s15, [sp, #20]
 800f770:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800f774:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800f778:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800f77c:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800f780:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800f784:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800f788:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800f78c:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800f790:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800f794:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800f798:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800f79c:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800f7a0:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800f7a4:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800f7a8:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800f7ac:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800f7b0:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800f7b4:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800f7b8:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800f7bc:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800f7c0:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800f7c4:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800f7c8:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800f7cc:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800f7d0:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800f7d4:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800f7d8:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800f7dc:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800f7e0:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800f7e4:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800f7e8:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800f7ec:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800f7f0:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800f7f4:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800f7f8:	7820      	ldrb	r0, [r4, #0]
 800f7fa:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800f7fe:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800f802:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800f806:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800f80a:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800f80e:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800f812:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800f816:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800f81a:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800f81e:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800f822:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800f826:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800f82a:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800f82e:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800f832:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800f836:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800f83a:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800f83e:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800f842:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800f846:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800f84a:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800f84e:	f8cd e00c 	str.w	lr, [sp, #12]
 800f852:	9500      	str	r5, [sp, #0]
 800f854:	f7fe fcdc 	bl	800e210 <DataHist_parameters>
 800f858:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800f85c:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800f860:	9205      	str	r2, [sp, #20]
 800f862:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800f866:	ed8b ba00 	vstr	s22, [fp]
 800f86a:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800f86e:	ed83 ba00 	vstr	s22, [r3]
 800f872:	9b05      	ldr	r3, [sp, #20]
 800f874:	9106      	str	r1, [sp, #24]
 800f876:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800f87a:	ed89 ba00 	vstr	s22, [r9]
 800f87e:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800f882:	ed83 8a00 	vstr	s16, [r3]
 800f886:	9b06      	ldr	r3, [sp, #24]
 800f888:	9207      	str	r2, [sp, #28]
 800f88a:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800f88e:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800f892:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800f896:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800f89a:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800f89e:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800f8a2:	ed8e ba00 	vstr	s22, [lr]
 800f8a6:	ed8c ba00 	vstr	s22, [ip]
 800f8aa:	ed87 ba00 	vstr	s22, [r7]
 800f8ae:	ed86 ba00 	vstr	s22, [r6]
 800f8b2:	ed85 ba00 	vstr	s22, [r5]
 800f8b6:	ed84 ba00 	vstr	s22, [r4]
 800f8ba:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800f8be:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800f8c2:	ed83 ba00 	vstr	s22, [r3]
 800f8c6:	9b07      	ldr	r3, [sp, #28]
 800f8c8:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800f8cc:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800f8d0:	ed80 8a00 	vstr	s16, [r0]
 800f8d4:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800f8d8:	ed81 ba00 	vstr	s22, [r1]
 800f8dc:	ed83 ba00 	vstr	s22, [r3]
 800f8e0:	230a      	movs	r3, #10
 800f8e2:	ed82 ba00 	vstr	s22, [r2]
 800f8e6:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800f8ea:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800f8ee:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800f8f2:	ecbd 8b10 	vpop	{d8-d15}
 800f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fa:	bf00      	nop
 800f8fc:	3f333333 	.word	0x3f333333

0800f900 <output_update>:
 800f900:	ed90 7a00 	vldr	s14, [r0]
 800f904:	edd0 7a01 	vldr	s15, [r0, #4]
 800f908:	ed90 5a03 	vldr	s10, [r0, #12]
 800f90c:	edd0 5a02 	vldr	s11, [r0, #8]
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f918:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f91c:	ee67 6a05 	vmul.f32	s13, s14, s10
 800f920:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f924:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800f928:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f92c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f930:	ee36 6a06 	vadd.f32	s12, s12, s12
 800f934:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f938:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800f93c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f940:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f944:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800f948:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f94c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f950:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f954:	460f      	mov	r7, r1
 800f956:	4615      	mov	r5, r2
 800f958:	461e      	mov	r6, r3
 800f95a:	f1bc 0f00 	cmp.w	ip, #0
 800f95e:	d146      	bne.n	800f9ee <output_update+0xee>
 800f960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f964:	eef1 6a66 	vneg.f32	s13, s13
 800f968:	edc3 7a01 	vstr	s15, [r3, #4]
 800f96c:	edc3 6a00 	vstr	s13, [r3]
 800f970:	ed83 5a02 	vstr	s10, [r3, #8]
 800f974:	4662      	mov	r2, ip
 800f976:	4629      	mov	r1, r5
 800f978:	4604      	mov	r4, r0
 800f97a:	f7ff f955 	bl	800ec28 <q2hpr>
 800f97e:	edd5 6a01 	vldr	s13, [r5, #4]
 800f982:	ed95 7a00 	vldr	s14, [r5]
 800f986:	edd5 7a02 	vldr	s15, [r5, #8]
 800f98a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800fa9c <output_update+0x19c>
 800f98e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f992:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800f996:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800f99a:	ed85 7a00 	vstr	s14, [r5]
 800f99e:	edc5 6a01 	vstr	s13, [r5, #4]
 800f9a2:	edc5 7a02 	vstr	s15, [r5, #8]
 800f9a6:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9aa:	edd6 7a00 	vldr	s15, [r6]
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9b4:	edc8 7a00 	vstr	s15, [r8]
 800f9b8:	ed97 7a00 	vldr	s14, [r7]
 800f9bc:	edd6 7a01 	vldr	s15, [r6, #4]
 800f9c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9c4:	edc8 7a01 	vstr	s15, [r8, #4]
 800f9c8:	edd6 7a02 	vldr	s15, [r6, #8]
 800f9cc:	ed97 7a02 	vldr	s14, [r7, #8]
 800f9d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9d4:	edc8 7a02 	vstr	s15, [r8, #8]
 800f9d8:	edd4 7a02 	vldr	s15, [r4, #8]
 800f9dc:	6863      	ldr	r3, [r4, #4]
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	eef1 7a67 	vneg.f32	s15, s15
 800f9e4:	6062      	str	r2, [r4, #4]
 800f9e6:	edc4 7a02 	vstr	s15, [r4, #8]
 800f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ee:	f1bc 0f01 	cmp.w	ip, #1
 800f9f2:	d015      	beq.n	800fa20 <output_update+0x120>
 800f9f4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800fa9c <output_update+0x19c>
 800f9f8:	edd2 6a00 	vldr	s13, [r2]
 800f9fc:	ed92 7a01 	vldr	s14, [r2, #4]
 800fa00:	edd2 7a02 	vldr	s15, [r2, #8]
 800fa04:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fa08:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fa0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fa10:	edc2 6a00 	vstr	s13, [r2]
 800fa14:	ed82 7a01 	vstr	s14, [r2, #4]
 800fa18:	edc2 7a02 	vstr	s15, [r2, #8]
 800fa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa24:	ee36 6a65 	vsub.f32	s12, s12, s11
 800fa28:	eef1 6a66 	vneg.f32	s13, s13
 800fa2c:	edc3 7a00 	vstr	s15, [r3]
 800fa30:	ed83 6a02 	vstr	s12, [r3, #8]
 800fa34:	edc3 6a01 	vstr	s13, [r3, #4]
 800fa38:	4662      	mov	r2, ip
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	f7ff f8f4 	bl	800ec28 <q2hpr>
 800fa40:	edd5 6a00 	vldr	s13, [r5]
 800fa44:	ed95 7a01 	vldr	s14, [r5, #4]
 800fa48:	edd5 7a02 	vldr	s15, [r5, #8]
 800fa4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fa9c <output_update+0x19c>
 800fa50:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fa54:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fa58:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fa5c:	ed85 7a01 	vstr	s14, [r5, #4]
 800fa60:	edc5 6a00 	vstr	s13, [r5]
 800fa64:	edc5 7a02 	vstr	s15, [r5, #8]
 800fa68:	ed97 7a00 	vldr	s14, [r7]
 800fa6c:	edd6 7a00 	vldr	s15, [r6]
 800fa70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa74:	edc8 7a00 	vstr	s15, [r8]
 800fa78:	ed97 7a01 	vldr	s14, [r7, #4]
 800fa7c:	edd6 7a01 	vldr	s15, [r6, #4]
 800fa80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa84:	edc8 7a01 	vstr	s15, [r8, #4]
 800fa88:	edd6 7a02 	vldr	s15, [r6, #8]
 800fa8c:	ed97 7a02 	vldr	s14, [r7, #8]
 800fa90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa94:	edc8 7a02 	vstr	s15, [r8, #8]
 800fa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa9c:	42652ee1 	.word	0x42652ee1

0800faa0 <kalman_3gyro.constprop.0>:
 800faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	ed2d 8b10 	vpush	{d8-d15}
 800faa8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800faac:	edd2 9a02 	vldr	s19, [r2, #8]
 800fab0:	edd2 8a03 	vldr	s17, [r2, #12]
 800fab4:	edd2 6a04 	vldr	s13, [r2, #16]
 800fab8:	ed92 6a05 	vldr	s12, [r2, #20]
 800fabc:	6854      	ldr	r4, [r2, #4]
 800fabe:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800fac2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800faca:	4683      	mov	fp, r0
 800facc:	edd2 7a00 	vldr	s15, [r2]
 800fad0:	48e3      	ldr	r0, [pc, #908]	; (800fe60 <kalman_3gyro.constprop.0+0x3c0>)
 800fad2:	9108      	str	r1, [sp, #32]
 800fad4:	904a      	str	r0, [sp, #296]	; 0x128
 800fad6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800fada:	460d      	mov	r5, r1
 800fadc:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800fae0:	2100      	movs	r1, #0
 800fae2:	9328      	str	r3, [sp, #160]	; 0xa0
 800fae4:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800fae8:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800faec:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800faf0:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800faf4:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800faf8:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800fafc:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800fb00:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800fb04:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800fb08:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800fb0c:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800fb10:	946f      	str	r4, [sp, #444]	; 0x1bc
 800fb12:	9470      	str	r4, [sp, #448]	; 0x1c0
 800fb14:	9471      	str	r4, [sp, #452]	; 0x1c4
 800fb16:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800fb1a:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800fb1e:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800fb22:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800fb26:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800fb2a:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800fb2e:	eeb0 8a60 	vmov.f32	s16, s1
 800fb32:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800fb36:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800fb3a:	ed8d 1a07 	vstr	s2, [sp, #28]
 800fb3e:	f00a fd2b 	bl	801a598 <memset>
 800fb42:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800fb46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb4a:	600b      	str	r3, [r1, #0]
 800fb4c:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800fb50:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800fb54:	600b      	str	r3, [r1, #0]
 800fb56:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800fb5a:	600b      	str	r3, [r1, #0]
 800fb5c:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800fb60:	600b      	str	r3, [r1, #0]
 800fb62:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800fb66:	600b      	str	r3, [r1, #0]
 800fb68:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800fb6c:	600b      	str	r3, [r1, #0]
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	f001 82c2 	beq.w	80110f8 <kalman_3gyro.constprop.0+0x1658>
 800fb74:	ed95 5a02 	vldr	s10, [r5, #8]
 800fb78:	edd5 5a01 	vldr	s11, [r5, #4]
 800fb7c:	ed95 3a00 	vldr	s6, [r5]
 800fb80:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800fb84:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800fb88:	ee35 4a05 	vadd.f32	s8, s10, s10
 800fb8c:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800fb90:	ee25 5a27 	vmul.f32	s10, s10, s15
 800fb94:	ee63 7a27 	vmul.f32	s15, s6, s15
 800fb98:	ee33 3a03 	vadd.f32	s6, s6, s6
 800fb9c:	9b08      	ldr	r3, [sp, #32]
 800fb9e:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800fba2:	ed82 4a00 	vstr	s8, [r2]
 800fba6:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800fbaa:	edc2 4a00 	vstr	s9, [r2]
 800fbae:	ed93 6a05 	vldr	s12, [r3, #20]
 800fbb2:	edd3 6a04 	vldr	s13, [r3, #16]
 800fbb6:	ed93 7a03 	vldr	s14, [r3, #12]
 800fbba:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800fbbe:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800fbc2:	ed82 5a00 	vstr	s10, [r2]
 800fbc6:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800fbca:	ed82 3a00 	vstr	s6, [r2]
 800fbce:	eef1 3a46 	vneg.f32	s7, s12
 800fbd2:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800fbd6:	edc2 5a00 	vstr	s11, [r2]
 800fbda:	eeb1 4a66 	vneg.f32	s8, s13
 800fbde:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800fbe2:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800fbe6:	edc2 7a00 	vstr	s15, [r2]
 800fbea:	ee34 3a04 	vadd.f32	s6, s8, s8
 800fbee:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800fbf2:	eef1 4a47 	vneg.f32	s9, s14
 800fbf6:	ed82 5a00 	vstr	s10, [r2]
 800fbfa:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800fbfe:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800fc02:	ed81 3a00 	vstr	s6, [r1]
 800fc06:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800fc0a:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800fc0e:	ed81 5a00 	vstr	s10, [r1]
 800fc12:	ee77 7a07 	vadd.f32	s15, s14, s14
 800fc16:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800fc1a:	edc1 5a00 	vstr	s11, [r1]
 800fc1e:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800fc22:	edc1 7a00 	vstr	s15, [r1]
 800fc26:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	600b      	str	r3, [r1, #0]
 800fc2e:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800fc32:	ee76 2a06 	vadd.f32	s5, s12, s12
 800fc36:	600b      	str	r3, [r1, #0]
 800fc38:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800fc3c:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800fc40:	600b      	str	r3, [r1, #0]
 800fc42:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800fc46:	edc2 2a00 	vstr	s5, [r2]
 800fc4a:	600b      	str	r3, [r1, #0]
 800fc4c:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800fc50:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800fc54:	600b      	str	r3, [r1, #0]
 800fc56:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800fc5a:	a87b      	add	r0, sp, #492	; 0x1ec
 800fc5c:	600b      	str	r3, [r1, #0]
 800fc5e:	2230      	movs	r2, #48	; 0x30
 800fc60:	2100      	movs	r1, #0
 800fc62:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800fc66:	934b      	str	r3, [sp, #300]	; 0x12c
 800fc68:	934f      	str	r3, [sp, #316]	; 0x13c
 800fc6a:	9353      	str	r3, [sp, #332]	; 0x14c
 800fc6c:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800fc70:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800fc74:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800fc78:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800fc7c:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800fc80:	942c      	str	r4, [sp, #176]	; 0xb0
 800fc82:	f00a fc89 	bl	801a598 <memset>
 800fc86:	eddb 6a06 	vldr	s13, [fp, #24]
 800fc8a:	ed9b 7a07 	vldr	s14, [fp, #28]
 800fc8e:	eddb 7a08 	vldr	s15, [fp, #32]
 800fc92:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800fc96:	ee68 6a26 	vmul.f32	s13, s16, s13
 800fc9a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800fc9e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800fca2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800fca6:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800fcaa:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f043 84a8 	bne.w	8013604 <kalman_3gyro.constprop.0+0x3b64>
 800fcb4:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f043 81e7 	bne.w	801308c <kalman_3gyro.constprop.0+0x35ec>
 800fcbe:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800fcc2:	9304      	str	r3, [sp, #16]
 800fcc4:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800fcc8:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800fccc:	9310      	str	r3, [sp, #64]	; 0x40
 800fcce:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800fcd2:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800fcd6:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800fcda:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcdc:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800fce0:	edd0 7a00 	vldr	s15, [r0]
 800fce4:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800fce8:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800fcec:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800fcf0:	ed93 6a00 	vldr	s12, [r3]
 800fcf4:	ed91 7a00 	vldr	s14, [r1]
 800fcf8:	edd2 6a00 	vldr	s13, [r2]
 800fcfc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800fd00:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fd04:	2300      	movs	r3, #0
 800fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0a:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800fd0e:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800fd12:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800fd16:	933a      	str	r3, [sp, #232]	; 0xe8
 800fd18:	933b      	str	r3, [sp, #236]	; 0xec
 800fd1a:	933c      	str	r3, [sp, #240]	; 0xf0
 800fd1c:	933d      	str	r3, [sp, #244]	; 0xf4
 800fd1e:	d14e      	bne.n	800fdbe <kalman_3gyro.constprop.0+0x31e>
 800fd20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd28:	d149      	bne.n	800fdbe <kalman_3gyro.constprop.0+0x31e>
 800fd2a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	d144      	bne.n	800fdbe <kalman_3gyro.constprop.0+0x31e>
 800fd34:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3c:	d13f      	bne.n	800fdbe <kalman_3gyro.constprop.0+0x31e>
 800fd3e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800fd40:	9336      	str	r3, [sp, #216]	; 0xd8
 800fd42:	7802      	ldrb	r2, [r0, #0]
 800fd44:	9337      	str	r3, [sp, #220]	; 0xdc
 800fd46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fd4a:	9338      	str	r3, [sp, #224]	; 0xe0
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	ed90 7a03 	vldr	s14, [r0, #12]
 800fd52:	edd0 6a01 	vldr	s13, [r0, #4]
 800fd56:	edd0 7a02 	vldr	s15, [r0, #8]
 800fd5a:	9139      	str	r1, [sp, #228]	; 0xe4
 800fd5c:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	f003 8568 	beq.w	8013836 <kalman_3gyro.constprop.0+0x3d96>
 800fd66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd6a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fd6e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fd72:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fd76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fd7e:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800fd82:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800fd86:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800fd90:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800fd94:	f00a fc00 	bl	801a598 <memset>
 800fd98:	4b32      	ldr	r3, [pc, #200]	; (800fe64 <kalman_3gyro.constprop.0+0x3c4>)
 800fd9a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800fd9e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800fda2:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800fda6:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800fdaa:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800fdae:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800fdb2:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800fdb6:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800fdba:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800fdbe:	9b08      	ldr	r3, [sp, #32]
 800fdc0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800fe68 <kalman_3gyro.constprop.0+0x3c8>
 800fdc4:	ed93 7a01 	vldr	s14, [r3, #4]
 800fdc8:	edd3 5a00 	vldr	s11, [r3]
 800fdcc:	edd3 7a02 	vldr	s15, [r3, #8]
 800fdd0:	ee67 6a07 	vmul.f32	s13, s14, s14
 800fdd4:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800fdd8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800fddc:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde4:	f101 8127 	bmi.w	8011036 <kalman_3gyro.constprop.0+0x1596>
 800fde8:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800fdec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdf0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800fdf4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800fdf8:	eef0 6ae6 	vabs.f32	s13, s13
 800fdfc:	ee76 aaea 	vsub.f32	s21, s13, s21
 800fe00:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800fe04:	ed93 5a04 	vldr	s10, [r3, #16]
 800fe08:	ed93 3a03 	vldr	s6, [r3, #12]
 800fe0c:	edd3 1a05 	vldr	s3, [r3, #20]
 800fe10:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fe68 <kalman_3gyro.constprop.0+0x3c8>
 800fe14:	9b04      	ldr	r3, [sp, #16]
 800fe16:	ed95 ca00 	vldr	s24, [r5]
 800fe1a:	ed93 ba00 	vldr	s22, [r3]
 800fe1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe22:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800fe26:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800fe2a:	461e      	mov	r6, r3
 800fe2c:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800fe30:	9502      	str	r5, [sp, #8]
 800fe32:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800fe36:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800fe3a:	9327      	str	r3, [sp, #156]	; 0x9c
 800fe3c:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800fe40:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800fe44:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800fe48:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800fe4c:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800fe50:	9501      	str	r5, [sp, #4]
 800fe52:	ee65 6a05 	vmul.f32	s13, s10, s10
 800fe56:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800fe5a:	eee3 6a03 	vfma.f32	s13, s6, s6
 800fe5e:	e009      	b.n	800fe74 <kalman_3gyro.constprop.0+0x3d4>
 800fe60:	3a9d4952 	.word	0x3a9d4952
 800fe64:	40a00000 	.word	0x40a00000
 800fe68:	3c23d70a 	.word	0x3c23d70a
 800fe6c:	3dcccccd 	.word	0x3dcccccd
 800fe70:	4b000000 	.word	0x4b000000
 800fe74:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800fe78:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800fe7c:	ee25 8a82 	vmul.f32	s16, s11, s4
 800fe80:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800fe84:	950c      	str	r5, [sp, #48]	; 0x30
 800fe86:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800fe8a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800fe8e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fe92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe96:	bf58      	it	pl
 800fe98:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800fe9c:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800fea0:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800fea4:	bf48      	it	mi
 800fea6:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800fe6c <kalman_3gyro.constprop.0+0x3cc>
 800feaa:	ed96 6a00 	vldr	s12, [r6]
 800feae:	edda 4a00 	vldr	s9, [sl]
 800feb2:	ed93 fa00 	vldr	s30, [r3]
 800feb6:	ed90 ea00 	vldr	s28, [r0]
 800feba:	edd4 3a00 	vldr	s7, [r4]
 800febe:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800fec2:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800fec6:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800feca:	9617      	str	r6, [sp, #92]	; 0x5c
 800fecc:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800fed0:	961a      	str	r6, [sp, #104]	; 0x68
 800fed2:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800fed6:	9611      	str	r6, [sp, #68]	; 0x44
 800fed8:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800fedc:	9618      	str	r6, [sp, #96]	; 0x60
 800fede:	9e02      	ldr	r6, [sp, #8]
 800fee0:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800fee4:	9303      	str	r3, [sp, #12]
 800fee6:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800feea:	ee27 2a82 	vmul.f32	s4, s15, s4
 800feee:	ee23 3a26 	vmul.f32	s6, s6, s13
 800fef2:	ee25 5a26 	vmul.f32	s10, s10, s13
 800fef6:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800fefa:	edd1 6a00 	vldr	s13, [r1]
 800fefe:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800ff02:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800ff06:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800ff0a:	edcd 6a05 	vstr	s13, [sp, #20]
 800ff0e:	ed8d 6a06 	vstr	s12, [sp, #24]
 800ff12:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800ff16:	ed92 6a00 	vldr	s12, [r2]
 800ff1a:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800ff1e:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800ff22:	edd6 2a00 	vldr	s5, [r6]
 800ff26:	eddc 4a00 	vldr	s9, [ip]
 800ff2a:	9e01      	ldr	r6, [sp, #4]
 800ff2c:	edd0 ca00 	vldr	s25, [r0]
 800ff30:	ed96 1a00 	vldr	s2, [r6]
 800ff34:	9803      	ldr	r0, [sp, #12]
 800ff36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff38:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800ff3c:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800ff40:	eddc 0a00 	vldr	s1, [ip]
 800ff44:	ed96 da00 	vldr	s26, [r6]
 800ff48:	edd0 4a00 	vldr	s9, [r0]
 800ff4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ff4e:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800ff52:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800ff56:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800ff5a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800ff5e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800ff62:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800ff66:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800ff6a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800ff6e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800ff72:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800ff76:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800ff7a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800ff7e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800ff82:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800ff86:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800ff8a:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800ff8e:	edd6 4a00 	vldr	s9, [r6]
 800ff92:	edd9 6a00 	vldr	s13, [r9]
 800ff96:	edde ba00 	vldr	s23, [lr]
 800ff9a:	ed95 4a00 	vldr	s8, [r5]
 800ff9e:	ed94 0a00 	vldr	s0, [r4]
 800ffa2:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800ffa6:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800ffaa:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800ffae:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800ffb2:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800ffb6:	edd9 ea00 	vldr	s29, [r9]
 800ffba:	edd1 2a00 	vldr	s5, [r1]
 800ffbe:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800ffc2:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800ffc6:	ed92 1a00 	vldr	s2, [r2]
 800ffca:	edd3 ca00 	vldr	s25, [r3]
 800ffce:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800ffd2:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800ffd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffd8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ffda:	edd3 4a00 	vldr	s9, [r3]
 800ffde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffe0:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800ffe4:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800ffe8:	edd3 fa00 	vldr	s31, [r3]
 800ffec:	eef0 4a6f 	vmov.f32	s9, s31
 800fff0:	edd6 fa00 	vldr	s31, [r6]
 800fff4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fff6:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800fffa:	eea3 5a08 	vfma.f32	s10, s6, s16
 800fffe:	ed96 3a00 	vldr	s6, [r6]
 8010002:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010004:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 8010008:	ee25 8aad 	vmul.f32	s16, s11, s27
 801000c:	eddd 5a06 	vldr	s11, [sp, #24]
 8010010:	edd6 fa00 	vldr	s31, [r6]
 8010014:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010016:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 801001a:	ee95 6a83 	vfnms.f32	s12, s11, s6
 801001e:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 8010022:	eed5 6a83 	vfnms.f32	s13, s11, s6
 8010026:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 801002a:	eed5 fa83 	vfnms.f32	s31, s11, s6
 801002e:	edd8 5a00 	vldr	s11, [r8]
 8010032:	eed5 3a83 	vfnms.f32	s7, s11, s6
 8010036:	eef0 5a44 	vmov.f32	s11, s8
 801003a:	ed97 4a00 	vldr	s8, [r7]
 801003e:	ee76 6aae 	vadd.f32	s13, s13, s29
 8010042:	eed4 5a03 	vfnms.f32	s11, s8, s6
 8010046:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 801004a:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 801004e:	eede 2a83 	vfnms.f32	s5, s29, s6
 8010052:	ee94 4a83 	vfnms.f32	s8, s9, s6
 8010056:	ee73 3a8e 	vadd.f32	s7, s7, s28
 801005a:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 801005e:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 8010062:	eede 4a03 	vfnms.f32	s9, s28, s6
 8010066:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 801006a:	ee72 2aac 	vadd.f32	s5, s5, s25
 801006e:	ee75 5a8e 	vadd.f32	s11, s11, s28
 8010072:	edd6 ca00 	vldr	s25, [r6]
 8010076:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 801007a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801007c:	ee34 4a0e 	vadd.f32	s8, s8, s28
 8010080:	ed96 ea00 	vldr	s28, [r6]
 8010084:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010086:	ee74 4a8d 	vadd.f32	s9, s9, s26
 801008a:	ed96 da00 	vldr	s26, [r6]
 801008e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8010090:	ee7f faac 	vadd.f32	s31, s31, s25
 8010094:	edd6 ca00 	vldr	s25, [r6]
 8010098:	eedd ca03 	vfnms.f32	s25, s26, s6
 801009c:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 80100a0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80100a2:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80100a6:	eeeb 6a83 	vfma.f32	s13, s23, s6
 80100aa:	eee0 5a03 	vfma.f32	s11, s0, s6
 80100ae:	eddd ba05 	vldr	s23, [sp, #20]
 80100b2:	ed96 0a00 	vldr	s0, [r6]
 80100b6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80100b8:	ee36 6a0f 	vadd.f32	s12, s12, s30
 80100bc:	eeee fa03 	vfma.f32	s31, s28, s6
 80100c0:	eead 6a03 	vfma.f32	s12, s26, s6
 80100c4:	eeeb 3a83 	vfma.f32	s7, s23, s6
 80100c8:	eea0 4a03 	vfma.f32	s8, s0, s6
 80100cc:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 80100d0:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800fe6c <kalman_3gyro.constprop.0+0x3cc>
 80100d4:	eee1 2a03 	vfma.f32	s5, s2, s6
 80100d8:	ee2c ca00 	vmul.f32	s24, s24, s0
 80100dc:	ee6b ba80 	vmul.f32	s23, s23, s0
 80100e0:	ed96 1a00 	vldr	s2, [r6]
 80100e4:	ee2b 0a00 	vmul.f32	s0, s22, s0
 80100e8:	eee0 4a83 	vfma.f32	s9, s1, s6
 80100ec:	ee26 6a0c 	vmul.f32	s12, s12, s24
 80100f0:	ee6f faab 	vmul.f32	s31, s31, s23
 80100f4:	ee3c 1a81 	vadd.f32	s2, s25, s2
 80100f8:	ee60 6a26 	vmul.f32	s13, s0, s13
 80100fc:	eddc 0a00 	vldr	s1, [ip]
 8010100:	ee63 3a8c 	vmul.f32	s7, s7, s24
 8010104:	ee24 4a2b 	vmul.f32	s8, s8, s23
 8010108:	ee60 5a25 	vmul.f32	s11, s0, s11
 801010c:	eea0 1a83 	vfma.f32	s2, s1, s6
 8010110:	ee26 6a06 	vmul.f32	s12, s12, s12
 8010114:	ee6f faaf 	vmul.f32	s31, s31, s31
 8010118:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801011c:	eea3 6aa3 	vfma.f32	s12, s7, s7
 8010120:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8010124:	eee4 fa04 	vfma.f32	s31, s8, s8
 8010128:	ee64 4a8c 	vmul.f32	s9, s9, s24
 801012c:	ee21 1a2b 	vmul.f32	s2, s2, s23
 8010130:	ee60 2a22 	vmul.f32	s5, s0, s5
 8010134:	eea4 6aa4 	vfma.f32	s12, s9, s9
 8010138:	eee1 fa01 	vfma.f32	s31, s2, s2
 801013c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 8010140:	eea1 5a82 	vfma.f32	s10, s3, s4
 8010144:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800fe70 <kalman_3gyro.constprop.0+0x3d0>
 8010148:	eef0 4ac8 	vabs.f32	s9, s16
 801014c:	eef4 4ae5 	vcmpe.f32	s9, s11
 8010150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010154:	ee27 ea2d 	vmul.f32	s28, s14, s27
 8010158:	eeb1 dac6 	vsqrt.f32	s26, s12
 801015c:	eef1 caef 	vsqrt.f32	s25, s31
 8010160:	eef1 bae6 	vsqrt.f32	s23, s13
 8010164:	ee67 daad 	vmul.f32	s27, s15, s27
 8010168:	eeb0 ca45 	vmov.f32	s24, s10
 801016c:	d517      	bpl.n	801019e <kalman_3gyro.constprop.0+0x6fe>
 801016e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010172:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017a:	f2c1 806f 	blt.w	801125c <kalman_3gyro.constprop.0+0x17bc>
 801017e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010182:	ee17 0a90 	vmov	r0, s15
 8010186:	f7f0 f9df 	bl	8000548 <__aeabi_f2d>
 801018a:	ec41 0b10 	vmov	d0, r0, r1
 801018e:	f008 fb4b 	bl	8018828 <floor>
 8010192:	ec51 0b10 	vmov	r0, r1, d0
 8010196:	f7f0 fcdf 	bl	8000b58 <__aeabi_d2f>
 801019a:	ee08 0a10 	vmov	s16, r0
 801019e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800fe70 <kalman_3gyro.constprop.0+0x3d0>
 80101a2:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 80101a6:	eef0 6ace 	vabs.f32	s13, s28
 80101aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80101ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b2:	d517      	bpl.n	80101e4 <kalman_3gyro.constprop.0+0x744>
 80101b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80101b8:	eeb4 eae7 	vcmpe.f32	s28, s15
 80101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c0:	f2c1 8040 	blt.w	8011244 <kalman_3gyro.constprop.0+0x17a4>
 80101c4:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80101c8:	ee17 0a90 	vmov	r0, s15
 80101cc:	f7f0 f9bc 	bl	8000548 <__aeabi_f2d>
 80101d0:	ec41 0b10 	vmov	d0, r0, r1
 80101d4:	f008 fb28 	bl	8018828 <floor>
 80101d8:	ec51 0b10 	vmov	r0, r1, d0
 80101dc:	f7f0 fcbc 	bl	8000b58 <__aeabi_d2f>
 80101e0:	ee0e 0a10 	vmov	s28, r0
 80101e4:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800fe70 <kalman_3gyro.constprop.0+0x3d0>
 80101e8:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 80101ec:	eeb0 7aed 	vabs.f32	s14, s27
 80101f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f8:	d517      	bpl.n	801022a <kalman_3gyro.constprop.0+0x78a>
 80101fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80101fe:	eef4 dae7 	vcmpe.f32	s27, s15
 8010202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010206:	f2c1 8011 	blt.w	801122c <kalman_3gyro.constprop.0+0x178c>
 801020a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 801020e:	ee17 0a90 	vmov	r0, s15
 8010212:	f7f0 f999 	bl	8000548 <__aeabi_f2d>
 8010216:	ec41 0b10 	vmov	d0, r0, r1
 801021a:	f008 fb05 	bl	8018828 <floor>
 801021e:	ec51 0b10 	vmov	r0, r1, d0
 8010222:	f7f0 fc99 	bl	8000b58 <__aeabi_d2f>
 8010226:	ee0d 0a90 	vmov	s27, r0
 801022a:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 801022e:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 8010232:	1e61      	subs	r1, r4, #1
 8010234:	b249      	sxtb	r1, r1
 8010236:	2900      	cmp	r1, #0
 8010238:	dd1a      	ble.n	8010270 <kalman_3gyro.constprop.0+0x7d0>
 801023a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801023e:	1ea0      	subs	r0, r4, #2
 8010240:	0089      	lsls	r1, r1, #2
 8010242:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 8010246:	b2c0      	uxtb	r0, r0
 8010248:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 801024c:	440a      	add	r2, r1
 801024e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010252:	445b      	add	r3, fp
 8010254:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 8010258:	6819      	ldr	r1, [r3, #0]
 801025a:	6858      	ldr	r0, [r3, #4]
 801025c:	60d9      	str	r1, [r3, #12]
 801025e:	6899      	ldr	r1, [r3, #8]
 8010260:	6118      	str	r0, [r3, #16]
 8010262:	6159      	str	r1, [r3, #20]
 8010264:	3b0c      	subs	r3, #12
 8010266:	4293      	cmp	r3, r2
 8010268:	d1f6      	bne.n	8010258 <kalman_3gyro.constprop.0+0x7b8>
 801026a:	9b04      	ldr	r3, [sp, #16]
 801026c:	ed93 ba00 	vldr	s22, [r3]
 8010270:	ed88 8a00 	vstr	s16, [r8]
 8010274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010278:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 801027c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801027e:	ed83 ea00 	vstr	s28, [r3]
 8010282:	9b01      	ldr	r3, [sp, #4]
 8010284:	eddf 7aa5 	vldr	s15, [pc, #660]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 8010288:	edc3 da00 	vstr	s27, [r3]
 801028c:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8010290:	3301      	adds	r3, #1
 8010292:	b2db      	uxtb	r3, r3
 8010294:	429c      	cmp	r4, r3
 8010296:	bf28      	it	cs
 8010298:	461c      	movcs	r4, r3
 801029a:	9b08      	ldr	r3, [sp, #32]
 801029c:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 80102a0:	edd3 da03 	vldr	s27, [r3, #12]
 80102a4:	ed93 ba04 	vldr	s22, [r3, #16]
 80102a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80102ac:	ee68 da2d 	vmul.f32	s27, s16, s27
 80102b0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 80102b4:	eeb0 7aed 	vabs.f32	s14, s27
 80102b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c0:	ee28 8a26 	vmul.f32	s16, s16, s13
 80102c4:	d517      	bpl.n	80102f6 <kalman_3gyro.constprop.0+0x856>
 80102c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80102ca:	eef4 dae7 	vcmpe.f32	s27, s15
 80102ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d2:	f2c0 879f 	blt.w	8011214 <kalman_3gyro.constprop.0+0x1774>
 80102d6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80102da:	ee17 0a90 	vmov	r0, s15
 80102de:	f7f0 f933 	bl	8000548 <__aeabi_f2d>
 80102e2:	ec41 0b10 	vmov	d0, r0, r1
 80102e6:	f008 fa9f 	bl	8018828 <floor>
 80102ea:	ec51 0b10 	vmov	r0, r1, d0
 80102ee:	f7f0 fc33 	bl	8000b58 <__aeabi_d2f>
 80102f2:	ee0d 0a90 	vmov	s27, r0
 80102f6:	eddf 7a89 	vldr	s15, [pc, #548]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 80102fa:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 80102fe:	eeb0 7acb 	vabs.f32	s14, s22
 8010302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030a:	d517      	bpl.n	801033c <kalman_3gyro.constprop.0+0x89c>
 801030c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010310:	eeb4 bae7 	vcmpe.f32	s22, s15
 8010314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010318:	f2c0 8770 	blt.w	80111fc <kalman_3gyro.constprop.0+0x175c>
 801031c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 8010320:	ee17 0a90 	vmov	r0, s15
 8010324:	f7f0 f910 	bl	8000548 <__aeabi_f2d>
 8010328:	ec41 0b10 	vmov	d0, r0, r1
 801032c:	f008 fa7c 	bl	8018828 <floor>
 8010330:	ec51 0b10 	vmov	r0, r1, d0
 8010334:	f7f0 fc10 	bl	8000b58 <__aeabi_d2f>
 8010338:	ee0b 0a10 	vmov	s22, r0
 801033c:	eddf 7a77 	vldr	s15, [pc, #476]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 8010340:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 8010344:	eeb0 7ac8 	vabs.f32	s14, s16
 8010348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801034c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010350:	d517      	bpl.n	8010382 <kalman_3gyro.constprop.0+0x8e2>
 8010352:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010356:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801035a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035e:	f2c0 8741 	blt.w	80111e4 <kalman_3gyro.constprop.0+0x1744>
 8010362:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010366:	ee17 0a90 	vmov	r0, s15
 801036a:	f7f0 f8ed 	bl	8000548 <__aeabi_f2d>
 801036e:	ec41 0b10 	vmov	d0, r0, r1
 8010372:	f008 fa59 	bl	8018828 <floor>
 8010376:	ec51 0b10 	vmov	r0, r1, d0
 801037a:	f7f0 fbed 	bl	8000b58 <__aeabi_d2f>
 801037e:	ee08 0a10 	vmov	s16, r0
 8010382:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 8010386:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 801038a:	1e61      	subs	r1, r4, #1
 801038c:	b249      	sxtb	r1, r1
 801038e:	2900      	cmp	r1, #0
 8010390:	dd17      	ble.n	80103c2 <kalman_3gyro.constprop.0+0x922>
 8010392:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010396:	1ea2      	subs	r2, r4, #2
 8010398:	0089      	lsls	r1, r1, #2
 801039a:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 801039e:	b2d2      	uxtb	r2, r2
 80103a0:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 80103a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80103a8:	4401      	add	r1, r0
 80103aa:	445b      	add	r3, fp
 80103ac:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	6858      	ldr	r0, [r3, #4]
 80103b4:	60da      	str	r2, [r3, #12]
 80103b6:	689a      	ldr	r2, [r3, #8]
 80103b8:	6118      	str	r0, [r3, #16]
 80103ba:	615a      	str	r2, [r3, #20]
 80103bc:	3b0c      	subs	r3, #12
 80103be:	4299      	cmp	r1, r3
 80103c0:	d1f6      	bne.n	80103b0 <kalman_3gyro.constprop.0+0x910>
 80103c2:	9b02      	ldr	r3, [sp, #8]
 80103c4:	edc7 da00 	vstr	s27, [r7]
 80103c8:	ed83 ba00 	vstr	s22, [r3]
 80103cc:	9b03      	ldr	r3, [sp, #12]
 80103ce:	eddf 7a53 	vldr	s15, [pc, #332]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 80103d2:	ed83 8a00 	vstr	s16, [r3]
 80103d6:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 80103da:	3301      	adds	r3, #1
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	429c      	cmp	r4, r3
 80103e0:	bf28      	it	cs
 80103e2:	461c      	movcs	r4, r3
 80103e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103e6:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 80103ea:	ed93 7a00 	vldr	s14, [r3]
 80103ee:	9b08      	ldr	r3, [sp, #32]
 80103f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80103f4:	ee86 8a07 	vdiv.f32	s16, s12, s14
 80103f8:	edd3 da06 	vldr	s27, [r3, #24]
 80103fc:	ed93 ba07 	vldr	s22, [r3, #28]
 8010400:	edd3 6a08 	vldr	s13, [r3, #32]
 8010404:	ee68 da2d 	vmul.f32	s27, s16, s27
 8010408:	ee28 ba0b 	vmul.f32	s22, s16, s22
 801040c:	eeb0 7aed 	vabs.f32	s14, s27
 8010410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	ee28 8a26 	vmul.f32	s16, s16, s13
 801041c:	d517      	bpl.n	801044e <kalman_3gyro.constprop.0+0x9ae>
 801041e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010422:	eef4 dae7 	vcmpe.f32	s27, s15
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	f2c0 86cf 	blt.w	80111cc <kalman_3gyro.constprop.0+0x172c>
 801042e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8010432:	ee17 0a90 	vmov	r0, s15
 8010436:	f7f0 f887 	bl	8000548 <__aeabi_f2d>
 801043a:	ec41 0b10 	vmov	d0, r0, r1
 801043e:	f008 f9f3 	bl	8018828 <floor>
 8010442:	ec51 0b10 	vmov	r0, r1, d0
 8010446:	f7f0 fb87 	bl	8000b58 <__aeabi_d2f>
 801044a:	ee0d 0a90 	vmov	s27, r0
 801044e:	eddf 7a33 	vldr	s15, [pc, #204]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 8010452:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 8010456:	eeb0 7acb 	vabs.f32	s14, s22
 801045a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010462:	d517      	bpl.n	8010494 <kalman_3gyro.constprop.0+0x9f4>
 8010464:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010468:	eeb4 bae7 	vcmpe.f32	s22, s15
 801046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010470:	f2c0 86a0 	blt.w	80111b4 <kalman_3gyro.constprop.0+0x1714>
 8010474:	ee7b 7a27 	vadd.f32	s15, s22, s15
 8010478:	ee17 0a90 	vmov	r0, s15
 801047c:	f7f0 f864 	bl	8000548 <__aeabi_f2d>
 8010480:	ec41 0b10 	vmov	d0, r0, r1
 8010484:	f008 f9d0 	bl	8018828 <floor>
 8010488:	ec51 0b10 	vmov	r0, r1, d0
 801048c:	f7f0 fb64 	bl	8000b58 <__aeabi_d2f>
 8010490:	ee0b 0a10 	vmov	s22, r0
 8010494:	eddf 7a21 	vldr	s15, [pc, #132]	; 801051c <kalman_3gyro.constprop.0+0xa7c>
 8010498:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 801049c:	eeb0 7ac8 	vabs.f32	s14, s16
 80104a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	d517      	bpl.n	80104da <kalman_3gyro.constprop.0+0xa3a>
 80104aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80104ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b6:	f2c0 8671 	blt.w	801119c <kalman_3gyro.constprop.0+0x16fc>
 80104ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80104be:	ee17 0a90 	vmov	r0, s15
 80104c2:	f7f0 f841 	bl	8000548 <__aeabi_f2d>
 80104c6:	ec41 0b10 	vmov	d0, r0, r1
 80104ca:	f008 f9ad 	bl	8018828 <floor>
 80104ce:	ec51 0b10 	vmov	r0, r1, d0
 80104d2:	f7f0 fb41 	bl	8000b58 <__aeabi_d2f>
 80104d6:	ee08 0a10 	vmov	s16, r0
 80104da:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 80104de:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 80104e2:	1e63      	subs	r3, r4, #1
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	dd1c      	ble.n	8010524 <kalman_3gyro.constprop.0+0xa84>
 80104ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104ee:	1ea2      	subs	r2, r4, #2
 80104f0:	0099      	lsls	r1, r3, #2
 80104f2:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 80104f6:	b2d2      	uxtb	r2, r2
 80104f8:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 80104fc:	4408      	add	r0, r1
 80104fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010502:	445b      	add	r3, fp
 8010504:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	6859      	ldr	r1, [r3, #4]
 801050c:	60da      	str	r2, [r3, #12]
 801050e:	689a      	ldr	r2, [r3, #8]
 8010510:	6119      	str	r1, [r3, #16]
 8010512:	615a      	str	r2, [r3, #20]
 8010514:	3b0c      	subs	r3, #12
 8010516:	4283      	cmp	r3, r0
 8010518:	d1f6      	bne.n	8010508 <kalman_3gyro.constprop.0+0xa68>
 801051a:	e003      	b.n	8010524 <kalman_3gyro.constprop.0+0xa84>
 801051c:	4b000000 	.word	0x4b000000
 8010520:	00000000 	.word	0x00000000
 8010524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010526:	edc3 da00 	vstr	s27, [r3]
 801052a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801052c:	ed83 ba00 	vstr	s22, [r3]
 8010530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010532:	ed83 8a00 	vstr	s16, [r3]
 8010536:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 801053a:	3301      	adds	r3, #1
 801053c:	b2db      	uxtb	r3, r3
 801053e:	429c      	cmp	r4, r3
 8010540:	bf28      	it	cs
 8010542:	461c      	movcs	r4, r3
 8010544:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 8010548:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 801054c:	aa54      	add	r2, sp, #336	; 0x150
 801054e:	a92d      	add	r1, sp, #180	; 0xb4
 8010550:	a830      	add	r0, sp, #192	; 0xc0
 8010552:	461c      	mov	r4, r3
 8010554:	9314      	str	r3, [sp, #80]	; 0x50
 8010556:	f7fe fa27 	bl	800e9a8 <getRotationMatrix>
 801055a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801055e:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 8010562:	6820      	ldr	r0, [r4, #0]
 8010564:	6861      	ldr	r1, [r4, #4]
 8010566:	68a2      	ldr	r2, [r4, #8]
 8010568:	68e3      	ldr	r3, [r4, #12]
 801056a:	4635      	mov	r5, r6
 801056c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801056e:	3410      	adds	r4, #16
 8010570:	42bc      	cmp	r4, r7
 8010572:	462e      	mov	r6, r5
 8010574:	d1f5      	bne.n	8010562 <kalman_3gyro.constprop.0+0xac2>
 8010576:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 801057a:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 801057e:	6820      	ldr	r0, [r4, #0]
 8010580:	6028      	str	r0, [r5, #0]
 8010582:	eef0 7ae7 	vabs.f32	s15, s15
 8010586:	eeb0 7ac7 	vabs.f32	s14, s14
 801058a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	f140 85a4 	bpl.w	80110de <kalman_3gyro.constprop.0+0x163e>
 8010596:	2303      	movs	r3, #3
 8010598:	2706      	movs	r7, #6
 801059a:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801059e:	2604      	movs	r6, #4
 80105a0:	2400      	movs	r4, #0
 80105a2:	eef0 7a47 	vmov.f32	s15, s14
 80105a6:	4632      	mov	r2, r6
 80105a8:	46a2      	mov	sl, r4
 80105aa:	2107      	movs	r1, #7
 80105ac:	f04f 0c01 	mov.w	ip, #1
 80105b0:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 80105b4:	eeb0 7ac7 	vabs.f32	s14, s14
 80105b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c0:	f340 85ae 	ble.w	8011120 <kalman_3gyro.constprop.0+0x1680>
 80105c4:	2304      	movs	r3, #4
 80105c6:	2007      	movs	r0, #7
 80105c8:	2108      	movs	r1, #8
 80105ca:	9301      	str	r3, [sp, #4]
 80105cc:	461c      	mov	r4, r3
 80105ce:	9002      	str	r0, [sp, #8]
 80105d0:	460a      	mov	r2, r1
 80105d2:	2306      	movs	r3, #6
 80105d4:	2003      	movs	r0, #3
 80105d6:	2605      	movs	r6, #5
 80105d8:	f04f 0800 	mov.w	r8, #0
 80105dc:	f04f 0a01 	mov.w	sl, #1
 80105e0:	f04f 0c02 	mov.w	ip, #2
 80105e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80105e6:	442c      	add	r4, r5
 80105e8:	442a      	add	r2, r5
 80105ea:	edd4 6a00 	vldr	s13, [r4]
 80105ee:	ed92 7a00 	vldr	s14, [r2]
 80105f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105f6:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80105fa:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 80105fe:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8010602:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010606:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801060a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 801060e:	970c      	str	r7, [sp, #48]	; 0x30
 8010610:	9f01      	ldr	r7, [sp, #4]
 8010612:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8010616:	00b6      	lsls	r6, r6, #2
 8010618:	960a      	str	r6, [sp, #40]	; 0x28
 801061a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801061e:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8010622:	edc4 7a00 	vstr	s15, [r4]
 8010626:	edd2 7a00 	vldr	s15, [r2]
 801062a:	ed99 7a00 	vldr	s14, [r9]
 801062e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010632:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010636:	9204      	str	r2, [sp, #16]
 8010638:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801063c:	9205      	str	r2, [sp, #20]
 801063e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8010642:	9209      	str	r2, [sp, #36]	; 0x24
 8010644:	00ba      	lsls	r2, r7, #2
 8010646:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010648:	9206      	str	r2, [sp, #24]
 801064a:	0080      	lsls	r0, r0, #2
 801064c:	9003      	str	r0, [sp, #12]
 801064e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8010652:	0089      	lsls	r1, r1, #2
 8010654:	910b      	str	r1, [sp, #44]	; 0x2c
 8010656:	edc9 6a00 	vstr	s13, [r9]
 801065a:	ed94 6a00 	vldr	s12, [r4]
 801065e:	ed97 7a00 	vldr	s14, [r7]
 8010662:	edd5 7a00 	vldr	s15, [r5]
 8010666:	9902      	ldr	r1, [sp, #8]
 8010668:	9a02      	ldr	r2, [sp, #8]
 801066a:	eee6 7a47 	vfms.f32	s15, s12, s14
 801066e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8010672:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8010676:	0092      	lsls	r2, r2, #2
 8010678:	edc5 7a00 	vstr	s15, [r5]
 801067c:	ed97 7a00 	vldr	s14, [r7]
 8010680:	edde 7a00 	vldr	s15, [lr]
 8010684:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	edce 7a00 	vstr	s15, [lr]
 801068e:	edd0 5a00 	vldr	s11, [r0]
 8010692:	ed91 7a00 	vldr	s14, [r1]
 8010696:	eea6 7a65 	vfms.f32	s14, s12, s11
 801069a:	eef0 7ae7 	vabs.f32	s15, s15
 801069e:	ed81 7a00 	vstr	s14, [r1]
 80106a2:	ed90 6a00 	vldr	s12, [r0]
 80106a6:	ed96 7a00 	vldr	s14, [r6]
 80106aa:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80106ae:	ed86 7a00 	vstr	s14, [r6]
 80106b2:	ed95 7a00 	vldr	s14, [r5]
 80106b6:	eeb0 7ac7 	vabs.f32	s14, s14
 80106ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	dd10      	ble.n	80106e6 <kalman_3gyro.constprop.0+0xc46>
 80106c4:	4652      	mov	r2, sl
 80106c6:	46c2      	mov	sl, r8
 80106c8:	4690      	mov	r8, r2
 80106ca:	461a      	mov	r2, r3
 80106cc:	9b01      	ldr	r3, [sp, #4]
 80106ce:	9902      	ldr	r1, [sp, #8]
 80106d0:	9803      	ldr	r0, [sp, #12]
 80106d2:	9006      	str	r0, [sp, #24]
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	9303      	str	r3, [sp, #12]
 80106d8:	008b      	lsls	r3, r1, #2
 80106da:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80106de:	9105      	str	r1, [sp, #20]
 80106e0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80106e4:	9104      	str	r1, [sp, #16]
 80106e6:	9903      	ldr	r1, [sp, #12]
 80106e8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 80106ec:	4401      	add	r1, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	9906      	ldr	r1, [sp, #24]
 80106f2:	ed94 7a00 	vldr	s14, [r4]
 80106f6:	4401      	add	r1, r0
 80106f8:	edd1 7a00 	vldr	s15, [r1]
 80106fc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010700:	4608      	mov	r0, r1
 8010702:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010706:	440a      	add	r2, r1
 8010708:	440b      	add	r3, r1
 801070a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801070c:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010710:	4429      	add	r1, r5
 8010712:	460d      	mov	r5, r1
 8010714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010716:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 801071a:	4431      	add	r1, r6
 801071c:	468e      	mov	lr, r1
 801071e:	ed84 3a00 	vstr	s6, [r4]
 8010722:	ed92 7a00 	vldr	s14, [r2]
 8010726:	edd3 7a00 	vldr	s15, [r3]
 801072a:	9904      	ldr	r1, [sp, #16]
 801072c:	eee3 7a47 	vfms.f32	s15, s6, s14
 8010730:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 8010734:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 8010738:	440e      	add	r6, r1
 801073a:	1879      	adds	r1, r7, r1
 801073c:	edc3 7a00 	vstr	s15, [r3]
 8010740:	9101      	str	r1, [sp, #4]
 8010742:	9b05      	ldr	r3, [sp, #20]
 8010744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010746:	edd2 0a00 	vldr	s1, [r2]
 801074a:	ed95 1a00 	vldr	s2, [r5]
 801074e:	ed9e 2a00 	vldr	s4, [lr]
 8010752:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 8010756:	edd6 6a00 	vldr	s13, [r6]
 801075a:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 801075e:	1874      	adds	r4, r6, r1
 8010760:	18f7      	adds	r7, r6, r3
 8010762:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 8010766:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801076a:	eb06 0903 	add.w	r9, r6, r3
 801076e:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010772:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 8010776:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 801077a:	4633      	mov	r3, r6
 801077c:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 8010780:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010784:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 8010788:	448c      	add	ip, r1
 801078a:	9901      	ldr	r1, [sp, #4]
 801078c:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8010790:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010794:	ed94 7a00 	vldr	s14, [r4]
 8010798:	ed93 6a00 	vldr	s12, [r3]
 801079c:	edd0 7a00 	vldr	s15, [r0]
 80107a0:	ed99 8a00 	vldr	s16, [r9]
 80107a4:	ed91 ba00 	vldr	s22, [r1]
 80107a8:	ed97 4a00 	vldr	s8, [r7]
 80107ac:	edd6 4a00 	vldr	s9, [r6]
 80107b0:	eddc da00 	vldr	s27, [ip]
 80107b4:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80107b8:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 80107bc:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80107c0:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 80107c4:	46a2      	mov	sl, r4
 80107c6:	4613      	mov	r3, r2
 80107c8:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 80107cc:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80107d0:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 80107d4:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 80107d8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80107dc:	eeeb 6a47 	vfms.f32	s13, s22, s14
 80107e0:	eea8 4a47 	vfms.f32	s8, s16, s14
 80107e4:	ed94 5a00 	vldr	s10, [r4]
 80107e8:	edda 3a00 	vldr	s7, [sl]
 80107ec:	edd2 5a00 	vldr	s11, [r2]
 80107f0:	edd3 7a00 	vldr	s15, [r3]
 80107f4:	eeab 5a64 	vfms.f32	s10, s22, s9
 80107f8:	eee8 5a64 	vfms.f32	s11, s16, s9
 80107fc:	eee6 3a4b 	vfms.f32	s7, s12, s22
 8010800:	eee6 7a48 	vfms.f32	s15, s12, s16
 8010804:	eea6 4ac3 	vfms.f32	s8, s13, s6
 8010808:	ee82 8aad 	vdiv.f32	s16, s5, s27
 801080c:	eee3 5a45 	vfms.f32	s11, s6, s10
 8010810:	eee3 7a63 	vfms.f32	s15, s6, s7
 8010814:	ee20 4a04 	vmul.f32	s8, s0, s8
 8010818:	ee60 5a25 	vmul.f32	s11, s0, s11
 801081c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010820:	eee0 6ac4 	vfms.f32	s13, s1, s8
 8010824:	eea0 5ae5 	vfms.f32	s10, s1, s11
 8010828:	eee7 3ae0 	vfms.f32	s7, s15, s1
 801082c:	eea1 7a44 	vfms.f32	s14, s2, s8
 8010830:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8010834:	eee1 4a65 	vfms.f32	s9, s2, s11
 8010838:	eea7 6ac1 	vfms.f32	s12, s15, s2
 801083c:	ee21 5a85 	vmul.f32	s10, s3, s10
 8010840:	eea2 7a66 	vfms.f32	s14, s4, s13
 8010844:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8010848:	eee2 4a45 	vfms.f32	s9, s4, s10
 801084c:	eea1 6ac2 	vfms.f32	s12, s3, s4
 8010850:	ee28 7a07 	vmul.f32	s14, s16, s14
 8010854:	ee37 3a85 	vadd.f32	s6, s15, s10
 8010858:	ee68 4a24 	vmul.f32	s9, s16, s9
 801085c:	ee26 8a08 	vmul.f32	s16, s12, s16
 8010860:	ee37 6a43 	vsub.f32	s12, s14, s6
 8010864:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 8010868:	eeb4 6ae3 	vcmpe.f32	s12, s7
 801086c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010870:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 8010874:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8010878:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 801087c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8010880:	bfc8      	it	gt
 8010882:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 8010886:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801088a:	bfcc      	ite	gt
 801088c:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 8010890:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 8010520 <kalman_3gyro.constprop.0+0xa80>
 8010894:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 8010898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089c:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 80108a0:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 80108a4:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 80108a8:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 80108ac:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 80108b0:	f100 84e4 	bmi.w	801127c <kalman_3gyro.constprop.0+0x17dc>
 80108b4:	bfd8      	it	le
 80108b6:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 80108ba:	ee37 6a87 	vadd.f32	s12, s15, s14
 80108be:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 80108c2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80108c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80108ca:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80108ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d2:	ee63 5aa5 	vmul.f32	s11, s7, s11
 80108d6:	ee38 4a44 	vsub.f32	s8, s16, s8
 80108da:	bf84      	itt	hi
 80108dc:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 80108e0:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 80108e4:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 80108e8:	bf8c      	ite	hi
 80108ea:	eef1 3ac6 	vsqrthi.f32	s7, s12
 80108ee:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 8010c70 <kalman_3gyro.constprop.0+0x11d0>
 80108f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f6:	f100 84bd 	bmi.w	8011274 <kalman_3gyro.constprop.0+0x17d4>
 80108fa:	bfd8      	it	le
 80108fc:	ee63 3a84 	vmulle.f32	s7, s7, s8
 8010900:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010904:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010908:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801090c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010918:	bf84      	itt	hi
 801091a:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 801091e:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8010922:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010926:	bf8c      	ite	hi
 8010928:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 801092c:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 8010c70 <kalman_3gyro.constprop.0+0x11d0>
 8010930:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	ee63 3a86 	vmul.f32	s7, s7, s12
 801093c:	f102 8399 	bmi.w	8013072 <kalman_3gyro.constprop.0+0x35d2>
 8010940:	bfd8      	it	le
 8010942:	ee27 7a26 	vmulle.f32	s14, s14, s13
 8010946:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 801094a:	1e53      	subs	r3, r2, #1
 801094c:	b25b      	sxtb	r3, r3
 801094e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010952:	2b00      	cmp	r3, #0
 8010954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010958:	dd1c      	ble.n	8010994 <kalman_3gyro.constprop.0+0xef4>
 801095a:	3a02      	subs	r2, #2
 801095c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010960:	b2d2      	uxtb	r2, r2
 8010962:	f1ab 000c 	sub.w	r0, fp, #12
 8010966:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801096a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801096e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010972:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8010976:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801097a:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 801097e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8010982:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8010986:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 801098a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 801098e:	3b0c      	subs	r3, #12
 8010990:	4283      	cmp	r3, r0
 8010992:	d1f0      	bne.n	8010976 <kalman_3gyro.constprop.0+0xed6>
 8010994:	eddd 6a07 	vldr	s13, [sp, #28]
 8010998:	4ab6      	ldr	r2, [pc, #728]	; (8010c74 <kalman_3gyro.constprop.0+0x11d4>)
 801099a:	4bb7      	ldr	r3, [pc, #732]	; (8010c78 <kalman_3gyro.constprop.0+0x11d8>)
 801099c:	ed92 8a00 	vldr	s16, [r2]
 80109a0:	ed93 ba00 	vldr	s22, [r3]
 80109a4:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 80109a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80109ac:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80109b0:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 80109b4:	f1c1 0101 	rsb	r1, r1, #1
 80109b8:	910c      	str	r1, [sp, #48]	; 0x30
 80109ba:	a92d      	add	r1, sp, #180	; 0xb4
 80109bc:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 80109c0:	9123      	str	r1, [sp, #140]	; 0x8c
 80109c2:	2100      	movs	r1, #0
 80109c4:	9109      	str	r1, [sp, #36]	; 0x24
 80109c6:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 80109ca:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 80109ce:	ee75 5aa5 	vadd.f32	s11, s11, s11
 80109d2:	ee73 7aa3 	vadd.f32	s15, s7, s7
 80109d6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80109da:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80109de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80109e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80109e6:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 80109ea:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 80109ee:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 80109f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80109f8:	3301      	adds	r3, #1
 80109fa:	9309      	str	r3, [sp, #36]	; 0x24
 80109fc:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010a00:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 8010a04:	18e0      	adds	r0, r4, r3
 8010a06:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010a0a:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8010a0e:	f841 0b04 	str.w	r0, [r1], #4
 8010a12:	f20d 2069 	addw	r0, sp, #617	; 0x269
 8010a16:	4298      	cmp	r0, r3
 8010a18:	f102 020c 	add.w	r2, r2, #12
 8010a1c:	d1f2      	bne.n	8010a04 <kalman_3gyro.constprop.0+0xf64>
 8010a1e:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010a22:	ed93 7a00 	vldr	s14, [r3]
 8010a26:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 8010a2a:	edd3 7a00 	vldr	s15, [r3]
 8010a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a36:	bf84      	itt	hi
 8010a38:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8010a3c:	f8a9 3000 	strhhi.w	r3, [r9]
 8010a40:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8010a44:	ed93 7a00 	vldr	s14, [r3]
 8010a48:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 8010a4c:	edd3 7a00 	vldr	s15, [r3]
 8010a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	bf84      	itt	hi
 8010a5a:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8010a5e:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 8010a62:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 8010a66:	ed93 7a00 	vldr	s14, [r3]
 8010a6a:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8010a6e:	edd3 7a00 	vldr	s15, [r3]
 8010a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7a:	bf84      	itt	hi
 8010a7c:	f240 5306 	movwhi	r3, #1286	; 0x506
 8010a80:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 8010a84:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 8010a88:	ed93 7a00 	vldr	s14, [r3]
 8010a8c:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8010a90:	edd3 7a00 	vldr	s15, [r3]
 8010a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9c:	bf84      	itt	hi
 8010a9e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8010aa2:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 8010aa6:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 8010aaa:	ed93 7a00 	vldr	s14, [r3]
 8010aae:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 8010ab2:	edd3 7a00 	vldr	s15, [r3]
 8010ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	bf84      	itt	hi
 8010ac0:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010ac4:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 8010ac8:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 8010acc:	ed93 7a00 	vldr	s14, [r3]
 8010ad0:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8010ad4:	edd3 7a00 	vldr	s15, [r3]
 8010ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	bf84      	itt	hi
 8010ae2:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8010ae6:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 8010aea:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 8010aee:	ed93 7a00 	vldr	s14, [r3]
 8010af2:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 8010af6:	edd3 7a00 	vldr	s15, [r3]
 8010afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	bf84      	itt	hi
 8010b04:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8010b08:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 8010b0c:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 8010b10:	ed93 7a00 	vldr	s14, [r3]
 8010b14:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8010b18:	edd3 7a00 	vldr	s15, [r3]
 8010b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b24:	bf84      	itt	hi
 8010b26:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8010b2a:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 8010b2e:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 8010b32:	ed93 7a00 	vldr	s14, [r3]
 8010b36:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 8010b3a:	edd3 7a00 	vldr	s15, [r3]
 8010b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	bf84      	itt	hi
 8010b48:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8010b4c:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 8010b50:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 8010b54:	ed93 7a00 	vldr	s14, [r3]
 8010b58:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 8010b5c:	edd3 7a00 	vldr	s15, [r3]
 8010b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b68:	bf84      	itt	hi
 8010b6a:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8010b6e:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 8010b72:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 8010b76:	ed93 7a00 	vldr	s14, [r3]
 8010b7a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 8010b7e:	edd3 7a00 	vldr	s15, [r3]
 8010b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	bf84      	itt	hi
 8010b8c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8010b90:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 8010b94:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 8010b98:	ed93 7a00 	vldr	s14, [r3]
 8010b9c:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8010ba0:	edd3 7a00 	vldr	s15, [r3]
 8010ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bac:	bf84      	itt	hi
 8010bae:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8010bb2:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 8010bb6:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 8010bba:	ed93 7a00 	vldr	s14, [r3]
 8010bbe:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 8010bc2:	edd3 7a00 	vldr	s15, [r3]
 8010bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	bf84      	itt	hi
 8010bd0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8010bd4:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 8010bd8:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 8010bdc:	ed93 7a00 	vldr	s14, [r3]
 8010be0:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8010be4:	edd3 7a00 	vldr	s15, [r3]
 8010be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf0:	bf84      	itt	hi
 8010bf2:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8010bf6:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 8010bfa:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 8010bfe:	ed93 7a00 	vldr	s14, [r3]
 8010c02:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 8010c06:	edd3 7a00 	vldr	s15, [r3]
 8010c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c12:	bf84      	itt	hi
 8010c14:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8010c18:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 8010c1c:	221e      	movs	r2, #30
 8010c1e:	2101      	movs	r1, #1
 8010c20:	4650      	mov	r0, sl
 8010c22:	f009 fcb9 	bl	801a598 <memset>
 8010c26:	2304      	movs	r3, #4
 8010c28:	9307      	str	r3, [sp, #28]
 8010c2a:	2302      	movs	r3, #2
 8010c2c:	9305      	str	r3, [sp, #20]
 8010c2e:	9b05      	ldr	r3, [sp, #20]
 8010c30:	9306      	str	r3, [sp, #24]
 8010c32:	1c5f      	adds	r7, r3, #1
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	9305      	str	r3, [sp, #20]
 8010c38:	f04f 0b01 	mov.w	fp, #1
 8010c3c:	9b05      	ldr	r3, [sp, #20]
 8010c3e:	f8cd b004 	str.w	fp, [sp, #4]
 8010c42:	445b      	add	r3, fp
 8010c44:	2b1f      	cmp	r3, #31
 8010c46:	bfa8      	it	ge
 8010c48:	231f      	movge	r3, #31
 8010c4a:	465a      	mov	r2, fp
 8010c4c:	eba3 0802 	sub.w	r8, r3, r2
 8010c50:	f1b8 0f00 	cmp.w	r8, #0
 8010c54:	469b      	mov	fp, r3
 8010c56:	f107 35ff 	add.w	r5, r7, #4294967295
 8010c5a:	dd44      	ble.n	8010ce6 <kalman_3gyro.constprop.0+0x1246>
 8010c5c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010c60:	9302      	str	r3, [sp, #8]
 8010c62:	f1ab 0302 	sub.w	r3, fp, #2
 8010c66:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8010c6a:	4616      	mov	r6, r2
 8010c6c:	2400      	movs	r4, #0
 8010c6e:	e00f      	b.n	8010c90 <kalman_3gyro.constprop.0+0x11f0>
 8010c70:	00000000 	.word	0x00000000
 8010c74:	20002004 	.word	0x20002004
 8010c78:	20002014 	.word	0x20002014
 8010c7c:	3f333333 	.word	0x3f333333
 8010c80:	3f4ccccd 	.word	0x3f4ccccd
 8010c84:	3f666666 	.word	0x3f666666
 8010c88:	3ecccccc 	.word	0x3ecccccc
 8010c8c:	3dcccccd 	.word	0x3dcccccd
 8010c90:	1e71      	subs	r1, r6, #1
 8010c92:	f919 0005 	ldrsb.w	r0, [r9, r5]
 8010c96:	f919 2001 	ldrsb.w	r2, [r9, r1]
 8010c9a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010c9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ca2:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8010ca6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010caa:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8010cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb6:	f105 0c02 	add.w	ip, r5, #2
 8010cba:	f105 0801 	add.w	r8, r5, #1
 8010cbe:	f240 81d3 	bls.w	8011068 <kalman_3gyro.constprop.0+0x15c8>
 8010cc2:	45e3      	cmp	fp, ip
 8010cc4:	f80a 0004 	strb.w	r0, [sl, r4]
 8010cc8:	f000 81bf 	beq.w	801104a <kalman_3gyro.constprop.0+0x15aa>
 8010ccc:	4645      	mov	r5, r8
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	3401      	adds	r4, #1
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	dcdc      	bgt.n	8010c90 <kalman_3gyro.constprop.0+0x11f0>
 8010cd6:	4698      	mov	r8, r3
 8010cd8:	9b01      	ldr	r3, [sp, #4]
 8010cda:	1e58      	subs	r0, r3, #1
 8010cdc:	4448      	add	r0, r9
 8010cde:	4642      	mov	r2, r8
 8010ce0:	4651      	mov	r1, sl
 8010ce2:	f009 fc4b 	bl	801a57c <memcpy>
 8010ce6:	9b06      	ldr	r3, [sp, #24]
 8010ce8:	eb0b 0703 	add.w	r7, fp, r3
 8010cec:	2f1e      	cmp	r7, #30
 8010cee:	dda5      	ble.n	8010c3c <kalman_3gyro.constprop.0+0x119c>
 8010cf0:	9b07      	ldr	r3, [sp, #28]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	9307      	str	r3, [sp, #28]
 8010cf6:	d19a      	bne.n	8010c2e <kalman_3gyro.constprop.0+0x118e>
 8010cf8:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8010cfc:	f999 300f 	ldrsb.w	r3, [r9, #15]
 8010d00:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010d04:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010d08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010d0c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010d10:	ed13 7a01 	vldr	s14, [r3, #-4]
 8010d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010d20:	460a      	mov	r2, r1
 8010d22:	bf4c      	ite	mi
 8010d24:	2201      	movmi	r2, #1
 8010d26:	2200      	movpl	r2, #0
 8010d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2c:	bf4c      	ite	mi
 8010d2e:	2301      	movmi	r3, #1
 8010d30:	2300      	movpl	r3, #0
 8010d32:	429a      	cmp	r2, r3
 8010d34:	f000 81b4 	beq.w	80110a0 <kalman_3gyro.constprop.0+0x1600>
 8010d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d46:	ece3 7a01 	vstmia	r3!, {s15}
 8010d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d4e:	3304      	adds	r3, #4
 8010d50:	930a      	str	r3, [sp, #40]	; 0x28
 8010d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	f47f ae4c 	bne.w	80109f2 <kalman_3gyro.constprop.0+0xf52>
 8010d5a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8010d5e:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 8010d62:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8010d66:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 8010c7c <kalman_3gyro.constprop.0+0x11dc>
 8010d6a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8010d6e:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8010c80 <kalman_3gyro.constprop.0+0x11e0>
 8010d72:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 8010d76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010d7a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010d7e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010d82:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 8010d86:	eee6 7a06 	vfma.f32	s15, s12, s12
 8010d8a:	ee6d 5a26 	vmul.f32	s11, s26, s13
 8010d8e:	eeb0 6a67 	vmov.f32	s12, s15
 8010d92:	edcd 7a03 	vstr	s15, [sp, #12]
 8010d96:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 8010d9a:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8010d9e:	eeb1 4ac6 	vsqrt.f32	s8, s12
 8010da2:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8010da6:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 8010daa:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8010dae:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010db2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010db6:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8010dba:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8010dbe:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 8010dc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010dc6:	eeab 5aa7 	vfma.f32	s10, s23, s15
 8010dca:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010dce:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010dd2:	ed8d 5a02 	vstr	s10, [sp, #8]
 8010dd6:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 8010dda:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f040 81a4 	bne.w	801112c <kalman_3gyro.constprop.0+0x168c>
 8010de4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8010de8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8010dec:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8010df0:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8010df4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8010df8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8010dfc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010e00:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8010e04:	f8c8 3020 	str.w	r3, [r8, #32]
 8010e08:	ed88 7a07 	vstr	s14, [r8, #28]
 8010e0c:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8010e10:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 8010e14:	ed93 7a00 	vldr	s14, [r3]
 8010e18:	ed92 8a00 	vldr	s16, [r2]
 8010e1c:	eddb ea02 	vldr	s29, [fp, #8]
 8010e20:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 8010e24:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 8010e28:	ed92 5a00 	vldr	s10, [r2]
 8010e2c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8010e30:	ed93 7a00 	vldr	s14, [r3]
 8010e34:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010e38:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 8010e3c:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 8010e40:	ed92 5a00 	vldr	s10, [r2]
 8010e44:	ed93 7a00 	vldr	s14, [r3]
 8010e48:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010e4c:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 8010e50:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 8010e54:	ed92 5a00 	vldr	s10, [r2]
 8010e58:	ed93 7a00 	vldr	s14, [r3]
 8010e5c:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010e60:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 8010e64:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 8010e68:	ed92 5a00 	vldr	s10, [r2]
 8010e6c:	ed93 7a00 	vldr	s14, [r3]
 8010e70:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8010e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e78:	eea5 8a07 	vfma.f32	s16, s10, s14
 8010e7c:	f340 8232 	ble.w	80112e4 <kalman_3gyro.constprop.0+0x1844>
 8010e80:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 8010e84:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8c:	f100 815e 	bmi.w	801114c <kalman_3gyro.constprop.0+0x16ac>
 8010e90:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 8010e94:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 8010e98:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea0:	f142 84bd 	bpl.w	801381e <kalman_3gyro.constprop.0+0x3d7e>
 8010ea4:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 8010ea8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	f342 850a 	ble.w	80138c8 <kalman_3gyro.constprop.0+0x3e28>
 8010eb4:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 8010eb8:	eef4 2ac8 	vcmpe.f32	s5, s16
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	f342 86c5 	ble.w	8013c4e <kalman_3gyro.constprop.0+0x41ae>
 8010ec4:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 8010ec8:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010ecc:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010ed0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ed4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ed8:	ee32 7ac7 	vsub.f32	s14, s5, s14
 8010edc:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010ee0:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ee4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ef0:	f202 86c5 	bhi.w	8013c7e <kalman_3gyro.constprop.0+0x41de>
 8010ef4:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010ef8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f00:	f342 86c5 	ble.w	8013c8e <kalman_3gyro.constprop.0+0x41ee>
 8010f04:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 8010f08:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8010f0c:	ee38 3a64 	vsub.f32	s6, s16, s9
 8010f10:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f14:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010f18:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f1c:	ee84 ea87 	vdiv.f32	s28, s9, s14
 8010f20:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f24:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 8010f28:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f30:	f202 86c5 	bhi.w	8013cbe <kalman_3gyro.constprop.0+0x421e>
 8010f34:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 8010f38:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f40:	f343 8371 	ble.w	8014626 <kalman_3gyro.constprop.0+0x4b86>
 8010f44:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 8010f48:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 8010f4c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f50:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f54:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f58:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f5c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f60:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f64:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 8010f68:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	f202 86c5 	bhi.w	8013cfe <kalman_3gyro.constprop.0+0x425e>
 8010f74:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 8010f78:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f80:	f343 8359 	ble.w	8014636 <kalman_3gyro.constprop.0+0x4b96>
 8010f84:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 8010f88:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 8010f8c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f90:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f94:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f98:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f9c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010fa0:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010fa4:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 8010fa8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb0:	f2c2 86c5 	blt.w	8013d3e <kalman_3gyro.constprop.0+0x429e>
 8010fb4:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 8010fb8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc0:	f143 832d 	bpl.w	801461e <kalman_3gyro.constprop.0+0x4b7e>
 8010fc4:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 8010fc8:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 8010fcc:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fd0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fd4:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010fd8:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010fdc:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010fe0:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010fe4:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010fe8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff0:	f2c2 86c5 	blt.w	8013d7e <kalman_3gyro.constprop.0+0x42de>
 8010ff4:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010ff8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	f142 86c5 	bpl.w	8013d8e <kalman_3gyro.constprop.0+0x42ee>
 8011004:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8011008:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 801100c:	ee78 3a64 	vsub.f32	s7, s16, s9
 8011010:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011014:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011018:	ee25 5a23 	vmul.f32	s10, s10, s7
 801101c:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8011020:	ee3e ea04 	vadd.f32	s28, s28, s8
 8011024:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8011028:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801102c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8011030:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8011034:	e15a      	b.n	80112ec <kalman_3gyro.constprop.0+0x184c>
 8011036:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8010c84 <kalman_3gyro.constprop.0+0x11e4>
 801103a:	ed5f aaed 	vldr	s21, [pc, #-948]	; 8010c88 <kalman_3gyro.constprop.0+0x11e8>
 801103e:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 8010c8c <kalman_3gyro.constprop.0+0x11ec>
 8011042:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8011046:	f7fe bedd 	b.w	800fe04 <kalman_3gyro.constprop.0+0x364>
 801104a:	1c60      	adds	r0, r4, #1
 801104c:	42be      	cmp	r6, r7
 801104e:	eba7 0206 	sub.w	r2, r7, r6
 8011052:	4449      	add	r1, r9
 8011054:	4450      	add	r0, sl
 8011056:	f6bf ae39 	bge.w	8010ccc <kalman_3gyro.constprop.0+0x122c>
 801105a:	443c      	add	r4, r7
 801105c:	1ba4      	subs	r4, r4, r6
 801105e:	f009 fa8d 	bl	801a57c <memcpy>
 8011062:	463e      	mov	r6, r7
 8011064:	4645      	mov	r5, r8
 8011066:	e632      	b.n	8010cce <kalman_3gyro.constprop.0+0x122e>
 8011068:	3601      	adds	r6, #1
 801106a:	42be      	cmp	r6, r7
 801106c:	f80a 2004 	strb.w	r2, [sl, r4]
 8011070:	f47f ae2d 	bne.w	8010cce <kalman_3gyro.constprop.0+0x122e>
 8011074:	9b02      	ldr	r3, [sp, #8]
 8011076:	f105 0801 	add.w	r8, r5, #1
 801107a:	1c60      	adds	r0, r4, #1
 801107c:	45c3      	cmp	fp, r8
 801107e:	eba3 0205 	sub.w	r2, r3, r5
 8011082:	eb09 0105 	add.w	r1, r9, r5
 8011086:	4450      	add	r0, sl
 8011088:	f77f ae21 	ble.w	8010cce <kalman_3gyro.constprop.0+0x122e>
 801108c:	f009 fa76 	bl	801a57c <memcpy>
 8011090:	9b02      	ldr	r3, [sp, #8]
 8011092:	441c      	add	r4, r3
 8011094:	9b04      	ldr	r3, [sp, #16]
 8011096:	1b5a      	subs	r2, r3, r5
 8011098:	1b64      	subs	r4, r4, r5
 801109a:	eb02 0508 	add.w	r5, r2, r8
 801109e:	e616      	b.n	8010cce <kalman_3gyro.constprop.0+0x122e>
 80110a0:	eef4 7a48 	vcmp.f32	s15, s16
 80110a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a8:	f43f ae46 	beq.w	8010d38 <kalman_3gyro.constprop.0+0x1298>
 80110ac:	eef4 7a4b 	vcmp.f32	s15, s22
 80110b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b4:	f43f ae40 	beq.w	8010d38 <kalman_3gyro.constprop.0+0x1298>
 80110b8:	eeb4 7a48 	vcmp.f32	s14, s16
 80110bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c0:	f43f ae3a 	beq.w	8010d38 <kalman_3gyro.constprop.0+0x1298>
 80110c4:	eeb4 7a4b 	vcmp.f32	s14, s22
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	f43f ae34 	beq.w	8010d38 <kalman_3gyro.constprop.0+0x1298>
 80110d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80110d8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80110dc:	e632      	b.n	8010d44 <kalman_3gyro.constprop.0+0x12a4>
 80110de:	2304      	movs	r3, #4
 80110e0:	9301      	str	r3, [sp, #4]
 80110e2:	2200      	movs	r2, #0
 80110e4:	461c      	mov	r4, r3
 80110e6:	2307      	movs	r3, #7
 80110e8:	4694      	mov	ip, r2
 80110ea:	2106      	movs	r1, #6
 80110ec:	9302      	str	r3, [sp, #8]
 80110ee:	2603      	movs	r6, #3
 80110f0:	f04f 0a01 	mov.w	sl, #1
 80110f4:	f7ff ba5c 	b.w	80105b0 <kalman_3gyro.constprop.0+0xb10>
 80110f8:	9a08      	ldr	r2, [sp, #32]
 80110fa:	eddf 7a62 	vldr	s15, [pc, #392]	; 8011284 <kalman_3gyro.constprop.0+0x17e4>
 80110fe:	eddf 5a62 	vldr	s11, [pc, #392]	; 8011288 <kalman_3gyro.constprop.0+0x17e8>
 8011102:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801128c <kalman_3gyro.constprop.0+0x17ec>
 8011106:	4b62      	ldr	r3, [pc, #392]	; (8011290 <kalman_3gyro.constprop.0+0x17f0>)
 8011108:	edc2 7a00 	vstr	s15, [r2]
 801110c:	eeb0 4a65 	vmov.f32	s8, s11
 8011110:	eeb0 3a67 	vmov.f32	s6, s15
 8011114:	eef0 4a45 	vmov.f32	s9, s10
 8011118:	6053      	str	r3, [r2, #4]
 801111a:	6093      	str	r3, [r2, #8]
 801111c:	f7fe bd3e 	b.w	800fb9c <kalman_3gyro.constprop.0+0xfc>
 8011120:	2308      	movs	r3, #8
 8011122:	2005      	movs	r0, #5
 8011124:	f04f 0802 	mov.w	r8, #2
 8011128:	f7ff ba5c 	b.w	80105e4 <kalman_3gyro.constprop.0+0xb44>
 801112c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8011130:	2300      	movs	r3, #0
 8011132:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 8011136:	ed88 7a07 	vstr	s14, [r8, #28]
 801113a:	ed88 7a08 	vstr	s14, [r8, #32]
 801113e:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 8011142:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 8011146:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 801114a:	e65f      	b.n	8010e0c <kalman_3gyro.constprop.0+0x136c>
 801114c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 8011150:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8011154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011158:	f342 83b2 	ble.w	80138c0 <kalman_3gyro.constprop.0+0x3e20>
 801115c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011164:	f2c2 86e9 	blt.w	8013f3a <kalman_3gyro.constprop.0+0x449a>
 8011168:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 801116c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011174:	f342 8712 	ble.w	8013f9c <kalman_3gyro.constprop.0+0x44fc>
 8011178:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 801117c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 8011180:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011184:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011188:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801118c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011190:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011194:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011198:	f002 bed8 	b.w	8013f4c <kalman_3gyro.constprop.0+0x44ac>
 801119c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80111a0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a8:	f342 84bd 	ble.w	8013b26 <kalman_3gyro.constprop.0+0x4086>
 80111ac:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 80111b0:	f7ff b993 	b.w	80104da <kalman_3gyro.constprop.0+0xa3a>
 80111b4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80111b8:	eeb4 bac7 	vcmpe.f32	s22, s14
 80111bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c0:	f342 849f 	ble.w	8013b02 <kalman_3gyro.constprop.0+0x4062>
 80111c4:	ed9f ba33 	vldr	s22, [pc, #204]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 80111c8:	f7ff b964 	b.w	8010494 <kalman_3gyro.constprop.0+0x9f4>
 80111cc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80111d0:	eef4 dac7 	vcmpe.f32	s27, s14
 80111d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d8:	f342 84b7 	ble.w	8013b4a <kalman_3gyro.constprop.0+0x40aa>
 80111dc:	eddf da2d 	vldr	s27, [pc, #180]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 80111e0:	f7ff b935 	b.w	801044e <kalman_3gyro.constprop.0+0x9ae>
 80111e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80111e8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f0:	f342 8475 	ble.w	8013ade <kalman_3gyro.constprop.0+0x403e>
 80111f4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 80111f8:	f7ff b8c3 	b.w	8010382 <kalman_3gyro.constprop.0+0x8e2>
 80111fc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011200:	eeb4 bac7 	vcmpe.f32	s22, s14
 8011204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011208:	f342 83a0 	ble.w	801394c <kalman_3gyro.constprop.0+0x3eac>
 801120c:	ed9f ba21 	vldr	s22, [pc, #132]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 8011210:	f7ff b894 	b.w	801033c <kalman_3gyro.constprop.0+0x89c>
 8011214:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011218:	eef4 dac7 	vcmpe.f32	s27, s14
 801121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011220:	f342 8382 	ble.w	8013928 <kalman_3gyro.constprop.0+0x3e88>
 8011224:	eddf da1b 	vldr	s27, [pc, #108]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 8011228:	f7ff b865 	b.w	80102f6 <kalman_3gyro.constprop.0+0x856>
 801122c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011230:	eef4 dac7 	vcmpe.f32	s27, s14
 8011234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011238:	f342 8364 	ble.w	8013904 <kalman_3gyro.constprop.0+0x3e64>
 801123c:	eddf da15 	vldr	s27, [pc, #84]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 8011240:	f7fe bff3 	b.w	801022a <kalman_3gyro.constprop.0+0x78a>
 8011244:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011248:	eeb4 eac7 	vcmpe.f32	s28, s14
 801124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011250:	f342 8346 	ble.w	80138e0 <kalman_3gyro.constprop.0+0x3e40>
 8011254:	ed9f ea0f 	vldr	s28, [pc, #60]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 8011258:	f7fe bfc4 	b.w	80101e4 <kalman_3gyro.constprop.0+0x744>
 801125c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011260:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011268:	f342 839e 	ble.w	80139a8 <kalman_3gyro.constprop.0+0x3f08>
 801126c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8011294 <kalman_3gyro.constprop.0+0x17f4>
 8011270:	f7fe bf95 	b.w	801019e <kalman_3gyro.constprop.0+0x6fe>
 8011274:	eef1 3a63 	vneg.f32	s7, s7
 8011278:	f7ff bb42 	b.w	8010900 <kalman_3gyro.constprop.0+0xe60>
 801127c:	eef1 3a63 	vneg.f32	s7, s7
 8011280:	f7ff bb1b 	b.w	80108ba <kalman_3gyro.constprop.0+0xe1a>
 8011284:	00000000 	.word	0x00000000
 8011288:	3fb33333 	.word	0x3fb33333
 801128c:	bfb33333 	.word	0xbfb33333
 8011290:	3f333333 	.word	0x3f333333
 8011294:	80000000 	.word	0x80000000
 8011298:	3fb77778 	.word	0x3fb77778
 801129c:	3f99999a 	.word	0x3f99999a
 80112a0:	3f4ccccd 	.word	0x3f4ccccd
 80112a4:	42d40000 	.word	0x42d40000
 80112a8:	46979000 	.word	0x46979000
 80112ac:	4415c000 	.word	0x4415c000
 80112b0:	3ba3d70a 	.word	0x3ba3d70a
 80112b4:	3b449ba6 	.word	0x3b449ba6
 80112b8:	3c75c28f 	.word	0x3c75c28f
 80112bc:	3c23d70a 	.word	0x3c23d70a
 80112c0:	3d4cccc0 	.word	0x3d4cccc0
 80112c4:	43480000 	.word	0x43480000
 80112c8:	3d4ccccd 	.word	0x3d4ccccd
 80112cc:	3cf5c28f 	.word	0x3cf5c28f
 80112d0:	3eb33334 	.word	0x3eb33334
 80112d4:	3f933333 	.word	0x3f933333
 80112d8:	4247ffff 	.word	0x4247ffff
 80112dc:	3dcccccd 	.word	0x3dcccccd
 80112e0:	3e4ccccd 	.word	0x3e4ccccd
 80112e4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 80112e8:	eeb0 ba4e 	vmov.f32	s22, s28
 80112ec:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 80112f0:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 80112f4:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 80112dc <kalman_3gyro.constprop.0+0x183c>
 80112f8:	ee79 da6d 	vsub.f32	s27, s18, s27
 80112fc:	ee3c 5a47 	vsub.f32	s10, s24, s14
 8011300:	eef0 daed 	vabs.f32	s27, s27
 8011304:	eeb0 5ac5 	vabs.f32	s10, s10
 8011308:	ee35 5a2d 	vadd.f32	s10, s10, s27
 801130c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011314:	f340 821c 	ble.w	8011750 <kalman_3gyro.constprop.0+0x1cb0>
 8011318:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 8011298 <kalman_3gyro.constprop.0+0x17f8>
 801131c:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011324:	f302 828b 	bgt.w	801383e <kalman_3gyro.constprop.0+0x3d9e>
 8011328:	ee35 5a64 	vsub.f32	s10, s10, s9
 801132c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8011330:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011334:	eee5 4a04 	vfma.f32	s9, s10, s8
 8011338:	eeb0 5a64 	vmov.f32	s10, s9
 801133c:	eeb4 5aea 	vcmpe.f32	s10, s21
 8011340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011344:	f89b 3000 	ldrb.w	r3, [fp]
 8011348:	bfb8      	it	lt
 801134a:	eeb0 5a6a 	vmovlt.f32	s10, s21
 801134e:	ed8d 5a01 	vstr	s10, [sp, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	f000 81f9 	beq.w	801174a <kalman_3gyro.constprop.0+0x1caa>
 8011358:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 81de 	beq.w	801171e <kalman_3gyro.constprop.0+0x1c7e>
 8011362:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8011366:	2300      	movs	r3, #0
 8011368:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 801136c:	eeb0 6a61 	vmov.f32	s12, s3
 8011370:	eea7 6a47 	vfms.f32	s12, s14, s14
 8011374:	9908      	ldr	r1, [sp, #32]
 8011376:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 801137a:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 801137e:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 8011382:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 8011386:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801138a:	eef1 0ac6 	vsqrt.f32	s1, s12
 801138e:	2200      	movs	r2, #0
 8011390:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 8011394:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 8011398:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 801139c:	9233      	str	r2, [sp, #204]	; 0xcc
 801139e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 80113a2:	ee23 4a85 	vmul.f32	s8, s7, s10
 80113a6:	ee36 2a06 	vadd.f32	s4, s12, s12
 80113aa:	ee25 6a05 	vmul.f32	s12, s10, s10
 80113ae:	ee22 1aa2 	vmul.f32	s2, s5, s5
 80113b2:	ee36 6a06 	vadd.f32	s12, s12, s12
 80113b6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80113ba:	ee63 4aa6 	vmul.f32	s9, s7, s13
 80113be:	ee34 4a04 	vadd.f32	s8, s8, s8
 80113c2:	eeb0 3a42 	vmov.f32	s6, s4
 80113c6:	ee22 0aa6 	vmul.f32	s0, s5, s13
 80113ca:	eea1 3a25 	vfma.f32	s6, s2, s11
 80113ce:	eef0 aa46 	vmov.f32	s21, s12
 80113d2:	ee62 3aa3 	vmul.f32	s7, s5, s7
 80113d6:	eee1 aa25 	vfma.f32	s21, s2, s11
 80113da:	ee74 4aa4 	vadd.f32	s9, s9, s9
 80113de:	ee65 6a26 	vmul.f32	s13, s10, s13
 80113e2:	ee22 5a85 	vmul.f32	s10, s5, s10
 80113e6:	eef0 2a44 	vmov.f32	s5, s8
 80113ea:	eee0 2a25 	vfma.f32	s5, s0, s11
 80113ee:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80113f2:	eeb0 fa64 	vmov.f32	s30, s9
 80113f6:	eea0 4a65 	vfms.f32	s8, s0, s11
 80113fa:	ee71 fac3 	vsub.f32	s31, s3, s6
 80113fe:	ee95 fa25 	vfnms.f32	s30, s10, s11
 8011402:	eeb0 1a6a 	vmov.f32	s2, s21
 8011406:	eef0 aa66 	vmov.f32	s21, s13
 801140a:	eee3 aaa5 	vfma.f32	s21, s7, s11
 801140e:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8011412:	ee2f 0a87 	vmul.f32	s0, s31, s14
 8011416:	ee32 6a06 	vadd.f32	s12, s4, s12
 801141a:	ee22 2a87 	vmul.f32	s4, s5, s14
 801141e:	eea0 0a84 	vfma.f32	s0, s1, s8
 8011422:	eea0 2a81 	vfma.f32	s4, s1, s2
 8011426:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801142a:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 801142e:	eef0 3a64 	vmov.f32	s7, s9
 8011432:	eee5 3a65 	vfms.f32	s7, s10, s11
 8011436:	eee5 4a25 	vfma.f32	s9, s10, s11
 801143a:	ee33 3a61 	vsub.f32	s6, s6, s3
 801143e:	edd1 5a02 	vldr	s11, [r1, #8]
 8011442:	ed91 5a05 	vldr	s10, [r1, #20]
 8011446:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 801144a:	ee31 6ac6 	vsub.f32	s12, s3, s12
 801144e:	eea0 7aaa 	vfma.f32	s14, s1, s21
 8011452:	edd1 1a01 	vldr	s3, [r1, #4]
 8011456:	edd1 fa00 	vldr	s31, [r1]
 801145a:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 801145e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011462:	ee31 2ac2 	vsub.f32	s4, s3, s4
 8011466:	edd1 5a03 	vldr	s11, [r1, #12]
 801146a:	edd1 1a04 	vldr	s3, [r1, #16]
 801146e:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 801129c <kalman_3gyro.constprop.0+0x17fc>
 8011472:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 8011476:	ee33 3a05 	vadd.f32	s6, s6, s10
 801147a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801147e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011482:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 8011486:	eef4 7ac4 	vcmpe.f32	s15, s8
 801148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148e:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 8011492:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 8011496:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 801149a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 801149e:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 80114a2:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 80114a6:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 80114aa:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 80114ae:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 80114b2:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 80114b6:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 80114ba:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 80114be:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 80114c2:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 80114c6:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 80114ca:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 80114ce:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 80114d2:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 80114d6:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 80114da:	d506      	bpl.n	80114ea <kalman_3gyro.constprop.0+0x1a4a>
 80114dc:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 80112a0 <kalman_3gyro.constprop.0+0x1800>
 80114e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e8:	dc01      	bgt.n	80114ee <kalman_3gyro.constprop.0+0x1a4e>
 80114ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80114ee:	ee7a 7a67 	vsub.f32	s15, s20, s15
 80114f2:	eef0 7ae7 	vabs.f32	s15, s15
 80114f6:	ee77 7aab 	vadd.f32	s15, s15, s23
 80114fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	f340 8141 	ble.w	8011788 <kalman_3gyro.constprop.0+0x1ce8>
 8011506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011512:	f142 8198 	bpl.w	8013846 <kalman_3gyro.constprop.0+0x3da6>
 8011516:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80112b0 <kalman_3gyro.constprop.0+0x1810>
 801151a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801151e:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 80112bc <kalman_3gyro.constprop.0+0x181c>
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	eef4 7ac7 	vcmpe.f32	s15, s14
 801152a:	f102 8221 	bmi.w	8013970 <kalman_3gyro.constprop.0+0x3ed0>
 801152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011532:	f142 8221 	bpl.w	8013978 <kalman_3gyro.constprop.0+0x3ed8>
 8011536:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 80112b8 <kalman_3gyro.constprop.0+0x1818>
 801153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011542:	f282 84a4 	bge.w	8013e8e <kalman_3gyro.constprop.0+0x43ee>
 8011546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801154a:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 80112cc <kalman_3gyro.constprop.0+0x182c>
 801154e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011556:	f2c2 84b0 	blt.w	8013eba <kalman_3gyro.constprop.0+0x441a>
 801155a:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 80112c8 <kalman_3gyro.constprop.0+0x1828>
 801155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011566:	f142 84b0 	bpl.w	8013eca <kalman_3gyro.constprop.0+0x442a>
 801156a:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 80112cc <kalman_3gyro.constprop.0+0x182c>
 801156e:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 80112d8 <kalman_3gyro.constprop.0+0x1838>
 8011572:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011576:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801157a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801157e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011582:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011586:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 80112dc <kalman_3gyro.constprop.0+0x183c>
 801158a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011592:	f2c2 84b0 	blt.w	8013ef6 <kalman_3gyro.constprop.0+0x4456>
 8011596:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 80112e0 <kalman_3gyro.constprop.0+0x1840>
 801159a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a2:	f142 84b0 	bpl.w	8013f06 <kalman_3gyro.constprop.0+0x4466>
 80115a6:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 80112dc <kalman_3gyro.constprop.0+0x183c>
 80115aa:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 80112a4 <kalman_3gyro.constprop.0+0x1804>
 80115ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80115b2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80115b6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80115ba:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80115be:	eea6 7a86 	vfma.f32	s14, s13, s12
 80115c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80115c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80115ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ce:	db0d      	blt.n	80115ec <kalman_3gyro.constprop.0+0x1b4c>
 80115d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80115d4:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 80112a8 <kalman_3gyro.constprop.0+0x1808>
 80115d8:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 80112ac <kalman_3gyro.constprop.0+0x180c>
 80115dc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80115e0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80115e4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80115e8:	eea6 7a86 	vfma.f32	s14, s13, s12
 80115ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115f0:	ee77 6a26 	vadd.f32	s13, s14, s13
 80115f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80115f8:	eec6 4a26 	vdiv.f32	s9, s12, s13
 80115fc:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 80112b8 <kalman_3gyro.constprop.0+0x1818>
 8011600:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 80112b0 <kalman_3gyro.constprop.0+0x1810>
 8011604:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 80112bc <kalman_3gyro.constprop.0+0x181c>
 8011608:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 80112b4 <kalman_3gyro.constprop.0+0x1814>
 801160c:	eef4 4ac6 	vcmpe.f32	s9, s12
 8011610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011614:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011618:	bfb8      	it	lt
 801161a:	eef0 4a46 	vmovlt.f32	s9, s12
 801161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011622:	ee24 4a84 	vmul.f32	s8, s9, s8
 8011626:	ee24 6aa6 	vmul.f32	s12, s9, s13
 801162a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801162e:	f142 841f 	bpl.w	8013e70 <kalman_3gyro.constprop.0+0x43d0>
 8011632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011636:	f2c2 841f 	blt.w	8013e78 <kalman_3gyro.constprop.0+0x43d8>
 801163a:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 80112b8 <kalman_3gyro.constprop.0+0x1818>
 801163e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011646:	f142 83ba 	bpl.w	8013dbe <kalman_3gyro.constprop.0+0x431e>
 801164a:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 80112bc <kalman_3gyro.constprop.0+0x181c>
 801164e:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 80112c0 <kalman_3gyro.constprop.0+0x1820>
 8011652:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 80112c4 <kalman_3gyro.constprop.0+0x1824>
 8011656:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801165a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801165e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011662:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011666:	eeb0 ca66 	vmov.f32	s24, s13
 801166a:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 80112cc <kalman_3gyro.constprop.0+0x182c>
 801166e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011676:	f2c2 83ba 	blt.w	8013dee <kalman_3gyro.constprop.0+0x434e>
 801167a:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 80112c8 <kalman_3gyro.constprop.0+0x1828>
 801167e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011686:	f142 83ba 	bpl.w	8013dfe <kalman_3gyro.constprop.0+0x435e>
 801168a:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 80112cc <kalman_3gyro.constprop.0+0x182c>
 801168e:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 80112d0 <kalman_3gyro.constprop.0+0x1830>
 8011692:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 80112d8 <kalman_3gyro.constprop.0+0x1838>
 8011696:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 80112d4 <kalman_3gyro.constprop.0+0x1834>
 801169a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801169e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80116a2:	eee3 6a83 	vfma.f32	s13, s7, s6
 80116a6:	eeb0 ca66 	vmov.f32	s24, s13
 80116aa:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 80112dc <kalman_3gyro.constprop.0+0x183c>
 80116ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80116b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b6:	f2c2 83ba 	blt.w	8013e2e <kalman_3gyro.constprop.0+0x438e>
 80116ba:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 80112e0 <kalman_3gyro.constprop.0+0x1840>
 80116be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80116c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c6:	f142 83ba 	bpl.w	8013e3e <kalman_3gyro.constprop.0+0x439e>
 80116ca:	eddf 3a23 	vldr	s7, [pc, #140]	; 8011758 <kalman_3gyro.constprop.0+0x1cb8>
 80116ce:	eddf 6a23 	vldr	s13, [pc, #140]	; 801175c <kalman_3gyro.constprop.0+0x1cbc>
 80116d2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80116d6:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 80116da:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80116de:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 80116e2:	eee3 6a83 	vfma.f32	s13, s7, s6
 80116e6:	eeb0 ca66 	vmov.f32	s24, s13
 80116ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80116ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80116f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f6:	f2c2 80b0 	blt.w	801385a <kalman_3gyro.constprop.0+0x3dba>
 80116fa:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80116fe:	ee37 3ae3 	vsub.f32	s6, s15, s7
 8011702:	eddf 3a17 	vldr	s7, [pc, #92]	; 8011760 <kalman_3gyro.constprop.0+0x1cc0>
 8011706:	eddf 6a17 	vldr	s13, [pc, #92]	; 8011764 <kalman_3gyro.constprop.0+0x1cc4>
 801170a:	ee63 3a23 	vmul.f32	s7, s6, s7
 801170e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8011712:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011716:	eeb0 ca66 	vmov.f32	s24, s13
 801171a:	f002 b89e 	b.w	801385a <kalman_3gyro.constprop.0+0x3dba>
 801171e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011722:	ed9b 6a05 	vldr	s12, [fp, #20]
 8011726:	ee75 5aa6 	vadd.f32	s11, s11, s13
 801172a:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 801172e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011732:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011736:	ee67 7a85 	vmul.f32	s15, s15, s10
 801173a:	ee66 6a26 	vmul.f32	s13, s12, s13
 801173e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011746:	f102 8246 	bmi.w	8013bd6 <kalman_3gyro.constprop.0+0x4136>
 801174a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 801174e:	e60b      	b.n	8011368 <kalman_3gyro.constprop.0+0x18c8>
 8011750:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011754:	e5f2      	b.n	801133c <kalman_3gyro.constprop.0+0x189c>
 8011756:	bf00      	nop
 8011758:	3dcccccd 	.word	0x3dcccccd
 801175c:	410c0000 	.word	0x410c0000
 8011760:	42c80000 	.word	0x42c80000
 8011764:	424a0000 	.word	0x424a0000
 8011768:	3c23d70a 	.word	0x3c23d70a
 801176c:	3b449ba6 	.word	0x3b449ba6
 8011770:	3fb33333 	.word	0x3fb33333
 8011774:	3ecccccd 	.word	0x3ecccccd
 8011778:	3f8f5c29 	.word	0x3f8f5c29
 801177c:	3f59999a 	.word	0x3f59999a
 8011780:	3e4ccccd 	.word	0x3e4ccccd
 8011784:	3f99999a 	.word	0x3f99999a
 8011788:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801178c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8011768 <kalman_3gyro.constprop.0+0x1cc8>
 8011790:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 801176c <kalman_3gyro.constprop.0+0x1ccc>
 8011794:	eeb0 7a4c 	vmov.f32	s14, s24
 8011798:	eef0 4a4c 	vmov.f32	s9, s24
 801179c:	eddd 6a01 	vldr	s13, [sp, #4]
 80117a0:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 80117a4:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 80117a8:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 80117ac:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 80117b0:	ee66 aa8b 	vmul.f32	s21, s13, s22
 80117b4:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80117b8:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 80117bc:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 80117c0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 80117c4:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 80117c8:	ee76 3aa6 	vadd.f32	s7, s13, s13
 80117cc:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 80117d0:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 80117d4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80117d8:	ee2a 3a83 	vmul.f32	s6, s21, s6
 80117dc:	ee62 2aaa 	vmul.f32	s5, s5, s21
 80117e0:	ee63 3a87 	vmul.f32	s7, s7, s14
 80117e4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80117e8:	ee6b aa2a 	vmul.f32	s21, s22, s21
 80117ec:	ee2e ea02 	vmul.f32	s28, s28, s4
 80117f0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 80117f4:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 80117f8:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 80117fc:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 8011800:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8011804:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 8011808:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 801180c:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 8011810:	2a00      	cmp	r2, #0
 8011812:	f001 8411 	beq.w	8013038 <kalman_3gyro.constprop.0+0x3598>
 8011816:	ee77 2a07 	vadd.f32	s5, s14, s14
 801181a:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 801181e:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8011822:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8011826:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 801182a:	ee24 4a24 	vmul.f32	s8, s8, s9
 801182e:	ee27 ea0e 	vmul.f32	s28, s14, s28
 8011832:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8011836:	ee29 7a87 	vmul.f32	s14, s19, s14
 801183a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801183e:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 8011842:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 8011846:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 801184a:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 801184e:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 8011852:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 8011856:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 801185a:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 801185e:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8011862:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8011866:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 801186a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 801186e:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8011872:	b159      	cbz	r1, 801188c <kalman_3gyro.constprop.0+0x1dec>
 8011874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011878:	eef4 7ac7 	vcmpe.f32	s15, s14
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	dd04      	ble.n	801188c <kalman_3gyro.constprop.0+0x1dec>
 8011882:	2000      	movs	r0, #0
 8011884:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 8011888:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 801188c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8011890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011894:	dd09      	ble.n	80118aa <kalman_3gyro.constprop.0+0x1e0a>
 8011896:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 801189a:	eef4 7ac8 	vcmpe.f32	s15, s16
 801189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a2:	db02      	blt.n	80118aa <kalman_3gyro.constprop.0+0x1e0a>
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f002 8001 	beq.w	80138ac <kalman_3gyro.constprop.0+0x3e0c>
 80118aa:	b132      	cbz	r2, 80118ba <kalman_3gyro.constprop.0+0x1e1a>
 80118ac:	f240 1001 	movw	r0, #257	; 0x101
 80118b0:	2301      	movs	r3, #1
 80118b2:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 80118b6:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80118ba:	2301      	movs	r3, #1
 80118bc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80118c0:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80118c4:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 8011770 <kalman_3gyro.constprop.0+0x1cd0>
 80118c8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80118cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d0:	dc09      	bgt.n	80118e6 <kalman_3gyro.constprop.0+0x1e46>
 80118d2:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 8011774 <kalman_3gyro.constprop.0+0x1cd4>
 80118d6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	d402      	bmi.n	80118e6 <kalman_3gyro.constprop.0+0x1e46>
 80118e0:	2a00      	cmp	r2, #0
 80118e2:	f042 80e4 	bne.w	8013aae <kalman_3gyro.constprop.0+0x400e>
 80118e6:	2300      	movs	r3, #0
 80118e8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80118ec:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80118f0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80118f4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80118f8:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 8011778 <kalman_3gyro.constprop.0+0x1cd8>
 80118fc:	eeb4 aae7 	vcmpe.f32	s20, s15
 8011900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011904:	dc09      	bgt.n	801191a <kalman_3gyro.constprop.0+0x1e7a>
 8011906:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 801177c <kalman_3gyro.constprop.0+0x1cdc>
 801190a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011912:	d402      	bmi.n	801191a <kalman_3gyro.constprop.0+0x1e7a>
 8011914:	2900      	cmp	r1, #0
 8011916:	f042 8097 	bne.w	8013a48 <kalman_3gyro.constprop.0+0x3fa8>
 801191a:	2300      	movs	r3, #0
 801191c:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8011920:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 8011924:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011928:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 801192c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011930:	eef4 dae7 	vcmpe.f32	s27, s15
 8011934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011938:	f341 836b 	ble.w	8013012 <kalman_3gyro.constprop.0+0x3572>
 801193c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011940:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8011944:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8011948:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801194c:	2300      	movs	r3, #0
 801194e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8011952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011956:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801195a:	eef4 dac7 	vcmpe.f32	s27, s14
 801195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011962:	bfc4      	itt	gt
 8011964:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 8011968:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 801196c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011970:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011974:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8011978:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 801197c:	2b0e      	cmp	r3, #14
 801197e:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 8011982:	dc02      	bgt.n	801198a <kalman_3gyro.constprop.0+0x1eea>
 8011984:	3305      	adds	r3, #5
 8011986:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801198a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801198e:	eef4 7acd 	vcmpe.f32	s15, s26
 8011992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011996:	f340 82e9 	ble.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 801199a:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801199e:	eef4 7aeb 	vcmpe.f32	s15, s23
 80119a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a6:	f340 82e1 	ble.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 80119aa:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80119ae:	eef4 7aec 	vcmpe.f32	s15, s25
 80119b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b6:	f340 82d9 	ble.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 80119ba:	9b08      	ldr	r3, [sp, #32]
 80119bc:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8011780 <kalman_3gyro.constprop.0+0x1ce0>
 80119c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80119c4:	eef0 6ac7 	vabs.f32	s13, s14
 80119c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80119cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d0:	f140 82cc 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 80119d4:	edd3 6a07 	vldr	s13, [r3, #28]
 80119d8:	eeb0 6ae6 	vabs.f32	s12, s13
 80119dc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	f140 82c2 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 80119e8:	ed93 6a08 	vldr	s12, [r3, #32]
 80119ec:	eef0 4ac6 	vabs.f32	s9, s12
 80119f0:	eef4 4ae7 	vcmpe.f32	s9, s15
 80119f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f8:	f140 82b8 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 80119fc:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 8011784 <kalman_3gyro.constprop.0+0x1ce4>
 8011a00:	eef0 5ae5 	vabs.f32	s11, s11
 8011a04:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0c:	f140 82ae 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011a10:	eef0 1ae1 	vabs.f32	s3, s3
 8011a14:	eef4 1ae7 	vcmpe.f32	s3, s15
 8011a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1c:	f140 82a6 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011a20:	eeb0 5ac5 	vabs.f32	s10, s10
 8011a24:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8011a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2c:	f140 829e 	bpl.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a32:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 8011a36:	edd3 5a00 	vldr	s11, [r3]
 8011a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a3c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8011a3e:	ed93 5a00 	vldr	s10, [r3]
 8011a42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a44:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011a48:	2a09      	cmp	r2, #9
 8011a4a:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 8011a4e:	ed93 4a00 	vldr	s8, [r3]
 8011a52:	edd4 3a00 	vldr	s7, [r4]
 8011a56:	bf8c      	ite	hi
 8011a58:	230a      	movhi	r3, #10
 8011a5a:	2305      	movls	r3, #5
 8011a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a60:	bfb4      	ite	lt
 8011a62:	eef0 7a45 	vmovlt.f32	s15, s10
 8011a66:	eef0 7a65 	vmovge.f32	s15, s11
 8011a6a:	bf8c      	ite	hi
 8011a6c:	eef0 4a45 	vmovhi.f32	s9, s10
 8011a70:	eef0 4a65 	vmovls.f32	s9, s11
 8011a74:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7c:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011a80:	bfb8      	it	lt
 8011a82:	eef0 7a63 	vmovlt.f32	s15, s7
 8011a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8a:	bf88      	it	hi
 8011a8c:	eef0 4a63 	vmovhi.f32	s9, s7
 8011a90:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a98:	ee35 5a85 	vadd.f32	s10, s11, s10
 8011a9c:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011aa0:	edd1 5a00 	vldr	s11, [r1]
 8011aa4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011aa6:	bfb8      	it	lt
 8011aa8:	eef0 7a44 	vmovlt.f32	s15, s8
 8011aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab0:	bf88      	it	hi
 8011ab2:	eef0 4a44 	vmovhi.f32	s9, s8
 8011ab6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011aba:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac2:	eef4 4ae5 	vcmpe.f32	s9, s11
 8011ac6:	bfb8      	it	lt
 8011ac8:	eef0 7a65 	vmovlt.f32	s15, s11
 8011acc:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad4:	bf88      	it	hi
 8011ad6:	eef0 4a65 	vmovhi.f32	s9, s11
 8011ada:	2b05      	cmp	r3, #5
 8011adc:	ee35 5a25 	vadd.f32	s10, s10, s11
 8011ae0:	edd1 5a00 	vldr	s11, [r1]
 8011ae4:	d065      	beq.n	8011bb2 <kalman_3gyro.constprop.0+0x2112>
 8011ae6:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 8011aea:	edd1 3a00 	vldr	s7, [r1]
 8011aee:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8011af2:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011af6:	ed91 4a00 	vldr	s8, [r1]
 8011afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afe:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011b02:	bfb8      	it	lt
 8011b04:	eef0 7a63 	vmovlt.f32	s15, s7
 8011b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0c:	bf88      	it	hi
 8011b0e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011b12:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011b16:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 8011b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011b22:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011b26:	edd1 3a00 	vldr	s7, [r1]
 8011b2a:	bfb8      	it	lt
 8011b2c:	eef0 7a44 	vmovlt.f32	s15, s8
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	bf88      	it	hi
 8011b36:	eef0 4a44 	vmovhi.f32	s9, s8
 8011b3a:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011b3e:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 8011b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b46:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011b4a:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011b4e:	ed91 4a00 	vldr	s8, [r1]
 8011b52:	bfb8      	it	lt
 8011b54:	eef0 7a63 	vmovlt.f32	s15, s7
 8011b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5c:	bf88      	it	hi
 8011b5e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011b62:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b6a:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011b6e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011b72:	bfb8      	it	lt
 8011b74:	eef0 7a44 	vmovlt.f32	s15, s8
 8011b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b7c:	bf88      	it	hi
 8011b7e:	eef0 4a44 	vmovhi.f32	s9, s8
 8011b82:	2b0a      	cmp	r3, #10
 8011b84:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011b88:	d113      	bne.n	8011bb2 <kalman_3gyro.constprop.0+0x2112>
 8011b8a:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 8011b8e:	ed91 4a00 	vldr	s8, [r1]
 8011b92:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9a:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011b9e:	bfb8      	it	lt
 8011ba0:	eef0 7a44 	vmovlt.f32	s15, s8
 8011ba4:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bac:	bf88      	it	hi
 8011bae:	eef0 4a44 	vmovhi.f32	s9, s8
 8011bb2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011bb6:	eddf 4ae7 	vldr	s9, [pc, #924]	; 8011f54 <kalman_3gyro.constprop.0+0x24b4>
 8011bba:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 8011f58 <kalman_3gyro.constprop.0+0x24b8>
 8011bbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011bc2:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011bc6:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bce:	f300 81cd 	bgt.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011bd2:	eef0 7ac5 	vabs.f32	s15, s10
 8011bd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011bda:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 8011f5c <kalman_3gyro.constprop.0+0x24bc>
 8011bde:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be6:	f300 81c1 	bgt.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011bea:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011bec:	ed91 5a00 	vldr	s10, [r1]
 8011bf0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011bf2:	ed91 4a00 	vldr	s8, [r1]
 8011bf6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011bf8:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011bfc:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 8011c00:	ed90 3a00 	vldr	s6, [r0]
 8011c04:	edd1 3a00 	vldr	s7, [r1]
 8011c08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0e:	bfb4      	ite	lt
 8011c10:	eef0 7a44 	vmovlt.f32	s15, s8
 8011c14:	eef0 7a45 	vmovge.f32	s15, s10
 8011c18:	bf8c      	ite	hi
 8011c1a:	eef0 4a44 	vmovhi.f32	s9, s8
 8011c1e:	eef0 4a45 	vmovls.f32	s9, s10
 8011c22:	eef4 7ac3 	vcmpe.f32	s15, s6
 8011c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2a:	eef4 4ac3 	vcmpe.f32	s9, s6
 8011c2e:	bfb8      	it	lt
 8011c30:	eef0 7a43 	vmovlt.f32	s15, s6
 8011c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c38:	bf88      	it	hi
 8011c3a:	eef0 4a43 	vmovhi.f32	s9, s6
 8011c3e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c46:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011c4a:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011c4e:	ed91 4a00 	vldr	s8, [r1]
 8011c52:	bfb8      	it	lt
 8011c54:	eef0 7a63 	vmovlt.f32	s15, s7
 8011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5c:	bf88      	it	hi
 8011c5e:	eef0 4a63 	vmovhi.f32	s9, s7
 8011c62:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011c66:	ee35 5a03 	vadd.f32	s10, s10, s6
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011c72:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011c76:	bfb8      	it	lt
 8011c78:	eef0 7a44 	vmovlt.f32	s15, s8
 8011c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c80:	bf88      	it	hi
 8011c82:	eef0 4a44 	vmovhi.f32	s9, s8
 8011c86:	2b05      	cmp	r3, #5
 8011c88:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011c8c:	d065      	beq.n	8011d5a <kalman_3gyro.constprop.0+0x22ba>
 8011c8e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011c92:	edd1 3a00 	vldr	s7, [r1]
 8011c96:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011c9a:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011c9e:	ed91 4a00 	vldr	s8, [r1]
 8011ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca6:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011caa:	bfb8      	it	lt
 8011cac:	eef0 7a63 	vmovlt.f32	s15, s7
 8011cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb4:	bf88      	it	hi
 8011cb6:	eef0 4a63 	vmovhi.f32	s9, s7
 8011cba:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011cbe:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011cca:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011cce:	edd1 3a00 	vldr	s7, [r1]
 8011cd2:	bfb8      	it	lt
 8011cd4:	eef0 7a44 	vmovlt.f32	s15, s8
 8011cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cdc:	bf88      	it	hi
 8011cde:	eef0 4a44 	vmovhi.f32	s9, s8
 8011ce2:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011ce6:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 8011cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cee:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011cf2:	eef4 4ae3 	vcmpe.f32	s9, s7
 8011cf6:	ed91 4a00 	vldr	s8, [r1]
 8011cfa:	bfb8      	it	lt
 8011cfc:	eef0 7a63 	vmovlt.f32	s15, s7
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	bf88      	it	hi
 8011d06:	eef0 4a63 	vmovhi.f32	s9, s7
 8011d0a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d12:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011d16:	ee35 5a23 	vadd.f32	s10, s10, s7
 8011d1a:	bfb8      	it	lt
 8011d1c:	eef0 7a44 	vmovlt.f32	s15, s8
 8011d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d24:	bf88      	it	hi
 8011d26:	eef0 4a44 	vmovhi.f32	s9, s8
 8011d2a:	2b0a      	cmp	r3, #10
 8011d2c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011d30:	d113      	bne.n	8011d5a <kalman_3gyro.constprop.0+0x22ba>
 8011d32:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011d36:	ed91 4a00 	vldr	s8, [r1]
 8011d3a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d42:	eef4 4ac4 	vcmpe.f32	s9, s8
 8011d46:	bfb8      	it	lt
 8011d48:	eef0 7a44 	vmovlt.f32	s15, s8
 8011d4c:	ee35 5a04 	vadd.f32	s10, s10, s8
 8011d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d54:	bf88      	it	hi
 8011d56:	eef0 4a44 	vmovhi.f32	s9, s8
 8011d5a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011d5e:	eddf 4a7d 	vldr	s9, [pc, #500]	; 8011f54 <kalman_3gyro.constprop.0+0x24b4>
 8011d62:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 8011f58 <kalman_3gyro.constprop.0+0x24b8>
 8011d66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011d6a:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011d6e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d76:	f300 80f9 	bgt.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011d7a:	eef0 7ac5 	vabs.f32	s15, s10
 8011d7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011d82:	ed9f 5a76 	vldr	s10, [pc, #472]	; 8011f5c <kalman_3gyro.constprop.0+0x24bc>
 8011d86:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8e:	f300 80ed 	bgt.w	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011d92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011d94:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8011d96:	edd1 4a00 	vldr	s9, [r1]
 8011d9a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8011d9c:	ed91 3a00 	vldr	s6, [r1]
 8011da0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011da2:	eef4 4ac3 	vcmpe.f32	s9, s6
 8011da6:	ed91 4a00 	vldr	s8, [r1]
 8011daa:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 8011dae:	edd1 3a00 	vldr	s7, [r1]
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	bfb4      	ite	lt
 8011db8:	eef0 7a43 	vmovlt.f32	s15, s6
 8011dbc:	eef0 7a64 	vmovge.f32	s15, s9
 8011dc0:	bf8c      	ite	hi
 8011dc2:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011dc6:	eeb0 5a64 	vmovls.f32	s10, s9
 8011dca:	eef4 3ae7 	vcmpe.f32	s7, s15
 8011dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd2:	eef4 3ac5 	vcmpe.f32	s7, s10
 8011dd6:	bfa8      	it	ge
 8011dd8:	eef0 7a63 	vmovge.f32	s15, s7
 8011ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de0:	bf98      	it	ls
 8011de2:	eeb0 5a63 	vmovls.f32	s10, s7
 8011de6:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8011dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dee:	ee34 3a83 	vadd.f32	s6, s9, s6
 8011df2:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8011df6:	edd5 4a00 	vldr	s9, [r5]
 8011dfa:	bfa8      	it	ge
 8011dfc:	eef0 7a44 	vmovge.f32	s15, s8
 8011e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e04:	bf98      	it	ls
 8011e06:	eeb0 5a44 	vmovls.f32	s10, s8
 8011e0a:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011e0e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8011e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e16:	eef4 4ac5 	vcmpe.f32	s9, s10
 8011e1a:	bfb8      	it	lt
 8011e1c:	eef0 7a64 	vmovlt.f32	s15, s9
 8011e20:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e28:	bf98      	it	ls
 8011e2a:	eeb0 5a64 	vmovls.f32	s10, s9
 8011e2e:	2b05      	cmp	r3, #5
 8011e30:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011e34:	d065      	beq.n	8011f02 <kalman_3gyro.constprop.0+0x2462>
 8011e36:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 8011e3a:	ed95 4a00 	vldr	s8, [r5]
 8011e3e:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 8011e42:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011e46:	ed95 3a00 	vldr	s6, [r5]
 8011e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4e:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011e52:	bfb8      	it	lt
 8011e54:	eef0 7a44 	vmovlt.f32	s15, s8
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	bf88      	it	hi
 8011e5e:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011e62:	eef4 7ac3 	vcmpe.f32	s15, s6
 8011e66:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 8011e6a:	edd5 3a00 	vldr	s7, [r5]
 8011e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e72:	eeb4 5ac3 	vcmpe.f32	s10, s6
 8011e76:	bfb8      	it	lt
 8011e78:	eef0 7a43 	vmovlt.f32	s15, s6
 8011e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e80:	bf88      	it	hi
 8011e82:	eeb0 5a43 	vmovhi.f32	s10, s6
 8011e86:	eef4 7ae3 	vcmpe.f32	s15, s7
 8011e8a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	ee34 4a24 	vadd.f32	s8, s8, s9
 8011e96:	eeb4 5ae3 	vcmpe.f32	s10, s7
 8011e9a:	edd5 4a00 	vldr	s9, [r5]
 8011e9e:	bfb8      	it	lt
 8011ea0:	eef0 7a63 	vmovlt.f32	s15, s7
 8011ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea8:	bf88      	it	hi
 8011eaa:	eeb0 5a63 	vmovhi.f32	s10, s7
 8011eae:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011eb2:	ee34 4a03 	vadd.f32	s8, s8, s6
 8011eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eba:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011ebe:	bfb8      	it	lt
 8011ec0:	eef0 7a64 	vmovlt.f32	s15, s9
 8011ec4:	ee34 4a23 	vadd.f32	s8, s8, s7
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	bf88      	it	hi
 8011ece:	eeb0 5a64 	vmovhi.f32	s10, s9
 8011ed2:	2b0a      	cmp	r3, #10
 8011ed4:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011ed8:	d113      	bne.n	8011f02 <kalman_3gyro.constprop.0+0x2462>
 8011eda:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8011ede:	ed93 4a00 	vldr	s8, [r3]
 8011ee2:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eea:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8011eee:	bfb8      	it	lt
 8011ef0:	eef0 7a44 	vmovlt.f32	s15, s8
 8011ef4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	bf88      	it	hi
 8011efe:	eeb0 5a44 	vmovhi.f32	s10, s8
 8011f02:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011f06:	ed9f 4a13 	vldr	s8, [pc, #76]	; 8011f54 <kalman_3gyro.constprop.0+0x24b4>
 8011f0a:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011f58 <kalman_3gyro.constprop.0+0x24b8>
 8011f0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011f12:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011f16:	eef4 7ac4 	vcmpe.f32	s15, s8
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	dc25      	bgt.n	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011f20:	eef0 7ae4 	vabs.f32	s15, s9
 8011f24:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8011f28:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011f5c <kalman_3gyro.constprop.0+0x24bc>
 8011f2c:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f34:	dc1a      	bgt.n	8011f6c <kalman_3gyro.constprop.0+0x24cc>
 8011f36:	f89b 5005 	ldrb.w	r5, [fp, #5]
 8011f3a:	2d00      	cmp	r5, #0
 8011f3c:	f000 80e0 	beq.w	8012100 <kalman_3gyro.constprop.0+0x2660>
 8011f40:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	f002 8439 	beq.w	80147bc <kalman_3gyro.constprop.0+0x4d1c>
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	462b      	mov	r3, r5
 8011f4e:	9201      	str	r2, [sp, #4]
 8011f50:	e01c      	b.n	8011f8c <kalman_3gyro.constprop.0+0x24ec>
 8011f52:	bf00      	nop
 8011f54:	3be56041 	.word	0x3be56041
 8011f58:	3dcccccd 	.word	0x3dcccccd
 8011f5c:	3e333333 	.word	0x3e333333
 8011f60:	3d088889 	.word	0x3d088889
 8011f64:	42480000 	.word	0x42480000
 8011f68:	00000000 	.word	0x00000000
 8011f6c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8011f70:	2100      	movs	r1, #0
 8011f72:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011f76:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 80c1 	beq.w	8012102 <kalman_3gyro.constprop.0+0x2662>
 8011f80:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8011f84:	2a01      	cmp	r2, #1
 8011f86:	f001 8615 	beq.w	8013bb4 <kalman_3gyro.constprop.0+0x4114>
 8011f8a:	9101      	str	r1, [sp, #4]
 8011f8c:	2b02      	cmp	r3, #2
 8011f8e:	f041 87d2 	bne.w	8013f36 <kalman_3gyro.constprop.0+0x4496>
 8011f92:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011f96:	eecd 6a27 	vdiv.f32	s13, s26, s15
 8011f9a:	f240 1301 	movw	r3, #257	; 0x101
 8011f9e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011fa8:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011fac:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8011fb0:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8011fb4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011fb8:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8011fbc:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 8011fc0:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8011fc4:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011fc8:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 8011fcc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011fd0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8011fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd8:	f2c2 809a 	blt.w	8014110 <kalman_3gyro.constprop.0+0x4670>
 8011fdc:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011fe0:	2a00      	cmp	r2, #0
 8011fe2:	f002 83db 	beq.w	801479c <kalman_3gyro.constprop.0+0x4cfc>
 8011fe6:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011fea:	3301      	adds	r3, #1
 8011fec:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011ff0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011ff4:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 8011ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011ffc:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8012000:	f002 84da 	beq.w	80149b8 <kalman_3gyro.constprop.0+0x4f18>
 8012004:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8012008:	f002 80d0 	beq.w	80141ac <kalman_3gyro.constprop.0+0x470c>
 801200c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012010:	2a00      	cmp	r2, #0
 8012012:	f042 80d0 	bne.w	80141b6 <kalman_3gyro.constprop.0+0x4716>
 8012016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012018:	a830      	add	r0, sp, #192	; 0xc0
 801201a:	f04f 31ff 	mov.w	r1, #4294967295
 801201e:	4613      	mov	r3, r2
 8012020:	edd2 7a00 	vldr	s15, [r2]
 8012024:	3101      	adds	r1, #1
 8012026:	330c      	adds	r3, #12
 8012028:	3204      	adds	r2, #4
 801202a:	461c      	mov	r4, r3
 801202c:	ed94 7a00 	vldr	s14, [r4]
 8012030:	330c      	adds	r3, #12
 8012032:	4598      	cmp	r8, r3
 8012034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012038:	d1f7      	bne.n	801202a <kalman_3gyro.constprop.0+0x258a>
 801203a:	2902      	cmp	r1, #2
 801203c:	ece0 7a01 	vstmia	r0!, {s15}
 8012040:	f108 0804 	add.w	r8, r8, #4
 8012044:	d1eb      	bne.n	801201e <kalman_3gyro.constprop.0+0x257e>
 8012046:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8011f60 <kalman_3gyro.constprop.0+0x24c0>
 801204a:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 801204e:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8012052:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8012056:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8012058:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 801205c:	ee24 4a27 	vmul.f32	s8, s8, s15
 8012060:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8012064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012068:	460a      	mov	r2, r1
 801206a:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 801206e:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8012072:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 8012076:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 801207a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012082:	f103 030c 	add.w	r3, r3, #12
 8012086:	bf88      	it	hi
 8012088:	eef0 7a47 	vmovhi.f32	s15, s14
 801208c:	4293      	cmp	r3, r2
 801208e:	d1f2      	bne.n	8012076 <kalman_3gyro.constprop.0+0x25d6>
 8012090:	1d1a      	adds	r2, r3, #4
 8012092:	4290      	cmp	r0, r2
 8012094:	ece4 7a01 	vstmia	r4!, {s15}
 8012098:	d1e9      	bne.n	801206e <kalman_3gyro.constprop.0+0x25ce>
 801209a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801209c:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 80120a0:	edd3 7a00 	vldr	s15, [r3]
 80120a4:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 80120a8:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 80120ac:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80120b0:	ee97 5a84 	vfnms.f32	s10, s15, s8
 80120b4:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 80120b8:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 80120bc:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 80120c0:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 80120c4:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 80120c8:	b14b      	cbz	r3, 80120de <kalman_3gyro.constprop.0+0x263e>
 80120ca:	ed9d 7a03 	vldr	s14, [sp, #12]
 80120ce:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80120d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120da:	f102 8553 	bmi.w	8014b84 <kalman_3gyro.constprop.0+0x50e4>
 80120de:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 80120e2:	2a1e      	cmp	r2, #30
 80120e4:	f002 84dd 	beq.w	8014aa2 <kalman_3gyro.constprop.0+0x5002>
 80120e8:	1c53      	adds	r3, r2, #1
 80120ea:	2aff      	cmp	r2, #255	; 0xff
 80120ec:	bf14      	ite	ne
 80120ee:	b2db      	uxtbne	r3, r3
 80120f0:	23ff      	moveq	r3, #255	; 0xff
 80120f2:	2200      	movs	r2, #0
 80120f4:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 80120f8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80120fc:	9b01      	ldr	r3, [sp, #4]
 80120fe:	e012      	b.n	8012126 <kalman_3gyro.constprop.0+0x2686>
 8012100:	2301      	movs	r3, #1
 8012102:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8012106:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 801210a:	9181      	str	r1, [sp, #516]	; 0x204
 801210c:	9282      	str	r2, [sp, #520]	; 0x208
 801210e:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8012112:	9183      	str	r1, [sp, #524]	; 0x20c
 8012114:	2200      	movs	r2, #0
 8012116:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801211a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801211e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8012122:	f88b 2001 	strb.w	r2, [fp, #1]
 8012126:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 8011f64 <kalman_3gyro.constprop.0+0x24c4>
 801212a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012132:	f2c0 875f 	blt.w	8012ff4 <kalman_3gyro.constprop.0+0x3554>
 8012136:	2200      	movs	r2, #0
 8012138:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801213c:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8012140:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8012144:	2b01      	cmp	r3, #1
 8012146:	d125      	bne.n	8012194 <kalman_3gyro.constprop.0+0x26f4>
 8012148:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 801214c:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 8012150:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8012154:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 8012158:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801215c:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8012160:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 8012164:	ee25 5a24 	vmul.f32	s10, s10, s9
 8012168:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801216c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012170:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012174:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801217c:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 8012180:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 8012184:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 8012188:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 801218c:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8012190:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 8012194:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012198:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 801219c:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 80121a0:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 80121a4:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 80121a8:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 80121ac:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 80121b0:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 80121b4:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 80121b8:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 80121bc:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 80121c0:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 80121c4:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 80121c8:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 80121cc:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 80121d0:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 80121d4:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 80121d8:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 80121dc:	eee7 3a07 	vfma.f32	s7, s14, s14
 80121e0:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 80121ea:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 80121ee:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80121f2:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 80121f6:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 80121fa:	eea8 3a08 	vfma.f32	s6, s16, s16
 80121fe:	2500      	movs	r5, #0
 8012200:	eea0 4a00 	vfma.f32	s8, s0, s0
 8012204:	eee0 4aa0 	vfma.f32	s9, s1, s1
 8012208:	eea1 5a01 	vfma.f32	s10, s2, s2
 801220c:	eee1 5aa1 	vfma.f32	s11, s3, s3
 8012210:	eea2 6a02 	vfma.f32	s12, s4, s4
 8012214:	eee2 6aa2 	vfma.f32	s13, s5, s5
 8012218:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 801221c:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 8012220:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012224:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 8012228:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 801222c:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8012230:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 8012234:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 8012238:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 801223c:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 8012240:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 8012244:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 8012248:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 801224c:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 8012250:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 8012254:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 8012258:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 801225c:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 8012260:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 8012264:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 8012268:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 801226c:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 8011f68 <kalman_3gyro.constprop.0+0x24c8>
 8012270:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8012274:	ee24 4a04 	vmul.f32	s8, s8, s8
 8012278:	ee64 4aa4 	vmul.f32	s9, s9, s9
 801227c:	ee25 5a05 	vmul.f32	s10, s10, s10
 8012280:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8012284:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012288:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801228c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012290:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012294:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 8012298:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 801229c:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 80122a0:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 80122a4:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 80122a8:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 80122ac:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 80122b0:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 80122b4:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 80122b8:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 80122bc:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 80122c0:	e005      	b.n	80122ce <kalman_3gyro.constprop.0+0x282e>
 80122c2:	3501      	adds	r5, #1
 80122c4:	2d0c      	cmp	r5, #12
 80122c6:	f104 0404 	add.w	r4, r4, #4
 80122ca:	f000 84fe 	beq.w	8012cca <kalman_3gyro.constprop.0+0x322a>
 80122ce:	f818 3b01 	ldrb.w	r3, [r8], #1
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d0f5      	beq.n	80122c2 <kalman_3gyro.constprop.0+0x2822>
 80122d6:	edd4 da00 	vldr	s27, [r4]
 80122da:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 80122de:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 80122e2:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 80122e6:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 80122ea:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 80122ee:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 80122f2:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 80122f6:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 80122fa:	9b01      	ldr	r3, [sp, #4]
 80122fc:	ed89 8a00 	vstr	s16, [r9]
 8012300:	ed89 8a01 	vstr	s16, [r9, #4]
 8012304:	ed89 8a02 	vstr	s16, [r9, #8]
 8012308:	ed89 8a03 	vstr	s16, [r9, #12]
 801230c:	ed89 8a04 	vstr	s16, [r9, #16]
 8012310:	ed89 8a05 	vstr	s16, [r9, #20]
 8012314:	ed89 8a06 	vstr	s16, [r9, #24]
 8012318:	ed89 8a07 	vstr	s16, [r9, #28]
 801231c:	ed89 8a08 	vstr	s16, [r9, #32]
 8012320:	464e      	mov	r6, r9
 8012322:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 8012326:	464a      	mov	r2, r9
 8012328:	ecb3 7a01 	vldmia	r3!, {s14}
 801232c:	ecf2 7a01 	vldmia	r2!, {s15}
 8012330:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012338:	d006      	beq.n	8012348 <kalman_3gyro.constprop.0+0x28a8>
 801233a:	eef5 da40 	vcmp.f32	s27, #0.0
 801233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012342:	bf18      	it	ne
 8012344:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8012348:	ed93 7a08 	vldr	s14, [r3, #32]
 801234c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012354:	d006      	beq.n	8012364 <kalman_3gyro.constprop.0+0x28c4>
 8012356:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235e:	bf18      	it	ne
 8012360:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8012364:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012368:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012370:	d006      	beq.n	8012380 <kalman_3gyro.constprop.0+0x28e0>
 8012372:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801237a:	bf18      	it	ne
 801237c:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8012380:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012384:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238c:	d006      	beq.n	801239c <kalman_3gyro.constprop.0+0x28fc>
 801238e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012396:	bf18      	it	ne
 8012398:	eeef 7a07 	vfmane.f32	s15, s30, s14
 801239c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80123a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a8:	d006      	beq.n	80123b8 <kalman_3gyro.constprop.0+0x2918>
 80123aa:	eef5 fa40 	vcmp.f32	s31, #0.0
 80123ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b2:	bf18      	it	ne
 80123b4:	eeef 7a87 	vfmane.f32	s15, s31, s14
 80123b8:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80123bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c4:	d006      	beq.n	80123d4 <kalman_3gyro.constprop.0+0x2934>
 80123c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80123ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ce:	bf18      	it	ne
 80123d0:	eee6 7a87 	vfmane.f32	s15, s13, s14
 80123d4:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80123d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e0:	d006      	beq.n	80123f0 <kalman_3gyro.constprop.0+0x2950>
 80123e2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80123e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ea:	bf18      	it	ne
 80123ec:	eee6 7a07 	vfmane.f32	s15, s12, s14
 80123f0:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80123f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fc:	d006      	beq.n	801240c <kalman_3gyro.constprop.0+0x296c>
 80123fe:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012406:	bf18      	it	ne
 8012408:	eee5 7a87 	vfmane.f32	s15, s11, s14
 801240c:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8012410:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012418:	d006      	beq.n	8012428 <kalman_3gyro.constprop.0+0x2988>
 801241a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012422:	bf18      	it	ne
 8012424:	eee5 7a07 	vfmane.f32	s15, s10, s14
 8012428:	428b      	cmp	r3, r1
 801242a:	ed42 7a01 	vstr	s15, [r2, #-4]
 801242e:	f47f af7b 	bne.w	8012328 <kalman_3gyro.constprop.0+0x2888>
 8012432:	eef5 da40 	vcmp.f32	s27, #0.0
 8012436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243a:	edd9 8a00 	vldr	s17, [r9]
 801243e:	f040 8543 	bne.w	8012ec8 <kalman_3gyro.constprop.0+0x3428>
 8012442:	eef0 7a6d 	vmov.f32	s15, s27
 8012446:	eeb5 ea40 	vcmp.f32	s28, #0.0
 801244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244e:	ed99 9a01 	vldr	s18, [r9, #4]
 8012452:	d006      	beq.n	8012462 <kalman_3gyro.constprop.0+0x29c2>
 8012454:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	bf18      	it	ne
 801245e:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 8012462:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246a:	edd9 aa02 	vldr	s21, [r9, #8]
 801246e:	d006      	beq.n	801247e <kalman_3gyro.constprop.0+0x29de>
 8012470:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012478:	bf18      	it	ne
 801247a:	eeea 7aae 	vfmane.f32	s15, s21, s29
 801247e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012486:	edd9 ba03 	vldr	s23, [r9, #12]
 801248a:	d006      	beq.n	801249a <kalman_3gyro.constprop.0+0x29fa>
 801248c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	bf18      	it	ne
 8012496:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 801249a:	eef5 fa40 	vcmp.f32	s31, #0.0
 801249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a2:	edd9 ca04 	vldr	s25, [r9, #16]
 80124a6:	d006      	beq.n	80124b6 <kalman_3gyro.constprop.0+0x2a16>
 80124a8:	eef5 ca40 	vcmp.f32	s25, #0.0
 80124ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b0:	bf18      	it	ne
 80124b2:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 80124b6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80124ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124be:	ed99 ca05 	vldr	s24, [r9, #20]
 80124c2:	d006      	beq.n	80124d2 <kalman_3gyro.constprop.0+0x2a32>
 80124c4:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80124c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124cc:	bf18      	it	ne
 80124ce:	eeec 7a26 	vfmane.f32	s15, s24, s13
 80124d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80124d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124da:	ed99 da06 	vldr	s26, [r9, #24]
 80124de:	d006      	beq.n	80124ee <kalman_3gyro.constprop.0+0x2a4e>
 80124e0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80124e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e8:	bf18      	it	ne
 80124ea:	eeed 7a06 	vfmane.f32	s15, s26, s12
 80124ee:	eef5 5a40 	vcmp.f32	s11, #0.0
 80124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f6:	ed99 aa07 	vldr	s20, [r9, #28]
 80124fa:	d006      	beq.n	801250a <kalman_3gyro.constprop.0+0x2a6a>
 80124fc:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012504:	bf18      	it	ne
 8012506:	eeea 7a25 	vfmane.f32	s15, s20, s11
 801250a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012512:	ed99 ba08 	vldr	s22, [r9, #32]
 8012516:	d006      	beq.n	8012526 <kalman_3gyro.constprop.0+0x2a86>
 8012518:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012520:	bf18      	it	ne
 8012522:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 8012526:	ab87      	add	r3, sp, #540	; 0x21c
 8012528:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 801252c:	ed92 7a00 	vldr	s14, [r2]
 8012530:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012534:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012538:	eec4 7a87 	vdiv.f32	s15, s9, s14
 801253c:	2d05      	cmp	r5, #5
 801253e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8012542:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012546:	ee29 9a27 	vmul.f32	s18, s18, s15
 801254a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801254e:	ee6b baa7 	vmul.f32	s23, s23, s15
 8012552:	ee6c caa7 	vmul.f32	s25, s25, s15
 8012556:	ee2c ca27 	vmul.f32	s24, s24, s15
 801255a:	ee2d da27 	vmul.f32	s26, s26, s15
 801255e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8012562:	ee2b ba27 	vmul.f32	s22, s22, s15
 8012566:	edc9 8a00 	vstr	s17, [r9]
 801256a:	ed89 9a01 	vstr	s18, [r9, #4]
 801256e:	edc9 aa02 	vstr	s21, [r9, #8]
 8012572:	edc9 ba03 	vstr	s23, [r9, #12]
 8012576:	edc9 ca04 	vstr	s25, [r9, #16]
 801257a:	ed89 ca05 	vstr	s24, [r9, #20]
 801257e:	ed89 da06 	vstr	s26, [r9, #24]
 8012582:	ed89 aa07 	vstr	s20, [r9, #28]
 8012586:	ed89 ba08 	vstr	s22, [r9, #32]
 801258a:	f340 8497 	ble.w	8012ebc <kalman_3gyro.constprop.0+0x341c>
 801258e:	eef5 da40 	vcmp.f32	s27, #0.0
 8012592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012596:	f000 8510 	beq.w	8012fba <kalman_3gyro.constprop.0+0x351a>
 801259a:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 801259e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80125a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a6:	d001      	beq.n	80125ac <kalman_3gyro.constprop.0+0x2b0c>
 80125a8:	ee67 7aad 	vmul.f32	s15, s15, s27
 80125ac:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80125b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b4:	d008      	beq.n	80125c8 <kalman_3gyro.constprop.0+0x2b28>
 80125b6:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 80125ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	bf18      	it	ne
 80125c4:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80125c8:	eef5 ea40 	vcmp.f32	s29, #0.0
 80125cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d0:	d008      	beq.n	80125e4 <kalman_3gyro.constprop.0+0x2b44>
 80125d2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 80125d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80125da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125de:	bf18      	it	ne
 80125e0:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80125e4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80125e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ec:	d008      	beq.n	8012600 <kalman_3gyro.constprop.0+0x2b60>
 80125ee:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 80125f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80125f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fa:	bf18      	it	ne
 80125fc:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012600:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012608:	d008      	beq.n	801261c <kalman_3gyro.constprop.0+0x2b7c>
 801260a:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 801260e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012616:	bf18      	it	ne
 8012618:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801261c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012624:	d008      	beq.n	8012638 <kalman_3gyro.constprop.0+0x2b98>
 8012626:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 801262a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012632:	bf18      	it	ne
 8012634:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8012638:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012640:	d008      	beq.n	8012654 <kalman_3gyro.constprop.0+0x2bb4>
 8012642:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 8012646:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264e:	bf18      	it	ne
 8012650:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8012654:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	d008      	beq.n	8012670 <kalman_3gyro.constprop.0+0x2bd0>
 801265e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012662:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266a:	bf18      	it	ne
 801266c:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012670:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012678:	d008      	beq.n	801268c <kalman_3gyro.constprop.0+0x2bec>
 801267a:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 801267e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012686:	bf18      	it	ne
 8012688:	eee7 7a05 	vfmane.f32	s15, s14, s10
 801268c:	aa7b      	add	r2, sp, #492	; 0x1ec
 801268e:	4413      	add	r3, r2
 8012690:	edd3 9a00 	vldr	s19, [r3]
 8012694:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8012698:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801269c:	2100      	movs	r1, #0
 801269e:	4650      	mov	r0, sl
 80126a0:	ed8d 5a05 	vstr	s10, [sp, #20]
 80126a4:	edcd 5a04 	vstr	s11, [sp, #16]
 80126a8:	ed8d 6a03 	vstr	s12, [sp, #12]
 80126ac:	edcd 6a02 	vstr	s13, [sp, #8]
 80126b0:	f007 ff72 	bl	801a598 <memset>
 80126b4:	ed9d 5a05 	vldr	s10, [sp, #20]
 80126b8:	eddd 5a04 	vldr	s11, [sp, #16]
 80126bc:	ed9d 6a03 	vldr	s12, [sp, #12]
 80126c0:	eddd 6a02 	vldr	s13, [sp, #8]
 80126c4:	4651      	mov	r1, sl
 80126c6:	f109 0224 	add.w	r2, r9, #36	; 0x24
 80126ca:	4653      	mov	r3, sl
 80126cc:	ecf6 7a01 	vldmia	r6!, {s15}
 80126d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80126d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d8:	d062      	beq.n	80127a0 <kalman_3gyro.constprop.0+0x2d00>
 80126da:	eef5 da40 	vcmp.f32	s27, #0.0
 80126de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e2:	d005      	beq.n	80126f0 <kalman_3gyro.constprop.0+0x2c50>
 80126e4:	ed93 7a00 	vldr	s14, [r3]
 80126e8:	eead 7aa7 	vfma.f32	s14, s27, s15
 80126ec:	ed83 7a00 	vstr	s14, [r3]
 80126f0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80126f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f8:	d005      	beq.n	8012706 <kalman_3gyro.constprop.0+0x2c66>
 80126fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80126fe:	eeae 7a27 	vfma.f32	s14, s28, s15
 8012702:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8012706:	eef5 ea40 	vcmp.f32	s29, #0.0
 801270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270e:	d005      	beq.n	801271c <kalman_3gyro.constprop.0+0x2c7c>
 8012710:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8012714:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8012718:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 801271c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012724:	d005      	beq.n	8012732 <kalman_3gyro.constprop.0+0x2c92>
 8012726:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801272a:	eeaf 7a27 	vfma.f32	s14, s30, s15
 801272e:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8012732:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273a:	d005      	beq.n	8012748 <kalman_3gyro.constprop.0+0x2ca8>
 801273c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8012740:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 8012744:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8012748:	eef5 6a40 	vcmp.f32	s13, #0.0
 801274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012750:	d005      	beq.n	801275e <kalman_3gyro.constprop.0+0x2cbe>
 8012752:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8012756:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801275a:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 801275e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012766:	d005      	beq.n	8012774 <kalman_3gyro.constprop.0+0x2cd4>
 8012768:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 801276c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012770:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8012774:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277c:	d005      	beq.n	801278a <kalman_3gyro.constprop.0+0x2cea>
 801277e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8012782:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012786:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 801278a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012792:	d005      	beq.n	80127a0 <kalman_3gyro.constprop.0+0x2d00>
 8012794:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8012798:	eea5 7a27 	vfma.f32	s14, s10, s15
 801279c:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 80127a0:	4296      	cmp	r6, r2
 80127a2:	f103 0304 	add.w	r3, r3, #4
 80127a6:	d191      	bne.n	80126cc <kalman_3gyro.constprop.0+0x2c2c>
 80127a8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 80127ac:	4656      	mov	r6, sl
 80127ae:	463b      	mov	r3, r7
 80127b0:	2208      	movs	r2, #8
 80127b2:	2000      	movs	r0, #0
 80127b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127b8:	e074      	b.n	80128a4 <kalman_3gyro.constprop.0+0x2e04>
 80127ba:	edd6 7a00 	vldr	s15, [r6]
 80127be:	ed83 8a01 	vstr	s16, [r3, #4]
 80127c2:	eef1 7a67 	vneg.f32	s15, s15
 80127c6:	2801      	cmp	r0, #1
 80127c8:	edc6 7a00 	vstr	s15, [r6]
 80127cc:	f1a2 0c07 	sub.w	ip, r2, #7
 80127d0:	f000 831e 	beq.w	8012e10 <kalman_3gyro.constprop.0+0x3370>
 80127d4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80127d8:	eddc 7a00 	vldr	s15, [ip]
 80127dc:	ed83 8a02 	vstr	s16, [r3, #8]
 80127e0:	eef1 7a67 	vneg.f32	s15, s15
 80127e4:	2802      	cmp	r0, #2
 80127e6:	edcc 7a00 	vstr	s15, [ip]
 80127ea:	f1a2 0c06 	sub.w	ip, r2, #6
 80127ee:	f000 82f8 	beq.w	8012de2 <kalman_3gyro.constprop.0+0x3342>
 80127f2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80127f6:	eddc 7a00 	vldr	s15, [ip]
 80127fa:	ed83 8a03 	vstr	s16, [r3, #12]
 80127fe:	eef1 7a67 	vneg.f32	s15, s15
 8012802:	2803      	cmp	r0, #3
 8012804:	edcc 7a00 	vstr	s15, [ip]
 8012808:	f1a2 0c05 	sub.w	ip, r2, #5
 801280c:	d170      	bne.n	80128f0 <kalman_3gyro.constprop.0+0x2e50>
 801280e:	edd6 7a03 	vldr	s15, [r6, #12]
 8012812:	ed83 8a04 	vstr	s16, [r3, #16]
 8012816:	ee77 7a67 	vsub.f32	s15, s14, s15
 801281a:	f1a2 0e04 	sub.w	lr, r2, #4
 801281e:	edc6 7a03 	vstr	s15, [r6, #12]
 8012822:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012826:	edde 7a00 	vldr	s15, [lr]
 801282a:	ed83 8a05 	vstr	s16, [r3, #20]
 801282e:	eef1 7a67 	vneg.f32	s15, s15
 8012832:	f1a2 0c03 	sub.w	ip, r2, #3
 8012836:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801283a:	edce 7a00 	vstr	s15, [lr]
 801283e:	eddc 7a00 	vldr	s15, [ip]
 8012842:	ed83 8a06 	vstr	s16, [r3, #24]
 8012846:	eef1 7a67 	vneg.f32	s15, s15
 801284a:	edcc 7a00 	vstr	s15, [ip]
 801284e:	f1a2 0c02 	sub.w	ip, r2, #2
 8012852:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012856:	eddc 7a00 	vldr	s15, [ip]
 801285a:	ed83 8a07 	vstr	s16, [r3, #28]
 801285e:	eef1 7a67 	vneg.f32	s15, s15
 8012862:	2807      	cmp	r0, #7
 8012864:	edcc 7a00 	vstr	s15, [ip]
 8012868:	f102 3cff 	add.w	ip, r2, #4294967295
 801286c:	f040 80a2 	bne.w	80129b4 <kalman_3gyro.constprop.0+0x2f14>
 8012870:	edd6 7a07 	vldr	s15, [r6, #28]
 8012874:	ed83 8a08 	vstr	s16, [r3, #32]
 8012878:	ee77 7a67 	vsub.f32	s15, s14, s15
 801287c:	edc6 7a07 	vstr	s15, [r6, #28]
 8012880:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 8012884:	eddc 7a00 	vldr	s15, [ip]
 8012888:	3001      	adds	r0, #1
 801288a:	eef1 7a67 	vneg.f32	s15, s15
 801288e:	2809      	cmp	r0, #9
 8012890:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012894:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8012898:	f102 0209 	add.w	r2, r2, #9
 801289c:	edcc 7a00 	vstr	s15, [ip]
 80128a0:	f000 809f 	beq.w	80129e2 <kalman_3gyro.constprop.0+0x2f42>
 80128a4:	ed83 8a00 	vstr	s16, [r3]
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d186      	bne.n	80127ba <kalman_3gyro.constprop.0+0x2d1a>
 80128ac:	edda 7a00 	vldr	s15, [sl]
 80128b0:	ed83 8a01 	vstr	s16, [r3, #4]
 80128b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128b8:	f1a2 0e07 	sub.w	lr, r2, #7
 80128bc:	edc6 7a00 	vstr	s15, [r6]
 80128c0:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80128c4:	edde 7a00 	vldr	s15, [lr]
 80128c8:	ed83 8a02 	vstr	s16, [r3, #8]
 80128cc:	eef1 7a67 	vneg.f32	s15, s15
 80128d0:	f1a2 0c06 	sub.w	ip, r2, #6
 80128d4:	edce 7a00 	vstr	s15, [lr]
 80128d8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80128dc:	eddc 7a00 	vldr	s15, [ip]
 80128e0:	ed83 8a03 	vstr	s16, [r3, #12]
 80128e4:	eef1 7a67 	vneg.f32	s15, s15
 80128e8:	edcc 7a00 	vstr	s15, [ip]
 80128ec:	f1a2 0c05 	sub.w	ip, r2, #5
 80128f0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80128f4:	eddc 7a00 	vldr	s15, [ip]
 80128f8:	ed83 8a04 	vstr	s16, [r3, #16]
 80128fc:	eef1 7a67 	vneg.f32	s15, s15
 8012900:	2804      	cmp	r0, #4
 8012902:	edcc 7a00 	vstr	s15, [ip]
 8012906:	f1a2 0c04 	sub.w	ip, r2, #4
 801290a:	d031      	beq.n	8012970 <kalman_3gyro.constprop.0+0x2ed0>
 801290c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012910:	eddc 7a00 	vldr	s15, [ip]
 8012914:	ed83 8a05 	vstr	s16, [r3, #20]
 8012918:	eef1 7a67 	vneg.f32	s15, s15
 801291c:	2805      	cmp	r0, #5
 801291e:	edcc 7a00 	vstr	s15, [ip]
 8012922:	f1a2 0c03 	sub.w	ip, r2, #3
 8012926:	f000 8245 	beq.w	8012db4 <kalman_3gyro.constprop.0+0x3314>
 801292a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801292e:	eddc 7a00 	vldr	s15, [ip]
 8012932:	ed83 8a06 	vstr	s16, [r3, #24]
 8012936:	eef1 7a67 	vneg.f32	s15, s15
 801293a:	2806      	cmp	r0, #6
 801293c:	edcc 7a00 	vstr	s15, [ip]
 8012940:	f1a2 0c02 	sub.w	ip, r2, #2
 8012944:	d185      	bne.n	8012852 <kalman_3gyro.constprop.0+0x2db2>
 8012946:	edd6 7a06 	vldr	s15, [r6, #24]
 801294a:	ed83 8a07 	vstr	s16, [r3, #28]
 801294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012952:	f102 3cff 	add.w	ip, r2, #4294967295
 8012956:	edc6 7a06 	vstr	s15, [r6, #24]
 801295a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801295e:	eddc 7a00 	vldr	s15, [ip]
 8012962:	ed83 8a08 	vstr	s16, [r3, #32]
 8012966:	eef1 7a67 	vneg.f32	s15, s15
 801296a:	edcc 7a00 	vstr	s15, [ip]
 801296e:	e787      	b.n	8012880 <kalman_3gyro.constprop.0+0x2de0>
 8012970:	edd6 7a04 	vldr	s15, [r6, #16]
 8012974:	ed83 8a05 	vstr	s16, [r3, #20]
 8012978:	ee77 7a67 	vsub.f32	s15, s14, s15
 801297c:	f1a2 0e03 	sub.w	lr, r2, #3
 8012980:	edc6 7a04 	vstr	s15, [r6, #16]
 8012984:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012988:	edde 7a00 	vldr	s15, [lr]
 801298c:	ed83 8a06 	vstr	s16, [r3, #24]
 8012990:	eef1 7a67 	vneg.f32	s15, s15
 8012994:	f1a2 0c02 	sub.w	ip, r2, #2
 8012998:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801299c:	edce 7a00 	vstr	s15, [lr]
 80129a0:	eddc 7a00 	vldr	s15, [ip]
 80129a4:	ed83 8a07 	vstr	s16, [r3, #28]
 80129a8:	eef1 7a67 	vneg.f32	s15, s15
 80129ac:	edcc 7a00 	vstr	s15, [ip]
 80129b0:	f102 3cff 	add.w	ip, r2, #4294967295
 80129b4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 80129b8:	eddc 7a00 	vldr	s15, [ip]
 80129bc:	ed83 8a08 	vstr	s16, [r3, #32]
 80129c0:	eef1 7a67 	vneg.f32	s15, s15
 80129c4:	2808      	cmp	r0, #8
 80129c6:	edcc 7a00 	vstr	s15, [ip]
 80129ca:	f47f af59 	bne.w	8012880 <kalman_3gyro.constprop.0+0x2de0>
 80129ce:	ed96 7a08 	vldr	s14, [r6, #32]
 80129d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80129d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129da:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80129de:	edc2 7a00 	vstr	s15, [r2]
 80129e2:	2000      	movs	r0, #0
 80129e4:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 80129e8:	ecb1 3a01 	vldmia	r1!, {s6}
 80129ec:	edd1 3a08 	vldr	s7, [r1, #32]
 80129f0:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 80129f4:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 80129f8:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 80129fc:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 8012a00:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 8012a04:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 8012a08:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 8012a0c:	465a      	mov	r2, fp
 8012a0e:	463b      	mov	r3, r7
 8012a10:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	d00c      	beq.n	8012a34 <kalman_3gyro.constprop.0+0x2f94>
 8012a1a:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 8012a1e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a26:	d005      	beq.n	8012a34 <kalman_3gyro.constprop.0+0x2f94>
 8012a28:	edd3 7a00 	vldr	s15, [r3]
 8012a2c:	eee3 7a22 	vfma.f32	s15, s6, s5
 8012a30:	edc3 7a00 	vstr	s15, [r3]
 8012a34:	eef5 3a40 	vcmp.f32	s7, #0.0
 8012a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3c:	d00c      	beq.n	8012a58 <kalman_3gyro.constprop.0+0x2fb8>
 8012a3e:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 8012a42:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4a:	d005      	beq.n	8012a58 <kalman_3gyro.constprop.0+0x2fb8>
 8012a4c:	edd3 7a00 	vldr	s15, [r3]
 8012a50:	eee3 7aa2 	vfma.f32	s15, s7, s5
 8012a54:	edc3 7a00 	vstr	s15, [r3]
 8012a58:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8012a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a60:	d00c      	beq.n	8012a7c <kalman_3gyro.constprop.0+0x2fdc>
 8012a62:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 8012a66:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6e:	d005      	beq.n	8012a7c <kalman_3gyro.constprop.0+0x2fdc>
 8012a70:	edd3 7a00 	vldr	s15, [r3]
 8012a74:	eee4 7a22 	vfma.f32	s15, s8, s5
 8012a78:	edc3 7a00 	vstr	s15, [r3]
 8012a7c:	eef5 4a40 	vcmp.f32	s9, #0.0
 8012a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a84:	d00c      	beq.n	8012aa0 <kalman_3gyro.constprop.0+0x3000>
 8012a86:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 8012a8a:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a92:	d005      	beq.n	8012aa0 <kalman_3gyro.constprop.0+0x3000>
 8012a94:	edd3 7a00 	vldr	s15, [r3]
 8012a98:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012a9c:	edc3 7a00 	vstr	s15, [r3]
 8012aa0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	d00c      	beq.n	8012ac4 <kalman_3gyro.constprop.0+0x3024>
 8012aaa:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 8012aae:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab6:	d005      	beq.n	8012ac4 <kalman_3gyro.constprop.0+0x3024>
 8012ab8:	edd3 7a00 	vldr	s15, [r3]
 8012abc:	eee5 7a22 	vfma.f32	s15, s10, s5
 8012ac0:	edc3 7a00 	vstr	s15, [r3]
 8012ac4:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012acc:	d00c      	beq.n	8012ae8 <kalman_3gyro.constprop.0+0x3048>
 8012ace:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 8012ad2:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ada:	d005      	beq.n	8012ae8 <kalman_3gyro.constprop.0+0x3048>
 8012adc:	edd3 7a00 	vldr	s15, [r3]
 8012ae0:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8012ae4:	edc3 7a00 	vstr	s15, [r3]
 8012ae8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af0:	d00c      	beq.n	8012b0c <kalman_3gyro.constprop.0+0x306c>
 8012af2:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 8012af6:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afe:	d005      	beq.n	8012b0c <kalman_3gyro.constprop.0+0x306c>
 8012b00:	edd3 7a00 	vldr	s15, [r3]
 8012b04:	eee6 7a22 	vfma.f32	s15, s12, s5
 8012b08:	edc3 7a00 	vstr	s15, [r3]
 8012b0c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	d00c      	beq.n	8012b30 <kalman_3gyro.constprop.0+0x3090>
 8012b16:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 8012b1a:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b22:	d005      	beq.n	8012b30 <kalman_3gyro.constprop.0+0x3090>
 8012b24:	edd3 7a00 	vldr	s15, [r3]
 8012b28:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8012b2c:	edc3 7a00 	vstr	s15, [r3]
 8012b30:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b38:	d00c      	beq.n	8012b54 <kalman_3gyro.constprop.0+0x30b4>
 8012b3a:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 8012b3e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8012b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b46:	d005      	beq.n	8012b54 <kalman_3gyro.constprop.0+0x30b4>
 8012b48:	edd3 7a00 	vldr	s15, [r3]
 8012b4c:	eee7 7a22 	vfma.f32	s15, s14, s5
 8012b50:	edc3 7a00 	vstr	s15, [r3]
 8012b54:	3224      	adds	r2, #36	; 0x24
 8012b56:	4296      	cmp	r6, r2
 8012b58:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012b5c:	f47f af58 	bne.w	8012a10 <kalman_3gyro.constprop.0+0x2f70>
 8012b60:	3001      	adds	r0, #1
 8012b62:	2809      	cmp	r0, #9
 8012b64:	f107 0704 	add.w	r7, r7, #4
 8012b68:	f47f af3e 	bne.w	80129e8 <kalman_3gyro.constprop.0+0x2f48>
 8012b6c:	9801      	ldr	r0, [sp, #4]
 8012b6e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012b72:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8012b76:	f007 fd01 	bl	801a57c <memcpy>
 8012b7a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b82:	f000 817c 	beq.w	8012e7e <kalman_3gyro.constprop.0+0x33de>
 8012b86:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8e:	f000 8176 	beq.w	8012e7e <kalman_3gyro.constprop.0+0x33de>
 8012b92:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8012b9e:	f040 8212 	bne.w	8012fc6 <kalman_3gyro.constprop.0+0x3526>
 8012ba2:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012baa:	f000 8177 	beq.w	8012e9c <kalman_3gyro.constprop.0+0x33fc>
 8012bae:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb6:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8012bba:	f040 81cb 	bne.w	8012f54 <kalman_3gyro.constprop.0+0x34b4>
 8012bbe:	eef0 ba47 	vmov.f32	s23, s14
 8012bc2:	eef0 aa49 	vmov.f32	s21, s18
 8012bc6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bce:	f000 8138 	beq.w	8012e42 <kalman_3gyro.constprop.0+0x33a2>
 8012bd2:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bda:	f000 824e 	beq.w	801307a <kalman_3gyro.constprop.0+0x35da>
 8012bde:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be6:	ee29 7aac 	vmul.f32	s14, s19, s25
 8012bea:	eef0 7a48 	vmov.f32	s15, s16
 8012bee:	f040 81c5 	bne.w	8012f7c <kalman_3gyro.constprop.0+0x34dc>
 8012bf2:	eeb0 ca47 	vmov.f32	s24, s14
 8012bf6:	eef0 ca67 	vmov.f32	s25, s15
 8012bfa:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c02:	f000 8179 	beq.w	8012ef8 <kalman_3gyro.constprop.0+0x3458>
 8012c06:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0e:	f000 8125 	beq.w	8012e5c <kalman_3gyro.constprop.0+0x33bc>
 8012c12:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8012c1e:	eef0 7a48 	vmov.f32	s15, s16
 8012c22:	f040 81be 	bne.w	8012fa2 <kalman_3gyro.constprop.0+0x3502>
 8012c26:	eeb0 aa47 	vmov.f32	s20, s14
 8012c2a:	eeb0 da67 	vmov.f32	s26, s15
 8012c2e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c36:	f000 811f 	beq.w	8012e78 <kalman_3gyro.constprop.0+0x33d8>
 8012c3a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c42:	f000 821d 	beq.w	8013080 <kalman_3gyro.constprop.0+0x35e0>
 8012c46:	eef0 7a48 	vmov.f32	s15, s16
 8012c4a:	ee2b ba29 	vmul.f32	s22, s22, s19
 8012c4e:	eef0 9a67 	vmov.f32	s19, s15
 8012c52:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 8012c56:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 8012c5a:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 8012c5e:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 8012c62:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 8012c66:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 8012c6a:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 8012c6e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012c72:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 8012c76:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8012c7a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8012c7e:	ee74 baab 	vadd.f32	s23, s9, s23
 8012c82:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8012c86:	ee35 ca8c 	vadd.f32	s24, s11, s24
 8012c8a:	ee36 da0d 	vadd.f32	s26, s12, s26
 8012c8e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8012c92:	ee77 9a29 	vadd.f32	s19, s14, s19
 8012c96:	ee37 ba8b 	vadd.f32	s22, s15, s22
 8012c9a:	3501      	adds	r5, #1
 8012c9c:	2d0c      	cmp	r5, #12
 8012c9e:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 8012ca2:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 8012ca6:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 8012caa:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 8012cae:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 8012cb2:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 8012cb6:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 8012cba:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 8012cbe:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 8012cc2:	f104 0404 	add.w	r4, r4, #4
 8012cc6:	f47f ab02 	bne.w	80122ce <kalman_3gyro.constprop.0+0x282e>
 8012cca:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8012cce:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 8012cd2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012cd6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012cda:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012cde:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012ce2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ce6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cee:	f100 81b5 	bmi.w	801305c <kalman_3gyro.constprop.0+0x35bc>
 8012cf2:	eef1 4ae7 	vsqrt.f32	s9, s15
 8012cf6:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8013088 <kalman_3gyro.constprop.0+0x35e8>
 8012cfa:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 8012cfe:	ee67 4a86 	vmul.f32	s9, s15, s12
 8012d02:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8012d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d0a:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 8012d0e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8012d12:	aa36      	add	r2, sp, #216	; 0xd8
 8012d14:	edc3 4a00 	vstr	s9, [r3]
 8012d18:	edc3 5a01 	vstr	s11, [r3, #4]
 8012d1c:	edc3 7a02 	vstr	s15, [r3, #8]
 8012d20:	ed83 5a03 	vstr	s10, [r3, #12]
 8012d24:	4618      	mov	r0, r3
 8012d26:	4611      	mov	r1, r2
 8012d28:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8012d2c:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 8012d30:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8012d34:	f7fb fdbc 	bl	800e8b0 <qmult>
 8012d38:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 8012d3c:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 8012d40:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 8012d44:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 8012d48:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 8012d4c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012d4e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8012d52:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012d56:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012d5a:	ae54      	add	r6, sp, #336	; 0x150
 8012d5c:	af5c      	add	r7, sp, #368	; 0x170
 8012d5e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012d62:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012d66:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8012d6a:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8012d6e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012d72:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012d76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d7e:	edc3 5a00 	vstr	s11, [r3]
 8012d82:	ed83 6a01 	vstr	s12, [r3, #4]
 8012d86:	edc3 6a02 	vstr	s13, [r3, #8]
 8012d8a:	ed83 7a03 	vstr	s14, [r3, #12]
 8012d8e:	4634      	mov	r4, r6
 8012d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d92:	42bc      	cmp	r4, r7
 8012d94:	6028      	str	r0, [r5, #0]
 8012d96:	6069      	str	r1, [r5, #4]
 8012d98:	60aa      	str	r2, [r5, #8]
 8012d9a:	60eb      	str	r3, [r5, #12]
 8012d9c:	4626      	mov	r6, r4
 8012d9e:	f105 0510 	add.w	r5, r5, #16
 8012da2:	d1f4      	bne.n	8012d8e <kalman_3gyro.constprop.0+0x32ee>
 8012da4:	6820      	ldr	r0, [r4, #0]
 8012da6:	6028      	str	r0, [r5, #0]
 8012da8:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 8012dac:	ecbd 8b10 	vpop	{d8-d15}
 8012db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db4:	edd6 7a05 	vldr	s15, [r6, #20]
 8012db8:	ed83 8a06 	vstr	s16, [r3, #24]
 8012dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dc0:	f1a2 0e02 	sub.w	lr, r2, #2
 8012dc4:	edc6 7a05 	vstr	s15, [r6, #20]
 8012dc8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8012dcc:	edde 7a00 	vldr	s15, [lr]
 8012dd0:	ed83 8a07 	vstr	s16, [r3, #28]
 8012dd4:	eef1 7a67 	vneg.f32	s15, s15
 8012dd8:	f102 3cff 	add.w	ip, r2, #4294967295
 8012ddc:	edce 7a00 	vstr	s15, [lr]
 8012de0:	e5bb      	b.n	801295a <kalman_3gyro.constprop.0+0x2eba>
 8012de2:	edd6 7a02 	vldr	s15, [r6, #8]
 8012de6:	ed83 8a03 	vstr	s16, [r3, #12]
 8012dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dee:	f1a2 0c05 	sub.w	ip, r2, #5
 8012df2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8012df6:	edc6 7a02 	vstr	s15, [r6, #8]
 8012dfa:	eddc 7a00 	vldr	s15, [ip]
 8012dfe:	ed83 8a04 	vstr	s16, [r3, #16]
 8012e02:	eef1 7a67 	vneg.f32	s15, s15
 8012e06:	edcc 7a00 	vstr	s15, [ip]
 8012e0a:	f1a2 0c04 	sub.w	ip, r2, #4
 8012e0e:	e57d      	b.n	801290c <kalman_3gyro.constprop.0+0x2e6c>
 8012e10:	edd6 7a01 	vldr	s15, [r6, #4]
 8012e14:	ed83 8a02 	vstr	s16, [r3, #8]
 8012e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e1c:	f1a2 0c06 	sub.w	ip, r2, #6
 8012e20:	edc6 7a01 	vstr	s15, [r6, #4]
 8012e24:	e558      	b.n	80128d8 <kalman_3gyro.constprop.0+0x2e38>
 8012e26:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e2e:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012e32:	eeb0 7a48 	vmov.f32	s14, s16
 8012e36:	f040 8097 	bne.w	8012f68 <kalman_3gyro.constprop.0+0x34c8>
 8012e3a:	eef0 ca67 	vmov.f32	s25, s15
 8012e3e:	eef0 ba47 	vmov.f32	s23, s14
 8012e42:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4a:	f43f aed6 	beq.w	8012bfa <kalman_3gyro.constprop.0+0x315a>
 8012e4e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e56:	d142      	bne.n	8012ede <kalman_3gyro.constprop.0+0x343e>
 8012e58:	eeb0 ca69 	vmov.f32	s24, s19
 8012e5c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e64:	f040 80ba 	bne.w	8012fdc <kalman_3gyro.constprop.0+0x353c>
 8012e68:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e70:	eeb0 da4a 	vmov.f32	s26, s20
 8012e74:	f47f aee1 	bne.w	8012c3a <kalman_3gyro.constprop.0+0x319a>
 8012e78:	eef0 9a4b 	vmov.f32	s19, s22
 8012e7c:	e6e9      	b.n	8012c52 <kalman_3gyro.constprop.0+0x31b2>
 8012e7e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e86:	d051      	beq.n	8012f2c <kalman_3gyro.constprop.0+0x348c>
 8012e88:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e90:	f040 8097 	bne.w	8012fc2 <kalman_3gyro.constprop.0+0x3522>
 8012e94:	eef0 aa69 	vmov.f32	s21, s19
 8012e98:	eef0 8a69 	vmov.f32	s17, s19
 8012e9c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea4:	f43f ae8f 	beq.w	8012bc6 <kalman_3gyro.constprop.0+0x3126>
 8012ea8:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb0:	d1b9      	bne.n	8012e26 <kalman_3gyro.constprop.0+0x3386>
 8012eb2:	eef0 ca69 	vmov.f32	s25, s19
 8012eb6:	eef0 ba69 	vmov.f32	s23, s19
 8012eba:	e7c2      	b.n	8012e42 <kalman_3gyro.constprop.0+0x33a2>
 8012ebc:	aa7b      	add	r2, sp, #492	; 0x1ec
 8012ebe:	4413      	add	r3, r2
 8012ec0:	edd3 9a00 	vldr	s19, [r3]
 8012ec4:	f7ff bbe8 	b.w	8012698 <kalman_3gyro.constprop.0+0x2bf8>
 8012ec8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed0:	bf14      	ite	ne
 8012ed2:	ee68 7aad 	vmulne.f32	s15, s17, s27
 8012ed6:	eef0 7a68 	vmoveq.f32	s15, s17
 8012eda:	f7ff bab4 	b.w	8012446 <kalman_3gyro.constprop.0+0x29a6>
 8012ede:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee6:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012eea:	eeb0 7a48 	vmov.f32	s14, s16
 8012eee:	d14e      	bne.n	8012f8e <kalman_3gyro.constprop.0+0x34ee>
 8012ef0:	eeb0 da67 	vmov.f32	s26, s15
 8012ef4:	eeb0 ca47 	vmov.f32	s24, s14
 8012ef8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f00:	f43f ae95 	beq.w	8012c2e <kalman_3gyro.constprop.0+0x318e>
 8012f04:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0c:	f000 84bd 	beq.w	801388a <kalman_3gyro.constprop.0+0x3dea>
 8012f10:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f18:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012f1c:	eeb0 7a48 	vmov.f32	s14, s16
 8012f20:	d148      	bne.n	8012fb4 <kalman_3gyro.constprop.0+0x3514>
 8012f22:	eef0 9a67 	vmov.f32	s19, s15
 8012f26:	eeb0 aa47 	vmov.f32	s20, s14
 8012f2a:	e692      	b.n	8012c52 <kalman_3gyro.constprop.0+0x31b2>
 8012f2c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f34:	d05b      	beq.n	8012fee <kalman_3gyro.constprop.0+0x354e>
 8012f36:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3e:	d0a9      	beq.n	8012e94 <kalman_3gyro.constprop.0+0x33f4>
 8012f40:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f48:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8012f4c:	eef0 8a49 	vmov.f32	s17, s18
 8012f50:	f43f ae35 	beq.w	8012bbe <kalman_3gyro.constprop.0+0x311e>
 8012f54:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5c:	ee69 7aab 	vmul.f32	s15, s19, s23
 8012f60:	eef0 aa49 	vmov.f32	s21, s18
 8012f64:	f43f af69 	beq.w	8012e3a <kalman_3gyro.constprop.0+0x339a>
 8012f68:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f70:	eef0 ba47 	vmov.f32	s23, s14
 8012f74:	ee29 7aac 	vmul.f32	s14, s19, s25
 8012f78:	f43f ae3b 	beq.w	8012bf2 <kalman_3gyro.constprop.0+0x3152>
 8012f7c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	eef0 ca67 	vmov.f32	s25, s15
 8012f88:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8012f8c:	d0b0      	beq.n	8012ef0 <kalman_3gyro.constprop.0+0x3450>
 8012f8e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f96:	eeb0 ca47 	vmov.f32	s24, s14
 8012f9a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8012f9e:	f43f ae42 	beq.w	8012c26 <kalman_3gyro.constprop.0+0x3186>
 8012fa2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	eeb0 da67 	vmov.f32	s26, s15
 8012fae:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8012fb2:	d0b6      	beq.n	8012f22 <kalman_3gyro.constprop.0+0x3482>
 8012fb4:	eeb0 aa47 	vmov.f32	s20, s14
 8012fb8:	e647      	b.n	8012c4a <kalman_3gyro.constprop.0+0x31aa>
 8012fba:	eef0 7a6d 	vmov.f32	s15, s27
 8012fbe:	f7ff baf5 	b.w	80125ac <kalman_3gyro.constprop.0+0x2b0c>
 8012fc2:	eef0 8a48 	vmov.f32	s17, s16
 8012fc6:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fce:	ee29 9a29 	vmul.f32	s18, s18, s19
 8012fd2:	f47f adec 	bne.w	8012bae <kalman_3gyro.constprop.0+0x310e>
 8012fd6:	eef0 aa49 	vmov.f32	s21, s18
 8012fda:	e75f      	b.n	8012e9c <kalman_3gyro.constprop.0+0x33fc>
 8012fdc:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8013088 <kalman_3gyro.constprop.0+0x35e8>
 8012fe0:	eef0 9a48 	vmov.f32	s19, s16
 8012fe4:	eeb0 aa48 	vmov.f32	s20, s16
 8012fe8:	eeb0 da48 	vmov.f32	s26, s16
 8012fec:	e631      	b.n	8012c52 <kalman_3gyro.constprop.0+0x31b2>
 8012fee:	eef0 8a6a 	vmov.f32	s17, s21
 8012ff2:	e753      	b.n	8012e9c <kalman_3gyro.constprop.0+0x33fc>
 8012ff4:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8012ff8:	2a31      	cmp	r2, #49	; 0x31
 8012ffa:	f63f a8a3 	bhi.w	8012144 <kalman_3gyro.constprop.0+0x26a4>
 8012ffe:	2100      	movs	r1, #0
 8013000:	3201      	adds	r2, #1
 8013002:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8013006:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801300a:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 801300e:	f7ff b899 	b.w	8012144 <kalman_3gyro.constprop.0+0x26a4>
 8013012:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8013016:	2b00      	cmp	r3, #0
 8013018:	f340 8423 	ble.w	8013862 <kalman_3gyro.constprop.0+0x3dc2>
 801301c:	3b01      	subs	r3, #1
 801301e:	2200      	movs	r2, #0
 8013020:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8013024:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8013028:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801302c:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8013030:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8013034:	f7fe bca9 	b.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 8013038:	f89b 200d 	ldrb.w	r2, [fp, #13]
 801303c:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8013040:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8013044:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8013048:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801304c:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8013050:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8013054:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8013058:	f7fe bc18 	b.w	801188c <kalman_3gyro.constprop.0+0x1dec>
 801305c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8013060:	eef0 4a46 	vmov.f32	s9, s12
 8013064:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8013068:	eef0 7a47 	vmov.f32	s15, s14
 801306c:	eef0 5a66 	vmov.f32	s11, s13
 8013070:	e64b      	b.n	8012d0a <kalman_3gyro.constprop.0+0x326a>
 8013072:	eeb1 7a47 	vneg.f32	s14, s14
 8013076:	f7fd bc66 	b.w	8010946 <kalman_3gyro.constprop.0+0xea6>
 801307a:	eef0 ca69 	vmov.f32	s25, s19
 801307e:	e6e0      	b.n	8012e42 <kalman_3gyro.constprop.0+0x33a2>
 8013080:	eeb0 ba69 	vmov.f32	s22, s19
 8013084:	e5e5      	b.n	8012c52 <kalman_3gyro.constprop.0+0x31b2>
 8013086:	bf00      	nop
 8013088:	00000000 	.word	0x00000000
 801308c:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8013090:	49dc      	ldr	r1, [pc, #880]	; (8013404 <kalman_3gyro.constprop.0+0x3964>)
 8013092:	4bdd      	ldr	r3, [pc, #884]	; (8013408 <kalman_3gyro.constprop.0+0x3968>)
 8013094:	4add      	ldr	r2, [pc, #884]	; (801340c <kalman_3gyro.constprop.0+0x396c>)
 8013096:	2000      	movs	r0, #0
 8013098:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 801309c:	6029      	str	r1, [r5, #0]
 801309e:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 80130a2:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 80130a6:	6002      	str	r2, [r0, #0]
 80130a8:	600b      	str	r3, [r1, #0]
 80130aa:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 80130ae:	9004      	str	r0, [sp, #16]
 80130b0:	9110      	str	r1, [sp, #64]	; 0x40
 80130b2:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f000 80b4 	beq.w	8013224 <kalman_3gyro.constprop.0+0x3784>
 80130bc:	240c      	movs	r4, #12
 80130be:	eddf bad4 	vldr	s23, [pc, #848]	; 8013410 <kalman_3gyro.constprop.0+0x3970>
 80130c2:	ed9f bad4 	vldr	s22, [pc, #848]	; 8013414 <kalman_3gyro.constprop.0+0x3974>
 80130c6:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8013418 <kalman_3gyro.constprop.0+0x3978>
 80130ca:	ed9f aad4 	vldr	s20, [pc, #848]	; 801341c <kalman_3gyro.constprop.0+0x397c>
 80130ce:	eddf aad4 	vldr	s21, [pc, #848]	; 8013420 <kalman_3gyro.constprop.0+0x3980>
 80130d2:	9f08      	ldr	r7, [sp, #32]
 80130d4:	fb14 8403 	smlabb	r4, r4, r3, r8
 80130d8:	4646      	mov	r6, r8
 80130da:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80130de:	e06b      	b.n	80131b8 <kalman_3gyro.constprop.0+0x3718>
 80130e0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80130e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e8:	f300 815a 	bgt.w	80133a0 <kalman_3gyro.constprop.0+0x3900>
 80130ec:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80130f0:	ee17 0a90 	vmov	r0, s15
 80130f4:	f7ed fa28 	bl	8000548 <__aeabi_f2d>
 80130f8:	ec41 0b10 	vmov	d0, r0, r1
 80130fc:	f005 fb10 	bl	8018720 <ceil>
 8013100:	ec51 0b10 	vmov	r0, r1, d0
 8013104:	f7ed fd28 	bl	8000b58 <__aeabi_d2f>
 8013108:	ee07 0a90 	vmov	s15, r0
 801310c:	edc6 7a00 	vstr	s15, [r6]
 8013110:	ed97 7a01 	vldr	s14, [r7, #4]
 8013114:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013118:	eef0 6ae7 	vabs.f32	s13, s15
 801311c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013124:	d51b      	bpl.n	801315e <kalman_3gyro.constprop.0+0x36be>
 8013126:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312e:	f280 8120 	bge.w	8013372 <kalman_3gyro.constprop.0+0x38d2>
 8013132:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801313a:	f300 812e 	bgt.w	801339a <kalman_3gyro.constprop.0+0x38fa>
 801313e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013142:	ee17 0a90 	vmov	r0, s15
 8013146:	f7ed f9ff 	bl	8000548 <__aeabi_f2d>
 801314a:	ec41 0b10 	vmov	d0, r0, r1
 801314e:	f005 fae7 	bl	8018720 <ceil>
 8013152:	ec51 0b10 	vmov	r0, r1, d0
 8013156:	f7ed fcff 	bl	8000b58 <__aeabi_d2f>
 801315a:	ee07 0a90 	vmov	s15, r0
 801315e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013162:	ed97 7a02 	vldr	s14, [r7, #8]
 8013166:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801316a:	eef0 6ae7 	vabs.f32	s13, s15
 801316e:	eef4 6acb 	vcmpe.f32	s13, s22
 8013172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013176:	d51a      	bpl.n	80131ae <kalman_3gyro.constprop.0+0x370e>
 8013178:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013180:	da3b      	bge.n	80131fa <kalman_3gyro.constprop.0+0x375a>
 8013182:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318a:	f300 8103 	bgt.w	8013394 <kalman_3gyro.constprop.0+0x38f4>
 801318e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013192:	ee17 0a90 	vmov	r0, s15
 8013196:	f7ed f9d7 	bl	8000548 <__aeabi_f2d>
 801319a:	ec41 0b10 	vmov	d0, r0, r1
 801319e:	f005 fabf 	bl	8018720 <ceil>
 80131a2:	ec51 0b10 	vmov	r0, r1, d0
 80131a6:	f7ed fcd7 	bl	8000b58 <__aeabi_d2f>
 80131aa:	ee07 0a90 	vmov	s15, r0
 80131ae:	edc6 7a02 	vstr	s15, [r6, #8]
 80131b2:	360c      	adds	r6, #12
 80131b4:	42b4      	cmp	r4, r6
 80131b6:	d035      	beq.n	8013224 <kalman_3gyro.constprop.0+0x3784>
 80131b8:	ed97 7a00 	vldr	s14, [r7]
 80131bc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80131c0:	eef0 6ae7 	vabs.f32	s13, s15
 80131c4:	eef4 6acb 	vcmpe.f32	s13, s22
 80131c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131cc:	d59e      	bpl.n	801310c <kalman_3gyro.constprop.0+0x366c>
 80131ce:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	db83      	blt.n	80130e0 <kalman_3gyro.constprop.0+0x3640>
 80131d8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80131dc:	ee17 0a90 	vmov	r0, s15
 80131e0:	f7ed f9b2 	bl	8000548 <__aeabi_f2d>
 80131e4:	ec41 0b10 	vmov	d0, r0, r1
 80131e8:	f005 fb1e 	bl	8018828 <floor>
 80131ec:	ec51 0b10 	vmov	r0, r1, d0
 80131f0:	f7ed fcb2 	bl	8000b58 <__aeabi_d2f>
 80131f4:	ee07 0a90 	vmov	s15, r0
 80131f8:	e788      	b.n	801310c <kalman_3gyro.constprop.0+0x366c>
 80131fa:	ee77 7a89 	vadd.f32	s15, s15, s18
 80131fe:	360c      	adds	r6, #12
 8013200:	ee17 0a90 	vmov	r0, s15
 8013204:	f7ed f9a0 	bl	8000548 <__aeabi_f2d>
 8013208:	ec41 0b10 	vmov	d0, r0, r1
 801320c:	f005 fb0c 	bl	8018828 <floor>
 8013210:	ec51 0b10 	vmov	r0, r1, d0
 8013214:	f7ed fca0 	bl	8000b58 <__aeabi_d2f>
 8013218:	ee07 0a90 	vmov	s15, r0
 801321c:	ed46 7a01 	vstr	s15, [r6, #-4]
 8013220:	42b4      	cmp	r4, r6
 8013222:	d1c9      	bne.n	80131b8 <kalman_3gyro.constprop.0+0x3718>
 8013224:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8013228:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 801322c:	2b00      	cmp	r3, #0
 801322e:	f000 80cf 	beq.w	80133d0 <kalman_3gyro.constprop.0+0x3930>
 8013232:	240c      	movs	r4, #12
 8013234:	eddf ba7b 	vldr	s23, [pc, #492]	; 8013424 <kalman_3gyro.constprop.0+0x3984>
 8013238:	ed9f ba76 	vldr	s22, [pc, #472]	; 8013414 <kalman_3gyro.constprop.0+0x3974>
 801323c:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8013428 <kalman_3gyro.constprop.0+0x3988>
 8013240:	ed9f aa7a 	vldr	s20, [pc, #488]	; 801342c <kalman_3gyro.constprop.0+0x398c>
 8013244:	eddf aa76 	vldr	s21, [pc, #472]	; 8013420 <kalman_3gyro.constprop.0+0x3980>
 8013248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801324c:	fb14 7403 	smlabb	r4, r4, r3, r7
 8013250:	463e      	mov	r6, r7
 8013252:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013256:	e06b      	b.n	8013330 <kalman_3gyro.constprop.0+0x3890>
 8013258:	eeb4 7aca 	vcmpe.f32	s14, s20
 801325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013260:	f300 81a2 	bgt.w	80135a8 <kalman_3gyro.constprop.0+0x3b08>
 8013264:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013268:	ee17 0a90 	vmov	r0, s15
 801326c:	f7ed f96c 	bl	8000548 <__aeabi_f2d>
 8013270:	ec41 0b10 	vmov	d0, r0, r1
 8013274:	f005 fa54 	bl	8018720 <ceil>
 8013278:	ec51 0b10 	vmov	r0, r1, d0
 801327c:	f7ed fc6c 	bl	8000b58 <__aeabi_d2f>
 8013280:	ee07 0a90 	vmov	s15, r0
 8013284:	edc6 7a00 	vstr	s15, [r6]
 8013288:	ed99 7a04 	vldr	s14, [r9, #16]
 801328c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013290:	eef0 6ae7 	vabs.f32	s13, s15
 8013294:	eef4 6acb 	vcmpe.f32	s13, s22
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	d51b      	bpl.n	80132d6 <kalman_3gyro.constprop.0+0x3836>
 801329e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	f280 8168 	bge.w	801357a <kalman_3gyro.constprop.0+0x3ada>
 80132aa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80132ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b2:	f300 8176 	bgt.w	80135a2 <kalman_3gyro.constprop.0+0x3b02>
 80132b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80132ba:	ee17 0a90 	vmov	r0, s15
 80132be:	f7ed f943 	bl	8000548 <__aeabi_f2d>
 80132c2:	ec41 0b10 	vmov	d0, r0, r1
 80132c6:	f005 fa2b 	bl	8018720 <ceil>
 80132ca:	ec51 0b10 	vmov	r0, r1, d0
 80132ce:	f7ed fc43 	bl	8000b58 <__aeabi_d2f>
 80132d2:	ee07 0a90 	vmov	s15, r0
 80132d6:	edc6 7a01 	vstr	s15, [r6, #4]
 80132da:	ed99 7a05 	vldr	s14, [r9, #20]
 80132de:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80132e2:	eef0 6ae7 	vabs.f32	s13, s15
 80132e6:	eef4 6acb 	vcmpe.f32	s13, s22
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	d51a      	bpl.n	8013326 <kalman_3gyro.constprop.0+0x3886>
 80132f0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80132f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f8:	da55      	bge.n	80133a6 <kalman_3gyro.constprop.0+0x3906>
 80132fa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80132fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013302:	f300 814b 	bgt.w	801359c <kalman_3gyro.constprop.0+0x3afc>
 8013306:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801330a:	ee17 0a90 	vmov	r0, s15
 801330e:	f7ed f91b 	bl	8000548 <__aeabi_f2d>
 8013312:	ec41 0b10 	vmov	d0, r0, r1
 8013316:	f005 fa03 	bl	8018720 <ceil>
 801331a:	ec51 0b10 	vmov	r0, r1, d0
 801331e:	f7ed fc1b 	bl	8000b58 <__aeabi_d2f>
 8013322:	ee07 0a90 	vmov	s15, r0
 8013326:	edc6 7a02 	vstr	s15, [r6, #8]
 801332a:	360c      	adds	r6, #12
 801332c:	42b4      	cmp	r4, r6
 801332e:	d04f      	beq.n	80133d0 <kalman_3gyro.constprop.0+0x3930>
 8013330:	ed99 7a03 	vldr	s14, [r9, #12]
 8013334:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013338:	eef0 6ae7 	vabs.f32	s13, s15
 801333c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013344:	d59e      	bpl.n	8013284 <kalman_3gyro.constprop.0+0x37e4>
 8013346:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	db83      	blt.n	8013258 <kalman_3gyro.constprop.0+0x37b8>
 8013350:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013354:	ee17 0a90 	vmov	r0, s15
 8013358:	f7ed f8f6 	bl	8000548 <__aeabi_f2d>
 801335c:	ec41 0b10 	vmov	d0, r0, r1
 8013360:	f005 fa62 	bl	8018828 <floor>
 8013364:	ec51 0b10 	vmov	r0, r1, d0
 8013368:	f7ed fbf6 	bl	8000b58 <__aeabi_d2f>
 801336c:	ee07 0a90 	vmov	s15, r0
 8013370:	e788      	b.n	8013284 <kalman_3gyro.constprop.0+0x37e4>
 8013372:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013376:	ee17 0a90 	vmov	r0, s15
 801337a:	f7ed f8e5 	bl	8000548 <__aeabi_f2d>
 801337e:	ec41 0b10 	vmov	d0, r0, r1
 8013382:	f005 fa51 	bl	8018828 <floor>
 8013386:	ec51 0b10 	vmov	r0, r1, d0
 801338a:	f7ed fbe5 	bl	8000b58 <__aeabi_d2f>
 801338e:	ee07 0a90 	vmov	s15, r0
 8013392:	e6e4      	b.n	801315e <kalman_3gyro.constprop.0+0x36be>
 8013394:	eef0 7a6a 	vmov.f32	s15, s21
 8013398:	e709      	b.n	80131ae <kalman_3gyro.constprop.0+0x370e>
 801339a:	eef0 7a6a 	vmov.f32	s15, s21
 801339e:	e6de      	b.n	801315e <kalman_3gyro.constprop.0+0x36be>
 80133a0:	eef0 7a6a 	vmov.f32	s15, s21
 80133a4:	e6b2      	b.n	801310c <kalman_3gyro.constprop.0+0x366c>
 80133a6:	ee77 7a89 	vadd.f32	s15, s15, s18
 80133aa:	360c      	adds	r6, #12
 80133ac:	ee17 0a90 	vmov	r0, s15
 80133b0:	f7ed f8ca 	bl	8000548 <__aeabi_f2d>
 80133b4:	ec41 0b10 	vmov	d0, r0, r1
 80133b8:	f005 fa36 	bl	8018828 <floor>
 80133bc:	ec51 0b10 	vmov	r0, r1, d0
 80133c0:	f7ed fbca 	bl	8000b58 <__aeabi_d2f>
 80133c4:	ee07 0a90 	vmov	s15, r0
 80133c8:	ed46 7a01 	vstr	s15, [r6, #-4]
 80133cc:	42b4      	cmp	r4, r6
 80133ce:	d1af      	bne.n	8013330 <kalman_3gyro.constprop.0+0x3890>
 80133d0:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f43c ac7e 	beq.w	800fcd6 <kalman_3gyro.constprop.0+0x236>
 80133da:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 80133de:	240c      	movs	r4, #12
 80133e0:	eddf ba13 	vldr	s23, [pc, #76]	; 8013430 <kalman_3gyro.constprop.0+0x3990>
 80133e4:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8013414 <kalman_3gyro.constprop.0+0x3974>
 80133e8:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8013434 <kalman_3gyro.constprop.0+0x3994>
 80133ec:	ed9f aa12 	vldr	s20, [pc, #72]	; 8013438 <kalman_3gyro.constprop.0+0x3998>
 80133f0:	eddf aa0b 	vldr	s21, [pc, #44]	; 8013420 <kalman_3gyro.constprop.0+0x3980>
 80133f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133f8:	960f      	str	r6, [sp, #60]	; 0x3c
 80133fa:	fb14 6403 	smlabb	r4, r4, r3, r6
 80133fe:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013402:	e099      	b.n	8013538 <kalman_3gyro.constprop.0+0x3a98>
 8013404:	3a7001e0 	.word	0x3a7001e0
 8013408:	3a8c0118 	.word	0x3a8c0118
 801340c:	3a000100 	.word	0x3a000100
 8013410:	44888777 	.word	0x44888777
 8013414:	4b000000 	.word	0x4b000000
 8013418:	39f001e1 	.word	0x39f001e1
 801341c:	b9f001e1 	.word	0xb9f001e1
 8013420:	80000000 	.word	0x80000000
 8013424:	44fffe00 	.word	0x44fffe00
 8013428:	39800100 	.word	0x39800100
 801342c:	b9800100 	.word	0xb9800100
 8013430:	446a0ccd 	.word	0x446a0ccd
 8013434:	3a0c0118 	.word	0x3a0c0118
 8013438:	ba0c0118 	.word	0xba0c0118
 801343c:	bf666666 	.word	0xbf666666
 8013440:	3d072b02 	.word	0x3d072b02
 8013444:	3cb43958 	.word	0x3cb43958
 8013448:	3cf5c28f 	.word	0x3cf5c28f
 801344c:	3d75c28f 	.word	0x3d75c28f
 8013450:	3d23d70a 	.word	0x3d23d70a
 8013454:	3ca3d70a 	.word	0x3ca3d70a
 8013458:	3d4ccccd 	.word	0x3d4ccccd
 801345c:	3d8f5c29 	.word	0x3d8f5c29
 8013460:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013468:	f300 80c6 	bgt.w	80135f8 <kalman_3gyro.constprop.0+0x3b58>
 801346c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013470:	ee17 0a90 	vmov	r0, s15
 8013474:	f7ed f868 	bl	8000548 <__aeabi_f2d>
 8013478:	ec41 0b10 	vmov	d0, r0, r1
 801347c:	f005 f950 	bl	8018720 <ceil>
 8013480:	ec51 0b10 	vmov	r0, r1, d0
 8013484:	f7ed fb68 	bl	8000b58 <__aeabi_d2f>
 8013488:	ee07 0a90 	vmov	s15, r0
 801348c:	edc6 7a00 	vstr	s15, [r6]
 8013490:	ed99 7a07 	vldr	s14, [r9, #28]
 8013494:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013498:	eef0 6ae7 	vabs.f32	s13, s15
 801349c:	eef4 6acb 	vcmpe.f32	s13, s22
 80134a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a4:	d51b      	bpl.n	80134de <kalman_3gyro.constprop.0+0x3a3e>
 80134a6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80134aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ae:	f280 808f 	bge.w	80135d0 <kalman_3gyro.constprop.0+0x3b30>
 80134b2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80134b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ba:	f300 809a 	bgt.w	80135f2 <kalman_3gyro.constprop.0+0x3b52>
 80134be:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80134c2:	ee17 0a90 	vmov	r0, s15
 80134c6:	f7ed f83f 	bl	8000548 <__aeabi_f2d>
 80134ca:	ec41 0b10 	vmov	d0, r0, r1
 80134ce:	f005 f927 	bl	8018720 <ceil>
 80134d2:	ec51 0b10 	vmov	r0, r1, d0
 80134d6:	f7ed fb3f 	bl	8000b58 <__aeabi_d2f>
 80134da:	ee07 0a90 	vmov	s15, r0
 80134de:	edc6 7a01 	vstr	s15, [r6, #4]
 80134e2:	ed99 7a08 	vldr	s14, [r9, #32]
 80134e6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80134ea:	eef0 6ae7 	vabs.f32	s13, s15
 80134ee:	eef4 6acb 	vcmpe.f32	s13, s22
 80134f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f6:	d519      	bpl.n	801352c <kalman_3gyro.constprop.0+0x3a8c>
 80134f8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80134fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013500:	da55      	bge.n	80135ae <kalman_3gyro.constprop.0+0x3b0e>
 8013502:	eeb4 7aca 	vcmpe.f32	s14, s20
 8013506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350a:	dc78      	bgt.n	80135fe <kalman_3gyro.constprop.0+0x3b5e>
 801350c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013510:	ee17 0a90 	vmov	r0, s15
 8013514:	f7ed f818 	bl	8000548 <__aeabi_f2d>
 8013518:	ec41 0b10 	vmov	d0, r0, r1
 801351c:	f005 f900 	bl	8018720 <ceil>
 8013520:	ec51 0b10 	vmov	r0, r1, d0
 8013524:	f7ed fb18 	bl	8000b58 <__aeabi_d2f>
 8013528:	ee07 0a90 	vmov	s15, r0
 801352c:	edc6 7a02 	vstr	s15, [r6, #8]
 8013530:	360c      	adds	r6, #12
 8013532:	42b4      	cmp	r4, r6
 8013534:	f43c abd2 	beq.w	800fcdc <kalman_3gyro.constprop.0+0x23c>
 8013538:	ed99 7a06 	vldr	s14, [r9, #24]
 801353c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013540:	eef0 6ae7 	vabs.f32	s13, s15
 8013544:	eef4 6acb 	vcmpe.f32	s13, s22
 8013548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801354c:	d59e      	bpl.n	801348c <kalman_3gyro.constprop.0+0x39ec>
 801354e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013556:	db83      	blt.n	8013460 <kalman_3gyro.constprop.0+0x39c0>
 8013558:	ee77 7a89 	vadd.f32	s15, s15, s18
 801355c:	ee17 0a90 	vmov	r0, s15
 8013560:	f7ec fff2 	bl	8000548 <__aeabi_f2d>
 8013564:	ec41 0b10 	vmov	d0, r0, r1
 8013568:	f005 f95e 	bl	8018828 <floor>
 801356c:	ec51 0b10 	vmov	r0, r1, d0
 8013570:	f7ed faf2 	bl	8000b58 <__aeabi_d2f>
 8013574:	ee07 0a90 	vmov	s15, r0
 8013578:	e788      	b.n	801348c <kalman_3gyro.constprop.0+0x39ec>
 801357a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801357e:	ee17 0a90 	vmov	r0, s15
 8013582:	f7ec ffe1 	bl	8000548 <__aeabi_f2d>
 8013586:	ec41 0b10 	vmov	d0, r0, r1
 801358a:	f005 f94d 	bl	8018828 <floor>
 801358e:	ec51 0b10 	vmov	r0, r1, d0
 8013592:	f7ed fae1 	bl	8000b58 <__aeabi_d2f>
 8013596:	ee07 0a90 	vmov	s15, r0
 801359a:	e69c      	b.n	80132d6 <kalman_3gyro.constprop.0+0x3836>
 801359c:	eef0 7a6a 	vmov.f32	s15, s21
 80135a0:	e6c1      	b.n	8013326 <kalman_3gyro.constprop.0+0x3886>
 80135a2:	eef0 7a6a 	vmov.f32	s15, s21
 80135a6:	e696      	b.n	80132d6 <kalman_3gyro.constprop.0+0x3836>
 80135a8:	eef0 7a6a 	vmov.f32	s15, s21
 80135ac:	e66a      	b.n	8013284 <kalman_3gyro.constprop.0+0x37e4>
 80135ae:	ee77 7a89 	vadd.f32	s15, s15, s18
 80135b2:	ee17 0a90 	vmov	r0, s15
 80135b6:	f7ec ffc7 	bl	8000548 <__aeabi_f2d>
 80135ba:	ec41 0b10 	vmov	d0, r0, r1
 80135be:	f005 f933 	bl	8018828 <floor>
 80135c2:	ec51 0b10 	vmov	r0, r1, d0
 80135c6:	f7ed fac7 	bl	8000b58 <__aeabi_d2f>
 80135ca:	ee07 0a90 	vmov	s15, r0
 80135ce:	e7ad      	b.n	801352c <kalman_3gyro.constprop.0+0x3a8c>
 80135d0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80135d4:	ee17 0a90 	vmov	r0, s15
 80135d8:	f7ec ffb6 	bl	8000548 <__aeabi_f2d>
 80135dc:	ec41 0b10 	vmov	d0, r0, r1
 80135e0:	f005 f922 	bl	8018828 <floor>
 80135e4:	ec51 0b10 	vmov	r0, r1, d0
 80135e8:	f7ed fab6 	bl	8000b58 <__aeabi_d2f>
 80135ec:	ee07 0a90 	vmov	s15, r0
 80135f0:	e775      	b.n	80134de <kalman_3gyro.constprop.0+0x3a3e>
 80135f2:	eef0 7a6a 	vmov.f32	s15, s21
 80135f6:	e772      	b.n	80134de <kalman_3gyro.constprop.0+0x3a3e>
 80135f8:	eef0 7a6a 	vmov.f32	s15, s21
 80135fc:	e746      	b.n	801348c <kalman_3gyro.constprop.0+0x39ec>
 80135fe:	eef0 7a6a 	vmov.f32	s15, s21
 8013602:	e793      	b.n	801352c <kalman_3gyro.constprop.0+0x3a8c>
 8013604:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8013606:	7813      	ldrb	r3, [r2, #0]
 8013608:	ed92 7a03 	vldr	s14, [r2, #12]
 801360c:	edd2 6a01 	vldr	s13, [r2, #4]
 8013610:	edd2 7a02 	vldr	s15, [r2, #8]
 8013614:	2200      	movs	r2, #0
 8013616:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 801361a:	2b00      	cmp	r3, #0
 801361c:	f040 813b 	bne.w	8013896 <kalman_3gyro.constprop.0+0x3df6>
 8013620:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 801343c <kalman_3gyro.constprop.0+0x399c>
 8013624:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8013628:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 801362c:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8013630:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 8013634:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013638:	2100      	movs	r1, #0
 801363a:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 801363e:	f006 ffab 	bl	801a598 <memset>
 8013642:	eddb 7a02 	vldr	s15, [fp, #8]
 8013646:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8013440 <kalman_3gyro.constprop.0+0x39a0>
 801364a:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 8013444 <kalman_3gyro.constprop.0+0x39a4>
 801364e:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8013448 <kalman_3gyro.constprop.0+0x39a8>
 8013652:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 801344c <kalman_3gyro.constprop.0+0x39ac>
 8013656:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8013450 <kalman_3gyro.constprop.0+0x39b0>
 801365a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8013454 <kalman_3gyro.constprop.0+0x39b4>
 801365e:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8013458 <kalman_3gyro.constprop.0+0x39b8>
 8013662:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 801345c <kalman_3gyro.constprop.0+0x39bc>
 8013666:	4bd9      	ldr	r3, [pc, #868]	; (80139cc <kalman_3gyro.constprop.0+0x3f2c>)
 8013668:	49d9      	ldr	r1, [pc, #868]	; (80139d0 <kalman_3gyro.constprop.0+0x3f30>)
 801366a:	4dda      	ldr	r5, [pc, #872]	; (80139d4 <kalman_3gyro.constprop.0+0x3f34>)
 801366c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 80139d8 <kalman_3gyro.constprop.0+0x3f38>
 8013670:	48da      	ldr	r0, [pc, #872]	; (80139dc <kalman_3gyro.constprop.0+0x3f3c>)
 8013672:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8013676:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801367a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801367e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013682:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8013686:	eddf 5ad6 	vldr	s11, [pc, #856]	; 80139e0 <kalman_3gyro.constprop.0+0x3f40>
 801368a:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 801368e:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013692:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8013696:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 801369a:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 80139e4 <kalman_3gyro.constprop.0+0x3f44>
 801369e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 80139e8 <kalman_3gyro.constprop.0+0x3f48>
 80136a2:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 80136a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80136aa:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80136ae:	ee27 5a85 	vmul.f32	s10, s15, s10
 80136b2:	ee27 4a84 	vmul.f32	s8, s15, s8
 80136b6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80136ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80136be:	2200      	movs	r2, #0
 80136c0:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 80136c4:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 80136c8:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 80136cc:	4cc7      	ldr	r4, [pc, #796]	; (80139ec <kalman_3gyro.constprop.0+0x3f4c>)
 80136ce:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 80136d2:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 80136d6:	eddf 3ac6 	vldr	s7, [pc, #792]	; 80139f0 <kalman_3gyro.constprop.0+0x3f50>
 80136da:	49c6      	ldr	r1, [pc, #792]	; (80139f4 <kalman_3gyro.constprop.0+0x3f54>)
 80136dc:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 80136e0:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 80136e4:	eddf 4ac4 	vldr	s9, [pc, #784]	; 80139f8 <kalman_3gyro.constprop.0+0x3f58>
 80136e8:	4bc4      	ldr	r3, [pc, #784]	; (80139fc <kalman_3gyro.constprop.0+0x3f5c>)
 80136ea:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 80136ee:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 80136f2:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 80136f6:	4ac2      	ldr	r2, [pc, #776]	; (8013a00 <kalman_3gyro.constprop.0+0x3f60>)
 80136f8:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 80136fc:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8013700:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 8013704:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013708:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801370c:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013710:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013714:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013718:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801371c:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013720:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013724:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013728:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 801372c:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8013730:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8013734:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8013738:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 801373c:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8013740:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8013744:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8013748:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801374c:	4cad      	ldr	r4, [pc, #692]	; (8013a04 <kalman_3gyro.constprop.0+0x3f64>)
 801374e:	48ae      	ldr	r0, [pc, #696]	; (8013a08 <kalman_3gyro.constprop.0+0x3f68>)
 8013750:	49ae      	ldr	r1, [pc, #696]	; (8013a0c <kalman_3gyro.constprop.0+0x3f6c>)
 8013752:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8013756:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801375a:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 801375e:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8013762:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8013766:	ee27 6a83 	vmul.f32	s12, s15, s6
 801376a:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 801376e:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8013772:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8013776:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 801377a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801377e:	4aa4      	ldr	r2, [pc, #656]	; (8013a10 <kalman_3gyro.constprop.0+0x3f70>)
 8013780:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8013784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013788:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 801378c:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8013790:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8013794:	4e9f      	ldr	r6, [pc, #636]	; (8013a14 <kalman_3gyro.constprop.0+0x3f74>)
 8013796:	4da0      	ldr	r5, [pc, #640]	; (8013a18 <kalman_3gyro.constprop.0+0x3f78>)
 8013798:	49a0      	ldr	r1, [pc, #640]	; (8013a1c <kalman_3gyro.constprop.0+0x3f7c>)
 801379a:	4aa1      	ldr	r2, [pc, #644]	; (8013a20 <kalman_3gyro.constprop.0+0x3f80>)
 801379c:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 80137a0:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 80137a4:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80137a8:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 80137ac:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 80137b0:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 80137b4:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 80137b8:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 80137bc:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 80137c0:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 80137c4:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 80137c8:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 80137cc:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 80137d0:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 80137d4:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 80137d8:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 80137dc:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 80137e0:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 80137e4:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80137e8:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80137ec:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80137f0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80137f4:	b973      	cbnz	r3, 8013814 <kalman_3gyro.constprop.0+0x3d74>
 80137f6:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80137fa:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80137fe:	6811      	ldr	r1, [r2, #0]
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8013806:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8013810:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8013814:	2300      	movs	r3, #0
 8013816:	f88b 3001 	strb.w	r3, [fp, #1]
 801381a:	f7fc ba4b 	b.w	800fcb4 <kalman_3gyro.constprop.0+0x214>
 801381e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8013822:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8013826:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801382a:	ee69 9a8e 	vmul.f32	s19, s19, s28
 801382e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8013832:	f7fd bd5b 	b.w	80112ec <kalman_3gyro.constprop.0+0x184c>
 8013836:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8013a24 <kalman_3gyro.constprop.0+0x3f84>
 801383a:	f7fc ba9e 	b.w	800fd7a <kalman_3gyro.constprop.0+0x2da>
 801383e:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8013842:	f7fd bd7b 	b.w	801133c <kalman_3gyro.constprop.0+0x189c>
 8013846:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8013a28 <kalman_3gyro.constprop.0+0x3f88>
 801384a:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8013a2c <kalman_3gyro.constprop.0+0x3f8c>
 801384e:	eddf 4a78 	vldr	s9, [pc, #480]	; 8013a30 <kalman_3gyro.constprop.0+0x3f90>
 8013852:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8013a34 <kalman_3gyro.constprop.0+0x3f94>
 8013856:	ed9f ca78 	vldr	s24, [pc, #480]	; 8013a38 <kalman_3gyro.constprop.0+0x3f98>
 801385a:	ee68 8a8c 	vmul.f32	s17, s17, s24
 801385e:	f7fd bf9d 	b.w	801179c <kalman_3gyro.constprop.0+0x1cfc>
 8013862:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8013866:	2a00      	cmp	r2, #0
 8013868:	f340 8181 	ble.w	8013b6e <kalman_3gyro.constprop.0+0x40ce>
 801386c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8013870:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8013874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387c:	f340 8177 	ble.w	8013b6e <kalman_3gyro.constprop.0+0x40ce>
 8013880:	3a01      	subs	r2, #1
 8013882:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8013886:	f7fe b880 	b.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 801388a:	eeb0 aa69 	vmov.f32	s20, s19
 801388e:	eeb0 ba69 	vmov.f32	s22, s19
 8013892:	f7ff b9de 	b.w	8012c52 <kalman_3gyro.constprop.0+0x31b2>
 8013896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801389a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801389e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80138a2:	eef1 6ae7 	vsqrt.f32	s13, s15
 80138a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80138aa:	e6bb      	b.n	8013624 <kalman_3gyro.constprop.0+0x3b84>
 80138ac:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80138b0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80138b4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80138b8:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80138bc:	f7fe b802 	b.w	80118c4 <kalman_3gyro.constprop.0+0x1e24>
 80138c0:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 80138c4:	f7fd bae6 	b.w	8010e94 <kalman_3gyro.constprop.0+0x13f4>
 80138c8:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80138cc:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 80138d0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80138d4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80138d8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80138dc:	f7fd bd06 	b.w	80112ec <kalman_3gyro.constprop.0+0x184c>
 80138e0:	ee7e 7a67 	vsub.f32	s15, s28, s15
 80138e4:	ee17 0a90 	vmov	r0, s15
 80138e8:	f7ec fe2e 	bl	8000548 <__aeabi_f2d>
 80138ec:	ec41 0b10 	vmov	d0, r0, r1
 80138f0:	f004 ff16 	bl	8018720 <ceil>
 80138f4:	ec51 0b10 	vmov	r0, r1, d0
 80138f8:	f7ed f92e 	bl	8000b58 <__aeabi_d2f>
 80138fc:	ee0e 0a10 	vmov	s28, r0
 8013900:	f7fc bc70 	b.w	80101e4 <kalman_3gyro.constprop.0+0x744>
 8013904:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8013908:	ee17 0a90 	vmov	r0, s15
 801390c:	f7ec fe1c 	bl	8000548 <__aeabi_f2d>
 8013910:	ec41 0b10 	vmov	d0, r0, r1
 8013914:	f004 ff04 	bl	8018720 <ceil>
 8013918:	ec51 0b10 	vmov	r0, r1, d0
 801391c:	f7ed f91c 	bl	8000b58 <__aeabi_d2f>
 8013920:	ee0d 0a90 	vmov	s27, r0
 8013924:	f7fc bc81 	b.w	801022a <kalman_3gyro.constprop.0+0x78a>
 8013928:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 801392c:	ee17 0a90 	vmov	r0, s15
 8013930:	f7ec fe0a 	bl	8000548 <__aeabi_f2d>
 8013934:	ec41 0b10 	vmov	d0, r0, r1
 8013938:	f004 fef2 	bl	8018720 <ceil>
 801393c:	ec51 0b10 	vmov	r0, r1, d0
 8013940:	f7ed f90a 	bl	8000b58 <__aeabi_d2f>
 8013944:	ee0d 0a90 	vmov	s27, r0
 8013948:	f7fc bcd5 	b.w	80102f6 <kalman_3gyro.constprop.0+0x856>
 801394c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013950:	ee17 0a90 	vmov	r0, s15
 8013954:	f7ec fdf8 	bl	8000548 <__aeabi_f2d>
 8013958:	ec41 0b10 	vmov	d0, r0, r1
 801395c:	f004 fee0 	bl	8018720 <ceil>
 8013960:	ec51 0b10 	vmov	r0, r1, d0
 8013964:	f7ed f8f8 	bl	8000b58 <__aeabi_d2f>
 8013968:	ee0b 0a10 	vmov	s22, r0
 801396c:	f7fc bce6 	b.w	801033c <kalman_3gyro.constprop.0+0x89c>
 8013970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013974:	f6fd addf 	blt.w	8011536 <kalman_3gyro.constprop.0+0x1a96>
 8013978:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013a30 <kalman_3gyro.constprop.0+0x3f90>
 801397c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	f140 8283 	bpl.w	8013e8e <kalman_3gyro.constprop.0+0x43ee>
 8013988:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8013a3c <kalman_3gyro.constprop.0+0x3f9c>
 801398c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8013a40 <kalman_3gyro.constprop.0+0x3fa0>
 8013990:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013a44 <kalman_3gyro.constprop.0+0x3fa4>
 8013994:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801399c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80139a0:	eea6 7a86 	vfma.f32	s14, s13, s12
 80139a4:	f7fd bdd1 	b.w	801154a <kalman_3gyro.constprop.0+0x1aaa>
 80139a8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80139ac:	ee17 0a90 	vmov	r0, s15
 80139b0:	f7ec fdca 	bl	8000548 <__aeabi_f2d>
 80139b4:	ec41 0b10 	vmov	d0, r0, r1
 80139b8:	f004 feb2 	bl	8018720 <ceil>
 80139bc:	ec51 0b10 	vmov	r0, r1, d0
 80139c0:	f7ed f8ca 	bl	8000b58 <__aeabi_d2f>
 80139c4:	ee08 0a10 	vmov	s16, r0
 80139c8:	f7fc bbe9 	b.w	801019e <kalman_3gyro.constprop.0+0x6fe>
 80139cc:	3eb33333 	.word	0x3eb33333
 80139d0:	3ee66666 	.word	0x3ee66666
 80139d4:	3f866666 	.word	0x3f866666
 80139d8:	3ecccccd 	.word	0x3ecccccd
 80139dc:	3f933333 	.word	0x3f933333
 80139e0:	3dcccccd 	.word	0x3dcccccd
 80139e4:	3e4ccccd 	.word	0x3e4ccccd
 80139e8:	3e99999a 	.word	0x3e99999a
 80139ec:	3f8ccccd 	.word	0x3f8ccccd
 80139f0:	3f4ccccd 	.word	0x3f4ccccd
 80139f4:	3ebd70a4 	.word	0x3ebd70a4
 80139f8:	3f666666 	.word	0x3f666666
 80139fc:	40a00000 	.word	0x40a00000
 8013a00:	3f99999a 	.word	0x3f99999a
 8013a04:	3f19999a 	.word	0x3f19999a
 8013a08:	3fb9999a 	.word	0x3fb9999a
 8013a0c:	3fe66666 	.word	0x3fe66666
 8013a10:	3f333333 	.word	0x3f333333
 8013a14:	3fa66666 	.word	0x3fa66666
 8013a18:	3fcccccd 	.word	0x3fcccccd
 8013a1c:	40200000 	.word	0x40200000
 8013a20:	40400000 	.word	0x40400000
 8013a24:	bf666666 	.word	0xbf666666
 8013a28:	391d4951 	.word	0x391d4951
 8013a2c:	383cbe62 	.word	0x383cbe62
 8013a30:	3c75c28f 	.word	0x3c75c28f
 8013a34:	469c3e00 	.word	0x469c3e00
 8013a38:	43168000 	.word	0x43168000
 8013a3c:	3c23d70a 	.word	0x3c23d70a
 8013a40:	3f19999a 	.word	0x3f19999a
 8013a44:	43480000 	.word	0x43480000
 8013a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a4c:	ee3a aa47 	vsub.f32	s20, s20, s14
 8013a50:	eef0 7aca 	vabs.f32	s15, s20
 8013a54:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8013a58:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a60:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013a64:	bfb8      	it	lt
 8013a66:	eef0 7a66 	vmovlt.f32	s15, s13
 8013a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6e:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8013a72:	f77d af5b 	ble.w	801192c <kalman_3gyro.constprop.0+0x1e8c>
 8013a76:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8013a7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013a7e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8013a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a86:	f77d af51 	ble.w	801192c <kalman_3gyro.constprop.0+0x1e8c>
 8013a8a:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8013a8e:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8013a92:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8013a96:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8013a9a:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8013a9e:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8013aa2:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8013aa6:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8013aaa:	f7fd bf3f 	b.w	801192c <kalman_3gyro.constprop.0+0x1e8c>
 8013aae:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8013ab2:	2a01      	cmp	r2, #1
 8013ab4:	d002      	beq.n	8013abc <kalman_3gyro.constprop.0+0x401c>
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	f47d af1e 	bne.w	80118f8 <kalman_3gyro.constprop.0+0x1e58>
 8013abc:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8013ac0:	eef4 7ac3 	vcmpe.f32	s15, s6
 8013ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac8:	bfa8      	it	ge
 8013aca:	eeb0 3a67 	vmovge.f32	s6, s15
 8013ace:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8013ad2:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8013ad6:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8013ada:	f7fd bf0d 	b.w	80118f8 <kalman_3gyro.constprop.0+0x1e58>
 8013ade:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013ae2:	ee17 0a90 	vmov	r0, s15
 8013ae6:	f7ec fd2f 	bl	8000548 <__aeabi_f2d>
 8013aea:	ec41 0b10 	vmov	d0, r0, r1
 8013aee:	f004 fe17 	bl	8018720 <ceil>
 8013af2:	ec51 0b10 	vmov	r0, r1, d0
 8013af6:	f7ed f82f 	bl	8000b58 <__aeabi_d2f>
 8013afa:	ee08 0a10 	vmov	s16, r0
 8013afe:	f7fc bc40 	b.w	8010382 <kalman_3gyro.constprop.0+0x8e2>
 8013b02:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013b06:	ee17 0a90 	vmov	r0, s15
 8013b0a:	f7ec fd1d 	bl	8000548 <__aeabi_f2d>
 8013b0e:	ec41 0b10 	vmov	d0, r0, r1
 8013b12:	f004 fe05 	bl	8018720 <ceil>
 8013b16:	ec51 0b10 	vmov	r0, r1, d0
 8013b1a:	f7ed f81d 	bl	8000b58 <__aeabi_d2f>
 8013b1e:	ee0b 0a10 	vmov	s22, r0
 8013b22:	f7fc bcb7 	b.w	8010494 <kalman_3gyro.constprop.0+0x9f4>
 8013b26:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013b2a:	ee17 0a90 	vmov	r0, s15
 8013b2e:	f7ec fd0b 	bl	8000548 <__aeabi_f2d>
 8013b32:	ec41 0b10 	vmov	d0, r0, r1
 8013b36:	f004 fdf3 	bl	8018720 <ceil>
 8013b3a:	ec51 0b10 	vmov	r0, r1, d0
 8013b3e:	f7ed f80b 	bl	8000b58 <__aeabi_d2f>
 8013b42:	ee08 0a10 	vmov	s16, r0
 8013b46:	f7fc bcc8 	b.w	80104da <kalman_3gyro.constprop.0+0xa3a>
 8013b4a:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8013b4e:	ee17 0a90 	vmov	r0, s15
 8013b52:	f7ec fcf9 	bl	8000548 <__aeabi_f2d>
 8013b56:	ec41 0b10 	vmov	d0, r0, r1
 8013b5a:	f004 fde1 	bl	8018720 <ceil>
 8013b5e:	ec51 0b10 	vmov	r0, r1, d0
 8013b62:	f7ec fff9 	bl	8000b58 <__aeabi_d2f>
 8013b66:	ee0d 0a90 	vmov	s27, r0
 8013b6a:	f7fc bc70 	b.w	801044e <kalman_3gyro.constprop.0+0x9ae>
 8013b6e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8013b72:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b7a:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8013b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b82:	f77d af02 	ble.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 8013b86:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8013b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b8e:	eef4 7aec 	vcmpe.f32	s15, s25
 8013b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b96:	f77d aef8 	ble.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 8013b9a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8013b9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ba2:	eef4 7acd 	vcmpe.f32	s15, s26
 8013ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013baa:	f140 8711 	bpl.w	80149d0 <kalman_3gyro.constprop.0+0x4f30>
 8013bae:	3303      	adds	r3, #3
 8013bb0:	f7ff ba35 	b.w	801301e <kalman_3gyro.constprop.0+0x357e>
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8013bba:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8013bbe:	9181      	str	r1, [sp, #516]	; 0x204
 8013bc0:	9282      	str	r2, [sp, #520]	; 0x208
 8013bc2:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8013bc6:	9183      	str	r1, [sp, #524]	; 0x20c
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8013bce:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8013bd2:	f7fe baa8 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 8013bd6:	a936      	add	r1, sp, #216	; 0xd8
 8013bd8:	a854      	add	r0, sp, #336	; 0x150
 8013bda:	f7fa ff85 	bl	800eae8 <b_dcm2q>
 8013bde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013be2:	4619      	mov	r1, r3
 8013be4:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8013be8:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8013bec:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013bf0:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8013bf4:	f006 fcd0 	bl	801a598 <memset>
 8013bf8:	4bd8      	ldr	r3, [pc, #864]	; (8013f5c <kalman_3gyro.constprop.0+0x44bc>)
 8013bfa:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013bfe:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8013c02:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013c06:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013c0a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013c0e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8013c12:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013c16:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013c1a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013c1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013c20:	781a      	ldrb	r2, [r3, #0]
 8013c22:	ee07 2a90 	vmov	s15, r2
 8013c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c32:	f040 84dc 	bne.w	80145ee <kalman_3gyro.constprop.0+0x4b4e>
 8013c36:	eeb0 7a4c 	vmov.f32	s14, s24
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	f88b 3000 	strb.w	r3, [fp]
 8013c40:	eddb ea02 	vldr	s29, [fp, #8]
 8013c44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c48:	2301      	movs	r3, #1
 8013c4a:	f7fd bb8d 	b.w	8011368 <kalman_3gyro.constprop.0+0x18c8>
 8013c4e:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8013c52:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5a:	f340 85da 	ble.w	8014812 <kalman_3gyro.constprop.0+0x4d72>
 8013c5e:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8013c62:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8013c66:	ee78 3a62 	vsub.f32	s7, s16, s5
 8013c6a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8013c6e:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8013c72:	ee27 7a23 	vmul.f32	s14, s14, s7
 8013c76:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8013c7a:	ee3e ea04 	vadd.f32	s28, s28, s8
 8013c7e:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8013c82:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c8a:	f63d a94b 	bhi.w	8010f24 <kalman_3gyro.constprop.0+0x1484>
 8013c8e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8013c92:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9a:	f340 84bc 	ble.w	8014616 <kalman_3gyro.constprop.0+0x4b76>
 8013c9e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8013ca2:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8013ca6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013caa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013cae:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013cb2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013cb6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013cba:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013cbe:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8013cc2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cca:	f63d a94b 	bhi.w	8010f64 <kalman_3gyro.constprop.0+0x14c4>
 8013cce:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8013cd2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cda:	f340 84a8 	ble.w	801462e <kalman_3gyro.constprop.0+0x4b8e>
 8013cde:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8013ce2:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8013ce6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013cea:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013cee:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013cf2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013cf6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013cfa:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013cfe:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8013d02:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0a:	f63d a94b 	bhi.w	8010fa4 <kalman_3gyro.constprop.0+0x1504>
 8013d0e:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8013d12:	eef4 4ac8 	vcmpe.f32	s9, s16
 8013d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1a:	f340 8490 	ble.w	801463e <kalman_3gyro.constprop.0+0x4b9e>
 8013d1e:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8013d22:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8013d26:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013d2a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013d2e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013d32:	ee24 4a03 	vmul.f32	s8, s8, s6
 8013d36:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8013d3a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013d3e:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8013d42:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4a:	f6fd a94b 	blt.w	8010fe4 <kalman_3gyro.constprop.0+0x1544>
 8013d4e:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8013d52:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5a:	f57d a94b 	bpl.w	8010ff4 <kalman_3gyro.constprop.0+0x1554>
 8013d5e:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8013d62:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8013d66:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013d6a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013d6e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8013d72:	ee24 7a03 	vmul.f32	s14, s8, s6
 8013d76:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8013d7a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8013d7e:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8013d82:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8a:	f6fd a94b 	blt.w	8011024 <kalman_3gyro.constprop.0+0x1584>
 8013d8e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8013d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d96:	f57d a945 	bpl.w	8011024 <kalman_3gyro.constprop.0+0x1584>
 8013d9a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8013d9e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8013da2:	ee78 3a47 	vsub.f32	s7, s16, s14
 8013da6:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013daa:	ee35 7a47 	vsub.f32	s14, s10, s14
 8013dae:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8013db2:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8013db6:	ee3e ea04 	vadd.f32	s28, s28, s8
 8013dba:	f7fd b933 	b.w	8011024 <kalman_3gyro.constprop.0+0x1584>
 8013dbe:	eddf 6a68 	vldr	s13, [pc, #416]	; 8013f60 <kalman_3gyro.constprop.0+0x44c0>
 8013dc2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dca:	f57d ac56 	bpl.w	801167a <kalman_3gyro.constprop.0+0x1bda>
 8013dce:	eddf 3a65 	vldr	s7, [pc, #404]	; 8013f64 <kalman_3gyro.constprop.0+0x44c4>
 8013dd2:	eddf 2a65 	vldr	s5, [pc, #404]	; 8013f68 <kalman_3gyro.constprop.0+0x44c8>
 8013dd6:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8013f6c <kalman_3gyro.constprop.0+0x44cc>
 8013dda:	eddf 6a65 	vldr	s13, [pc, #404]	; 8013f70 <kalman_3gyro.constprop.0+0x44d0>
 8013dde:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013de2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013de6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013dea:	eeb0 ca66 	vmov.f32	s24, s13
 8013dee:	eddf 6a61 	vldr	s13, [pc, #388]	; 8013f74 <kalman_3gyro.constprop.0+0x44d4>
 8013df2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfa:	f6fd ac56 	blt.w	80116aa <kalman_3gyro.constprop.0+0x1c0a>
 8013dfe:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013f78 <kalman_3gyro.constprop.0+0x44d8>
 8013e02:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0a:	f57d ac56 	bpl.w	80116ba <kalman_3gyro.constprop.0+0x1c1a>
 8013e0e:	eddf 3a59 	vldr	s7, [pc, #356]	; 8013f74 <kalman_3gyro.constprop.0+0x44d4>
 8013e12:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013e16:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013e1a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8013e1e:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8013e22:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013e26:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013e2a:	eeb0 ca66 	vmov.f32	s24, s13
 8013e2e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8013f7c <kalman_3gyro.constprop.0+0x44dc>
 8013e32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3a:	f6fd ac56 	blt.w	80116ea <kalman_3gyro.constprop.0+0x1c4a>
 8013e3e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013e42:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4a:	f57d ac56 	bpl.w	80116fa <kalman_3gyro.constprop.0+0x1c5a>
 8013e4e:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8013f7c <kalman_3gyro.constprop.0+0x44dc>
 8013e52:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8013f80 <kalman_3gyro.constprop.0+0x44e0>
 8013e56:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8013f84 <kalman_3gyro.constprop.0+0x44e4>
 8013e5a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8013e5e:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8013e62:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8013e66:	eee3 6a83 	vfma.f32	s13, s7, s6
 8013e6a:	eeb0 ca66 	vmov.f32	s24, s13
 8013e6e:	e4f4      	b.n	801385a <kalman_3gyro.constprop.0+0x3dba>
 8013e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e74:	f57d abe1 	bpl.w	801163a <kalman_3gyro.constprop.0+0x1b9a>
 8013e78:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8013f64 <kalman_3gyro.constprop.0+0x44c4>
 8013e7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e84:	da9b      	bge.n	8013dbe <kalman_3gyro.constprop.0+0x431e>
 8013e86:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8013e8a:	f7fd bbee 	b.w	801166a <kalman_3gyro.constprop.0+0x1bca>
 8013e8e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013f60 <kalman_3gyro.constprop.0+0x44c0>
 8013e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9a:	f57d ab5e 	bpl.w	801155a <kalman_3gyro.constprop.0+0x1aba>
 8013e9e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8013f64 <kalman_3gyro.constprop.0+0x44c4>
 8013ea2:	eddf 4a39 	vldr	s9, [pc, #228]	; 8013f88 <kalman_3gyro.constprop.0+0x44e8>
 8013ea6:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013f6c <kalman_3gyro.constprop.0+0x44cc>
 8013eaa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013f8c <kalman_3gyro.constprop.0+0x44ec>
 8013eae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013eb2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013eb6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013eba:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013f74 <kalman_3gyro.constprop.0+0x44d4>
 8013ebe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec6:	f6fd ab5e 	blt.w	8011586 <kalman_3gyro.constprop.0+0x1ae6>
 8013eca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8013f78 <kalman_3gyro.constprop.0+0x44d8>
 8013ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed6:	f57d ab5e 	bpl.w	8011596 <kalman_3gyro.constprop.0+0x1af6>
 8013eda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013f74 <kalman_3gyro.constprop.0+0x44d4>
 8013ede:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013ee2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013ee6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013eea:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8013eee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013ef2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013ef6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013f7c <kalman_3gyro.constprop.0+0x44dc>
 8013efa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f02:	f6fd ab5e 	blt.w	80115c2 <kalman_3gyro.constprop.0+0x1b22>
 8013f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f12:	f57d ab5d 	bpl.w	80115d0 <kalman_3gyro.constprop.0+0x1b30>
 8013f16:	eddf 6a19 	vldr	s13, [pc, #100]	; 8013f7c <kalman_3gyro.constprop.0+0x44dc>
 8013f1a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8013f90 <kalman_3gyro.constprop.0+0x44f0>
 8013f1e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8013f84 <kalman_3gyro.constprop.0+0x44e4>
 8013f22:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013f94 <kalman_3gyro.constprop.0+0x44f4>
 8013f26:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013f2a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013f2e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013f32:	f7fd bb5b 	b.w	80115ec <kalman_3gyro.constprop.0+0x1b4c>
 8013f36:	9b01      	ldr	r3, [sp, #4]
 8013f38:	e63d      	b.n	8013bb6 <kalman_3gyro.constprop.0+0x4116>
 8013f3a:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8013f3e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f46:	da2b      	bge.n	8013fa0 <kalman_3gyro.constprop.0+0x4500>
 8013f48:	ed9f ba13 	vldr	s22, [pc, #76]	; 8013f98 <kalman_3gyro.constprop.0+0x44f8>
 8013f4c:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8013f50:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f58:	db3a      	blt.n	8013fd0 <kalman_3gyro.constprop.0+0x4530>
 8013f5a:	e386      	b.n	801466a <kalman_3gyro.constprop.0+0x4bca>
 8013f5c:	40a00000 	.word	0x40a00000
 8013f60:	3cf5c28f 	.word	0x3cf5c28f
 8013f64:	3c75c28f 	.word	0x3c75c28f
 8013f68:	3dccccd0 	.word	0x3dccccd0
 8013f6c:	42855556 	.word	0x42855556
 8013f70:	3f866666 	.word	0x3f866666
 8013f74:	3d4ccccd 	.word	0x3d4ccccd
 8013f78:	3dcccccd 	.word	0x3dcccccd
 8013f7c:	3e4ccccd 	.word	0x3e4ccccd
 8013f80:	42200000 	.word	0x42200000
 8013f84:	40555555 	.word	0x40555555
 8013f88:	3ecccccc 	.word	0x3ecccccc
 8013f8c:	3fcccccd 	.word	0x3fcccccd
 8013f90:	43f00000 	.word	0x43f00000
 8013f94:	42ee0000 	.word	0x42ee0000
 8013f98:	00000000 	.word	0x00000000
 8013f9c:	eeb0 7a64 	vmov.f32	s14, s9
 8013fa0:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8013fa4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fac:	f140 8359 	bpl.w	8014662 <kalman_3gyro.constprop.0+0x4bc2>
 8013fb0:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8013fb4:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8013fb8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013fbc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013fc0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8013fc4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8013fc8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8013fcc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8013fd0:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8013fd4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fdc:	f2c0 835d 	blt.w	801469a <kalman_3gyro.constprop.0+0x4bfa>
 8013fe0:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8013fe4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8013fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fec:	f140 8402 	bpl.w	80147f4 <kalman_3gyro.constprop.0+0x4d54>
 8013ff0:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8013ff4:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8013ff8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8013ffc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014000:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8014004:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014008:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801400c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8014010:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8014014:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401c:	f200 835d 	bhi.w	80146da <kalman_3gyro.constprop.0+0x4c3a>
 8014020:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8014024:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402c:	f340 83e8 	ble.w	8014800 <kalman_3gyro.constprop.0+0x4d60>
 8014030:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8014034:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8014038:	ee38 3a47 	vsub.f32	s6, s16, s14
 801403c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014040:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8014044:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014048:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801404c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8014050:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8014054:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405c:	f200 835d 	bhi.w	801471a <kalman_3gyro.constprop.0+0x4c7a>
 8014060:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8014064:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406c:	f340 83b4 	ble.w	80147d8 <kalman_3gyro.constprop.0+0x4d38>
 8014070:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8014074:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8014078:	ee38 3a47 	vsub.f32	s6, s16, s14
 801407c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014080:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8014084:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014088:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801408c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8014090:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8014094:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409c:	f2c0 835c 	blt.w	8014758 <kalman_3gyro.constprop.0+0x4cb8>
 80140a0:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80140a4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80140a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ac:	f140 835c 	bpl.w	8014768 <kalman_3gyro.constprop.0+0x4cc8>
 80140b0:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 80140b4:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80140b8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80140bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80140c0:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80140c4:	ee24 7a03 	vmul.f32	s14, s8, s6
 80140c8:	ee87 ba24 	vdiv.f32	s22, s14, s9
 80140cc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80140d0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80140d4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80140d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140dc:	f6fc aeda 	blt.w	8010e94 <kalman_3gyro.constprop.0+0x13f4>
 80140e0:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80140e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e8:	f57c aed4 	bpl.w	8010e94 <kalman_3gyro.constprop.0+0x13f4>
 80140ec:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 80140f0:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 80140f4:	ee78 3a47 	vsub.f32	s7, s16, s14
 80140f8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80140fc:	ee35 7a47 	vsub.f32	s14, s10, s14
 8014100:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8014104:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8014108:	ee3b ba04 	vadd.f32	s22, s22, s8
 801410c:	f7fc bec2 	b.w	8010e94 <kalman_3gyro.constprop.0+0x13f4>
 8014110:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8014114:	eef4 7acd 	vcmpe.f32	s15, s26
 8014118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411c:	dd2c      	ble.n	8014178 <kalman_3gyro.constprop.0+0x46d8>
 801411e:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8014122:	eef4 7aeb 	vcmpe.f32	s15, s23
 8014126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412a:	dd25      	ble.n	8014178 <kalman_3gyro.constprop.0+0x46d8>
 801412c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8014130:	eef4 7aec 	vcmpe.f32	s15, s25
 8014134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014138:	dd1e      	ble.n	8014178 <kalman_3gyro.constprop.0+0x46d8>
 801413a:	eddd 5a03 	vldr	s11, [sp, #12]
 801413e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014142:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414a:	d515      	bpl.n	8014178 <kalman_3gyro.constprop.0+0x46d8>
 801414c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014150:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014154:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014160:	d50a      	bpl.n	8014178 <kalman_3gyro.constprop.0+0x46d8>
 8014162:	2300      	movs	r3, #0
 8014164:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014168:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801416c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8014170:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014174:	f7fd bf4c 	b.w	8012010 <kalman_3gyro.constprop.0+0x2570>
 8014178:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 801417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	dd0b      	ble.n	801419e <kalman_3gyro.constprop.0+0x46fe>
 8014186:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801418a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	f100 843f 	bmi.w	8014a14 <kalman_3gyro.constprop.0+0x4f74>
 8014196:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801419a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801419e:	2300      	movs	r3, #0
 80141a0:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80141a4:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80141a8:	f7fd bf32 	b.w	8012010 <kalman_3gyro.constprop.0+0x2570>
 80141ac:	2301      	movs	r3, #1
 80141ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80141b2:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 80141b6:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 80141ba:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 80141be:	edd2 5a00 	vldr	s11, [r2]
 80141c2:	ed93 7a00 	vldr	s14, [r3]
 80141c6:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 80141ca:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 80141ce:	ed92 5a00 	vldr	s10, [r2]
 80141d2:	edd3 6a00 	vldr	s13, [r3]
 80141d6:	ee25 4aa5 	vmul.f32	s8, s11, s11
 80141da:	ee67 4a07 	vmul.f32	s9, s14, s14
 80141de:	eea5 4a05 	vfma.f32	s8, s10, s10
 80141e2:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 80141e6:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 80141ea:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80141ee:	aa5d      	add	r2, sp, #372	; 0x174
 80141f0:	a833      	add	r0, sp, #204	; 0xcc
 80141f2:	ed91 6a00 	vldr	s12, [r1]
 80141f6:	edd3 7a00 	vldr	s15, [r3]
 80141fa:	eea6 4a06 	vfma.f32	s8, s12, s12
 80141fe:	a92d      	add	r1, sp, #180	; 0xb4
 8014200:	ad5d      	add	r5, sp, #372	; 0x174
 8014202:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8014206:	ac66      	add	r4, sp, #408	; 0x198
 8014208:	eef1 2ac4 	vsqrt.f32	s5, s8
 801420c:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8014210:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8014214:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8014218:	eec3 4a83 	vdiv.f32	s9, s7, s6
 801421c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014220:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014224:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014228:	ee65 5a84 	vmul.f32	s11, s11, s8
 801422c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014230:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014234:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8014238:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801423c:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8014240:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8014244:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8014248:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 801424c:	f7fa fbac 	bl	800e9a8 <getRotationMatrix>
 8014250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014258:	682e      	ldr	r6, [r5, #0]
 801425a:	6026      	str	r6, [r4, #0]
 801425c:	ad66      	add	r5, sp, #408	; 0x198
 801425e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014260:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8014264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801426a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801426e:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8014272:	6026      	str	r6, [r4, #0]
 8014274:	eef0 7ae7 	vabs.f32	s15, s15
 8014278:	eeb0 7ac7 	vabs.f32	s14, s14
 801427c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014284:	f100 81df 	bmi.w	8014646 <kalman_3gyro.constprop.0+0x4ba6>
 8014288:	2307      	movs	r3, #7
 801428a:	f04f 0c04 	mov.w	ip, #4
 801428e:	9305      	str	r3, [sp, #20]
 8014290:	2300      	movs	r3, #0
 8014292:	4662      	mov	r2, ip
 8014294:	2003      	movs	r0, #3
 8014296:	2706      	movs	r7, #6
 8014298:	f04f 0e01 	mov.w	lr, #1
 801429c:	9304      	str	r3, [sp, #16]
 801429e:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 80142a2:	eeb0 7ac7 	vabs.f32	s14, s14
 80142a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ae:	f340 8296 	ble.w	80147de <kalman_3gyro.constprop.0+0x4d3e>
 80142b2:	2306      	movs	r3, #6
 80142b4:	930a      	str	r3, [sp, #40]	; 0x28
 80142b6:	2307      	movs	r3, #7
 80142b8:	9305      	str	r3, [sp, #20]
 80142ba:	2300      	movs	r3, #0
 80142bc:	2708      	movs	r7, #8
 80142be:	f04f 0c04 	mov.w	ip, #4
 80142c2:	9302      	str	r3, [sp, #8]
 80142c4:	2302      	movs	r3, #2
 80142c6:	9707      	str	r7, [sp, #28]
 80142c8:	4662      	mov	r2, ip
 80142ca:	2005      	movs	r0, #5
 80142cc:	f04f 0e01 	mov.w	lr, #1
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	ab66      	add	r3, sp, #408	; 0x198
 80142d4:	441a      	add	r2, r3
 80142d6:	9b07      	ldr	r3, [sp, #28]
 80142d8:	edd2 6a00 	vldr	s13, [r2]
 80142dc:	9a02      	ldr	r2, [sp, #8]
 80142de:	a966      	add	r1, sp, #408	; 0x198
 80142e0:	440b      	add	r3, r1
 80142e2:	ed93 7a00 	vldr	s14, [r3]
 80142e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142ea:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80142ee:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80142f2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80142f6:	9a04      	ldr	r2, [sp, #16]
 80142f8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80142fc:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8014300:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014304:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8014308:	0080      	lsls	r0, r0, #2
 801430a:	900e      	str	r0, [sp, #56]	; 0x38
 801430c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801430e:	940d      	str	r4, [sp, #52]	; 0x34
 8014310:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014314:	edc3 7a00 	vstr	s15, [r3]
 8014318:	ed96 7a00 	vldr	s14, [r6]
 801431c:	edd1 7a00 	vldr	s15, [r1]
 8014320:	930c      	str	r3, [sp, #48]	; 0x30
 8014322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014326:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 801432a:	0080      	lsls	r0, r0, #2
 801432c:	9006      	str	r0, [sp, #24]
 801432e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8014332:	00bf      	lsls	r7, r7, #2
 8014334:	9711      	str	r7, [sp, #68]	; 0x44
 8014336:	9f05      	ldr	r7, [sp, #20]
 8014338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801433a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 801433e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014342:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	9307      	str	r3, [sp, #28]
 801434a:	9b02      	ldr	r3, [sp, #8]
 801434c:	edc6 6a00 	vstr	s13, [r6]
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	930b      	str	r3, [sp, #44]	; 0x2c
 8014354:	9b04      	ldr	r3, [sp, #16]
 8014356:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	9312      	str	r3, [sp, #72]	; 0x48
 801435c:	9b05      	ldr	r3, [sp, #20]
 801435e:	ed96 7a00 	vldr	s14, [r6]
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	9309      	str	r3, [sp, #36]	; 0x24
 8014366:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801436a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801436c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8014370:	ed93 6a00 	vldr	s12, [r3]
 8014374:	edd2 7a00 	vldr	s15, [r2]
 8014378:	eee6 7a47 	vfms.f32	s15, s12, s14
 801437c:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8014380:	950a      	str	r5, [sp, #40]	; 0x28
 8014382:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8014386:	edc2 7a00 	vstr	s15, [r2]
 801438a:	ed96 7a00 	vldr	s14, [r6]
 801438e:	edd4 7a00 	vldr	s15, [r4]
 8014392:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014396:	edc4 7a00 	vstr	s15, [r4]
 801439a:	edd0 5a00 	vldr	s11, [r0]
 801439e:	ed97 7a00 	vldr	s14, [r7]
 80143a2:	eea6 7a65 	vfms.f32	s14, s12, s11
 80143a6:	eef0 7ae7 	vabs.f32	s15, s15
 80143aa:	ed87 7a00 	vstr	s14, [r7]
 80143ae:	ed90 6a00 	vldr	s12, [r0]
 80143b2:	ed91 7a00 	vldr	s14, [r1]
 80143b6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80143ba:	ed81 7a00 	vstr	s14, [r1]
 80143be:	ed92 7a00 	vldr	s14, [r2]
 80143c2:	eeb0 7ac7 	vabs.f32	s14, s14
 80143c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ce:	dd12      	ble.n	80143f6 <kalman_3gyro.constprop.0+0x4956>
 80143d0:	9a07      	ldr	r2, [sp, #28]
 80143d2:	9f05      	ldr	r7, [sp, #20]
 80143d4:	9806      	ldr	r0, [sp, #24]
 80143d6:	9209      	str	r2, [sp, #36]	; 0x24
 80143d8:	4673      	mov	r3, lr
 80143da:	f8dd e008 	ldr.w	lr, [sp, #8]
 80143de:	9302      	str	r3, [sp, #8]
 80143e0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	9206      	str	r2, [sp, #24]
 80143e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ea:	00ba      	lsls	r2, r7, #2
 80143ec:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80143f0:	4605      	mov	r5, r0
 80143f2:	9207      	str	r2, [sp, #28]
 80143f4:	930a      	str	r3, [sp, #40]	; 0x28
 80143f6:	9b06      	ldr	r3, [sp, #24]
 80143f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80143fa:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80143fe:	4413      	add	r3, r2
 8014400:	461c      	mov	r4, r3
 8014402:	462b      	mov	r3, r5
 8014404:	4413      	add	r3, r2
 8014406:	ed94 7a00 	vldr	s14, [r4]
 801440a:	edd3 7a00 	vldr	s15, [r3]
 801440e:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8014412:	4618      	mov	r0, r3
 8014414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014416:	4413      	add	r3, r2
 8014418:	461a      	mov	r2, r3
 801441a:	9b07      	ldr	r3, [sp, #28]
 801441c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014420:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014424:	440b      	add	r3, r1
 8014426:	4619      	mov	r1, r3
 8014428:	442e      	add	r6, r5
 801442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801442c:	9607      	str	r6, [sp, #28]
 801442e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014430:	ed84 2a00 	vstr	s4, [r4]
 8014434:	442b      	add	r3, r5
 8014436:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 801443a:	9306      	str	r3, [sp, #24]
 801443c:	19bb      	adds	r3, r7, r6
 801443e:	ed92 7a00 	vldr	s14, [r2]
 8014442:	edd1 7a00 	vldr	s15, [r1]
 8014446:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014448:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801444c:	edd3 3a00 	vldr	s7, [r3]
 8014450:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8014454:	eee2 7a47 	vfms.f32	s15, s4, s14
 8014458:	4423      	add	r3, r4
 801445a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801445e:	ed93 5a00 	vldr	s10, [r3]
 8014462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014464:	edc1 7a00 	vstr	s15, [r1]
 8014468:	462f      	mov	r7, r5
 801446a:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801446e:	4629      	mov	r1, r5
 8014470:	eb05 0c03 	add.w	ip, r5, r3
 8014474:	9d04      	ldr	r5, [sp, #16]
 8014476:	ed92 1a00 	vldr	s2, [r2]
 801447a:	4437      	add	r7, r6
 801447c:	9705      	str	r7, [sp, #20]
 801447e:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8014482:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8014486:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801448a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801448e:	4419      	add	r1, r3
 8014490:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8014494:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8014498:	191c      	adds	r4, r3, r4
 801449a:	9b02      	ldr	r3, [sp, #8]
 801449c:	9104      	str	r1, [sp, #16]
 801449e:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 80144a2:	9409      	str	r4, [sp, #36]	; 0x24
 80144a4:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80144a8:	463d      	mov	r5, r7
 80144aa:	9904      	ldr	r1, [sp, #16]
 80144ac:	46b6      	mov	lr, r6
 80144ae:	4623      	mov	r3, r4
 80144b0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80144b4:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 80144b8:	edd0 7a00 	vldr	s15, [r0]
 80144bc:	9805      	ldr	r0, [sp, #20]
 80144be:	ed91 0a00 	vldr	s0, [r1]
 80144c2:	ed90 8a00 	vldr	s16, [r0]
 80144c6:	eddc 4a00 	vldr	s9, [ip]
 80144ca:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 80144ce:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 80144d2:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80144d6:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 80144da:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 80144de:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 80144e2:	a85d      	add	r0, sp, #372	; 0x174
 80144e4:	a93e      	add	r1, sp, #248	; 0xf8
 80144e6:	edd7 5a00 	vldr	s11, [r7]
 80144ea:	ed96 6a00 	vldr	s12, [r6]
 80144ee:	9a06      	ldr	r2, [sp, #24]
 80144f0:	ed95 7a00 	vldr	s14, [r5]
 80144f4:	edd4 6a00 	vldr	s13, [r4]
 80144f8:	ed93 3a00 	vldr	s6, [r3]
 80144fc:	edde 7a00 	vldr	s15, [lr]
 8014500:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014502:	edd2 1a00 	vldr	s3, [r2]
 8014506:	9e07      	ldr	r6, [sp, #28]
 8014508:	eee8 3a45 	vfms.f32	s7, s16, s10
 801450c:	eee0 4a45 	vfms.f32	s9, s0, s10
 8014510:	eea8 6a65 	vfms.f32	s12, s16, s11
 8014514:	eee7 7a48 	vfms.f32	s15, s14, s16
 8014518:	eee0 6a65 	vfms.f32	s13, s0, s11
 801451c:	eea7 3a40 	vfms.f32	s6, s14, s0
 8014520:	ed94 0a00 	vldr	s0, [r4]
 8014524:	eea2 3a67 	vfms.f32	s6, s4, s15
 8014528:	eee3 4ac2 	vfms.f32	s9, s7, s4
 801452c:	eee2 6a46 	vfms.f32	s13, s4, s12
 8014530:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8014534:	ee64 6a26 	vmul.f32	s13, s8, s13
 8014538:	ee64 4a24 	vmul.f32	s9, s8, s9
 801453c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014540:	eea1 6a66 	vfms.f32	s12, s2, s13
 8014544:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8014548:	eee4 7a41 	vfms.f32	s15, s8, s2
 801454c:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8014550:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8014554:	eea4 7a61 	vfms.f32	s14, s8, s3
 8014558:	ed96 3a00 	vldr	s6, [r6]
 801455c:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8014560:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8014564:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8014568:	ee22 6a86 	vmul.f32	s12, s5, s12
 801456c:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8014570:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8014574:	eee3 5a46 	vfms.f32	s11, s6, s12
 8014578:	ee27 7a02 	vmul.f32	s14, s14, s4
 801457c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8014580:	ee62 5a25 	vmul.f32	s11, s4, s11
 8014584:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8014588:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 801458c:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8014590:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8014594:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8014598:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 801459c:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 80145a0:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 80145a4:	f7fa faa0 	bl	800eae8 <b_dcm2q>
 80145a8:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 80145ac:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80145b0:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80145b4:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 80145b8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80145bc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80145c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80145c4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80145c8:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 80145cc:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	f43d ad20 	beq.w	8012016 <kalman_3gyro.constprop.0+0x2576>
 80145d6:	2200      	movs	r2, #0
 80145d8:	9b01      	ldr	r3, [sp, #4]
 80145da:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80145de:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 80145e2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 80145e6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80145ea:	f7fd bd9c 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 80145ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80145f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80145f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80145fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145fe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014602:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014606:	eeb1 6ae7 	vsqrt.f32	s12, s15
 801460a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801460e:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8014612:	f7ff bb12 	b.w	8013c3a <kalman_3gyro.constprop.0+0x419a>
 8014616:	eeb0 7a64 	vmov.f32	s14, s9
 801461a:	f7fc bc8b 	b.w	8010f34 <kalman_3gyro.constprop.0+0x1494>
 801461e:	eeb0 7a64 	vmov.f32	s14, s9
 8014622:	f7ff bb94 	b.w	8013d4e <kalman_3gyro.constprop.0+0x42ae>
 8014626:	eeb0 7a64 	vmov.f32	s14, s9
 801462a:	f7ff bb50 	b.w	8013cce <kalman_3gyro.constprop.0+0x422e>
 801462e:	eeb0 7a64 	vmov.f32	s14, s9
 8014632:	f7fc bc9f 	b.w	8010f74 <kalman_3gyro.constprop.0+0x14d4>
 8014636:	eeb0 7a64 	vmov.f32	s14, s9
 801463a:	f7ff bb68 	b.w	8013d0e <kalman_3gyro.constprop.0+0x426e>
 801463e:	eeb0 7a64 	vmov.f32	s14, s9
 8014642:	f7fc bcb7 	b.w	8010fb4 <kalman_3gyro.constprop.0+0x1514>
 8014646:	2200      	movs	r2, #0
 8014648:	2004      	movs	r0, #4
 801464a:	2301      	movs	r3, #1
 801464c:	2406      	movs	r4, #6
 801464e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014652:	9007      	str	r0, [sp, #28]
 8014654:	eef0 7a47 	vmov.f32	s15, s14
 8014658:	4696      	mov	lr, r2
 801465a:	f04f 0c03 	mov.w	ip, #3
 801465e:	2707      	movs	r7, #7
 8014660:	e61d      	b.n	801429e <kalman_3gyro.constprop.0+0x47fe>
 8014662:	ed9f bae2 	vldr	s22, [pc, #904]	; 80149ec <kalman_3gyro.constprop.0+0x4f4c>
 8014666:	eeb0 7a64 	vmov.f32	s14, s9
 801466a:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 801466e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014676:	f140 80b9 	bpl.w	80147ec <kalman_3gyro.constprop.0+0x4d4c>
 801467a:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 801467e:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8014682:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014686:	ee34 4a63 	vsub.f32	s8, s8, s7
 801468a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801468e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014692:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014696:	ee3b ba23 	vadd.f32	s22, s22, s7
 801469a:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 801469e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	f6ff acb3 	blt.w	8014010 <kalman_3gyro.constprop.0+0x4570>
 80146aa:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 80146ae:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80146b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b6:	f140 80a0 	bpl.w	80147fa <kalman_3gyro.constprop.0+0x4d5a>
 80146ba:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 80146be:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 80146c2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80146c6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80146ca:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80146ce:	ee64 4a03 	vmul.f32	s9, s8, s6
 80146d2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80146d6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80146da:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 80146de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80146e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e6:	f63f acb3 	bhi.w	8014050 <kalman_3gyro.constprop.0+0x45b0>
 80146ea:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 80146ee:	eef4 4ac8 	vcmpe.f32	s9, s16
 80146f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f6:	f340 8086 	ble.w	8014806 <kalman_3gyro.constprop.0+0x4d66>
 80146fa:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 80146fe:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8014702:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014706:	ee34 4a63 	vsub.f32	s8, s8, s7
 801470a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801470e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014712:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014716:	ee3b ba23 	vadd.f32	s22, s22, s7
 801471a:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 801471e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014726:	f63f acb3 	bhi.w	8014090 <kalman_3gyro.constprop.0+0x45f0>
 801472a:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 801472e:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014736:	dd69      	ble.n	801480c <kalman_3gyro.constprop.0+0x4d6c>
 8014738:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 801473c:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8014740:	ee38 3a47 	vsub.f32	s6, s16, s14
 8014744:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014748:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801474c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014750:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8014754:	ee3b ba23 	vadd.f32	s22, s22, s7
 8014758:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801475c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014764:	f63f acb4 	bhi.w	80140d0 <kalman_3gyro.constprop.0+0x4630>
 8014768:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801476c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8014770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014774:	f77f acb4 	ble.w	80140e0 <kalman_3gyro.constprop.0+0x4640>
 8014778:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801477c:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8014780:	ee78 3a64 	vsub.f32	s7, s16, s9
 8014784:	ee35 5a44 	vsub.f32	s10, s10, s8
 8014788:	ee37 7a64 	vsub.f32	s14, s14, s9
 801478c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014790:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8014794:	ee3b ba04 	vadd.f32	s22, s22, s8
 8014798:	f7fc bb7c 	b.w	8010e94 <kalman_3gyro.constprop.0+0x13f4>
 801479c:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80147a0:	eddf 7a93 	vldr	s15, [pc, #588]	; 80149f0 <kalman_3gyro.constprop.0+0x4f50>
 80147a4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80149f4 <kalman_3gyro.constprop.0+0x4f54>
 80147a8:	3301      	adds	r3, #1
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	2b31      	cmp	r3, #49	; 0x31
 80147ae:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80147b2:	bf98      	it	ls
 80147b4:	eef0 7a47 	vmovls.f32	s15, s14
 80147b8:	f7fd bc1c 	b.w	8011ff4 <kalman_3gyro.constprop.0+0x2554>
 80147bc:	2a0a      	cmp	r2, #10
 80147be:	d02c      	beq.n	801481a <kalman_3gyro.constprop.0+0x4d7a>
 80147c0:	2100      	movs	r1, #0
 80147c2:	3201      	adds	r2, #1
 80147c4:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80147c8:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80147cc:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80147d0:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 80147d4:	f7fd bca7 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 80147d8:	eeb0 7a64 	vmov.f32	s14, s9
 80147dc:	e7a5      	b.n	801472a <kalman_3gyro.constprop.0+0x4c8a>
 80147de:	2305      	movs	r3, #5
 80147e0:	2108      	movs	r1, #8
 80147e2:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 80147e6:	2302      	movs	r3, #2
 80147e8:	9302      	str	r3, [sp, #8]
 80147ea:	e572      	b.n	80142d2 <kalman_3gyro.constprop.0+0x4832>
 80147ec:	eeb0 7a64 	vmov.f32	s14, s9
 80147f0:	f7ff bbf6 	b.w	8013fe0 <kalman_3gyro.constprop.0+0x4540>
 80147f4:	eeb0 7a64 	vmov.f32	s14, s9
 80147f8:	e757      	b.n	80146aa <kalman_3gyro.constprop.0+0x4c0a>
 80147fa:	eeb0 7a64 	vmov.f32	s14, s9
 80147fe:	e40f      	b.n	8014020 <kalman_3gyro.constprop.0+0x4580>
 8014800:	eeb0 7a64 	vmov.f32	s14, s9
 8014804:	e771      	b.n	80146ea <kalman_3gyro.constprop.0+0x4c4a>
 8014806:	eeb0 7a64 	vmov.f32	s14, s9
 801480a:	e429      	b.n	8014060 <kalman_3gyro.constprop.0+0x45c0>
 801480c:	eeb0 7a64 	vmov.f32	s14, s9
 8014810:	e446      	b.n	80140a0 <kalman_3gyro.constprop.0+0x4600>
 8014812:	ed9f ea76 	vldr	s28, [pc, #472]	; 80149ec <kalman_3gyro.constprop.0+0x4f4c>
 8014816:	f7fc bb6d 	b.w	8010ef4 <kalman_3gyro.constprop.0+0x1454>
 801481a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801481c:	ed94 3a00 	vldr	s6, [r4]
 8014820:	edd2 5a00 	vldr	s11, [r2]
 8014824:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014826:	edd0 3a00 	vldr	s7, [r0]
 801482a:	ed92 1a00 	vldr	s2, [r2]
 801482e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014830:	ed91 4a00 	vldr	s8, [r1]
 8014834:	edd2 4a00 	vldr	s9, [r2]
 8014838:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801483a:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 801483e:	ed92 2a00 	vldr	s4, [r2]
 8014842:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014844:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8014848:	edd2 7a00 	vldr	s15, [r2]
 801484c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801484e:	edd2 2a00 	vldr	s5, [r2]
 8014852:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014854:	ee75 5a81 	vadd.f32	s11, s11, s2
 8014858:	edd2 1a00 	vldr	s3, [r2]
 801485c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801485e:	ee74 4a82 	vadd.f32	s9, s9, s4
 8014862:	ee75 5a83 	vadd.f32	s11, s11, s6
 8014866:	ed92 3a00 	vldr	s6, [r2]
 801486a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801486c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8014870:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014874:	edd2 3a00 	vldr	s7, [r2]
 8014878:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801487a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801487e:	ed92 4a00 	vldr	s8, [r2]
 8014882:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014884:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014888:	ed92 2a00 	vldr	s4, [r2]
 801488c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801488e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8014892:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8014896:	edd2 2a00 	vldr	s5, [r2]
 801489a:	ed91 3a00 	vldr	s6, [r1]
 801489e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80148a2:	ee74 4a82 	vadd.f32	s9, s9, s4
 80148a6:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 80148aa:	ee75 5a84 	vadd.f32	s11, s11, s8
 80148ae:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 80148b2:	ed90 4a00 	vldr	s8, [r0]
 80148b6:	edd2 3a00 	vldr	s7, [r2]
 80148ba:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 80148be:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80148c2:	ed91 2a00 	vldr	s4, [r1]
 80148c6:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80148ca:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80148ce:	ee74 4a83 	vadd.f32	s9, s9, s6
 80148d2:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 80148d6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80148da:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 80148de:	ed90 4a00 	vldr	s8, [r0]
 80148e2:	edd2 2a00 	vldr	s5, [r2]
 80148e6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 80148ea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80148ee:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 80148f2:	edd1 3a00 	vldr	s7, [r1]
 80148f6:	ed90 3a00 	vldr	s6, [r0]
 80148fa:	ee74 4a82 	vadd.f32	s9, s9, s4
 80148fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014902:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8014906:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 801490a:	ed92 4a00 	vldr	s8, [r2]
 801490e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8014912:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8014916:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 801491a:	edd0 3a00 	vldr	s7, [r0]
 801491e:	edd4 2a00 	vldr	s5, [r4]
 8014922:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8014926:	ee75 5a83 	vadd.f32	s11, s11, s6
 801492a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 801492e:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8014932:	ed91 3a00 	vldr	s6, [r1]
 8014936:	ee77 7a84 	vadd.f32	s15, s15, s8
 801493a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801493e:	ed92 4a00 	vldr	s8, [r2]
 8014942:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8014946:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 801494a:	edd4 3a00 	vldr	s7, [r4]
 801494e:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8014952:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8014956:	ee77 7a84 	vadd.f32	s15, s15, s8
 801495a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801495e:	ed91 4a00 	vldr	s8, [r1]
 8014962:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8014966:	ee77 7a84 	vadd.f32	s15, s15, s8
 801496a:	ee64 4a85 	vmul.f32	s9, s9, s10
 801496e:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8014972:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014976:	edc1 4a00 	vstr	s9, [r1]
 801497a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801497e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014982:	edc1 5a00 	vstr	s11, [r1]
 8014986:	f240 1501 	movw	r5, #257	; 0x101
 801498a:	3201      	adds	r2, #1
 801498c:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8014990:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8014994:	edc1 7a00 	vstr	s15, [r1]
 8014998:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801499c:	2800      	cmp	r0, #0
 801499e:	f43d abc2 	beq.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 80149a2:	2200      	movs	r2, #0
 80149a4:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 80149a8:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 80149ac:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 80149b0:	f88b 2001 	strb.w	r2, [fp, #1]
 80149b4:	f7fd bbb7 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 80149b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80149bc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80149c0:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80149c4:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80149c8:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80149cc:	f7fd bb20 	b.w	8012010 <kalman_3gyro.constprop.0+0x2570>
 80149d0:	2a00      	cmp	r2, #0
 80149d2:	f340 80c1 	ble.w	8014b58 <kalman_3gyro.constprop.0+0x50b8>
 80149d6:	2300      	movs	r3, #0
 80149d8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80149dc:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80149e0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80149e4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80149e8:	f7fc bfcf 	b.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 80149ec:	00000000 	.word	0x00000000
 80149f0:	3e4cccce 	.word	0x3e4cccce
 80149f4:	3eaaaaab 	.word	0x3eaaaaab
 80149f8:	3e999998 	.word	0x3e999998
 80149fc:	3f99999a 	.word	0x3f99999a
 8014a00:	3dccccd0 	.word	0x3dccccd0
 8014a04:	3f8ccccd 	.word	0x3f8ccccd
 8014a08:	3e4ccccd 	.word	0x3e4ccccd
 8014a0c:	3d088889 	.word	0x3d088889
 8014a10:	3d0d3dcb 	.word	0x3d0d3dcb
 8014a14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a20:	d55b      	bpl.n	8014ada <kalman_3gyro.constprop.0+0x503a>
 8014a22:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8014a00 <kalman_3gyro.constprop.0+0x4f60>
 8014a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014a2e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014a32:	eef0 5a66 	vmov.f32	s11, s13
 8014a36:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014a3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a42:	eeb0 7a65 	vmov.f32	s14, s11
 8014a46:	db5b      	blt.n	8014b00 <kalman_3gyro.constprop.0+0x5060>
 8014a48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a54:	d55b      	bpl.n	8014b0e <kalman_3gyro.constprop.0+0x506e>
 8014a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a5a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014a5e:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80149f8 <kalman_3gyro.constprop.0+0x4f58>
 8014a62:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80149fc <kalman_3gyro.constprop.0+0x4f5c>
 8014a66:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014a6a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8014a6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a76:	db5b      	blt.n	8014b30 <kalman_3gyro.constprop.0+0x5090>
 8014a78:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a84:	d55b      	bpl.n	8014b3e <kalman_3gyro.constprop.0+0x509e>
 8014a86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a8e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014a92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a96:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014a9a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014a9e:	f7ff bb7e 	b.w	801419e <kalman_3gyro.constprop.0+0x46fe>
 8014aa2:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014aa6:	2b27      	cmp	r3, #39	; 0x27
 8014aa8:	f200 80c3 	bhi.w	8014c32 <kalman_3gyro.constprop.0+0x5192>
 8014aac:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8014ab0:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8014ab4:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8014ab8:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8014abc:	2201      	movs	r2, #1
 8014abe:	4413      	add	r3, r2
 8014ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ac4:	bf14      	ite	ne
 8014ac6:	b29b      	uxthne	r3, r3
 8014ac8:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8014acc:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8014ad0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014ad4:	9b01      	ldr	r3, [sp, #4]
 8014ad6:	f7fd bb26 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 8014ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ade:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae6:	d5af      	bpl.n	8014a48 <kalman_3gyro.constprop.0+0x4fa8>
 8014ae8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014aec:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8014a00 <kalman_3gyro.constprop.0+0x4f60>
 8014af0:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8014a04 <kalman_3gyro.constprop.0+0x4f64>
 8014af4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014af8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014afc:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014b00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014b04:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b0c:	dbad      	blt.n	8014a6a <kalman_3gyro.constprop.0+0x4fca>
 8014b0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1a:	d5ad      	bpl.n	8014a78 <kalman_3gyro.constprop.0+0x4fd8>
 8014b1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014b20:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014b24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014b28:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8014b2c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014b30:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8014b34:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b3c:	dbad      	blt.n	8014a9a <kalman_3gyro.constprop.0+0x4ffa>
 8014b3e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b46:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8014a08 <kalman_3gyro.constprop.0+0x4f68>
 8014b4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014b4e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b52:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014b56:	e7a0      	b.n	8014a9a <kalman_3gyro.constprop.0+0x4ffa>
 8014b58:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8014b5c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8014b60:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8014b64:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8014b68:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014b6c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014b70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014b74:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8014b78:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8014b7c:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8014b80:	f7fc bf03 	b.w	801198a <kalman_3gyro.constprop.0+0x1eea>
 8014b84:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8014a0c <kalman_3gyro.constprop.0+0x4f6c>
 8014b88:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8014a10 <kalman_3gyro.constprop.0+0x4f70>
 8014b8c:	ac33      	add	r4, sp, #204	; 0xcc
 8014b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b92:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8014b96:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8014b9a:	eef0 7a66 	vmov.f32	s15, s13
 8014b9e:	3001      	adds	r0, #1
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8014ba6:	320c      	adds	r2, #12
 8014ba8:	428a      	cmp	r2, r1
 8014baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bae:	d1f8      	bne.n	8014ba2 <kalman_3gyro.constprop.0+0x5102>
 8014bb0:	ee27 7a84 	vmul.f32	s14, s15, s8
 8014bb4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014bb8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014bbc:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8014bc0:	330c      	adds	r3, #12
 8014bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014bc6:	428b      	cmp	r3, r1
 8014bc8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8014bcc:	d1f6      	bne.n	8014bbc <kalman_3gyro.constprop.0+0x511c>
 8014bce:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014bd2:	2802      	cmp	r0, #2
 8014bd4:	f103 0104 	add.w	r1, r3, #4
 8014bd8:	ece4 6a01 	vstmia	r4!, {s13}
 8014bdc:	d1d9      	bne.n	8014b92 <kalman_3gyro.constprop.0+0x50f2>
 8014bde:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8014be2:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8014be6:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8014bea:	eef1 3ae7 	vsqrt.f32	s7, s15
 8014bee:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8014bf2:	eef1 4ac7 	vsqrt.f32	s9, s14
 8014bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014bfa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8014bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c02:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8014c06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0e:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8014c12:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8014c16:	f57d aa62 	bpl.w	80120de <kalman_3gyro.constprop.0+0x263e>
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	9b01      	ldr	r3, [sp, #4]
 8014c1e:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8014c22:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8014c26:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8014c2a:	f88b 2001 	strb.w	r2, [fp, #1]
 8014c2e:	f7fd ba7a 	b.w	8012126 <kalman_3gyro.constprop.0+0x2686>
 8014c32:	9b08      	ldr	r3, [sp, #32]
 8014c34:	6999      	ldr	r1, [r3, #24]
 8014c36:	69da      	ldr	r2, [r3, #28]
 8014c38:	6a1b      	ldr	r3, [r3, #32]
 8014c3a:	9181      	str	r1, [sp, #516]	; 0x204
 8014c3c:	9282      	str	r2, [sp, #520]	; 0x208
 8014c3e:	9383      	str	r3, [sp, #524]	; 0x20c
 8014c40:	e73a      	b.n	8014ab8 <kalman_3gyro.constprop.0+0x5018>
 8014c42:	bf00      	nop
 8014c44:	0000      	movs	r0, r0
	...

08014c48 <iNemoEngine_API_Update>:
 8014c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c4c:	ed2d 8b0c 	vpush	{d8-d13}
 8014c50:	4604      	mov	r4, r0
 8014c52:	b0c1      	sub	sp, #260	; 0x104
 8014c54:	460d      	mov	r5, r1
 8014c56:	4617      	mov	r7, r2
 8014c58:	eeb0 8a40 	vmov.f32	s16, s0
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 8253 	beq.w	8015108 <iNemoEngine_API_Update+0x4c0>
 8014c62:	461e      	mov	r6, r3
 8014c64:	463b      	mov	r3, r7
 8014c66:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8014c6a:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8014c6e:	6859      	ldr	r1, [r3, #4]
 8014c70:	689a      	ldr	r2, [r3, #8]
 8014c72:	ab33      	add	r3, sp, #204	; 0xcc
 8014c74:	c307      	stmia	r3!, {r0, r1, r2}
 8014c76:	6879      	ldr	r1, [r7, #4]
 8014c78:	68ba      	ldr	r2, [r7, #8]
 8014c7a:	6838      	ldr	r0, [r7, #0]
 8014c7c:	ab30      	add	r3, sp, #192	; 0xc0
 8014c7e:	c307      	stmia	r3!, {r0, r1, r2}
 8014c80:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014c84:	6879      	ldr	r1, [r7, #4]
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	ab36      	add	r3, sp, #216	; 0xd8
 8014c8a:	c307      	stmia	r3!, {r0, r1, r2}
 8014c8c:	f1bc 0f00 	cmp.w	ip, #0
 8014c90:	d005      	beq.n	8014c9e <iNemoEngine_API_Update+0x56>
 8014c92:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014c96:	7923      	ldrb	r3, [r4, #4]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	f080 829b 	bcs.w	80151d4 <iNemoEngine_API_Update+0x58c>
 8014c9e:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8014ca2:	f10d 0a14 	add.w	sl, sp, #20
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	4649      	mov	r1, r9
 8014caa:	4650      	mov	r0, sl
 8014cac:	aa33      	add	r2, sp, #204	; 0xcc
 8014cae:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8014cb2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8014cb6:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8014cba:	f7f9 fb65 	bl	800e388 <rotVect>
 8014cbe:	aa36      	add	r2, sp, #216	; 0xd8
 8014cc0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014cc4:	a808      	add	r0, sp, #32
 8014cc6:	f7f9 fb5f 	bl	800e388 <rotVect>
 8014cca:	aa30      	add	r2, sp, #192	; 0xc0
 8014ccc:	4640      	mov	r0, r8
 8014cce:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8014cd2:	f7f9 fb59 	bl	800e388 <rotVect>
 8014cd6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014cda:	b923      	cbnz	r3, 8014ce6 <iNemoEngine_API_Update+0x9e>
 8014cdc:	4b8c      	ldr	r3, [pc, #560]	; (8014f10 <iNemoEngine_API_Update+0x2c8>)
 8014cde:	930c      	str	r3, [sp, #48]	; 0x30
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8014ce6:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8014cea:	2f09      	cmp	r7, #9
 8014cec:	d851      	bhi.n	8014d92 <iNemoEngine_API_Update+0x14a>
 8014cee:	ed9d ba06 	vldr	s22, [sp, #24]
 8014cf2:	eddd ba05 	vldr	s23, [sp, #20]
 8014cf6:	eddd aa07 	vldr	s21, [sp, #28]
 8014cfa:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8014cfe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014d02:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8014d06:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8014d0a:	ee17 0a90 	vmov	r0, s15
 8014d0e:	f7eb fc1b 	bl	8000548 <__aeabi_f2d>
 8014d12:	ec41 0b10 	vmov	d0, r0, r1
 8014d16:	f003 fed9 	bl	8018acc <sqrt>
 8014d1a:	ec51 0b10 	vmov	r0, r1, d0
 8014d1e:	f7eb ff1b 	bl	8000b58 <__aeabi_d2f>
 8014d22:	ee07 0a90 	vmov	s15, r0
 8014d26:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8014d2a:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8014d2e:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8014d32:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8014d36:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8014d3a:	ee6b ba87 	vmul.f32	s23, s23, s14
 8014d3e:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8014d42:	ee2b ba07 	vmul.f32	s22, s22, s14
 8014d46:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014d4a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8014d4e:	ee17 0a90 	vmov	r0, s15
 8014d52:	edcd ba05 	vstr	s23, [sp, #20]
 8014d56:	ed8d ba06 	vstr	s22, [sp, #24]
 8014d5a:	edcd aa07 	vstr	s21, [sp, #28]
 8014d5e:	f7eb fbf3 	bl	8000548 <__aeabi_f2d>
 8014d62:	ec41 0b10 	vmov	d0, r0, r1
 8014d66:	f003 feb1 	bl	8018acc <sqrt>
 8014d6a:	ec51 0b10 	vmov	r0, r1, d0
 8014d6e:	f7eb fef3 	bl	8000b58 <__aeabi_d2f>
 8014d72:	ee07 0a90 	vmov	s15, r0
 8014d76:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8014d7a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8014d7e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014d82:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014d86:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8014d8a:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8014d8e:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8014d92:	7923      	ldrb	r3, [r4, #4]
 8014d94:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	f080 80dd 	bcs.w	8014f58 <iNemoEngine_API_Update+0x310>
 8014d9e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014da2:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8014da6:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8014daa:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8014dae:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8014db2:	3701      	adds	r7, #1
 8014db4:	aa33      	add	r2, sp, #204	; 0xcc
 8014db6:	4649      	mov	r1, r9
 8014db8:	4640      	mov	r0, r8
 8014dba:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8014dbe:	9303      	str	r3, [sp, #12]
 8014dc0:	f7f9 fae2 	bl	800e388 <rotVect>
 8014dc4:	9b03      	ldr	r3, [sp, #12]
 8014dc6:	f8db 1000 	ldr.w	r1, [fp]
 8014dca:	6818      	ldr	r0, [r3, #0]
 8014dcc:	f8da 2000 	ldr.w	r2, [sl]
 8014dd0:	6833      	ldr	r3, [r6, #0]
 8014dd2:	61ab      	str	r3, [r5, #24]
 8014dd4:	60e8      	str	r0, [r5, #12]
 8014dd6:	6129      	str	r1, [r5, #16]
 8014dd8:	616a      	str	r2, [r5, #20]
 8014dda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014dde:	9301      	str	r3, [sp, #4]
 8014de0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014de4:	4641      	mov	r1, r8
 8014de6:	9300      	str	r3, [sp, #0]
 8014de8:	462a      	mov	r2, r5
 8014dea:	f105 031c 	add.w	r3, r5, #28
 8014dee:	f105 000c 	add.w	r0, r5, #12
 8014df2:	f7fa fd85 	bl	800f900 <output_update>
 8014df6:	ed95 8a00 	vldr	s16, [r5]
 8014dfa:	edd5 9a01 	vldr	s19, [r5, #4]
 8014dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8014e02:	f003 fdf7 	bl	80189f4 <sinf>
 8014e06:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014f14 <iNemoEngine_API_Update+0x2cc>
 8014e0a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8014f18 <iNemoEngine_API_Update+0x2d0>
 8014e0e:	ee60 8a00 	vmul.f32	s17, s0, s0
 8014e12:	eef0 6ae9 	vabs.f32	s13, s19
 8014e16:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8014e1a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e22:	eef0 8a67 	vmov.f32	s17, s15
 8014e26:	d56e      	bpl.n	8014f06 <iNemoEngine_API_Update+0x2be>
 8014e28:	eeb0 0a69 	vmov.f32	s0, s19
 8014e2c:	f003 fe24 	bl	8018a78 <tanf>
 8014e30:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014e34:	eea0 9a28 	vfma.f32	s18, s0, s17
 8014e38:	eef1 7ac9 	vsqrt.f32	s15, s18
 8014e3c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8014f1c <iNemoEngine_API_Update+0x2d4>
 8014e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8014f30 <iNemoEngine_API_Update+0x2e8>
 8014e44:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8014e48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014e4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e54:	bf88      	it	hi
 8014e56:	eef0 7a66 	vmovhi.f32	s15, s13
 8014e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e62:	bfb8      	it	lt
 8014e64:	eef0 7a47 	vmovlt.f32	s15, s14
 8014e68:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8014e6c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014e70:	4c2b      	ldr	r4, [pc, #172]	; (8014f20 <iNemoEngine_API_Update+0x2d8>)
 8014e72:	bba3      	cbnz	r3, 8014ede <iNemoEngine_API_Update+0x296>
 8014e74:	6820      	ldr	r0, [r4, #0]
 8014e76:	edd5 0a08 	vldr	s1, [r5, #32]
 8014e7a:	ed95 0a07 	vldr	s0, [r5, #28]
 8014e7e:	edd5 9a03 	vldr	s19, [r5, #12]
 8014e82:	ed95 aa04 	vldr	s20, [r5, #16]
 8014e86:	ed95 9a05 	vldr	s18, [r5, #20]
 8014e8a:	edd5 8a06 	vldr	s17, [r5, #24]
 8014e8e:	f7f9 fb4b 	bl	800e528 <findDirection>
 8014e92:	6020      	str	r0, [r4, #0]
 8014e94:	2805      	cmp	r0, #5
 8014e96:	f200 833d 	bhi.w	8015514 <iNemoEngine_API_Update+0x8cc>
 8014e9a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014e9e:	000a      	.short	0x000a
 8014ea0:	00060137 	.word	0x00060137
 8014ea4:	00060169 	.word	0x00060169
 8014ea8:	000a      	.short	0x000a
 8014eaa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014f24 <iNemoEngine_API_Update+0x2dc>
 8014eae:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014eb2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014f54 <iNemoEngine_API_Update+0x30c>
 8014eb6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ebe:	bfa8      	it	ge
 8014ec0:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8014ec4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ecc:	f100 8111 	bmi.w	80150f2 <iNemoEngine_API_Update+0x4aa>
 8014ed0:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8014ed4:	b041      	add	sp, #260	; 0x104
 8014ed6:	ecbd 8b0c 	vpop	{d8-d13}
 8014eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ede:	ed95 9a05 	vldr	s18, [r5, #20]
 8014ee2:	6820      	ldr	r0, [r4, #0]
 8014ee4:	edd5 0a07 	vldr	s1, [r5, #28]
 8014ee8:	ed95 0a08 	vldr	s0, [r5, #32]
 8014eec:	edd5 9a04 	vldr	s19, [r5, #16]
 8014ef0:	ed95 aa03 	vldr	s20, [r5, #12]
 8014ef4:	edd5 8a06 	vldr	s17, [r5, #24]
 8014ef8:	eeb1 1a41 	vneg.f32	s2, s2
 8014efc:	eeb1 9a49 	vneg.f32	s18, s18
 8014f00:	f7f9 fb12 	bl	800e528 <findDirection>
 8014f04:	e7c5      	b.n	8014e92 <iNemoEngine_API_Update+0x24a>
 8014f06:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014f28 <iNemoEngine_API_Update+0x2e0>
 8014f0a:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8014f0e:	e793      	b.n	8014e38 <iNemoEngine_API_Update+0x1f0>
 8014f10:	3f333333 	.word	0x3f333333
 8014f14:	00000000 	.word	0x00000000
 8014f18:	3fbc430e 	.word	0x3fbc430e
 8014f1c:	40490fdb 	.word	0x40490fdb
 8014f20:	20000210 	.word	0x20000210
 8014f24:	43340000 	.word	0x43340000
 8014f28:	42c6ab07 	.word	0x42c6ab07
 8014f2c:	3c03126f 	.word	0x3c03126f
 8014f30:	3c8efa35 	.word	0x3c8efa35
 8014f34:	3e4ccccd 	.word	0x3e4ccccd
 8014f38:	3fb50481 	.word	0x3fb50481
 8014f3c:	3ed93dd9 	.word	0x3ed93dd9
 8014f40:	3b656042 	.word	0x3b656042
 8014f44:	42c80000 	.word	0x42c80000
 8014f48:	3a83126f 	.word	0x3a83126f
 8014f4c:	3d4ccccd 	.word	0x3d4ccccd
 8014f50:	3f333333 	.word	0x3f333333
 8014f54:	43b40000 	.word	0x43b40000
 8014f58:	ee07 3a90 	vmov	s15, r3
 8014f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f60:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8014f2c <iNemoEngine_API_Update+0x2e4>
 8014f64:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8014f30 <iNemoEngine_API_Update+0x2e8>
 8014f68:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8014f40 <iNemoEngine_API_Update+0x2f8>
 8014f6c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8014f3c <iNemoEngine_API_Update+0x2f4>
 8014f70:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8014f38 <iNemoEngine_API_Update+0x2f0>
 8014f74:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8014f34 <iNemoEngine_API_Update+0x2ec>
 8014f78:	ee27 1a88 	vmul.f32	s2, s15, s16
 8014f7c:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8014f80:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8014f84:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8014f88:	2700      	movs	r7, #0
 8014f8a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8014f8e:	f04f 0c00 	mov.w	ip, #0
 8014f92:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8014f96:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8014f9a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8014f9e:	edd3 5a00 	vldr	s11, [r3]
 8014fa2:	f8c3 c000 	str.w	ip, [r3]
 8014fa6:	eef1 7ac5 	vsqrt.f32	s15, s10
 8014faa:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8014fae:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8014fb2:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8014fb6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8014fba:	edd7 4a00 	vldr	s9, [r7]
 8014fbe:	f8c7 c000 	str.w	ip, [r7]
 8014fc2:	ed93 5a00 	vldr	s10, [r3]
 8014fc6:	f8c3 c000 	str.w	ip, [r3]
 8014fca:	7963      	ldrb	r3, [r4, #5]
 8014fcc:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014fd0:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014fd4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8014fde:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014fe2:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014fea:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8014fee:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8014ff2:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8014ff6:	f000 812e 	beq.w	8015256 <iNemoEngine_API_Update+0x60e>
 8014ffa:	2b02      	cmp	r3, #2
 8014ffc:	f000 8122 	beq.w	8015244 <iNemoEngine_API_Update+0x5fc>
 8015000:	2b00      	cmp	r3, #0
 8015002:	f000 80ef 	beq.w	80151e4 <iNemoEngine_API_Update+0x59c>
 8015006:	edd4 0a05 	vldr	s1, [r4, #20]
 801500a:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8014f44 <iNemoEngine_API_Update+0x2fc>
 801500e:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8014f48 <iNemoEngine_API_Update+0x300>
 8015012:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015016:	ee60 0a85 	vmul.f32	s1, s1, s10
 801501a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801501e:	8863      	ldrh	r3, [r4, #2]
 8015020:	1e5a      	subs	r2, r3, #1
 8015022:	2a12      	cmp	r2, #18
 8015024:	f200 80e7 	bhi.w	80151f6 <iNemoEngine_API_Update+0x5ae>
 8015028:	3301      	adds	r3, #1
 801502a:	b21a      	sxth	r2, r3
 801502c:	b29b      	uxth	r3, r3
 801502e:	2b03      	cmp	r3, #3
 8015030:	8062      	strh	r2, [r4, #2]
 8015032:	f240 8115 	bls.w	8015260 <iNemoEngine_API_Update+0x618>
 8015036:	ee05 2a90 	vmov	s11, r2
 801503a:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8014f4c <iNemoEngine_API_Update+0x304>
 801503e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015042:	ee65 5a85 	vmul.f32	s11, s11, s10
 8015046:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801504a:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 801504e:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8015052:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8014f50 <iNemoEngine_API_Update+0x308>
 8015056:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801505a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801505e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015062:	ee26 6a25 	vmul.f32	s12, s12, s11
 8015066:	ee27 7a05 	vmul.f32	s14, s14, s10
 801506a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801506e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8015072:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8015076:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801507a:	aa1a      	add	r2, sp, #104	; 0x68
 801507c:	af16      	add	r7, sp, #88	; 0x58
 801507e:	e9cd 7200 	strd	r7, r2, [sp]
 8015082:	ab12      	add	r3, sp, #72	; 0x48
 8015084:	aa1e      	add	r2, sp, #120	; 0x78
 8015086:	4641      	mov	r1, r8
 8015088:	4620      	mov	r0, r4
 801508a:	f7fa fd09 	bl	800faa0 <kalman_3gyro.constprop.0>
 801508e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015090:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8015094:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8015098:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 801509c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 80150a0:	f8c7 a000 	str.w	sl, [r7]
 80150a4:	f604 1744 	addw	r7, r4, #2372	; 0x944
 80150a8:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80150ac:	f8c7 e000 	str.w	lr, [r7]
 80150b0:	f604 1748 	addw	r7, r4, #2376	; 0x948
 80150b4:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 80150b8:	f8c7 c000 	str.w	ip, [r7]
 80150bc:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 80150c0:	6030      	str	r0, [r6, #0]
 80150c2:	60f3      	str	r3, [r6, #12]
 80150c4:	6071      	str	r1, [r6, #4]
 80150c6:	60b2      	str	r2, [r6, #8]
 80150c8:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 80150cc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80150d0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80150d4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80150d6:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 80150da:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 80150de:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80150e2:	edc3 7a00 	vstr	s15, [r3]
 80150e6:	f8cb e000 	str.w	lr, [fp]
 80150ea:	f8ca c000 	str.w	ip, [sl]
 80150ee:	6030      	str	r0, [r6, #0]
 80150f0:	e65f      	b.n	8014db2 <iNemoEngine_API_Update+0x16a>
 80150f2:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8014f54 <iNemoEngine_API_Update+0x30c>
 80150f6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80150fa:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80150fe:	b041      	add	sp, #260	; 0x104
 8015100:	ecbd 8b0c 	vpop	{d8-d13}
 8015104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015108:	ae0e      	add	r6, sp, #56	; 0x38
 801510a:	e5ab      	b.n	8014c64 <iNemoEngine_API_Update+0x1c>
 801510c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8015110:	ee69 8a28 	vmul.f32	s17, s18, s17
 8015114:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8015118:	eee9 8a8a 	vfma.f32	s17, s19, s20
 801511c:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8015120:	eee9 7a49 	vfms.f32	s15, s18, s18
 8015124:	ee17 0a90 	vmov	r0, s15
 8015128:	f7eb fa0e 	bl	8000548 <__aeabi_f2d>
 801512c:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8015130:	4602      	mov	r2, r0
 8015132:	460b      	mov	r3, r1
 8015134:	ee17 0a90 	vmov	r0, s15
 8015138:	ec43 2b18 	vmov	d8, r2, r3
 801513c:	f7eb fa04 	bl	8000548 <__aeabi_f2d>
 8015140:	eeb0 1a48 	vmov.f32	s2, s16
 8015144:	eef0 1a68 	vmov.f32	s3, s17
 8015148:	ec41 0b10 	vmov	d0, r0, r1
 801514c:	f003 fcbc 	bl	8018ac8 <atan2>
 8015150:	a3f3      	add	r3, pc, #972	; (adr r3, 8015520 <iNemoEngine_API_Update+0x8d8>)
 8015152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015156:	ec51 0b10 	vmov	r0, r1, d0
 801515a:	f7eb fa4d 	bl	80005f8 <__aeabi_dmul>
 801515e:	4bf2      	ldr	r3, [pc, #968]	; (8015528 <iNemoEngine_API_Update+0x8e0>)
 8015160:	2200      	movs	r2, #0
 8015162:	f7eb f891 	bl	8000288 <__aeabi_dsub>
 8015166:	f7eb fcf7 	bl	8000b58 <__aeabi_d2f>
 801516a:	ee08 0a10 	vmov	s16, r0
 801516e:	e6a0      	b.n	8014eb2 <iNemoEngine_API_Update+0x26a>
 8015170:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8015174:	ee69 8a28 	vmul.f32	s17, s18, s17
 8015178:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801517c:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8015180:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8015184:	eee9 7a49 	vfms.f32	s15, s18, s18
 8015188:	ee17 0a90 	vmov	r0, s15
 801518c:	f7eb f9dc 	bl	8000548 <__aeabi_f2d>
 8015190:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8015194:	4602      	mov	r2, r0
 8015196:	460b      	mov	r3, r1
 8015198:	ee17 0a90 	vmov	r0, s15
 801519c:	ec43 2b18 	vmov	d8, r2, r3
 80151a0:	f7eb f9d2 	bl	8000548 <__aeabi_f2d>
 80151a4:	eeb0 1a48 	vmov.f32	s2, s16
 80151a8:	eef0 1a68 	vmov.f32	s3, s17
 80151ac:	ec41 0b10 	vmov	d0, r0, r1
 80151b0:	f003 fc8a 	bl	8018ac8 <atan2>
 80151b4:	a3da      	add	r3, pc, #872	; (adr r3, 8015520 <iNemoEngine_API_Update+0x8d8>)
 80151b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ba:	ec51 0b10 	vmov	r0, r1, d0
 80151be:	f7eb fa1b 	bl	80005f8 <__aeabi_dmul>
 80151c2:	4bd9      	ldr	r3, [pc, #868]	; (8015528 <iNemoEngine_API_Update+0x8e0>)
 80151c4:	2200      	movs	r2, #0
 80151c6:	f7eb f861 	bl	800028c <__adddf3>
 80151ca:	f7eb fcc5 	bl	8000b58 <__aeabi_d2f>
 80151ce:	ee08 0a10 	vmov	s16, r0
 80151d2:	e66e      	b.n	8014eb2 <iNemoEngine_API_Update+0x26a>
 80151d4:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 80151d8:	2b00      	cmp	r3, #0
 80151da:	dd44      	ble.n	8015266 <iNemoEngine_API_Update+0x61e>
 80151dc:	3b01      	subs	r3, #1
 80151de:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 80151e2:	e55c      	b.n	8014c9e <iNemoEngine_API_Update+0x56>
 80151e4:	8863      	ldrh	r3, [r4, #2]
 80151e6:	eddf 0ad1 	vldr	s1, [pc, #836]	; 801552c <iNemoEngine_API_Update+0x8e4>
 80151ea:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8015530 <iNemoEngine_API_Update+0x8e8>
 80151ee:	1e5a      	subs	r2, r3, #1
 80151f0:	2a12      	cmp	r2, #18
 80151f2:	f67f af19 	bls.w	8015028 <iNemoEngine_API_Update+0x3e0>
 80151f6:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 80151fa:	eddf 2ace 	vldr	s5, [pc, #824]	; 8015534 <iNemoEngine_API_Update+0x8ec>
 80151fe:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8015202:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8015206:	ee34 4a22 	vadd.f32	s8, s8, s5
 801520a:	ee64 7aa6 	vmul.f32	s15, s9, s13
 801520e:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8015212:	2300      	movs	r3, #0
 8015214:	8063      	strh	r3, [r4, #2]
 8015216:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 801521a:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 801521e:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8015538 <iNemoEngine_API_Update+0x8f0>
 8015222:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8015226:	ee65 6a26 	vmul.f32	s13, s10, s13
 801522a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801522e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015232:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8015236:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801523a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801523e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8015242:	e71a      	b.n	801507a <iNemoEngine_API_Update+0x432>
 8015244:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8015248:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801524c:	edd4 0a05 	vldr	s1, [r4, #20]
 8015250:	ed9f 0aba 	vldr	s0, [pc, #744]	; 801553c <iNemoEngine_API_Update+0x8f4>
 8015254:	e6e3      	b.n	801501e <iNemoEngine_API_Update+0x3d6>
 8015256:	edd4 0a05 	vldr	s1, [r4, #20]
 801525a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8015540 <iNemoEngine_API_Update+0x8f8>
 801525e:	e6de      	b.n	801501e <iNemoEngine_API_Update+0x3d6>
 8015260:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8015544 <iNemoEngine_API_Update+0x8fc>
 8015264:	e6ef      	b.n	8015046 <iNemoEngine_API_Update+0x3fe>
 8015266:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 801526a:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 801526e:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8015272:	ed97 5a00 	vldr	s10, [r7]
 8015276:	ed92 da00 	vldr	s26, [r2]
 801527a:	ed93 6a00 	vldr	s12, [r3]
 801527e:	ed9f 0aab 	vldr	s0, [pc, #684]	; 801552c <iNemoEngine_API_Update+0x8e4>
 8015282:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8015286:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 801528a:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801528e:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8015292:	ed91 3a00 	vldr	s6, [r1]
 8015296:	ed92 1a00 	vldr	s2, [r2]
 801529a:	ed97 7a00 	vldr	s14, [r7]
 801529e:	edd3 3a00 	vldr	s7, [r3]
 80152a2:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80152a6:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 80152aa:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 80152ae:	ed91 ba00 	vldr	s22, [r1]
 80152b2:	edd0 6a00 	vldr	s13, [r0]
 80152b6:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 80152ba:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 80152be:	edd1 aa00 	vldr	s21, [r1]
 80152c2:	ed92 2a00 	vldr	s4, [r2]
 80152c6:	ee96 7a04 	vfnms.f32	s14, s12, s8
 80152ca:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80152ce:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 80152d2:	eed1 3a04 	vfnms.f32	s7, s2, s8
 80152d6:	f204 6234 	addw	r2, r4, #1588	; 0x634
 80152da:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 80152de:	edd0 7a00 	vldr	s15, [r0]
 80152e2:	edd2 1a00 	vldr	s3, [r2]
 80152e6:	ed93 ca00 	vldr	s24, [r3]
 80152ea:	eed5 6a04 	vfnms.f32	s13, s10, s8
 80152ee:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80152f2:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 80152f6:	ed91 5a00 	vldr	s10, [r1]
 80152fa:	edd0 5a00 	vldr	s11, [r0]
 80152fe:	edd7 9a00 	vldr	s19, [r7]
 8015302:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8015306:	eed5 1a04 	vfnms.f32	s3, s10, s8
 801530a:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 801530e:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8015312:	edd0 2a00 	vldr	s5, [r0]
 8015316:	edd3 0a00 	vldr	s1, [r3]
 801531a:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 801531e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015322:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8015326:	edd7 7a00 	vldr	s15, [r7]
 801532a:	edd0 5a00 	vldr	s11, [r0]
 801532e:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8015332:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8015336:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 801533a:	ed93 6a00 	vldr	s12, [r3]
 801533e:	edda ba00 	vldr	s23, [sl]
 8015342:	ed99 5a00 	vldr	s10, [r9]
 8015346:	ee76 6a83 	vadd.f32	s13, s13, s6
 801534a:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 801534e:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8015352:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8015356:	eed7 5a84 	vfnms.f32	s11, s15, s8
 801535a:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 801535e:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8015362:	eddc 4a00 	vldr	s9, [ip]
 8015366:	edd3 7a00 	vldr	s15, [r3]
 801536a:	ed98 1a00 	vldr	s2, [r8]
 801536e:	edde 8a00 	vldr	s17, [lr]
 8015372:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8015376:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 801537a:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 801537e:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8015382:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8015386:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 801538a:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 801538e:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8015392:	ed9c aa00 	vldr	s20, [ip]
 8015396:	eeed 6a03 	vfma.f32	s13, s26, s6
 801539a:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 801539e:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 80153a2:	ed92 da00 	vldr	s26, [r2]
 80153a6:	eeab 7a03 	vfma.f32	s14, s22, s6
 80153aa:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 80153ae:	ed91 ba00 	vldr	s22, [r1]
 80153b2:	eef0 ca61 	vmov.f32	s25, s3
 80153b6:	eddb 1a00 	vldr	s3, [fp]
 80153ba:	edd3 ba00 	vldr	s23, [r3]
 80153be:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 80153c2:	eedb 7a84 	vfnms.f32	s15, s23, s8
 80153c6:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80153ca:	1c53      	adds	r3, r2, #1
 80153cc:	eeea 3a83 	vfma.f32	s7, s21, s6
 80153d0:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 80153d4:	edd8 aa00 	vldr	s21, [r8]
 80153d8:	eee6 1a03 	vfma.f32	s3, s12, s6
 80153dc:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80153e0:	ed9e 6a00 	vldr	s12, [lr]
 80153e4:	edd7 aa00 	vldr	s21, [r7]
 80153e8:	eee6 7a03 	vfma.f32	s15, s12, s6
 80153ec:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 80153f0:	ed9c 6a00 	vldr	s12, [ip]
 80153f4:	eedc 4a04 	vfnms.f32	s9, s24, s8
 80153f8:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 80153fc:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8015400:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8015404:	ee22 2a00 	vmul.f32	s4, s4, s0
 8015408:	ee62 2a80 	vmul.f32	s5, s5, s0
 801540c:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8015410:	ed90 0a00 	vldr	s0, [r0]
 8015414:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015418:	ee36 6a00 	vadd.f32	s12, s12, s0
 801541c:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8015420:	ed91 0a00 	vldr	s0, [r1]
 8015424:	ee35 5a28 	vadd.f32	s10, s10, s17
 8015428:	ee66 6a82 	vmul.f32	s13, s13, s4
 801542c:	ee22 7a87 	vmul.f32	s14, s5, s14
 8015430:	ee64 5a25 	vmul.f32	s11, s8, s11
 8015434:	eee0 4a83 	vfma.f32	s9, s1, s6
 8015438:	f604 1068 	addw	r0, r4, #2408	; 0x968
 801543c:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8015440:	eea1 5a03 	vfma.f32	s10, s2, s6
 8015444:	eea0 6a03 	vfma.f32	s12, s0, s6
 8015448:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801544c:	ee63 3a82 	vmul.f32	s7, s7, s4
 8015450:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015454:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8015458:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801545c:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8015460:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015464:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8015468:	ee24 6a06 	vmul.f32	s12, s8, s12
 801546c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8015470:	ee22 5a85 	vmul.f32	s10, s5, s10
 8015474:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8015478:	eea5 7a05 	vfma.f32	s14, s10, s10
 801547c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015480:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8015484:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015488:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801548c:	ee07 3a90 	vmov	s15, r3
 8015490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015494:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015498:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801549c:	b21b      	sxth	r3, r3
 801549e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80154a2:	ee07 2a90 	vmov	s15, r2
 80154a6:	ed90 4a00 	vldr	s8, [r0]
 80154aa:	edd1 4a00 	vldr	s9, [r1]
 80154ae:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80154b2:	edd7 7a00 	vldr	s15, [r7]
 80154b6:	eee5 6a84 	vfma.f32	s13, s11, s8
 80154ba:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80154be:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80154c2:	ee66 7a05 	vmul.f32	s15, s12, s10
 80154c6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80154ca:	ee27 7a05 	vmul.f32	s14, s14, s10
 80154ce:	edc7 7a00 	vstr	s15, [r7]
 80154d2:	edc0 6a00 	vstr	s13, [r0]
 80154d6:	ed81 7a00 	vstr	s14, [r1]
 80154da:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 80154de:	f47f abde 	bne.w	8014c9e <iNemoEngine_API_Update+0x56>
 80154e2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80154e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80154ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 80154ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80154f2:	2300      	movs	r3, #0
 80154f4:	2200      	movs	r2, #0
 80154f6:	edc4 6a07 	vstr	s13, [r4, #28]
 80154fa:	ed84 7a08 	vstr	s14, [r4, #32]
 80154fe:	edc4 7a06 	vstr	s15, [r4, #24]
 8015502:	603b      	str	r3, [r7, #0]
 8015504:	6003      	str	r3, [r0, #0]
 8015506:	600b      	str	r3, [r1, #0]
 8015508:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 801550c:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8015510:	f7ff bbc5 	b.w	8014c9e <iNemoEngine_API_Update+0x56>
 8015514:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015548 <iNemoEngine_API_Update+0x900>
 8015518:	e4da      	b.n	8014ed0 <iNemoEngine_API_Update+0x288>
 801551a:	bf00      	nop
 801551c:	f3af 8000 	nop.w
 8015520:	20000000 	.word	0x20000000
 8015524:	404ca5dc 	.word	0x404ca5dc
 8015528:	40568000 	.word	0x40568000
 801552c:	3dcccccd 	.word	0x3dcccccd
 8015530:	3a83126f 	.word	0x3a83126f
 8015534:	358637bd 	.word	0x358637bd
 8015538:	3f333333 	.word	0x3f333333
 801553c:	3727c5ac 	.word	0x3727c5ac
 8015540:	3ac49ba6 	.word	0x3ac49ba6
 8015544:	3e4ccccd 	.word	0x3e4ccccd
 8015548:	00000000 	.word	0x00000000

0801554c <MEMS_getSensorData_I16>:
 801554c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015550:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8015554:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015558:	68c5      	ldr	r5, [r0, #12]
 801555a:	4596      	cmp	lr, r2
 801555c:	fa1f f882 	uxth.w	r8, r2
 8015560:	d94d      	bls.n	80155fe <MEMS_getSensorData_I16+0xb2>
 8015562:	f10e 33ff 	add.w	r3, lr, #4294967295
 8015566:	fb04 5313 	mls	r3, r4, r3, r5
 801556a:	ebae 0c02 	sub.w	ip, lr, r2
 801556e:	f8a1 8004 	strh.w	r8, [r1, #4]
 8015572:	600b      	str	r3, [r1, #0]
 8015574:	fa5f fc8c 	uxtb.w	ip, ip
 8015578:	4647      	mov	r7, r8
 801557a:	f1b8 0f00 	cmp.w	r8, #0
 801557e:	d017      	beq.n	80155b0 <MEMS_getSensorData_I16+0x64>
 8015580:	688e      	ldr	r6, [r1, #8]
 8015582:	6905      	ldr	r5, [r0, #16]
 8015584:	2300      	movs	r3, #0
 8015586:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801558a:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801558e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8015592:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8015596:	f8d4 9002 	ldr.w	r9, [r4, #2]
 801559a:	f8c1 9002 	str.w	r9, [r1, #2]
 801559e:	3301      	adds	r3, #1
 80155a0:	88e4      	ldrh	r4, [r4, #6]
 80155a2:	80cc      	strh	r4, [r1, #6]
 80155a4:	b2d9      	uxtb	r1, r3
 80155a6:	42b9      	cmp	r1, r7
 80155a8:	460b      	mov	r3, r1
 80155aa:	d3ec      	bcc.n	8015586 <MEMS_getSensorData_I16+0x3a>
 80155ac:	45c6      	cmp	lr, r8
 80155ae:	d934      	bls.n	801561a <MEMS_getSensorData_I16+0xce>
 80155b0:	ebae 0308 	sub.w	r3, lr, r8
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	8103      	strh	r3, [r0, #8]
 80155b8:	f1bc 0f00 	cmp.w	ip, #0
 80155bc:	d01d      	beq.n	80155fa <MEMS_getSensorData_I16+0xae>
 80155be:	6903      	ldr	r3, [r0, #16]
 80155c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80155c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80155c8:	f103 000a 	add.w	r0, r3, #10
 80155cc:	fa5f fc8c 	uxtb.w	ip, ip
 80155d0:	3202      	adds	r2, #2
 80155d2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80155d6:	3302      	adds	r3, #2
 80155d8:	2400      	movs	r4, #0
 80155da:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80155de:	f803 1c02 	strb.w	r1, [r3, #-2]
 80155e2:	6811      	ldr	r1, [r2, #0]
 80155e4:	6019      	str	r1, [r3, #0]
 80155e6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80155ea:	8099      	strh	r1, [r3, #4]
 80155ec:	3308      	adds	r3, #8
 80155ee:	4283      	cmp	r3, r0
 80155f0:	f802 4c02 	strb.w	r4, [r2, #-2]
 80155f4:	f102 0208 	add.w	r2, r2, #8
 80155f8:	d1ef      	bne.n	80155da <MEMS_getSensorData_I16+0x8e>
 80155fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155fe:	f10e 33ff 	add.w	r3, lr, #4294967295
 8015602:	fb04 5313 	mls	r3, r4, r3, r5
 8015606:	f8a1 e004 	strh.w	lr, [r1, #4]
 801560a:	600b      	str	r3, [r1, #0]
 801560c:	f1be 0f00 	cmp.w	lr, #0
 8015610:	d005      	beq.n	801561e <MEMS_getSensorData_I16+0xd2>
 8015612:	4677      	mov	r7, lr
 8015614:	f04f 0c00 	mov.w	ip, #0
 8015618:	e7b2      	b.n	8015580 <MEMS_getSensorData_I16+0x34>
 801561a:	2300      	movs	r3, #0
 801561c:	e7cb      	b.n	80155b6 <MEMS_getSensorData_I16+0x6a>
 801561e:	f8a0 e008 	strh.w	lr, [r0, #8]
 8015622:	e7ea      	b.n	80155fa <MEMS_getSensorData_I16+0xae>

08015624 <MEMS_SolveLinearEq>:
 8015624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015628:	ed2d 8b0c 	vpush	{d8-d13}
 801562c:	4617      	mov	r7, r2
 801562e:	2400      	movs	r4, #0
 8015630:	b0a9      	sub	sp, #164	; 0xa4
 8015632:	2200      	movs	r2, #0
 8015634:	601a      	str	r2, [r3, #0]
 8015636:	460d      	mov	r5, r1
 8015638:	2240      	movs	r2, #64	; 0x40
 801563a:	4621      	mov	r1, r4
 801563c:	4680      	mov	r8, r0
 801563e:	603c      	str	r4, [r7, #0]
 8015640:	607c      	str	r4, [r7, #4]
 8015642:	60bc      	str	r4, [r7, #8]
 8015644:	60fc      	str	r4, [r7, #12]
 8015646:	a808      	add	r0, sp, #32
 8015648:	461e      	mov	r6, r3
 801564a:	eeb0 8a40 	vmov.f32	s16, s0
 801564e:	e9cd 4400 	strd	r4, r4, [sp]
 8015652:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015656:	f004 ff9f 	bl	801a598 <memset>
 801565a:	4621      	mov	r1, r4
 801565c:	a818      	add	r0, sp, #96	; 0x60
 801565e:	2240      	movs	r2, #64	; 0x40
 8015660:	f004 ff9a 	bl	801a598 <memset>
 8015664:	edd5 2a03 	vldr	s5, [r5, #12]
 8015668:	eddf 7ae4 	vldr	s15, [pc, #912]	; 80159fc <MEMS_SolveLinearEq+0x3d8>
 801566c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8015670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015674:	d47e      	bmi.n	8015774 <MEMS_SolveLinearEq+0x150>
 8015676:	f898 1000 	ldrb.w	r1, [r8]
 801567a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801567e:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8015682:	4291      	cmp	r1, r2
 8015684:	d07c      	beq.n	8015780 <MEMS_SolveLinearEq+0x15c>
 8015686:	3301      	adds	r3, #1
 8015688:	1a58      	subs	r0, r3, r1
 801568a:	fb90 f3f2 	sdiv	r3, r0, r2
 801568e:	fb02 0313 	mls	r3, r2, r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	bfb8      	it	lt
 8015696:	189b      	addlt	r3, r3, r2
 8015698:	b21b      	sxth	r3, r3
 801569a:	2900      	cmp	r1, #0
 801569c:	f000 81d6 	beq.w	8015a4c <MEMS_SolveLinearEq+0x428>
 80156a0:	3901      	subs	r1, #1
 80156a2:	b2c9      	uxtb	r1, r1
 80156a4:	3101      	adds	r1, #1
 80156a6:	edd5 3a00 	vldr	s7, [r5]
 80156aa:	ed95 4a01 	vldr	s8, [r5, #4]
 80156ae:	edd5 4a02 	vldr	s9, [r5, #8]
 80156b2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80156b6:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8015a00 <MEMS_SolveLinearEq+0x3dc>
 80156ba:	4419      	add	r1, r3
 80156bc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80156c0:	fb93 f4f2 	sdiv	r4, r3, r2
 80156c4:	fb02 3414 	mls	r4, r2, r4, r3
 80156c8:	b2e4      	uxtb	r4, r4
 80156ca:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80156ce:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 80156d2:	ee07 0a90 	vmov	s15, r0
 80156d6:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80156da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156de:	ee06 0a10 	vmov	s12, r0
 80156e2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80156e6:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80156ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80156ee:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80156f2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80156f6:	ee07 0a10 	vmov	s14, r0
 80156fa:	ee36 5a63 	vsub.f32	s10, s12, s7
 80156fe:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015702:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015706:	eee5 6a05 	vfma.f32	s13, s10, s10
 801570a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801570e:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8015712:	ee74 aac7 	vsub.f32	s21, s9, s14
 8015716:	ee37 7a64 	vsub.f32	s14, s14, s9
 801571a:	ee74 7a67 	vsub.f32	s15, s8, s15
 801571e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8015722:	eef4 6ac2 	vcmpe.f32	s13, s4
 8015726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572a:	d531      	bpl.n	8015790 <MEMS_SolveLinearEq+0x16c>
 801572c:	3301      	adds	r3, #1
 801572e:	4299      	cmp	r1, r3
 8015730:	d1c6      	bne.n	80156c0 <MEMS_SolveLinearEq+0x9c>
 8015732:	eef0 7a65 	vmov.f32	s15, s11
 8015736:	2101      	movs	r1, #1
 8015738:	4608      	mov	r0, r1
 801573a:	2200      	movs	r2, #0
 801573c:	e006      	b.n	801574c <MEMS_SolveLinearEq+0x128>
 801573e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015742:	ac28      	add	r4, sp, #160	; 0xa0
 8015744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015748:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 801574c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8015750:	3001      	adds	r0, #1
 8015752:	ac28      	add	r4, sp, #160	; 0xa0
 8015754:	b2c0      	uxtb	r0, r0
 8015756:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801575a:	2804      	cmp	r0, #4
 801575c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8015760:	4613      	mov	r3, r2
 8015762:	d1ec      	bne.n	801573e <MEMS_SolveLinearEq+0x11a>
 8015764:	1c48      	adds	r0, r1, #1
 8015766:	b2c0      	uxtb	r0, r0
 8015768:	2804      	cmp	r0, #4
 801576a:	d076      	beq.n	801585a <MEMS_SolveLinearEq+0x236>
 801576c:	460b      	mov	r3, r1
 801576e:	460a      	mov	r2, r1
 8015770:	4601      	mov	r1, r0
 8015772:	e7e4      	b.n	801573e <MEMS_SolveLinearEq+0x11a>
 8015774:	2000      	movs	r0, #0
 8015776:	b029      	add	sp, #164	; 0xa4
 8015778:	ecbd 8b0c 	vpop	{d8-d13}
 801577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015780:	1c5a      	adds	r2, r3, #1
 8015782:	fb92 f3f1 	sdiv	r3, r2, r1
 8015786:	fb01 2313 	mls	r3, r1, r3, r2
 801578a:	b21b      	sxth	r3, r3
 801578c:	460a      	mov	r2, r1
 801578e:	e784      	b.n	801569a <MEMS_SolveLinearEq+0x76>
 8015790:	eef1 cae6 	vsqrt.f32	s25, s13
 8015794:	3301      	adds	r3, #1
 8015796:	428b      	cmp	r3, r1
 8015798:	ed9d ca00 	vldr	s24, [sp]
 801579c:	eddd ba08 	vldr	s23, [sp, #32]
 80157a0:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 80157a4:	ed9d aa01 	vldr	s20, [sp, #4]
 80157a8:	eddd 9a02 	vldr	s19, [sp, #8]
 80157ac:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 80157b0:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 80157b4:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 80157b8:	ed9d 0a03 	vldr	s0, [sp, #12]
 80157bc:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80157c0:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 80157c4:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 80157c8:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 80157cc:	eec1 6aac 	vdiv.f32	s13, s3, s25
 80157d0:	ee3d da21 	vadd.f32	s26, s26, s3
 80157d4:	ee26 7a26 	vmul.f32	s14, s12, s13
 80157d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80157dc:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 80157e0:	ee72 aaec 	vsub.f32	s21, s5, s25
 80157e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80157e8:	eea7 ba26 	vfma.f32	s22, s14, s13
 80157ec:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80157f0:	eeaa ca87 	vfma.f32	s24, s21, s14
 80157f4:	eee7 ba07 	vfma.f32	s23, s14, s14
 80157f8:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80157fc:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8015800:	eea7 9aa7 	vfma.f32	s18, s15, s15
 8015804:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8015808:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 801580c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8015810:	ee30 6a06 	vadd.f32	s12, s0, s12
 8015814:	ee71 7a67 	vsub.f32	s15, s2, s15
 8015818:	ee75 6a66 	vsub.f32	s13, s10, s13
 801581c:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8015820:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8015824:	ed8d ca00 	vstr	s24, [sp]
 8015828:	edcd ba08 	vstr	s23, [sp, #32]
 801582c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8015830:	ed8d aa01 	vstr	s20, [sp, #4]
 8015834:	edcd 9a02 	vstr	s19, [sp, #8]
 8015838:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 801583c:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8015840:	ed8d 6a03 	vstr	s12, [sp, #12]
 8015844:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8015848:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801584c:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8015850:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8015854:	f47f af34 	bne.w	80156c0 <MEMS_SolveLinearEq+0x9c>
 8015858:	e76b      	b.n	8015732 <MEMS_SolveLinearEq+0x10e>
 801585a:	2240      	movs	r2, #64	; 0x40
 801585c:	2100      	movs	r1, #0
 801585e:	a818      	add	r0, sp, #96	; 0x60
 8015860:	f004 fe9a 	bl	801a598 <memset>
 8015864:	ab08      	add	r3, sp, #32
 8015866:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8015a04 <MEMS_SolveLinearEq+0x3e0>
 801586a:	4618      	mov	r0, r3
 801586c:	aa18      	add	r2, sp, #96	; 0x60
 801586e:	2100      	movs	r1, #0
 8015870:	b24c      	sxtb	r4, r1
 8015872:	2900      	cmp	r1, #0
 8015874:	f000 80b5 	beq.w	80159e2 <MEMS_SolveLinearEq+0x3be>
 8015878:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801587c:	eeb0 7ae7 	vabs.f32	s14, s15
 8015880:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8015884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015888:	f53f af74 	bmi.w	8015774 <MEMS_SolveLinearEq+0x150>
 801588c:	ed93 7a00 	vldr	s14, [r3]
 8015890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015894:	2c01      	cmp	r4, #1
 8015896:	edc2 6a00 	vstr	s13, [r2]
 801589a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 801589e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80158a2:	f000 80b5 	beq.w	8015a10 <MEMS_SolveLinearEq+0x3ec>
 80158a6:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 80158aa:	eeb0 7ac6 	vabs.f32	s14, s12
 80158ae:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80158b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158b6:	f53f af5d 	bmi.w	8015774 <MEMS_SolveLinearEq+0x150>
 80158ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80158be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80158c2:	2c02      	cmp	r4, #2
 80158c4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80158c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80158cc:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 80158d0:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 80158d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80158d8:	eea6 7a26 	vfma.f32	s14, s12, s13
 80158dc:	f000 80a7 	beq.w	8015a2e <MEMS_SolveLinearEq+0x40a>
 80158e0:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 80158e4:	eeb0 6ae4 	vabs.f32	s12, s9
 80158e8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80158ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f0:	f53f af40 	bmi.w	8015774 <MEMS_SolveLinearEq+0x150>
 80158f4:	edd3 5a02 	vldr	s11, [r3, #8]
 80158f8:	ed90 6a00 	vldr	s12, [r0]
 80158fc:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8015900:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8015904:	edc2 5a02 	vstr	s11, [r2, #8]
 8015908:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 801590c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015910:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015914:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015918:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801591c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015920:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015928:	f77f af24 	ble.w	8015774 <MEMS_SolveLinearEq+0x150>
 801592c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8015930:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015934:	ed82 7a03 	vstr	s14, [r2, #12]
 8015938:	3101      	adds	r1, #1
 801593a:	2904      	cmp	r1, #4
 801593c:	f103 0310 	add.w	r3, r3, #16
 8015940:	f102 0210 	add.w	r2, r2, #16
 8015944:	f100 0014 	add.w	r0, r0, #20
 8015948:	d192      	bne.n	8015870 <MEMS_SolveLinearEq+0x24c>
 801594a:	466a      	mov	r2, sp
 801594c:	4639      	mov	r1, r7
 801594e:	a818      	add	r0, sp, #96	; 0x60
 8015950:	f7f9 f9f2 	bl	800ed38 <llEvaluate.constprop.0>
 8015954:	4b2c      	ldr	r3, [pc, #176]	; (8015a08 <MEMS_SolveLinearEq+0x3e4>)
 8015956:	6033      	str	r3, [r6, #0]
 8015958:	f10d 0910 	add.w	r9, sp, #16
 801595c:	46e8      	mov	r8, sp
 801595e:	f10d 0b0c 	add.w	fp, sp, #12
 8015962:	2400      	movs	r4, #0
 8015964:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8015968:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801596c:	e9cd 4400 	strd	r4, r4, [sp]
 8015970:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015974:	466a      	mov	r2, sp
 8015976:	f848 ab04 	str.w	sl, [r8], #4
 801597a:	a904      	add	r1, sp, #16
 801597c:	a818      	add	r0, sp, #96	; 0x60
 801597e:	f7f9 f9db 	bl	800ed38 <llEvaluate.constprop.0>
 8015982:	ecf9 7a01 	vldmia	r9!, {s15}
 8015986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801598e:	dd23      	ble.n	80159d8 <MEMS_SolveLinearEq+0x3b4>
 8015990:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015994:	edd6 7a00 	vldr	s15, [r6]
 8015998:	eef4 7ac7 	vcmpe.f32	s15, s14
 801599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a0:	bfb8      	it	lt
 80159a2:	eef0 7a47 	vmovlt.f32	s15, s14
 80159a6:	45c3      	cmp	fp, r8
 80159a8:	edc6 7a00 	vstr	s15, [r6]
 80159ac:	d1de      	bne.n	801596c <MEMS_SolveLinearEq+0x348>
 80159ae:	edd5 7a03 	vldr	s15, [r5, #12]
 80159b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80159b6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80159ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80159be:	2001      	movs	r0, #1
 80159c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159c8:	bf48      	it	mi
 80159ca:	edc7 7a03 	vstrmi	s15, [r7, #12]
 80159ce:	b029      	add	sp, #164	; 0xa4
 80159d0:	ecbd 8b0c 	vpop	{d8-d13}
 80159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d8:	45c3      	cmp	fp, r8
 80159da:	ed86 0a00 	vstr	s0, [r6]
 80159de:	d1c5      	bne.n	801596c <MEMS_SolveLinearEq+0x348>
 80159e0:	e7e5      	b.n	80159ae <MEMS_SolveLinearEq+0x38a>
 80159e2:	edd0 7a00 	vldr	s15, [r0]
 80159e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80159ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ee:	f77f aec1 	ble.w	8015774 <MEMS_SolveLinearEq+0x150>
 80159f2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80159f6:	ed82 7a00 	vstr	s14, [r2]
 80159fa:	e79d      	b.n	8015938 <MEMS_SolveLinearEq+0x314>
 80159fc:	3dcccccd 	.word	0x3dcccccd
 8015a00:	2b8cbccb 	.word	0x2b8cbccb
 8015a04:	358637bd 	.word	0x358637bd
 8015a08:	3dcccccd 	.word	0x3dcccccd
 8015a0c:	00000000 	.word	0x00000000
 8015a10:	ed90 7a00 	vldr	s14, [r0]
 8015a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a1c:	f77f aeaa 	ble.w	8015774 <MEMS_SolveLinearEq+0x150>
 8015a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a24:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015a28:	ed82 7a01 	vstr	s14, [r2, #4]
 8015a2c:	e784      	b.n	8015938 <MEMS_SolveLinearEq+0x314>
 8015a2e:	edd0 7a00 	vldr	s15, [r0]
 8015a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3a:	f77f ae9b 	ble.w	8015774 <MEMS_SolveLinearEq+0x150>
 8015a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a42:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015a46:	ed82 7a02 	vstr	s14, [r2, #8]
 8015a4a:	e775      	b.n	8015938 <MEMS_SolveLinearEq+0x314>
 8015a4c:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8015a0c <MEMS_SolveLinearEq+0x3e8>
 8015a50:	e671      	b.n	8015736 <MEMS_SolveLinearEq+0x112>
 8015a52:	bf00      	nop

08015a54 <MEMS_EIG3>:
 8015a54:	edd0 6a02 	vldr	s13, [r0, #8]
 8015a58:	ed90 7a01 	vldr	s14, [r0, #4]
 8015a5c:	edd0 4a04 	vldr	s9, [r0, #16]
 8015a60:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8015bb0 <MEMS_EIG3+0x15c>
 8015a64:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8015a68:	b510      	push	{r4, lr}
 8015a6a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a6e:	460c      	mov	r4, r1
 8015a70:	ed2d 8b04 	vpush	{d8-d9}
 8015a74:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8015a78:	b08a      	sub	sp, #40	; 0x28
 8015a7a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a82:	d509      	bpl.n	8015a98 <MEMS_EIG3+0x44>
 8015a84:	6803      	ldr	r3, [r0, #0]
 8015a86:	600b      	str	r3, [r1, #0]
 8015a88:	68c3      	ldr	r3, [r0, #12]
 8015a8a:	604b      	str	r3, [r1, #4]
 8015a8c:	6943      	ldr	r3, [r0, #20]
 8015a8e:	608b      	str	r3, [r1, #8]
 8015a90:	b00a      	add	sp, #40	; 0x28
 8015a92:	ecbd 8b04 	vpop	{d8-d9}
 8015a96:	bd10      	pop	{r4, pc}
 8015a98:	ed90 4a00 	vldr	s8, [r0]
 8015a9c:	edd0 5a03 	vldr	s11, [r0, #12]
 8015aa0:	edd0 2a05 	vldr	s5, [r0, #20]
 8015aa4:	eddf 9a43 	vldr	s19, [pc, #268]	; 8015bb4 <MEMS_EIG3+0x160>
 8015aa8:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8015bb8 <MEMS_EIG3+0x164>
 8015aac:	ee34 8a25 	vadd.f32	s16, s8, s11
 8015ab0:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8015ab4:	ee38 8a22 	vadd.f32	s16, s16, s5
 8015ab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015abc:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015ac0:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8015ac4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8015ac8:	ee34 4a48 	vsub.f32	s8, s8, s16
 8015acc:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8015ad0:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8015ad4:	eea4 5a04 	vfma.f32	s10, s8, s8
 8015ad8:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8015adc:	eef0 7a45 	vmov.f32	s15, s10
 8015ae0:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8015ae4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015ae8:	eef1 8ae7 	vsqrt.f32	s17, s15
 8015aec:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8015af0:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8015af4:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8015af8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015afc:	ee65 5a86 	vmul.f32	s11, s11, s12
 8015b00:	ee26 7a07 	vmul.f32	s14, s12, s14
 8015b04:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8015b08:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015b0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015b10:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8015b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015b18:	eee5 4a85 	vfma.f32	s9, s11, s10
 8015b1c:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015b20:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8015b24:	eea6 5a26 	vfma.f32	s10, s12, s13
 8015b28:	eee5 7a07 	vfma.f32	s15, s10, s14
 8015b2c:	eef4 7ac3 	vcmpe.f32	s15, s6
 8015b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b34:	d909      	bls.n	8015b4a <MEMS_EIG3+0xf6>
 8015b36:	eef4 7ae3 	vcmpe.f32	s15, s7
 8015b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3e:	db22      	blt.n	8015b86 <MEMS_EIG3+0x132>
 8015b40:	eeb0 9a40 	vmov.f32	s18, s0
 8015b44:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8015bbc <MEMS_EIG3+0x168>
 8015b48:	e003      	b.n	8015b52 <MEMS_EIG3+0xfe>
 8015b4a:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8015bc0 <MEMS_EIG3+0x16c>
 8015b4e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015b52:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8015b56:	eef0 7a48 	vmov.f32	s15, s16
 8015b5a:	eeb0 7a48 	vmov.f32	s14, s16
 8015b5e:	eee8 7a89 	vfma.f32	s15, s17, s18
 8015b62:	eea8 7a80 	vfma.f32	s14, s17, s0
 8015b66:	edc4 7a00 	vstr	s15, [r4]
 8015b6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b6e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8015b72:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8015b76:	ed84 7a02 	vstr	s14, [r4, #8]
 8015b7a:	edc4 7a01 	vstr	s15, [r4, #4]
 8015b7e:	b00a      	add	sp, #40	; 0x28
 8015b80:	ecbd 8b04 	vpop	{d8-d9}
 8015b84:	bd10      	pop	{r4, pc}
 8015b86:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015b8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015b8e:	f002 ffd1 	bl	8018b34 <acosf>
 8015b92:	ee60 9a29 	vmul.f32	s19, s0, s19
 8015b96:	eeb0 0a69 	vmov.f32	s0, s19
 8015b9a:	f002 fec5 	bl	8018928 <cosf>
 8015b9e:	eeb0 9a40 	vmov.f32	s18, s0
 8015ba2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015bc4 <MEMS_EIG3+0x170>
 8015ba6:	ee39 0a80 	vadd.f32	s0, s19, s0
 8015baa:	f002 febd 	bl	8018928 <cosf>
 8015bae:	e7d0      	b.n	8015b52 <MEMS_EIG3+0xfe>
 8015bb0:	358637bd 	.word	0x358637bd
 8015bb4:	3eaaaaab 	.word	0x3eaaaaab
 8015bb8:	3e2aaaab 	.word	0x3e2aaaab
 8015bbc:	bf000001 	.word	0xbf000001
 8015bc0:	3effffff 	.word	0x3effffff
 8015bc4:	40060a92 	.word	0x40060a92

08015bc8 <MEMS_runMagCal>:
 8015bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bcc:	ed2d 8b0a 	vpush	{d8-d12}
 8015bd0:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8015bd4:	2282      	movs	r2, #130	; 0x82
 8015bd6:	ab36      	add	r3, sp, #216	; 0xd8
 8015bd8:	460c      	mov	r4, r1
 8015bda:	9105      	str	r1, [sp, #20]
 8015bdc:	4683      	mov	fp, r0
 8015bde:	4608      	mov	r0, r1
 8015be0:	a917      	add	r1, sp, #92	; 0x5c
 8015be2:	9319      	str	r3, [sp, #100]	; 0x64
 8015be4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8015be8:	f7ff fcb0 	bl	801554c <MEMS_getSensorData_I16>
 8015bec:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8015bf0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015bf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8015bf8:	f108 31ff 	add.w	r1, r8, #4294967295
 8015bfc:	9106      	str	r1, [sp, #24]
 8015bfe:	fb01 2103 	mla	r1, r1, r3, r2
 8015c02:	9108      	str	r1, [sp, #32]
 8015c04:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8015c08:	f1b8 0f00 	cmp.w	r8, #0
 8015c0c:	f000 8417 	beq.w	801643e <MEMS_runMagCal+0x876>
 8015c10:	f8db 3008 	ldr.w	r3, [fp, #8]
 8015c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015c18:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8015c1c:	fb02 f203 	mul.w	r2, r2, r3
 8015c20:	31a0      	adds	r1, #160	; 0xa0
 8015c22:	4291      	cmp	r1, r2
 8015c24:	f080 8411 	bcs.w	801644a <MEMS_runMagCal+0x882>
 8015c28:	3b00      	subs	r3, #0
 8015c2a:	bf18      	it	ne
 8015c2c:	2301      	movne	r3, #1
 8015c2e:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8015c38:	f8cb 200c 	str.w	r2, [fp, #12]
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8015c42:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8015c46:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8015c4a:	22ff      	movs	r2, #255	; 0xff
 8015c4c:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8015c50:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015c54:	4cd5      	ldr	r4, [pc, #852]	; (8015fac <MEMS_runMagCal+0x3e4>)
 8015c56:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8015fb8 <MEMS_runMagCal+0x3f0>
 8015c5a:	9b05      	ldr	r3, [sp, #20]
 8015c5c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8015c60:	edd3 5a01 	vldr	s11, [r3, #4]
 8015c64:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8015c68:	4652      	mov	r2, sl
 8015c6a:	2a03      	cmp	r2, #3
 8015c6c:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8015c70:	bf28      	it	cs
 8015c72:	2203      	movcs	r2, #3
 8015c74:	2100      	movs	r1, #0
 8015c76:	9207      	str	r2, [sp, #28]
 8015c78:	eeb0 0a67 	vmov.f32	s0, s15
 8015c7c:	464b      	mov	r3, r9
 8015c7e:	9402      	str	r4, [sp, #8]
 8015c80:	4627      	mov	r7, r4
 8015c82:	9503      	str	r5, [sp, #12]
 8015c84:	462e      	mov	r6, r5
 8015c86:	460a      	mov	r2, r1
 8015c88:	9404      	str	r4, [sp, #16]
 8015c8a:	7818      	ldrb	r0, [r3, #0]
 8015c8c:	3201      	adds	r2, #1
 8015c8e:	b292      	uxth	r2, r2
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d04b      	beq.n	8015d2c <MEMS_runMagCal+0x164>
 8015c94:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8015c98:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8015c9c:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8015ca0:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8015ca4:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8015ca8:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8015cac:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8015cb0:	9c02      	ldr	r4, [sp, #8]
 8015cb2:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8015cb6:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8015cba:	ee07 ea90 	vmov	s15, lr
 8015cbe:	ee07 ca10 	vmov	s14, ip
 8015cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cca:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8015cce:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015cd2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015cd6:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015cda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015cde:	4574      	cmp	r4, lr
 8015ce0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015ce4:	bfb8      	it	lt
 8015ce6:	4674      	movlt	r4, lr
 8015ce8:	9402      	str	r4, [sp, #8]
 8015cea:	ee07 0a10 	vmov	s14, r0
 8015cee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cf2:	9c03      	ldr	r4, [sp, #12]
 8015cf4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015cf8:	ee77 7a46 	vsub.f32	s15, s14, s12
 8015cfc:	4574      	cmp	r4, lr
 8015cfe:	bfa8      	it	ge
 8015d00:	4674      	movge	r4, lr
 8015d02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015d06:	4567      	cmp	r7, ip
 8015d08:	9403      	str	r4, [sp, #12]
 8015d0a:	9c04      	ldr	r4, [sp, #16]
 8015d0c:	bfb8      	it	lt
 8015d0e:	4667      	movlt	r7, ip
 8015d10:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8015d14:	4566      	cmp	r6, ip
 8015d16:	bfa8      	it	ge
 8015d18:	4666      	movge	r6, ip
 8015d1a:	4284      	cmp	r4, r0
 8015d1c:	bfb8      	it	lt
 8015d1e:	4604      	movlt	r4, r0
 8015d20:	3101      	adds	r1, #1
 8015d22:	4285      	cmp	r5, r0
 8015d24:	b249      	sxtb	r1, r1
 8015d26:	9404      	str	r4, [sp, #16]
 8015d28:	bfa8      	it	ge
 8015d2a:	4605      	movge	r5, r0
 8015d2c:	9807      	ldr	r0, [sp, #28]
 8015d2e:	4282      	cmp	r2, r0
 8015d30:	f103 0308 	add.w	r3, r3, #8
 8015d34:	d9a9      	bls.n	8015c8a <MEMS_runMagCal+0xc2>
 8015d36:	4590      	cmp	r8, r2
 8015d38:	9c04      	ldr	r4, [sp, #16]
 8015d3a:	f240 8767 	bls.w	8016c0c <MEMS_runMagCal+0x1044>
 8015d3e:	ebaa 0a02 	sub.w	sl, sl, r2
 8015d42:	fa12 fa8a 	uxtah	sl, r2, sl
 8015d46:	f109 0308 	add.w	r3, r9, #8
 8015d4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015d4e:	9307      	str	r3, [sp, #28]
 8015d50:	2300      	movs	r3, #0
 8015d52:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8015d56:	9304      	str	r3, [sp, #16]
 8015d58:	7813      	ldrb	r3, [r2, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	f000 8096 	beq.w	8015e8c <MEMS_runMagCal+0x2c4>
 8015d60:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015d64:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015d68:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8015d6c:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8015d70:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8015d74:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8015d78:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8015d7c:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8015d80:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8015d84:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8015d88:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8015d8c:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8015d90:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8015d94:	ebae 0808 	sub.w	r8, lr, r8
 8015d98:	eba0 000a 	sub.w	r0, r0, sl
 8015d9c:	ee07 ca10 	vmov	s14, ip
 8015da0:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8015da4:	ee07 0a90 	vmov	s15, r0
 8015da8:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8015dac:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8015db0:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8015db4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015db8:	eba3 030a 	sub.w	r3, r3, sl
 8015dbc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dc4:	ee06 ea90 	vmov	s13, lr
 8015dc8:	ebac 0909 	sub.w	r9, ip, r9
 8015dcc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8015dd0:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8015dd4:	eef0 7ae7 	vabs.f32	s15, s15
 8015dd8:	ee06 9a90 	vmov	s13, r9
 8015ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015de0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015de8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8015dec:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8015df0:	eef0 6ae6 	vabs.f32	s13, s13
 8015df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015df8:	eba0 0808 	sub.w	r8, r0, r8
 8015dfc:	ee06 0a90 	vmov	s13, r0
 8015e00:	eba3 0309 	sub.w	r3, r3, r9
 8015e04:	ee35 5a63 	vsub.f32	s10, s10, s7
 8015e08:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8015e0c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015e10:	9b02      	ldr	r3, [sp, #8]
 8015e12:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8015e16:	4577      	cmp	r7, lr
 8015e18:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015e1c:	ee06 8a90 	vmov	s13, r8
 8015e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e24:	bfb8      	it	lt
 8015e26:	4677      	movlt	r7, lr
 8015e28:	4576      	cmp	r6, lr
 8015e2a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015e2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e32:	bfa8      	it	ge
 8015e34:	4676      	movge	r6, lr
 8015e36:	4563      	cmp	r3, ip
 8015e38:	bfb8      	it	lt
 8015e3a:	4663      	movlt	r3, ip
 8015e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e40:	eea5 7a05 	vfma.f32	s14, s10, s10
 8015e44:	9302      	str	r3, [sp, #8]
 8015e46:	9b03      	ldr	r3, [sp, #12]
 8015e48:	eef0 6ae6 	vabs.f32	s13, s13
 8015e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015e50:	4563      	cmp	r3, ip
 8015e52:	ee36 6a44 	vsub.f32	s12, s12, s8
 8015e56:	bfa8      	it	ge
 8015e58:	4663      	movge	r3, ip
 8015e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e5e:	4284      	cmp	r4, r0
 8015e60:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015e64:	bfb8      	it	lt
 8015e66:	4604      	movlt	r4, r0
 8015e68:	ee26 7a24 	vmul.f32	s14, s12, s9
 8015e6c:	4285      	cmp	r5, r0
 8015e6e:	bfa8      	it	ge
 8015e70:	4605      	movge	r5, r0
 8015e72:	9303      	str	r3, [sp, #12]
 8015e74:	ee17 0a90 	vmov	r0, s15
 8015e78:	9b04      	ldr	r3, [sp, #16]
 8015e7a:	eea7 0a07 	vfma.f32	s0, s14, s14
 8015e7e:	4283      	cmp	r3, r0
 8015e80:	f101 0101 	add.w	r1, r1, #1
 8015e84:	bf38      	it	cc
 8015e86:	4603      	movcc	r3, r0
 8015e88:	b249      	sxtb	r1, r1
 8015e8a:	9304      	str	r3, [sp, #16]
 8015e8c:	9b07      	ldr	r3, [sp, #28]
 8015e8e:	3208      	adds	r2, #8
 8015e90:	4293      	cmp	r3, r2
 8015e92:	f47f af61 	bne.w	8015d58 <MEMS_runMagCal+0x190>
 8015e96:	2900      	cmp	r1, #0
 8015e98:	f000 86b6 	beq.w	8016c08 <MEMS_runMagCal+0x1040>
 8015e9c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8015ea0:	f280 82df 	bge.w	8016462 <MEMS_runMagCal+0x89a>
 8015ea4:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8015ea8:	f2c0 82db 	blt.w	8016462 <MEMS_runMagCal+0x89a>
 8015eac:	9b02      	ldr	r3, [sp, #8]
 8015eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015eb2:	f280 82d6 	bge.w	8016462 <MEMS_runMagCal+0x89a>
 8015eb6:	9a03      	ldr	r2, [sp, #12]
 8015eb8:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8015ebc:	f2c0 82d1 	blt.w	8016462 <MEMS_runMagCal+0x89a>
 8015ec0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8015ec4:	f280 82cd 	bge.w	8016462 <MEMS_runMagCal+0x89a>
 8015ec8:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8015ecc:	f2c0 82c9 	blt.w	8016462 <MEMS_runMagCal+0x89a>
 8015ed0:	ee07 1a90 	vmov	s15, r1
 8015ed4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015edc:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8015ee0:	1bbe      	subs	r6, r7, r6
 8015ee2:	1a9f      	subs	r7, r3, r2
 8015ee4:	42be      	cmp	r6, r7
 8015ee6:	4633      	mov	r3, r6
 8015ee8:	eba4 0405 	sub.w	r4, r4, r5
 8015eec:	bfb8      	it	lt
 8015eee:	463b      	movlt	r3, r7
 8015ef0:	42a3      	cmp	r3, r4
 8015ef2:	bfb8      	it	lt
 8015ef4:	4623      	movlt	r3, r4
 8015ef6:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8015efa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8015efe:	ee07 3a10 	vmov	s14, r3
 8015f02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015fb0 <MEMS_runMagCal+0x3e8>
 8015f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f0e:	ee25 0a80 	vmul.f32	s0, s11, s0
 8015f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1a:	f100 82a2 	bmi.w	8016462 <MEMS_runMagCal+0x89a>
 8015f1e:	eddd 7a04 	vldr	s15, [sp, #16]
 8015f22:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8015fb4 <MEMS_runMagCal+0x3ec>
 8015f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f2a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015f2e:	eef4 5ac6 	vcmpe.f32	s11, s12
 8015f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f36:	f300 8294 	bgt.w	8016462 <MEMS_runMagCal+0x89a>
 8015f3a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8015f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015f42:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4a:	f301 81f8 	bgt.w	801733e <MEMS_runMagCal+0x1776>
 8015f4e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f5e:	f340 8552 	ble.w	8016a06 <MEMS_runMagCal+0xe3e>
 8015f62:	ee07 6a90 	vmov	s15, r6
 8015f66:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f76:	f340 8546 	ble.w	8016a06 <MEMS_runMagCal+0xe3e>
 8015f7a:	ee07 7a90 	vmov	s15, r7
 8015f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f82:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f8a:	f140 853c 	bpl.w	8016a06 <MEMS_runMagCal+0xe3e>
 8015f8e:	ee07 4a90 	vmov	s15, r4
 8015f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f96:	2300      	movs	r3, #0
 8015f98:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa0:	9303      	str	r3, [sp, #12]
 8015fa2:	bf48      	it	mi
 8015fa4:	2301      	movmi	r3, #1
 8015fa6:	9307      	str	r3, [sp, #28]
 8015fa8:	f000 bd30 	b.w	8016a0c <MEMS_runMagCal+0xe44>
 8015fac:	ffff8000 	.word	0xffff8000
 8015fb0:	43020000 	.word	0x43020000
 8015fb4:	447a0000 	.word	0x447a0000
 8015fb8:	00000000 	.word	0x00000000
 8015fbc:	41f00001 	.word	0x41f00001
 8015fc0:	400ccccd 	.word	0x400ccccd
 8015fc4:	3dcccccd 	.word	0x3dcccccd
 8015fc8:	423c0000 	.word	0x423c0000
 8015fcc:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8015fb8 <MEMS_runMagCal+0x3f0>
 8015fd0:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8015fbc <MEMS_runMagCal+0x3f4>
 8015fd4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015fd8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe0:	dc10      	bgt.n	8016004 <MEMS_runMagCal+0x43c>
 8015fe2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8015fc0 <MEMS_runMagCal+0x3f8>
 8015fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fee:	dc09      	bgt.n	8016004 <MEMS_runMagCal+0x43c>
 8015ff0:	ed94 9a03 	vldr	s18, [r4, #12]
 8015ff4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8015fc4 <MEMS_runMagCal+0x3fc>
 8015ff8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016000:	f201 8527 	bhi.w	8017a52 <MEMS_runMagCal+0x1e8a>
 8016004:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8015fc8 <MEMS_runMagCal+0x400>
 8016008:	edd4 6a03 	vldr	s13, [r4, #12]
 801600c:	ed94 5a00 	vldr	s10, [r4]
 8016010:	edd4 5a01 	vldr	s11, [r4, #4]
 8016014:	ed94 6a02 	vldr	s12, [r4, #8]
 8016018:	edc4 7a06 	vstr	s15, [r4, #24]
 801601c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016020:	ad2e      	add	r5, sp, #184	; 0xb8
 8016022:	2300      	movs	r3, #0
 8016024:	e9c5 3300 	strd	r3, r3, [r5]
 8016028:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801602c:	60ab      	str	r3, [r5, #8]
 801602e:	61ab      	str	r3, [r5, #24]
 8016030:	4be7      	ldr	r3, [pc, #924]	; (80163d0 <MEMS_runMagCal+0x808>)
 8016032:	9311      	str	r3, [sp, #68]	; 0x44
 8016034:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8016038:	eec5 9a88 	vdiv.f32	s19, s11, s16
 801603c:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8016040:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8016044:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8016048:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801604c:	eef0 6a67 	vmov.f32	s13, s15
 8016050:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8016054:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016058:	ee39 9a46 	vsub.f32	s18, s18, s12
 801605c:	eddf 6add 	vldr	s13, [pc, #884]	; 80163d4 <MEMS_runMagCal+0x80c>
 8016060:	ed9f 6add 	vldr	s12, [pc, #884]	; 80163d8 <MEMS_runMagCal+0x810>
 8016064:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801606c:	eef0 6ae6 	vabs.f32	s13, s13
 8016070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016074:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607c:	eef0 7ae7 	vabs.f32	s15, s15
 8016080:	f101 84dd 	bmi.w	8017a3e <MEMS_runMagCal+0x1e76>
 8016084:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80163dc <MEMS_runMagCal+0x814>
 8016088:	eef4 7ac7 	vcmpe.f32	s15, s14
 801608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016090:	f281 8438 	bge.w	8017904 <MEMS_runMagCal+0x1d3c>
 8016094:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80163e0 <MEMS_runMagCal+0x818>
 8016098:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801609c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a0:	f101 8430 	bmi.w	8017904 <MEMS_runMagCal+0x1d3c>
 80160a4:	f002 fc80 	bl	80189a8 <roundf>
 80160a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80160ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80160b0:	ee17 3a90 	vmov	r3, s15
 80160b4:	eeb0 0a69 	vmov.f32	s0, s19
 80160b8:	f8a9 3000 	strh.w	r3, [r9]
 80160bc:	f002 fc74 	bl	80189a8 <roundf>
 80160c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80160c4:	eeb0 0a4a 	vmov.f32	s0, s20
 80160c8:	ee17 3a90 	vmov	r3, s15
 80160cc:	f8a9 3002 	strh.w	r3, [r9, #2]
 80160d0:	f002 fc6a 	bl	80189a8 <roundf>
 80160d4:	eddd 7a08 	vldr	s15, [sp, #32]
 80160d8:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 80160dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80160e0:	ee16 3a90 	vmov	r3, s13
 80160e4:	eddf 7abf 	vldr	s15, [pc, #764]	; 80163e4 <MEMS_runMagCal+0x81c>
 80160e8:	f8a9 3004 	strh.w	r3, [r9, #4]
 80160ec:	ee27 0a27 	vmul.f32	s0, s14, s15
 80160f0:	f002 fc5a 	bl	80189a8 <roundf>
 80160f4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80160f8:	ae0f      	add	r6, sp, #60	; 0x3c
 80160fa:	ed8b 0a01 	vstr	s0, [fp, #4]
 80160fe:	ab10      	add	r3, sp, #64	; 0x40
 8016100:	ee1c 0a10 	vmov	r0, s24
 8016104:	eeb0 0a48 	vmov.f32	s0, s16
 8016108:	4649      	mov	r1, r9
 801610a:	9600      	str	r6, [sp, #0]
 801610c:	aa2d      	add	r2, sp, #180	; 0xb4
 801610e:	f7f8 ff33 	bl	800ef78 <getMagStats.constprop.0>
 8016112:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016116:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80163e8 <MEMS_runMagCal+0x820>
 801611a:	461f      	mov	r7, r3
 801611c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	ee07 3a90 	vmov	s15, r3
 8016126:	ee07 0a10 	vmov	s14, r0
 801612a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801612e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801613e:	dc0f      	bgt.n	8016160 <MEMS_runMagCal+0x598>
 8016140:	ed96 7a00 	vldr	s14, [r6]
 8016144:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016150:	bfc3      	ittte	gt
 8016152:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8016156:	fab3 f383 	clzgt	r3, r3
 801615a:	095b      	lsrgt	r3, r3, #5
 801615c:	2301      	movle	r3, #1
 801615e:	9303      	str	r3, [sp, #12]
 8016160:	ed96 0a00 	vldr	s0, [r6]
 8016164:	f8db 6004 	ldr.w	r6, [fp, #4]
 8016168:	9620      	str	r6, [sp, #128]	; 0x80
 801616a:	ee28 0a80 	vmul.f32	s0, s17, s0
 801616e:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8016172:	f002 fc19 	bl	80189a8 <roundf>
 8016176:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 801617a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801617e:	ee17 3a10 	vmov	r3, s14
 8016182:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8016186:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801618a:	f002 fc0d 	bl	80189a8 <roundf>
 801618e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80163ec <MEMS_runMagCal+0x824>
 8016192:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8016196:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801619a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 801619e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80161a2:	f8d9 0000 	ldr.w	r0, [r9]
 80161a6:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 80161aa:	ee66 6a86 	vmul.f32	s13, s13, s12
 80161ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 80161b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80161b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80161ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80161be:	ee16 2a90 	vmov	r2, s13
 80161c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80161c6:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 80161ca:	f1b8 0f01 	cmp.w	r8, #1
 80161ce:	fa1f fc82 	uxth.w	ip, r2
 80161d2:	bf08      	it	eq
 80161d4:	23ff      	moveq	r3, #255	; 0xff
 80161d6:	ee17 2a10 	vmov	r2, s14
 80161da:	ee17 1a90 	vmov	r1, s15
 80161de:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 80161e2:	ee16 0a10 	vmov	r0, s12
 80161e6:	bf08      	it	eq
 80161e8:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 80161ec:	9b03      	ldr	r3, [sp, #12]
 80161ee:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 80161f2:	b292      	uxth	r2, r2
 80161f4:	b289      	uxth	r1, r1
 80161f6:	2000      	movs	r0, #0
 80161f8:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 80161fc:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8016200:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8016204:	f88b 0000 	strb.w	r0, [fp]
 8016208:	2b00      	cmp	r3, #0
 801620a:	f000 8118 	beq.w	801643e <MEMS_runMagCal+0x876>
 801620e:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8016212:	f88b 0001 	strb.w	r0, [fp, #1]
 8016216:	2b00      	cmp	r3, #0
 8016218:	f041 80fd 	bne.w	8017416 <MEMS_runMagCal+0x184e>
 801621c:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8016220:	ad0e      	add	r5, sp, #56	; 0x38
 8016222:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8016226:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801622a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801622e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8016232:	f8cb 6008 	str.w	r6, [fp, #8]
 8016236:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 801623a:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 801623e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80163f0 <MEMS_runMagCal+0x828>
 8016242:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8016246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801624a:	fb00 f404 	mul.w	r4, r0, r4
 801624e:	ee05 4a90 	vmov	s11, r4
 8016252:	fb00 f406 	mul.w	r4, r0, r6
 8016256:	fb00 f00e 	mul.w	r0, r0, lr
 801625a:	ee06 0a10 	vmov	s12, r0
 801625e:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8016262:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8016266:	ee03 0a90 	vmov	s7, r0
 801626a:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801626e:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8016272:	ee05 4a10 	vmov	s10, r4
 8016276:	ee04 0a10 	vmov	s8, r0
 801627a:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801627e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016282:	ee04 0a90 	vmov	s9, r0
 8016286:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801628a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801628e:	f8dc 0000 	ldr.w	r0, [ip]
 8016292:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8016296:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801629a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801629e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80162a2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80162a6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80162aa:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80162ae:	2001      	movs	r0, #1
 80162b0:	24ff      	movs	r4, #255	; 0xff
 80162b2:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 80162b6:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 80162ba:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80162be:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 80162c2:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 80162c6:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 80162ca:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 80162ce:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 80162d2:	f88b 4012 	strb.w	r4, [fp, #18]
 80162d6:	2f00      	cmp	r7, #0
 80162d8:	f001 82c8 	beq.w	801786c <MEMS_runMagCal+0x1ca4>
 80162dc:	9b05      	ldr	r3, [sp, #20]
 80162de:	ed9f 3a47 	vldr	s6, [pc, #284]	; 80163fc <MEMS_runMagCal+0x834>
 80162e2:	ed93 0a01 	vldr	s0, [r3, #4]
 80162e6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80162ea:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80162ee:	2200      	movs	r2, #0
 80162f0:	ee20 3a03 	vmul.f32	s6, s0, s6
 80162f4:	f04f 34ff 	mov.w	r4, #4294967295
 80162f8:	4616      	mov	r6, r2
 80162fa:	fb96 f3f0 	sdiv	r3, r6, r0
 80162fe:	fb00 6313 	mls	r3, r0, r3, r6
 8016302:	b2db      	uxtb	r3, r3
 8016304:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016308:	1c66      	adds	r6, r4, #1
 801630a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801630e:	ee07 4a90 	vmov	s15, r4
 8016312:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8016316:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801631a:	ee06 4a90 	vmov	s13, r4
 801631e:	fb96 f4f1 	sdiv	r4, r6, r1
 8016322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016326:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801632a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801632e:	ee07 3a10 	vmov	s14, r3
 8016332:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8016336:	ee67 7a85 	vmul.f32	s15, s15, s10
 801633a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801633e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016342:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016346:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801634a:	fb01 6414 	mls	r4, r1, r4, r6
 801634e:	b264      	sxtb	r4, r4
 8016350:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016354:	3201      	adds	r2, #1
 8016356:	ee27 7a06 	vmul.f32	s14, s14, s12
 801635a:	b212      	sxth	r2, r2
 801635c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016360:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8016364:	42ba      	cmp	r2, r7
 8016366:	4616      	mov	r6, r2
 8016368:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801636c:	ee67 7a03 	vmul.f32	s15, s14, s6
 8016370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016374:	ee17 ca90 	vmov	ip, s15
 8016378:	f8a3 c014 	strh.w	ip, [r3, #20]
 801637c:	dbbd      	blt.n	80162fa <MEMS_runMagCal+0x732>
 801637e:	f88b 4012 	strb.w	r4, [fp, #18]
 8016382:	428f      	cmp	r7, r1
 8016384:	bf28      	it	cs
 8016386:	460f      	movcs	r7, r1
 8016388:	f88b 7010 	strb.w	r7, [fp, #16]
 801638c:	ee1c 0a10 	vmov	r0, s24
 8016390:	9500      	str	r5, [sp, #0]
 8016392:	4642      	mov	r2, r8
 8016394:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8016398:	ab0d      	add	r3, sp, #52	; 0x34
 801639a:	f7f8 fded 	bl	800ef78 <getMagStats.constprop.0>
 801639e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80163f4 <MEMS_runMagCal+0x82c>
 80163a2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80163a6:	edd5 6a00 	vldr	s13, [r5]
 80163aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80163ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80163b2:	eef0 7ae7 	vabs.f32	s15, s15
 80163b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80163ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163be:	d525      	bpl.n	801640c <MEMS_runMagCal+0x844>
 80163c0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80163c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163c8:	f101 8257 	bmi.w	801787a <MEMS_runMagCal+0x1cb2>
 80163cc:	e01e      	b.n	801640c <MEMS_runMagCal+0x844>
 80163ce:	bf00      	nop
 80163d0:	41f00001 	.word	0x41f00001
 80163d4:	3f8ccccd 	.word	0x3f8ccccd
 80163d8:	3f266666 	.word	0x3f266666
 80163dc:	3eb33333 	.word	0x3eb33333
 80163e0:	3f19999a 	.word	0x3f19999a
 80163e4:	3a83126f 	.word	0x3a83126f
 80163e8:	3c23d70a 	.word	0x3c23d70a
 80163ec:	447a0000 	.word	0x447a0000
 80163f0:	358637bd 	.word	0x358637bd
 80163f4:	423c0000 	.word	0x423c0000
 80163f8:	4423d666 	.word	0x4423d666
 80163fc:	42c80000 	.word	0x42c80000
 8016400:	427c0000 	.word	0x427c0000
 8016404:	3f666666 	.word	0x3f666666
 8016408:	3eaaaaab 	.word	0x3eaaaaab
 801640c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016418:	d507      	bpl.n	801642a <MEMS_runMagCal+0x862>
 801641a:	eef4 6a47 	vcmp.f32	s13, s14
 801641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016422:	9b03      	ldr	r3, [sp, #12]
 8016424:	bf48      	it	mi
 8016426:	2302      	movmi	r3, #2
 8016428:	9303      	str	r3, [sp, #12]
 801642a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801642e:	9a03      	ldr	r2, [sp, #12]
 8016430:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8016434:	2bc8      	cmp	r3, #200	; 0xc8
 8016436:	d902      	bls.n	801643e <MEMS_runMagCal+0x876>
 8016438:	2302      	movs	r3, #2
 801643a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801643e:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8016442:	ecbd 8b0a 	vpop	{d8-d12}
 8016446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801644e:	4291      	cmp	r1, r2
 8016450:	f4ff abea 	bcc.w	8015c28 <MEMS_runMagCal+0x60>
 8016454:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016458:	2b00      	cmp	r3, #0
 801645a:	f47f abf9 	bne.w	8015c50 <MEMS_runMagCal+0x88>
 801645e:	f7ff bbed 	b.w	8015c3c <MEMS_runMagCal+0x74>
 8016462:	2702      	movs	r7, #2
 8016464:	2300      	movs	r3, #0
 8016466:	9307      	str	r3, [sp, #28]
 8016468:	9303      	str	r3, [sp, #12]
 801646a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80163f8 <MEMS_runMagCal+0x830>
 801646e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016476:	f140 8260 	bpl.w	801693a <MEMS_runMagCal+0xd72>
 801647a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80163fc <MEMS_runMagCal+0x834>
 801647e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016482:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016486:	2b01      	cmp	r3, #1
 8016488:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 801648c:	d911      	bls.n	80164b2 <MEMS_runMagCal+0x8ea>
 801648e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016492:	ee17 3a90 	vmov	r3, s15
 8016496:	b29b      	uxth	r3, r3
 8016498:	2bc7      	cmp	r3, #199	; 0xc7
 801649a:	f201 8359 	bhi.w	8017b50 <MEMS_runMagCal+0x1f88>
 801649e:	2300      	movs	r3, #0
 80164a0:	22ff      	movs	r2, #255	; 0xff
 80164a2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80164a6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80164aa:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 80164ae:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80164b2:	2f00      	cmp	r7, #0
 80164b4:	f040 824d 	bne.w	8016952 <MEMS_runMagCal+0xd8a>
 80164b8:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	f2c0 839e 	blt.w	8016bfe <MEMS_runMagCal+0x1036>
 80164c2:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80164c6:	1c5a      	adds	r2, r3, #1
 80164c8:	fbb2 f3f6 	udiv	r3, r2, r6
 80164cc:	fb06 2313 	mls	r3, r6, r3, r2
 80164d0:	b25b      	sxtb	r3, r3
 80164d2:	461d      	mov	r5, r3
 80164d4:	f89b 4010 	ldrb.w	r4, [fp, #16]
 80164d8:	f88b 3012 	strb.w	r3, [fp, #18]
 80164dc:	3401      	adds	r4, #1
 80164de:	42b4      	cmp	r4, r6
 80164e0:	bfa8      	it	ge
 80164e2:	4634      	movge	r4, r6
 80164e4:	fa5f f884 	uxtb.w	r8, r4
 80164e8:	f88b 8010 	strb.w	r8, [fp, #16]
 80164ec:	f002 fa5c 	bl	80189a8 <roundf>
 80164f0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80164f4:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 80164f8:	ee10 2a10 	vmov	r2, s0
 80164fc:	829a      	strh	r2, [r3, #20]
 80164fe:	2f00      	cmp	r7, #0
 8016500:	f040 8227 	bne.w	8016952 <MEMS_runMagCal+0xd8a>
 8016504:	f8db 200c 	ldr.w	r2, [fp, #12]
 8016508:	b122      	cbz	r2, 8016514 <MEMS_runMagCal+0x94c>
 801650a:	9908      	ldr	r1, [sp, #32]
 801650c:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8016510:	4299      	cmp	r1, r3
 8016512:	d394      	bcc.n	801643e <MEMS_runMagCal+0x876>
 8016514:	9b03      	ldr	r3, [sp, #12]
 8016516:	2b01      	cmp	r3, #1
 8016518:	d091      	beq.n	801643e <MEMS_runMagCal+0x876>
 801651a:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 801651e:	1ebb      	subs	r3, r7, #2
 8016520:	2b01      	cmp	r3, #1
 8016522:	f240 8232 	bls.w	801698a <MEMS_runMagCal+0xdc2>
 8016526:	9b05      	ldr	r3, [sp, #20]
 8016528:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8016400 <MEMS_runMagCal+0x838>
 801652c:	ed93 8a01 	vldr	s16, [r3, #4]
 8016530:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8016534:	9a06      	ldr	r2, [sp, #24]
 8016536:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 801653a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801653c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016540:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8016544:	fb02 1404 	mla	r4, r2, r4, r1
 8016548:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801654c:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8016550:	3310      	adds	r3, #16
 8016552:	42a3      	cmp	r3, r4
 8016554:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8016558:	ee28 9a89 	vmul.f32	s18, s17, s18
 801655c:	ee0c 2a10 	vmov	s24, r2
 8016560:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016568:	ee17 2a90 	vmov	r2, s15
 801656c:	fa1f f982 	uxth.w	r9, r2
 8016570:	f080 81fe 	bcs.w	8016970 <MEMS_runMagCal+0xda8>
 8016574:	f242 3328 	movw	r3, #9000	; 0x2328
 8016578:	429c      	cmp	r4, r3
 801657a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801657e:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8016582:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8016586:	bf1a      	itte	ne
 8016588:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801658c:	3c28      	subne	r4, #40	; 0x28
 801658e:	2400      	moveq	r4, #0
 8016590:	42a8      	cmp	r0, r5
 8016592:	f102 0201 	add.w	r2, r2, #1
 8016596:	f000 8727 	beq.w	80173e8 <MEMS_runMagCal+0x1820>
 801659a:	1a12      	subs	r2, r2, r0
 801659c:	fb92 f1f5 	sdiv	r1, r2, r5
 80165a0:	fb05 2211 	mls	r2, r5, r1, r2
 80165a4:	2a00      	cmp	r2, #0
 80165a6:	bfb8      	it	lt
 80165a8:	1952      	addlt	r2, r2, r5
 80165aa:	b211      	sxth	r1, r2
 80165ac:	b358      	cbz	r0, 8016606 <MEMS_runMagCal+0xa3e>
 80165ae:	3801      	subs	r0, #1
 80165b0:	b280      	uxth	r0, r0
 80165b2:	3001      	adds	r0, #1
 80165b4:	1b36      	subs	r6, r6, r4
 80165b6:	9f03      	ldr	r7, [sp, #12]
 80165b8:	b2b6      	uxth	r6, r6
 80165ba:	4408      	add	r0, r1
 80165bc:	e002      	b.n	80165c4 <MEMS_runMagCal+0x9fc>
 80165be:	3101      	adds	r1, #1
 80165c0:	4281      	cmp	r1, r0
 80165c2:	d01b      	beq.n	80165fc <MEMS_runMagCal+0xa34>
 80165c4:	fb91 f3f5 	sdiv	r3, r1, r5
 80165c8:	fb05 1313 	mls	r3, r5, r3, r1
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80165d2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80165d6:	4432      	add	r2, r6
 80165d8:	b212      	sxth	r2, r2
 80165da:	2a00      	cmp	r2, #0
 80165dc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80165e0:	daed      	bge.n	80165be <MEMS_runMagCal+0x9f6>
 80165e2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80165e6:	1e5a      	subs	r2, r3, #1
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	f000 8306 	beq.w	8016bfa <MEMS_runMagCal+0x1032>
 80165ee:	3101      	adds	r1, #1
 80165f0:	4281      	cmp	r1, r0
 80165f2:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80165f6:	f04f 0701 	mov.w	r7, #1
 80165fa:	d1e3      	bne.n	80165c4 <MEMS_runMagCal+0x9fc>
 80165fc:	2f01      	cmp	r7, #1
 80165fe:	f001 80ea 	beq.w	80177d6 <MEMS_runMagCal+0x1c0e>
 8016602:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8016606:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 801660a:	2800      	cmp	r0, #0
 801660c:	f000 81b6 	beq.w	801697c <MEMS_runMagCal+0xdb4>
 8016610:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016614:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016616:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801661a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 801661e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8016622:	3308      	adds	r3, #8
 8016624:	441c      	add	r4, r3
 8016626:	42a2      	cmp	r2, r4
 8016628:	f200 86e6 	bhi.w	80173f8 <MEMS_runMagCal+0x1830>
 801662c:	9b07      	ldr	r3, [sp, #28]
 801662e:	b923      	cbnz	r3, 801663a <MEMS_runMagCal+0xa72>
 8016630:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016634:	2b0a      	cmp	r3, #10
 8016636:	f240 81a5 	bls.w	8016984 <MEMS_runMagCal+0xdbc>
 801663a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801663e:	9302      	str	r3, [sp, #8]
 8016640:	2b00      	cmp	r3, #0
 8016642:	f000 819f 	beq.w	8016984 <MEMS_runMagCal+0xdbc>
 8016646:	ee29 aa09 	vmul.f32	s20, s18, s18
 801664a:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8016404 <MEMS_runMagCal+0x83c>
 801664e:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8016408 <MEMS_runMagCal+0x840>
 8016652:	9b03      	ldr	r3, [sp, #12]
 8016654:	9309      	str	r3, [sp, #36]	; 0x24
 8016656:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801665a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801665e:	2100      	movs	r1, #0
 8016660:	ee2a aa26 	vmul.f32	s20, s20, s13
 8016664:	ee28 8a07 	vmul.f32	s16, s16, s14
 8016668:	ee69 9a29 	vmul.f32	s19, s18, s19
 801666c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016670:	468a      	mov	sl, r1
 8016672:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016674:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8016678:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 80e2 	beq.w	8016846 <MEMS_runMagCal+0xc7e>
 8016682:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8016686:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801668a:	ee07 4a90 	vmov	s15, r4
 801668e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016692:	eef0 7ae7 	vabs.f32	s15, s15
 8016696:	eef4 7ae8 	vcmpe.f32	s15, s17
 801669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669e:	f100 820b 	bmi.w	8016ab8 <MEMS_runMagCal+0xef0>
 80166a2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80166a6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80166aa:	2f00      	cmp	r7, #0
 80166ac:	f000 8223 	beq.w	8016af6 <MEMS_runMagCal+0xf2e>
 80166b0:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 80166b4:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 80166b8:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 80166bc:	1b52      	subs	r2, r2, r5
 80166be:	fb02 f102 	mul.w	r1, r2, r2
 80166c2:	1b02      	subs	r2, r0, r4
 80166c4:	fb02 1202 	mla	r2, r2, r2, r1
 80166c8:	1b9b      	subs	r3, r3, r6
 80166ca:	fb03 2303 	mla	r3, r3, r3, r2
 80166ce:	ee07 3a90 	vmov	s15, r3
 80166d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166d6:	eeb4 aae7 	vcmpe.f32	s20, s15
 80166da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166de:	f300 80b2 	bgt.w	8016846 <MEMS_runMagCal+0xc7e>
 80166e2:	fb94 f3f9 	sdiv	r3, r4, r9
 80166e6:	fb09 4313 	mls	r3, r9, r3, r4
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	bfb8      	it	lt
 80166ee:	444b      	addlt	r3, r9
 80166f0:	b21b      	sxth	r3, r3
 80166f2:	ee00 3a10 	vmov	s0, r3
 80166f6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80166fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80166fe:	f002 f953 	bl	80189a8 <roundf>
 8016702:	fb95 f3f9 	sdiv	r3, r5, r9
 8016706:	fb09 5313 	mls	r3, r9, r3, r5
 801670a:	2b00      	cmp	r3, #0
 801670c:	bfb8      	it	lt
 801670e:	444b      	addlt	r3, r9
 8016710:	b21b      	sxth	r3, r3
 8016712:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016716:	ee00 3a10 	vmov	s0, r3
 801671a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801671e:	edcd 7a04 	vstr	s15, [sp, #16]
 8016722:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016726:	f002 f93f 	bl	80189a8 <roundf>
 801672a:	fb96 f3f9 	sdiv	r3, r6, r9
 801672e:	fb09 6313 	mls	r3, r9, r3, r6
 8016732:	2b00      	cmp	r3, #0
 8016734:	bfb8      	it	lt
 8016736:	444b      	addlt	r3, r9
 8016738:	b21b      	sxth	r3, r3
 801673a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801673e:	ee00 3a10 	vmov	s0, r3
 8016742:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016746:	f89d 8010 	ldrb.w	r8, [sp, #16]
 801674a:	edcd 7a04 	vstr	s15, [sp, #16]
 801674e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8016752:	9204      	str	r2, [sp, #16]
 8016754:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016758:	f002 f926 	bl	80189a8 <roundf>
 801675c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016760:	f1b8 0f1f 	cmp.w	r8, #31
 8016764:	edcd 7a06 	vstr	s15, [sp, #24]
 8016768:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801676c:	9106      	str	r1, [sp, #24]
 801676e:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 8016772:	f240 823d 	bls.w	8016bf0 <MEMS_runMagCal+0x1028>
 8016776:	f1a8 0220 	sub.w	r2, r8, #32
 801677a:	2101      	movs	r1, #1
 801677c:	fa01 f202 	lsl.w	r2, r1, r2
 8016780:	401a      	ands	r2, r3
 8016782:	9804      	ldr	r0, [sp, #16]
 8016784:	281f      	cmp	r0, #31
 8016786:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801678a:	f240 821f 	bls.w	8016bcc <MEMS_runMagCal+0x1004>
 801678e:	f1a0 0120 	sub.w	r1, r0, #32
 8016792:	2001      	movs	r0, #1
 8016794:	fa00 f101 	lsl.w	r1, r0, r1
 8016798:	ea01 0c03 	and.w	ip, r1, r3
 801679c:	9906      	ldr	r1, [sp, #24]
 801679e:	291f      	cmp	r1, #31
 80167a0:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 80167a4:	f240 821e 	bls.w	8016be4 <MEMS_runMagCal+0x101c>
 80167a8:	f1a1 0020 	sub.w	r0, r1, #32
 80167ac:	2101      	movs	r1, #1
 80167ae:	fa01 f000 	lsl.w	r0, r1, r0
 80167b2:	4003      	ands	r3, r0
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	f040 812b 	bne.w	8016a10 <MEMS_runMagCal+0xe48>
 80167ba:	ea52 030c 	orrs.w	r3, r2, ip
 80167be:	f040 812c 	bne.w	8016a1a <MEMS_runMagCal+0xe52>
 80167c2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80167c6:	930a      	str	r3, [sp, #40]	; 0x28
 80167c8:	461a      	mov	r2, r3
 80167ca:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80167ce:	3301      	adds	r3, #1
 80167d0:	4694      	mov	ip, r2
 80167d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80167d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167d6:	fb92 f3fc 	sdiv	r3, r2, ip
 80167da:	3701      	adds	r7, #1
 80167dc:	4567      	cmp	r7, ip
 80167de:	bfa8      	it	ge
 80167e0:	4667      	movge	r7, ip
 80167e2:	fb0c 2c13 	mls	ip, ip, r3, r2
 80167e6:	b2ff      	uxtb	r7, r7
 80167e8:	fa4f fc8c 	sxtb.w	ip, ip
 80167ec:	9905      	ldr	r1, [sp, #20]
 80167ee:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80167f2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80167f6:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80167fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167fc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016800:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8016804:	1a9b      	subs	r3, r3, r2
 8016806:	fb01 330a 	mla	r3, r1, sl, r3
 801680a:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 801680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016810:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 8016814:	429f      	cmp	r7, r3
 8016816:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 801681a:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 801681e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8016822:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8016826:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801682a:	f000 8758 	beq.w	80176de <MEMS_runMagCal+0x1b16>
 801682e:	9b06      	ldr	r3, [sp, #24]
 8016830:	9a04      	ldr	r2, [sp, #16]
 8016832:	ee1c 0a10 	vmov	r0, s24
 8016836:	4641      	mov	r1, r8
 8016838:	f7f8 f874 	bl	800e924 <MEMS_setMagIndexToOne>
 801683c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016840:	9302      	str	r3, [sp, #8]
 8016842:	2301      	movs	r3, #1
 8016844:	9309      	str	r3, [sp, #36]	; 0x24
 8016846:	9b02      	ldr	r3, [sp, #8]
 8016848:	f10a 0a01 	add.w	sl, sl, #1
 801684c:	fa0f fa8a 	sxth.w	sl, sl
 8016850:	459a      	cmp	sl, r3
 8016852:	4651      	mov	r1, sl
 8016854:	f6ff af0d 	blt.w	8016672 <MEMS_runMagCal+0xaaa>
 8016858:	f89b 3000 	ldrb.w	r3, [fp]
 801685c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801685e:	431a      	orrs	r2, r3
 8016860:	b2d3      	uxtb	r3, r2
 8016862:	f88b 3000 	strb.w	r3, [fp]
 8016866:	2b00      	cmp	r3, #0
 8016868:	f43f ade9 	beq.w	801643e <MEMS_runMagCal+0x876>
 801686c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8016870:	9306      	str	r3, [sp, #24]
 8016872:	2b19      	cmp	r3, #25
 8016874:	f67f ade3 	bls.w	801643e <MEMS_runMagCal+0x876>
 8016878:	f8db 3008 	ldr.w	r3, [fp, #8]
 801687c:	9309      	str	r3, [sp, #36]	; 0x24
 801687e:	b123      	cbz	r3, 801688a <MEMS_runMagCal+0xcc2>
 8016880:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016884:	2b00      	cmp	r3, #0
 8016886:	f040 8583 	bne.w	8017390 <MEMS_runMagCal+0x17c8>
 801688a:	9b07      	ldr	r3, [sp, #28]
 801688c:	2b00      	cmp	r3, #0
 801688e:	f040 872f 	bne.w	80176f0 <MEMS_runMagCal+0x1b28>
 8016892:	9b05      	ldr	r3, [sp, #20]
 8016894:	9903      	ldr	r1, [sp, #12]
 8016896:	ed93 8a01 	vldr	s16, [r3, #4]
 801689a:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801689e:	9302      	str	r3, [sp, #8]
 80168a0:	2600      	movs	r6, #0
 80168a2:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 80168a6:	9304      	str	r3, [sp, #16]
 80168a8:	f04f 0a01 	mov.w	sl, #1
 80168ac:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 80168b0:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 80168b4:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 80168b8:	9624      	str	r6, [sp, #144]	; 0x90
 80168ba:	4657      	mov	r7, sl
 80168bc:	460b      	mov	r3, r1
 80168be:	460c      	mov	r4, r1
 80168c0:	e013      	b.n	80168ea <MEMS_runMagCal+0xd22>
 80168c2:	f1b9 0f00 	cmp.w	r9, #0
 80168c6:	bf18      	it	ne
 80168c8:	3101      	addne	r1, #1
 80168ca:	2d00      	cmp	r5, #0
 80168cc:	bf18      	it	ne
 80168ce:	3401      	addne	r4, #1
 80168d0:	2a00      	cmp	r2, #0
 80168d2:	bf18      	it	ne
 80168d4:	3301      	addne	r3, #1
 80168d6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80168da:	b2c9      	uxtb	r1, r1
 80168dc:	b2e4      	uxtb	r4, r4
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	f000 81a2 	beq.w	8016c28 <MEMS_runMagCal+0x1060>
 80168e4:	3601      	adds	r6, #1
 80168e6:	fa5f fa8c 	uxtb.w	sl, ip
 80168ea:	9804      	ldr	r0, [sp, #16]
 80168ec:	f1a6 0220 	sub.w	r2, r6, #32
 80168f0:	fa07 f202 	lsl.w	r2, r7, r2
 80168f4:	ea02 0500 	and.w	r5, r2, r0
 80168f8:	9802      	ldr	r0, [sp, #8]
 80168fa:	2e1f      	cmp	r6, #31
 80168fc:	ea08 0902 	and.w	r9, r8, r2
 8016900:	f10a 0c01 	add.w	ip, sl, #1
 8016904:	ea02 0200 	and.w	r2, r2, r0
 8016908:	fa07 f006 	lsl.w	r0, r7, r6
 801690c:	d8d9      	bhi.n	80168c2 <MEMS_runMagCal+0xcfa>
 801690e:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8016912:	ea00 0902 	and.w	r9, r0, r2
 8016916:	4005      	ands	r5, r0
 8016918:	ea0e 0000 	and.w	r0, lr, r0
 801691c:	f1b9 0f00 	cmp.w	r9, #0
 8016920:	bf18      	it	ne
 8016922:	3401      	addne	r4, #1
 8016924:	2d00      	cmp	r5, #0
 8016926:	bf0c      	ite	eq
 8016928:	461d      	moveq	r5, r3
 801692a:	1c5d      	addne	r5, r3, #1
 801692c:	2800      	cmp	r0, #0
 801692e:	bf18      	it	ne
 8016930:	3101      	addne	r1, #1
 8016932:	b2e4      	uxtb	r4, r4
 8016934:	b2eb      	uxtb	r3, r5
 8016936:	b2c9      	uxtb	r1, r1
 8016938:	e7d4      	b.n	80168e4 <MEMS_runMagCal+0xd1c>
 801693a:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801693e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8016c14 <MEMS_runMagCal+0x104c>
 8016942:	2b01      	cmp	r3, #1
 8016944:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8016948:	f63f ada9 	bhi.w	801649e <MEMS_runMagCal+0x8d6>
 801694c:	2f00      	cmp	r7, #0
 801694e:	f43f adb3 	beq.w	80164b8 <MEMS_runMagCal+0x8f0>
 8016952:	9908      	ldr	r1, [sp, #32]
 8016954:	f8cb 100c 	str.w	r1, [fp, #12]
 8016958:	2200      	movs	r2, #0
 801695a:	23ff      	movs	r3, #255	; 0xff
 801695c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8016960:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8016964:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8016968:	ecbd 8b0a 	vpop	{d8-d12}
 801696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016970:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8016974:	4634      	mov	r4, r6
 8016976:	2800      	cmp	r0, #0
 8016978:	f47f ae4a 	bne.w	8016610 <MEMS_runMagCal+0xa48>
 801697c:	9b07      	ldr	r3, [sp, #28]
 801697e:	2b00      	cmp	r3, #0
 8016980:	f47f ae5b 	bne.w	801663a <MEMS_runMagCal+0xa72>
 8016984:	9b03      	ldr	r3, [sp, #12]
 8016986:	9309      	str	r3, [sp, #36]	; 0x24
 8016988:	e766      	b.n	8016858 <MEMS_runMagCal+0xc90>
 801698a:	45b0      	cmp	r8, r6
 801698c:	f000 86b9 	beq.w	8017702 <MEMS_runMagCal+0x1b3a>
 8016990:	2f03      	cmp	r7, #3
 8016992:	f47f adc8 	bne.w	8016526 <MEMS_runMagCal+0x95e>
 8016996:	ee07 2a90 	vmov	s15, r2
 801699a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8016c18 <MEMS_runMagCal+0x1050>
 801699e:	ed9b 7a01 	vldr	s14, [fp, #4]
 80169a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80169aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80169ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80169b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b6:	f77f adb6 	ble.w	8016526 <MEMS_runMagCal+0x95e>
 80169ba:	f8db 3008 	ldr.w	r3, [fp, #8]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	f43f adb1 	beq.w	8016526 <MEMS_runMagCal+0x95e>
 80169c4:	eddd 7a08 	vldr	s15, [sp, #32]
 80169c8:	330a      	adds	r3, #10
 80169ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80169ce:	ee07 3a90 	vmov	s15, r3
 80169d2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80169d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169da:	eef4 6ae7 	vcmpe.f32	s13, s15
 80169de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e2:	f77f ada0 	ble.w	8016526 <MEMS_runMagCal+0x95e>
 80169e6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f47f ad9b 	bne.w	8016526 <MEMS_runMagCal+0x95e>
 80169f0:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	f43f ad22 	beq.w	801643e <MEMS_runMagCal+0x876>
 80169fa:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80169fe:	2bff      	cmp	r3, #255	; 0xff
 8016a00:	f47f ad1d 	bne.w	801643e <MEMS_runMagCal+0x876>
 8016a04:	e58f      	b.n	8016526 <MEMS_runMagCal+0x95e>
 8016a06:	2300      	movs	r3, #0
 8016a08:	9307      	str	r3, [sp, #28]
 8016a0a:	9303      	str	r3, [sp, #12]
 8016a0c:	2700      	movs	r7, #0
 8016a0e:	e52c      	b.n	801646a <MEMS_runMagCal+0x8a2>
 8016a10:	b11a      	cbz	r2, 8016a1a <MEMS_runMagCal+0xe52>
 8016a12:	f1bc 0f00 	cmp.w	ip, #0
 8016a16:	f47f af16 	bne.w	8016846 <MEMS_runMagCal+0xc7e>
 8016a1a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8016a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a20:	461a      	mov	r2, r3
 8016a22:	4297      	cmp	r7, r2
 8016a24:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016a28:	f000 848f 	beq.w	801734a <MEMS_runMagCal+0x1782>
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	4611      	mov	r1, r2
 8016a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a32:	1bdb      	subs	r3, r3, r7
 8016a34:	fb93 f2f2 	sdiv	r2, r3, r2
 8016a38:	fb01 3212 	mls	r2, r1, r2, r3
 8016a3c:	2a00      	cmp	r2, #0
 8016a3e:	bfbc      	itt	lt
 8016a40:	460b      	movlt	r3, r1
 8016a42:	18d2      	addlt	r2, r2, r3
 8016a44:	468c      	mov	ip, r1
 8016a46:	b212      	sxth	r2, r2
 8016a48:	f107 3eff 	add.w	lr, r7, #4294967295
 8016a4c:	fa5f fe8e 	uxtb.w	lr, lr
 8016a50:	f10e 0e01 	add.w	lr, lr, #1
 8016a54:	4496      	add	lr, r2
 8016a56:	e002      	b.n	8016a5e <MEMS_runMagCal+0xe96>
 8016a58:	4572      	cmp	r2, lr
 8016a5a:	f43f aebb 	beq.w	80167d4 <MEMS_runMagCal+0xc0c>
 8016a5e:	fb92 f3fc 	sdiv	r3, r2, ip
 8016a62:	fb0c 2313 	mls	r3, ip, r3, r2
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016a6c:	3201      	adds	r2, #1
 8016a6e:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8016a72:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8016a76:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016a7a:	1a20      	subs	r0, r4, r0
 8016a7c:	1a69      	subs	r1, r5, r1
 8016a7e:	ee07 0a90 	vmov	s15, r0
 8016a82:	ee06 1a90 	vmov	s13, r1
 8016a86:	1af3      	subs	r3, r6, r3
 8016a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016a90:	ee07 3a10 	vmov	s14, r3
 8016a94:	eef0 7ae7 	vabs.f32	s15, s15
 8016a98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016a9c:	eef0 6ae6 	vabs.f32	s13, s13
 8016aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016aa4:	eeb0 7ac7 	vabs.f32	s14, s14
 8016aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016aac:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab4:	ddd0      	ble.n	8016a58 <MEMS_runMagCal+0xe90>
 8016ab6:	e6c6      	b.n	8016846 <MEMS_runMagCal+0xc7e>
 8016ab8:	ee07 5a90 	vmov	s15, r5
 8016abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ac0:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016ac4:	eef0 7ae7 	vabs.f32	s15, s15
 8016ac8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad0:	f77f ade9 	ble.w	80166a6 <MEMS_runMagCal+0xade>
 8016ad4:	ee07 6a90 	vmov	s15, r6
 8016ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016adc:	eef0 7ae7 	vabs.f32	s15, s15
 8016ae0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae8:	f73f aead 	bgt.w	8016846 <MEMS_runMagCal+0xc7e>
 8016aec:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8016af0:	2f00      	cmp	r7, #0
 8016af2:	f47f addd 	bne.w	80166b0 <MEMS_runMagCal+0xae8>
 8016af6:	fb94 f2f9 	sdiv	r2, r4, r9
 8016afa:	f04f 0301 	mov.w	r3, #1
 8016afe:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8016b02:	9b05      	ldr	r3, [sp, #20]
 8016b04:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8016b08:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8016b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b0e:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8016b12:	fb09 4212 	mls	r2, r9, r2, r4
 8016b16:	2a00      	cmp	r2, #0
 8016b18:	fb01 3300 	mla	r3, r1, r0, r3
 8016b1c:	bfb8      	it	lt
 8016b1e:	444a      	addlt	r2, r9
 8016b20:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8016b24:	b213      	sxth	r3, r2
 8016b26:	ee00 3a10 	vmov	s0, r3
 8016b2a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016b2e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8016b32:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8016b36:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8016b3a:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8016b3e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8016b42:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016b46:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8016b4a:	f001 ff2d 	bl	80189a8 <roundf>
 8016b4e:	fb95 f3f9 	sdiv	r3, r5, r9
 8016b52:	fb09 5513 	mls	r5, r9, r3, r5
 8016b56:	2d00      	cmp	r5, #0
 8016b58:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016b5c:	bfb8      	it	lt
 8016b5e:	444d      	addlt	r5, r9
 8016b60:	b22d      	sxth	r5, r5
 8016b62:	edcd 7a02 	vstr	s15, [sp, #8]
 8016b66:	ee07 5a90 	vmov	s15, r5
 8016b6a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016b72:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016b76:	f001 ff17 	bl	80189a8 <roundf>
 8016b7a:	fb96 f3f9 	sdiv	r3, r6, r9
 8016b7e:	fb09 6613 	mls	r6, r9, r3, r6
 8016b82:	2e00      	cmp	r6, #0
 8016b84:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016b88:	bfb8      	it	lt
 8016b8a:	444e      	addlt	r6, r9
 8016b8c:	b236      	sxth	r6, r6
 8016b8e:	edcd 7a02 	vstr	s15, [sp, #8]
 8016b92:	ee07 6a90 	vmov	s15, r6
 8016b96:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016b9a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016b9e:	9204      	str	r2, [sp, #16]
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba8:	f001 fefe 	bl	80189a8 <roundf>
 8016bac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016bb0:	9a04      	ldr	r2, [sp, #16]
 8016bb2:	edcd 7a02 	vstr	s15, [sp, #8]
 8016bb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8016bba:	ee1c 0a10 	vmov	r0, s24
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	f7f7 feb0 	bl	800e924 <MEMS_setMagIndexToOne>
 8016bc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016bc8:	9302      	str	r3, [sp, #8]
 8016bca:	e63c      	b.n	8016846 <MEMS_runMagCal+0xc7e>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2001      	movs	r0, #1
 8016bd0:	fa00 f303 	lsl.w	r3, r0, r3
 8016bd4:	ea01 0c03 	and.w	ip, r1, r3
 8016bd8:	9906      	ldr	r1, [sp, #24]
 8016bda:	291f      	cmp	r1, #31
 8016bdc:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8016be0:	f63f ade2 	bhi.w	80167a8 <MEMS_runMagCal+0xbe0>
 8016be4:	460b      	mov	r3, r1
 8016be6:	2101      	movs	r1, #1
 8016be8:	fa01 f303 	lsl.w	r3, r1, r3
 8016bec:	4003      	ands	r3, r0
 8016bee:	e5e1      	b.n	80167b4 <MEMS_runMagCal+0xbec>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	fa03 f308 	lsl.w	r3, r3, r8
 8016bf6:	401a      	ands	r2, r3
 8016bf8:	e5c3      	b.n	8016782 <MEMS_runMagCal+0xbba>
 8016bfa:	2701      	movs	r7, #1
 8016bfc:	e4df      	b.n	80165be <MEMS_runMagCal+0x9f6>
 8016bfe:	2500      	movs	r5, #0
 8016c00:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8016c04:	462b      	mov	r3, r5
 8016c06:	e465      	b.n	80164d4 <MEMS_runMagCal+0x90c>
 8016c08:	460f      	mov	r7, r1
 8016c0a:	e42b      	b.n	8016464 <MEMS_runMagCal+0x89c>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	9304      	str	r3, [sp, #16]
 8016c10:	f7ff b941 	b.w	8015e96 <MEMS_runMagCal+0x2ce>
 8016c14:	477fff00 	.word	0x477fff00
 8016c18:	3a83126f 	.word	0x3a83126f
 8016c1c:	42340000 	.word	0x42340000
 8016c20:	3faccccd 	.word	0x3faccccd
 8016c24:	00000000 	.word	0x00000000
 8016c28:	2905      	cmp	r1, #5
 8016c2a:	f240 8383 	bls.w	8017334 <MEMS_runMagCal+0x176c>
 8016c2e:	2c05      	cmp	r4, #5
 8016c30:	f240 8380 	bls.w	8017334 <MEMS_runMagCal+0x176c>
 8016c34:	2b05      	cmp	r3, #5
 8016c36:	f240 837d 	bls.w	8017334 <MEMS_runMagCal+0x176c>
 8016c3a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016c3e:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8016c42:	9302      	str	r3, [sp, #8]
 8016c44:	9b06      	ldr	r3, [sp, #24]
 8016c46:	4553      	cmp	r3, sl
 8016c48:	f000 85f1 	beq.w	801782e <MEMS_runMagCal+0x1c66>
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	9b02      	ldr	r3, [sp, #8]
 8016c50:	3301      	adds	r3, #1
 8016c52:	9304      	str	r3, [sp, #16]
 8016c54:	1a9b      	subs	r3, r3, r2
 8016c56:	fb93 f2fa 	sdiv	r2, r3, sl
 8016c5a:	fb0a 3212 	mls	r2, sl, r2, r3
 8016c5e:	2a00      	cmp	r2, #0
 8016c60:	bfb8      	it	lt
 8016c62:	4452      	addlt	r2, sl
 8016c64:	46d1      	mov	r9, sl
 8016c66:	b212      	sxth	r2, r2
 8016c68:	9906      	ldr	r1, [sp, #24]
 8016c6a:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8016c6e:	f101 38ff 	add.w	r8, r1, #4294967295
 8016c72:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8016c76:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8016c7a:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8016c7e:	fa5f f888 	uxtb.w	r8, r8
 8016c82:	f108 0801 	add.w	r8, r8, #1
 8016c86:	468e      	mov	lr, r1
 8016c88:	463e      	mov	r6, r7
 8016c8a:	46ac      	mov	ip, r5
 8016c8c:	4490      	add	r8, r2
 8016c8e:	fb92 f3f9 	sdiv	r3, r2, r9
 8016c92:	fb09 2313 	mls	r3, r9, r3, r2
 8016c96:	b2db      	uxtb	r3, r3
 8016c98:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016c9c:	3201      	adds	r2, #1
 8016c9e:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8016ca2:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8016ca6:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016caa:	42a1      	cmp	r1, r4
 8016cac:	bfb8      	it	lt
 8016cae:	4621      	movlt	r1, r4
 8016cb0:	45a6      	cmp	lr, r4
 8016cb2:	bfa8      	it	ge
 8016cb4:	46a6      	movge	lr, r4
 8016cb6:	4285      	cmp	r5, r0
 8016cb8:	bfb8      	it	lt
 8016cba:	4605      	movlt	r5, r0
 8016cbc:	4584      	cmp	ip, r0
 8016cbe:	bfa8      	it	ge
 8016cc0:	4684      	movge	ip, r0
 8016cc2:	429f      	cmp	r7, r3
 8016cc4:	bfb8      	it	lt
 8016cc6:	461f      	movlt	r7, r3
 8016cc8:	429e      	cmp	r6, r3
 8016cca:	bfa8      	it	ge
 8016ccc:	461e      	movge	r6, r3
 8016cce:	4542      	cmp	r2, r8
 8016cd0:	d1dd      	bne.n	8016c8e <MEMS_runMagCal+0x10c6>
 8016cd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016cd6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8016cda:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8016cde:	eba1 010e 	sub.w	r1, r1, lr
 8016ce2:	eba5 050c 	sub.w	r5, r5, ip
 8016ce6:	1bbe      	subs	r6, r7, r6
 8016ce8:	b209      	sxth	r1, r1
 8016cea:	b22d      	sxth	r5, r5
 8016cec:	b236      	sxth	r6, r6
 8016cee:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8016c1c <MEMS_runMagCal+0x1054>
 8016cf2:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	f040 8593 	bne.w	8017822 <MEMS_runMagCal+0x1c5a>
 8016cfc:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016d00:	fab3 f883 	clz	r8, r3
 8016d04:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016d08:	ee06 1a90 	vmov	s13, r1
 8016d0c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016d18:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d20:	f300 8562 	bgt.w	80177e8 <MEMS_runMagCal+0x1c20>
 8016d24:	ee06 5a10 	vmov	s12, r5
 8016d28:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016d2c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d34:	f100 8558 	bmi.w	80177e8 <MEMS_runMagCal+0x1c20>
 8016d38:	ee05 6a90 	vmov	s11, r6
 8016d3c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016d40:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d48:	f100 854e 	bmi.w	80177e8 <MEMS_runMagCal+0x1c20>
 8016d4c:	428d      	cmp	r5, r1
 8016d4e:	462b      	mov	r3, r5
 8016d50:	bfb8      	it	lt
 8016d52:	460b      	movlt	r3, r1
 8016d54:	42b3      	cmp	r3, r6
 8016d56:	461a      	mov	r2, r3
 8016d58:	bfb8      	it	lt
 8016d5a:	4632      	movlt	r2, r6
 8016d5c:	428e      	cmp	r6, r1
 8016d5e:	4633      	mov	r3, r6
 8016d60:	bfa8      	it	ge
 8016d62:	460b      	movge	r3, r1
 8016d64:	42ab      	cmp	r3, r5
 8016d66:	bfa8      	it	ge
 8016d68:	462b      	movge	r3, r5
 8016d6a:	428a      	cmp	r2, r1
 8016d6c:	9202      	str	r2, [sp, #8]
 8016d6e:	f340 8588 	ble.w	8017882 <MEMS_runMagCal+0x1cba>
 8016d72:	4299      	cmp	r1, r3
 8016d74:	bfb8      	it	lt
 8016d76:	4619      	movlt	r1, r3
 8016d78:	42aa      	cmp	r2, r5
 8016d7a:	dd02      	ble.n	8016d82 <MEMS_runMagCal+0x11ba>
 8016d7c:	42ab      	cmp	r3, r5
 8016d7e:	bfb8      	it	lt
 8016d80:	4629      	movlt	r1, r5
 8016d82:	9a02      	ldr	r2, [sp, #8]
 8016d84:	4296      	cmp	r6, r2
 8016d86:	da02      	bge.n	8016d8e <MEMS_runMagCal+0x11c6>
 8016d88:	429e      	cmp	r6, r3
 8016d8a:	bfc8      	it	gt
 8016d8c:	4631      	movgt	r1, r6
 8016d8e:	f1b8 0f00 	cmp.w	r8, #0
 8016d92:	f000 8299 	beq.w	80172c8 <MEMS_runMagCal+0x1700>
 8016d96:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d9e:	dc0d      	bgt.n	8016dbc <MEMS_runMagCal+0x11f4>
 8016da0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da8:	dc08      	bgt.n	8016dbc <MEMS_runMagCal+0x11f4>
 8016daa:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8016dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db2:	bfcc      	ite	gt
 8016db4:	f04f 0801 	movgt.w	r8, #1
 8016db8:	f04f 0800 	movle.w	r8, #0
 8016dbc:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8016c20 <MEMS_runMagCal+0x1058>
 8016dc0:	ed9d 5a02 	vldr	s10, [sp, #8]
 8016dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dc8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016dcc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd4:	f2c0 8558 	blt.w	8017888 <MEMS_runMagCal+0x1cc0>
 8016dd8:	ee07 1a90 	vmov	s15, r1
 8016ddc:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8016de0:	ee27 5a05 	vmul.f32	s10, s14, s10
 8016de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016de8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df0:	f2c0 854a 	blt.w	8017888 <MEMS_runMagCal+0x1cc0>
 8016df4:	9a02      	ldr	r2, [sp, #8]
 8016df6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8016dfa:	f280 8545 	bge.w	8017888 <MEMS_runMagCal+0x1cc0>
 8016dfe:	ee07 3a90 	vmov	s15, r3
 8016e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e06:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8016e0a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e16:	f140 8537 	bpl.w	8017888 <MEMS_runMagCal+0x1cc0>
 8016e1a:	9b06      	ldr	r3, [sp, #24]
 8016e1c:	4553      	cmp	r3, sl
 8016e1e:	f000 8569 	beq.w	80178f4 <MEMS_runMagCal+0x1d2c>
 8016e22:	461a      	mov	r2, r3
 8016e24:	9b04      	ldr	r3, [sp, #16]
 8016e26:	1a9b      	subs	r3, r3, r2
 8016e28:	fb93 f7f9 	sdiv	r7, r3, r9
 8016e2c:	fb09 3717 	mls	r7, r9, r7, r3
 8016e30:	2f00      	cmp	r7, #0
 8016e32:	bfb8      	it	lt
 8016e34:	4457      	addlt	r7, sl
 8016e36:	b23f      	sxth	r7, r7
 8016e38:	9b03      	ldr	r3, [sp, #12]
 8016e3a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8016e3e:	b27f      	sxtb	r7, r7
 8016e40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016e44:	9304      	str	r3, [sp, #16]
 8016e46:	f1c7 0e01 	rsb	lr, r7, #1
 8016e4a:	469c      	mov	ip, r3
 8016e4c:	463b      	mov	r3, r7
 8016e4e:	fb93 f1f9 	sdiv	r1, r3, r9
 8016e52:	fb09 3111 	mls	r1, r9, r1, r3
 8016e56:	b24a      	sxtb	r2, r1
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	f107 0701 	add.w	r7, r7, #1
 8016e5e:	bfb8      	it	lt
 8016e60:	eb0a 0201 	addlt.w	r2, sl, r1
 8016e64:	fb97 f3f9 	sdiv	r3, r7, r9
 8016e68:	fb09 7313 	mls	r3, r9, r3, r7
 8016e6c:	bfb8      	it	lt
 8016e6e:	b252      	sxtblt	r2, r2
 8016e70:	b25b      	sxtb	r3, r3
 8016e72:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016e76:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8016e7a:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8016e7e:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8016e82:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8016e86:	1a45      	subs	r5, r0, r1
 8016e88:	bf48      	it	mi
 8016e8a:	1a09      	submi	r1, r1, r0
 8016e8c:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8016e90:	bf4c      	ite	mi
 8016e92:	b20d      	sxthmi	r5, r1
 8016e94:	b22d      	sxthpl	r5, r5
 8016e96:	1a21      	subs	r1, r4, r0
 8016e98:	bf48      	it	mi
 8016e9a:	1b01      	submi	r1, r0, r4
 8016e9c:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8016ea0:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8016ea4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8016ea8:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8016eac:	1a9b      	subs	r3, r3, r2
 8016eae:	1a26      	subs	r6, r4, r0
 8016eb0:	b21b      	sxth	r3, r3
 8016eb2:	bf48      	it	mi
 8016eb4:	1b06      	submi	r6, r0, r4
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	b209      	sxth	r1, r1
 8016eba:	b236      	sxth	r6, r6
 8016ebc:	dd20      	ble.n	8016f00 <MEMS_runMagCal+0x1338>
 8016ebe:	4429      	add	r1, r5
 8016ec0:	440e      	add	r6, r1
 8016ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ec6:	fb02 f606 	mul.w	r6, r2, r6
 8016eca:	ee07 6a90 	vmov	s15, r6
 8016ece:	ee07 3a10 	vmov	s14, r3
 8016ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ed6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016eda:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016ede:	f10c 0c01 	add.w	ip, ip, #1
 8016ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016ee6:	fa5f fc8c 	uxtb.w	ip, ip
 8016eea:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8016eee:	ee17 3a90 	vmov	r3, s15
 8016ef2:	b21b      	sxth	r3, r3
 8016ef4:	2b96      	cmp	r3, #150	; 0x96
 8016ef6:	dd03      	ble.n	8016f00 <MEMS_runMagCal+0x1338>
 8016ef8:	9b04      	ldr	r3, [sp, #16]
 8016efa:	3301      	adds	r3, #1
 8016efc:	b2db      	uxtb	r3, r3
 8016efe:	9304      	str	r3, [sp, #16]
 8016f00:	eb0e 0307 	add.w	r3, lr, r7
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	4598      	cmp	r8, r3
 8016f08:	d8a0      	bhi.n	8016e4c <MEMS_runMagCal+0x1284>
 8016f0a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016f0e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8016f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f16:	4563      	cmp	r3, ip
 8016f18:	f340 820c 	ble.w	8017334 <MEMS_runMagCal+0x176c>
 8016f1c:	9b07      	ldr	r3, [sp, #28]
 8016f1e:	b92b      	cbnz	r3, 8016f2c <MEMS_runMagCal+0x1364>
 8016f20:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8016f24:	3b02      	subs	r3, #2
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	f240 851e 	bls.w	8017968 <MEMS_runMagCal+0x1da0>
 8016f2c:	ac25      	add	r4, sp, #148	; 0x94
 8016f2e:	2220      	movs	r2, #32
 8016f30:	4620      	mov	r0, r4
 8016f32:	2100      	movs	r1, #0
 8016f34:	f003 fb30 	bl	801a598 <memset>
 8016f38:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8016f3c:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8016f40:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8016f44:	2200      	movs	r2, #0
 8016f46:	4286      	cmp	r6, r0
 8016f48:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8016f4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8016f4e:	f103 0301 	add.w	r3, r3, #1
 8016f52:	f000 8501 	beq.w	8017958 <MEMS_runMagCal+0x1d90>
 8016f56:	1b9b      	subs	r3, r3, r6
 8016f58:	fb93 f2f0 	sdiv	r2, r3, r0
 8016f5c:	fb00 3312 	mls	r3, r0, r2, r3
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	bfb8      	it	lt
 8016f64:	181b      	addlt	r3, r3, r0
 8016f66:	b21a      	sxth	r2, r3
 8016f68:	2e00      	cmp	r6, #0
 8016f6a:	f000 854c 	beq.w	8017a06 <MEMS_runMagCal+0x1e3e>
 8016f6e:	1e77      	subs	r7, r6, #1
 8016f70:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8016c24 <MEMS_runMagCal+0x105c>
 8016f74:	b2fd      	uxtb	r5, r7
 8016f76:	3501      	adds	r5, #1
 8016f78:	eeb0 5a65 	vmov.f32	s10, s11
 8016f7c:	eef0 4a65 	vmov.f32	s9, s11
 8016f80:	4415      	add	r5, r2
 8016f82:	4611      	mov	r1, r2
 8016f84:	fb91 f3f0 	sdiv	r3, r1, r0
 8016f88:	fb00 1313 	mls	r3, r0, r3, r1
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8016f92:	3101      	adds	r1, #1
 8016f94:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8016f98:	ee06 ca90 	vmov	s13, ip
 8016f9c:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8016fa0:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016fa4:	ee07 ca10 	vmov	s14, ip
 8016fa8:	ee07 3a90 	vmov	s15, r3
 8016fac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016fb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fb8:	42a9      	cmp	r1, r5
 8016fba:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8016fbe:	ee35 5a07 	vadd.f32	s10, s10, s14
 8016fc2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8016fc6:	d1dd      	bne.n	8016f84 <MEMS_runMagCal+0x13bc>
 8016fc8:	ee07 6a90 	vmov	s15, r6
 8016fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016fd4:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8016fd8:	b2f9      	uxtb	r1, r7
 8016fda:	3101      	adds	r1, #1
 8016fdc:	4411      	add	r1, r2
 8016fde:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 801738c <MEMS_runMagCal+0x17c4>
 8016fe2:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8016fe6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8016fea:	ee29 aa85 	vmul.f32	s20, s19, s10
 8016fee:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8016ff2:	eef0 4a46 	vmov.f32	s9, s12
 8016ff6:	eeb0 4a46 	vmov.f32	s8, s12
 8016ffa:	eef0 3a46 	vmov.f32	s7, s12
 8016ffe:	eeb0 3a46 	vmov.f32	s6, s12
 8017002:	eef0 2a46 	vmov.f32	s5, s12
 8017006:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 801700a:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 801700e:	fb92 f3f0 	sdiv	r3, r2, r0
 8017012:	fb00 2313 	mls	r3, r0, r3, r2
 8017016:	b2db      	uxtb	r3, r3
 8017018:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801701c:	3201      	adds	r2, #1
 801701e:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8017022:	ee06 5a90 	vmov	s13, r5
 8017026:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801702a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801702e:	ee07 5a10 	vmov	s14, r5
 8017032:	ee07 3a90 	vmov	s15, r3
 8017036:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801703a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801703e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017042:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8017046:	ee37 7a4a 	vsub.f32	s14, s14, s20
 801704a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801704e:	4291      	cmp	r1, r2
 8017050:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8017054:	eea6 3a87 	vfma.f32	s6, s13, s14
 8017058:	eea7 4a07 	vfma.f32	s8, s14, s14
 801705c:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8017060:	eee7 4a27 	vfma.f32	s9, s14, s15
 8017064:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8017068:	d1d1      	bne.n	801700e <MEMS_runMagCal+0x1446>
 801706a:	edc4 2a00 	vstr	s5, [r4]
 801706e:	ed84 3a01 	vstr	s6, [r4, #4]
 8017072:	edc4 3a02 	vstr	s7, [r4, #8]
 8017076:	ed84 4a03 	vstr	s8, [r4, #12]
 801707a:	edc4 4a04 	vstr	s9, [r4, #16]
 801707e:	ed84 6a05 	vstr	s12, [r4, #20]
 8017082:	a91a      	add	r1, sp, #104	; 0x68
 8017084:	4620      	mov	r0, r4
 8017086:	f7fe fce5 	bl	8015a54 <MEMS_EIG3>
 801708a:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 801708e:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8017092:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8017096:	eef0 5ae4 	vabs.f32	s11, s9
 801709a:	eef0 6ac6 	vabs.f32	s13, s12
 801709e:	eef4 6ae5 	vcmpe.f32	s13, s11
 80170a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a6:	bf8c      	ite	hi
 80170a8:	eef0 7a65 	vmovhi.f32	s15, s11
 80170ac:	eef0 7a66 	vmovls.f32	s15, s13
 80170b0:	eeb0 7ac5 	vabs.f32	s14, s10
 80170b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80170b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170bc:	eef4 6ae5 	vcmpe.f32	s13, s11
 80170c0:	bf88      	it	hi
 80170c2:	eef0 7a47 	vmovhi.f32	s15, s14
 80170c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ca:	bfb8      	it	lt
 80170cc:	eef0 6a65 	vmovlt.f32	s13, s11
 80170d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80170d4:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80170d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170dc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80170e0:	bfb8      	it	lt
 80170e2:	eeb0 7a66 	vmovlt.f32	s14, s13
 80170e6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80170ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ee:	f300 8420 	bgt.w	8017932 <MEMS_runMagCal+0x1d6a>
 80170f2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80170f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80170fa:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80170fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017106:	dd02      	ble.n	801710e <MEMS_runMagCal+0x1546>
 8017108:	2b22      	cmp	r3, #34	; 0x22
 801710a:	f240 8412 	bls.w	8017932 <MEMS_runMagCal+0x1d6a>
 801710e:	ee76 7a24 	vadd.f32	s15, s12, s9
 8017112:	ee07 3a10 	vmov	s14, r3
 8017116:	ee77 7a85 	vadd.f32	s15, s15, s10
 801711a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801711e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8017360 <MEMS_runMagCal+0x1798>
 8017122:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8017126:	eef1 7ac6 	vsqrt.f32	s15, s12
 801712a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801712e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017136:	f300 83fc 	bgt.w	8017932 <MEMS_runMagCal+0x1d6a>
 801713a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801713e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017146:	f100 83f4 	bmi.w	8017932 <MEMS_runMagCal+0x1d6a>
 801714a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8017364 <MEMS_runMagCal+0x179c>
 801714e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8017152:	2300      	movs	r3, #0
 8017154:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8017158:	932c      	str	r3, [sp, #176]	; 0xb0
 801715a:	eddd 7a02 	vldr	s15, [sp, #8]
 801715e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716a:	d408      	bmi.n	801717e <MEMS_runMagCal+0x15b6>
 801716c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017170:	ee17 3a10 	vmov	r3, s14
 8017174:	b21b      	sxth	r3, r3
 8017176:	ee07 3a90 	vmov	s15, r3
 801717a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801717e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8017384 <MEMS_runMagCal+0x17bc>
 8017182:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8017186:	eef4 7ac7 	vcmpe.f32	s15, s14
 801718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801718e:	dc08      	bgt.n	80171a2 <MEMS_runMagCal+0x15da>
 8017190:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017194:	ee17 3a10 	vmov	r3, s14
 8017198:	b21b      	sxth	r3, r3
 801719a:	ee07 3a90 	vmov	s15, r3
 801719e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171a2:	ee27 7a88 	vmul.f32	s14, s15, s16
 80171a6:	eddf 7a70 	vldr	s15, [pc, #448]	; 8017368 <MEMS_runMagCal+0x17a0>
 80171aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171b2:	f340 8424 	ble.w	80179fe <MEMS_runMagCal+0x1e36>
 80171b6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801736c <MEMS_runMagCal+0x17a4>
 80171ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c2:	f140 841c 	bpl.w	80179fe <MEMS_runMagCal+0x1e36>
 80171c6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8017370 <MEMS_runMagCal+0x17a8>
 80171ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80171ce:	eee7 7a26 	vfma.f32	s15, s14, s13
 80171d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80171d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171da:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8017384 <MEMS_runMagCal+0x17bc>
 80171de:	eddf ba6b 	vldr	s23, [pc, #428]	; 801738c <MEMS_runMagCal+0x17c4>
 80171e2:	ed9f ba64 	vldr	s22, [pc, #400]	; 8017374 <MEMS_runMagCal+0x17ac>
 80171e6:	eddf aa64 	vldr	s21, [pc, #400]	; 8017378 <MEMS_runMagCal+0x17b0>
 80171ea:	9d03      	ldr	r5, [sp, #12]
 80171ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171f0:	ee68 4a09 	vmul.f32	s9, s16, s18
 80171f4:	ee28 aa0a 	vmul.f32	s20, s16, s20
 80171f8:	ee68 9a29 	vmul.f32	s19, s16, s19
 80171fc:	edc4 4a00 	vstr	s9, [r4]
 8017200:	ed84 aa01 	vstr	s20, [r4, #4]
 8017204:	edc4 9a02 	vstr	s19, [r4, #8]
 8017208:	edc4 7a03 	vstr	s15, [r4, #12]
 801720c:	edc4 7a06 	vstr	s15, [r4, #24]
 8017210:	ab11      	add	r3, sp, #68	; 0x44
 8017212:	ee1c 0a10 	vmov	r0, s24
 8017216:	aa2d      	add	r2, sp, #180	; 0xb4
 8017218:	eeb0 0a48 	vmov.f32	s0, s16
 801721c:	4621      	mov	r1, r4
 801721e:	f7fe fa01 	bl	8015624 <MEMS_SolveLinearEq>
 8017222:	1c6b      	adds	r3, r5, #1
 8017224:	2800      	cmp	r0, #0
 8017226:	f43e aed1 	beq.w	8015fcc <MEMS_runMagCal+0x404>
 801722a:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 801722e:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8017232:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8017236:	edd4 4a00 	vldr	s9, [r4]
 801723a:	ed94 5a01 	vldr	s10, [r4, #4]
 801723e:	edd4 5a02 	vldr	s11, [r4, #8]
 8017242:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8017246:	ed94 6a03 	vldr	s12, [r4, #12]
 801724a:	eef0 6ae3 	vabs.f32	s13, s7
 801724e:	eef0 7ac3 	vabs.f32	s15, s6
 8017252:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801725a:	bfb8      	it	lt
 801725c:	eef0 7a66 	vmovlt.f32	s15, s13
 8017260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017268:	bfb8      	it	lt
 801726a:	eef0 7a6b 	vmovlt.f32	s15, s23
 801726e:	eef0 6ac4 	vabs.f32	s13, s8
 8017272:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801727a:	bfb8      	it	lt
 801727c:	eef0 6a67 	vmovlt.f32	s13, s15
 8017280:	ee74 4a83 	vadd.f32	s9, s9, s6
 8017284:	ee35 5a23 	vadd.f32	s10, s10, s7
 8017288:	ee75 5a84 	vadd.f32	s11, s11, s8
 801728c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8017290:	eef4 6acb 	vcmpe.f32	s13, s22
 8017294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017298:	edc4 4a00 	vstr	s9, [r4]
 801729c:	ed84 5a01 	vstr	s10, [r4, #4]
 80172a0:	edc4 5a02 	vstr	s11, [r4, #8]
 80172a4:	ed84 6a03 	vstr	s12, [r4, #12]
 80172a8:	eef0 7ac7 	vabs.f32	s15, s14
 80172ac:	d507      	bpl.n	80172be <MEMS_runMagCal+0x16f6>
 80172ae:	eef4 7aea 	vcmpe.f32	s15, s21
 80172b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172b6:	d502      	bpl.n	80172be <MEMS_runMagCal+0x16f6>
 80172b8:	2d01      	cmp	r5, #1
 80172ba:	f63e ae8b 	bhi.w	8015fd4 <MEMS_runMagCal+0x40c>
 80172be:	b2dd      	uxtb	r5, r3
 80172c0:	2d05      	cmp	r5, #5
 80172c2:	d1a5      	bne.n	8017210 <MEMS_runMagCal+0x1648>
 80172c4:	f7fe be86 	b.w	8015fd4 <MEMS_runMagCal+0x40c>
 80172c8:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 80172cc:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 80172d0:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 80172d4:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801737c <MEMS_runMagCal+0x17b4>
 80172d8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80172dc:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80172e0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80172e4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80172e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80172ec:	eef4 7ae4 	vcmpe.f32	s15, s9
 80172f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172f4:	bf88      	it	hi
 80172f6:	eef0 7a64 	vmovhi.f32	s15, s9
 80172fa:	eef4 7ac5 	vcmpe.f32	s15, s10
 80172fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017302:	bfb8      	it	lt
 8017304:	eef0 7a45 	vmovlt.f32	s15, s10
 8017308:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801730c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	dc0e      	bgt.n	8017334 <MEMS_runMagCal+0x176c>
 8017316:	ee26 6a27 	vmul.f32	s12, s12, s15
 801731a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017322:	dc07      	bgt.n	8017334 <MEMS_runMagCal+0x176c>
 8017324:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017330:	f77f ad73 	ble.w	8016e1a <MEMS_runMagCal+0x1252>
 8017334:	2300      	movs	r3, #0
 8017336:	f88b 3000 	strb.w	r3, [fp]
 801733a:	f7ff b880 	b.w	801643e <MEMS_runMagCal+0x876>
 801733e:	2300      	movs	r3, #0
 8017340:	9307      	str	r3, [sp, #28]
 8017342:	2301      	movs	r3, #1
 8017344:	9303      	str	r3, [sp, #12]
 8017346:	f7ff bb61 	b.w	8016a0c <MEMS_runMagCal+0xe44>
 801734a:	3301      	adds	r3, #1
 801734c:	fb93 f2f7 	sdiv	r2, r3, r7
 8017350:	fb07 3212 	mls	r2, r7, r2, r3
 8017354:	930b      	str	r3, [sp, #44]	; 0x2c
 8017356:	b212      	sxth	r2, r2
 8017358:	46bc      	mov	ip, r7
 801735a:	f7ff bb75 	b.w	8016a48 <MEMS_runMagCal+0xe80>
 801735e:	bf00      	nop
 8017360:	42960000 	.word	0x42960000
 8017364:	430d0000 	.word	0x430d0000
 8017368:	41966667 	.word	0x41966667
 801736c:	433c0000 	.word	0x433c0000
 8017370:	3c2e4c41 	.word	0x3c2e4c41
 8017374:	3e99999a 	.word	0x3e99999a
 8017378:	3f666666 	.word	0x3f666666
 801737c:	3eaaaaab 	.word	0x3eaaaaab
 8017380:	358637bd 	.word	0x358637bd
 8017384:	423c0000 	.word	0x423c0000
 8017388:	3a83126f 	.word	0x3a83126f
 801738c:	00000000 	.word	0x00000000
 8017390:	eddd 7a08 	vldr	s15, [sp, #32]
 8017394:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8017388 <MEMS_runMagCal+0x17c0>
 8017398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801739c:	ee07 3a10 	vmov	s14, r3
 80173a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80173a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80173a8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80173ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80173b0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80173b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173b8:	f63f aa67 	bhi.w	801688a <MEMS_runMagCal+0xcc2>
 80173bc:	9b07      	ldr	r3, [sp, #28]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f43f a83d 	beq.w	801643e <MEMS_runMagCal+0x876>
 80173c4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80173c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80173cc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80173d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80173d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173dc:	bf4c      	ite	mi
 80173de:	2301      	movmi	r3, #1
 80173e0:	2300      	movpl	r3, #0
 80173e2:	9307      	str	r3, [sp, #28]
 80173e4:	f7ff ba55 	b.w	8016892 <MEMS_runMagCal+0xcca>
 80173e8:	fb92 f1f0 	sdiv	r1, r2, r0
 80173ec:	fb00 2211 	mls	r2, r0, r1, r2
 80173f0:	b211      	sxth	r1, r2
 80173f2:	4605      	mov	r5, r0
 80173f4:	f7ff b8da 	b.w	80165ac <MEMS_runMagCal+0x9e4>
 80173f8:	2200      	movs	r2, #0
 80173fa:	23ff      	movs	r3, #255	; 0xff
 80173fc:	ee1c 0a10 	vmov	r0, s24
 8017400:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8017404:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8017408:	eeb0 0a49 	vmov.f32	s0, s18
 801740c:	4649      	mov	r1, r9
 801740e:	f7f7 fd11 	bl	800ee34 <MEMS_updateMagBufferIndex>
 8017412:	f7ff b90b 	b.w	801662c <MEMS_runMagCal+0xa64>
 8017416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801741a:	fb03 f60c 	mul.w	r6, r3, ip
 801741e:	fb03 f202 	mul.w	r2, r3, r2
 8017422:	fb03 f301 	mul.w	r3, r3, r1
 8017426:	ee06 6a90 	vmov	s13, r6
 801742a:	ee07 2a10 	vmov	s14, r2
 801742e:	ee07 3a90 	vmov	s15, r3
 8017432:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8017380 <MEMS_runMagCal+0x17b8>
 8017436:	9e05      	ldr	r6, [sp, #20]
 8017438:	9400      	str	r4, [sp, #0]
 801743a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801743e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017446:	ee66 6a86 	vmul.f32	s13, s13, s12
 801744a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801744e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017452:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8017456:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801745a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801745e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8017462:	6028      	str	r0, [r5, #0]
 8017464:	ed96 0a01 	vldr	s0, [r6, #4]
 8017468:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801746c:	4642      	mov	r2, r8
 801746e:	ab0d      	add	r3, sp, #52	; 0x34
 8017470:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8017474:	ad0e      	add	r5, sp, #56	; 0x38
 8017476:	ee1c 0a10 	vmov	r0, s24
 801747a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801747e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8017482:	f7f7 fd79 	bl	800ef78 <getMagStats.constprop.0>
 8017486:	9500      	str	r5, [sp, #0]
 8017488:	ed96 0a01 	vldr	s0, [r6, #4]
 801748c:	ee1c 0a10 	vmov	r0, s24
 8017490:	aa2d      	add	r2, sp, #180	; 0xb4
 8017492:	ab0d      	add	r3, sp, #52	; 0x34
 8017494:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8017498:	f7f7 fd6e 	bl	800ef78 <getMagStats.constprop.0>
 801749c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8017384 <MEMS_runMagCal+0x17bc>
 80174a0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80174a4:	ed95 7a00 	vldr	s14, [r5]
 80174a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80174ac:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80174b0:	eef0 7ae7 	vabs.f32	s15, s15
 80174b4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80174b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174bc:	d505      	bpl.n	80174ca <MEMS_runMagCal+0x1902>
 80174be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80174c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c6:	f100 81fa 	bmi.w	80178be <MEMS_runMagCal+0x1cf6>
 80174ca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80174ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80174d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d6:	f140 81a8 	bpl.w	801782a <MEMS_runMagCal+0x1c62>
 80174da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80174de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e2:	9b03      	ldr	r3, [sp, #12]
 80174e4:	bfb8      	it	lt
 80174e6:	2302      	movlt	r3, #2
 80174e8:	edd4 6a00 	vldr	s13, [r4]
 80174ec:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80174f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80174f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174fc:	f57e af9f 	bpl.w	801643e <MEMS_runMagCal+0x876>
 8017500:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8017504:	429a      	cmp	r2, r3
 8017506:	f63e af9a 	bhi.w	801643e <MEMS_runMagCal+0x876>
 801750a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017512:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751a:	d40e      	bmi.n	801753a <MEMS_runMagCal+0x1972>
 801751c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8017520:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017528:	f140 80d4 	bpl.w	80176d4 <MEMS_runMagCal+0x1b0c>
 801752c:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8017530:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8017534:	429a      	cmp	r2, r3
 8017536:	f080 80cd 	bcs.w	80176d4 <MEMS_runMagCal+0x1b0c>
 801753a:	9b05      	ldr	r3, [sp, #20]
 801753c:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8017540:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8017544:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8017548:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 801754c:	edd3 5a01 	vldr	s11, [r3, #4]
 8017550:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8017554:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8017558:	1b8b      	subs	r3, r1, r6
 801755a:	eba0 0c07 	sub.w	ip, r0, r7
 801755e:	2b00      	cmp	r3, #0
 8017560:	bfb8      	it	lt
 8017562:	425b      	neglt	r3, r3
 8017564:	f1bc 0f00 	cmp.w	ip, #0
 8017568:	bfb8      	it	lt
 801756a:	f1cc 0c00 	rsblt	ip, ip, #0
 801756e:	4563      	cmp	r3, ip
 8017570:	bfb8      	it	lt
 8017572:	4663      	movlt	r3, ip
 8017574:	eba2 0c04 	sub.w	ip, r2, r4
 8017578:	f1bc 0f00 	cmp.w	ip, #0
 801757c:	b21b      	sxth	r3, r3
 801757e:	bfb8      	it	lt
 8017580:	f1cc 0c00 	rsblt	ip, ip, #0
 8017584:	4563      	cmp	r3, ip
 8017586:	bfb8      	it	lt
 8017588:	4663      	movlt	r3, ip
 801758a:	b21b      	sxth	r3, r3
 801758c:	ee07 3a90 	vmov	s15, r3
 8017590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017594:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8017598:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801759c:	eef4 7ac6 	vcmpe.f32	s15, s12
 80175a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a4:	f140 8096 	bpl.w	80176d4 <MEMS_runMagCal+0x1b0c>
 80175a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80175ac:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80175b0:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80175b4:	ee04 3a90 	vmov	s9, r3
 80175b8:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 80175bc:	ee05 3a10 	vmov	s10, r3
 80175c0:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 80175c4:	ee07 0a90 	vmov	s15, r0
 80175c8:	ee05 3a90 	vmov	s11, r3
 80175cc:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80175d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80175d4:	ee36 4a42 	vsub.f32	s8, s12, s4
 80175d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80175dc:	ee06 3a10 	vmov	s12, r3
 80175e0:	ee03 7a90 	vmov	s7, r7
 80175e4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80175e8:	ee07 1a90 	vmov	s15, r1
 80175ec:	ee00 3a90 	vmov	s1, r3
 80175f0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80175f4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80175f8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80175fc:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8017600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017604:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017608:	ee03 6a90 	vmov	s7, r6
 801760c:	eee2 6a22 	vfma.f32	s13, s4, s5
 8017610:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017614:	ee07 2a90 	vmov	s15, r2
 8017618:	ee01 3a10 	vmov	s2, r3
 801761c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017620:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8017624:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8017628:	eee2 4a20 	vfma.f32	s9, s4, s1
 801762c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017630:	ee01 3a90 	vmov	s3, r3
 8017634:	ee25 5a04 	vmul.f32	s10, s10, s8
 8017638:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801763c:	eea2 7a03 	vfma.f32	s14, s4, s6
 8017640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017644:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8017648:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801764c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017650:	ee03 4a90 	vmov	s7, r4
 8017654:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017658:	ee67 7a84 	vmul.f32	s15, s15, s8
 801765c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017660:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017664:	ee16 2a90 	vmov	r2, s13
 8017668:	ee04 3a10 	vmov	s8, r3
 801766c:	eea2 5a01 	vfma.f32	s10, s4, s2
 8017670:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8017674:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017678:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801767c:	eee2 7a23 	vfma.f32	s15, s4, s7
 8017680:	ee14 2a90 	vmov	r2, s9
 8017684:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017688:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801768c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017690:	eee2 5a21 	vfma.f32	s11, s4, s3
 8017694:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8017698:	eea2 6a04 	vfma.f32	s12, s4, s8
 801769c:	ee17 2a10 	vmov	r2, s14
 80176a0:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80176a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176a8:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 80176ac:	ee15 2a10 	vmov	r2, s10
 80176b0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80176b4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80176b8:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80176bc:	ee17 2a90 	vmov	r2, s15
 80176c0:	ee16 3a10 	vmov	r3, s12
 80176c4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 80176c8:	ee15 2a90 	vmov	r2, s11
 80176cc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80176d0:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 80176d4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80176d6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80176da:	f7fe bda2 	b.w	8016222 <MEMS_runMagCal+0x65a>
 80176de:	ee1c 0a10 	vmov	r0, s24
 80176e2:	eeb0 0a49 	vmov.f32	s0, s18
 80176e6:	4649      	mov	r1, r9
 80176e8:	f7f7 fba4 	bl	800ee34 <MEMS_updateMagBufferIndex>
 80176ec:	f7ff b89f 	b.w	801682e <MEMS_runMagCal+0xc66>
 80176f0:	eddd 7a08 	vldr	s15, [sp, #32]
 80176f4:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8017388 <MEMS_runMagCal+0x17c0>
 80176f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017700:	e660      	b.n	80173c4 <MEMS_runMagCal+0x17fc>
 8017702:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801738c <MEMS_runMagCal+0x17c4>
 8017706:	1c6b      	adds	r3, r5, #1
 8017708:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801770c:	ad0e      	add	r5, sp, #56	; 0x38
 801770e:	fb93 f1f6 	sdiv	r1, r3, r6
 8017712:	fa1f fc86 	uxth.w	ip, r6
 8017716:	fb06 3311 	mls	r3, r6, r1, r3
 801771a:	edc5 6a00 	vstr	s13, [r5]
 801771e:	2e00      	cmp	r6, #0
 8017720:	f000 80e1 	beq.w	80178e6 <MEMS_runMagCal+0x1d1e>
 8017724:	b29b      	uxth	r3, r3
 8017726:	f10c 3cff 	add.w	ip, ip, #4294967295
 801772a:	1c58      	adds	r0, r3, #1
 801772c:	eeb0 6a66 	vmov.f32	s12, s13
 8017730:	fa10 fc8c 	uxtah	ip, r0, ip
 8017734:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8017738:	4619      	mov	r1, r3
 801773a:	e000      	b.n	801773e <MEMS_runMagCal+0x1b76>
 801773c:	3001      	adds	r0, #1
 801773e:	fbb1 f3f6 	udiv	r3, r1, r6
 8017742:	fb06 1313 	mls	r3, r6, r3, r1
 8017746:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801774a:	8a99      	ldrh	r1, [r3, #20]
 801774c:	4571      	cmp	r1, lr
 801774e:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8017752:	f1a3 031c 	sub.w	r3, r3, #28
 8017756:	bf98      	it	ls
 8017758:	ebae 0301 	subls.w	r3, lr, r1
 801775c:	b29b      	uxth	r3, r3
 801775e:	fb03 f303 	mul.w	r3, r3, r3
 8017762:	ee07 1a10 	vmov	s14, r1
 8017766:	ee07 3a90 	vmov	s15, r3
 801776a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801776e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017772:	4584      	cmp	ip, r0
 8017774:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017778:	ee36 6a07 	vadd.f32	s12, s12, s14
 801777c:	4601      	mov	r1, r0
 801777e:	d1dd      	bne.n	801773c <MEMS_runMagCal+0x1b74>
 8017780:	ee07 4a90 	vmov	s15, r4
 8017784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017788:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8017b24 <MEMS_runMagCal+0x1f5c>
 801778c:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8017b28 <MEMS_runMagCal+0x1f60>
 8017790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017794:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017798:	eef1 7ac7 	vsqrt.f32	s15, s14
 801779c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80177a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80177a4:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80177a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ac:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80177b0:	edc5 7a00 	vstr	s15, [r5]
 80177b4:	dd47      	ble.n	8017846 <MEMS_runMagCal+0x1c7e>
 80177b6:	eddf 7add 	vldr	s15, [pc, #884]	; 8017b2c <MEMS_runMagCal+0x1f64>
 80177ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80177be:	2302      	movs	r3, #2
 80177c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80177c8:	f77e aead 	ble.w	8016526 <MEMS_runMagCal+0x95e>
 80177cc:	2301      	movs	r3, #1
 80177ce:	f88b 3001 	strb.w	r3, [fp, #1]
 80177d2:	f7fe bea8 	b.w	8016526 <MEMS_runMagCal+0x95e>
 80177d6:	ee1c 0a10 	vmov	r0, s24
 80177da:	eeb0 0a49 	vmov.f32	s0, s18
 80177de:	4649      	mov	r1, r9
 80177e0:	f7f7 fb28 	bl	800ee34 <MEMS_updateMagBufferIndex>
 80177e4:	f7fe bf0d 	b.w	8016602 <MEMS_runMagCal+0xa3a>
 80177e8:	9b02      	ldr	r3, [sp, #8]
 80177ea:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80177ee:	f8db 100c 	ldr.w	r1, [fp, #12]
 80177f2:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80177f6:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80177fa:	4413      	add	r3, r2
 80177fc:	4299      	cmp	r1, r3
 80177fe:	f4bf ad99 	bcs.w	8017334 <MEMS_runMagCal+0x176c>
 8017802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017808:	fb03 f301 	mul.w	r3, r3, r1
 801780c:	3364      	adds	r3, #100	; 0x64
 801780e:	4293      	cmp	r3, r2
 8017810:	bf38      	it	cc
 8017812:	4613      	movcc	r3, r2
 8017814:	2200      	movs	r2, #0
 8017816:	f8cb 300c 	str.w	r3, [fp, #12]
 801781a:	f88b 2000 	strb.w	r2, [fp]
 801781e:	f7fe be0e 	b.w	801643e <MEMS_runMagCal+0x876>
 8017822:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017826:	f7ff ba6f 	b.w	8016d08 <MEMS_runMagCal+0x1140>
 801782a:	9b03      	ldr	r3, [sp, #12]
 801782c:	e65c      	b.n	80174e8 <MEMS_runMagCal+0x1920>
 801782e:	4619      	mov	r1, r3
 8017830:	9b02      	ldr	r3, [sp, #8]
 8017832:	3301      	adds	r3, #1
 8017834:	fb93 f2f1 	sdiv	r2, r3, r1
 8017838:	fb01 3212 	mls	r2, r1, r2, r3
 801783c:	9304      	str	r3, [sp, #16]
 801783e:	b212      	sxth	r2, r2
 8017840:	4689      	mov	r9, r1
 8017842:	f7ff ba11 	b.w	8016c68 <MEMS_runMagCal+0x10a0>
 8017846:	eddf 7aba 	vldr	s15, [pc, #744]	; 8017b30 <MEMS_runMagCal+0x1f68>
 801784a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017852:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8017b2c <MEMS_runMagCal+0x1f64>
 8017856:	d434      	bmi.n	80178c2 <MEMS_runMagCal+0x1cfa>
 8017858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017860:	bfc4      	itt	gt
 8017862:	2301      	movgt	r3, #1
 8017864:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8017868:	f7ff b892 	b.w	8016990 <MEMS_runMagCal+0xdc8>
 801786c:	9b05      	ldr	r3, [sp, #20]
 801786e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8017872:	ed93 0a01 	vldr	s0, [r3, #4]
 8017876:	f7fe bd84 	b.w	8016382 <MEMS_runMagCal+0x7ba>
 801787a:	2303      	movs	r3, #3
 801787c:	9303      	str	r3, [sp, #12]
 801787e:	f7fe bdd4 	b.w	801642a <MEMS_runMagCal+0x862>
 8017882:	4619      	mov	r1, r3
 8017884:	f7ff ba78 	b.w	8016d78 <MEMS_runMagCal+0x11b0>
 8017888:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 801788c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017890:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	f73f ad4c 	bgt.w	8017334 <MEMS_runMagCal+0x176c>
 801789c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80178a0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80178a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a8:	f73f ad44 	bgt.w	8017334 <MEMS_runMagCal+0x176c>
 80178ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80178b0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80178b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b8:	f77f aaaf 	ble.w	8016e1a <MEMS_runMagCal+0x1252>
 80178bc:	e53a      	b.n	8017334 <MEMS_runMagCal+0x176c>
 80178be:	2303      	movs	r3, #3
 80178c0:	e612      	b.n	80174e8 <MEMS_runMagCal+0x1920>
 80178c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80178c6:	2300      	movs	r3, #0
 80178c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178cc:	f88b 3001 	strb.w	r3, [fp, #1]
 80178d0:	f04f 0103 	mov.w	r1, #3
 80178d4:	bfc8      	it	gt
 80178d6:	2301      	movgt	r3, #1
 80178d8:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 80178dc:	bfc8      	it	gt
 80178de:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80178e2:	f7ff b858 	b.w	8016996 <MEMS_runMagCal+0xdce>
 80178e6:	2303      	movs	r3, #3
 80178e8:	f88b c001 	strb.w	ip, [fp, #1]
 80178ec:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80178f0:	f7ff b851 	b.w	8016996 <MEMS_runMagCal+0xdce>
 80178f4:	9b04      	ldr	r3, [sp, #16]
 80178f6:	fb93 f7f9 	sdiv	r7, r3, r9
 80178fa:	fb09 3717 	mls	r7, r9, r7, r3
 80178fe:	b23f      	sxth	r7, r7
 8017900:	f7ff ba9a 	b.w	8016e38 <MEMS_runMagCal+0x1270>
 8017904:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8017b34 <MEMS_runMagCal+0x1f6c>
 8017908:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801790c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017910:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8017914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017918:	ee87 0a08 	vdiv.f32	s0, s14, s16
 801791c:	ee17 2a90 	vmov	r2, s15
 8017920:	b291      	uxth	r1, r2
 8017922:	b113      	cbz	r3, 801792a <MEMS_runMagCal+0x1d62>
 8017924:	3b01      	subs	r3, #1
 8017926:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801792a:	ee1c 0a10 	vmov	r0, s24
 801792e:	f7f7 fa81 	bl	800ee34 <MEMS_updateMagBufferIndex>
 8017932:	eddd 7a08 	vldr	s15, [sp, #32]
 8017936:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801793a:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8017b38 <MEMS_runMagCal+0x1f70>
 801793e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017942:	f001 f831 	bl	80189a8 <roundf>
 8017946:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801794a:	2300      	movs	r3, #0
 801794c:	ed8b 0a01 	vstr	s0, [fp, #4]
 8017950:	f88b 3000 	strb.w	r3, [fp]
 8017954:	f7fe bd73 	b.w	801643e <MEMS_runMagCal+0x876>
 8017958:	fb93 f2f6 	sdiv	r2, r3, r6
 801795c:	fb06 3312 	mls	r3, r6, r2, r3
 8017960:	b21a      	sxth	r2, r3
 8017962:	4630      	mov	r0, r6
 8017964:	f7ff bb00 	b.w	8016f68 <MEMS_runMagCal+0x13a0>
 8017968:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 801796c:	f001 f81c 	bl	80189a8 <roundf>
 8017970:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017974:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8017978:	ee17 3a90 	vmov	r3, s15
 801797c:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8017980:	f8a9 3000 	strh.w	r3, [r9]
 8017984:	f001 f810 	bl	80189a8 <roundf>
 8017988:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801798c:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8017990:	ee17 3a90 	vmov	r3, s15
 8017994:	f8a9 3002 	strh.w	r3, [r9, #2]
 8017998:	f001 f806 	bl	80189a8 <roundf>
 801799c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80179a0:	ac0f      	add	r4, sp, #60	; 0x3c
 80179a2:	ee17 5a90 	vmov	r5, s15
 80179a6:	9400      	str	r4, [sp, #0]
 80179a8:	ee1c 0a10 	vmov	r0, s24
 80179ac:	4649      	mov	r1, r9
 80179ae:	ab10      	add	r3, sp, #64	; 0x40
 80179b0:	eeb0 0a48 	vmov.f32	s0, s16
 80179b4:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 80179b8:	f8a9 5004 	strh.w	r5, [r9, #4]
 80179bc:	f7f7 fadc 	bl	800ef78 <getMagStats.constprop.0>
 80179c0:	ed94 7a00 	vldr	s14, [r4]
 80179c4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8017b3c <MEMS_runMagCal+0x1f74>
 80179c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80179cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d0:	d50e      	bpl.n	80179f0 <MEMS_runMagCal+0x1e28>
 80179d2:	b968      	cbnz	r0, 80179f0 <MEMS_runMagCal+0x1e28>
 80179d4:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80179d8:	b32b      	cbz	r3, 8017a26 <MEMS_runMagCal+0x1e5e>
 80179da:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 80179de:	ee07 3a90 	vmov	s15, r3
 80179e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179e6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80179ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ee:	dc1a      	bgt.n	8017a26 <MEMS_runMagCal+0x1e5e>
 80179f0:	2300      	movs	r3, #0
 80179f2:	f8c9 3000 	str.w	r3, [r9]
 80179f6:	f8a9 3004 	strh.w	r3, [r9, #4]
 80179fa:	f7ff ba97 	b.w	8016f2c <MEMS_runMagCal+0x1364>
 80179fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017a02:	f7ff bbea 	b.w	80171da <MEMS_runMagCal+0x1612>
 8017a06:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8017b40 <MEMS_runMagCal+0x1f78>
 8017a0a:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8017a0e:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8017a12:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8017a16:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8017a1a:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8017a1e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017a22:	f7ff bb2e 	b.w	8017082 <MEMS_runMagCal+0x14ba>
 8017a26:	eddd 7a08 	vldr	s15, [sp, #32]
 8017a2a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8017a2e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8017b38 <MEMS_runMagCal+0x1f70>
 8017a32:	2303      	movs	r3, #3
 8017a34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017a38:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8017a3c:	e781      	b.n	8017942 <MEMS_runMagCal+0x1d7a>
 8017a3e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8017b44 <MEMS_runMagCal+0x1f7c>
 8017a42:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a4a:	f77e ab1b 	ble.w	8016084 <MEMS_runMagCal+0x4bc>
 8017a4e:	f7fe bb21 	b.w	8016094 <MEMS_runMagCal+0x4cc>
 8017a52:	2224      	movs	r2, #36	; 0x24
 8017a54:	2100      	movs	r1, #0
 8017a56:	a82d      	add	r0, sp, #180	; 0xb4
 8017a58:	f002 fd9e 	bl	801a598 <memset>
 8017a5c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8017b48 <MEMS_runMagCal+0x1f80>
 8017a60:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8017a64:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8017a68:	4627      	mov	r7, r4
 8017a6a:	ae2d      	add	r6, sp, #180	; 0xb4
 8017a6c:	2500      	movs	r5, #0
 8017a6e:	3501      	adds	r5, #1
 8017a70:	ecb7 0a01 	vldmia	r7!, {s0}
 8017a74:	ee28 0a80 	vmul.f32	s0, s17, s0
 8017a78:	f000 ff96 	bl	80189a8 <roundf>
 8017a7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017a80:	4633      	mov	r3, r6
 8017a82:	edc3 9a00 	vstr	s19, [r3]
 8017a86:	ee10 3a10 	vmov	r3, s0
 8017a8a:	2d03      	cmp	r5, #3
 8017a8c:	f829 3b02 	strh.w	r3, [r9], #2
 8017a90:	f106 0610 	add.w	r6, r6, #16
 8017a94:	d1eb      	bne.n	8017a6e <MEMS_runMagCal+0x1ea6>
 8017a96:	ad12      	add	r5, sp, #72	; 0x48
 8017a98:	9500      	str	r5, [sp, #0]
 8017a9a:	ab2b      	add	r3, sp, #172	; 0xac
 8017a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8017aa0:	ee1c 0a10 	vmov	r0, s24
 8017aa4:	a915      	add	r1, sp, #84	; 0x54
 8017aa6:	aa2d      	add	r2, sp, #180	; 0xb4
 8017aa8:	f7f7 fa66 	bl	800ef78 <getMagStats.constprop.0>
 8017aac:	eddf 3a26 	vldr	s7, [pc, #152]	; 8017b48 <MEMS_runMagCal+0x1f80>
 8017ab0:	ed94 4a03 	vldr	s8, [r4, #12]
 8017ab4:	edd5 7a00 	vldr	s15, [r5]
 8017ab8:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8017abc:	edd4 6a06 	vldr	s13, [r4, #24]
 8017ac0:	edd4 4a00 	vldr	s9, [r4]
 8017ac4:	ed94 5a01 	vldr	s10, [r4, #4]
 8017ac8:	edd4 5a02 	vldr	s11, [r4, #8]
 8017acc:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8017ad0:	ad2e      	add	r5, sp, #184	; 0xb8
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	e9c5 3300 	strd	r3, r3, [r5]
 8017ad8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8017adc:	60ab      	str	r3, [r5, #8]
 8017ade:	61ab      	str	r3, [r5, #24]
 8017ae0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017ae4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aec:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8017af0:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8017af4:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8017af8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017afc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017b00:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8017b04:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8017b08:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8017b0c:	d405      	bmi.n	8017b1a <MEMS_runMagCal+0x1f52>
 8017b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b16:	f57e aa9b 	bpl.w	8016050 <MEMS_runMagCal+0x488>
 8017b1a:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8017b4c <MEMS_runMagCal+0x1f84>
 8017b1e:	f7fe ba9d 	b.w	801605c <MEMS_runMagCal+0x494>
 8017b22:	bf00      	nop
 8017b24:	3c23d70a 	.word	0x3c23d70a
 8017b28:	4b095440 	.word	0x4b095440
 8017b2c:	481c4000 	.word	0x481c4000
 8017b30:	471c4000 	.word	0x471c4000
 8017b34:	433d0000 	.word	0x433d0000
 8017b38:	3a83126f 	.word	0x3a83126f
 8017b3c:	3ff4cccd 	.word	0x3ff4cccd
 8017b40:	7f800000 	.word	0x7f800000
 8017b44:	3ee66666 	.word	0x3ee66666
 8017b48:	423c0000 	.word	0x423c0000
 8017b4c:	00000000 	.word	0x00000000
 8017b50:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8017b54:	4293      	cmp	r3, r2
 8017b56:	f67e acac 	bls.w	80164b2 <MEMS_runMagCal+0x8ea>
 8017b5a:	f7fe bca0 	b.w	801649e <MEMS_runMagCal+0x8d6>
 8017b5e:	bf00      	nop

08017b60 <MotionFX_GetStateSize>:
 8017b60:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop

08017b68 <MotionFX_initialize>:
 8017b68:	4a3b      	ldr	r2, [pc, #236]	; (8017c58 <MotionFX_initialize+0xf0>)
 8017b6a:	493c      	ldr	r1, [pc, #240]	; (8017c5c <MotionFX_initialize+0xf4>)
 8017b6c:	6813      	ldr	r3, [r2, #0]
 8017b6e:	f023 0301 	bic.w	r3, r3, #1
 8017b72:	b530      	push	{r4, r5, lr}
 8017b74:	6013      	str	r3, [r2, #0]
 8017b76:	680b      	ldr	r3, [r1, #0]
 8017b78:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8017b7c:	4013      	ands	r3, r2
 8017b7e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8017b82:	42ab      	cmp	r3, r5
 8017b84:	b085      	sub	sp, #20
 8017b86:	4604      	mov	r4, r0
 8017b88:	d013      	beq.n	8017bb2 <MotionFX_initialize+0x4a>
 8017b8a:	680b      	ldr	r3, [r1, #0]
 8017b8c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8017b90:	4013      	ands	r3, r2
 8017b92:	428b      	cmp	r3, r1
 8017b94:	d00d      	beq.n	8017bb2 <MotionFX_initialize+0x4a>
 8017b96:	4b32      	ldr	r3, [pc, #200]	; (8017c60 <MotionFX_initialize+0xf8>)
 8017b98:	2201      	movs	r2, #1
 8017b9a:	601a      	str	r2, [r3, #0]
 8017b9c:	681a      	ldr	r2, [r3, #0]
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	d1fc      	bne.n	8017b9c <MotionFX_initialize+0x34>
 8017ba2:	4b30      	ldr	r3, [pc, #192]	; (8017c64 <MotionFX_initialize+0xfc>)
 8017ba4:	4a30      	ldr	r2, [pc, #192]	; (8017c68 <MotionFX_initialize+0x100>)
 8017ba6:	601a      	str	r2, [r3, #0]
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	4b30      	ldr	r3, [pc, #192]	; (8017c6c <MotionFX_initialize+0x104>)
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d01f      	beq.n	8017bf0 <MotionFX_initialize+0x88>
 8017bb0:	e7fe      	b.n	8017bb0 <MotionFX_initialize+0x48>
 8017bb2:	4b2f      	ldr	r3, [pc, #188]	; (8017c70 <MotionFX_initialize+0x108>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d1ed      	bne.n	8017b96 <MotionFX_initialize+0x2e>
 8017bba:	4a2e      	ldr	r2, [pc, #184]	; (8017c74 <MotionFX_initialize+0x10c>)
 8017bbc:	6813      	ldr	r3, [r2, #0]
 8017bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017bc2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017bc6:	d006      	beq.n	8017bd6 <MotionFX_initialize+0x6e>
 8017bc8:	6813      	ldr	r3, [r2, #0]
 8017bca:	f240 4283 	movw	r2, #1155	; 0x483
 8017bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017bd2:	4293      	cmp	r3, r2
 8017bd4:	d1df      	bne.n	8017b96 <MotionFX_initialize+0x2e>
 8017bd6:	4b28      	ldr	r3, [pc, #160]	; (8017c78 <MotionFX_initialize+0x110>)
 8017bd8:	2201      	movs	r2, #1
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	2a00      	cmp	r2, #0
 8017be0:	d1fc      	bne.n	8017bdc <MotionFX_initialize+0x74>
 8017be2:	4b26      	ldr	r3, [pc, #152]	; (8017c7c <MotionFX_initialize+0x114>)
 8017be4:	4a20      	ldr	r2, [pc, #128]	; (8017c68 <MotionFX_initialize+0x100>)
 8017be6:	601a      	str	r2, [r3, #0]
 8017be8:	681a      	ldr	r2, [r3, #0]
 8017bea:	4b20      	ldr	r3, [pc, #128]	; (8017c6c <MotionFX_initialize+0x104>)
 8017bec:	429a      	cmp	r2, r3
 8017bee:	d1df      	bne.n	8017bb0 <MotionFX_initialize+0x48>
 8017bf0:	4b23      	ldr	r3, [pc, #140]	; (8017c80 <MotionFX_initialize+0x118>)
 8017bf2:	4a24      	ldr	r2, [pc, #144]	; (8017c84 <MotionFX_initialize+0x11c>)
 8017bf4:	9301      	str	r3, [sp, #4]
 8017bf6:	2501      	movs	r5, #1
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017bfe:	7115      	strb	r5, [r2, #4]
 8017c00:	f7f7 faa0 	bl	800f144 <MFX_emptyAttitude>
 8017c04:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017c08:	a901      	add	r1, sp, #4
 8017c0a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017c0e:	f7f6 fdc3 	bl	800e798 <updateOrientation>
 8017c12:	a903      	add	r1, sp, #12
 8017c14:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017c18:	f7f6 fdbe 	bl	800e798 <updateOrientation>
 8017c1c:	a902      	add	r1, sp, #8
 8017c1e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017c22:	f7f6 fdb9 	bl	800e798 <updateOrientation>
 8017c26:	4818      	ldr	r0, [pc, #96]	; (8017c88 <MotionFX_initialize+0x120>)
 8017c28:	4918      	ldr	r1, [pc, #96]	; (8017c8c <MotionFX_initialize+0x124>)
 8017c2a:	4a19      	ldr	r2, [pc, #100]	; (8017c90 <MotionFX_initialize+0x128>)
 8017c2c:	4b19      	ldr	r3, [pc, #100]	; (8017c94 <MotionFX_initialize+0x12c>)
 8017c2e:	7365      	strb	r5, [r4, #13]
 8017c30:	4d19      	ldr	r5, [pc, #100]	; (8017c98 <MotionFX_initialize+0x130>)
 8017c32:	62a0      	str	r0, [r4, #40]	; 0x28
 8017c34:	6361      	str	r1, [r4, #52]	; 0x34
 8017c36:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	61a2      	str	r2, [r4, #24]
 8017c3e:	61e3      	str	r3, [r4, #28]
 8017c40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017c44:	f240 1301 	movw	r3, #257	; 0x101
 8017c48:	6225      	str	r5, [r4, #32]
 8017c4a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017c4c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8017c50:	80a2      	strh	r2, [r4, #4]
 8017c52:	81e3      	strh	r3, [r4, #14]
 8017c54:	b005      	add	sp, #20
 8017c56:	bd30      	pop	{r4, r5, pc}
 8017c58:	e0002000 	.word	0xe0002000
 8017c5c:	e000ed00 	.word	0xe000ed00
 8017c60:	40023008 	.word	0x40023008
 8017c64:	40023000 	.word	0x40023000
 8017c68:	f407a5c2 	.word	0xf407a5c2
 8017c6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017c70:	e0042000 	.word	0xe0042000
 8017c74:	5c001000 	.word	0x5c001000
 8017c78:	58024c08 	.word	0x58024c08
 8017c7c:	58024c00 	.word	0x58024c00
 8017c80:	00756e65 	.word	0x00756e65
 8017c84:	20000210 	.word	0x20000210
 8017c88:	3f666666 	.word	0x3f666666
 8017c8c:	3f2ac083 	.word	0x3f2ac083
 8017c90:	3a51b717 	.word	0x3a51b717
 8017c94:	3a378034 	.word	0x3a378034
 8017c98:	3b378034 	.word	0x3b378034

08017c9c <MotionFX_setKnobs>:
 8017c9c:	4b23      	ldr	r3, [pc, #140]	; (8017d2c <MotionFX_setKnobs+0x90>)
 8017c9e:	791b      	ldrb	r3, [r3, #4]
 8017ca0:	b903      	cbnz	r3, 8017ca4 <MotionFX_setKnobs+0x8>
 8017ca2:	4770      	bx	lr
 8017ca4:	2900      	cmp	r1, #0
 8017ca6:	d0fc      	beq.n	8017ca2 <MotionFX_setKnobs+0x6>
 8017ca8:	b570      	push	{r4, r5, r6, lr}
 8017caa:	4604      	mov	r4, r0
 8017cac:	684a      	ldr	r2, [r1, #4]
 8017cae:	6808      	ldr	r0, [r1, #0]
 8017cb0:	688b      	ldr	r3, [r1, #8]
 8017cb2:	6363      	str	r3, [r4, #52]	; 0x34
 8017cb4:	62a0      	str	r0, [r4, #40]	; 0x28
 8017cb6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8017cb8:	7b0b      	ldrb	r3, [r1, #12]
 8017cba:	7163      	strb	r3, [r4, #5]
 8017cbc:	6908      	ldr	r0, [r1, #16]
 8017cbe:	694a      	ldr	r2, [r1, #20]
 8017cc0:	698b      	ldr	r3, [r1, #24]
 8017cc2:	6223      	str	r3, [r4, #32]
 8017cc4:	61e2      	str	r2, [r4, #28]
 8017cc6:	61a0      	str	r0, [r4, #24]
 8017cc8:	7f0b      	ldrb	r3, [r1, #28]
 8017cca:	7123      	strb	r3, [r4, #4]
 8017ccc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8017cd0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8017cd4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8017cd6:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8017cda:	460a      	mov	r2, r1
 8017cdc:	460b      	mov	r3, r1
 8017cde:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8017ce2:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8017ce6:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8017cea:	7889      	ldrb	r1, [r1, #2]
 8017cec:	7892      	ldrb	r2, [r2, #2]
 8017cee:	789b      	ldrb	r3, [r3, #2]
 8017cf0:	b084      	sub	sp, #16
 8017cf2:	f88d 1006 	strb.w	r1, [sp, #6]
 8017cf6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8017cfa:	a901      	add	r1, sp, #4
 8017cfc:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017d00:	f88d 200a 	strb.w	r2, [sp, #10]
 8017d04:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017d08:	f8ad 5008 	strh.w	r5, [sp, #8]
 8017d0c:	f88d 300e 	strb.w	r3, [sp, #14]
 8017d10:	f7f6 fd42 	bl	800e798 <updateOrientation>
 8017d14:	a903      	add	r1, sp, #12
 8017d16:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017d1a:	f7f6 fd3d 	bl	800e798 <updateOrientation>
 8017d1e:	a902      	add	r1, sp, #8
 8017d20:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017d24:	f7f6 fd38 	bl	800e798 <updateOrientation>
 8017d28:	b004      	add	sp, #16
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}
 8017d2c:	20000210 	.word	0x20000210

08017d30 <MotionFX_getKnobs>:
 8017d30:	4b1c      	ldr	r3, [pc, #112]	; (8017da4 <MotionFX_getKnobs+0x74>)
 8017d32:	791b      	ldrb	r3, [r3, #4]
 8017d34:	b903      	cbnz	r3, 8017d38 <MotionFX_getKnobs+0x8>
 8017d36:	4770      	bx	lr
 8017d38:	460a      	mov	r2, r1
 8017d3a:	2900      	cmp	r1, #0
 8017d3c:	d0fb      	beq.n	8017d36 <MotionFX_getKnobs+0x6>
 8017d3e:	b510      	push	{r4, lr}
 8017d40:	4604      	mov	r4, r0
 8017d42:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017d44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d48:	6093      	str	r3, [r2, #8]
 8017d4a:	6010      	str	r0, [r2, #0]
 8017d4c:	6051      	str	r1, [r2, #4]
 8017d4e:	7963      	ldrb	r3, [r4, #5]
 8017d50:	7313      	strb	r3, [r2, #12]
 8017d52:	69a0      	ldr	r0, [r4, #24]
 8017d54:	69e1      	ldr	r1, [r4, #28]
 8017d56:	6a23      	ldr	r3, [r4, #32]
 8017d58:	6193      	str	r3, [r2, #24]
 8017d5a:	6110      	str	r0, [r2, #16]
 8017d5c:	6151      	str	r1, [r2, #20]
 8017d5e:	7923      	ldrb	r3, [r4, #4]
 8017d60:	7713      	strb	r3, [r2, #28]
 8017d62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017d66:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017d6a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8017d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017d70:	f102 011d 	add.w	r1, r2, #29
 8017d74:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017d78:	f7f6 fb68 	bl	800e44c <findAxis>
 8017d7c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017d80:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8017d84:	f7f6 fb62 	bl	800e44c <findAxis>
 8017d88:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017d8c:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017d90:	f7f6 fb5c 	bl	800e44c <findAxis>
 8017d94:	2300      	movs	r3, #0
 8017d96:	f882 3020 	strb.w	r3, [r2, #32]
 8017d9a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017d9e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8017da2:	bd10      	pop	{r4, pc}
 8017da4:	20000210 	.word	0x20000210

08017da8 <MotionFX_enable_6X>:
 8017da8:	4b0e      	ldr	r3, [pc, #56]	; (8017de4 <MotionFX_enable_6X+0x3c>)
 8017daa:	791b      	ldrb	r3, [r3, #4]
 8017dac:	b903      	cbnz	r3, 8017db0 <MotionFX_enable_6X+0x8>
 8017dae:	4770      	bx	lr
 8017db0:	2900      	cmp	r1, #0
 8017db2:	d0fc      	beq.n	8017dae <MotionFX_enable_6X+0x6>
 8017db4:	b530      	push	{r4, r5, lr}
 8017db6:	1d05      	adds	r5, r0, #4
 8017db8:	b099      	sub	sp, #100	; 0x64
 8017dba:	4604      	mov	r4, r0
 8017dbc:	4629      	mov	r1, r5
 8017dbe:	225c      	movs	r2, #92	; 0x5c
 8017dc0:	a801      	add	r0, sp, #4
 8017dc2:	f002 fbdb 	bl	801a57c <memcpy>
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7f7 f9bc 	bl	800f144 <MFX_emptyAttitude>
 8017dcc:	a901      	add	r1, sp, #4
 8017dce:	4628      	mov	r0, r5
 8017dd0:	225c      	movs	r2, #92	; 0x5c
 8017dd2:	f002 fbd3 	bl	801a57c <memcpy>
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017ddc:	7363      	strb	r3, [r4, #13]
 8017dde:	b019      	add	sp, #100	; 0x64
 8017de0:	bd30      	pop	{r4, r5, pc}
 8017de2:	bf00      	nop
 8017de4:	20000210 	.word	0x20000210

08017de8 <MotionFX_enable_9X>:
 8017de8:	4b0e      	ldr	r3, [pc, #56]	; (8017e24 <MotionFX_enable_9X+0x3c>)
 8017dea:	791b      	ldrb	r3, [r3, #4]
 8017dec:	b903      	cbnz	r3, 8017df0 <MotionFX_enable_9X+0x8>
 8017dee:	4770      	bx	lr
 8017df0:	2900      	cmp	r1, #0
 8017df2:	d0fc      	beq.n	8017dee <MotionFX_enable_9X+0x6>
 8017df4:	b530      	push	{r4, r5, lr}
 8017df6:	1d05      	adds	r5, r0, #4
 8017df8:	b099      	sub	sp, #100	; 0x64
 8017dfa:	4604      	mov	r4, r0
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	225c      	movs	r2, #92	; 0x5c
 8017e00:	a801      	add	r0, sp, #4
 8017e02:	f002 fbbb 	bl	801a57c <memcpy>
 8017e06:	4620      	mov	r0, r4
 8017e08:	f7f7 f99c 	bl	800f144 <MFX_emptyAttitude>
 8017e0c:	a901      	add	r1, sp, #4
 8017e0e:	4628      	mov	r0, r5
 8017e10:	225c      	movs	r2, #92	; 0x5c
 8017e12:	f002 fbb3 	bl	801a57c <memcpy>
 8017e16:	2301      	movs	r3, #1
 8017e18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017e1c:	7363      	strb	r3, [r4, #13]
 8017e1e:	b019      	add	sp, #100	; 0x64
 8017e20:	bd30      	pop	{r4, r5, pc}
 8017e22:	bf00      	nop
 8017e24:	20000210 	.word	0x20000210

08017e28 <MotionFX_update>:
 8017e28:	b470      	push	{r4, r5, r6}
 8017e2a:	4c06      	ldr	r4, [pc, #24]	; (8017e44 <MotionFX_update+0x1c>)
 8017e2c:	9e03      	ldr	r6, [sp, #12]
 8017e2e:	7925      	ldrb	r5, [r4, #4]
 8017e30:	b90d      	cbnz	r5, 8017e36 <MotionFX_update+0xe>
 8017e32:	bc70      	pop	{r4, r5, r6}
 8017e34:	4770      	bx	lr
 8017e36:	461c      	mov	r4, r3
 8017e38:	ed94 0a00 	vldr	s0, [r4]
 8017e3c:	4633      	mov	r3, r6
 8017e3e:	bc70      	pop	{r4, r5, r6}
 8017e40:	f7fc bf02 	b.w	8014c48 <iNemoEngine_API_Update>
 8017e44:	20000210 	.word	0x20000210

08017e48 <MotionFX_propagate>:
 8017e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e4c:	ed2d 8b06 	vpush	{d8-d10}
 8017e50:	4ca3      	ldr	r4, [pc, #652]	; (80180e0 <MotionFX_propagate+0x298>)
 8017e52:	7927      	ldrb	r7, [r4, #4]
 8017e54:	b0a0      	sub	sp, #128	; 0x80
 8017e56:	b927      	cbnz	r7, 8017e62 <MotionFX_propagate+0x1a>
 8017e58:	b020      	add	sp, #128	; 0x80
 8017e5a:	ecbd 8b06 	vpop	{d8-d10}
 8017e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e62:	4616      	mov	r6, r2
 8017e64:	4604      	mov	r4, r0
 8017e66:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8017e6a:	edd3 9a00 	vldr	s19, [r3]
 8017e6e:	460d      	mov	r5, r1
 8017e70:	6851      	ldr	r1, [r2, #4]
 8017e72:	6892      	ldr	r2, [r2, #8]
 8017e74:	ab13      	add	r3, sp, #76	; 0x4c
 8017e76:	c307      	stmia	r3!, {r0, r1, r2}
 8017e78:	6830      	ldr	r0, [r6, #0]
 8017e7a:	6871      	ldr	r1, [r6, #4]
 8017e7c:	68b2      	ldr	r2, [r6, #8]
 8017e7e:	ab10      	add	r3, sp, #64	; 0x40
 8017e80:	c307      	stmia	r3!, {r0, r1, r2}
 8017e82:	4637      	mov	r7, r6
 8017e84:	ab16      	add	r3, sp, #88	; 0x58
 8017e86:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8017e8a:	6879      	ldr	r1, [r7, #4]
 8017e8c:	68ba      	ldr	r2, [r7, #8]
 8017e8e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8017e92:	c307      	stmia	r3!, {r0, r1, r2}
 8017e94:	aa13      	add	r2, sp, #76	; 0x4c
 8017e96:	4651      	mov	r1, sl
 8017e98:	a803      	add	r0, sp, #12
 8017e9a:	f7f6 fa75 	bl	800e388 <rotVect>
 8017e9e:	aa16      	add	r2, sp, #88	; 0x58
 8017ea0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8017ea4:	a806      	add	r0, sp, #24
 8017ea6:	f7f6 fa6f 	bl	800e388 <rotVect>
 8017eaa:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8017eae:	2b09      	cmp	r3, #9
 8017eb0:	d829      	bhi.n	8017f06 <MotionFX_propagate+0xbe>
 8017eb2:	eddd 8a04 	vldr	s17, [sp, #16]
 8017eb6:	ed9d 9a03 	vldr	s18, [sp, #12]
 8017eba:	ed9d 8a05 	vldr	s16, [sp, #20]
 8017ebe:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8017ec2:	eee9 7a09 	vfma.f32	s15, s18, s18
 8017ec6:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017eca:	ee17 0a90 	vmov	r0, s15
 8017ece:	f7e8 fb3b 	bl	8000548 <__aeabi_f2d>
 8017ed2:	ec41 0b10 	vmov	d0, r0, r1
 8017ed6:	f000 fdf9 	bl	8018acc <sqrt>
 8017eda:	ec51 0b10 	vmov	r0, r1, d0
 8017ede:	f7e8 fe3b 	bl	8000b58 <__aeabi_d2f>
 8017ee2:	ee07 0a90 	vmov	s15, r0
 8017ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017eea:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8017eee:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017ef2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017ef6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017efa:	ed8d 9a03 	vstr	s18, [sp, #12]
 8017efe:	edcd 8a04 	vstr	s17, [sp, #16]
 8017f02:	ed8d 8a05 	vstr	s16, [sp, #20]
 8017f06:	7923      	ldrb	r3, [r4, #4]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f000 80d3 	beq.w	80180b4 <MotionFX_propagate+0x26c>
 8017f0e:	ee07 3a90 	vmov	s15, r3
 8017f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017f1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017f1e:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8017f22:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8017f26:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8017f2a:	edd2 7a00 	vldr	s15, [r2]
 8017f2e:	eddd 8a06 	vldr	s17, [sp, #24]
 8017f32:	ed9d 6a07 	vldr	s12, [sp, #28]
 8017f36:	ed9d 8a08 	vldr	s16, [sp, #32]
 8017f3a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80180e4 <MotionFX_propagate+0x29c>
 8017f3e:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80180e8 <MotionFX_propagate+0x2a0>
 8017f42:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8017f46:	ee26 9a07 	vmul.f32	s18, s12, s14
 8017f4a:	edc2 7a00 	vstr	s15, [r2]
 8017f4e:	edd3 7a00 	vldr	s15, [r3]
 8017f52:	ed8d 9a07 	vstr	s18, [sp, #28]
 8017f56:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017f5a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8017f5e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8017f62:	edc3 7a00 	vstr	s15, [r3]
 8017f66:	edd2 7a00 	vldr	s15, [r2]
 8017f6a:	edcd 8a06 	vstr	s17, [sp, #24]
 8017f6e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8017f72:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8017f76:	ee28 8a07 	vmul.f32	s16, s16, s14
 8017f7a:	edc2 7a00 	vstr	s15, [r2]
 8017f7e:	edd3 7a00 	vldr	s15, [r3]
 8017f82:	ed8d 8a08 	vstr	s16, [sp, #32]
 8017f86:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8017f8a:	ed93 7a00 	vldr	s14, [r3]
 8017f8e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8017f92:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8017f96:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017f9a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8017f9e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017fa2:	ed93 7a00 	vldr	s14, [r3]
 8017fa6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8017faa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8017fae:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017fb2:	ee29 0a80 	vmul.f32	s0, s19, s0
 8017fb6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fbe:	dd7e      	ble.n	80180be <MotionFX_propagate+0x276>
 8017fc0:	eeb1 aae7 	vsqrt.f32	s20, s15
 8017fc4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8017fc8:	eeb0 0a69 	vmov.f32	s0, s19
 8017fcc:	f000 fd12 	bl	80189f4 <sinf>
 8017fd0:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8017fd4:	eeb0 0a69 	vmov.f32	s0, s19
 8017fd8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017fdc:	ee29 9a27 	vmul.f32	s18, s18, s15
 8017fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017fe4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017fe8:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017fec:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017ff0:	f000 fc9a 	bl	8018928 <cosf>
 8017ff4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8017ff8:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8017ffc:	a809      	add	r0, sp, #36	; 0x24
 8017ffe:	4632      	mov	r2, r6
 8018000:	4631      	mov	r1, r6
 8018002:	f7f6 fc55 	bl	800e8b0 <qmult>
 8018006:	edd8 7a00 	vldr	s15, [r8]
 801800a:	ed96 7a00 	vldr	s14, [r6]
 801800e:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8018012:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8018016:	edd9 6a00 	vldr	s13, [r9]
 801801a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801801e:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8018022:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018026:	3301      	adds	r3, #1
 8018028:	aa13      	add	r2, sp, #76	; 0x4c
 801802a:	edd7 6a00 	vldr	s13, [r7]
 801802e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018032:	4651      	mov	r1, sl
 8018034:	a809      	add	r0, sp, #36	; 0x24
 8018036:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801803a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801803e:	eef1 6ae7 	vsqrt.f32	s13, s15
 8018042:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8018046:	ee27 7a27 	vmul.f32	s14, s14, s15
 801804a:	ed86 7a00 	vstr	s14, [r6]
 801804e:	ed99 7a00 	vldr	s14, [r9]
 8018052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018056:	ed89 7a00 	vstr	s14, [r9]
 801805a:	ed98 7a00 	vldr	s14, [r8]
 801805e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018062:	ed88 7a00 	vstr	s14, [r8]
 8018066:	ed97 7a00 	vldr	s14, [r7]
 801806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801806e:	edc7 7a00 	vstr	s15, [r7]
 8018072:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8018076:	f7f6 f987 	bl	800e388 <rotVect>
 801807a:	f8d9 0000 	ldr.w	r0, [r9]
 801807e:	f8d8 1000 	ldr.w	r1, [r8]
 8018082:	683a      	ldr	r2, [r7, #0]
 8018084:	6833      	ldr	r3, [r6, #0]
 8018086:	60eb      	str	r3, [r5, #12]
 8018088:	6128      	str	r0, [r5, #16]
 801808a:	6169      	str	r1, [r5, #20]
 801808c:	61aa      	str	r2, [r5, #24]
 801808e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018092:	9301      	str	r3, [sp, #4]
 8018094:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8018098:	9300      	str	r3, [sp, #0]
 801809a:	a909      	add	r1, sp, #36	; 0x24
 801809c:	f105 031c 	add.w	r3, r5, #28
 80180a0:	462a      	mov	r2, r5
 80180a2:	f105 000c 	add.w	r0, r5, #12
 80180a6:	f7f7 fc2b 	bl	800f900 <output_update>
 80180aa:	b020      	add	sp, #128	; 0x80
 80180ac:	ecbd 8b06 	vpop	{d8-d10}
 80180b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180b4:	2301      	movs	r3, #1
 80180b6:	7123      	strb	r3, [r4, #4]
 80180b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180bc:	e72f      	b.n	8017f1e <MotionFX_propagate+0xd6>
 80180be:	ee68 8a80 	vmul.f32	s17, s17, s0
 80180c2:	ee29 9a00 	vmul.f32	s18, s18, s0
 80180c6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80180ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80180ce:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80180d2:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80180d6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80180da:	930c      	str	r3, [sp, #48]	; 0x30
 80180dc:	e78c      	b.n	8017ff8 <MotionFX_propagate+0x1b0>
 80180de:	bf00      	nop
 80180e0:	20000210 	.word	0x20000210
 80180e4:	3c8efa35 	.word	0x3c8efa35
 80180e8:	38d1b718 	.word	0x38d1b718

080180ec <MotionFX_MagCal_init>:
 80180ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ee:	4c44      	ldr	r4, [pc, #272]	; (8018200 <MotionFX_MagCal_init+0x114>)
 80180f0:	7923      	ldrb	r3, [r4, #4]
 80180f2:	b903      	cbnz	r3, 80180f6 <MotionFX_MagCal_init+0xa>
 80180f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180f6:	1e43      	subs	r3, r0, #1
 80180f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80180fc:	4605      	mov	r5, r0
 80180fe:	d2f9      	bcs.n	80180f4 <MotionFX_MagCal_init+0x8>
 8018100:	2900      	cmp	r1, #0
 8018102:	d139      	bne.n	8018178 <MotionFX_MagCal_init+0x8c>
 8018104:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8018108:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801810c:	4a3d      	ldr	r2, [pc, #244]	; (8018204 <MotionFX_MagCal_init+0x118>)
 801810e:	1b5b      	subs	r3, r3, r5
 8018110:	ee07 3a90 	vmov	s15, r3
 8018114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018118:	23c8      	movs	r3, #200	; 0xc8
 801811a:	eef0 7ae7 	vabs.f32	s15, s15
 801811e:	fb93 f3f5 	sdiv	r3, r3, r5
 8018122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018126:	b2db      	uxtb	r3, r3
 8018128:	2b0f      	cmp	r3, #15
 801812a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801812e:	bf28      	it	cs
 8018130:	230f      	movcs	r3, #15
 8018132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018136:	6015      	str	r5, [r2, #0]
 8018138:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801813c:	b22d      	sxth	r5, r5
 801813e:	dc0e      	bgt.n	801815e <MotionFX_MagCal_init+0x72>
 8018140:	edd4 7a03 	vldr	s15, [r4, #12]
 8018144:	eddf 6a30 	vldr	s13, [pc, #192]	; 8018208 <MotionFX_MagCal_init+0x11c>
 8018148:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801820c <MotionFX_MagCal_init+0x120>
 801814c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018150:	eef0 7ae7 	vabs.f32	s15, s15
 8018154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815c:	dd08      	ble.n	8018170 <MotionFX_MagCal_init+0x84>
 801815e:	2300      	movs	r3, #0
 8018160:	492b      	ldr	r1, [pc, #172]	; (8018210 <MotionFX_MagCal_init+0x124>)
 8018162:	8165      	strh	r5, [r4, #10]
 8018164:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8018168:	60e1      	str	r1, [r4, #12]
 801816a:	8223      	strh	r3, [r4, #16]
 801816c:	6163      	str	r3, [r4, #20]
 801816e:	8122      	strh	r2, [r4, #8]
 8018170:	2300      	movs	r3, #0
 8018172:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8018176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018178:	2600      	movs	r6, #0
 801817a:	4826      	ldr	r0, [pc, #152]	; (8018214 <MotionFX_MagCal_init+0x128>)
 801817c:	61a0      	str	r0, [r4, #24]
 801817e:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8018182:	4631      	mov	r1, r6
 8018184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018188:	6122      	str	r2, [r4, #16]
 801818a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801818e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018192:	6166      	str	r6, [r4, #20]
 8018194:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8018198:	6566      	str	r6, [r4, #84]	; 0x54
 801819a:	83a6      	strh	r6, [r4, #28]
 801819c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80181a0:	f002 f9fa 	bl	801a598 <memset>
 80181a4:	23ff      	movs	r3, #255	; 0xff
 80181a6:	225f      	movs	r2, #95	; 0x5f
 80181a8:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80181ac:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80181b0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80181b4:	2200      	movs	r2, #0
 80181b6:	2300      	movs	r3, #0
 80181b8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80181bc:	f44f 7780 	mov.w	r7, #256	; 0x100
 80181c0:	4631      	mov	r1, r6
 80181c2:	62a6      	str	r6, [r4, #40]	; 0x28
 80181c4:	2230      	movs	r2, #48	; 0x30
 80181c6:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 80181ca:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80181ce:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80181d2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80181d4:	f002 f9e0 	bl	801a598 <memset>
 80181d8:	f1a5 030a 	sub.w	r3, r5, #10
 80181dc:	b29b      	uxth	r3, r3
 80181de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80181e2:	2b32      	cmp	r3, #50	; 0x32
 80181e4:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80181e8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80181ec:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80181f0:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80181f4:	d888      	bhi.n	8018108 <MotionFX_MagCal_init+0x1c>
 80181f6:	2301      	movs	r3, #1
 80181f8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80181fc:	e784      	b.n	8018108 <MotionFX_MagCal_init+0x1c>
 80181fe:	bf00      	nop
 8018200:	20000210 	.word	0x20000210
 8018204:	20000000 	.word	0x20000000
 8018208:	3dcccccd 	.word	0x3dcccccd
 801820c:	3c23d70a 	.word	0x3c23d70a
 8018210:	3dcccccd 	.word	0x3dcccccd
 8018214:	20001bf4 	.word	0x20001bf4

08018218 <MotionFX_MagCal_run>:
 8018218:	4a3e      	ldr	r2, [pc, #248]	; (8018314 <MotionFX_MagCal_run+0xfc>)
 801821a:	7913      	ldrb	r3, [r2, #4]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d077      	beq.n	8018310 <MotionFX_MagCal_run+0xf8>
 8018220:	ed90 7a00 	vldr	s14, [r0]
 8018224:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8018318 <MotionFX_MagCal_run+0x100>
 8018228:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801822c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018230:	bfb4      	ite	lt
 8018232:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018236:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801823a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801823e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018240:	ed90 7a01 	vldr	s14, [r0, #4]
 8018244:	eddf 6a34 	vldr	s13, [pc, #208]	; 8018318 <MotionFX_MagCal_run+0x100>
 8018248:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 801824c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018250:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018258:	ee17 1a90 	vmov	r1, s15
 801825c:	bfb4      	ite	lt
 801825e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018262:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018266:	eee7 7a26 	vfma.f32	s15, s14, s13
 801826a:	ed90 7a02 	vldr	s14, [r0, #8]
 801826e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018318 <MotionFX_MagCal_run+0x100>
 8018272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018276:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801827e:	ee17 4a90 	vmov	r4, s15
 8018282:	bfac      	ite	ge
 8018284:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018288:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801828c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018294:	ee17 7a90 	vmov	r7, s15
 8018298:	b383      	cbz	r3, 80182fc <MotionFX_MagCal_run+0xe4>
 801829a:	4820      	ldr	r0, [pc, #128]	; (801831c <MotionFX_MagCal_run+0x104>)
 801829c:	6805      	ldr	r5, [r0, #0]
 801829e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80182a2:	fb15 f503 	smulbb	r5, r5, r3
 80182a6:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 80182aa:	00dd      	lsls	r5, r3, #3
 80182ac:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 80182b0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8018320 <MotionFX_MagCal_run+0x108>
 80182b4:	42b1      	cmp	r1, r6
 80182b6:	bfa8      	it	ge
 80182b8:	4631      	movge	r1, r6
 80182ba:	42b7      	cmp	r7, r6
 80182bc:	bfa8      	it	ge
 80182be:	4637      	movge	r7, r6
 80182c0:	4561      	cmp	r1, ip
 80182c2:	4608      	mov	r0, r1
 80182c4:	bfb8      	it	lt
 80182c6:	4660      	movlt	r0, ip
 80182c8:	4564      	cmp	r4, ip
 80182ca:	db1f      	blt.n	801830c <MotionFX_MagCal_run+0xf4>
 80182cc:	42b4      	cmp	r4, r6
 80182ce:	bfa8      	it	ge
 80182d0:	4634      	movge	r4, r6
 80182d2:	b224      	sxth	r4, r4
 80182d4:	4e12      	ldr	r6, [pc, #72]	; (8018320 <MotionFX_MagCal_run+0x108>)
 80182d6:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 80182da:	3301      	adds	r3, #1
 80182dc:	4415      	add	r5, r2
 80182de:	b2db      	uxtb	r3, r3
 80182e0:	42b7      	cmp	r7, r6
 80182e2:	bfb8      	it	lt
 80182e4:	4637      	movlt	r7, r6
 80182e6:	428b      	cmp	r3, r1
 80182e8:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 80182ec:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 80182f0:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 80182f4:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 80182f8:	d014      	beq.n	8018324 <MotionFX_MagCal_run+0x10c>
 80182fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182fc:	68c0      	ldr	r0, [r0, #12]
 80182fe:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8018302:	2001      	movs	r0, #1
 8018304:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8018308:	461d      	mov	r5, r3
 801830a:	e7cf      	b.n	80182ac <MotionFX_MagCal_run+0x94>
 801830c:	4634      	mov	r4, r6
 801830e:	e7e1      	b.n	80182d4 <MotionFX_MagCal_run+0xbc>
 8018310:	4770      	bx	lr
 8018312:	bf00      	nop
 8018314:	20000210 	.word	0x20000210
 8018318:	43fa0000 	.word	0x43fa0000
 801831c:	20000000 	.word	0x20000000
 8018320:	ffff8002 	.word	0xffff8002
 8018324:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8018328:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 801832c:	2000      	movs	r0, #0
 801832e:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 8159 	beq.w	80185ea <MotionFX_MagCal_run+0x3d2>
 8018338:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 801833c:	8a57      	ldrh	r7, [r2, #18]
 801833e:	8a13      	ldrh	r3, [r2, #16]
 8018340:	2900      	cmp	r1, #0
 8018342:	f000 8150 	beq.w	80185e6 <MotionFX_MagCal_run+0x3ce>
 8018346:	2f00      	cmp	r7, #0
 8018348:	f000 814d 	beq.w	80185e6 <MotionFX_MagCal_run+0x3ce>
 801834c:	42bb      	cmp	r3, r7
 801834e:	bf28      	it	cs
 8018350:	463b      	movcs	r3, r7
 8018352:	3301      	adds	r3, #1
 8018354:	b29b      	uxth	r3, r3
 8018356:	42bb      	cmp	r3, r7
 8018358:	bf28      	it	cs
 801835a:	463b      	movcs	r3, r7
 801835c:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8018360:	191d      	adds	r5, r3, r4
 8018362:	f04f 0c01 	mov.w	ip, #1
 8018366:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801836a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801836e:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8018372:	f8c5 e002 	str.w	lr, [r5, #2]
 8018376:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801837a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801837e:	4561      	cmp	r1, ip
 8018380:	f000 812a 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 8018384:	4463      	add	r3, ip
 8018386:	b29b      	uxth	r3, r3
 8018388:	42bb      	cmp	r3, r7
 801838a:	bf28      	it	cs
 801838c:	463b      	movcs	r3, r7
 801838e:	eb03 0e04 	add.w	lr, r3, r4
 8018392:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8018396:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801839a:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801839e:	f8c5 e002 	str.w	lr, [r5, #2]
 80183a2:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 80183a6:	f8a5 e006 	strh.w	lr, [r5, #6]
 80183aa:	2902      	cmp	r1, #2
 80183ac:	f000 8114 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 80183b0:	4463      	add	r3, ip
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	42bb      	cmp	r3, r7
 80183b6:	bf28      	it	cs
 80183b8:	463b      	movcs	r3, r7
 80183ba:	eb03 0e04 	add.w	lr, r3, r4
 80183be:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80183c2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80183c6:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 80183ca:	f8c5 e002 	str.w	lr, [r5, #2]
 80183ce:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 80183d2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80183d6:	2903      	cmp	r1, #3
 80183d8:	f000 80fe 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 80183dc:	4463      	add	r3, ip
 80183de:	b29b      	uxth	r3, r3
 80183e0:	42bb      	cmp	r3, r7
 80183e2:	bf28      	it	cs
 80183e4:	463b      	movcs	r3, r7
 80183e6:	eb03 0e04 	add.w	lr, r3, r4
 80183ea:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80183ee:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80183f2:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 80183f6:	f8c5 e002 	str.w	lr, [r5, #2]
 80183fa:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 80183fe:	f8a5 e006 	strh.w	lr, [r5, #6]
 8018402:	2904      	cmp	r1, #4
 8018404:	f000 80e8 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 8018408:	4463      	add	r3, ip
 801840a:	b29b      	uxth	r3, r3
 801840c:	42bb      	cmp	r3, r7
 801840e:	bf28      	it	cs
 8018410:	463b      	movcs	r3, r7
 8018412:	eb03 0e04 	add.w	lr, r3, r4
 8018416:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801841a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801841e:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8018422:	f8c5 e002 	str.w	lr, [r5, #2]
 8018426:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801842a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801842e:	2905      	cmp	r1, #5
 8018430:	f000 80d2 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 8018434:	4463      	add	r3, ip
 8018436:	b29b      	uxth	r3, r3
 8018438:	42bb      	cmp	r3, r7
 801843a:	bf28      	it	cs
 801843c:	463b      	movcs	r3, r7
 801843e:	441c      	add	r4, r3
 8018440:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8018444:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8018448:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 801844c:	f8c5 4002 	str.w	r4, [r5, #2]
 8018450:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8018454:	80ec      	strh	r4, [r5, #6]
 8018456:	2906      	cmp	r1, #6
 8018458:	f000 80be 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 801845c:	4463      	add	r3, ip
 801845e:	b29b      	uxth	r3, r3
 8018460:	42bb      	cmp	r3, r7
 8018462:	bf28      	it	cs
 8018464:	463b      	movcs	r3, r7
 8018466:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801846a:	eb03 0c04 	add.w	ip, r3, r4
 801846e:	2501      	movs	r5, #1
 8018470:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8018474:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018478:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801847c:	f8cc e002 	str.w	lr, [ip, #2]
 8018480:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8018484:	f8ac e006 	strh.w	lr, [ip, #6]
 8018488:	2907      	cmp	r1, #7
 801848a:	f000 80a5 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 801848e:	442b      	add	r3, r5
 8018490:	b29b      	uxth	r3, r3
 8018492:	42bb      	cmp	r3, r7
 8018494:	bf28      	it	cs
 8018496:	463b      	movcs	r3, r7
 8018498:	eb03 0e04 	add.w	lr, r3, r4
 801849c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80184a0:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80184a4:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 80184a8:	f8cc e002 	str.w	lr, [ip, #2]
 80184ac:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80184b0:	f8ac e006 	strh.w	lr, [ip, #6]
 80184b4:	2908      	cmp	r1, #8
 80184b6:	f000 808f 	beq.w	80185d8 <MotionFX_MagCal_run+0x3c0>
 80184ba:	442b      	add	r3, r5
 80184bc:	b29b      	uxth	r3, r3
 80184be:	42bb      	cmp	r3, r7
 80184c0:	bf28      	it	cs
 80184c2:	463b      	movcs	r3, r7
 80184c4:	eb03 0e04 	add.w	lr, r3, r4
 80184c8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80184cc:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80184d0:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 80184d4:	f8cc e002 	str.w	lr, [ip, #2]
 80184d8:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 80184dc:	f8ac e006 	strh.w	lr, [ip, #6]
 80184e0:	2909      	cmp	r1, #9
 80184e2:	d079      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 80184e4:	442b      	add	r3, r5
 80184e6:	b29b      	uxth	r3, r3
 80184e8:	42bb      	cmp	r3, r7
 80184ea:	bf28      	it	cs
 80184ec:	463b      	movcs	r3, r7
 80184ee:	eb03 0e04 	add.w	lr, r3, r4
 80184f2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80184f6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80184fa:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 80184fe:	f8cc e002 	str.w	lr, [ip, #2]
 8018502:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8018506:	f8ac e006 	strh.w	lr, [ip, #6]
 801850a:	290a      	cmp	r1, #10
 801850c:	d064      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 801850e:	442b      	add	r3, r5
 8018510:	b29b      	uxth	r3, r3
 8018512:	42bb      	cmp	r3, r7
 8018514:	bf28      	it	cs
 8018516:	463b      	movcs	r3, r7
 8018518:	eb03 0e04 	add.w	lr, r3, r4
 801851c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018520:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018524:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8018528:	f8cc e002 	str.w	lr, [ip, #2]
 801852c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8018530:	f8ac e006 	strh.w	lr, [ip, #6]
 8018534:	290b      	cmp	r1, #11
 8018536:	d04f      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 8018538:	442b      	add	r3, r5
 801853a:	b29b      	uxth	r3, r3
 801853c:	42bb      	cmp	r3, r7
 801853e:	bf28      	it	cs
 8018540:	463b      	movcs	r3, r7
 8018542:	eb03 0e04 	add.w	lr, r3, r4
 8018546:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801854a:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801854e:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8018552:	f8cc e002 	str.w	lr, [ip, #2]
 8018556:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801855a:	f8ac e006 	strh.w	lr, [ip, #6]
 801855e:	290c      	cmp	r1, #12
 8018560:	d03a      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 8018562:	442b      	add	r3, r5
 8018564:	b29b      	uxth	r3, r3
 8018566:	42bb      	cmp	r3, r7
 8018568:	bf28      	it	cs
 801856a:	463b      	movcs	r3, r7
 801856c:	eb03 0e04 	add.w	lr, r3, r4
 8018570:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8018574:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8018578:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801857c:	f8cc e002 	str.w	lr, [ip, #2]
 8018580:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8018584:	f8ac e006 	strh.w	lr, [ip, #6]
 8018588:	290d      	cmp	r1, #13
 801858a:	d025      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 801858c:	442b      	add	r3, r5
 801858e:	b29b      	uxth	r3, r3
 8018590:	42bb      	cmp	r3, r7
 8018592:	bf28      	it	cs
 8018594:	463b      	movcs	r3, r7
 8018596:	eb03 0e04 	add.w	lr, r3, r4
 801859a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801859e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80185a2:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 80185a6:	f8cc e002 	str.w	lr, [ip, #2]
 80185aa:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 80185ae:	f8ac e006 	strh.w	lr, [ip, #6]
 80185b2:	290e      	cmp	r1, #14
 80185b4:	d010      	beq.n	80185d8 <MotionFX_MagCal_run+0x3c0>
 80185b6:	442b      	add	r3, r5
 80185b8:	b29b      	uxth	r3, r3
 80185ba:	42bb      	cmp	r3, r7
 80185bc:	bf28      	it	cs
 80185be:	463b      	movcs	r3, r7
 80185c0:	441c      	add	r4, r3
 80185c2:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 80185c6:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 80185ca:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 80185ce:	f8c7 0002 	str.w	r0, [r7, #2]
 80185d2:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 80185d6:	80f8      	strh	r0, [r7, #6]
 80185d8:	3901      	subs	r1, #1
 80185da:	b2c9      	uxtb	r1, r1
 80185dc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80185e0:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 80185e4:	4434      	add	r4, r6
 80185e6:	8213      	strh	r3, [r2, #16]
 80185e8:	6154      	str	r4, [r2, #20]
 80185ea:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	f43f ae83 	beq.w	80182fa <MotionFX_MagCal_run+0xe2>
 80185f4:	8a11      	ldrh	r1, [r2, #16]
 80185f6:	8a53      	ldrh	r3, [r2, #18]
 80185f8:	428b      	cmp	r3, r1
 80185fa:	d022      	beq.n	8018642 <MotionFX_MagCal_run+0x42a>
 80185fc:	b341      	cbz	r1, 8018650 <MotionFX_MagCal_run+0x438>
 80185fe:	6953      	ldr	r3, [r2, #20]
 8018600:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018604:	3301      	adds	r3, #1
 8018606:	4403      	add	r3, r0
 8018608:	1c58      	adds	r0, r3, #1
 801860a:	d021      	beq.n	8018650 <MotionFX_MagCal_run+0x438>
 801860c:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8018610:	3410      	adds	r4, #16
 8018612:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8018614:	42a0      	cmp	r0, r4
 8018616:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801861a:	bf84      	itt	hi
 801861c:	6553      	strhi	r3, [r2, #84]	; 0x54
 801861e:	4618      	movhi	r0, r3
 8018620:	4420      	add	r0, r4
 8018622:	4283      	cmp	r3, r0
 8018624:	f4ff ae69 	bcc.w	80182fa <MotionFX_MagCal_run+0xe2>
 8018628:	b131      	cbz	r1, 8018638 <MotionFX_MagCal_run+0x420>
 801862a:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801862e:	6952      	ldr	r2, [r2, #20]
 8018630:	3901      	subs	r1, #1
 8018632:	fb00 2111 	mls	r1, r0, r1, r2
 8018636:	b289      	uxth	r1, r1
 8018638:	1a5b      	subs	r3, r3, r1
 801863a:	b21b      	sxth	r3, r3
 801863c:	42a3      	cmp	r3, r4
 801863e:	f6ff ae5c 	blt.w	80182fa <MotionFX_MagCal_run+0xe2>
 8018642:	4905      	ldr	r1, [pc, #20]	; (8018658 <MotionFX_MagCal_run+0x440>)
 8018644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018648:	f101 0014 	add.w	r0, r1, #20
 801864c:	f7fd babc 	b.w	8015bc8 <MEMS_runMagCal>
 8018650:	f242 7410 	movw	r4, #10000	; 0x2710
 8018654:	2300      	movs	r3, #0
 8018656:	e7dc      	b.n	8018612 <MotionFX_MagCal_run+0x3fa>
 8018658:	20000218 	.word	0x20000218

0801865c <MotionFX_MagCal_getParams>:
 801865c:	b4f0      	push	{r4, r5, r6, r7}
 801865e:	4f1b      	ldr	r7, [pc, #108]	; (80186cc <MotionFX_MagCal_getParams+0x70>)
 8018660:	793b      	ldrb	r3, [r7, #4]
 8018662:	b08e      	sub	sp, #56	; 0x38
 8018664:	b373      	cbz	r3, 80186c4 <MotionFX_MagCal_getParams+0x68>
 8018666:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801866a:	4606      	mov	r6, r0
 801866c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801866e:	ac01      	add	r4, sp, #4
 8018670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018678:	ed9d 7a03 	vldr	s14, [sp, #12]
 801867c:	eddd 6a02 	vldr	s13, [sp, #8]
 8018680:	eddd 7a04 	vldr	s15, [sp, #16]
 8018684:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80186d0 <MotionFX_MagCal_getParams+0x74>
 8018688:	682d      	ldr	r5, [r5, #0]
 801868a:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801868e:	7337      	strb	r7, [r6, #12]
 8018690:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018694:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801869c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801869e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80186a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80186ae:	ee66 6a86 	vmul.f32	s13, s13, s12
 80186b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80186b6:	6025      	str	r5, [r4, #0]
 80186b8:	edc6 6a00 	vstr	s13, [r6]
 80186bc:	ed86 7a01 	vstr	s14, [r6, #4]
 80186c0:	edc6 7a02 	vstr	s15, [r6, #8]
 80186c4:	b00e      	add	sp, #56	; 0x38
 80186c6:	bcf0      	pop	{r4, r5, r6, r7}
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop
 80186cc:	20000210 	.word	0x20000210
 80186d0:	3b03126f 	.word	0x3b03126f

080186d4 <MotionFX_GetLibVersion>:
 80186d4:	4b0f      	ldr	r3, [pc, #60]	; (8018714 <MotionFX_GetLibVersion+0x40>)
 80186d6:	791b      	ldrb	r3, [r3, #4]
 80186d8:	b90b      	cbnz	r3, 80186de <MotionFX_GetLibVersion+0xa>
 80186da:	4618      	mov	r0, r3
 80186dc:	4770      	bx	lr
 80186de:	b470      	push	{r4, r5, r6}
 80186e0:	4e0d      	ldr	r6, [pc, #52]	; (8018718 <MotionFX_GetLibVersion+0x44>)
 80186e2:	4604      	mov	r4, r0
 80186e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80186e6:	b08b      	sub	sp, #44	; 0x2c
 80186e8:	ad01      	add	r5, sp, #4
 80186ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80186ec:	6833      	ldr	r3, [r6, #0]
 80186ee:	f825 3b02 	strh.w	r3, [r5], #2
 80186f2:	0c1b      	lsrs	r3, r3, #16
 80186f4:	702b      	strb	r3, [r5, #0]
 80186f6:	ad01      	add	r5, sp, #4
 80186f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186fa:	882e      	ldrh	r6, [r5, #0]
 80186fc:	60e3      	str	r3, [r4, #12]
 80186fe:	78ad      	ldrb	r5, [r5, #2]
 8018700:	6020      	str	r0, [r4, #0]
 8018702:	2312      	movs	r3, #18
 8018704:	4618      	mov	r0, r3
 8018706:	6061      	str	r1, [r4, #4]
 8018708:	60a2      	str	r2, [r4, #8]
 801870a:	8226      	strh	r6, [r4, #16]
 801870c:	74a5      	strb	r5, [r4, #18]
 801870e:	b00b      	add	sp, #44	; 0x2c
 8018710:	bc70      	pop	{r4, r5, r6}
 8018712:	4770      	bx	lr
 8018714:	20000210 	.word	0x20000210
 8018718:	0801aebc 	.word	0x0801aebc
 801871c:	00000000 	.word	0x00000000

08018720 <ceil>:
 8018720:	ec51 0b10 	vmov	r0, r1, d0
 8018724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801872c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018730:	2e13      	cmp	r6, #19
 8018732:	ee10 5a10 	vmov	r5, s0
 8018736:	ee10 8a10 	vmov	r8, s0
 801873a:	460c      	mov	r4, r1
 801873c:	dc30      	bgt.n	80187a0 <ceil+0x80>
 801873e:	2e00      	cmp	r6, #0
 8018740:	da12      	bge.n	8018768 <ceil+0x48>
 8018742:	a335      	add	r3, pc, #212	; (adr r3, 8018818 <ceil+0xf8>)
 8018744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018748:	f7e7 fda0 	bl	800028c <__adddf3>
 801874c:	2200      	movs	r2, #0
 801874e:	2300      	movs	r3, #0
 8018750:	f7e8 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 8018754:	b128      	cbz	r0, 8018762 <ceil+0x42>
 8018756:	2c00      	cmp	r4, #0
 8018758:	db55      	blt.n	8018806 <ceil+0xe6>
 801875a:	432c      	orrs	r4, r5
 801875c:	d057      	beq.n	801880e <ceil+0xee>
 801875e:	4c30      	ldr	r4, [pc, #192]	; (8018820 <ceil+0x100>)
 8018760:	2500      	movs	r5, #0
 8018762:	4621      	mov	r1, r4
 8018764:	4628      	mov	r0, r5
 8018766:	e025      	b.n	80187b4 <ceil+0x94>
 8018768:	4f2e      	ldr	r7, [pc, #184]	; (8018824 <ceil+0x104>)
 801876a:	4137      	asrs	r7, r6
 801876c:	ea01 0307 	and.w	r3, r1, r7
 8018770:	4303      	orrs	r3, r0
 8018772:	d01f      	beq.n	80187b4 <ceil+0x94>
 8018774:	a328      	add	r3, pc, #160	; (adr r3, 8018818 <ceil+0xf8>)
 8018776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877a:	f7e7 fd87 	bl	800028c <__adddf3>
 801877e:	2200      	movs	r2, #0
 8018780:	2300      	movs	r3, #0
 8018782:	f7e8 f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 8018786:	2800      	cmp	r0, #0
 8018788:	d0eb      	beq.n	8018762 <ceil+0x42>
 801878a:	2c00      	cmp	r4, #0
 801878c:	bfc2      	ittt	gt
 801878e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018792:	fa43 f606 	asrgt.w	r6, r3, r6
 8018796:	19a4      	addgt	r4, r4, r6
 8018798:	ea24 0407 	bic.w	r4, r4, r7
 801879c:	2500      	movs	r5, #0
 801879e:	e7e0      	b.n	8018762 <ceil+0x42>
 80187a0:	2e33      	cmp	r6, #51	; 0x33
 80187a2:	dd0b      	ble.n	80187bc <ceil+0x9c>
 80187a4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80187a8:	d104      	bne.n	80187b4 <ceil+0x94>
 80187aa:	ee10 2a10 	vmov	r2, s0
 80187ae:	460b      	mov	r3, r1
 80187b0:	f7e7 fd6c 	bl	800028c <__adddf3>
 80187b4:	ec41 0b10 	vmov	d0, r0, r1
 80187b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187bc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80187c0:	f04f 33ff 	mov.w	r3, #4294967295
 80187c4:	fa23 f707 	lsr.w	r7, r3, r7
 80187c8:	4207      	tst	r7, r0
 80187ca:	d0f3      	beq.n	80187b4 <ceil+0x94>
 80187cc:	a312      	add	r3, pc, #72	; (adr r3, 8018818 <ceil+0xf8>)
 80187ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187d2:	f7e7 fd5b 	bl	800028c <__adddf3>
 80187d6:	2200      	movs	r2, #0
 80187d8:	2300      	movs	r3, #0
 80187da:	f7e8 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 80187de:	2800      	cmp	r0, #0
 80187e0:	d0bf      	beq.n	8018762 <ceil+0x42>
 80187e2:	2c00      	cmp	r4, #0
 80187e4:	dd02      	ble.n	80187ec <ceil+0xcc>
 80187e6:	2e14      	cmp	r6, #20
 80187e8:	d103      	bne.n	80187f2 <ceil+0xd2>
 80187ea:	3401      	adds	r4, #1
 80187ec:	ea25 0507 	bic.w	r5, r5, r7
 80187f0:	e7b7      	b.n	8018762 <ceil+0x42>
 80187f2:	2301      	movs	r3, #1
 80187f4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80187f8:	fa03 f606 	lsl.w	r6, r3, r6
 80187fc:	4435      	add	r5, r6
 80187fe:	4545      	cmp	r5, r8
 8018800:	bf38      	it	cc
 8018802:	18e4      	addcc	r4, r4, r3
 8018804:	e7f2      	b.n	80187ec <ceil+0xcc>
 8018806:	2500      	movs	r5, #0
 8018808:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801880c:	e7a9      	b.n	8018762 <ceil+0x42>
 801880e:	4625      	mov	r5, r4
 8018810:	e7a7      	b.n	8018762 <ceil+0x42>
 8018812:	bf00      	nop
 8018814:	f3af 8000 	nop.w
 8018818:	8800759c 	.word	0x8800759c
 801881c:	7e37e43c 	.word	0x7e37e43c
 8018820:	3ff00000 	.word	0x3ff00000
 8018824:	000fffff 	.word	0x000fffff

08018828 <floor>:
 8018828:	ec51 0b10 	vmov	r0, r1, d0
 801882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018838:	2e13      	cmp	r6, #19
 801883a:	ee10 5a10 	vmov	r5, s0
 801883e:	ee10 8a10 	vmov	r8, s0
 8018842:	460c      	mov	r4, r1
 8018844:	dc32      	bgt.n	80188ac <floor+0x84>
 8018846:	2e00      	cmp	r6, #0
 8018848:	da14      	bge.n	8018874 <floor+0x4c>
 801884a:	a333      	add	r3, pc, #204	; (adr r3, 8018918 <floor+0xf0>)
 801884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018850:	f7e7 fd1c 	bl	800028c <__adddf3>
 8018854:	2200      	movs	r2, #0
 8018856:	2300      	movs	r3, #0
 8018858:	f7e8 f95e 	bl	8000b18 <__aeabi_dcmpgt>
 801885c:	b138      	cbz	r0, 801886e <floor+0x46>
 801885e:	2c00      	cmp	r4, #0
 8018860:	da57      	bge.n	8018912 <floor+0xea>
 8018862:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018866:	431d      	orrs	r5, r3
 8018868:	d001      	beq.n	801886e <floor+0x46>
 801886a:	4c2d      	ldr	r4, [pc, #180]	; (8018920 <floor+0xf8>)
 801886c:	2500      	movs	r5, #0
 801886e:	4621      	mov	r1, r4
 8018870:	4628      	mov	r0, r5
 8018872:	e025      	b.n	80188c0 <floor+0x98>
 8018874:	4f2b      	ldr	r7, [pc, #172]	; (8018924 <floor+0xfc>)
 8018876:	4137      	asrs	r7, r6
 8018878:	ea01 0307 	and.w	r3, r1, r7
 801887c:	4303      	orrs	r3, r0
 801887e:	d01f      	beq.n	80188c0 <floor+0x98>
 8018880:	a325      	add	r3, pc, #148	; (adr r3, 8018918 <floor+0xf0>)
 8018882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018886:	f7e7 fd01 	bl	800028c <__adddf3>
 801888a:	2200      	movs	r2, #0
 801888c:	2300      	movs	r3, #0
 801888e:	f7e8 f943 	bl	8000b18 <__aeabi_dcmpgt>
 8018892:	2800      	cmp	r0, #0
 8018894:	d0eb      	beq.n	801886e <floor+0x46>
 8018896:	2c00      	cmp	r4, #0
 8018898:	bfbe      	ittt	lt
 801889a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801889e:	fa43 f606 	asrlt.w	r6, r3, r6
 80188a2:	19a4      	addlt	r4, r4, r6
 80188a4:	ea24 0407 	bic.w	r4, r4, r7
 80188a8:	2500      	movs	r5, #0
 80188aa:	e7e0      	b.n	801886e <floor+0x46>
 80188ac:	2e33      	cmp	r6, #51	; 0x33
 80188ae:	dd0b      	ble.n	80188c8 <floor+0xa0>
 80188b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80188b4:	d104      	bne.n	80188c0 <floor+0x98>
 80188b6:	ee10 2a10 	vmov	r2, s0
 80188ba:	460b      	mov	r3, r1
 80188bc:	f7e7 fce6 	bl	800028c <__adddf3>
 80188c0:	ec41 0b10 	vmov	d0, r0, r1
 80188c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80188cc:	f04f 33ff 	mov.w	r3, #4294967295
 80188d0:	fa23 f707 	lsr.w	r7, r3, r7
 80188d4:	4207      	tst	r7, r0
 80188d6:	d0f3      	beq.n	80188c0 <floor+0x98>
 80188d8:	a30f      	add	r3, pc, #60	; (adr r3, 8018918 <floor+0xf0>)
 80188da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188de:	f7e7 fcd5 	bl	800028c <__adddf3>
 80188e2:	2200      	movs	r2, #0
 80188e4:	2300      	movs	r3, #0
 80188e6:	f7e8 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80188ea:	2800      	cmp	r0, #0
 80188ec:	d0bf      	beq.n	801886e <floor+0x46>
 80188ee:	2c00      	cmp	r4, #0
 80188f0:	da02      	bge.n	80188f8 <floor+0xd0>
 80188f2:	2e14      	cmp	r6, #20
 80188f4:	d103      	bne.n	80188fe <floor+0xd6>
 80188f6:	3401      	adds	r4, #1
 80188f8:	ea25 0507 	bic.w	r5, r5, r7
 80188fc:	e7b7      	b.n	801886e <floor+0x46>
 80188fe:	2301      	movs	r3, #1
 8018900:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018904:	fa03 f606 	lsl.w	r6, r3, r6
 8018908:	4435      	add	r5, r6
 801890a:	4545      	cmp	r5, r8
 801890c:	bf38      	it	cc
 801890e:	18e4      	addcc	r4, r4, r3
 8018910:	e7f2      	b.n	80188f8 <floor+0xd0>
 8018912:	2500      	movs	r5, #0
 8018914:	462c      	mov	r4, r5
 8018916:	e7aa      	b.n	801886e <floor+0x46>
 8018918:	8800759c 	.word	0x8800759c
 801891c:	7e37e43c 	.word	0x7e37e43c
 8018920:	bff00000 	.word	0xbff00000
 8018924:	000fffff 	.word	0x000fffff

08018928 <cosf>:
 8018928:	ee10 3a10 	vmov	r3, s0
 801892c:	b507      	push	{r0, r1, r2, lr}
 801892e:	4a1c      	ldr	r2, [pc, #112]	; (80189a0 <cosf+0x78>)
 8018930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018934:	4293      	cmp	r3, r2
 8018936:	dc04      	bgt.n	8018942 <cosf+0x1a>
 8018938:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80189a4 <cosf+0x7c>
 801893c:	f000 fe9e 	bl	801967c <__kernel_cosf>
 8018940:	e004      	b.n	801894c <cosf+0x24>
 8018942:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018946:	db04      	blt.n	8018952 <cosf+0x2a>
 8018948:	ee30 0a40 	vsub.f32	s0, s0, s0
 801894c:	b003      	add	sp, #12
 801894e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018952:	4668      	mov	r0, sp
 8018954:	f000 fd52 	bl	80193fc <__ieee754_rem_pio2f>
 8018958:	f000 0003 	and.w	r0, r0, #3
 801895c:	2801      	cmp	r0, #1
 801895e:	d007      	beq.n	8018970 <cosf+0x48>
 8018960:	2802      	cmp	r0, #2
 8018962:	d00e      	beq.n	8018982 <cosf+0x5a>
 8018964:	b9a0      	cbnz	r0, 8018990 <cosf+0x68>
 8018966:	eddd 0a01 	vldr	s1, [sp, #4]
 801896a:	ed9d 0a00 	vldr	s0, [sp]
 801896e:	e7e5      	b.n	801893c <cosf+0x14>
 8018970:	eddd 0a01 	vldr	s1, [sp, #4]
 8018974:	ed9d 0a00 	vldr	s0, [sp]
 8018978:	f001 f96a 	bl	8019c50 <__kernel_sinf>
 801897c:	eeb1 0a40 	vneg.f32	s0, s0
 8018980:	e7e4      	b.n	801894c <cosf+0x24>
 8018982:	eddd 0a01 	vldr	s1, [sp, #4]
 8018986:	ed9d 0a00 	vldr	s0, [sp]
 801898a:	f000 fe77 	bl	801967c <__kernel_cosf>
 801898e:	e7f5      	b.n	801897c <cosf+0x54>
 8018990:	eddd 0a01 	vldr	s1, [sp, #4]
 8018994:	ed9d 0a00 	vldr	s0, [sp]
 8018998:	2001      	movs	r0, #1
 801899a:	f001 f959 	bl	8019c50 <__kernel_sinf>
 801899e:	e7d5      	b.n	801894c <cosf+0x24>
 80189a0:	3f490fd8 	.word	0x3f490fd8
 80189a4:	00000000 	.word	0x00000000

080189a8 <roundf>:
 80189a8:	ee10 0a10 	vmov	r0, s0
 80189ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80189b0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80189b4:	2a16      	cmp	r2, #22
 80189b6:	dc15      	bgt.n	80189e4 <roundf+0x3c>
 80189b8:	2a00      	cmp	r2, #0
 80189ba:	da08      	bge.n	80189ce <roundf+0x26>
 80189bc:	3201      	adds	r2, #1
 80189be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80189c2:	d101      	bne.n	80189c8 <roundf+0x20>
 80189c4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80189c8:	ee00 3a10 	vmov	s0, r3
 80189cc:	4770      	bx	lr
 80189ce:	4908      	ldr	r1, [pc, #32]	; (80189f0 <roundf+0x48>)
 80189d0:	4111      	asrs	r1, r2
 80189d2:	4208      	tst	r0, r1
 80189d4:	d0fa      	beq.n	80189cc <roundf+0x24>
 80189d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80189da:	4113      	asrs	r3, r2
 80189dc:	4403      	add	r3, r0
 80189de:	ea23 0301 	bic.w	r3, r3, r1
 80189e2:	e7f1      	b.n	80189c8 <roundf+0x20>
 80189e4:	2a80      	cmp	r2, #128	; 0x80
 80189e6:	d1f1      	bne.n	80189cc <roundf+0x24>
 80189e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80189ec:	4770      	bx	lr
 80189ee:	bf00      	nop
 80189f0:	007fffff 	.word	0x007fffff

080189f4 <sinf>:
 80189f4:	ee10 3a10 	vmov	r3, s0
 80189f8:	b507      	push	{r0, r1, r2, lr}
 80189fa:	4a1d      	ldr	r2, [pc, #116]	; (8018a70 <sinf+0x7c>)
 80189fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a00:	4293      	cmp	r3, r2
 8018a02:	dc05      	bgt.n	8018a10 <sinf+0x1c>
 8018a04:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8018a74 <sinf+0x80>
 8018a08:	2000      	movs	r0, #0
 8018a0a:	f001 f921 	bl	8019c50 <__kernel_sinf>
 8018a0e:	e004      	b.n	8018a1a <sinf+0x26>
 8018a10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018a14:	db04      	blt.n	8018a20 <sinf+0x2c>
 8018a16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018a1a:	b003      	add	sp, #12
 8018a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a20:	4668      	mov	r0, sp
 8018a22:	f000 fceb 	bl	80193fc <__ieee754_rem_pio2f>
 8018a26:	f000 0003 	and.w	r0, r0, #3
 8018a2a:	2801      	cmp	r0, #1
 8018a2c:	d008      	beq.n	8018a40 <sinf+0x4c>
 8018a2e:	2802      	cmp	r0, #2
 8018a30:	d00d      	beq.n	8018a4e <sinf+0x5a>
 8018a32:	b9b0      	cbnz	r0, 8018a62 <sinf+0x6e>
 8018a34:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a38:	ed9d 0a00 	vldr	s0, [sp]
 8018a3c:	2001      	movs	r0, #1
 8018a3e:	e7e4      	b.n	8018a0a <sinf+0x16>
 8018a40:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a44:	ed9d 0a00 	vldr	s0, [sp]
 8018a48:	f000 fe18 	bl	801967c <__kernel_cosf>
 8018a4c:	e7e5      	b.n	8018a1a <sinf+0x26>
 8018a4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a52:	ed9d 0a00 	vldr	s0, [sp]
 8018a56:	2001      	movs	r0, #1
 8018a58:	f001 f8fa 	bl	8019c50 <__kernel_sinf>
 8018a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8018a60:	e7db      	b.n	8018a1a <sinf+0x26>
 8018a62:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a66:	ed9d 0a00 	vldr	s0, [sp]
 8018a6a:	f000 fe07 	bl	801967c <__kernel_cosf>
 8018a6e:	e7f5      	b.n	8018a5c <sinf+0x68>
 8018a70:	3f490fd8 	.word	0x3f490fd8
 8018a74:	00000000 	.word	0x00000000

08018a78 <tanf>:
 8018a78:	ee10 3a10 	vmov	r3, s0
 8018a7c:	b507      	push	{r0, r1, r2, lr}
 8018a7e:	4a10      	ldr	r2, [pc, #64]	; (8018ac0 <tanf+0x48>)
 8018a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a84:	4293      	cmp	r3, r2
 8018a86:	dc05      	bgt.n	8018a94 <tanf+0x1c>
 8018a88:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8018ac4 <tanf+0x4c>
 8018a8c:	2001      	movs	r0, #1
 8018a8e:	f001 f927 	bl	8019ce0 <__kernel_tanf>
 8018a92:	e004      	b.n	8018a9e <tanf+0x26>
 8018a94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018a98:	db04      	blt.n	8018aa4 <tanf+0x2c>
 8018a9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018a9e:	b003      	add	sp, #12
 8018aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018aa4:	4668      	mov	r0, sp
 8018aa6:	f000 fca9 	bl	80193fc <__ieee754_rem_pio2f>
 8018aaa:	0040      	lsls	r0, r0, #1
 8018aac:	f000 0002 	and.w	r0, r0, #2
 8018ab0:	eddd 0a01 	vldr	s1, [sp, #4]
 8018ab4:	ed9d 0a00 	vldr	s0, [sp]
 8018ab8:	f1c0 0001 	rsb	r0, r0, #1
 8018abc:	e7e7      	b.n	8018a8e <tanf+0x16>
 8018abe:	bf00      	nop
 8018ac0:	3f490fda 	.word	0x3f490fda
 8018ac4:	00000000 	.word	0x00000000

08018ac8 <atan2>:
 8018ac8:	f000 b89a 	b.w	8018c00 <__ieee754_atan2>

08018acc <sqrt>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	ed2d 8b02 	vpush	{d8}
 8018ad2:	ec55 4b10 	vmov	r4, r5, d0
 8018ad6:	f000 f95d 	bl	8018d94 <__ieee754_sqrt>
 8018ada:	4b15      	ldr	r3, [pc, #84]	; (8018b30 <sqrt+0x64>)
 8018adc:	eeb0 8a40 	vmov.f32	s16, s0
 8018ae0:	eef0 8a60 	vmov.f32	s17, s1
 8018ae4:	f993 3000 	ldrsb.w	r3, [r3]
 8018ae8:	3301      	adds	r3, #1
 8018aea:	d019      	beq.n	8018b20 <sqrt+0x54>
 8018aec:	4622      	mov	r2, r4
 8018aee:	462b      	mov	r3, r5
 8018af0:	4620      	mov	r0, r4
 8018af2:	4629      	mov	r1, r5
 8018af4:	f7e8 f81a 	bl	8000b2c <__aeabi_dcmpun>
 8018af8:	b990      	cbnz	r0, 8018b20 <sqrt+0x54>
 8018afa:	2200      	movs	r2, #0
 8018afc:	2300      	movs	r3, #0
 8018afe:	4620      	mov	r0, r4
 8018b00:	4629      	mov	r1, r5
 8018b02:	f7e7 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8018b06:	b158      	cbz	r0, 8018b20 <sqrt+0x54>
 8018b08:	f001 fd0e 	bl	801a528 <__errno>
 8018b0c:	2321      	movs	r3, #33	; 0x21
 8018b0e:	6003      	str	r3, [r0, #0]
 8018b10:	2200      	movs	r2, #0
 8018b12:	2300      	movs	r3, #0
 8018b14:	4610      	mov	r0, r2
 8018b16:	4619      	mov	r1, r3
 8018b18:	f7e7 fe98 	bl	800084c <__aeabi_ddiv>
 8018b1c:	ec41 0b18 	vmov	d8, r0, r1
 8018b20:	eeb0 0a48 	vmov.f32	s0, s16
 8018b24:	eef0 0a68 	vmov.f32	s1, s17
 8018b28:	ecbd 8b02 	vpop	{d8}
 8018b2c:	bd38      	pop	{r3, r4, r5, pc}
 8018b2e:	bf00      	nop
 8018b30:	20000189 	.word	0x20000189

08018b34 <acosf>:
 8018b34:	b508      	push	{r3, lr}
 8018b36:	ed2d 8b02 	vpush	{d8}
 8018b3a:	eeb0 8a40 	vmov.f32	s16, s0
 8018b3e:	f000 f9dd 	bl	8018efc <__ieee754_acosf>
 8018b42:	4b13      	ldr	r3, [pc, #76]	; (8018b90 <acosf+0x5c>)
 8018b44:	f993 3000 	ldrsb.w	r3, [r3]
 8018b48:	3301      	adds	r3, #1
 8018b4a:	eef0 8a40 	vmov.f32	s17, s0
 8018b4e:	d01a      	beq.n	8018b86 <acosf+0x52>
 8018b50:	eeb4 8a48 	vcmp.f32	s16, s16
 8018b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b58:	d615      	bvs.n	8018b86 <acosf+0x52>
 8018b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8018b5e:	f001 fc21 	bl	801a3a4 <fabsf>
 8018b62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018b66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b6e:	dd0a      	ble.n	8018b86 <acosf+0x52>
 8018b70:	f001 fcda 	bl	801a528 <__errno>
 8018b74:	ecbd 8b02 	vpop	{d8}
 8018b78:	2321      	movs	r3, #33	; 0x21
 8018b7a:	6003      	str	r3, [r0, #0]
 8018b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b80:	4804      	ldr	r0, [pc, #16]	; (8018b94 <acosf+0x60>)
 8018b82:	f001 bc59 	b.w	801a438 <nanf>
 8018b86:	eeb0 0a68 	vmov.f32	s0, s17
 8018b8a:	ecbd 8b02 	vpop	{d8}
 8018b8e:	bd08      	pop	{r3, pc}
 8018b90:	20000189 	.word	0x20000189
 8018b94:	0801b3bd 	.word	0x0801b3bd

08018b98 <asinf>:
 8018b98:	b508      	push	{r3, lr}
 8018b9a:	ed2d 8b02 	vpush	{d8}
 8018b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8018ba2:	f000 faa5 	bl	80190f0 <__ieee754_asinf>
 8018ba6:	4b13      	ldr	r3, [pc, #76]	; (8018bf4 <asinf+0x5c>)
 8018ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8018bac:	3301      	adds	r3, #1
 8018bae:	eef0 8a40 	vmov.f32	s17, s0
 8018bb2:	d01a      	beq.n	8018bea <asinf+0x52>
 8018bb4:	eeb4 8a48 	vcmp.f32	s16, s16
 8018bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bbc:	d615      	bvs.n	8018bea <asinf+0x52>
 8018bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8018bc2:	f001 fbef 	bl	801a3a4 <fabsf>
 8018bc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018bca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bd2:	dd0a      	ble.n	8018bea <asinf+0x52>
 8018bd4:	f001 fca8 	bl	801a528 <__errno>
 8018bd8:	ecbd 8b02 	vpop	{d8}
 8018bdc:	2321      	movs	r3, #33	; 0x21
 8018bde:	6003      	str	r3, [r0, #0]
 8018be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018be4:	4804      	ldr	r0, [pc, #16]	; (8018bf8 <asinf+0x60>)
 8018be6:	f001 bc27 	b.w	801a438 <nanf>
 8018bea:	eeb0 0a68 	vmov.f32	s0, s17
 8018bee:	ecbd 8b02 	vpop	{d8}
 8018bf2:	bd08      	pop	{r3, pc}
 8018bf4:	20000189 	.word	0x20000189
 8018bf8:	0801b3bd 	.word	0x0801b3bd

08018bfc <atan2f>:
 8018bfc:	f000 bb5e 	b.w	80192bc <__ieee754_atan2f>

08018c00 <__ieee754_atan2>:
 8018c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c04:	ec57 6b11 	vmov	r6, r7, d1
 8018c08:	4273      	negs	r3, r6
 8018c0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8018d90 <__ieee754_atan2+0x190>
 8018c0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018c12:	4333      	orrs	r3, r6
 8018c14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018c18:	4573      	cmp	r3, lr
 8018c1a:	ec51 0b10 	vmov	r0, r1, d0
 8018c1e:	ee11 8a10 	vmov	r8, s2
 8018c22:	d80a      	bhi.n	8018c3a <__ieee754_atan2+0x3a>
 8018c24:	4244      	negs	r4, r0
 8018c26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018c2a:	4304      	orrs	r4, r0
 8018c2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018c30:	4574      	cmp	r4, lr
 8018c32:	ee10 9a10 	vmov	r9, s0
 8018c36:	468c      	mov	ip, r1
 8018c38:	d907      	bls.n	8018c4a <__ieee754_atan2+0x4a>
 8018c3a:	4632      	mov	r2, r6
 8018c3c:	463b      	mov	r3, r7
 8018c3e:	f7e7 fb25 	bl	800028c <__adddf3>
 8018c42:	ec41 0b10 	vmov	d0, r0, r1
 8018c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018c4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018c52:	4334      	orrs	r4, r6
 8018c54:	d103      	bne.n	8018c5e <__ieee754_atan2+0x5e>
 8018c56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c5a:	f001 b925 	b.w	8019ea8 <atan>
 8018c5e:	17bc      	asrs	r4, r7, #30
 8018c60:	f004 0402 	and.w	r4, r4, #2
 8018c64:	ea53 0909 	orrs.w	r9, r3, r9
 8018c68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018c6c:	d107      	bne.n	8018c7e <__ieee754_atan2+0x7e>
 8018c6e:	2c02      	cmp	r4, #2
 8018c70:	d060      	beq.n	8018d34 <__ieee754_atan2+0x134>
 8018c72:	2c03      	cmp	r4, #3
 8018c74:	d1e5      	bne.n	8018c42 <__ieee754_atan2+0x42>
 8018c76:	a142      	add	r1, pc, #264	; (adr r1, 8018d80 <__ieee754_atan2+0x180>)
 8018c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c7c:	e7e1      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018c7e:	ea52 0808 	orrs.w	r8, r2, r8
 8018c82:	d106      	bne.n	8018c92 <__ieee754_atan2+0x92>
 8018c84:	f1bc 0f00 	cmp.w	ip, #0
 8018c88:	da5f      	bge.n	8018d4a <__ieee754_atan2+0x14a>
 8018c8a:	a13f      	add	r1, pc, #252	; (adr r1, 8018d88 <__ieee754_atan2+0x188>)
 8018c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c90:	e7d7      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018c92:	4572      	cmp	r2, lr
 8018c94:	d10f      	bne.n	8018cb6 <__ieee754_atan2+0xb6>
 8018c96:	4293      	cmp	r3, r2
 8018c98:	f104 34ff 	add.w	r4, r4, #4294967295
 8018c9c:	d107      	bne.n	8018cae <__ieee754_atan2+0xae>
 8018c9e:	2c02      	cmp	r4, #2
 8018ca0:	d84c      	bhi.n	8018d3c <__ieee754_atan2+0x13c>
 8018ca2:	4b35      	ldr	r3, [pc, #212]	; (8018d78 <__ieee754_atan2+0x178>)
 8018ca4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018ca8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8018cac:	e7c9      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018cae:	2c02      	cmp	r4, #2
 8018cb0:	d848      	bhi.n	8018d44 <__ieee754_atan2+0x144>
 8018cb2:	4b32      	ldr	r3, [pc, #200]	; (8018d7c <__ieee754_atan2+0x17c>)
 8018cb4:	e7f6      	b.n	8018ca4 <__ieee754_atan2+0xa4>
 8018cb6:	4573      	cmp	r3, lr
 8018cb8:	d0e4      	beq.n	8018c84 <__ieee754_atan2+0x84>
 8018cba:	1a9b      	subs	r3, r3, r2
 8018cbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018cc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018cc4:	da1e      	bge.n	8018d04 <__ieee754_atan2+0x104>
 8018cc6:	2f00      	cmp	r7, #0
 8018cc8:	da01      	bge.n	8018cce <__ieee754_atan2+0xce>
 8018cca:	323c      	adds	r2, #60	; 0x3c
 8018ccc:	db1e      	blt.n	8018d0c <__ieee754_atan2+0x10c>
 8018cce:	4632      	mov	r2, r6
 8018cd0:	463b      	mov	r3, r7
 8018cd2:	f7e7 fdbb 	bl	800084c <__aeabi_ddiv>
 8018cd6:	ec41 0b10 	vmov	d0, r0, r1
 8018cda:	f001 fa85 	bl	801a1e8 <fabs>
 8018cde:	f001 f8e3 	bl	8019ea8 <atan>
 8018ce2:	ec51 0b10 	vmov	r0, r1, d0
 8018ce6:	2c01      	cmp	r4, #1
 8018ce8:	d013      	beq.n	8018d12 <__ieee754_atan2+0x112>
 8018cea:	2c02      	cmp	r4, #2
 8018cec:	d015      	beq.n	8018d1a <__ieee754_atan2+0x11a>
 8018cee:	2c00      	cmp	r4, #0
 8018cf0:	d0a7      	beq.n	8018c42 <__ieee754_atan2+0x42>
 8018cf2:	a319      	add	r3, pc, #100	; (adr r3, 8018d58 <__ieee754_atan2+0x158>)
 8018cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cf8:	f7e7 fac6 	bl	8000288 <__aeabi_dsub>
 8018cfc:	a318      	add	r3, pc, #96	; (adr r3, 8018d60 <__ieee754_atan2+0x160>)
 8018cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d02:	e014      	b.n	8018d2e <__ieee754_atan2+0x12e>
 8018d04:	a118      	add	r1, pc, #96	; (adr r1, 8018d68 <__ieee754_atan2+0x168>)
 8018d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d0a:	e7ec      	b.n	8018ce6 <__ieee754_atan2+0xe6>
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	2100      	movs	r1, #0
 8018d10:	e7e9      	b.n	8018ce6 <__ieee754_atan2+0xe6>
 8018d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d16:	4619      	mov	r1, r3
 8018d18:	e793      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d1a:	a30f      	add	r3, pc, #60	; (adr r3, 8018d58 <__ieee754_atan2+0x158>)
 8018d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d20:	f7e7 fab2 	bl	8000288 <__aeabi_dsub>
 8018d24:	4602      	mov	r2, r0
 8018d26:	460b      	mov	r3, r1
 8018d28:	a10d      	add	r1, pc, #52	; (adr r1, 8018d60 <__ieee754_atan2+0x160>)
 8018d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d2e:	f7e7 faab 	bl	8000288 <__aeabi_dsub>
 8018d32:	e786      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d34:	a10a      	add	r1, pc, #40	; (adr r1, 8018d60 <__ieee754_atan2+0x160>)
 8018d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d3a:	e782      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d3c:	a10c      	add	r1, pc, #48	; (adr r1, 8018d70 <__ieee754_atan2+0x170>)
 8018d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d42:	e77e      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d44:	2000      	movs	r0, #0
 8018d46:	2100      	movs	r1, #0
 8018d48:	e77b      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d4a:	a107      	add	r1, pc, #28	; (adr r1, 8018d68 <__ieee754_atan2+0x168>)
 8018d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d50:	e777      	b.n	8018c42 <__ieee754_atan2+0x42>
 8018d52:	bf00      	nop
 8018d54:	f3af 8000 	nop.w
 8018d58:	33145c07 	.word	0x33145c07
 8018d5c:	3ca1a626 	.word	0x3ca1a626
 8018d60:	54442d18 	.word	0x54442d18
 8018d64:	400921fb 	.word	0x400921fb
 8018d68:	54442d18 	.word	0x54442d18
 8018d6c:	3ff921fb 	.word	0x3ff921fb
 8018d70:	54442d18 	.word	0x54442d18
 8018d74:	3fe921fb 	.word	0x3fe921fb
 8018d78:	0801af40 	.word	0x0801af40
 8018d7c:	0801af58 	.word	0x0801af58
 8018d80:	54442d18 	.word	0x54442d18
 8018d84:	c00921fb 	.word	0xc00921fb
 8018d88:	54442d18 	.word	0x54442d18
 8018d8c:	bff921fb 	.word	0xbff921fb
 8018d90:	7ff00000 	.word	0x7ff00000

08018d94 <__ieee754_sqrt>:
 8018d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d98:	ec55 4b10 	vmov	r4, r5, d0
 8018d9c:	4e56      	ldr	r6, [pc, #344]	; (8018ef8 <__ieee754_sqrt+0x164>)
 8018d9e:	43ae      	bics	r6, r5
 8018da0:	ee10 0a10 	vmov	r0, s0
 8018da4:	ee10 3a10 	vmov	r3, s0
 8018da8:	4629      	mov	r1, r5
 8018daa:	462a      	mov	r2, r5
 8018dac:	d110      	bne.n	8018dd0 <__ieee754_sqrt+0x3c>
 8018dae:	ee10 2a10 	vmov	r2, s0
 8018db2:	462b      	mov	r3, r5
 8018db4:	f7e7 fc20 	bl	80005f8 <__aeabi_dmul>
 8018db8:	4602      	mov	r2, r0
 8018dba:	460b      	mov	r3, r1
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	4629      	mov	r1, r5
 8018dc0:	f7e7 fa64 	bl	800028c <__adddf3>
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	ec45 4b10 	vmov	d0, r4, r5
 8018dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd0:	2d00      	cmp	r5, #0
 8018dd2:	dc10      	bgt.n	8018df6 <__ieee754_sqrt+0x62>
 8018dd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018dd8:	4330      	orrs	r0, r6
 8018dda:	d0f5      	beq.n	8018dc8 <__ieee754_sqrt+0x34>
 8018ddc:	b15d      	cbz	r5, 8018df6 <__ieee754_sqrt+0x62>
 8018dde:	ee10 2a10 	vmov	r2, s0
 8018de2:	462b      	mov	r3, r5
 8018de4:	ee10 0a10 	vmov	r0, s0
 8018de8:	f7e7 fa4e 	bl	8000288 <__aeabi_dsub>
 8018dec:	4602      	mov	r2, r0
 8018dee:	460b      	mov	r3, r1
 8018df0:	f7e7 fd2c 	bl	800084c <__aeabi_ddiv>
 8018df4:	e7e6      	b.n	8018dc4 <__ieee754_sqrt+0x30>
 8018df6:	1509      	asrs	r1, r1, #20
 8018df8:	d076      	beq.n	8018ee8 <__ieee754_sqrt+0x154>
 8018dfa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018dfe:	07ce      	lsls	r6, r1, #31
 8018e00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8018e04:	bf5e      	ittt	pl
 8018e06:	0fda      	lsrpl	r2, r3, #31
 8018e08:	005b      	lslpl	r3, r3, #1
 8018e0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8018e0e:	0fda      	lsrs	r2, r3, #31
 8018e10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8018e14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018e18:	2000      	movs	r0, #0
 8018e1a:	106d      	asrs	r5, r5, #1
 8018e1c:	005b      	lsls	r3, r3, #1
 8018e1e:	f04f 0e16 	mov.w	lr, #22
 8018e22:	4684      	mov	ip, r0
 8018e24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018e28:	eb0c 0401 	add.w	r4, ip, r1
 8018e2c:	4294      	cmp	r4, r2
 8018e2e:	bfde      	ittt	le
 8018e30:	1b12      	suble	r2, r2, r4
 8018e32:	eb04 0c01 	addle.w	ip, r4, r1
 8018e36:	1840      	addle	r0, r0, r1
 8018e38:	0052      	lsls	r2, r2, #1
 8018e3a:	f1be 0e01 	subs.w	lr, lr, #1
 8018e3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018e42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018e46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018e4a:	d1ed      	bne.n	8018e28 <__ieee754_sqrt+0x94>
 8018e4c:	4671      	mov	r1, lr
 8018e4e:	2720      	movs	r7, #32
 8018e50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018e54:	4562      	cmp	r2, ip
 8018e56:	eb04 060e 	add.w	r6, r4, lr
 8018e5a:	dc02      	bgt.n	8018e62 <__ieee754_sqrt+0xce>
 8018e5c:	d113      	bne.n	8018e86 <__ieee754_sqrt+0xf2>
 8018e5e:	429e      	cmp	r6, r3
 8018e60:	d811      	bhi.n	8018e86 <__ieee754_sqrt+0xf2>
 8018e62:	2e00      	cmp	r6, #0
 8018e64:	eb06 0e04 	add.w	lr, r6, r4
 8018e68:	da43      	bge.n	8018ef2 <__ieee754_sqrt+0x15e>
 8018e6a:	f1be 0f00 	cmp.w	lr, #0
 8018e6e:	db40      	blt.n	8018ef2 <__ieee754_sqrt+0x15e>
 8018e70:	f10c 0801 	add.w	r8, ip, #1
 8018e74:	eba2 020c 	sub.w	r2, r2, ip
 8018e78:	429e      	cmp	r6, r3
 8018e7a:	bf88      	it	hi
 8018e7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018e80:	1b9b      	subs	r3, r3, r6
 8018e82:	4421      	add	r1, r4
 8018e84:	46c4      	mov	ip, r8
 8018e86:	0052      	lsls	r2, r2, #1
 8018e88:	3f01      	subs	r7, #1
 8018e8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018e8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018e92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018e96:	d1dd      	bne.n	8018e54 <__ieee754_sqrt+0xc0>
 8018e98:	4313      	orrs	r3, r2
 8018e9a:	d006      	beq.n	8018eaa <__ieee754_sqrt+0x116>
 8018e9c:	1c4c      	adds	r4, r1, #1
 8018e9e:	bf13      	iteet	ne
 8018ea0:	3101      	addne	r1, #1
 8018ea2:	3001      	addeq	r0, #1
 8018ea4:	4639      	moveq	r1, r7
 8018ea6:	f021 0101 	bicne.w	r1, r1, #1
 8018eaa:	1043      	asrs	r3, r0, #1
 8018eac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018eb0:	0849      	lsrs	r1, r1, #1
 8018eb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018eb6:	07c2      	lsls	r2, r0, #31
 8018eb8:	bf48      	it	mi
 8018eba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018ebe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8018ec2:	460c      	mov	r4, r1
 8018ec4:	463d      	mov	r5, r7
 8018ec6:	e77f      	b.n	8018dc8 <__ieee754_sqrt+0x34>
 8018ec8:	0ada      	lsrs	r2, r3, #11
 8018eca:	3815      	subs	r0, #21
 8018ecc:	055b      	lsls	r3, r3, #21
 8018ece:	2a00      	cmp	r2, #0
 8018ed0:	d0fa      	beq.n	8018ec8 <__ieee754_sqrt+0x134>
 8018ed2:	02d7      	lsls	r7, r2, #11
 8018ed4:	d50a      	bpl.n	8018eec <__ieee754_sqrt+0x158>
 8018ed6:	f1c1 0420 	rsb	r4, r1, #32
 8018eda:	fa23 f404 	lsr.w	r4, r3, r4
 8018ede:	1e4d      	subs	r5, r1, #1
 8018ee0:	408b      	lsls	r3, r1
 8018ee2:	4322      	orrs	r2, r4
 8018ee4:	1b41      	subs	r1, r0, r5
 8018ee6:	e788      	b.n	8018dfa <__ieee754_sqrt+0x66>
 8018ee8:	4608      	mov	r0, r1
 8018eea:	e7f0      	b.n	8018ece <__ieee754_sqrt+0x13a>
 8018eec:	0052      	lsls	r2, r2, #1
 8018eee:	3101      	adds	r1, #1
 8018ef0:	e7ef      	b.n	8018ed2 <__ieee754_sqrt+0x13e>
 8018ef2:	46e0      	mov	r8, ip
 8018ef4:	e7be      	b.n	8018e74 <__ieee754_sqrt+0xe0>
 8018ef6:	bf00      	nop
 8018ef8:	7ff00000 	.word	0x7ff00000

08018efc <__ieee754_acosf>:
 8018efc:	b508      	push	{r3, lr}
 8018efe:	ee10 3a10 	vmov	r3, s0
 8018f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018f06:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018f0a:	ed2d 8b0c 	vpush	{d8-d13}
 8018f0e:	d10a      	bne.n	8018f26 <__ieee754_acosf+0x2a>
 8018f10:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80190ac <__ieee754_acosf+0x1b0>
 8018f14:	ed9f 8a66 	vldr	s16, [pc, #408]	; 80190b0 <__ieee754_acosf+0x1b4>
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	bfd8      	it	le
 8018f1c:	eeb0 0a48 	vmovle.f32	s0, s16
 8018f20:	ecbd 8b0c 	vpop	{d8-d13}
 8018f24:	bd08      	pop	{r3, pc}
 8018f26:	dd04      	ble.n	8018f32 <__ieee754_acosf+0x36>
 8018f28:	ee30 8a40 	vsub.f32	s16, s0, s0
 8018f2c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018f30:	e7f6      	b.n	8018f20 <__ieee754_acosf+0x24>
 8018f32:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8018f36:	da3e      	bge.n	8018fb6 <__ieee754_acosf+0xba>
 8018f38:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8018f3c:	f340 80b3 	ble.w	80190a6 <__ieee754_acosf+0x1aa>
 8018f40:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018f44:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80190b4 <__ieee754_acosf+0x1b8>
 8018f48:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80190b8 <__ieee754_acosf+0x1bc>
 8018f4c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80190bc <__ieee754_acosf+0x1c0>
 8018f50:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80190c0 <__ieee754_acosf+0x1c4>
 8018f54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018f58:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80190c4 <__ieee754_acosf+0x1c8>
 8018f5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018f60:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80190c8 <__ieee754_acosf+0x1cc>
 8018f64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018f68:	eddf 6a58 	vldr	s13, [pc, #352]	; 80190cc <__ieee754_acosf+0x1d0>
 8018f6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018f70:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80190d0 <__ieee754_acosf+0x1d4>
 8018f74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018f78:	eddf 6a56 	vldr	s13, [pc, #344]	; 80190d4 <__ieee754_acosf+0x1d8>
 8018f7c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018f80:	eddf 6a55 	vldr	s13, [pc, #340]	; 80190d8 <__ieee754_acosf+0x1dc>
 8018f84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018f88:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80190dc <__ieee754_acosf+0x1e0>
 8018f8c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f94:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f9c:	eef0 7a66 	vmov.f32	s15, s13
 8018fa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018fa4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80190e0 <__ieee754_acosf+0x1e4>
 8018fa8:	eea0 8a66 	vfms.f32	s16, s0, s13
 8018fac:	ee30 0a48 	vsub.f32	s0, s0, s16
 8018fb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018fb4:	e7b4      	b.n	8018f20 <__ieee754_acosf+0x24>
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	eddf da3e 	vldr	s27, [pc, #248]	; 80190b4 <__ieee754_acosf+0x1b8>
 8018fbc:	eddf ca3e 	vldr	s25, [pc, #248]	; 80190b8 <__ieee754_acosf+0x1bc>
 8018fc0:	ed9f ca40 	vldr	s24, [pc, #256]	; 80190c4 <__ieee754_acosf+0x1c8>
 8018fc4:	eddf ba40 	vldr	s23, [pc, #256]	; 80190c8 <__ieee754_acosf+0x1cc>
 8018fc8:	ed9f ba40 	vldr	s22, [pc, #256]	; 80190cc <__ieee754_acosf+0x1d0>
 8018fcc:	eddf 8a40 	vldr	s17, [pc, #256]	; 80190d0 <__ieee754_acosf+0x1d4>
 8018fd0:	ed9f da40 	vldr	s26, [pc, #256]	; 80190d4 <__ieee754_acosf+0x1d8>
 8018fd4:	eddf aa39 	vldr	s21, [pc, #228]	; 80190bc <__ieee754_acosf+0x1c0>
 8018fd8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80190d8 <__ieee754_acosf+0x1dc>
 8018fdc:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80190dc <__ieee754_acosf+0x1e0>
 8018fe0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018fe4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018fe8:	da28      	bge.n	801903c <__ieee754_acosf+0x140>
 8018fea:	ee30 0a09 	vadd.f32	s0, s0, s18
 8018fee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018ff2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8018ff6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018ffa:	eeac ca80 	vfma.f32	s24, s25, s0
 8018ffe:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019002:	eeec ba00 	vfma.f32	s23, s24, s0
 8019006:	eeea 9a00 	vfma.f32	s19, s20, s0
 801900a:	eeab ba80 	vfma.f32	s22, s23, s0
 801900e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8019012:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8019016:	ee68 8a80 	vmul.f32	s17, s17, s0
 801901a:	f000 fb2b 	bl	8019674 <__ieee754_sqrtf>
 801901e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019022:	eddf 7a30 	vldr	s15, [pc, #192]	; 80190e4 <__ieee754_acosf+0x1e8>
 8019026:	eee0 7a07 	vfma.f32	s15, s0, s14
 801902a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801902e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019032:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80190e8 <__ieee754_acosf+0x1ec>
 8019036:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801903a:	e771      	b.n	8018f20 <__ieee754_acosf+0x24>
 801903c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019040:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019044:	eeb0 0a48 	vmov.f32	s0, s16
 8019048:	f000 fb14 	bl	8019674 <__ieee754_sqrtf>
 801904c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019050:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019054:	eeac ca88 	vfma.f32	s24, s25, s16
 8019058:	eeaa aa88 	vfma.f32	s20, s21, s16
 801905c:	eeec ba08 	vfma.f32	s23, s24, s16
 8019060:	ee10 3a10 	vmov	r3, s0
 8019064:	eeab ba88 	vfma.f32	s22, s23, s16
 8019068:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801906c:	f023 030f 	bic.w	r3, r3, #15
 8019070:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019074:	ee07 3a90 	vmov	s15, r3
 8019078:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801907c:	eeb0 6a48 	vmov.f32	s12, s16
 8019080:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019084:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019088:	ee70 6a27 	vadd.f32	s13, s0, s15
 801908c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019090:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019094:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019098:	eea0 7a26 	vfma.f32	s14, s0, s13
 801909c:	ee37 0a87 	vadd.f32	s0, s15, s14
 80190a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80190a4:	e73c      	b.n	8018f20 <__ieee754_acosf+0x24>
 80190a6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80190ec <__ieee754_acosf+0x1f0>
 80190aa:	e739      	b.n	8018f20 <__ieee754_acosf+0x24>
 80190ac:	00000000 	.word	0x00000000
 80190b0:	40490fdb 	.word	0x40490fdb
 80190b4:	3811ef08 	.word	0x3811ef08
 80190b8:	3a4f7f04 	.word	0x3a4f7f04
 80190bc:	bf303361 	.word	0xbf303361
 80190c0:	33a22168 	.word	0x33a22168
 80190c4:	bd241146 	.word	0xbd241146
 80190c8:	3e4e0aa8 	.word	0x3e4e0aa8
 80190cc:	bea6b090 	.word	0xbea6b090
 80190d0:	3e2aaaab 	.word	0x3e2aaaab
 80190d4:	3d9dc62e 	.word	0x3d9dc62e
 80190d8:	4001572d 	.word	0x4001572d
 80190dc:	c019d139 	.word	0xc019d139
 80190e0:	3fc90fda 	.word	0x3fc90fda
 80190e4:	b3a22168 	.word	0xb3a22168
 80190e8:	40490fda 	.word	0x40490fda
 80190ec:	3fc90fdb 	.word	0x3fc90fdb

080190f0 <__ieee754_asinf>:
 80190f0:	b538      	push	{r3, r4, r5, lr}
 80190f2:	ee10 5a10 	vmov	r5, s0
 80190f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80190fa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80190fe:	ed2d 8b04 	vpush	{d8-d9}
 8019102:	d10c      	bne.n	801911e <__ieee754_asinf+0x2e>
 8019104:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801927c <__ieee754_asinf+0x18c>
 8019108:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019280 <__ieee754_asinf+0x190>
 801910c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019110:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019114:	eeb0 0a67 	vmov.f32	s0, s15
 8019118:	ecbd 8b04 	vpop	{d8-d9}
 801911c:	bd38      	pop	{r3, r4, r5, pc}
 801911e:	dd04      	ble.n	801912a <__ieee754_asinf+0x3a>
 8019120:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019124:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019128:	e7f6      	b.n	8019118 <__ieee754_asinf+0x28>
 801912a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801912e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019132:	da0b      	bge.n	801914c <__ieee754_asinf+0x5c>
 8019134:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8019138:	da52      	bge.n	80191e0 <__ieee754_asinf+0xf0>
 801913a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8019284 <__ieee754_asinf+0x194>
 801913e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019142:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801914a:	dce5      	bgt.n	8019118 <__ieee754_asinf+0x28>
 801914c:	f001 f92a 	bl	801a3a4 <fabsf>
 8019150:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8019154:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8019158:	ee20 8a08 	vmul.f32	s16, s0, s16
 801915c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019288 <__ieee754_asinf+0x198>
 8019160:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801928c <__ieee754_asinf+0x19c>
 8019164:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8019290 <__ieee754_asinf+0x1a0>
 8019168:	eea8 7a27 	vfma.f32	s14, s16, s15
 801916c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019294 <__ieee754_asinf+0x1a4>
 8019170:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019174:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019298 <__ieee754_asinf+0x1a8>
 8019178:	eea7 7a88 	vfma.f32	s14, s15, s16
 801917c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801929c <__ieee754_asinf+0x1ac>
 8019180:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019184:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80192a0 <__ieee754_asinf+0x1b0>
 8019188:	eea7 9a88 	vfma.f32	s18, s15, s16
 801918c:	eddf 7a45 	vldr	s15, [pc, #276]	; 80192a4 <__ieee754_asinf+0x1b4>
 8019190:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019194:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80192a8 <__ieee754_asinf+0x1b8>
 8019198:	eea7 7a88 	vfma.f32	s14, s15, s16
 801919c:	eddf 7a43 	vldr	s15, [pc, #268]	; 80192ac <__ieee754_asinf+0x1bc>
 80191a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80191a4:	eeb0 0a48 	vmov.f32	s0, s16
 80191a8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80191ac:	f000 fa62 	bl	8019674 <__ieee754_sqrtf>
 80191b0:	4b3f      	ldr	r3, [pc, #252]	; (80192b0 <__ieee754_asinf+0x1c0>)
 80191b2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80191b6:	429c      	cmp	r4, r3
 80191b8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80191bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80191c0:	dd3d      	ble.n	801923e <__ieee754_asinf+0x14e>
 80191c2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80191c6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80192b4 <__ieee754_asinf+0x1c4>
 80191ca:	eee0 7a26 	vfma.f32	s15, s0, s13
 80191ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019280 <__ieee754_asinf+0x190>
 80191d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80191d6:	2d00      	cmp	r5, #0
 80191d8:	bfd8      	it	le
 80191da:	eeb1 0a40 	vnegle.f32	s0, s0
 80191de:	e79b      	b.n	8019118 <__ieee754_asinf+0x28>
 80191e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80191e4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8019288 <__ieee754_asinf+0x198>
 80191e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801928c <__ieee754_asinf+0x19c>
 80191ec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80192a0 <__ieee754_asinf+0x1b0>
 80191f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80191f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019294 <__ieee754_asinf+0x1a4>
 80191f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80191fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019298 <__ieee754_asinf+0x1a8>
 8019200:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019204:	eddf 6a25 	vldr	s13, [pc, #148]	; 801929c <__ieee754_asinf+0x1ac>
 8019208:	eee7 6a27 	vfma.f32	s13, s14, s15
 801920c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019290 <__ieee754_asinf+0x1a0>
 8019210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019214:	eddf 6a23 	vldr	s13, [pc, #140]	; 80192a4 <__ieee754_asinf+0x1b4>
 8019218:	eee7 6a86 	vfma.f32	s13, s15, s12
 801921c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80192a8 <__ieee754_asinf+0x1b8>
 8019220:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019224:	eddf 6a21 	vldr	s13, [pc, #132]	; 80192ac <__ieee754_asinf+0x1bc>
 8019228:	eee6 6a27 	vfma.f32	s13, s12, s15
 801922c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019230:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019234:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019238:	eea0 0a27 	vfma.f32	s0, s0, s15
 801923c:	e76c      	b.n	8019118 <__ieee754_asinf+0x28>
 801923e:	ee10 3a10 	vmov	r3, s0
 8019242:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019246:	f023 030f 	bic.w	r3, r3, #15
 801924a:	ee07 3a10 	vmov	s14, r3
 801924e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019252:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019256:	ee30 0a00 	vadd.f32	s0, s0, s0
 801925a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801925e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801927c <__ieee754_asinf+0x18c>
 8019262:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8019266:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801926a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80192b8 <__ieee754_asinf+0x1c8>
 801926e:	eeb0 6a40 	vmov.f32	s12, s0
 8019272:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019276:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801927a:	e7aa      	b.n	80191d2 <__ieee754_asinf+0xe2>
 801927c:	b33bbd2e 	.word	0xb33bbd2e
 8019280:	3fc90fdb 	.word	0x3fc90fdb
 8019284:	7149f2ca 	.word	0x7149f2ca
 8019288:	3811ef08 	.word	0x3811ef08
 801928c:	3a4f7f04 	.word	0x3a4f7f04
 8019290:	3e2aaaab 	.word	0x3e2aaaab
 8019294:	bd241146 	.word	0xbd241146
 8019298:	3e4e0aa8 	.word	0x3e4e0aa8
 801929c:	bea6b090 	.word	0xbea6b090
 80192a0:	3d9dc62e 	.word	0x3d9dc62e
 80192a4:	bf303361 	.word	0xbf303361
 80192a8:	4001572d 	.word	0x4001572d
 80192ac:	c019d139 	.word	0xc019d139
 80192b0:	3f799999 	.word	0x3f799999
 80192b4:	333bbd2e 	.word	0x333bbd2e
 80192b8:	3f490fdb 	.word	0x3f490fdb

080192bc <__ieee754_atan2f>:
 80192bc:	ee10 2a90 	vmov	r2, s1
 80192c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80192c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80192c8:	b510      	push	{r4, lr}
 80192ca:	eef0 7a40 	vmov.f32	s15, s0
 80192ce:	dc06      	bgt.n	80192de <__ieee754_atan2f+0x22>
 80192d0:	ee10 0a10 	vmov	r0, s0
 80192d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80192d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80192dc:	dd04      	ble.n	80192e8 <__ieee754_atan2f+0x2c>
 80192de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80192e2:	eeb0 0a67 	vmov.f32	s0, s15
 80192e6:	bd10      	pop	{r4, pc}
 80192e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80192ec:	d103      	bne.n	80192f6 <__ieee754_atan2f+0x3a>
 80192ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192f2:	f000 bf83 	b.w	801a1fc <atanf>
 80192f6:	1794      	asrs	r4, r2, #30
 80192f8:	f004 0402 	and.w	r4, r4, #2
 80192fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019300:	b943      	cbnz	r3, 8019314 <__ieee754_atan2f+0x58>
 8019302:	2c02      	cmp	r4, #2
 8019304:	d05e      	beq.n	80193c4 <__ieee754_atan2f+0x108>
 8019306:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80193d8 <__ieee754_atan2f+0x11c>
 801930a:	2c03      	cmp	r4, #3
 801930c:	bf08      	it	eq
 801930e:	eef0 7a47 	vmoveq.f32	s15, s14
 8019312:	e7e6      	b.n	80192e2 <__ieee754_atan2f+0x26>
 8019314:	b941      	cbnz	r1, 8019328 <__ieee754_atan2f+0x6c>
 8019316:	eddf 7a31 	vldr	s15, [pc, #196]	; 80193dc <__ieee754_atan2f+0x120>
 801931a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80193e0 <__ieee754_atan2f+0x124>
 801931e:	2800      	cmp	r0, #0
 8019320:	bfb8      	it	lt
 8019322:	eef0 7a40 	vmovlt.f32	s15, s0
 8019326:	e7dc      	b.n	80192e2 <__ieee754_atan2f+0x26>
 8019328:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801932c:	d110      	bne.n	8019350 <__ieee754_atan2f+0x94>
 801932e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019332:	f104 34ff 	add.w	r4, r4, #4294967295
 8019336:	d107      	bne.n	8019348 <__ieee754_atan2f+0x8c>
 8019338:	2c02      	cmp	r4, #2
 801933a:	d846      	bhi.n	80193ca <__ieee754_atan2f+0x10e>
 801933c:	4b29      	ldr	r3, [pc, #164]	; (80193e4 <__ieee754_atan2f+0x128>)
 801933e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019342:	edd4 7a00 	vldr	s15, [r4]
 8019346:	e7cc      	b.n	80192e2 <__ieee754_atan2f+0x26>
 8019348:	2c02      	cmp	r4, #2
 801934a:	d841      	bhi.n	80193d0 <__ieee754_atan2f+0x114>
 801934c:	4b26      	ldr	r3, [pc, #152]	; (80193e8 <__ieee754_atan2f+0x12c>)
 801934e:	e7f6      	b.n	801933e <__ieee754_atan2f+0x82>
 8019350:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019354:	d0df      	beq.n	8019316 <__ieee754_atan2f+0x5a>
 8019356:	1a5b      	subs	r3, r3, r1
 8019358:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801935c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019360:	da1a      	bge.n	8019398 <__ieee754_atan2f+0xdc>
 8019362:	2a00      	cmp	r2, #0
 8019364:	da01      	bge.n	801936a <__ieee754_atan2f+0xae>
 8019366:	313c      	adds	r1, #60	; 0x3c
 8019368:	db19      	blt.n	801939e <__ieee754_atan2f+0xe2>
 801936a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801936e:	f001 f819 	bl	801a3a4 <fabsf>
 8019372:	f000 ff43 	bl	801a1fc <atanf>
 8019376:	eef0 7a40 	vmov.f32	s15, s0
 801937a:	2c01      	cmp	r4, #1
 801937c:	d012      	beq.n	80193a4 <__ieee754_atan2f+0xe8>
 801937e:	2c02      	cmp	r4, #2
 8019380:	d017      	beq.n	80193b2 <__ieee754_atan2f+0xf6>
 8019382:	2c00      	cmp	r4, #0
 8019384:	d0ad      	beq.n	80192e2 <__ieee754_atan2f+0x26>
 8019386:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80193ec <__ieee754_atan2f+0x130>
 801938a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801938e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80193f0 <__ieee754_atan2f+0x134>
 8019392:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019396:	e7a4      	b.n	80192e2 <__ieee754_atan2f+0x26>
 8019398:	eddf 7a10 	vldr	s15, [pc, #64]	; 80193dc <__ieee754_atan2f+0x120>
 801939c:	e7ed      	b.n	801937a <__ieee754_atan2f+0xbe>
 801939e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80193f4 <__ieee754_atan2f+0x138>
 80193a2:	e7ea      	b.n	801937a <__ieee754_atan2f+0xbe>
 80193a4:	ee17 3a90 	vmov	r3, s15
 80193a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80193ac:	ee07 3a90 	vmov	s15, r3
 80193b0:	e797      	b.n	80192e2 <__ieee754_atan2f+0x26>
 80193b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80193ec <__ieee754_atan2f+0x130>
 80193b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80193ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80193f0 <__ieee754_atan2f+0x134>
 80193be:	ee70 7a67 	vsub.f32	s15, s0, s15
 80193c2:	e78e      	b.n	80192e2 <__ieee754_atan2f+0x26>
 80193c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80193f0 <__ieee754_atan2f+0x134>
 80193c8:	e78b      	b.n	80192e2 <__ieee754_atan2f+0x26>
 80193ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80193f8 <__ieee754_atan2f+0x13c>
 80193ce:	e788      	b.n	80192e2 <__ieee754_atan2f+0x26>
 80193d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80193f4 <__ieee754_atan2f+0x138>
 80193d4:	e785      	b.n	80192e2 <__ieee754_atan2f+0x26>
 80193d6:	bf00      	nop
 80193d8:	c0490fdb 	.word	0xc0490fdb
 80193dc:	3fc90fdb 	.word	0x3fc90fdb
 80193e0:	bfc90fdb 	.word	0xbfc90fdb
 80193e4:	0801af70 	.word	0x0801af70
 80193e8:	0801af7c 	.word	0x0801af7c
 80193ec:	33bbbd2e 	.word	0x33bbbd2e
 80193f0:	40490fdb 	.word	0x40490fdb
 80193f4:	00000000 	.word	0x00000000
 80193f8:	3f490fdb 	.word	0x3f490fdb

080193fc <__ieee754_rem_pio2f>:
 80193fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193fe:	ee10 6a10 	vmov	r6, s0
 8019402:	4b8e      	ldr	r3, [pc, #568]	; (801963c <__ieee754_rem_pio2f+0x240>)
 8019404:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019408:	429d      	cmp	r5, r3
 801940a:	b087      	sub	sp, #28
 801940c:	eef0 7a40 	vmov.f32	s15, s0
 8019410:	4604      	mov	r4, r0
 8019412:	dc05      	bgt.n	8019420 <__ieee754_rem_pio2f+0x24>
 8019414:	2300      	movs	r3, #0
 8019416:	ed80 0a00 	vstr	s0, [r0]
 801941a:	6043      	str	r3, [r0, #4]
 801941c:	2000      	movs	r0, #0
 801941e:	e01a      	b.n	8019456 <__ieee754_rem_pio2f+0x5a>
 8019420:	4b87      	ldr	r3, [pc, #540]	; (8019640 <__ieee754_rem_pio2f+0x244>)
 8019422:	429d      	cmp	r5, r3
 8019424:	dc46      	bgt.n	80194b4 <__ieee754_rem_pio2f+0xb8>
 8019426:	2e00      	cmp	r6, #0
 8019428:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8019644 <__ieee754_rem_pio2f+0x248>
 801942c:	4b86      	ldr	r3, [pc, #536]	; (8019648 <__ieee754_rem_pio2f+0x24c>)
 801942e:	f025 050f 	bic.w	r5, r5, #15
 8019432:	dd1f      	ble.n	8019474 <__ieee754_rem_pio2f+0x78>
 8019434:	429d      	cmp	r5, r3
 8019436:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801943a:	d00e      	beq.n	801945a <__ieee754_rem_pio2f+0x5e>
 801943c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801964c <__ieee754_rem_pio2f+0x250>
 8019440:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019444:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019448:	ed80 0a00 	vstr	s0, [r0]
 801944c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019450:	2001      	movs	r0, #1
 8019452:	edc4 7a01 	vstr	s15, [r4, #4]
 8019456:	b007      	add	sp, #28
 8019458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801945a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019650 <__ieee754_rem_pio2f+0x254>
 801945e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019654 <__ieee754_rem_pio2f+0x258>
 8019462:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019466:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801946a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801946e:	edc0 6a00 	vstr	s13, [r0]
 8019472:	e7eb      	b.n	801944c <__ieee754_rem_pio2f+0x50>
 8019474:	429d      	cmp	r5, r3
 8019476:	ee77 7a80 	vadd.f32	s15, s15, s0
 801947a:	d00e      	beq.n	801949a <__ieee754_rem_pio2f+0x9e>
 801947c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801964c <__ieee754_rem_pio2f+0x250>
 8019480:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019484:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019488:	ed80 0a00 	vstr	s0, [r0]
 801948c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019490:	f04f 30ff 	mov.w	r0, #4294967295
 8019494:	edc4 7a01 	vstr	s15, [r4, #4]
 8019498:	e7dd      	b.n	8019456 <__ieee754_rem_pio2f+0x5a>
 801949a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019650 <__ieee754_rem_pio2f+0x254>
 801949e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019654 <__ieee754_rem_pio2f+0x258>
 80194a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80194a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80194aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80194ae:	edc0 6a00 	vstr	s13, [r0]
 80194b2:	e7eb      	b.n	801948c <__ieee754_rem_pio2f+0x90>
 80194b4:	4b68      	ldr	r3, [pc, #416]	; (8019658 <__ieee754_rem_pio2f+0x25c>)
 80194b6:	429d      	cmp	r5, r3
 80194b8:	dc72      	bgt.n	80195a0 <__ieee754_rem_pio2f+0x1a4>
 80194ba:	f000 ff73 	bl	801a3a4 <fabsf>
 80194be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801965c <__ieee754_rem_pio2f+0x260>
 80194c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80194c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80194ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80194d2:	ee17 0a90 	vmov	r0, s15
 80194d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019644 <__ieee754_rem_pio2f+0x248>
 80194da:	eea7 0a67 	vfms.f32	s0, s14, s15
 80194de:	281f      	cmp	r0, #31
 80194e0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801964c <__ieee754_rem_pio2f+0x250>
 80194e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194e8:	eeb1 6a47 	vneg.f32	s12, s14
 80194ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80194f0:	ee16 2a90 	vmov	r2, s13
 80194f4:	dc1c      	bgt.n	8019530 <__ieee754_rem_pio2f+0x134>
 80194f6:	495a      	ldr	r1, [pc, #360]	; (8019660 <__ieee754_rem_pio2f+0x264>)
 80194f8:	1e47      	subs	r7, r0, #1
 80194fa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80194fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019502:	428b      	cmp	r3, r1
 8019504:	d014      	beq.n	8019530 <__ieee754_rem_pio2f+0x134>
 8019506:	6022      	str	r2, [r4, #0]
 8019508:	ed94 7a00 	vldr	s14, [r4]
 801950c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019510:	2e00      	cmp	r6, #0
 8019512:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019516:	ed84 0a01 	vstr	s0, [r4, #4]
 801951a:	da9c      	bge.n	8019456 <__ieee754_rem_pio2f+0x5a>
 801951c:	eeb1 7a47 	vneg.f32	s14, s14
 8019520:	eeb1 0a40 	vneg.f32	s0, s0
 8019524:	ed84 7a00 	vstr	s14, [r4]
 8019528:	ed84 0a01 	vstr	s0, [r4, #4]
 801952c:	4240      	negs	r0, r0
 801952e:	e792      	b.n	8019456 <__ieee754_rem_pio2f+0x5a>
 8019530:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019534:	15eb      	asrs	r3, r5, #23
 8019536:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801953a:	2d08      	cmp	r5, #8
 801953c:	dde3      	ble.n	8019506 <__ieee754_rem_pio2f+0x10a>
 801953e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019650 <__ieee754_rem_pio2f+0x254>
 8019542:	eef0 6a40 	vmov.f32	s13, s0
 8019546:	eee6 6a27 	vfma.f32	s13, s12, s15
 801954a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801954e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019552:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019654 <__ieee754_rem_pio2f+0x258>
 8019556:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801955a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801955e:	eef0 7a40 	vmov.f32	s15, s0
 8019562:	ee15 2a90 	vmov	r2, s11
 8019566:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801956a:	1a5b      	subs	r3, r3, r1
 801956c:	2b19      	cmp	r3, #25
 801956e:	dc04      	bgt.n	801957a <__ieee754_rem_pio2f+0x17e>
 8019570:	edc4 5a00 	vstr	s11, [r4]
 8019574:	eeb0 0a66 	vmov.f32	s0, s13
 8019578:	e7c6      	b.n	8019508 <__ieee754_rem_pio2f+0x10c>
 801957a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019664 <__ieee754_rem_pio2f+0x268>
 801957e:	eeb0 0a66 	vmov.f32	s0, s13
 8019582:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019586:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801958a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019668 <__ieee754_rem_pio2f+0x26c>
 801958e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019592:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019596:	ee30 7a67 	vsub.f32	s14, s0, s15
 801959a:	ed84 7a00 	vstr	s14, [r4]
 801959e:	e7b3      	b.n	8019508 <__ieee754_rem_pio2f+0x10c>
 80195a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80195a4:	db06      	blt.n	80195b4 <__ieee754_rem_pio2f+0x1b8>
 80195a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80195aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80195ae:	edc0 7a00 	vstr	s15, [r0]
 80195b2:	e733      	b.n	801941c <__ieee754_rem_pio2f+0x20>
 80195b4:	15ea      	asrs	r2, r5, #23
 80195b6:	3a86      	subs	r2, #134	; 0x86
 80195b8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80195bc:	ee07 3a90 	vmov	s15, r3
 80195c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195c4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801966c <__ieee754_rem_pio2f+0x270>
 80195c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195d0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80195d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195e4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80195e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80195f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f4:	edcd 7a05 	vstr	s15, [sp, #20]
 80195f8:	d11e      	bne.n	8019638 <__ieee754_rem_pio2f+0x23c>
 80195fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80195fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019602:	bf14      	ite	ne
 8019604:	2302      	movne	r3, #2
 8019606:	2301      	moveq	r3, #1
 8019608:	4919      	ldr	r1, [pc, #100]	; (8019670 <__ieee754_rem_pio2f+0x274>)
 801960a:	9101      	str	r1, [sp, #4]
 801960c:	2102      	movs	r1, #2
 801960e:	9100      	str	r1, [sp, #0]
 8019610:	a803      	add	r0, sp, #12
 8019612:	4621      	mov	r1, r4
 8019614:	f000 f892 	bl	801973c <__kernel_rem_pio2f>
 8019618:	2e00      	cmp	r6, #0
 801961a:	f6bf af1c 	bge.w	8019456 <__ieee754_rem_pio2f+0x5a>
 801961e:	edd4 7a00 	vldr	s15, [r4]
 8019622:	eef1 7a67 	vneg.f32	s15, s15
 8019626:	edc4 7a00 	vstr	s15, [r4]
 801962a:	edd4 7a01 	vldr	s15, [r4, #4]
 801962e:	eef1 7a67 	vneg.f32	s15, s15
 8019632:	edc4 7a01 	vstr	s15, [r4, #4]
 8019636:	e779      	b.n	801952c <__ieee754_rem_pio2f+0x130>
 8019638:	2303      	movs	r3, #3
 801963a:	e7e5      	b.n	8019608 <__ieee754_rem_pio2f+0x20c>
 801963c:	3f490fd8 	.word	0x3f490fd8
 8019640:	4016cbe3 	.word	0x4016cbe3
 8019644:	3fc90f80 	.word	0x3fc90f80
 8019648:	3fc90fd0 	.word	0x3fc90fd0
 801964c:	37354443 	.word	0x37354443
 8019650:	37354400 	.word	0x37354400
 8019654:	2e85a308 	.word	0x2e85a308
 8019658:	43490f80 	.word	0x43490f80
 801965c:	3f22f984 	.word	0x3f22f984
 8019660:	0801af88 	.word	0x0801af88
 8019664:	2e85a300 	.word	0x2e85a300
 8019668:	248d3132 	.word	0x248d3132
 801966c:	43800000 	.word	0x43800000
 8019670:	0801b008 	.word	0x0801b008

08019674 <__ieee754_sqrtf>:
 8019674:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019678:	4770      	bx	lr
	...

0801967c <__kernel_cosf>:
 801967c:	ee10 3a10 	vmov	r3, s0
 8019680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019684:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019688:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801968c:	da05      	bge.n	801969a <__kernel_cosf+0x1e>
 801968e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019692:	ee17 2a90 	vmov	r2, s15
 8019696:	2a00      	cmp	r2, #0
 8019698:	d03d      	beq.n	8019716 <__kernel_cosf+0x9a>
 801969a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801969e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801971c <__kernel_cosf+0xa0>
 80196a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019720 <__kernel_cosf+0xa4>
 80196a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019724 <__kernel_cosf+0xa8>
 80196aa:	4a1f      	ldr	r2, [pc, #124]	; (8019728 <__kernel_cosf+0xac>)
 80196ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80196b0:	4293      	cmp	r3, r2
 80196b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801972c <__kernel_cosf+0xb0>
 80196b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80196ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019730 <__kernel_cosf+0xb4>
 80196be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80196c2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019734 <__kernel_cosf+0xb8>
 80196c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80196ca:	eeb0 7a66 	vmov.f32	s14, s13
 80196ce:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80196d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80196d6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80196da:	ee67 6a25 	vmul.f32	s13, s14, s11
 80196de:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80196e2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80196e6:	dc04      	bgt.n	80196f2 <__kernel_cosf+0x76>
 80196e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80196ec:	ee36 0a47 	vsub.f32	s0, s12, s14
 80196f0:	4770      	bx	lr
 80196f2:	4a11      	ldr	r2, [pc, #68]	; (8019738 <__kernel_cosf+0xbc>)
 80196f4:	4293      	cmp	r3, r2
 80196f6:	bfda      	itte	le
 80196f8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80196fc:	ee06 3a90 	vmovle	s13, r3
 8019700:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019708:	ee36 0a66 	vsub.f32	s0, s12, s13
 801970c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019710:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019714:	4770      	bx	lr
 8019716:	eeb0 0a46 	vmov.f32	s0, s12
 801971a:	4770      	bx	lr
 801971c:	ad47d74e 	.word	0xad47d74e
 8019720:	310f74f6 	.word	0x310f74f6
 8019724:	3d2aaaab 	.word	0x3d2aaaab
 8019728:	3e999999 	.word	0x3e999999
 801972c:	b493f27c 	.word	0xb493f27c
 8019730:	37d00d01 	.word	0x37d00d01
 8019734:	bab60b61 	.word	0xbab60b61
 8019738:	3f480000 	.word	0x3f480000

0801973c <__kernel_rem_pio2f>:
 801973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019740:	ed2d 8b04 	vpush	{d8-d9}
 8019744:	b0d7      	sub	sp, #348	; 0x15c
 8019746:	4616      	mov	r6, r2
 8019748:	4698      	mov	r8, r3
 801974a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801974c:	4bbb      	ldr	r3, [pc, #748]	; (8019a3c <__kernel_rem_pio2f+0x300>)
 801974e:	9001      	str	r0, [sp, #4]
 8019750:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019754:	1d33      	adds	r3, r6, #4
 8019756:	460d      	mov	r5, r1
 8019758:	f108 39ff 	add.w	r9, r8, #4294967295
 801975c:	db29      	blt.n	80197b2 <__kernel_rem_pio2f+0x76>
 801975e:	1ef1      	subs	r1, r6, #3
 8019760:	bf48      	it	mi
 8019762:	1d31      	addmi	r1, r6, #4
 8019764:	10c9      	asrs	r1, r1, #3
 8019766:	1c4c      	adds	r4, r1, #1
 8019768:	00e3      	lsls	r3, r4, #3
 801976a:	9302      	str	r3, [sp, #8]
 801976c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801976e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8019a4c <__kernel_rem_pio2f+0x310>
 8019772:	eba1 0009 	sub.w	r0, r1, r9
 8019776:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801977a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801977e:	eb07 0c09 	add.w	ip, r7, r9
 8019782:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8019786:	2300      	movs	r3, #0
 8019788:	4563      	cmp	r3, ip
 801978a:	dd14      	ble.n	80197b6 <__kernel_rem_pio2f+0x7a>
 801978c:	ab1a      	add	r3, sp, #104	; 0x68
 801978e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019792:	46cc      	mov	ip, r9
 8019794:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019798:	f1c8 0b01 	rsb	fp, r8, #1
 801979c:	eb0b 020c 	add.w	r2, fp, ip
 80197a0:	4297      	cmp	r7, r2
 80197a2:	db27      	blt.n	80197f4 <__kernel_rem_pio2f+0xb8>
 80197a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80197a8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8019a4c <__kernel_rem_pio2f+0x310>
 80197ac:	4618      	mov	r0, r3
 80197ae:	2200      	movs	r2, #0
 80197b0:	e016      	b.n	80197e0 <__kernel_rem_pio2f+0xa4>
 80197b2:	2100      	movs	r1, #0
 80197b4:	e7d7      	b.n	8019766 <__kernel_rem_pio2f+0x2a>
 80197b6:	42d8      	cmn	r0, r3
 80197b8:	bf5d      	ittte	pl
 80197ba:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80197be:	ee07 2a90 	vmovpl	s15, r2
 80197c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80197c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80197ca:	ecea 7a01 	vstmia	sl!, {s15}
 80197ce:	3301      	adds	r3, #1
 80197d0:	e7da      	b.n	8019788 <__kernel_rem_pio2f+0x4c>
 80197d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80197d6:	ed90 7a00 	vldr	s14, [r0]
 80197da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80197de:	3201      	adds	r2, #1
 80197e0:	454a      	cmp	r2, r9
 80197e2:	f1a0 0004 	sub.w	r0, r0, #4
 80197e6:	ddf4      	ble.n	80197d2 <__kernel_rem_pio2f+0x96>
 80197e8:	ecea 7a01 	vstmia	sl!, {s15}
 80197ec:	3304      	adds	r3, #4
 80197ee:	f10c 0c01 	add.w	ip, ip, #1
 80197f2:	e7d3      	b.n	801979c <__kernel_rem_pio2f+0x60>
 80197f4:	ab06      	add	r3, sp, #24
 80197f6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80197fa:	9304      	str	r3, [sp, #16]
 80197fc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80197fe:	eddf 8a92 	vldr	s17, [pc, #584]	; 8019a48 <__kernel_rem_pio2f+0x30c>
 8019802:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8019a44 <__kernel_rem_pio2f+0x308>
 8019806:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801980a:	9303      	str	r3, [sp, #12]
 801980c:	46ba      	mov	sl, r7
 801980e:	ab56      	add	r3, sp, #344	; 0x158
 8019810:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019814:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019818:	ab06      	add	r3, sp, #24
 801981a:	4618      	mov	r0, r3
 801981c:	4652      	mov	r2, sl
 801981e:	2a00      	cmp	r2, #0
 8019820:	dc51      	bgt.n	80198c6 <__kernel_rem_pio2f+0x18a>
 8019822:	4620      	mov	r0, r4
 8019824:	9305      	str	r3, [sp, #20]
 8019826:	f000 fe0d 	bl	801a444 <scalbnf>
 801982a:	eeb0 8a40 	vmov.f32	s16, s0
 801982e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019832:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019836:	f000 fdbd 	bl	801a3b4 <floorf>
 801983a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801983e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019842:	2c00      	cmp	r4, #0
 8019844:	9b05      	ldr	r3, [sp, #20]
 8019846:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801984a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801984e:	edcd 7a00 	vstr	s15, [sp]
 8019852:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019856:	dd4b      	ble.n	80198f0 <__kernel_rem_pio2f+0x1b4>
 8019858:	f10a 3cff 	add.w	ip, sl, #4294967295
 801985c:	aa06      	add	r2, sp, #24
 801985e:	f1c4 0e08 	rsb	lr, r4, #8
 8019862:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019866:	ee17 1a90 	vmov	r1, s15
 801986a:	fa42 f00e 	asr.w	r0, r2, lr
 801986e:	4401      	add	r1, r0
 8019870:	9100      	str	r1, [sp, #0]
 8019872:	fa00 f00e 	lsl.w	r0, r0, lr
 8019876:	a906      	add	r1, sp, #24
 8019878:	1a12      	subs	r2, r2, r0
 801987a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801987e:	f1c4 0007 	rsb	r0, r4, #7
 8019882:	fa42 fb00 	asr.w	fp, r2, r0
 8019886:	f1bb 0f00 	cmp.w	fp, #0
 801988a:	dd43      	ble.n	8019914 <__kernel_rem_pio2f+0x1d8>
 801988c:	9a00      	ldr	r2, [sp, #0]
 801988e:	f04f 0e00 	mov.w	lr, #0
 8019892:	3201      	adds	r2, #1
 8019894:	9200      	str	r2, [sp, #0]
 8019896:	4670      	mov	r0, lr
 8019898:	45f2      	cmp	sl, lr
 801989a:	dc6c      	bgt.n	8019976 <__kernel_rem_pio2f+0x23a>
 801989c:	2c00      	cmp	r4, #0
 801989e:	dd04      	ble.n	80198aa <__kernel_rem_pio2f+0x16e>
 80198a0:	2c01      	cmp	r4, #1
 80198a2:	d079      	beq.n	8019998 <__kernel_rem_pio2f+0x25c>
 80198a4:	2c02      	cmp	r4, #2
 80198a6:	f000 8082 	beq.w	80199ae <__kernel_rem_pio2f+0x272>
 80198aa:	f1bb 0f02 	cmp.w	fp, #2
 80198ae:	d131      	bne.n	8019914 <__kernel_rem_pio2f+0x1d8>
 80198b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80198b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80198b8:	b360      	cbz	r0, 8019914 <__kernel_rem_pio2f+0x1d8>
 80198ba:	4620      	mov	r0, r4
 80198bc:	f000 fdc2 	bl	801a444 <scalbnf>
 80198c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80198c4:	e026      	b.n	8019914 <__kernel_rem_pio2f+0x1d8>
 80198c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80198ca:	3a01      	subs	r2, #1
 80198cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198d0:	a942      	add	r1, sp, #264	; 0x108
 80198d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198d6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80198da:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80198de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80198e2:	eca0 0a01 	vstmia	r0!, {s0}
 80198e6:	ed9c 0a00 	vldr	s0, [ip]
 80198ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 80198ee:	e796      	b.n	801981e <__kernel_rem_pio2f+0xe2>
 80198f0:	d107      	bne.n	8019902 <__kernel_rem_pio2f+0x1c6>
 80198f2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80198f6:	a906      	add	r1, sp, #24
 80198f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80198fc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8019900:	e7c1      	b.n	8019886 <__kernel_rem_pio2f+0x14a>
 8019902:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019906:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801990e:	da2f      	bge.n	8019970 <__kernel_rem_pio2f+0x234>
 8019910:	f04f 0b00 	mov.w	fp, #0
 8019914:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801991c:	f040 8098 	bne.w	8019a50 <__kernel_rem_pio2f+0x314>
 8019920:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019924:	469c      	mov	ip, r3
 8019926:	2200      	movs	r2, #0
 8019928:	45bc      	cmp	ip, r7
 801992a:	da48      	bge.n	80199be <__kernel_rem_pio2f+0x282>
 801992c:	2a00      	cmp	r2, #0
 801992e:	d05f      	beq.n	80199f0 <__kernel_rem_pio2f+0x2b4>
 8019930:	aa06      	add	r2, sp, #24
 8019932:	3c08      	subs	r4, #8
 8019934:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019938:	2900      	cmp	r1, #0
 801993a:	d07d      	beq.n	8019a38 <__kernel_rem_pio2f+0x2fc>
 801993c:	4620      	mov	r0, r4
 801993e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019942:	9301      	str	r3, [sp, #4]
 8019944:	f000 fd7e 	bl	801a444 <scalbnf>
 8019948:	9b01      	ldr	r3, [sp, #4]
 801994a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8019a48 <__kernel_rem_pio2f+0x30c>
 801994e:	4619      	mov	r1, r3
 8019950:	2900      	cmp	r1, #0
 8019952:	f280 80af 	bge.w	8019ab4 <__kernel_rem_pio2f+0x378>
 8019956:	4618      	mov	r0, r3
 8019958:	2400      	movs	r4, #0
 801995a:	2800      	cmp	r0, #0
 801995c:	f2c0 80d0 	blt.w	8019b00 <__kernel_rem_pio2f+0x3c4>
 8019960:	a942      	add	r1, sp, #264	; 0x108
 8019962:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8019966:	4a36      	ldr	r2, [pc, #216]	; (8019a40 <__kernel_rem_pio2f+0x304>)
 8019968:	eddf 7a38 	vldr	s15, [pc, #224]	; 8019a4c <__kernel_rem_pio2f+0x310>
 801996c:	2100      	movs	r1, #0
 801996e:	e0bb      	b.n	8019ae8 <__kernel_rem_pio2f+0x3ac>
 8019970:	f04f 0b02 	mov.w	fp, #2
 8019974:	e78a      	b.n	801988c <__kernel_rem_pio2f+0x150>
 8019976:	681a      	ldr	r2, [r3, #0]
 8019978:	b948      	cbnz	r0, 801998e <__kernel_rem_pio2f+0x252>
 801997a:	b11a      	cbz	r2, 8019984 <__kernel_rem_pio2f+0x248>
 801997c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019980:	601a      	str	r2, [r3, #0]
 8019982:	2201      	movs	r2, #1
 8019984:	f10e 0e01 	add.w	lr, lr, #1
 8019988:	3304      	adds	r3, #4
 801998a:	4610      	mov	r0, r2
 801998c:	e784      	b.n	8019898 <__kernel_rem_pio2f+0x15c>
 801998e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8019992:	601a      	str	r2, [r3, #0]
 8019994:	4602      	mov	r2, r0
 8019996:	e7f5      	b.n	8019984 <__kernel_rem_pio2f+0x248>
 8019998:	f10a 3cff 	add.w	ip, sl, #4294967295
 801999c:	ab06      	add	r3, sp, #24
 801999e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80199a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80199a6:	aa06      	add	r2, sp, #24
 80199a8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80199ac:	e77d      	b.n	80198aa <__kernel_rem_pio2f+0x16e>
 80199ae:	f10a 3cff 	add.w	ip, sl, #4294967295
 80199b2:	ab06      	add	r3, sp, #24
 80199b4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80199b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199bc:	e7f3      	b.n	80199a6 <__kernel_rem_pio2f+0x26a>
 80199be:	a906      	add	r1, sp, #24
 80199c0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80199c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80199c8:	4302      	orrs	r2, r0
 80199ca:	e7ad      	b.n	8019928 <__kernel_rem_pio2f+0x1ec>
 80199cc:	3001      	adds	r0, #1
 80199ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80199d2:	2a00      	cmp	r2, #0
 80199d4:	d0fa      	beq.n	80199cc <__kernel_rem_pio2f+0x290>
 80199d6:	a91a      	add	r1, sp, #104	; 0x68
 80199d8:	eb0a 0208 	add.w	r2, sl, r8
 80199dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80199e0:	f10a 0301 	add.w	r3, sl, #1
 80199e4:	eb0a 0100 	add.w	r1, sl, r0
 80199e8:	4299      	cmp	r1, r3
 80199ea:	da04      	bge.n	80199f6 <__kernel_rem_pio2f+0x2ba>
 80199ec:	468a      	mov	sl, r1
 80199ee:	e70e      	b.n	801980e <__kernel_rem_pio2f+0xd2>
 80199f0:	9b04      	ldr	r3, [sp, #16]
 80199f2:	2001      	movs	r0, #1
 80199f4:	e7eb      	b.n	80199ce <__kernel_rem_pio2f+0x292>
 80199f6:	9803      	ldr	r0, [sp, #12]
 80199f8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80199fc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019a00:	9000      	str	r0, [sp, #0]
 8019a02:	ee07 0a90 	vmov	s15, r0
 8019a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a0a:	2000      	movs	r0, #0
 8019a0c:	ece2 7a01 	vstmia	r2!, {s15}
 8019a10:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019a4c <__kernel_rem_pio2f+0x310>
 8019a14:	4696      	mov	lr, r2
 8019a16:	4548      	cmp	r0, r9
 8019a18:	dd06      	ble.n	8019a28 <__kernel_rem_pio2f+0x2ec>
 8019a1a:	a842      	add	r0, sp, #264	; 0x108
 8019a1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019a20:	edc0 7a00 	vstr	s15, [r0]
 8019a24:	3301      	adds	r3, #1
 8019a26:	e7df      	b.n	80199e8 <__kernel_rem_pio2f+0x2ac>
 8019a28:	ecfc 6a01 	vldmia	ip!, {s13}
 8019a2c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8019a30:	3001      	adds	r0, #1
 8019a32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a36:	e7ee      	b.n	8019a16 <__kernel_rem_pio2f+0x2da>
 8019a38:	3b01      	subs	r3, #1
 8019a3a:	e779      	b.n	8019930 <__kernel_rem_pio2f+0x1f4>
 8019a3c:	0801b34c 	.word	0x0801b34c
 8019a40:	0801b320 	.word	0x0801b320
 8019a44:	43800000 	.word	0x43800000
 8019a48:	3b800000 	.word	0x3b800000
 8019a4c:	00000000 	.word	0x00000000
 8019a50:	9b02      	ldr	r3, [sp, #8]
 8019a52:	eeb0 0a48 	vmov.f32	s0, s16
 8019a56:	1b98      	subs	r0, r3, r6
 8019a58:	f000 fcf4 	bl	801a444 <scalbnf>
 8019a5c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019a44 <__kernel_rem_pio2f+0x308>
 8019a60:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a68:	db1b      	blt.n	8019aa2 <__kernel_rem_pio2f+0x366>
 8019a6a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019a48 <__kernel_rem_pio2f+0x30c>
 8019a6e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019a72:	aa06      	add	r2, sp, #24
 8019a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a78:	a906      	add	r1, sp, #24
 8019a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a7e:	3408      	adds	r4, #8
 8019a80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019a8c:	ee10 3a10 	vmov	r3, s0
 8019a90:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019a94:	ee17 2a90 	vmov	r2, s15
 8019a98:	f10a 0301 	add.w	r3, sl, #1
 8019a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019aa0:	e74c      	b.n	801993c <__kernel_rem_pio2f+0x200>
 8019aa2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019aa6:	aa06      	add	r2, sp, #24
 8019aa8:	ee10 3a10 	vmov	r3, s0
 8019aac:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8019ab0:	4653      	mov	r3, sl
 8019ab2:	e743      	b.n	801993c <__kernel_rem_pio2f+0x200>
 8019ab4:	aa42      	add	r2, sp, #264	; 0x108
 8019ab6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019aba:	aa06      	add	r2, sp, #24
 8019abc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8019ac0:	9201      	str	r2, [sp, #4]
 8019ac2:	ee07 2a90 	vmov	s15, r2
 8019ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019aca:	3901      	subs	r1, #1
 8019acc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019ad0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019ad4:	edc0 7a00 	vstr	s15, [r0]
 8019ad8:	e73a      	b.n	8019950 <__kernel_rem_pio2f+0x214>
 8019ada:	ecf2 6a01 	vldmia	r2!, {s13}
 8019ade:	ecb6 7a01 	vldmia	r6!, {s14}
 8019ae2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019ae6:	3101      	adds	r1, #1
 8019ae8:	42b9      	cmp	r1, r7
 8019aea:	dc01      	bgt.n	8019af0 <__kernel_rem_pio2f+0x3b4>
 8019aec:	428c      	cmp	r4, r1
 8019aee:	daf4      	bge.n	8019ada <__kernel_rem_pio2f+0x39e>
 8019af0:	aa56      	add	r2, sp, #344	; 0x158
 8019af2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8019af6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8019afa:	3801      	subs	r0, #1
 8019afc:	3401      	adds	r4, #1
 8019afe:	e72c      	b.n	801995a <__kernel_rem_pio2f+0x21e>
 8019b00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019b02:	2a02      	cmp	r2, #2
 8019b04:	dc0a      	bgt.n	8019b1c <__kernel_rem_pio2f+0x3e0>
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	dc61      	bgt.n	8019bce <__kernel_rem_pio2f+0x492>
 8019b0a:	d03c      	beq.n	8019b86 <__kernel_rem_pio2f+0x44a>
 8019b0c:	9b00      	ldr	r3, [sp, #0]
 8019b0e:	f003 0007 	and.w	r0, r3, #7
 8019b12:	b057      	add	sp, #348	; 0x15c
 8019b14:	ecbd 8b04 	vpop	{d8-d9}
 8019b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b1c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019b1e:	2a03      	cmp	r2, #3
 8019b20:	d1f4      	bne.n	8019b0c <__kernel_rem_pio2f+0x3d0>
 8019b22:	aa2e      	add	r2, sp, #184	; 0xb8
 8019b24:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019b28:	4608      	mov	r0, r1
 8019b2a:	461c      	mov	r4, r3
 8019b2c:	2c00      	cmp	r4, #0
 8019b2e:	f1a0 0004 	sub.w	r0, r0, #4
 8019b32:	dc59      	bgt.n	8019be8 <__kernel_rem_pio2f+0x4ac>
 8019b34:	4618      	mov	r0, r3
 8019b36:	2801      	cmp	r0, #1
 8019b38:	f1a1 0104 	sub.w	r1, r1, #4
 8019b3c:	dc64      	bgt.n	8019c08 <__kernel_rem_pio2f+0x4cc>
 8019b3e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8019a4c <__kernel_rem_pio2f+0x310>
 8019b42:	2b01      	cmp	r3, #1
 8019b44:	dc70      	bgt.n	8019c28 <__kernel_rem_pio2f+0x4ec>
 8019b46:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8019b4a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8019b4e:	f1bb 0f00 	cmp.w	fp, #0
 8019b52:	d172      	bne.n	8019c3a <__kernel_rem_pio2f+0x4fe>
 8019b54:	edc5 6a00 	vstr	s13, [r5]
 8019b58:	ed85 7a01 	vstr	s14, [r5, #4]
 8019b5c:	edc5 7a02 	vstr	s15, [r5, #8]
 8019b60:	e7d4      	b.n	8019b0c <__kernel_rem_pio2f+0x3d0>
 8019b62:	aa2e      	add	r2, sp, #184	; 0xb8
 8019b64:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019b68:	ed91 7a00 	vldr	s14, [r1]
 8019b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b70:	3b01      	subs	r3, #1
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	daf5      	bge.n	8019b62 <__kernel_rem_pio2f+0x426>
 8019b76:	f1bb 0f00 	cmp.w	fp, #0
 8019b7a:	d001      	beq.n	8019b80 <__kernel_rem_pio2f+0x444>
 8019b7c:	eef1 7a67 	vneg.f32	s15, s15
 8019b80:	edc5 7a00 	vstr	s15, [r5]
 8019b84:	e7c2      	b.n	8019b0c <__kernel_rem_pio2f+0x3d0>
 8019b86:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8019a4c <__kernel_rem_pio2f+0x310>
 8019b8a:	e7f2      	b.n	8019b72 <__kernel_rem_pio2f+0x436>
 8019b8c:	aa2e      	add	r2, sp, #184	; 0xb8
 8019b8e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8019b92:	edd0 7a00 	vldr	s15, [r0]
 8019b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019b9a:	3901      	subs	r1, #1
 8019b9c:	2900      	cmp	r1, #0
 8019b9e:	daf5      	bge.n	8019b8c <__kernel_rem_pio2f+0x450>
 8019ba0:	f1bb 0f00 	cmp.w	fp, #0
 8019ba4:	d017      	beq.n	8019bd6 <__kernel_rem_pio2f+0x49a>
 8019ba6:	eef1 7a47 	vneg.f32	s15, s14
 8019baa:	edc5 7a00 	vstr	s15, [r5]
 8019bae:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8019bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bb6:	a82f      	add	r0, sp, #188	; 0xbc
 8019bb8:	2101      	movs	r1, #1
 8019bba:	428b      	cmp	r3, r1
 8019bbc:	da0e      	bge.n	8019bdc <__kernel_rem_pio2f+0x4a0>
 8019bbe:	f1bb 0f00 	cmp.w	fp, #0
 8019bc2:	d001      	beq.n	8019bc8 <__kernel_rem_pio2f+0x48c>
 8019bc4:	eef1 7a67 	vneg.f32	s15, s15
 8019bc8:	edc5 7a01 	vstr	s15, [r5, #4]
 8019bcc:	e79e      	b.n	8019b0c <__kernel_rem_pio2f+0x3d0>
 8019bce:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8019a4c <__kernel_rem_pio2f+0x310>
 8019bd2:	4619      	mov	r1, r3
 8019bd4:	e7e2      	b.n	8019b9c <__kernel_rem_pio2f+0x460>
 8019bd6:	eef0 7a47 	vmov.f32	s15, s14
 8019bda:	e7e6      	b.n	8019baa <__kernel_rem_pio2f+0x46e>
 8019bdc:	ecb0 7a01 	vldmia	r0!, {s14}
 8019be0:	3101      	adds	r1, #1
 8019be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019be6:	e7e8      	b.n	8019bba <__kernel_rem_pio2f+0x47e>
 8019be8:	edd0 7a00 	vldr	s15, [r0]
 8019bec:	edd0 6a01 	vldr	s13, [r0, #4]
 8019bf0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019bf4:	3c01      	subs	r4, #1
 8019bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bfa:	ed80 7a00 	vstr	s14, [r0]
 8019bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c02:	edc0 7a01 	vstr	s15, [r0, #4]
 8019c06:	e791      	b.n	8019b2c <__kernel_rem_pio2f+0x3f0>
 8019c08:	edd1 7a00 	vldr	s15, [r1]
 8019c0c:	edd1 6a01 	vldr	s13, [r1, #4]
 8019c10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019c14:	3801      	subs	r0, #1
 8019c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c1a:	ed81 7a00 	vstr	s14, [r1]
 8019c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c22:	edc1 7a01 	vstr	s15, [r1, #4]
 8019c26:	e786      	b.n	8019b36 <__kernel_rem_pio2f+0x3fa>
 8019c28:	aa2e      	add	r2, sp, #184	; 0xb8
 8019c2a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8019c2e:	ed91 7a00 	vldr	s14, [r1]
 8019c32:	3b01      	subs	r3, #1
 8019c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c38:	e783      	b.n	8019b42 <__kernel_rem_pio2f+0x406>
 8019c3a:	eef1 6a66 	vneg.f32	s13, s13
 8019c3e:	eeb1 7a47 	vneg.f32	s14, s14
 8019c42:	edc5 6a00 	vstr	s13, [r5]
 8019c46:	ed85 7a01 	vstr	s14, [r5, #4]
 8019c4a:	eef1 7a67 	vneg.f32	s15, s15
 8019c4e:	e785      	b.n	8019b5c <__kernel_rem_pio2f+0x420>

08019c50 <__kernel_sinf>:
 8019c50:	ee10 3a10 	vmov	r3, s0
 8019c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019c58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019c5c:	da04      	bge.n	8019c68 <__kernel_sinf+0x18>
 8019c5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019c62:	ee17 3a90 	vmov	r3, s15
 8019c66:	b35b      	cbz	r3, 8019cc0 <__kernel_sinf+0x70>
 8019c68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019c6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019cc4 <__kernel_sinf+0x74>
 8019c70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019cc8 <__kernel_sinf+0x78>
 8019c74:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019c78:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019ccc <__kernel_sinf+0x7c>
 8019c7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019c80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019cd0 <__kernel_sinf+0x80>
 8019c84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019c88:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019cd4 <__kernel_sinf+0x84>
 8019c8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019c90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019c94:	b930      	cbnz	r0, 8019ca4 <__kernel_sinf+0x54>
 8019c96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019cd8 <__kernel_sinf+0x88>
 8019c9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019c9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019ca2:	4770      	bx	lr
 8019ca4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019ca8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019cac:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019cb0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019cb4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019cdc <__kernel_sinf+0x8c>
 8019cb8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019cbc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019cc0:	4770      	bx	lr
 8019cc2:	bf00      	nop
 8019cc4:	2f2ec9d3 	.word	0x2f2ec9d3
 8019cc8:	b2d72f34 	.word	0xb2d72f34
 8019ccc:	3638ef1b 	.word	0x3638ef1b
 8019cd0:	b9500d01 	.word	0xb9500d01
 8019cd4:	3c088889 	.word	0x3c088889
 8019cd8:	be2aaaab 	.word	0xbe2aaaab
 8019cdc:	3e2aaaab 	.word	0x3e2aaaab

08019ce0 <__kernel_tanf>:
 8019ce0:	b508      	push	{r3, lr}
 8019ce2:	ee10 3a10 	vmov	r3, s0
 8019ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019cea:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019cee:	eef0 7a40 	vmov.f32	s15, s0
 8019cf2:	da17      	bge.n	8019d24 <__kernel_tanf+0x44>
 8019cf4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019cf8:	ee17 1a10 	vmov	r1, s14
 8019cfc:	bb41      	cbnz	r1, 8019d50 <__kernel_tanf+0x70>
 8019cfe:	1c43      	adds	r3, r0, #1
 8019d00:	4313      	orrs	r3, r2
 8019d02:	d108      	bne.n	8019d16 <__kernel_tanf+0x36>
 8019d04:	f000 fb4e 	bl	801a3a4 <fabsf>
 8019d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d10:	eeb0 0a67 	vmov.f32	s0, s15
 8019d14:	bd08      	pop	{r3, pc}
 8019d16:	2801      	cmp	r0, #1
 8019d18:	d0fa      	beq.n	8019d10 <__kernel_tanf+0x30>
 8019d1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019d1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d22:	e7f5      	b.n	8019d10 <__kernel_tanf+0x30>
 8019d24:	494d      	ldr	r1, [pc, #308]	; (8019e5c <__kernel_tanf+0x17c>)
 8019d26:	428a      	cmp	r2, r1
 8019d28:	db12      	blt.n	8019d50 <__kernel_tanf+0x70>
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	bfb8      	it	lt
 8019d2e:	eef1 7a40 	vneglt.f32	s15, s0
 8019d32:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8019e60 <__kernel_tanf+0x180>
 8019d36:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019d3a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8019e64 <__kernel_tanf+0x184>
 8019d3e:	bfb8      	it	lt
 8019d40:	eef1 0a60 	vneglt.f32	s1, s1
 8019d44:	ee70 0a60 	vsub.f32	s1, s0, s1
 8019d48:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8019d4c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019e68 <__kernel_tanf+0x188>
 8019d50:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019e6c <__kernel_tanf+0x18c>
 8019d54:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8019e70 <__kernel_tanf+0x190>
 8019d58:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8019e74 <__kernel_tanf+0x194>
 8019d5c:	493f      	ldr	r1, [pc, #252]	; (8019e5c <__kernel_tanf+0x17c>)
 8019d5e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019d62:	428a      	cmp	r2, r1
 8019d64:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019d68:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019d6c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019e78 <__kernel_tanf+0x198>
 8019d70:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019d74:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8019e7c <__kernel_tanf+0x19c>
 8019d78:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019d7c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8019e80 <__kernel_tanf+0x1a0>
 8019d80:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019d84:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8019e84 <__kernel_tanf+0x1a4>
 8019d88:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019d8c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8019e88 <__kernel_tanf+0x1a8>
 8019d90:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019d94:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019e8c <__kernel_tanf+0x1ac>
 8019d98:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019d9c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8019e90 <__kernel_tanf+0x1b0>
 8019da0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019da4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8019e94 <__kernel_tanf+0x1b4>
 8019da8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019dac:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019e98 <__kernel_tanf+0x1b8>
 8019db0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019db4:	eeb0 7a65 	vmov.f32	s14, s11
 8019db8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019dbc:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8019dc0:	eeb0 7a46 	vmov.f32	s14, s12
 8019dc4:	eeb0 6a60 	vmov.f32	s12, s1
 8019dc8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019dcc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019e9c <__kernel_tanf+0x1bc>
 8019dd0:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019dd4:	eee5 0a87 	vfma.f32	s1, s11, s14
 8019dd8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019ddc:	db1d      	blt.n	8019e1a <__kernel_tanf+0x13a>
 8019dde:	ee06 0a90 	vmov	s13, r0
 8019de2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8019de6:	ee27 6a07 	vmul.f32	s12, s14, s14
 8019dea:	ee37 7a00 	vadd.f32	s14, s14, s0
 8019dee:	179b      	asrs	r3, r3, #30
 8019df0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8019df4:	f003 0302 	and.w	r3, r3, #2
 8019df8:	f1c3 0301 	rsb	r3, r3, #1
 8019dfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8019e00:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8019e04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019e08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019e0c:	ee07 3a90 	vmov	s15, r3
 8019e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e14:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019e18:	e77a      	b.n	8019d10 <__kernel_tanf+0x30>
 8019e1a:	2801      	cmp	r0, #1
 8019e1c:	d01b      	beq.n	8019e56 <__kernel_tanf+0x176>
 8019e1e:	4b20      	ldr	r3, [pc, #128]	; (8019ea0 <__kernel_tanf+0x1c0>)
 8019e20:	ee17 2a10 	vmov	r2, s14
 8019e24:	401a      	ands	r2, r3
 8019e26:	ee06 2a10 	vmov	s12, r2
 8019e2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8019e2e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019e32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019e36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8019e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e3e:	ee16 2a90 	vmov	r2, s13
 8019e42:	4013      	ands	r3, r2
 8019e44:	ee07 3a90 	vmov	s15, r3
 8019e48:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019e4c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019e50:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019e54:	e75c      	b.n	8019d10 <__kernel_tanf+0x30>
 8019e56:	eef0 7a47 	vmov.f32	s15, s14
 8019e5a:	e759      	b.n	8019d10 <__kernel_tanf+0x30>
 8019e5c:	3f2ca140 	.word	0x3f2ca140
 8019e60:	3f490fda 	.word	0x3f490fda
 8019e64:	33222168 	.word	0x33222168
 8019e68:	00000000 	.word	0x00000000
 8019e6c:	b79bae5f 	.word	0xb79bae5f
 8019e70:	38a3f445 	.word	0x38a3f445
 8019e74:	37d95384 	.word	0x37d95384
 8019e78:	3a1a26c8 	.word	0x3a1a26c8
 8019e7c:	3b6b6916 	.word	0x3b6b6916
 8019e80:	3cb327a4 	.word	0x3cb327a4
 8019e84:	3e088889 	.word	0x3e088889
 8019e88:	3895c07a 	.word	0x3895c07a
 8019e8c:	398137b9 	.word	0x398137b9
 8019e90:	3abede48 	.word	0x3abede48
 8019e94:	3c11371f 	.word	0x3c11371f
 8019e98:	3d5d0dd1 	.word	0x3d5d0dd1
 8019e9c:	3eaaaaab 	.word	0x3eaaaaab
 8019ea0:	fffff000 	.word	0xfffff000
 8019ea4:	00000000 	.word	0x00000000

08019ea8 <atan>:
 8019ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eac:	ec55 4b10 	vmov	r4, r5, d0
 8019eb0:	4bc3      	ldr	r3, [pc, #780]	; (801a1c0 <atan+0x318>)
 8019eb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019eb6:	429e      	cmp	r6, r3
 8019eb8:	46ab      	mov	fp, r5
 8019eba:	dd18      	ble.n	8019eee <atan+0x46>
 8019ebc:	4bc1      	ldr	r3, [pc, #772]	; (801a1c4 <atan+0x31c>)
 8019ebe:	429e      	cmp	r6, r3
 8019ec0:	dc01      	bgt.n	8019ec6 <atan+0x1e>
 8019ec2:	d109      	bne.n	8019ed8 <atan+0x30>
 8019ec4:	b144      	cbz	r4, 8019ed8 <atan+0x30>
 8019ec6:	4622      	mov	r2, r4
 8019ec8:	462b      	mov	r3, r5
 8019eca:	4620      	mov	r0, r4
 8019ecc:	4629      	mov	r1, r5
 8019ece:	f7e6 f9dd 	bl	800028c <__adddf3>
 8019ed2:	4604      	mov	r4, r0
 8019ed4:	460d      	mov	r5, r1
 8019ed6:	e006      	b.n	8019ee6 <atan+0x3e>
 8019ed8:	f1bb 0f00 	cmp.w	fp, #0
 8019edc:	f300 8131 	bgt.w	801a142 <atan+0x29a>
 8019ee0:	a59b      	add	r5, pc, #620	; (adr r5, 801a150 <atan+0x2a8>)
 8019ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019ee6:	ec45 4b10 	vmov	d0, r4, r5
 8019eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eee:	4bb6      	ldr	r3, [pc, #728]	; (801a1c8 <atan+0x320>)
 8019ef0:	429e      	cmp	r6, r3
 8019ef2:	dc14      	bgt.n	8019f1e <atan+0x76>
 8019ef4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019ef8:	429e      	cmp	r6, r3
 8019efa:	dc0d      	bgt.n	8019f18 <atan+0x70>
 8019efc:	a396      	add	r3, pc, #600	; (adr r3, 801a158 <atan+0x2b0>)
 8019efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f02:	ee10 0a10 	vmov	r0, s0
 8019f06:	4629      	mov	r1, r5
 8019f08:	f7e6 f9c0 	bl	800028c <__adddf3>
 8019f0c:	4baf      	ldr	r3, [pc, #700]	; (801a1cc <atan+0x324>)
 8019f0e:	2200      	movs	r2, #0
 8019f10:	f7e6 fe02 	bl	8000b18 <__aeabi_dcmpgt>
 8019f14:	2800      	cmp	r0, #0
 8019f16:	d1e6      	bne.n	8019ee6 <atan+0x3e>
 8019f18:	f04f 3aff 	mov.w	sl, #4294967295
 8019f1c:	e02b      	b.n	8019f76 <atan+0xce>
 8019f1e:	f000 f963 	bl	801a1e8 <fabs>
 8019f22:	4bab      	ldr	r3, [pc, #684]	; (801a1d0 <atan+0x328>)
 8019f24:	429e      	cmp	r6, r3
 8019f26:	ec55 4b10 	vmov	r4, r5, d0
 8019f2a:	f300 80bf 	bgt.w	801a0ac <atan+0x204>
 8019f2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019f32:	429e      	cmp	r6, r3
 8019f34:	f300 80a0 	bgt.w	801a078 <atan+0x1d0>
 8019f38:	ee10 2a10 	vmov	r2, s0
 8019f3c:	ee10 0a10 	vmov	r0, s0
 8019f40:	462b      	mov	r3, r5
 8019f42:	4629      	mov	r1, r5
 8019f44:	f7e6 f9a2 	bl	800028c <__adddf3>
 8019f48:	4ba0      	ldr	r3, [pc, #640]	; (801a1cc <atan+0x324>)
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	f7e6 f99c 	bl	8000288 <__aeabi_dsub>
 8019f50:	2200      	movs	r2, #0
 8019f52:	4606      	mov	r6, r0
 8019f54:	460f      	mov	r7, r1
 8019f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	4629      	mov	r1, r5
 8019f5e:	f7e6 f995 	bl	800028c <__adddf3>
 8019f62:	4602      	mov	r2, r0
 8019f64:	460b      	mov	r3, r1
 8019f66:	4630      	mov	r0, r6
 8019f68:	4639      	mov	r1, r7
 8019f6a:	f7e6 fc6f 	bl	800084c <__aeabi_ddiv>
 8019f6e:	f04f 0a00 	mov.w	sl, #0
 8019f72:	4604      	mov	r4, r0
 8019f74:	460d      	mov	r5, r1
 8019f76:	4622      	mov	r2, r4
 8019f78:	462b      	mov	r3, r5
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	4629      	mov	r1, r5
 8019f7e:	f7e6 fb3b 	bl	80005f8 <__aeabi_dmul>
 8019f82:	4602      	mov	r2, r0
 8019f84:	460b      	mov	r3, r1
 8019f86:	4680      	mov	r8, r0
 8019f88:	4689      	mov	r9, r1
 8019f8a:	f7e6 fb35 	bl	80005f8 <__aeabi_dmul>
 8019f8e:	a374      	add	r3, pc, #464	; (adr r3, 801a160 <atan+0x2b8>)
 8019f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f94:	4606      	mov	r6, r0
 8019f96:	460f      	mov	r7, r1
 8019f98:	f7e6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8019f9c:	a372      	add	r3, pc, #456	; (adr r3, 801a168 <atan+0x2c0>)
 8019f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa2:	f7e6 f973 	bl	800028c <__adddf3>
 8019fa6:	4632      	mov	r2, r6
 8019fa8:	463b      	mov	r3, r7
 8019faa:	f7e6 fb25 	bl	80005f8 <__aeabi_dmul>
 8019fae:	a370      	add	r3, pc, #448	; (adr r3, 801a170 <atan+0x2c8>)
 8019fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb4:	f7e6 f96a 	bl	800028c <__adddf3>
 8019fb8:	4632      	mov	r2, r6
 8019fba:	463b      	mov	r3, r7
 8019fbc:	f7e6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8019fc0:	a36d      	add	r3, pc, #436	; (adr r3, 801a178 <atan+0x2d0>)
 8019fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc6:	f7e6 f961 	bl	800028c <__adddf3>
 8019fca:	4632      	mov	r2, r6
 8019fcc:	463b      	mov	r3, r7
 8019fce:	f7e6 fb13 	bl	80005f8 <__aeabi_dmul>
 8019fd2:	a36b      	add	r3, pc, #428	; (adr r3, 801a180 <atan+0x2d8>)
 8019fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd8:	f7e6 f958 	bl	800028c <__adddf3>
 8019fdc:	4632      	mov	r2, r6
 8019fde:	463b      	mov	r3, r7
 8019fe0:	f7e6 fb0a 	bl	80005f8 <__aeabi_dmul>
 8019fe4:	a368      	add	r3, pc, #416	; (adr r3, 801a188 <atan+0x2e0>)
 8019fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fea:	f7e6 f94f 	bl	800028c <__adddf3>
 8019fee:	4642      	mov	r2, r8
 8019ff0:	464b      	mov	r3, r9
 8019ff2:	f7e6 fb01 	bl	80005f8 <__aeabi_dmul>
 8019ff6:	a366      	add	r3, pc, #408	; (adr r3, 801a190 <atan+0x2e8>)
 8019ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffc:	4680      	mov	r8, r0
 8019ffe:	4689      	mov	r9, r1
 801a000:	4630      	mov	r0, r6
 801a002:	4639      	mov	r1, r7
 801a004:	f7e6 faf8 	bl	80005f8 <__aeabi_dmul>
 801a008:	a363      	add	r3, pc, #396	; (adr r3, 801a198 <atan+0x2f0>)
 801a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00e:	f7e6 f93b 	bl	8000288 <__aeabi_dsub>
 801a012:	4632      	mov	r2, r6
 801a014:	463b      	mov	r3, r7
 801a016:	f7e6 faef 	bl	80005f8 <__aeabi_dmul>
 801a01a:	a361      	add	r3, pc, #388	; (adr r3, 801a1a0 <atan+0x2f8>)
 801a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a020:	f7e6 f932 	bl	8000288 <__aeabi_dsub>
 801a024:	4632      	mov	r2, r6
 801a026:	463b      	mov	r3, r7
 801a028:	f7e6 fae6 	bl	80005f8 <__aeabi_dmul>
 801a02c:	a35e      	add	r3, pc, #376	; (adr r3, 801a1a8 <atan+0x300>)
 801a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a032:	f7e6 f929 	bl	8000288 <__aeabi_dsub>
 801a036:	4632      	mov	r2, r6
 801a038:	463b      	mov	r3, r7
 801a03a:	f7e6 fadd 	bl	80005f8 <__aeabi_dmul>
 801a03e:	a35c      	add	r3, pc, #368	; (adr r3, 801a1b0 <atan+0x308>)
 801a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a044:	f7e6 f920 	bl	8000288 <__aeabi_dsub>
 801a048:	4632      	mov	r2, r6
 801a04a:	463b      	mov	r3, r7
 801a04c:	f7e6 fad4 	bl	80005f8 <__aeabi_dmul>
 801a050:	4602      	mov	r2, r0
 801a052:	460b      	mov	r3, r1
 801a054:	4640      	mov	r0, r8
 801a056:	4649      	mov	r1, r9
 801a058:	f7e6 f918 	bl	800028c <__adddf3>
 801a05c:	4622      	mov	r2, r4
 801a05e:	462b      	mov	r3, r5
 801a060:	f7e6 faca 	bl	80005f8 <__aeabi_dmul>
 801a064:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a068:	4602      	mov	r2, r0
 801a06a:	460b      	mov	r3, r1
 801a06c:	d14b      	bne.n	801a106 <atan+0x25e>
 801a06e:	4620      	mov	r0, r4
 801a070:	4629      	mov	r1, r5
 801a072:	f7e6 f909 	bl	8000288 <__aeabi_dsub>
 801a076:	e72c      	b.n	8019ed2 <atan+0x2a>
 801a078:	ee10 0a10 	vmov	r0, s0
 801a07c:	4b53      	ldr	r3, [pc, #332]	; (801a1cc <atan+0x324>)
 801a07e:	2200      	movs	r2, #0
 801a080:	4629      	mov	r1, r5
 801a082:	f7e6 f901 	bl	8000288 <__aeabi_dsub>
 801a086:	4b51      	ldr	r3, [pc, #324]	; (801a1cc <atan+0x324>)
 801a088:	4606      	mov	r6, r0
 801a08a:	460f      	mov	r7, r1
 801a08c:	2200      	movs	r2, #0
 801a08e:	4620      	mov	r0, r4
 801a090:	4629      	mov	r1, r5
 801a092:	f7e6 f8fb 	bl	800028c <__adddf3>
 801a096:	4602      	mov	r2, r0
 801a098:	460b      	mov	r3, r1
 801a09a:	4630      	mov	r0, r6
 801a09c:	4639      	mov	r1, r7
 801a09e:	f7e6 fbd5 	bl	800084c <__aeabi_ddiv>
 801a0a2:	f04f 0a01 	mov.w	sl, #1
 801a0a6:	4604      	mov	r4, r0
 801a0a8:	460d      	mov	r5, r1
 801a0aa:	e764      	b.n	8019f76 <atan+0xce>
 801a0ac:	4b49      	ldr	r3, [pc, #292]	; (801a1d4 <atan+0x32c>)
 801a0ae:	429e      	cmp	r6, r3
 801a0b0:	da1d      	bge.n	801a0ee <atan+0x246>
 801a0b2:	ee10 0a10 	vmov	r0, s0
 801a0b6:	4b48      	ldr	r3, [pc, #288]	; (801a1d8 <atan+0x330>)
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	4629      	mov	r1, r5
 801a0bc:	f7e6 f8e4 	bl	8000288 <__aeabi_dsub>
 801a0c0:	4b45      	ldr	r3, [pc, #276]	; (801a1d8 <atan+0x330>)
 801a0c2:	4606      	mov	r6, r0
 801a0c4:	460f      	mov	r7, r1
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	4629      	mov	r1, r5
 801a0cc:	f7e6 fa94 	bl	80005f8 <__aeabi_dmul>
 801a0d0:	4b3e      	ldr	r3, [pc, #248]	; (801a1cc <atan+0x324>)
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	f7e6 f8da 	bl	800028c <__adddf3>
 801a0d8:	4602      	mov	r2, r0
 801a0da:	460b      	mov	r3, r1
 801a0dc:	4630      	mov	r0, r6
 801a0de:	4639      	mov	r1, r7
 801a0e0:	f7e6 fbb4 	bl	800084c <__aeabi_ddiv>
 801a0e4:	f04f 0a02 	mov.w	sl, #2
 801a0e8:	4604      	mov	r4, r0
 801a0ea:	460d      	mov	r5, r1
 801a0ec:	e743      	b.n	8019f76 <atan+0xce>
 801a0ee:	462b      	mov	r3, r5
 801a0f0:	ee10 2a10 	vmov	r2, s0
 801a0f4:	4939      	ldr	r1, [pc, #228]	; (801a1dc <atan+0x334>)
 801a0f6:	2000      	movs	r0, #0
 801a0f8:	f7e6 fba8 	bl	800084c <__aeabi_ddiv>
 801a0fc:	f04f 0a03 	mov.w	sl, #3
 801a100:	4604      	mov	r4, r0
 801a102:	460d      	mov	r5, r1
 801a104:	e737      	b.n	8019f76 <atan+0xce>
 801a106:	4b36      	ldr	r3, [pc, #216]	; (801a1e0 <atan+0x338>)
 801a108:	4e36      	ldr	r6, [pc, #216]	; (801a1e4 <atan+0x33c>)
 801a10a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a10e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a112:	e9da 2300 	ldrd	r2, r3, [sl]
 801a116:	f7e6 f8b7 	bl	8000288 <__aeabi_dsub>
 801a11a:	4622      	mov	r2, r4
 801a11c:	462b      	mov	r3, r5
 801a11e:	f7e6 f8b3 	bl	8000288 <__aeabi_dsub>
 801a122:	4602      	mov	r2, r0
 801a124:	460b      	mov	r3, r1
 801a126:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a12a:	f7e6 f8ad 	bl	8000288 <__aeabi_dsub>
 801a12e:	f1bb 0f00 	cmp.w	fp, #0
 801a132:	4604      	mov	r4, r0
 801a134:	460d      	mov	r5, r1
 801a136:	f6bf aed6 	bge.w	8019ee6 <atan+0x3e>
 801a13a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a13e:	461d      	mov	r5, r3
 801a140:	e6d1      	b.n	8019ee6 <atan+0x3e>
 801a142:	a51d      	add	r5, pc, #116	; (adr r5, 801a1b8 <atan+0x310>)
 801a144:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a148:	e6cd      	b.n	8019ee6 <atan+0x3e>
 801a14a:	bf00      	nop
 801a14c:	f3af 8000 	nop.w
 801a150:	54442d18 	.word	0x54442d18
 801a154:	bff921fb 	.word	0xbff921fb
 801a158:	8800759c 	.word	0x8800759c
 801a15c:	7e37e43c 	.word	0x7e37e43c
 801a160:	e322da11 	.word	0xe322da11
 801a164:	3f90ad3a 	.word	0x3f90ad3a
 801a168:	24760deb 	.word	0x24760deb
 801a16c:	3fa97b4b 	.word	0x3fa97b4b
 801a170:	a0d03d51 	.word	0xa0d03d51
 801a174:	3fb10d66 	.word	0x3fb10d66
 801a178:	c54c206e 	.word	0xc54c206e
 801a17c:	3fb745cd 	.word	0x3fb745cd
 801a180:	920083ff 	.word	0x920083ff
 801a184:	3fc24924 	.word	0x3fc24924
 801a188:	5555550d 	.word	0x5555550d
 801a18c:	3fd55555 	.word	0x3fd55555
 801a190:	2c6a6c2f 	.word	0x2c6a6c2f
 801a194:	bfa2b444 	.word	0xbfa2b444
 801a198:	52defd9a 	.word	0x52defd9a
 801a19c:	3fadde2d 	.word	0x3fadde2d
 801a1a0:	af749a6d 	.word	0xaf749a6d
 801a1a4:	3fb3b0f2 	.word	0x3fb3b0f2
 801a1a8:	fe231671 	.word	0xfe231671
 801a1ac:	3fbc71c6 	.word	0x3fbc71c6
 801a1b0:	9998ebc4 	.word	0x9998ebc4
 801a1b4:	3fc99999 	.word	0x3fc99999
 801a1b8:	54442d18 	.word	0x54442d18
 801a1bc:	3ff921fb 	.word	0x3ff921fb
 801a1c0:	440fffff 	.word	0x440fffff
 801a1c4:	7ff00000 	.word	0x7ff00000
 801a1c8:	3fdbffff 	.word	0x3fdbffff
 801a1cc:	3ff00000 	.word	0x3ff00000
 801a1d0:	3ff2ffff 	.word	0x3ff2ffff
 801a1d4:	40038000 	.word	0x40038000
 801a1d8:	3ff80000 	.word	0x3ff80000
 801a1dc:	bff00000 	.word	0xbff00000
 801a1e0:	0801b378 	.word	0x0801b378
 801a1e4:	0801b358 	.word	0x0801b358

0801a1e8 <fabs>:
 801a1e8:	ec51 0b10 	vmov	r0, r1, d0
 801a1ec:	ee10 2a10 	vmov	r2, s0
 801a1f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a1f4:	ec43 2b10 	vmov	d0, r2, r3
 801a1f8:	4770      	bx	lr
	...

0801a1fc <atanf>:
 801a1fc:	b538      	push	{r3, r4, r5, lr}
 801a1fe:	ee10 5a10 	vmov	r5, s0
 801a202:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a206:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801a20a:	eef0 7a40 	vmov.f32	s15, s0
 801a20e:	db10      	blt.n	801a232 <atanf+0x36>
 801a210:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a214:	dd04      	ble.n	801a220 <atanf+0x24>
 801a216:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a21a:	eeb0 0a67 	vmov.f32	s0, s15
 801a21e:	bd38      	pop	{r3, r4, r5, pc}
 801a220:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a358 <atanf+0x15c>
 801a224:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a35c <atanf+0x160>
 801a228:	2d00      	cmp	r5, #0
 801a22a:	bfd8      	it	le
 801a22c:	eef0 7a40 	vmovle.f32	s15, s0
 801a230:	e7f3      	b.n	801a21a <atanf+0x1e>
 801a232:	4b4b      	ldr	r3, [pc, #300]	; (801a360 <atanf+0x164>)
 801a234:	429c      	cmp	r4, r3
 801a236:	dc10      	bgt.n	801a25a <atanf+0x5e>
 801a238:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801a23c:	da0a      	bge.n	801a254 <atanf+0x58>
 801a23e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801a364 <atanf+0x168>
 801a242:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a24a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a252:	dce2      	bgt.n	801a21a <atanf+0x1e>
 801a254:	f04f 33ff 	mov.w	r3, #4294967295
 801a258:	e013      	b.n	801a282 <atanf+0x86>
 801a25a:	f000 f8a3 	bl	801a3a4 <fabsf>
 801a25e:	4b42      	ldr	r3, [pc, #264]	; (801a368 <atanf+0x16c>)
 801a260:	429c      	cmp	r4, r3
 801a262:	dc4f      	bgt.n	801a304 <atanf+0x108>
 801a264:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801a268:	429c      	cmp	r4, r3
 801a26a:	dc41      	bgt.n	801a2f0 <atanf+0xf4>
 801a26c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a270:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a274:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a278:	2300      	movs	r3, #0
 801a27a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a27e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a282:	1c5a      	adds	r2, r3, #1
 801a284:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a288:	eddf 5a38 	vldr	s11, [pc, #224]	; 801a36c <atanf+0x170>
 801a28c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801a370 <atanf+0x174>
 801a290:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801a374 <atanf+0x178>
 801a294:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801a378 <atanf+0x17c>
 801a298:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a29c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a2a0:	eddf 5a36 	vldr	s11, [pc, #216]	; 801a37c <atanf+0x180>
 801a2a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a2a8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801a380 <atanf+0x184>
 801a2ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a2b0:	eddf 5a34 	vldr	s11, [pc, #208]	; 801a384 <atanf+0x188>
 801a2b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a2b8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801a388 <atanf+0x18c>
 801a2bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a2c0:	eddf 5a32 	vldr	s11, [pc, #200]	; 801a38c <atanf+0x190>
 801a2c4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a2c8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801a390 <atanf+0x194>
 801a2cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a2d0:	eddf 5a30 	vldr	s11, [pc, #192]	; 801a394 <atanf+0x198>
 801a2d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a2d8:	eea5 0a87 	vfma.f32	s0, s11, s14
 801a2dc:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a2e0:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a2e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a2e8:	d121      	bne.n	801a32e <atanf+0x132>
 801a2ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a2ee:	e794      	b.n	801a21a <atanf+0x1e>
 801a2f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a2f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a2f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a2fc:	2301      	movs	r3, #1
 801a2fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a302:	e7be      	b.n	801a282 <atanf+0x86>
 801a304:	4b24      	ldr	r3, [pc, #144]	; (801a398 <atanf+0x19c>)
 801a306:	429c      	cmp	r4, r3
 801a308:	dc0b      	bgt.n	801a322 <atanf+0x126>
 801a30a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801a30e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a312:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a316:	2302      	movs	r3, #2
 801a318:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a320:	e7af      	b.n	801a282 <atanf+0x86>
 801a322:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a326:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a32a:	2303      	movs	r3, #3
 801a32c:	e7a9      	b.n	801a282 <atanf+0x86>
 801a32e:	4a1b      	ldr	r2, [pc, #108]	; (801a39c <atanf+0x1a0>)
 801a330:	491b      	ldr	r1, [pc, #108]	; (801a3a0 <atanf+0x1a4>)
 801a332:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a336:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a33a:	ed93 7a00 	vldr	s14, [r3]
 801a33e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a342:	2d00      	cmp	r5, #0
 801a344:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a348:	ed92 0a00 	vldr	s0, [r2]
 801a34c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a350:	bfb8      	it	lt
 801a352:	eef1 7a67 	vneglt.f32	s15, s15
 801a356:	e760      	b.n	801a21a <atanf+0x1e>
 801a358:	3fc90fdb 	.word	0x3fc90fdb
 801a35c:	bfc90fdb 	.word	0xbfc90fdb
 801a360:	3edfffff 	.word	0x3edfffff
 801a364:	7149f2ca 	.word	0x7149f2ca
 801a368:	3f97ffff 	.word	0x3f97ffff
 801a36c:	3c8569d7 	.word	0x3c8569d7
 801a370:	3d4bda59 	.word	0x3d4bda59
 801a374:	bd15a221 	.word	0xbd15a221
 801a378:	be4ccccd 	.word	0xbe4ccccd
 801a37c:	3d886b35 	.word	0x3d886b35
 801a380:	3dba2e6e 	.word	0x3dba2e6e
 801a384:	3e124925 	.word	0x3e124925
 801a388:	3eaaaaab 	.word	0x3eaaaaab
 801a38c:	bd6ef16b 	.word	0xbd6ef16b
 801a390:	bd9d8795 	.word	0xbd9d8795
 801a394:	bde38e38 	.word	0xbde38e38
 801a398:	401bffff 	.word	0x401bffff
 801a39c:	0801b398 	.word	0x0801b398
 801a3a0:	0801b3a8 	.word	0x0801b3a8

0801a3a4 <fabsf>:
 801a3a4:	ee10 3a10 	vmov	r3, s0
 801a3a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a3ac:	ee00 3a10 	vmov	s0, r3
 801a3b0:	4770      	bx	lr
	...

0801a3b4 <floorf>:
 801a3b4:	ee10 3a10 	vmov	r3, s0
 801a3b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a3bc:	3a7f      	subs	r2, #127	; 0x7f
 801a3be:	2a16      	cmp	r2, #22
 801a3c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a3c4:	dc2a      	bgt.n	801a41c <floorf+0x68>
 801a3c6:	2a00      	cmp	r2, #0
 801a3c8:	da11      	bge.n	801a3ee <floorf+0x3a>
 801a3ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a42c <floorf+0x78>
 801a3ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a3d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3da:	dd05      	ble.n	801a3e8 <floorf+0x34>
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	da23      	bge.n	801a428 <floorf+0x74>
 801a3e0:	4a13      	ldr	r2, [pc, #76]	; (801a430 <floorf+0x7c>)
 801a3e2:	2900      	cmp	r1, #0
 801a3e4:	bf18      	it	ne
 801a3e6:	4613      	movne	r3, r2
 801a3e8:	ee00 3a10 	vmov	s0, r3
 801a3ec:	4770      	bx	lr
 801a3ee:	4911      	ldr	r1, [pc, #68]	; (801a434 <floorf+0x80>)
 801a3f0:	4111      	asrs	r1, r2
 801a3f2:	420b      	tst	r3, r1
 801a3f4:	d0fa      	beq.n	801a3ec <floorf+0x38>
 801a3f6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a42c <floorf+0x78>
 801a3fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a3fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a406:	ddef      	ble.n	801a3e8 <floorf+0x34>
 801a408:	2b00      	cmp	r3, #0
 801a40a:	bfbe      	ittt	lt
 801a40c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a410:	fa40 f202 	asrlt.w	r2, r0, r2
 801a414:	189b      	addlt	r3, r3, r2
 801a416:	ea23 0301 	bic.w	r3, r3, r1
 801a41a:	e7e5      	b.n	801a3e8 <floorf+0x34>
 801a41c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a420:	d3e4      	bcc.n	801a3ec <floorf+0x38>
 801a422:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a426:	4770      	bx	lr
 801a428:	2300      	movs	r3, #0
 801a42a:	e7dd      	b.n	801a3e8 <floorf+0x34>
 801a42c:	7149f2ca 	.word	0x7149f2ca
 801a430:	bf800000 	.word	0xbf800000
 801a434:	007fffff 	.word	0x007fffff

0801a438 <nanf>:
 801a438:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a440 <nanf+0x8>
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	7fc00000 	.word	0x7fc00000

0801a444 <scalbnf>:
 801a444:	ee10 3a10 	vmov	r3, s0
 801a448:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a44c:	d025      	beq.n	801a49a <scalbnf+0x56>
 801a44e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a452:	d302      	bcc.n	801a45a <scalbnf+0x16>
 801a454:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a458:	4770      	bx	lr
 801a45a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a45e:	d122      	bne.n	801a4a6 <scalbnf+0x62>
 801a460:	4b2a      	ldr	r3, [pc, #168]	; (801a50c <scalbnf+0xc8>)
 801a462:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a510 <scalbnf+0xcc>
 801a466:	4298      	cmp	r0, r3
 801a468:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a46c:	db16      	blt.n	801a49c <scalbnf+0x58>
 801a46e:	ee10 3a10 	vmov	r3, s0
 801a472:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a476:	3a19      	subs	r2, #25
 801a478:	4402      	add	r2, r0
 801a47a:	2afe      	cmp	r2, #254	; 0xfe
 801a47c:	dd15      	ble.n	801a4aa <scalbnf+0x66>
 801a47e:	ee10 3a10 	vmov	r3, s0
 801a482:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a514 <scalbnf+0xd0>
 801a486:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a518 <scalbnf+0xd4>
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	eeb0 7a67 	vmov.f32	s14, s15
 801a490:	bfb8      	it	lt
 801a492:	eef0 7a66 	vmovlt.f32	s15, s13
 801a496:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a49a:	4770      	bx	lr
 801a49c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a51c <scalbnf+0xd8>
 801a4a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a4a4:	4770      	bx	lr
 801a4a6:	0dd2      	lsrs	r2, r2, #23
 801a4a8:	e7e6      	b.n	801a478 <scalbnf+0x34>
 801a4aa:	2a00      	cmp	r2, #0
 801a4ac:	dd06      	ble.n	801a4bc <scalbnf+0x78>
 801a4ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a4b2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a4b6:	ee00 3a10 	vmov	s0, r3
 801a4ba:	4770      	bx	lr
 801a4bc:	f112 0f16 	cmn.w	r2, #22
 801a4c0:	da1a      	bge.n	801a4f8 <scalbnf+0xb4>
 801a4c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a4c6:	4298      	cmp	r0, r3
 801a4c8:	ee10 3a10 	vmov	r3, s0
 801a4cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a4d0:	dd0a      	ble.n	801a4e8 <scalbnf+0xa4>
 801a4d2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a514 <scalbnf+0xd0>
 801a4d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a518 <scalbnf+0xd4>
 801a4da:	eef0 7a40 	vmov.f32	s15, s0
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	bf18      	it	ne
 801a4e2:	eeb0 0a47 	vmovne.f32	s0, s14
 801a4e6:	e7db      	b.n	801a4a0 <scalbnf+0x5c>
 801a4e8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a51c <scalbnf+0xd8>
 801a4ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a520 <scalbnf+0xdc>
 801a4f0:	eef0 7a40 	vmov.f32	s15, s0
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	e7f3      	b.n	801a4e0 <scalbnf+0x9c>
 801a4f8:	3219      	adds	r2, #25
 801a4fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a4fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a502:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a524 <scalbnf+0xe0>
 801a506:	ee07 3a10 	vmov	s14, r3
 801a50a:	e7c4      	b.n	801a496 <scalbnf+0x52>
 801a50c:	ffff3cb0 	.word	0xffff3cb0
 801a510:	4c000000 	.word	0x4c000000
 801a514:	7149f2ca 	.word	0x7149f2ca
 801a518:	f149f2ca 	.word	0xf149f2ca
 801a51c:	0da24260 	.word	0x0da24260
 801a520:	8da24260 	.word	0x8da24260
 801a524:	33000000 	.word	0x33000000

0801a528 <__errno>:
 801a528:	4b01      	ldr	r3, [pc, #4]	; (801a530 <__errno+0x8>)
 801a52a:	6818      	ldr	r0, [r3, #0]
 801a52c:	4770      	bx	lr
 801a52e:	bf00      	nop
 801a530:	2000018c 	.word	0x2000018c

0801a534 <__libc_init_array>:
 801a534:	b570      	push	{r4, r5, r6, lr}
 801a536:	4d0d      	ldr	r5, [pc, #52]	; (801a56c <__libc_init_array+0x38>)
 801a538:	4c0d      	ldr	r4, [pc, #52]	; (801a570 <__libc_init_array+0x3c>)
 801a53a:	1b64      	subs	r4, r4, r5
 801a53c:	10a4      	asrs	r4, r4, #2
 801a53e:	2600      	movs	r6, #0
 801a540:	42a6      	cmp	r6, r4
 801a542:	d109      	bne.n	801a558 <__libc_init_array+0x24>
 801a544:	4d0b      	ldr	r5, [pc, #44]	; (801a574 <__libc_init_array+0x40>)
 801a546:	4c0c      	ldr	r4, [pc, #48]	; (801a578 <__libc_init_array+0x44>)
 801a548:	f000 fc62 	bl	801ae10 <_init>
 801a54c:	1b64      	subs	r4, r4, r5
 801a54e:	10a4      	asrs	r4, r4, #2
 801a550:	2600      	movs	r6, #0
 801a552:	42a6      	cmp	r6, r4
 801a554:	d105      	bne.n	801a562 <__libc_init_array+0x2e>
 801a556:	bd70      	pop	{r4, r5, r6, pc}
 801a558:	f855 3b04 	ldr.w	r3, [r5], #4
 801a55c:	4798      	blx	r3
 801a55e:	3601      	adds	r6, #1
 801a560:	e7ee      	b.n	801a540 <__libc_init_array+0xc>
 801a562:	f855 3b04 	ldr.w	r3, [r5], #4
 801a566:	4798      	blx	r3
 801a568:	3601      	adds	r6, #1
 801a56a:	e7f2      	b.n	801a552 <__libc_init_array+0x1e>
 801a56c:	0801b3f4 	.word	0x0801b3f4
 801a570:	0801b3f4 	.word	0x0801b3f4
 801a574:	0801b3f4 	.word	0x0801b3f4
 801a578:	0801b3f8 	.word	0x0801b3f8

0801a57c <memcpy>:
 801a57c:	440a      	add	r2, r1
 801a57e:	4291      	cmp	r1, r2
 801a580:	f100 33ff 	add.w	r3, r0, #4294967295
 801a584:	d100      	bne.n	801a588 <memcpy+0xc>
 801a586:	4770      	bx	lr
 801a588:	b510      	push	{r4, lr}
 801a58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a592:	4291      	cmp	r1, r2
 801a594:	d1f9      	bne.n	801a58a <memcpy+0xe>
 801a596:	bd10      	pop	{r4, pc}

0801a598 <memset>:
 801a598:	4402      	add	r2, r0
 801a59a:	4603      	mov	r3, r0
 801a59c:	4293      	cmp	r3, r2
 801a59e:	d100      	bne.n	801a5a2 <memset+0xa>
 801a5a0:	4770      	bx	lr
 801a5a2:	f803 1b01 	strb.w	r1, [r3], #1
 801a5a6:	e7f9      	b.n	801a59c <memset+0x4>

0801a5a8 <sniprintf>:
 801a5a8:	b40c      	push	{r2, r3}
 801a5aa:	b530      	push	{r4, r5, lr}
 801a5ac:	4b17      	ldr	r3, [pc, #92]	; (801a60c <sniprintf+0x64>)
 801a5ae:	1e0c      	subs	r4, r1, #0
 801a5b0:	681d      	ldr	r5, [r3, #0]
 801a5b2:	b09d      	sub	sp, #116	; 0x74
 801a5b4:	da08      	bge.n	801a5c8 <sniprintf+0x20>
 801a5b6:	238b      	movs	r3, #139	; 0x8b
 801a5b8:	602b      	str	r3, [r5, #0]
 801a5ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a5be:	b01d      	add	sp, #116	; 0x74
 801a5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5c4:	b002      	add	sp, #8
 801a5c6:	4770      	bx	lr
 801a5c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a5cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5d0:	bf14      	ite	ne
 801a5d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a5d6:	4623      	moveq	r3, r4
 801a5d8:	9304      	str	r3, [sp, #16]
 801a5da:	9307      	str	r3, [sp, #28]
 801a5dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5e0:	9002      	str	r0, [sp, #8]
 801a5e2:	9006      	str	r0, [sp, #24]
 801a5e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a5ea:	ab21      	add	r3, sp, #132	; 0x84
 801a5ec:	a902      	add	r1, sp, #8
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	9301      	str	r3, [sp, #4]
 801a5f2:	f000 f869 	bl	801a6c8 <_svfiprintf_r>
 801a5f6:	1c43      	adds	r3, r0, #1
 801a5f8:	bfbc      	itt	lt
 801a5fa:	238b      	movlt	r3, #139	; 0x8b
 801a5fc:	602b      	strlt	r3, [r5, #0]
 801a5fe:	2c00      	cmp	r4, #0
 801a600:	d0dd      	beq.n	801a5be <sniprintf+0x16>
 801a602:	9b02      	ldr	r3, [sp, #8]
 801a604:	2200      	movs	r2, #0
 801a606:	701a      	strb	r2, [r3, #0]
 801a608:	e7d9      	b.n	801a5be <sniprintf+0x16>
 801a60a:	bf00      	nop
 801a60c:	2000018c 	.word	0x2000018c

0801a610 <__ssputs_r>:
 801a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a614:	688e      	ldr	r6, [r1, #8]
 801a616:	429e      	cmp	r6, r3
 801a618:	4682      	mov	sl, r0
 801a61a:	460c      	mov	r4, r1
 801a61c:	4690      	mov	r8, r2
 801a61e:	461f      	mov	r7, r3
 801a620:	d838      	bhi.n	801a694 <__ssputs_r+0x84>
 801a622:	898a      	ldrh	r2, [r1, #12]
 801a624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a628:	d032      	beq.n	801a690 <__ssputs_r+0x80>
 801a62a:	6825      	ldr	r5, [r4, #0]
 801a62c:	6909      	ldr	r1, [r1, #16]
 801a62e:	eba5 0901 	sub.w	r9, r5, r1
 801a632:	6965      	ldr	r5, [r4, #20]
 801a634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a63c:	3301      	adds	r3, #1
 801a63e:	444b      	add	r3, r9
 801a640:	106d      	asrs	r5, r5, #1
 801a642:	429d      	cmp	r5, r3
 801a644:	bf38      	it	cc
 801a646:	461d      	movcc	r5, r3
 801a648:	0553      	lsls	r3, r2, #21
 801a64a:	d531      	bpl.n	801a6b0 <__ssputs_r+0xa0>
 801a64c:	4629      	mov	r1, r5
 801a64e:	f000 fb39 	bl	801acc4 <_malloc_r>
 801a652:	4606      	mov	r6, r0
 801a654:	b950      	cbnz	r0, 801a66c <__ssputs_r+0x5c>
 801a656:	230c      	movs	r3, #12
 801a658:	f8ca 3000 	str.w	r3, [sl]
 801a65c:	89a3      	ldrh	r3, [r4, #12]
 801a65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a662:	81a3      	strh	r3, [r4, #12]
 801a664:	f04f 30ff 	mov.w	r0, #4294967295
 801a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a66c:	6921      	ldr	r1, [r4, #16]
 801a66e:	464a      	mov	r2, r9
 801a670:	f7ff ff84 	bl	801a57c <memcpy>
 801a674:	89a3      	ldrh	r3, [r4, #12]
 801a676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a67e:	81a3      	strh	r3, [r4, #12]
 801a680:	6126      	str	r6, [r4, #16]
 801a682:	6165      	str	r5, [r4, #20]
 801a684:	444e      	add	r6, r9
 801a686:	eba5 0509 	sub.w	r5, r5, r9
 801a68a:	6026      	str	r6, [r4, #0]
 801a68c:	60a5      	str	r5, [r4, #8]
 801a68e:	463e      	mov	r6, r7
 801a690:	42be      	cmp	r6, r7
 801a692:	d900      	bls.n	801a696 <__ssputs_r+0x86>
 801a694:	463e      	mov	r6, r7
 801a696:	4632      	mov	r2, r6
 801a698:	6820      	ldr	r0, [r4, #0]
 801a69a:	4641      	mov	r1, r8
 801a69c:	f000 faa8 	bl	801abf0 <memmove>
 801a6a0:	68a3      	ldr	r3, [r4, #8]
 801a6a2:	6822      	ldr	r2, [r4, #0]
 801a6a4:	1b9b      	subs	r3, r3, r6
 801a6a6:	4432      	add	r2, r6
 801a6a8:	60a3      	str	r3, [r4, #8]
 801a6aa:	6022      	str	r2, [r4, #0]
 801a6ac:	2000      	movs	r0, #0
 801a6ae:	e7db      	b.n	801a668 <__ssputs_r+0x58>
 801a6b0:	462a      	mov	r2, r5
 801a6b2:	f000 fb61 	bl	801ad78 <_realloc_r>
 801a6b6:	4606      	mov	r6, r0
 801a6b8:	2800      	cmp	r0, #0
 801a6ba:	d1e1      	bne.n	801a680 <__ssputs_r+0x70>
 801a6bc:	6921      	ldr	r1, [r4, #16]
 801a6be:	4650      	mov	r0, sl
 801a6c0:	f000 fab0 	bl	801ac24 <_free_r>
 801a6c4:	e7c7      	b.n	801a656 <__ssputs_r+0x46>
	...

0801a6c8 <_svfiprintf_r>:
 801a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6cc:	4698      	mov	r8, r3
 801a6ce:	898b      	ldrh	r3, [r1, #12]
 801a6d0:	061b      	lsls	r3, r3, #24
 801a6d2:	b09d      	sub	sp, #116	; 0x74
 801a6d4:	4607      	mov	r7, r0
 801a6d6:	460d      	mov	r5, r1
 801a6d8:	4614      	mov	r4, r2
 801a6da:	d50e      	bpl.n	801a6fa <_svfiprintf_r+0x32>
 801a6dc:	690b      	ldr	r3, [r1, #16]
 801a6de:	b963      	cbnz	r3, 801a6fa <_svfiprintf_r+0x32>
 801a6e0:	2140      	movs	r1, #64	; 0x40
 801a6e2:	f000 faef 	bl	801acc4 <_malloc_r>
 801a6e6:	6028      	str	r0, [r5, #0]
 801a6e8:	6128      	str	r0, [r5, #16]
 801a6ea:	b920      	cbnz	r0, 801a6f6 <_svfiprintf_r+0x2e>
 801a6ec:	230c      	movs	r3, #12
 801a6ee:	603b      	str	r3, [r7, #0]
 801a6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801a6f4:	e0d1      	b.n	801a89a <_svfiprintf_r+0x1d2>
 801a6f6:	2340      	movs	r3, #64	; 0x40
 801a6f8:	616b      	str	r3, [r5, #20]
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	9309      	str	r3, [sp, #36]	; 0x24
 801a6fe:	2320      	movs	r3, #32
 801a700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a704:	f8cd 800c 	str.w	r8, [sp, #12]
 801a708:	2330      	movs	r3, #48	; 0x30
 801a70a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a8b4 <_svfiprintf_r+0x1ec>
 801a70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a712:	f04f 0901 	mov.w	r9, #1
 801a716:	4623      	mov	r3, r4
 801a718:	469a      	mov	sl, r3
 801a71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a71e:	b10a      	cbz	r2, 801a724 <_svfiprintf_r+0x5c>
 801a720:	2a25      	cmp	r2, #37	; 0x25
 801a722:	d1f9      	bne.n	801a718 <_svfiprintf_r+0x50>
 801a724:	ebba 0b04 	subs.w	fp, sl, r4
 801a728:	d00b      	beq.n	801a742 <_svfiprintf_r+0x7a>
 801a72a:	465b      	mov	r3, fp
 801a72c:	4622      	mov	r2, r4
 801a72e:	4629      	mov	r1, r5
 801a730:	4638      	mov	r0, r7
 801a732:	f7ff ff6d 	bl	801a610 <__ssputs_r>
 801a736:	3001      	adds	r0, #1
 801a738:	f000 80aa 	beq.w	801a890 <_svfiprintf_r+0x1c8>
 801a73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a73e:	445a      	add	r2, fp
 801a740:	9209      	str	r2, [sp, #36]	; 0x24
 801a742:	f89a 3000 	ldrb.w	r3, [sl]
 801a746:	2b00      	cmp	r3, #0
 801a748:	f000 80a2 	beq.w	801a890 <_svfiprintf_r+0x1c8>
 801a74c:	2300      	movs	r3, #0
 801a74e:	f04f 32ff 	mov.w	r2, #4294967295
 801a752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a756:	f10a 0a01 	add.w	sl, sl, #1
 801a75a:	9304      	str	r3, [sp, #16]
 801a75c:	9307      	str	r3, [sp, #28]
 801a75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a762:	931a      	str	r3, [sp, #104]	; 0x68
 801a764:	4654      	mov	r4, sl
 801a766:	2205      	movs	r2, #5
 801a768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a76c:	4851      	ldr	r0, [pc, #324]	; (801a8b4 <_svfiprintf_r+0x1ec>)
 801a76e:	f7e5 fd37 	bl	80001e0 <memchr>
 801a772:	9a04      	ldr	r2, [sp, #16]
 801a774:	b9d8      	cbnz	r0, 801a7ae <_svfiprintf_r+0xe6>
 801a776:	06d0      	lsls	r0, r2, #27
 801a778:	bf44      	itt	mi
 801a77a:	2320      	movmi	r3, #32
 801a77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a780:	0711      	lsls	r1, r2, #28
 801a782:	bf44      	itt	mi
 801a784:	232b      	movmi	r3, #43	; 0x2b
 801a786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a78a:	f89a 3000 	ldrb.w	r3, [sl]
 801a78e:	2b2a      	cmp	r3, #42	; 0x2a
 801a790:	d015      	beq.n	801a7be <_svfiprintf_r+0xf6>
 801a792:	9a07      	ldr	r2, [sp, #28]
 801a794:	4654      	mov	r4, sl
 801a796:	2000      	movs	r0, #0
 801a798:	f04f 0c0a 	mov.w	ip, #10
 801a79c:	4621      	mov	r1, r4
 801a79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a7a2:	3b30      	subs	r3, #48	; 0x30
 801a7a4:	2b09      	cmp	r3, #9
 801a7a6:	d94e      	bls.n	801a846 <_svfiprintf_r+0x17e>
 801a7a8:	b1b0      	cbz	r0, 801a7d8 <_svfiprintf_r+0x110>
 801a7aa:	9207      	str	r2, [sp, #28]
 801a7ac:	e014      	b.n	801a7d8 <_svfiprintf_r+0x110>
 801a7ae:	eba0 0308 	sub.w	r3, r0, r8
 801a7b2:	fa09 f303 	lsl.w	r3, r9, r3
 801a7b6:	4313      	orrs	r3, r2
 801a7b8:	9304      	str	r3, [sp, #16]
 801a7ba:	46a2      	mov	sl, r4
 801a7bc:	e7d2      	b.n	801a764 <_svfiprintf_r+0x9c>
 801a7be:	9b03      	ldr	r3, [sp, #12]
 801a7c0:	1d19      	adds	r1, r3, #4
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	9103      	str	r1, [sp, #12]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	bfbb      	ittet	lt
 801a7ca:	425b      	neglt	r3, r3
 801a7cc:	f042 0202 	orrlt.w	r2, r2, #2
 801a7d0:	9307      	strge	r3, [sp, #28]
 801a7d2:	9307      	strlt	r3, [sp, #28]
 801a7d4:	bfb8      	it	lt
 801a7d6:	9204      	strlt	r2, [sp, #16]
 801a7d8:	7823      	ldrb	r3, [r4, #0]
 801a7da:	2b2e      	cmp	r3, #46	; 0x2e
 801a7dc:	d10c      	bne.n	801a7f8 <_svfiprintf_r+0x130>
 801a7de:	7863      	ldrb	r3, [r4, #1]
 801a7e0:	2b2a      	cmp	r3, #42	; 0x2a
 801a7e2:	d135      	bne.n	801a850 <_svfiprintf_r+0x188>
 801a7e4:	9b03      	ldr	r3, [sp, #12]
 801a7e6:	1d1a      	adds	r2, r3, #4
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	9203      	str	r2, [sp, #12]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	bfb8      	it	lt
 801a7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a7f4:	3402      	adds	r4, #2
 801a7f6:	9305      	str	r3, [sp, #20]
 801a7f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a8c4 <_svfiprintf_r+0x1fc>
 801a7fc:	7821      	ldrb	r1, [r4, #0]
 801a7fe:	2203      	movs	r2, #3
 801a800:	4650      	mov	r0, sl
 801a802:	f7e5 fced 	bl	80001e0 <memchr>
 801a806:	b140      	cbz	r0, 801a81a <_svfiprintf_r+0x152>
 801a808:	2340      	movs	r3, #64	; 0x40
 801a80a:	eba0 000a 	sub.w	r0, r0, sl
 801a80e:	fa03 f000 	lsl.w	r0, r3, r0
 801a812:	9b04      	ldr	r3, [sp, #16]
 801a814:	4303      	orrs	r3, r0
 801a816:	3401      	adds	r4, #1
 801a818:	9304      	str	r3, [sp, #16]
 801a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a81e:	4826      	ldr	r0, [pc, #152]	; (801a8b8 <_svfiprintf_r+0x1f0>)
 801a820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a824:	2206      	movs	r2, #6
 801a826:	f7e5 fcdb 	bl	80001e0 <memchr>
 801a82a:	2800      	cmp	r0, #0
 801a82c:	d038      	beq.n	801a8a0 <_svfiprintf_r+0x1d8>
 801a82e:	4b23      	ldr	r3, [pc, #140]	; (801a8bc <_svfiprintf_r+0x1f4>)
 801a830:	bb1b      	cbnz	r3, 801a87a <_svfiprintf_r+0x1b2>
 801a832:	9b03      	ldr	r3, [sp, #12]
 801a834:	3307      	adds	r3, #7
 801a836:	f023 0307 	bic.w	r3, r3, #7
 801a83a:	3308      	adds	r3, #8
 801a83c:	9303      	str	r3, [sp, #12]
 801a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a840:	4433      	add	r3, r6
 801a842:	9309      	str	r3, [sp, #36]	; 0x24
 801a844:	e767      	b.n	801a716 <_svfiprintf_r+0x4e>
 801a846:	fb0c 3202 	mla	r2, ip, r2, r3
 801a84a:	460c      	mov	r4, r1
 801a84c:	2001      	movs	r0, #1
 801a84e:	e7a5      	b.n	801a79c <_svfiprintf_r+0xd4>
 801a850:	2300      	movs	r3, #0
 801a852:	3401      	adds	r4, #1
 801a854:	9305      	str	r3, [sp, #20]
 801a856:	4619      	mov	r1, r3
 801a858:	f04f 0c0a 	mov.w	ip, #10
 801a85c:	4620      	mov	r0, r4
 801a85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a862:	3a30      	subs	r2, #48	; 0x30
 801a864:	2a09      	cmp	r2, #9
 801a866:	d903      	bls.n	801a870 <_svfiprintf_r+0x1a8>
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d0c5      	beq.n	801a7f8 <_svfiprintf_r+0x130>
 801a86c:	9105      	str	r1, [sp, #20]
 801a86e:	e7c3      	b.n	801a7f8 <_svfiprintf_r+0x130>
 801a870:	fb0c 2101 	mla	r1, ip, r1, r2
 801a874:	4604      	mov	r4, r0
 801a876:	2301      	movs	r3, #1
 801a878:	e7f0      	b.n	801a85c <_svfiprintf_r+0x194>
 801a87a:	ab03      	add	r3, sp, #12
 801a87c:	9300      	str	r3, [sp, #0]
 801a87e:	462a      	mov	r2, r5
 801a880:	4b0f      	ldr	r3, [pc, #60]	; (801a8c0 <_svfiprintf_r+0x1f8>)
 801a882:	a904      	add	r1, sp, #16
 801a884:	4638      	mov	r0, r7
 801a886:	f3af 8000 	nop.w
 801a88a:	1c42      	adds	r2, r0, #1
 801a88c:	4606      	mov	r6, r0
 801a88e:	d1d6      	bne.n	801a83e <_svfiprintf_r+0x176>
 801a890:	89ab      	ldrh	r3, [r5, #12]
 801a892:	065b      	lsls	r3, r3, #25
 801a894:	f53f af2c 	bmi.w	801a6f0 <_svfiprintf_r+0x28>
 801a898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a89a:	b01d      	add	sp, #116	; 0x74
 801a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8a0:	ab03      	add	r3, sp, #12
 801a8a2:	9300      	str	r3, [sp, #0]
 801a8a4:	462a      	mov	r2, r5
 801a8a6:	4b06      	ldr	r3, [pc, #24]	; (801a8c0 <_svfiprintf_r+0x1f8>)
 801a8a8:	a904      	add	r1, sp, #16
 801a8aa:	4638      	mov	r0, r7
 801a8ac:	f000 f87a 	bl	801a9a4 <_printf_i>
 801a8b0:	e7eb      	b.n	801a88a <_svfiprintf_r+0x1c2>
 801a8b2:	bf00      	nop
 801a8b4:	0801b3b8 	.word	0x0801b3b8
 801a8b8:	0801b3c2 	.word	0x0801b3c2
 801a8bc:	00000000 	.word	0x00000000
 801a8c0:	0801a611 	.word	0x0801a611
 801a8c4:	0801b3be 	.word	0x0801b3be

0801a8c8 <_printf_common>:
 801a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8cc:	4616      	mov	r6, r2
 801a8ce:	4699      	mov	r9, r3
 801a8d0:	688a      	ldr	r2, [r1, #8]
 801a8d2:	690b      	ldr	r3, [r1, #16]
 801a8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	bfb8      	it	lt
 801a8dc:	4613      	movlt	r3, r2
 801a8de:	6033      	str	r3, [r6, #0]
 801a8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a8e4:	4607      	mov	r7, r0
 801a8e6:	460c      	mov	r4, r1
 801a8e8:	b10a      	cbz	r2, 801a8ee <_printf_common+0x26>
 801a8ea:	3301      	adds	r3, #1
 801a8ec:	6033      	str	r3, [r6, #0]
 801a8ee:	6823      	ldr	r3, [r4, #0]
 801a8f0:	0699      	lsls	r1, r3, #26
 801a8f2:	bf42      	ittt	mi
 801a8f4:	6833      	ldrmi	r3, [r6, #0]
 801a8f6:	3302      	addmi	r3, #2
 801a8f8:	6033      	strmi	r3, [r6, #0]
 801a8fa:	6825      	ldr	r5, [r4, #0]
 801a8fc:	f015 0506 	ands.w	r5, r5, #6
 801a900:	d106      	bne.n	801a910 <_printf_common+0x48>
 801a902:	f104 0a19 	add.w	sl, r4, #25
 801a906:	68e3      	ldr	r3, [r4, #12]
 801a908:	6832      	ldr	r2, [r6, #0]
 801a90a:	1a9b      	subs	r3, r3, r2
 801a90c:	42ab      	cmp	r3, r5
 801a90e:	dc26      	bgt.n	801a95e <_printf_common+0x96>
 801a910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a914:	1e13      	subs	r3, r2, #0
 801a916:	6822      	ldr	r2, [r4, #0]
 801a918:	bf18      	it	ne
 801a91a:	2301      	movne	r3, #1
 801a91c:	0692      	lsls	r2, r2, #26
 801a91e:	d42b      	bmi.n	801a978 <_printf_common+0xb0>
 801a920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a924:	4649      	mov	r1, r9
 801a926:	4638      	mov	r0, r7
 801a928:	47c0      	blx	r8
 801a92a:	3001      	adds	r0, #1
 801a92c:	d01e      	beq.n	801a96c <_printf_common+0xa4>
 801a92e:	6823      	ldr	r3, [r4, #0]
 801a930:	68e5      	ldr	r5, [r4, #12]
 801a932:	6832      	ldr	r2, [r6, #0]
 801a934:	f003 0306 	and.w	r3, r3, #6
 801a938:	2b04      	cmp	r3, #4
 801a93a:	bf08      	it	eq
 801a93c:	1aad      	subeq	r5, r5, r2
 801a93e:	68a3      	ldr	r3, [r4, #8]
 801a940:	6922      	ldr	r2, [r4, #16]
 801a942:	bf0c      	ite	eq
 801a944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a948:	2500      	movne	r5, #0
 801a94a:	4293      	cmp	r3, r2
 801a94c:	bfc4      	itt	gt
 801a94e:	1a9b      	subgt	r3, r3, r2
 801a950:	18ed      	addgt	r5, r5, r3
 801a952:	2600      	movs	r6, #0
 801a954:	341a      	adds	r4, #26
 801a956:	42b5      	cmp	r5, r6
 801a958:	d11a      	bne.n	801a990 <_printf_common+0xc8>
 801a95a:	2000      	movs	r0, #0
 801a95c:	e008      	b.n	801a970 <_printf_common+0xa8>
 801a95e:	2301      	movs	r3, #1
 801a960:	4652      	mov	r2, sl
 801a962:	4649      	mov	r1, r9
 801a964:	4638      	mov	r0, r7
 801a966:	47c0      	blx	r8
 801a968:	3001      	adds	r0, #1
 801a96a:	d103      	bne.n	801a974 <_printf_common+0xac>
 801a96c:	f04f 30ff 	mov.w	r0, #4294967295
 801a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a974:	3501      	adds	r5, #1
 801a976:	e7c6      	b.n	801a906 <_printf_common+0x3e>
 801a978:	18e1      	adds	r1, r4, r3
 801a97a:	1c5a      	adds	r2, r3, #1
 801a97c:	2030      	movs	r0, #48	; 0x30
 801a97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a982:	4422      	add	r2, r4
 801a984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a98c:	3302      	adds	r3, #2
 801a98e:	e7c7      	b.n	801a920 <_printf_common+0x58>
 801a990:	2301      	movs	r3, #1
 801a992:	4622      	mov	r2, r4
 801a994:	4649      	mov	r1, r9
 801a996:	4638      	mov	r0, r7
 801a998:	47c0      	blx	r8
 801a99a:	3001      	adds	r0, #1
 801a99c:	d0e6      	beq.n	801a96c <_printf_common+0xa4>
 801a99e:	3601      	adds	r6, #1
 801a9a0:	e7d9      	b.n	801a956 <_printf_common+0x8e>
	...

0801a9a4 <_printf_i>:
 801a9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9a8:	460c      	mov	r4, r1
 801a9aa:	4691      	mov	r9, r2
 801a9ac:	7e27      	ldrb	r7, [r4, #24]
 801a9ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a9b0:	2f78      	cmp	r7, #120	; 0x78
 801a9b2:	4680      	mov	r8, r0
 801a9b4:	469a      	mov	sl, r3
 801a9b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9ba:	d807      	bhi.n	801a9cc <_printf_i+0x28>
 801a9bc:	2f62      	cmp	r7, #98	; 0x62
 801a9be:	d80a      	bhi.n	801a9d6 <_printf_i+0x32>
 801a9c0:	2f00      	cmp	r7, #0
 801a9c2:	f000 80d8 	beq.w	801ab76 <_printf_i+0x1d2>
 801a9c6:	2f58      	cmp	r7, #88	; 0x58
 801a9c8:	f000 80a3 	beq.w	801ab12 <_printf_i+0x16e>
 801a9cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a9d4:	e03a      	b.n	801aa4c <_printf_i+0xa8>
 801a9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a9da:	2b15      	cmp	r3, #21
 801a9dc:	d8f6      	bhi.n	801a9cc <_printf_i+0x28>
 801a9de:	a001      	add	r0, pc, #4	; (adr r0, 801a9e4 <_printf_i+0x40>)
 801a9e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a9e4:	0801aa3d 	.word	0x0801aa3d
 801a9e8:	0801aa51 	.word	0x0801aa51
 801a9ec:	0801a9cd 	.word	0x0801a9cd
 801a9f0:	0801a9cd 	.word	0x0801a9cd
 801a9f4:	0801a9cd 	.word	0x0801a9cd
 801a9f8:	0801a9cd 	.word	0x0801a9cd
 801a9fc:	0801aa51 	.word	0x0801aa51
 801aa00:	0801a9cd 	.word	0x0801a9cd
 801aa04:	0801a9cd 	.word	0x0801a9cd
 801aa08:	0801a9cd 	.word	0x0801a9cd
 801aa0c:	0801a9cd 	.word	0x0801a9cd
 801aa10:	0801ab5d 	.word	0x0801ab5d
 801aa14:	0801aa81 	.word	0x0801aa81
 801aa18:	0801ab3f 	.word	0x0801ab3f
 801aa1c:	0801a9cd 	.word	0x0801a9cd
 801aa20:	0801a9cd 	.word	0x0801a9cd
 801aa24:	0801ab7f 	.word	0x0801ab7f
 801aa28:	0801a9cd 	.word	0x0801a9cd
 801aa2c:	0801aa81 	.word	0x0801aa81
 801aa30:	0801a9cd 	.word	0x0801a9cd
 801aa34:	0801a9cd 	.word	0x0801a9cd
 801aa38:	0801ab47 	.word	0x0801ab47
 801aa3c:	680b      	ldr	r3, [r1, #0]
 801aa3e:	1d1a      	adds	r2, r3, #4
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	600a      	str	r2, [r1, #0]
 801aa44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aa48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	e0a3      	b.n	801ab98 <_printf_i+0x1f4>
 801aa50:	6825      	ldr	r5, [r4, #0]
 801aa52:	6808      	ldr	r0, [r1, #0]
 801aa54:	062e      	lsls	r6, r5, #24
 801aa56:	f100 0304 	add.w	r3, r0, #4
 801aa5a:	d50a      	bpl.n	801aa72 <_printf_i+0xce>
 801aa5c:	6805      	ldr	r5, [r0, #0]
 801aa5e:	600b      	str	r3, [r1, #0]
 801aa60:	2d00      	cmp	r5, #0
 801aa62:	da03      	bge.n	801aa6c <_printf_i+0xc8>
 801aa64:	232d      	movs	r3, #45	; 0x2d
 801aa66:	426d      	negs	r5, r5
 801aa68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa6c:	485e      	ldr	r0, [pc, #376]	; (801abe8 <_printf_i+0x244>)
 801aa6e:	230a      	movs	r3, #10
 801aa70:	e019      	b.n	801aaa6 <_printf_i+0x102>
 801aa72:	f015 0f40 	tst.w	r5, #64	; 0x40
 801aa76:	6805      	ldr	r5, [r0, #0]
 801aa78:	600b      	str	r3, [r1, #0]
 801aa7a:	bf18      	it	ne
 801aa7c:	b22d      	sxthne	r5, r5
 801aa7e:	e7ef      	b.n	801aa60 <_printf_i+0xbc>
 801aa80:	680b      	ldr	r3, [r1, #0]
 801aa82:	6825      	ldr	r5, [r4, #0]
 801aa84:	1d18      	adds	r0, r3, #4
 801aa86:	6008      	str	r0, [r1, #0]
 801aa88:	0628      	lsls	r0, r5, #24
 801aa8a:	d501      	bpl.n	801aa90 <_printf_i+0xec>
 801aa8c:	681d      	ldr	r5, [r3, #0]
 801aa8e:	e002      	b.n	801aa96 <_printf_i+0xf2>
 801aa90:	0669      	lsls	r1, r5, #25
 801aa92:	d5fb      	bpl.n	801aa8c <_printf_i+0xe8>
 801aa94:	881d      	ldrh	r5, [r3, #0]
 801aa96:	4854      	ldr	r0, [pc, #336]	; (801abe8 <_printf_i+0x244>)
 801aa98:	2f6f      	cmp	r7, #111	; 0x6f
 801aa9a:	bf0c      	ite	eq
 801aa9c:	2308      	moveq	r3, #8
 801aa9e:	230a      	movne	r3, #10
 801aaa0:	2100      	movs	r1, #0
 801aaa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aaa6:	6866      	ldr	r6, [r4, #4]
 801aaa8:	60a6      	str	r6, [r4, #8]
 801aaaa:	2e00      	cmp	r6, #0
 801aaac:	bfa2      	ittt	ge
 801aaae:	6821      	ldrge	r1, [r4, #0]
 801aab0:	f021 0104 	bicge.w	r1, r1, #4
 801aab4:	6021      	strge	r1, [r4, #0]
 801aab6:	b90d      	cbnz	r5, 801aabc <_printf_i+0x118>
 801aab8:	2e00      	cmp	r6, #0
 801aaba:	d04d      	beq.n	801ab58 <_printf_i+0x1b4>
 801aabc:	4616      	mov	r6, r2
 801aabe:	fbb5 f1f3 	udiv	r1, r5, r3
 801aac2:	fb03 5711 	mls	r7, r3, r1, r5
 801aac6:	5dc7      	ldrb	r7, [r0, r7]
 801aac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801aacc:	462f      	mov	r7, r5
 801aace:	42bb      	cmp	r3, r7
 801aad0:	460d      	mov	r5, r1
 801aad2:	d9f4      	bls.n	801aabe <_printf_i+0x11a>
 801aad4:	2b08      	cmp	r3, #8
 801aad6:	d10b      	bne.n	801aaf0 <_printf_i+0x14c>
 801aad8:	6823      	ldr	r3, [r4, #0]
 801aada:	07df      	lsls	r7, r3, #31
 801aadc:	d508      	bpl.n	801aaf0 <_printf_i+0x14c>
 801aade:	6923      	ldr	r3, [r4, #16]
 801aae0:	6861      	ldr	r1, [r4, #4]
 801aae2:	4299      	cmp	r1, r3
 801aae4:	bfde      	ittt	le
 801aae6:	2330      	movle	r3, #48	; 0x30
 801aae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aaec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801aaf0:	1b92      	subs	r2, r2, r6
 801aaf2:	6122      	str	r2, [r4, #16]
 801aaf4:	f8cd a000 	str.w	sl, [sp]
 801aaf8:	464b      	mov	r3, r9
 801aafa:	aa03      	add	r2, sp, #12
 801aafc:	4621      	mov	r1, r4
 801aafe:	4640      	mov	r0, r8
 801ab00:	f7ff fee2 	bl	801a8c8 <_printf_common>
 801ab04:	3001      	adds	r0, #1
 801ab06:	d14c      	bne.n	801aba2 <_printf_i+0x1fe>
 801ab08:	f04f 30ff 	mov.w	r0, #4294967295
 801ab0c:	b004      	add	sp, #16
 801ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab12:	4835      	ldr	r0, [pc, #212]	; (801abe8 <_printf_i+0x244>)
 801ab14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ab18:	6823      	ldr	r3, [r4, #0]
 801ab1a:	680e      	ldr	r6, [r1, #0]
 801ab1c:	061f      	lsls	r7, r3, #24
 801ab1e:	f856 5b04 	ldr.w	r5, [r6], #4
 801ab22:	600e      	str	r6, [r1, #0]
 801ab24:	d514      	bpl.n	801ab50 <_printf_i+0x1ac>
 801ab26:	07d9      	lsls	r1, r3, #31
 801ab28:	bf44      	itt	mi
 801ab2a:	f043 0320 	orrmi.w	r3, r3, #32
 801ab2e:	6023      	strmi	r3, [r4, #0]
 801ab30:	b91d      	cbnz	r5, 801ab3a <_printf_i+0x196>
 801ab32:	6823      	ldr	r3, [r4, #0]
 801ab34:	f023 0320 	bic.w	r3, r3, #32
 801ab38:	6023      	str	r3, [r4, #0]
 801ab3a:	2310      	movs	r3, #16
 801ab3c:	e7b0      	b.n	801aaa0 <_printf_i+0xfc>
 801ab3e:	6823      	ldr	r3, [r4, #0]
 801ab40:	f043 0320 	orr.w	r3, r3, #32
 801ab44:	6023      	str	r3, [r4, #0]
 801ab46:	2378      	movs	r3, #120	; 0x78
 801ab48:	4828      	ldr	r0, [pc, #160]	; (801abec <_printf_i+0x248>)
 801ab4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ab4e:	e7e3      	b.n	801ab18 <_printf_i+0x174>
 801ab50:	065e      	lsls	r6, r3, #25
 801ab52:	bf48      	it	mi
 801ab54:	b2ad      	uxthmi	r5, r5
 801ab56:	e7e6      	b.n	801ab26 <_printf_i+0x182>
 801ab58:	4616      	mov	r6, r2
 801ab5a:	e7bb      	b.n	801aad4 <_printf_i+0x130>
 801ab5c:	680b      	ldr	r3, [r1, #0]
 801ab5e:	6826      	ldr	r6, [r4, #0]
 801ab60:	6960      	ldr	r0, [r4, #20]
 801ab62:	1d1d      	adds	r5, r3, #4
 801ab64:	600d      	str	r5, [r1, #0]
 801ab66:	0635      	lsls	r5, r6, #24
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	d501      	bpl.n	801ab70 <_printf_i+0x1cc>
 801ab6c:	6018      	str	r0, [r3, #0]
 801ab6e:	e002      	b.n	801ab76 <_printf_i+0x1d2>
 801ab70:	0671      	lsls	r1, r6, #25
 801ab72:	d5fb      	bpl.n	801ab6c <_printf_i+0x1c8>
 801ab74:	8018      	strh	r0, [r3, #0]
 801ab76:	2300      	movs	r3, #0
 801ab78:	6123      	str	r3, [r4, #16]
 801ab7a:	4616      	mov	r6, r2
 801ab7c:	e7ba      	b.n	801aaf4 <_printf_i+0x150>
 801ab7e:	680b      	ldr	r3, [r1, #0]
 801ab80:	1d1a      	adds	r2, r3, #4
 801ab82:	600a      	str	r2, [r1, #0]
 801ab84:	681e      	ldr	r6, [r3, #0]
 801ab86:	6862      	ldr	r2, [r4, #4]
 801ab88:	2100      	movs	r1, #0
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	f7e5 fb28 	bl	80001e0 <memchr>
 801ab90:	b108      	cbz	r0, 801ab96 <_printf_i+0x1f2>
 801ab92:	1b80      	subs	r0, r0, r6
 801ab94:	6060      	str	r0, [r4, #4]
 801ab96:	6863      	ldr	r3, [r4, #4]
 801ab98:	6123      	str	r3, [r4, #16]
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aba0:	e7a8      	b.n	801aaf4 <_printf_i+0x150>
 801aba2:	6923      	ldr	r3, [r4, #16]
 801aba4:	4632      	mov	r2, r6
 801aba6:	4649      	mov	r1, r9
 801aba8:	4640      	mov	r0, r8
 801abaa:	47d0      	blx	sl
 801abac:	3001      	adds	r0, #1
 801abae:	d0ab      	beq.n	801ab08 <_printf_i+0x164>
 801abb0:	6823      	ldr	r3, [r4, #0]
 801abb2:	079b      	lsls	r3, r3, #30
 801abb4:	d413      	bmi.n	801abde <_printf_i+0x23a>
 801abb6:	68e0      	ldr	r0, [r4, #12]
 801abb8:	9b03      	ldr	r3, [sp, #12]
 801abba:	4298      	cmp	r0, r3
 801abbc:	bfb8      	it	lt
 801abbe:	4618      	movlt	r0, r3
 801abc0:	e7a4      	b.n	801ab0c <_printf_i+0x168>
 801abc2:	2301      	movs	r3, #1
 801abc4:	4632      	mov	r2, r6
 801abc6:	4649      	mov	r1, r9
 801abc8:	4640      	mov	r0, r8
 801abca:	47d0      	blx	sl
 801abcc:	3001      	adds	r0, #1
 801abce:	d09b      	beq.n	801ab08 <_printf_i+0x164>
 801abd0:	3501      	adds	r5, #1
 801abd2:	68e3      	ldr	r3, [r4, #12]
 801abd4:	9903      	ldr	r1, [sp, #12]
 801abd6:	1a5b      	subs	r3, r3, r1
 801abd8:	42ab      	cmp	r3, r5
 801abda:	dcf2      	bgt.n	801abc2 <_printf_i+0x21e>
 801abdc:	e7eb      	b.n	801abb6 <_printf_i+0x212>
 801abde:	2500      	movs	r5, #0
 801abe0:	f104 0619 	add.w	r6, r4, #25
 801abe4:	e7f5      	b.n	801abd2 <_printf_i+0x22e>
 801abe6:	bf00      	nop
 801abe8:	0801b3c9 	.word	0x0801b3c9
 801abec:	0801b3da 	.word	0x0801b3da

0801abf0 <memmove>:
 801abf0:	4288      	cmp	r0, r1
 801abf2:	b510      	push	{r4, lr}
 801abf4:	eb01 0402 	add.w	r4, r1, r2
 801abf8:	d902      	bls.n	801ac00 <memmove+0x10>
 801abfa:	4284      	cmp	r4, r0
 801abfc:	4623      	mov	r3, r4
 801abfe:	d807      	bhi.n	801ac10 <memmove+0x20>
 801ac00:	1e43      	subs	r3, r0, #1
 801ac02:	42a1      	cmp	r1, r4
 801ac04:	d008      	beq.n	801ac18 <memmove+0x28>
 801ac06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac0e:	e7f8      	b.n	801ac02 <memmove+0x12>
 801ac10:	4402      	add	r2, r0
 801ac12:	4601      	mov	r1, r0
 801ac14:	428a      	cmp	r2, r1
 801ac16:	d100      	bne.n	801ac1a <memmove+0x2a>
 801ac18:	bd10      	pop	{r4, pc}
 801ac1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac22:	e7f7      	b.n	801ac14 <memmove+0x24>

0801ac24 <_free_r>:
 801ac24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac26:	2900      	cmp	r1, #0
 801ac28:	d048      	beq.n	801acbc <_free_r+0x98>
 801ac2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac2e:	9001      	str	r0, [sp, #4]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	f1a1 0404 	sub.w	r4, r1, #4
 801ac36:	bfb8      	it	lt
 801ac38:	18e4      	addlt	r4, r4, r3
 801ac3a:	f000 f8d3 	bl	801ade4 <__malloc_lock>
 801ac3e:	4a20      	ldr	r2, [pc, #128]	; (801acc0 <_free_r+0x9c>)
 801ac40:	9801      	ldr	r0, [sp, #4]
 801ac42:	6813      	ldr	r3, [r2, #0]
 801ac44:	4615      	mov	r5, r2
 801ac46:	b933      	cbnz	r3, 801ac56 <_free_r+0x32>
 801ac48:	6063      	str	r3, [r4, #4]
 801ac4a:	6014      	str	r4, [r2, #0]
 801ac4c:	b003      	add	sp, #12
 801ac4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac52:	f000 b8cd 	b.w	801adf0 <__malloc_unlock>
 801ac56:	42a3      	cmp	r3, r4
 801ac58:	d90b      	bls.n	801ac72 <_free_r+0x4e>
 801ac5a:	6821      	ldr	r1, [r4, #0]
 801ac5c:	1862      	adds	r2, r4, r1
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	bf04      	itt	eq
 801ac62:	681a      	ldreq	r2, [r3, #0]
 801ac64:	685b      	ldreq	r3, [r3, #4]
 801ac66:	6063      	str	r3, [r4, #4]
 801ac68:	bf04      	itt	eq
 801ac6a:	1852      	addeq	r2, r2, r1
 801ac6c:	6022      	streq	r2, [r4, #0]
 801ac6e:	602c      	str	r4, [r5, #0]
 801ac70:	e7ec      	b.n	801ac4c <_free_r+0x28>
 801ac72:	461a      	mov	r2, r3
 801ac74:	685b      	ldr	r3, [r3, #4]
 801ac76:	b10b      	cbz	r3, 801ac7c <_free_r+0x58>
 801ac78:	42a3      	cmp	r3, r4
 801ac7a:	d9fa      	bls.n	801ac72 <_free_r+0x4e>
 801ac7c:	6811      	ldr	r1, [r2, #0]
 801ac7e:	1855      	adds	r5, r2, r1
 801ac80:	42a5      	cmp	r5, r4
 801ac82:	d10b      	bne.n	801ac9c <_free_r+0x78>
 801ac84:	6824      	ldr	r4, [r4, #0]
 801ac86:	4421      	add	r1, r4
 801ac88:	1854      	adds	r4, r2, r1
 801ac8a:	42a3      	cmp	r3, r4
 801ac8c:	6011      	str	r1, [r2, #0]
 801ac8e:	d1dd      	bne.n	801ac4c <_free_r+0x28>
 801ac90:	681c      	ldr	r4, [r3, #0]
 801ac92:	685b      	ldr	r3, [r3, #4]
 801ac94:	6053      	str	r3, [r2, #4]
 801ac96:	4421      	add	r1, r4
 801ac98:	6011      	str	r1, [r2, #0]
 801ac9a:	e7d7      	b.n	801ac4c <_free_r+0x28>
 801ac9c:	d902      	bls.n	801aca4 <_free_r+0x80>
 801ac9e:	230c      	movs	r3, #12
 801aca0:	6003      	str	r3, [r0, #0]
 801aca2:	e7d3      	b.n	801ac4c <_free_r+0x28>
 801aca4:	6825      	ldr	r5, [r4, #0]
 801aca6:	1961      	adds	r1, r4, r5
 801aca8:	428b      	cmp	r3, r1
 801acaa:	bf04      	itt	eq
 801acac:	6819      	ldreq	r1, [r3, #0]
 801acae:	685b      	ldreq	r3, [r3, #4]
 801acb0:	6063      	str	r3, [r4, #4]
 801acb2:	bf04      	itt	eq
 801acb4:	1949      	addeq	r1, r1, r5
 801acb6:	6021      	streq	r1, [r4, #0]
 801acb8:	6054      	str	r4, [r2, #4]
 801acba:	e7c7      	b.n	801ac4c <_free_r+0x28>
 801acbc:	b003      	add	sp, #12
 801acbe:	bd30      	pop	{r4, r5, pc}
 801acc0:	200015d0 	.word	0x200015d0

0801acc4 <_malloc_r>:
 801acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acc6:	1ccd      	adds	r5, r1, #3
 801acc8:	f025 0503 	bic.w	r5, r5, #3
 801accc:	3508      	adds	r5, #8
 801acce:	2d0c      	cmp	r5, #12
 801acd0:	bf38      	it	cc
 801acd2:	250c      	movcc	r5, #12
 801acd4:	2d00      	cmp	r5, #0
 801acd6:	4606      	mov	r6, r0
 801acd8:	db01      	blt.n	801acde <_malloc_r+0x1a>
 801acda:	42a9      	cmp	r1, r5
 801acdc:	d903      	bls.n	801ace6 <_malloc_r+0x22>
 801acde:	230c      	movs	r3, #12
 801ace0:	6033      	str	r3, [r6, #0]
 801ace2:	2000      	movs	r0, #0
 801ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ace6:	f000 f87d 	bl	801ade4 <__malloc_lock>
 801acea:	4921      	ldr	r1, [pc, #132]	; (801ad70 <_malloc_r+0xac>)
 801acec:	680a      	ldr	r2, [r1, #0]
 801acee:	4614      	mov	r4, r2
 801acf0:	b99c      	cbnz	r4, 801ad1a <_malloc_r+0x56>
 801acf2:	4f20      	ldr	r7, [pc, #128]	; (801ad74 <_malloc_r+0xb0>)
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	b923      	cbnz	r3, 801ad02 <_malloc_r+0x3e>
 801acf8:	4621      	mov	r1, r4
 801acfa:	4630      	mov	r0, r6
 801acfc:	f000 f862 	bl	801adc4 <_sbrk_r>
 801ad00:	6038      	str	r0, [r7, #0]
 801ad02:	4629      	mov	r1, r5
 801ad04:	4630      	mov	r0, r6
 801ad06:	f000 f85d 	bl	801adc4 <_sbrk_r>
 801ad0a:	1c43      	adds	r3, r0, #1
 801ad0c:	d123      	bne.n	801ad56 <_malloc_r+0x92>
 801ad0e:	230c      	movs	r3, #12
 801ad10:	6033      	str	r3, [r6, #0]
 801ad12:	4630      	mov	r0, r6
 801ad14:	f000 f86c 	bl	801adf0 <__malloc_unlock>
 801ad18:	e7e3      	b.n	801ace2 <_malloc_r+0x1e>
 801ad1a:	6823      	ldr	r3, [r4, #0]
 801ad1c:	1b5b      	subs	r3, r3, r5
 801ad1e:	d417      	bmi.n	801ad50 <_malloc_r+0x8c>
 801ad20:	2b0b      	cmp	r3, #11
 801ad22:	d903      	bls.n	801ad2c <_malloc_r+0x68>
 801ad24:	6023      	str	r3, [r4, #0]
 801ad26:	441c      	add	r4, r3
 801ad28:	6025      	str	r5, [r4, #0]
 801ad2a:	e004      	b.n	801ad36 <_malloc_r+0x72>
 801ad2c:	6863      	ldr	r3, [r4, #4]
 801ad2e:	42a2      	cmp	r2, r4
 801ad30:	bf0c      	ite	eq
 801ad32:	600b      	streq	r3, [r1, #0]
 801ad34:	6053      	strne	r3, [r2, #4]
 801ad36:	4630      	mov	r0, r6
 801ad38:	f000 f85a 	bl	801adf0 <__malloc_unlock>
 801ad3c:	f104 000b 	add.w	r0, r4, #11
 801ad40:	1d23      	adds	r3, r4, #4
 801ad42:	f020 0007 	bic.w	r0, r0, #7
 801ad46:	1ac2      	subs	r2, r0, r3
 801ad48:	d0cc      	beq.n	801ace4 <_malloc_r+0x20>
 801ad4a:	1a1b      	subs	r3, r3, r0
 801ad4c:	50a3      	str	r3, [r4, r2]
 801ad4e:	e7c9      	b.n	801ace4 <_malloc_r+0x20>
 801ad50:	4622      	mov	r2, r4
 801ad52:	6864      	ldr	r4, [r4, #4]
 801ad54:	e7cc      	b.n	801acf0 <_malloc_r+0x2c>
 801ad56:	1cc4      	adds	r4, r0, #3
 801ad58:	f024 0403 	bic.w	r4, r4, #3
 801ad5c:	42a0      	cmp	r0, r4
 801ad5e:	d0e3      	beq.n	801ad28 <_malloc_r+0x64>
 801ad60:	1a21      	subs	r1, r4, r0
 801ad62:	4630      	mov	r0, r6
 801ad64:	f000 f82e 	bl	801adc4 <_sbrk_r>
 801ad68:	3001      	adds	r0, #1
 801ad6a:	d1dd      	bne.n	801ad28 <_malloc_r+0x64>
 801ad6c:	e7cf      	b.n	801ad0e <_malloc_r+0x4a>
 801ad6e:	bf00      	nop
 801ad70:	200015d0 	.word	0x200015d0
 801ad74:	200015d4 	.word	0x200015d4

0801ad78 <_realloc_r>:
 801ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad7a:	4607      	mov	r7, r0
 801ad7c:	4614      	mov	r4, r2
 801ad7e:	460e      	mov	r6, r1
 801ad80:	b921      	cbnz	r1, 801ad8c <_realloc_r+0x14>
 801ad82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ad86:	4611      	mov	r1, r2
 801ad88:	f7ff bf9c 	b.w	801acc4 <_malloc_r>
 801ad8c:	b922      	cbnz	r2, 801ad98 <_realloc_r+0x20>
 801ad8e:	f7ff ff49 	bl	801ac24 <_free_r>
 801ad92:	4625      	mov	r5, r4
 801ad94:	4628      	mov	r0, r5
 801ad96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad98:	f000 f830 	bl	801adfc <_malloc_usable_size_r>
 801ad9c:	42a0      	cmp	r0, r4
 801ad9e:	d20f      	bcs.n	801adc0 <_realloc_r+0x48>
 801ada0:	4621      	mov	r1, r4
 801ada2:	4638      	mov	r0, r7
 801ada4:	f7ff ff8e 	bl	801acc4 <_malloc_r>
 801ada8:	4605      	mov	r5, r0
 801adaa:	2800      	cmp	r0, #0
 801adac:	d0f2      	beq.n	801ad94 <_realloc_r+0x1c>
 801adae:	4631      	mov	r1, r6
 801adb0:	4622      	mov	r2, r4
 801adb2:	f7ff fbe3 	bl	801a57c <memcpy>
 801adb6:	4631      	mov	r1, r6
 801adb8:	4638      	mov	r0, r7
 801adba:	f7ff ff33 	bl	801ac24 <_free_r>
 801adbe:	e7e9      	b.n	801ad94 <_realloc_r+0x1c>
 801adc0:	4635      	mov	r5, r6
 801adc2:	e7e7      	b.n	801ad94 <_realloc_r+0x1c>

0801adc4 <_sbrk_r>:
 801adc4:	b538      	push	{r3, r4, r5, lr}
 801adc6:	4d06      	ldr	r5, [pc, #24]	; (801ade0 <_sbrk_r+0x1c>)
 801adc8:	2300      	movs	r3, #0
 801adca:	4604      	mov	r4, r0
 801adcc:	4608      	mov	r0, r1
 801adce:	602b      	str	r3, [r5, #0]
 801add0:	f7e8 fbe2 	bl	8003598 <_sbrk>
 801add4:	1c43      	adds	r3, r0, #1
 801add6:	d102      	bne.n	801adde <_sbrk_r+0x1a>
 801add8:	682b      	ldr	r3, [r5, #0]
 801adda:	b103      	cbz	r3, 801adde <_sbrk_r+0x1a>
 801addc:	6023      	str	r3, [r4, #0]
 801adde:	bd38      	pop	{r3, r4, r5, pc}
 801ade0:	20002018 	.word	0x20002018

0801ade4 <__malloc_lock>:
 801ade4:	4801      	ldr	r0, [pc, #4]	; (801adec <__malloc_lock+0x8>)
 801ade6:	f000 b811 	b.w	801ae0c <__retarget_lock_acquire_recursive>
 801adea:	bf00      	nop
 801adec:	20002020 	.word	0x20002020

0801adf0 <__malloc_unlock>:
 801adf0:	4801      	ldr	r0, [pc, #4]	; (801adf8 <__malloc_unlock+0x8>)
 801adf2:	f000 b80c 	b.w	801ae0e <__retarget_lock_release_recursive>
 801adf6:	bf00      	nop
 801adf8:	20002020 	.word	0x20002020

0801adfc <_malloc_usable_size_r>:
 801adfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae00:	1f18      	subs	r0, r3, #4
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	bfbc      	itt	lt
 801ae06:	580b      	ldrlt	r3, [r1, r0]
 801ae08:	18c0      	addlt	r0, r0, r3
 801ae0a:	4770      	bx	lr

0801ae0c <__retarget_lock_acquire_recursive>:
 801ae0c:	4770      	bx	lr

0801ae0e <__retarget_lock_release_recursive>:
 801ae0e:	4770      	bx	lr

0801ae10 <_init>:
 801ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae12:	bf00      	nop
 801ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae16:	bc08      	pop	{r3}
 801ae18:	469e      	mov	lr, r3
 801ae1a:	4770      	bx	lr

0801ae1c <_fini>:
 801ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae1e:	bf00      	nop
 801ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae22:	bc08      	pop	{r3}
 801ae24:	469e      	mov	lr, r3
 801ae26:	4770      	bx	lr
