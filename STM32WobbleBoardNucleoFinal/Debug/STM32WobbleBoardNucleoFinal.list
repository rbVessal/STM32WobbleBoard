
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08017768  08017768  00027768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cc0  08017cc0  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08017cc0  08017cc0  00027cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cc8  08017cc8  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017cc8  08017cc8  00027cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ccc  08017ccc  00027ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08017cd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001920  20000168  08017e38  00030168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  08017e38  00031a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fd93  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006219  00000000  00000000  0007ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c70  00000000  00000000  00086148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a20  00000000  00000000  00088db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030fc2  00000000  00000000  0008b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c716  00000000  00000000  000bc79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f799  00000000  00000000  000e8eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f8649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6f4  00000000  00000000  001f869c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08017750 	.word	0x08017750

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	08017750 	.word	0x08017750

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	// TODO Auto-generated constructor stub

}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f005 f955 	bl	8006140 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 8000e96:	f001 fd55 	bl	8002944 <MX_TIM3_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fbdd 	bl	800165c <_ZN14WobbleBoardApp10TIM_ConfigEm>

	InitInertialSensors();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f850 	bl	8000f48 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ea8:	f001 f880 	bl	8001fac <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f001 f938 	bl	8002122 <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f014 fbe4 	bl	8015684 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000ebc:	7e3b      	ldrb	r3, [r7, #24]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d132      	bne.n	8000f28 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000f44 <_ZN14WobbleBoardApp4InitEv+0xbc>
 8000eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ece:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000ed2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 2a90 	vmov	r2, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000f44 <_ZN14WobbleBoardApp4InitEv+0xbc>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8000ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efa:	ee17 2a90 	vmov	r2, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f06:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f44 <_ZN14WobbleBoardApp4InitEv+0xbc>
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fa75 	bl	8001418 <_ZN14WobbleBoardApp8DWT_InitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8000f2e:	f000 fcbd 	bl	80018ac <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	43fa0000 	.word	0x43fa0000

08000f48 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 8000f50:	f000 fe94 	bl	8001c7c <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f54:	f000 fe9a 	bl	8001c8c <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 8000f58:	f000 fea0 	bl	8001c9c <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f5c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000f74 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 8000f60:	f000 ff13 	bl	8001d8a <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f64:	2004      	movs	r0, #4
 8000f66:	f000 ff1f 	bl	8001da8 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	42c80000 	.word	0x42c80000

08000f78 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	6018      	str	r0, [r3, #0]
	TMsg msg_dat;
	TMsg msg_cmd;

	if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fbbd 	bl	8001708 <UART_ReceivedMSG>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <_ZN14WobbleBoardApp7ProcessEv+0x3e>
	{
		if (msg_cmd.Data[0] == DEV_ADDR)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	791b      	ldrb	r3, [r3, #4]
 8000fa4:	2b32      	cmp	r3, #50	; 0x32
 8000fa6:	d106      	bne.n	8000fb6 <_ZN14WobbleBoardApp7ProcessEv+0x3e>
		{
		  HandleMSG((TMsg *)&msg_cmd);
 8000fa8:	f107 0208 	add.w	r2, r7, #8
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4611      	mov	r1, r2
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f000 fabb 	bl	800152c <_ZN14WobbleBoardApp9HandleMSGEP4TMsg>
		}
	}

	if (MagCalRequest == 1U)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d017      	beq.n	8000ffe <_ZN14WobbleBoardApp7ProcessEv+0x86>
	{
		MagCalRequest = 0;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f001 f892 	bl	8002122 <MotionFX_manager_MagCal_start>
	}

	if (SensorReadRequest == 1U)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d030      	beq.n	8001078 <_ZN14WobbleBoardApp7ProcessEv+0x100>
	{
		SensorReadRequest = 0;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Acquire data from enabled sensors and fill Msg stream */
		//RTC_Handler(&msg_dat);
		Accelero_Sensor_Handler(&msg_dat);
 8001020:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4611      	mov	r1, r2
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f000 f82a 	bl	8001082 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>
		Gyro_Sensor_Handler(&msg_dat);
 800102e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4611      	mov	r1, r2
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	f000 f84b 	bl	80010d2 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>
		Magneto_Sensor_Handler(&msg_dat);
 800103c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4611      	mov	r1, r2
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f000 f86d 	bl	8001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>

		/* Sensor Fusion specific part */
		FX_Data_Handler(&msg_dat);
 800104a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4611      	mov	r1, r2
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f000 f91a 	bl	800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>

		/* Send data stream */
		Init_Streaming_Header(&msg_dat);
 8001058:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4611      	mov	r1, r2
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	f000 fa31 	bl	80014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>
		// Message length is taken from last index of msg data
		// in FX_Data Handler and add 4 to that
		msg_dat.Len = STREAMING_MSG_LENGTH;
 8001066:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800106a:	226b      	movs	r2, #107	; 0x6b
 800106c:	601a      	str	r2, [r3, #0]

		UART_SendMsg(&msg_dat);
 800106e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fbfe 	bl	8001874 <UART_SendMsg>
	}
}
 8001078:	bf00      	nop
 800107a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>:
    SensorReadRequest = 1;
  }
}

void WobbleBoardApp::Accelero_Sensor_Handler(TMsg* Msg)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
//	if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
//	{

		BSP_SENSOR_ACC_GetAxes(&AccValue);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3310      	adds	r3, #16
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fe53 	bl	8001d3c <BSP_SENSOR_ACC_GetAxes>

		Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	1dd8      	adds	r0, r3, #7
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	f001 f9df 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f103 000b 	add.w	r0, r3, #11
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2204      	movs	r2, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	f001 f9d6 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f103 000f 	add.w	r0, r3, #15
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	f001 f9cd 	bl	8002464 <Serialize_s32>
//	}
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Gyro_Sensor_Handler(TMsg* Msg)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
//	if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
//	{
		BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	331c      	adds	r3, #28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe38 	bl	8001d56 <BSP_SENSOR_GYR_GetAxes>

		Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f103 0013 	add.w	r0, r3, #19
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2204      	movs	r2, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	f001 f9b6 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f103 0017 	add.w	r0, r3, #23
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2204      	movs	r2, #4
 8001104:	4619      	mov	r1, r3
 8001106:	f001 f9ad 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[23], GyrValue.z, 4);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f103 001b 	add.w	r0, r3, #27
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	f001 f9a4 	bl	8002464 <Serialize_s32>
//	}
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Magneto_Sensor_Handler(TMsg* Msg)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

//	if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
//	{
		BSP_SENSOR_MAG_GetAxes(&MagValue);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3328      	adds	r3, #40	; 0x28
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fe1c 	bl	8001d70 <BSP_SENSOR_MAG_GetAxes>

		if (MagCalStatus == 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d16d      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
		{
			mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]
			mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	edc7 7a08 	vstr	s15, [r7, #32]
			mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			mag_data_in.time_stamp = (int)TimeStamp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
			TimeStamp += (uint32_t)ALGO_PERIOD;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	f103 020a 	add.w	r2, r3, #10
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

			MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 ffad 	bl	8002104 <MotionFX_manager_MagCal_run>

			if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80011aa:	7e3b      	ldrb	r3, [r7, #24]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d135      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
			{
				MagCalStatus = 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]

				ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80011b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				MagOffset.x = (int32_t)ans_float;
 80011c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 2a90 	vmov	r2, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
				ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80011d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				MagOffset.y = (int32_t)ans_float;
 80011e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 2a90 	vmov	r2, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
				ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 80011f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001202:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				MagOffset.z = (int32_t)ans_float;
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 2a90 	vmov	r2, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60da      	str	r2, [r3, #12]

				/* Disable magnetometer calibration */
				MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 ff8f 	bl	800213a <MotionFX_manager_MagCal_stop>
			}
		}

		MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
		MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
		MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30

		Serialize_s32(&Msg->Data[27], MagValue.x, 4);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f103 001f 	add.w	r0, r3, #31
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	f001 f906 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[31], MagValue.y, 4);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f103 0023 	add.w	r0, r3, #35	; 0x23
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	f001 f8fd 	bl	8002464 <Serialize_s32>
		Serialize_s32(&Msg->Data[35], MagValue.z, 4);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f103 0027 	add.w	r0, r3, #39	; 0x27
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	2204      	movs	r2, #4
 8001276:	4619      	mov	r1, r3
 8001278:	f001 f8f4 	bl	8002464 <Serialize_s32>
//	}
}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	3b03126f 	.word	0x3b03126f
 8001288:	43fa0000 	.word	0x43fa0000

0800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>:

void WobbleBoardApp::FX_Data_Handler(TMsg* Msg)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09e      	sub	sp, #120	; 0x78
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	uint32_t elapsed_time_us = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 800129a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800129e:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	66fb      	str	r3, [r7, #108]	; 0x6c
//		if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
//		{
//			if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
//			{
				/* Convert angular velocity from [mdps] to [dps] */
				data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

				/* Convert acceleration from [mg] to [g] */
				data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

				/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
				data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

				/* Run Sensor Fusion algorithm */
				DWT_Start();
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f864 	bl	800144c <_ZN14WobbleBoardApp9DWT_StartEv>
				MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8001384:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001414 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x188>
 8001388:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800138a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800138c:	f000 fe66 	bl	800205c <MotionFX_manager_run>
				elapsed_time_us = DWT_Stop();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f871 	bl	8001478 <_ZN14WobbleBoardApp8DWT_StopEv>
 8001396:	6778      	str	r0, [r7, #116]	; 0x74

				(void)memcpy(&Msg->Data[39], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 800139e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a0:	330c      	adds	r3, #12
 80013a2:	2210      	movs	r2, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	f016 f901 	bl	80175ac <memcpy>
				(void)memcpy(&Msg->Data[55], (void *)pdata_out->rotation, 3U * sizeof(float));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	333b      	adds	r3, #59	; 0x3b
 80013ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013b0:	220c      	movs	r2, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f016 f8fa 	bl	80175ac <memcpy>
				(void)memcpy(&Msg->Data[71], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f103 004b 	add.w	r0, r3, #75	; 0x4b
 80013be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c0:	331c      	adds	r3, #28
 80013c2:	220c      	movs	r2, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	f016 f8f1 	bl	80175ac <memcpy>
				(void)memcpy(&Msg->Data[83], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	3328      	adds	r3, #40	; 0x28
 80013d4:	220c      	movs	r2, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	f016 f8e8 	bl	80175ac <memcpy>

				(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3363      	adds	r3, #99	; 0x63
 80013e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013e2:	3234      	adds	r2, #52	; 0x34
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
				(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3367      	adds	r3, #103	; 0x67
 80013ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ee:	3238      	adds	r2, #56	; 0x38
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]

				Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	336b      	adds	r3, #107	; 0x6b
 80013f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013fa:	2204      	movs	r2, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 f831 	bl	8002464 <Serialize_s32>
//			}
//		}
//	}
}
 8001402:	bf00      	nop
 8001404:	3778      	adds	r7, #120	; 0x78
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	3a83126f 	.word	0x3a83126f
 8001410:	3b03126f 	.word	0x3b03126f
 8001414:	3c23d70a 	.word	0x3c23d70a

08001418 <_ZN14WobbleBoardApp8DWT_InitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWT_Init()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000edf0 	.word	0xe000edf0
 8001448:	e0001000 	.word	0xe0001000

0800144c <_ZN14WobbleBoardApp9DWT_StartEv>:

void WobbleBoardApp::DWT_Start()
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e0001000 	.word	0xe0001000

08001478 <_ZN14WobbleBoardApp8DWT_StopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWT_Stop()
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <_ZN14WobbleBoardApp8DWT_StopEv+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <_ZN14WobbleBoardApp8DWT_StopEv+0x4c>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e0001000 	.word	0xe0001000
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>:

void WobbleBoardApp::Init_Streaming_Header(TMsg* Msg)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2232      	movs	r2, #50	; 0x32
 80014e2:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2208      	movs	r2, #8
 80014e8:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2203      	movs	r2, #3
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZN14WobbleBoardApp18Build_Reply_HeaderEP4TMsg>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void WobbleBoardApp::Build_Reply_Header(TMsg *Msg)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  Msg->Data[0] = Msg->Data[1];
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	795a      	ldrb	r2, [r3, #5]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2232      	movs	r2, #50	; 0x32
 8001512:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	799b      	ldrb	r3, [r3, #6]
 8001518:	3b80      	subs	r3, #128	; 0x80
 800151a:	b2da      	uxtb	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	719a      	strb	r2, [r3, #6]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_ZN14WobbleBoardApp9HandleMSGEP4TMsg>:
 * @brief  Handle a message
 * @param  Msg the pointer to the message to be handled
 * @retval 1 if the message is correctly handled, 0 otherwise
 */
int WobbleBoardApp::HandleMSG(TMsg* Msg)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
  int hasHandledMessage = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]

  if (Msg->Len < 2U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d801      	bhi.n	8001546 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x1a>
  {
	return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e084      	b.n	8001650 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x124>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	2b32      	cmp	r3, #50	; 0x32
 800154c:	d001      	beq.n	8001552 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x26>
  {
	return 0;
 800154e:	2300      	movs	r3, #0
 8001550:	e07e      	b.n	8001650 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x124>
  }

  switch (Msg->Data[2])   /* CMD */
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	799b      	ldrb	r3, [r3, #6]
 8001556:	2b09      	cmp	r3, #9
 8001558:	d031      	beq.n	80015be <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x92>
 800155a:	2b09      	cmp	r3, #9
 800155c:	dc74      	bgt.n	8001648 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x11c>
 800155e:	2b07      	cmp	r3, #7
 8001560:	d051      	beq.n	8001606 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0xda>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d170      	bne.n	8001648 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x11c>
//	  UART_SendMsg(Msg);
//	  break;

	case CMD_Start_Data_Streaming:
	{
	  if (Msg->Len < 3U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d801      	bhi.n	8001572 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x46>
	  {
		return 0;
 800156e:	2300      	movs	r3, #0
 8001570:	e06e      	b.n	8001650 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x124>
	  }

	  SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3307      	adds	r3, #7
 8001576:	2104      	movs	r1, #4
 8001578:	4618      	mov	r0, r3
 800157a:	f000 ff4d 	bl	8002418 <Deserialize>
 800157e:	4602      	mov	r2, r0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c

	  /* Start enabled sensors */
//	  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
//	  {
		BSP_SENSOR_ACC_Enable();
 8001584:	f000 fb92 	bl	8001cac <BSP_SENSOR_ACC_Enable>
//	  }

//	  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
//	  {
		BSP_SENSOR_GYR_Enable();
 8001588:	f000 fb98 	bl	8001cbc <BSP_SENSOR_GYR_Enable>
//	  }

//	  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
//	  {
		BSP_SENSOR_MAG_Enable();
 800158c:	f000 fb9e 	bl	8001ccc <BSP_SENSOR_MAG_Enable>
//	  }

	  HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8001590:	4831      	ldr	r0, [pc, #196]	; (8001658 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x12c>)
 8001592:	f008 fa03 	bl	800999c <HAL_TIM_Base_Start_IT>
	  DataLoggerActive = 1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	  DataStreamingDest = Msg->Data[1];
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	795a      	ldrb	r2, [r3, #5]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  Build_Reply_Header(Msg);
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa6 	bl	80014fc <_ZN14WobbleBoardApp18Build_Reply_HeaderEP4TMsg>
	  Msg->Len = 3;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2203      	movs	r2, #3
 80015b4:	601a      	str	r2, [r3, #0]
	  UART_SendMsg(Msg);
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f000 f95c 	bl	8001874 <UART_SendMsg>
	  break;
 80015bc:	e047      	b.n	800164e <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x122>
	}

	case CMD_Stop_Data_Streaming:
	{
	  if (Msg->Len < 3U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d801      	bhi.n	80015ca <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x9e>
	  {
		return 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e042      	b.n	8001650 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x124>
	  }

	  DataLoggerActive = 0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	  HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 80015d2:	4821      	ldr	r0, [pc, #132]	; (8001658 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x12c>)
 80015d4:	f008 fa52 	bl	8009a7c <HAL_TIM_Base_Stop_IT>

	  /* Disable all sensors */
	  BSP_SENSOR_ACC_Disable();
 80015d8:	f000 fb80 	bl	8001cdc <BSP_SENSOR_ACC_Disable>
	  BSP_SENSOR_GYR_Disable();
 80015dc:	f000 fb86 	bl	8001cec <BSP_SENSOR_GYR_Disable>
	  BSP_SENSOR_MAG_Disable();
 80015e0:	f000 fb8c 	bl	8001cfc <BSP_SENSOR_MAG_Disable>
	  BSP_SENSOR_PRESS_Disable();
 80015e4:	f000 fb92 	bl	8001d0c <BSP_SENSOR_PRESS_Disable>
	  BSP_SENSOR_TEMP_Disable();
 80015e8:	f000 fb98 	bl	8001d1c <BSP_SENSOR_TEMP_Disable>
	  BSP_SENSOR_HUM_Disable();
 80015ec:	f000 fb9e 	bl	8001d2c <BSP_SENSOR_HUM_Disable>

	  SensorsEnabled = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c

	  Build_Reply_Header(Msg);
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff7f 	bl	80014fc <_ZN14WobbleBoardApp18Build_Reply_HeaderEP4TMsg>
	  UART_SendMsg(Msg);
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f000 f938 	bl	8001874 <UART_SendMsg>
	  break;
 8001604:	e023      	b.n	800164e <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x122>
	}

	case CMD_ChangeSF:
	{
		if (Msg->Len < 3U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d801      	bhi.n	8001612 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0xe6>
		{
			return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e01e      	b.n	8001650 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x124>
		}

		Enabled6X = Msg->Data[3];
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	79da      	ldrb	r2, [r3, #7]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		if (Enabled6X == 1U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001622:	2b01      	cmp	r3, #1
 8001624:	d104      	bne.n	8001630 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x104>
		{
			MotionFX_manager_stop_9X();
 8001626:	f000 fd63 	bl	80020f0 <MotionFX_manager_stop_9X>
			MotionFX_manager_start_6X();
 800162a:	f000 fd43 	bl	80020b4 <MotionFX_manager_start_6X>
 800162e:	e003      	b.n	8001638 <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x10c>
		}
		else
		{
			MotionFX_manager_stop_6X();
 8001630:	f000 fd4a 	bl	80020c8 <MotionFX_manager_stop_6X>
			MotionFX_manager_start_9X();
 8001634:	f000 fd52 	bl	80020dc <MotionFX_manager_start_9X>
		}

		Build_Reply_Header(Msg);
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff5e 	bl	80014fc <_ZN14WobbleBoardApp18Build_Reply_HeaderEP4TMsg>
		UART_SendMsg(Msg);
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f000 f917 	bl	8001874 <UART_SendMsg>
		break;
 8001646:	e002      	b.n	800164e <_ZN14WobbleBoardApp9HandleMSGEP4TMsg+0x122>
	}

	default:
	{
		hasHandledMessage = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
		break;
 800164c:	bf00      	nop
	}
  }

  return hasHandledMessage;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20001520 	.word	0x20001520

0800165c <_ZN14WobbleBoardApp10TIM_ConfigEm>:

void WobbleBoardApp::TIM_Config(uint32_t Freq)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8001666:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800166a:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x70>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x74>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	09db      	lsrs	r3, r3, #7
 8001678:	3b01      	subs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800167c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80016aa:	f008 f91f 	bl	80098ec <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf14      	ite	ne
 80016b4:	2301      	movne	r3, #1
 80016b6:	2300      	moveq	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x66>
  {
    Error_Handler();
 80016be:	f000 fc6f 	bl	8001fa0 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	10624dd3 	.word	0x10624dd3
 80016d4:	20001520 	.word	0x20001520

080016d8 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d102      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20001520 	.word	0x20001520
 8001704:	200005d1 	.word	0x200005d1

08001708 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8001714:	4b54      	ldr	r3, [pc, #336]	; (8001868 <UART_ReceivedMSG+0x160>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f8e1 	bl	80018e0 <Get_DMA_Flag_Status>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 809c 	bne.w	800185e <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8001726:	4b50      	ldr	r3, [pc, #320]	; (8001868 <UART_ReceivedMSG+0x160>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f9ca 	bl	8001ac4 <Get_DMA_Counter>
 8001730:	4603      	mov	r3, r0
 8001732:	b29b      	uxth	r3, r3
 8001734:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001738:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <UART_ReceivedMSG+0x164>)
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	8bba      	ldrh	r2, [r7, #28]
 8001740:	429a      	cmp	r2, r3
 8001742:	d305      	bcc.n	8001750 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001744:	4b49      	ldr	r3, [pc, #292]	; (800186c <UART_ReceivedMSG+0x164>)
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	8bba      	ldrh	r2, [r7, #28]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	843b      	strh	r3, [r7, #32]
 800174e:	e007      	b.n	8001760 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <UART_ReceivedMSG+0x164>)
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	8bba      	ldrh	r2, [r7, #28]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800175e:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <UART_ReceivedMSG+0x164>)
 8001762:	889b      	ldrh	r3, [r3, #4]
 8001764:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 8001766:	2300      	movs	r3, #0
 8001768:	847b      	strh	r3, [r7, #34]	; 0x22
 800176a:	e06d      	b.n	8001848 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 800176c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <UART_ReceivedMSG+0x168>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	76fb      	strb	r3, [r7, #27]
      j++;
 8001774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001776:	3301      	adds	r3, #1
 8001778:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 800177a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d301      	bcc.n	8001786 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 8001786:	7efb      	ldrb	r3, [r7, #27]
 8001788:	2bf0      	cmp	r3, #240	; 0xf0
 800178a:	d15a      	bne.n	8001842 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <UART_ReceivedMSG+0x164>)
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 8001792:	2300      	movs	r3, #0
 8001794:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001796:	e03a      	b.n	800180e <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8001798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800179a:	3301      	adds	r3, #1
 800179c:	b29b      	uxth	r3, r3
 800179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a2:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d904      	bls.n	80017b4 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <UART_ReceivedMSG+0x164>)
 80017ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017ae:	8093      	strh	r3, [r2, #4]
            return 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e055      	b.n	8001860 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 80017b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <UART_ReceivedMSG+0x168>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 80017bc:	8b3b      	ldrh	r3, [r7, #24]
 80017be:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <UART_ReceivedMSG+0x168>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 80017c4:	8bfb      	ldrh	r3, [r7, #30]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 80017ce:	7db9      	ldrb	r1, [r7, #22]
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fda4 	bl	8002322 <ReverseByteStuffCopyByte2>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <UART_ReceivedMSG+0x164>)
 80017e6:	8b3b      	ldrh	r3, [r7, #24]
 80017e8:	8093      	strh	r3, [r2, #4]
            return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e038      	b.n	8001860 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fc:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 80017fe:	8bfb      	ldrh	r3, [r7, #30]
 8001800:	3301      	adds	r3, #1
 8001802:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	b29a      	uxth	r2, r3
 8001808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800180a:	4413      	add	r3, r2
 800180c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800180e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001812:	429a      	cmp	r2, r3
 8001814:	d3c0      	bcc.n	8001798 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001816:	8bfa      	ldrh	r2, [r7, #30]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800181c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001826:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <UART_ReceivedMSG+0x164>)
 800182a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800182c:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fdc8 	bl	80023c4 <CHK_CheckAndRemove>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <UART_ReceivedMSG+0x136>
        {
          return 1;
 800183a:	2301      	movs	r3, #1
 800183c:	e010      	b.n	8001860 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 800183e:	2300      	movs	r3, #0
 8001840:	e00e      	b.n	8001860 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001844:	3301      	adds	r3, #1
 8001846:	847b      	strh	r3, [r7, #34]	; 0x22
 8001848:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800184a:	8c3b      	ldrh	r3, [r7, #32]
 800184c:	429a      	cmp	r2, r3
 800184e:	d38d      	bcc.n	800176c <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8001850:	8c3b      	ldrh	r3, [r7, #32]
 8001852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001856:	d902      	bls.n	800185e <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <UART_ReceivedMSG+0x164>)
 800185a:	8bbb      	ldrh	r3, [r7, #28]
 800185c:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200015c8 	.word	0x200015c8
 800186c:	20001484 	.word	0x20001484
 8001870:	20001284 	.word	0x20001284

08001874 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fd77 	bl	8002370 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <UART_SendMsg+0x30>)
 8001886:	f000 fd1e 	bl	80022c6 <ByteStuffCopy>
 800188a:	4603      	mov	r3, r0
 800188c:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800188e:	89fa      	ldrh	r2, [r7, #14]
 8001890:	f241 3388 	movw	r3, #5000	; 0x1388
 8001894:	4903      	ldr	r1, [pc, #12]	; (80018a4 <UART_SendMsg+0x30>)
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <UART_SendMsg+0x34>)
 8001898:	f008 fd62 	bl	800a360 <HAL_UART_Transmit>
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200005d4 	.word	0x200005d4
 80018a8:	200015c8 	.word	0x200015c8

080018ac <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <UART_StartReceiveMsg+0x2c>)
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <UART_StartReceiveMsg+0x30>)
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <UART_StartReceiveMsg+0x2c>)
 80018b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <UART_StartReceiveMsg+0x2c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <UART_StartReceiveMsg+0x30>)
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <UART_StartReceiveMsg+0x2c>)
 80018d0:	f008 fdda 	bl	800a488 <HAL_UART_Receive_DMA>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200015c8 	.word	0x200015c8
 80018dc:	20001284 	.word	0x20001284

080018e0 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <Get_DMA_Flag_Status+0x1a8>)
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d961      	bls.n	80019b8 <Get_DMA_Flag_Status+0xd8>
 80018f4:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <Get_DMA_Flag_Status+0x1ac>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4964      	ldr	r1, [pc, #400]	; (8001a90 <Get_DMA_Flag_Status+0x1b0>)
 80018fe:	428b      	cmp	r3, r1
 8001900:	d057      	beq.n	80019b2 <Get_DMA_Flag_Status+0xd2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4963      	ldr	r1, [pc, #396]	; (8001a94 <Get_DMA_Flag_Status+0x1b4>)
 8001908:	428b      	cmp	r3, r1
 800190a:	d050      	beq.n	80019ae <Get_DMA_Flag_Status+0xce>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4961      	ldr	r1, [pc, #388]	; (8001a98 <Get_DMA_Flag_Status+0x1b8>)
 8001912:	428b      	cmp	r3, r1
 8001914:	d049      	beq.n	80019aa <Get_DMA_Flag_Status+0xca>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4960      	ldr	r1, [pc, #384]	; (8001a9c <Get_DMA_Flag_Status+0x1bc>)
 800191c:	428b      	cmp	r3, r1
 800191e:	d042      	beq.n	80019a6 <Get_DMA_Flag_Status+0xc6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	495e      	ldr	r1, [pc, #376]	; (8001aa0 <Get_DMA_Flag_Status+0x1c0>)
 8001926:	428b      	cmp	r3, r1
 8001928:	d03a      	beq.n	80019a0 <Get_DMA_Flag_Status+0xc0>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	495d      	ldr	r1, [pc, #372]	; (8001aa4 <Get_DMA_Flag_Status+0x1c4>)
 8001930:	428b      	cmp	r3, r1
 8001932:	d032      	beq.n	800199a <Get_DMA_Flag_Status+0xba>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	495b      	ldr	r1, [pc, #364]	; (8001aa8 <Get_DMA_Flag_Status+0x1c8>)
 800193a:	428b      	cmp	r3, r1
 800193c:	d02a      	beq.n	8001994 <Get_DMA_Flag_Status+0xb4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	495a      	ldr	r1, [pc, #360]	; (8001aac <Get_DMA_Flag_Status+0x1cc>)
 8001944:	428b      	cmp	r3, r1
 8001946:	d022      	beq.n	800198e <Get_DMA_Flag_Status+0xae>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4958      	ldr	r1, [pc, #352]	; (8001ab0 <Get_DMA_Flag_Status+0x1d0>)
 800194e:	428b      	cmp	r3, r1
 8001950:	d01a      	beq.n	8001988 <Get_DMA_Flag_Status+0xa8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4957      	ldr	r1, [pc, #348]	; (8001ab4 <Get_DMA_Flag_Status+0x1d4>)
 8001958:	428b      	cmp	r3, r1
 800195a:	d012      	beq.n	8001982 <Get_DMA_Flag_Status+0xa2>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4955      	ldr	r1, [pc, #340]	; (8001ab8 <Get_DMA_Flag_Status+0x1d8>)
 8001962:	428b      	cmp	r3, r1
 8001964:	d00a      	beq.n	800197c <Get_DMA_Flag_Status+0x9c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4954      	ldr	r1, [pc, #336]	; (8001abc <Get_DMA_Flag_Status+0x1dc>)
 800196c:	428b      	cmp	r3, r1
 800196e:	d102      	bne.n	8001976 <Get_DMA_Flag_Status+0x96>
 8001970:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001974:	e01e      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 8001976:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800197a:	e01b      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 800197c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001980:	e018      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 8001982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001986:	e015      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 8001988:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800198c:	e012      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 800198e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001992:	e00f      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 8001994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001998:	e00c      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 800199a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800199e:	e009      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 80019a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a4:	e006      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	e004      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	e002      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e000      	b.n	80019b4 <Get_DMA_Flag_Status+0xd4>
 80019b2:	2308      	movs	r3, #8
 80019b4:	4013      	ands	r3, r2
 80019b6:	e060      	b.n	8001a7a <Get_DMA_Flag_Status+0x19a>
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <Get_DMA_Flag_Status+0x1e0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4933      	ldr	r1, [pc, #204]	; (8001a90 <Get_DMA_Flag_Status+0x1b0>)
 80019c2:	428b      	cmp	r3, r1
 80019c4:	d057      	beq.n	8001a76 <Get_DMA_Flag_Status+0x196>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4932      	ldr	r1, [pc, #200]	; (8001a94 <Get_DMA_Flag_Status+0x1b4>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d050      	beq.n	8001a72 <Get_DMA_Flag_Status+0x192>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4930      	ldr	r1, [pc, #192]	; (8001a98 <Get_DMA_Flag_Status+0x1b8>)
 80019d6:	428b      	cmp	r3, r1
 80019d8:	d049      	beq.n	8001a6e <Get_DMA_Flag_Status+0x18e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	492f      	ldr	r1, [pc, #188]	; (8001a9c <Get_DMA_Flag_Status+0x1bc>)
 80019e0:	428b      	cmp	r3, r1
 80019e2:	d042      	beq.n	8001a6a <Get_DMA_Flag_Status+0x18a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <Get_DMA_Flag_Status+0x1c0>)
 80019ea:	428b      	cmp	r3, r1
 80019ec:	d03a      	beq.n	8001a64 <Get_DMA_Flag_Status+0x184>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <Get_DMA_Flag_Status+0x1c4>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d032      	beq.n	8001a5e <Get_DMA_Flag_Status+0x17e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <Get_DMA_Flag_Status+0x1c8>)
 80019fe:	428b      	cmp	r3, r1
 8001a00:	d02a      	beq.n	8001a58 <Get_DMA_Flag_Status+0x178>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4929      	ldr	r1, [pc, #164]	; (8001aac <Get_DMA_Flag_Status+0x1cc>)
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d022      	beq.n	8001a52 <Get_DMA_Flag_Status+0x172>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <Get_DMA_Flag_Status+0x1d0>)
 8001a12:	428b      	cmp	r3, r1
 8001a14:	d01a      	beq.n	8001a4c <Get_DMA_Flag_Status+0x16c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4926      	ldr	r1, [pc, #152]	; (8001ab4 <Get_DMA_Flag_Status+0x1d4>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d012      	beq.n	8001a46 <Get_DMA_Flag_Status+0x166>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4924      	ldr	r1, [pc, #144]	; (8001ab8 <Get_DMA_Flag_Status+0x1d8>)
 8001a26:	428b      	cmp	r3, r1
 8001a28:	d00a      	beq.n	8001a40 <Get_DMA_Flag_Status+0x160>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4923      	ldr	r1, [pc, #140]	; (8001abc <Get_DMA_Flag_Status+0x1dc>)
 8001a30:	428b      	cmp	r3, r1
 8001a32:	d102      	bne.n	8001a3a <Get_DMA_Flag_Status+0x15a>
 8001a34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a38:	e01e      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a3e:	e01b      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a44:	e018      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a4a:	e015      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a50:	e012      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a56:	e00f      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5c:	e00c      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a62:	e009      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a68:	e006      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	e004      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	e002      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e000      	b.n	8001a78 <Get_DMA_Flag_Status+0x198>
 8001a76:	2308      	movs	r3, #8
 8001a78:	4013      	ands	r3, r2
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40020080 	.word	0x40020080
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020008 	.word	0x40020008
 8001a94:	40020408 	.word	0x40020408
 8001a98:	4002001c 	.word	0x4002001c
 8001a9c:	4002041c 	.word	0x4002041c
 8001aa0:	40020030 	.word	0x40020030
 8001aa4:	40020430 	.word	0x40020430
 8001aa8:	40020044 	.word	0x40020044
 8001aac:	40020444 	.word	0x40020444
 8001ab0:	40020058 	.word	0x40020058
 8001ab4:	40020458 	.word	0x40020458
 8001ab8:	4002006c 	.word	0x4002006c
 8001abc:	4002046c 	.word	0x4002046c
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <MX_CRC_Init+0x40>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_CRC_Init+0x3c>)
 8001b0a:	f004 fd85 	bl	8006618 <HAL_CRC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001b14:	f000 fa44 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000148c 	.word	0x2000148c
 8001b20:	40023000 	.word	0x40023000

08001b24 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_CRC_MspInit+0x38>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10b      	bne.n	8001b4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b40:	6493      	str	r3, [r2, #72]	; 0x48
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023000 	.word	0x40023000
 8001b60:	40021000 	.word	0x40021000

08001b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6493      	str	r3, [r2, #72]	; 0x48
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2010      	movs	r0, #16
 8001b88:	f004 fd0f 	bl	80065aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b8c:	2010      	movs	r0, #16
 8001b8e:	f004 fd28 	bl	80065e2 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_GPIO_Init+0xd4>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f005 fa7b 	bl	8007118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <MX_GPIO_Init+0xd8>)
 8001c3a:	f004 ffcf 	bl	8006bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c58:	f004 ffc0 	bl	8006bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2028      	movs	r0, #40	; 0x28
 8001c62:	f004 fca2 	bl	80065aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c66:	2028      	movs	r0, #40	; 0x28
 8001c68:	f004 fcbb 	bl	80065e2 <HAL_NVIC_EnableIRQ>

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800

08001c7c <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001c80:	2102      	movs	r1, #2
 8001c82:	2000      	movs	r0, #0
 8001c84:	f003 fe0a 	bl	800589c <IKS01A2_MOTION_SENSOR_Init>
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001c90:	2101      	movs	r1, #1
 8001c92:	2000      	movs	r0, #0
 8001c94:	f003 fe02 	bl	800589c <IKS01A2_MOTION_SENSOR_Init>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f003 fdfa 	bl	800589c <IKS01A2_MOTION_SENSOR_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f003 feee 	bl	8005a94 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f003 fee6 	bl	8005a94 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	2002      	movs	r0, #2
 8001cd4:	f003 fede 	bl	8005a94 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f003 ff18 	bl	8005b18 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f003 ff10 	bl	8005b18 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001d00:	2104      	movs	r1, #4
 8001d02:	2002      	movs	r0, #2
 8001d04:	f003 ff08 	bl	8005b18 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8001d10:	2102      	movs	r1, #2
 8001d12:	2001      	movs	r0, #1
 8001d14:	f003 fd80 	bl	8005818 <IKS01A2_ENV_SENSOR_Disable>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_TEMPERATURE);
 8001d20:	2101      	movs	r1, #1
 8001d22:	2000      	movs	r0, #0
 8001d24:	f003 fd78 	bl	8005818 <IKS01A2_ENV_SENSOR_Disable>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  (void)IKS01A2_ENV_SENSOR_Disable(IKS01A2_HTS221_0, ENV_HUMIDITY);
 8001d30:	2104      	movs	r1, #4
 8001d32:	2000      	movs	r0, #0
 8001d34:	f003 fd70 	bl	8005818 <IKS01A2_ENV_SENSOR_Disable>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	2102      	movs	r1, #2
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f003 ff27 	bl	8005b9c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	2101      	movs	r1, #1
 8001d62:	2000      	movs	r0, #0
 8001d64:	f003 ff1a 	bl	8005b9c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f003 ff0d 	bl	8005b9c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001d94:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d98:	2102      	movs	r1, #2
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f003 ff42 	bl	8005c24 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	2102      	movs	r1, #2
 8001db4:	2000      	movs	r0, #0
 8001db6:	f003 ff7b 	bl	8005cb0 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	226e      	movs	r2, #110	; 0x6e
 8001dce:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	2277      	movs	r2, #119	; 0x77
 8001dd6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	2275      	movs	r2, #117	; 0x75
 8001dde:	701a      	strb	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	226e      	movs	r2, #110	; 0x6e
 8001df8:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	2277      	movs	r2, #119	; 0x77
 8001e00:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3302      	adds	r3, #2
 8001e06:	2275      	movs	r2, #117	; 0x75
 8001e08:	701a      	strb	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	226e      	movs	r2, #110	; 0x6e
 8001e22:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3301      	adds	r3, #1
 8001e28:	2265      	movs	r2, #101	; 0x65
 8001e2a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	2275      	movs	r2, #117	; 0x75
 8001e32:	701a      	strb	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e46:	f004 fa59 	bl	80062fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4a:	f000 f818 	bl	8001e7e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4e:	f7ff fea7 	bl	8001ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e52:	f7ff fe87 	bl	8001b64 <MX_DMA_Init>
  MX_CRC_Init();
 8001e56:	f7ff fe43 	bl	8001ae0 <MX_CRC_Init>
  MX_RTC_Init();
 8001e5a:	f000 f97b 	bl	8002154 <MX_RTC_Init>
//  MX_USART2_UART_Init();
  //MX_I2C1_Init();
//  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  //MX_MEMS_Init();
  WobbleBoardApp* wobbleBoard = new WobbleBoardApp();
 8001e5e:	2044      	movs	r0, #68	; 0x44
 8001e60:	f013 fc4c 	bl	80156fc <_Znwj>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461c      	mov	r4, r3
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe ffe5 	bl	8000e38 <_ZN14WobbleBoardAppC1Ev>
 8001e6e:	607c      	str	r4, [r7, #4]
  wobbleBoard->Init();
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff f809 	bl	8000e88 <_ZN14WobbleBoardApp4InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MX_MEMS_Process();
	  wobbleBoard->Process();
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f87e 	bl	8000f78 <_ZN14WobbleBoardApp7ProcessEv>
 8001e7c:	e7fb      	b.n	8001e76 <main+0x36>

08001e7e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b096      	sub	sp, #88	; 0x58
 8001e82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2244      	movs	r2, #68	; 0x44
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f015 fb9b 	bl	80175c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ea0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ea4:	f005 ffce 	bl	8007e44 <HAL_PWREx_ControlVoltageScaling>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001eb8:	f000 f872 	bl	8001fa0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001eda:	230a      	movs	r3, #10
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ede:	2307      	movs	r3, #7
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 fffe 	bl	8007ef0 <HAL_RCC_OscConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001f04:	f000 f84c 	bl	8001fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f08:	230f      	movs	r3, #15
 8001f0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 fbcb 	bl	80086bc <HAL_RCC_ClockConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001f36:	f000 f833 	bl	8001fa0 <Error_Handler>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3758      	adds	r7, #88	; 0x58
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	d115      	bne.n	8001f82 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001f58:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_EXTI_Callback+0x34>
		{
			iIsUserCalibrationLEDOn = 1;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x54>)
 8001f74:	60fb      	str	r3, [r7, #12]
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_EXTI_Callback+0x3e>
			iIsUserCalibrationLEDOn = 0;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x58>)
 8001f80:	60fb      	str	r3, [r7, #12]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	08017768 	.word	0x08017768
 8001f94:	200007d4 	.word	0x200007d4
 8001f98:	0801776c 	.word	0x0801776c
 8001f9c:	0801778c 	.word	0x0801778c

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <Error_Handler+0x8>
	...

08001fac <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001fb0:	f012 fdea 	bl	8014b88 <MotionFX_GetStateSize>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001fba:	d901      	bls.n	8001fc0 <MotionFX_manager_init+0x14>
    Error_Handler();
 8001fbc:	f7ff fff0 	bl	8001fa0 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001fc0:	4821      	ldr	r0, [pc, #132]	; (8002048 <MotionFX_manager_init+0x9c>)
 8001fc2:	f012 fde5 	bl	8014b90 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MotionFX_manager_init+0xa0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481e      	ldr	r0, [pc, #120]	; (8002048 <MotionFX_manager_init+0x9c>)
 8001fce:	f012 fec3 	bl	8014d58 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MotionFX_manager_init+0xa0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	331d      	adds	r3, #29
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fef2 	bl	8001dc2 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <MotionFX_manager_init+0xa0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3321      	adds	r3, #33	; 0x21
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff01 	bl	8001dec <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <MotionFX_manager_init+0xa0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3325      	adds	r3, #37	; 0x25
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff10 	bl	8001e16 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <MotionFX_manager_init+0xa0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MotionFX_manager_init+0xa4>)
 8001ffc:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MotionFX_manager_init+0xa0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <MotionFX_manager_init+0xa8>)
 8002004:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MotionFX_manager_init+0xa0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <MotionFX_manager_init+0xac>)
 800200c:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MotionFX_manager_init+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MotionFX_manager_init+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <MotionFX_manager_init+0xa0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <MotionFX_manager_init+0xa0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <MotionFX_manager_init+0x9c>)
 8002030:	f012 fe48 	bl	8014cc4 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002034:	2100      	movs	r1, #0
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <MotionFX_manager_init+0x9c>)
 8002038:	f012 feca 	bl	8014dd0 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 800203c:	2100      	movs	r1, #0
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <MotionFX_manager_init+0x9c>)
 8002040:	f012 fee6 	bl	8014e10 <MotionFX_enable_9X>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000080c 	.word	0x2000080c
 800204c:	20000004 	.word	0x20000004
 8002050:	3ac88a48 	.word	0x3ac88a48
 8002054:	3b83126f 	.word	0x3b83126f
 8002058:	3b449ba6 	.word	0x3b449ba6

0800205c <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MotionFX_manager_run+0x4c>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MotionFX_manager_run+0x50>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d10e      	bne.n	8002094 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MotionFX_manager_run+0x54>)
 800207e:	f012 fef7 	bl	8014e70 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4808      	ldr	r0, [pc, #32]	; (80020b0 <MotionFX_manager_run+0x54>)
 800208e:	f012 fedf 	bl	8014e50 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002092:	e004      	b.n	800209e <MotionFX_manager_run+0x42>
    discardedCount++;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <MotionFX_manager_run+0x4c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <MotionFX_manager_run+0x4c>)
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000808 	.word	0x20000808
 80020ac:	20000008 	.word	0x20000008
 80020b0:	2000080c 	.word	0x2000080c

080020b4 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <MotionFX_manager_start_6X+0x10>)
 80020bc:	f012 fe88 	bl	8014dd0 <MotionFX_enable_6X>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000080c 	.word	0x2000080c

080020c8 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80020cc:	2100      	movs	r1, #0
 80020ce:	4802      	ldr	r0, [pc, #8]	; (80020d8 <MotionFX_manager_stop_6X+0x10>)
 80020d0:	f012 fe7e 	bl	8014dd0 <MotionFX_enable_6X>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000080c 	.word	0x2000080c

080020dc <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80020e0:	2101      	movs	r1, #1
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <MotionFX_manager_start_9X+0x10>)
 80020e4:	f012 fe94 	bl	8014e10 <MotionFX_enable_9X>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000080c 	.word	0x2000080c

080020f0 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80020f4:	2100      	movs	r1, #0
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <MotionFX_manager_stop_9X+0x10>)
 80020f8:	f012 fe8a 	bl	8014e10 <MotionFX_enable_9X>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000080c 	.word	0x2000080c

08002104 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f013 f896 	bl	8015240 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	f013 fab5 	bl	8015684 <MotionFX_MagCal_getParams>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800212a:	2101      	movs	r1, #1
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f012 fff1 	bl	8015114 <MotionFX_MagCal_init>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002142:	2100      	movs	r1, #0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f012 ffe5 	bl	8015114 <MotionFX_MagCal_init>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002168:	2300      	movs	r3, #0
 800216a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <MX_RTC_Init+0xb0>)
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <MX_RTC_Init+0xb4>)
 8002170:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_RTC_Init+0xb0>)
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <MX_RTC_Init+0xb0>)
 800217a:	227f      	movs	r2, #127	; 0x7f
 800217c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_RTC_Init+0xb0>)
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_RTC_Init+0xb0>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_RTC_Init+0xb0>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_RTC_Init+0xb0>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_RTC_Init+0xb0>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800219c:	4819      	ldr	r0, [pc, #100]	; (8002204 <MX_RTC_Init+0xb0>)
 800219e:	f007 f94f 	bl	8009440 <HAL_RTC_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80021a8:	f7ff fefa 	bl	8001fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2201      	movs	r2, #1
 80021c4:	4619      	mov	r1, r3
 80021c6:	480f      	ldr	r0, [pc, #60]	; (8002204 <MX_RTC_Init+0xb0>)
 80021c8:	f007 f9b5 	bl	8009536 <HAL_RTC_SetTime>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80021d2:	f7ff fee5 	bl	8001fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021d6:	2301      	movs	r3, #1
 80021d8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80021da:	2301      	movs	r3, #1
 80021dc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80021de:	2301      	movs	r3, #1
 80021e0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	2201      	movs	r2, #1
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_RTC_Init+0xb0>)
 80021ee:	f007 fa3f 	bl	8009670 <HAL_RTC_SetDate>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80021f8:	f7ff fed2 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200014b0 	.word	0x200014b0
 8002208:	40002800 	.word	0x40002800

0800220c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0a4      	sub	sp, #144	; 0x90
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	2288      	movs	r2, #136	; 0x88
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f015 f9d3 	bl	80175c8 <memset>
  if(rtcHandle->Instance==RTC)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_RTC_MspInit+0x5c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d118      	bne.n	800225e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f006 fc42 	bl	8008ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800224a:	f7ff fea9 	bl	8001fa0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_RTC_MspInit+0x60>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_RTC_MspInit+0x60>)
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800225e:	bf00      	nop
 8002260:	3790      	adds	r7, #144	; 0x90
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40002800 	.word	0x40002800
 800226c:	40021000 	.word	0x40021000

08002270 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800227c:	2302      	movs	r3, #2
 800227e:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2bf0      	cmp	r3, #240	; 0xf0
 8002284:	d002      	beq.n	800228c <ByteStuffCopyByte+0x1c>
 8002286:	2bf1      	cmp	r3, #241	; 0xf1
 8002288:	d008      	beq.n	800229c <ByteStuffCopyByte+0x2c>
 800228a:	e00f      	b.n	80022ac <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	22f1      	movs	r2, #241	; 0xf1
 8002290:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3301      	adds	r3, #1
 8002296:	22f2      	movs	r2, #242	; 0xf2
 8002298:	701a      	strb	r2, [r3, #0]
      break;
 800229a:	e00d      	b.n	80022b8 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	22f1      	movs	r2, #241	; 0xf1
 80022a0:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3301      	adds	r3, #1
 80022a6:	22f1      	movs	r2, #241	; 0xf1
 80022a8:	701a      	strb	r2, [r3, #0]
      break;
 80022aa:	e005      	b.n	80022b8 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	701a      	strb	r2, [r3, #0]
      ret = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      break;
 80022b6:	bf00      	nop
  }

  return ret;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e011      	b.n	80022fe <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	18d0      	adds	r0, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7ff ffc0 	bl	8002270 <ByteStuffCopyByte>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3e8      	bcc.n	80022da <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	22f0      	movs	r2, #240	; 0xf0
 8002310:	701a      	strb	r2, [r3, #0]
  count++;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3301      	adds	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
  return count;
 8002318:	68bb      	ldr	r3, [r7, #8]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	603a      	str	r2, [r7, #0]
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	460b      	mov	r3, r1
 8002330:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2bf1      	cmp	r3, #241	; 0xf1
 8002336:	d111      	bne.n	800235c <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2bf1      	cmp	r3, #241	; 0xf1
 800233c:	d104      	bne.n	8002348 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	22f1      	movs	r2, #241	; 0xf1
 8002342:	701a      	strb	r2, [r3, #0]
      return 2;
 8002344:	2302      	movs	r3, #2
 8002346:	e00d      	b.n	8002364 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	2bf2      	cmp	r3, #242	; 0xf2
 800234c:	d104      	bne.n	8002358 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	22f0      	movs	r2, #240	; 0xf0
 8002352:	701a      	strb	r2, [r3, #0]
      return 2;
 8002354:	2302      	movs	r3, #2
 8002356:	e005      	b.n	8002364 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8002358:	2300      	movs	r3, #0
 800235a:	e003      	b.n	8002364 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	701a      	strb	r2, [r3, #0]
    return 1;
 8002362:	2301      	movs	r3, #1
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	e00a      	b.n	8002398 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3ef      	bcc.n	8002382 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	e00a      	b.n	80023ec <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	4413      	add	r3, r2
 80023e4:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3ef      	bcc.n	80023d6 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1e5a      	subs	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002432:	e00d      	b.n	8002450 <Deserialize+0x38>
  {
    app <<= 8;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ee      	bne.n	8002434 <Deserialize+0x1c>
  }

  return app;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e00f      	b.n	8002496 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4413      	add	r3, r2
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d3eb      	bcc.n	8002476 <Serialize_s32+0x12>
  }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_MspInit+0x44>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6613      	str	r3, [r2, #96]	; 0x60
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_MspInit+0x44>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_MspInit+0x44>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_MspInit+0x44>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <NMI_Handler+0x4>

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <MemManage_Handler+0x4>

08002506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <UsageFault_Handler+0x4>

08002512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002540:	f003 ff38 	bl	80063b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Channel6_IRQHandler+0x10>)
 800254e:	f004 fa65 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20001580 	.word	0x20001580

0800255c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM3_IRQHandler+0x10>)
 8002562:	f007 faba 	bl	8009ada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20001520 	.word	0x20001520

08002570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002574:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002578:	f004 fde6 	bl	8007148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <BSP_I2C1_Init+0x70>)
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <BSP_I2C1_Init+0x74>)
 800258e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <BSP_I2C1_Init+0x78>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	4918      	ldr	r1, [pc, #96]	; (80025f8 <BSP_I2C1_Init+0x78>)
 8002598:	600a      	str	r2, [r1, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d122      	bne.n	80025e4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <BSP_I2C1_Init+0x70>)
 80025a0:	f005 f8ea 	bl	8007778 <HAL_I2C_GetState>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11c      	bne.n	80025e4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80025aa:	4811      	ldr	r0, [pc, #68]	; (80025f0 <BSP_I2C1_Init+0x70>)
 80025ac:	f000 f8fe 	bl	80027ac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80025b6:	480e      	ldr	r0, [pc, #56]	; (80025f0 <BSP_I2C1_Init+0x70>)
 80025b8:	f000 f8b4 	bl	8002724 <MX_I2C1_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80025c2:	f06f 0307 	mvn.w	r3, #7
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	e00c      	b.n	80025e4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ca:	2100      	movs	r1, #0
 80025cc:	4808      	ldr	r0, [pc, #32]	; (80025f0 <BSP_I2C1_Init+0x70>)
 80025ce:	f005 fb93 	bl	8007cf8 <HAL_I2CEx_ConfigAnalogFilter>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80025d8:	f06f 0307 	mvn.w	r3, #7
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	e001      	b.n	80025e4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200014d4 	.word	0x200014d4
 80025f4:	40005400 	.word	0x40005400
 80025f8:	2000118c 	.word	0x2000118c

080025fc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <BSP_I2C1_DeInit+0x48>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d014      	beq.n	8002638 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <BSP_I2C1_DeInit+0x48>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3b01      	subs	r3, #1
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <BSP_I2C1_DeInit+0x48>)
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <BSP_I2C1_DeInit+0x48>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002620:	4809      	ldr	r0, [pc, #36]	; (8002648 <BSP_I2C1_DeInit+0x4c>)
 8002622:	f000 f909 	bl	8002838 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <BSP_I2C1_DeInit+0x4c>)
 8002628:	f004 fe35 	bl	8007296 <HAL_I2C_DeInit>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002632:	f06f 0307 	mvn.w	r3, #7
 8002636:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000118c 	.word	0x2000118c
 8002648:	200014d4 	.word	0x200014d4

0800264c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af04      	add	r7, sp, #16
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	460b      	mov	r3, r1
 800265c:	81bb      	strh	r3, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002666:	89ba      	ldrh	r2, [r7, #12]
 8002668:	89f9      	ldrh	r1, [r7, #14]
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2301      	movs	r3, #1
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <BSP_I2C1_WriteReg+0x60>)
 800267c:	f004 fe4e 	bl	800731c <HAL_I2C_Mem_Write>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <BSP_I2C1_WriteReg+0x60>)
 8002688:	f005 f884 	bl	8007794 <HAL_I2C_GetError>
 800268c:	4603      	mov	r3, r0
 800268e:	2b04      	cmp	r3, #4
 8002690:	d103      	bne.n	800269a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002692:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e002      	b.n	80026a0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800269a:	f06f 0303 	mvn.w	r3, #3
 800269e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80026a0:	697b      	ldr	r3, [r7, #20]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200014d4 	.word	0x200014d4

080026b0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	81fb      	strh	r3, [r7, #14]
 80026be:	460b      	mov	r3, r1
 80026c0:	81bb      	strh	r3, [r7, #12]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80026ca:	89ba      	ldrh	r2, [r7, #12]
 80026cc:	89f9      	ldrh	r1, [r7, #14]
 80026ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	480c      	ldr	r0, [pc, #48]	; (8002710 <BSP_I2C1_ReadReg+0x60>)
 80026e0:	f004 ff30 	bl	8007544 <HAL_I2C_Mem_Read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80026ea:	4809      	ldr	r0, [pc, #36]	; (8002710 <BSP_I2C1_ReadReg+0x60>)
 80026ec:	f005 f852 	bl	8007794 <HAL_I2C_GetError>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d103      	bne.n	80026fe <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e002      	b.n	8002704 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026fe:	f06f 0303 	mvn.w	r3, #3
 8002702:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002704:	697b      	ldr	r3, [r7, #20]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200014d4 	.word	0x200014d4

08002714 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002718:	f003 fe60 	bl	80063dc <HAL_GetTick>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <MX_I2C1_Init+0x80>)
 8002734:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <MX_I2C1_Init+0x84>)
 800273a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f004 fd06 	bl	8007178 <HAL_I2C_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002776:	2100      	movs	r1, #0
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f005 fabd 	bl	8007cf8 <HAL_I2CEx_ConfigAnalogFilter>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002788:	2100      	movs	r1, #0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f005 faff 	bl	8007d8e <HAL_I2CEx_ConfigDigitalFilter>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40005400 	.word	0x40005400
 80027a8:	10909cec 	.word	0x10909cec

080027ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <I2C1_MspInit+0x84>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <I2C1_MspInit+0x84>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <I2C1_MspInit+0x84>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80027cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d2:	2312      	movs	r3, #18
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80027de:	2304      	movs	r3, #4
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4619      	mov	r1, r3
 80027e8:	4812      	ldr	r0, [pc, #72]	; (8002834 <I2C1_MspInit+0x88>)
 80027ea:	f004 f9f7 	bl	8006bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80027ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f4:	2312      	movs	r3, #18
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002800:	2304      	movs	r3, #4
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	480a      	ldr	r0, [pc, #40]	; (8002834 <I2C1_MspInit+0x88>)
 800280c:	f004 f9e6 	bl	8006bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <I2C1_MspInit+0x84>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <I2C1_MspInit+0x84>)
 8002816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <I2C1_MspInit+0x84>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	48000400 	.word	0x48000400

08002838 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <I2C1_MspDeInit+0x30>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <I2C1_MspDeInit+0x30>)
 8002846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800284c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002850:	4806      	ldr	r0, [pc, #24]	; (800286c <I2C1_MspDeInit+0x34>)
 8002852:	f004 fb6d 	bl	8006f30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800285a:	4804      	ldr	r0, [pc, #16]	; (800286c <I2C1_MspDeInit+0x34>)
 800285c:	f004 fb68 	bl	8006f30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	48000400 	.word	0x48000400

08002870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
	return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_kill>:

int _kill(int pid, int sig)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800288a:	f014 fe5d 	bl	8017548 <__errno>
 800288e:	4603      	mov	r3, r0
 8002890:	2216      	movs	r2, #22
 8002892:	601a      	str	r2, [r3, #0]
	return -1;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_exit>:

void _exit (int status)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ffe7 	bl	8002880 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028b2:	e7fe      	b.n	80028b2 <_exit+0x12>

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f014 fe30 	bl	8017548 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20018000 	.word	0x20018000
 8002914:	00000400 	.word	0x00000400
 8002918:	20001190 	.word	0x20001190
 800291c:	20001a88 	.word	0x20001a88

08002920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <SystemInit+0x20>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <SystemInit+0x20>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0310 	add.w	r3, r7, #16
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_TIM3_Init+0x94>)
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <MX_TIM3_Init+0x98>)
 8002966:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM3_Init+0x94>)
 800296a:	2200      	movs	r2, #0
 800296c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <MX_TIM3_Init+0x94>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <MX_TIM3_Init+0x94>)
 8002976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800297a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_TIM3_Init+0x94>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <MX_TIM3_Init+0x94>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <MX_TIM3_Init+0x94>)
 800298a:	f006 ffaf 	bl	80098ec <HAL_TIM_Base_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002994:	f7ff fb04 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM3_Init+0x94>)
 80029a6:	f007 f9b7 	bl	8009d18 <HAL_TIM_ConfigClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80029b0:	f7ff faf6 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM3_Init+0x94>)
 80029c2:	f007 fbcf 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029cc:	f7ff fae8 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20001520 	.word	0x20001520
 80029dc:	40000400 	.word	0x40000400

080029e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_TIM_Base_MspInit+0x44>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d113      	bne.n	8002a1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_TIM_Base_MspInit+0x48>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_TIM_Base_MspInit+0x48>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_TIM_Base_MspInit+0x48>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	201d      	movs	r0, #29
 8002a10:	f003 fdcb 	bl	80065aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a14:	201d      	movs	r0, #29
 8002a16:	f003 fde4 	bl	80065e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40021000 	.word	0x40021000

08002a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a30:	f7ff ff76 	bl	8002920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	; (8002a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <LoopForever+0xe>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <LoopForever+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f014 fd7b 	bl	8017554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5e:	f7ff f9ef 	bl	8001e40 <main>

08002a62 <LoopForever>:

LoopForever:
    b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002a70:	08017cd0 	.word	0x08017cd0
  ldr r2, =_sbss
 8002a74:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002a78:	20001a88 	.word	0x20001a88

08002a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_2_IRQHandler>
	...

08002a80 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e04d      	b.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7b1a      	ldrb	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002ad8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002ade:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e020      	b.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4798      	blx	r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e016      	b.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d112      	bne.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	461a      	mov	r2, r3
 8002b24:	2123      	movs	r1, #35	; 0x23
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fb55 	bl	80031d6 <LSM303AGR_ACC_Write_Reg>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e000      	b.n	8002b3a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002b38:	68fb      	ldr	r3, [r7, #12]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080039e5 	.word	0x080039e5
 8002b48:	08003a47 	.word	0x08003a47

08002b4c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	331c      	adds	r3, #28
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 f94a 	bl	8003df4 <lsm303agr_xl_block_data_update_set>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e02c      	b.n	8002bc6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	331c      	adds	r3, #28
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 faed 	bl	8004152 <lsm303agr_xl_fifo_mode_set>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	e020      	b.n	8002bc6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2205      	movs	r2, #5
 8002b88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	331c      	adds	r3, #28
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f84e 	bl	8003c34 <lsm303agr_xl_data_rate_set>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e010      	b.n	8002bc6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	331c      	adds	r3, #28
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 f8c4 	bl	8003d38 <lsm303agr_xl_full_scale_set>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e004      	b.n	8002bc6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f87c 	bl	8002cd4 <LSM303AGR_ACC_Disable>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e008      	b.n	8002bfa <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	331c      	adds	r3, #28
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fa55 	bl	80040c2 <lsm303agr_xl_device_id_get>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e000      	b.n	8002c26 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002c70:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	43c80000 	.word	0x43c80000

08002c8c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e014      	b.n	8002ccc <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f103 021c 	add.w	r2, r3, #28
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 ffbf 	bl	8003c34 <lsm303agr_xl_data_rate_set>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e004      	b.n	8002ccc <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e01f      	b.n	8002d2a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f103 021c 	add.w	r2, r3, #28
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	332a      	adds	r3, #42	; 0x2a
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 ffc2 	bl	8003c80 <lsm303agr_xl_data_rate_get>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e010      	b.n	8002d2a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	331c      	adds	r3, #28
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 ff90 	bl	8003c34 <lsm303agr_xl_data_rate_set>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e004      	b.n	8002d2a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	331c      	adds	r3, #28
 8002d44:	f107 020b 	add.w	r2, r7, #11
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 ff3e 	bl	8003bcc <lsm303agr_xl_operating_mode_get>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e031      	b.n	8002dc0 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d01a      	beq.n	8002d98 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	dc22      	bgt.n	8002dac <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00a      	beq.n	8002d84 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002d6e:	e01d      	b.n	8002dac <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fca8 	bl	80036c8 <LSM303AGR_ACC_GetSensitivityHR>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01a      	beq.n	8002db4 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e01d      	b.n	8002dc0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fce4 	bl	8003754 <LSM303AGR_ACC_GetSensitivityNM>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	e013      	b.n	8002dc0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fd20 	bl	80037e0 <LSM303AGR_ACC_GetSensitivityLP>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e009      	b.n	8002dc0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	60fb      	str	r3, [r7, #12]
      break;
 8002db2:	e004      	b.n	8002dbe <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002dbc:	bf00      	nop
  }

  return ret;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	331c      	adds	r3, #28
 8002dda:	f107 020b 	add.w	r2, r7, #11
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fef3 	bl	8003bcc <lsm303agr_xl_operating_mode_get>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	e09d      	b.n	8002f2e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	331c      	adds	r3, #28
 8002df6:	f107 020a 	add.w	r2, r7, #10
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ff3f 	bl	8003c80 <lsm303agr_xl_data_rate_get>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	e08f      	b.n	8002f2e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d147      	bne.n	8002ea4 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002e14:	7abb      	ldrb	r3, [r7, #10]
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d840      	bhi.n	8002e9c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e49 	.word	0x08002e49
 8002e24:	08002e53 	.word	0x08002e53
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e6d 	.word	0x08002e6d
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e85 	.word	0x08002e85
 8002e40:	08002e8d 	.word	0x08002e8d
 8002e44:	08002e95 	.word	0x08002e95
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
        break;
 8002e50:	e06c      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e58:	601a      	str	r2, [r3, #0]
        break;
 8002e5a:	e067      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002e60:	601a      	str	r2, [r3, #0]
        break;
 8002e62:	e063      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4a35      	ldr	r2, [pc, #212]	; (8002f3c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002e68:	601a      	str	r2, [r3, #0]
        break;
 8002e6a:	e05f      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002e70:	601a      	str	r2, [r3, #0]
        break;
 8002e72:	e05b      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002e78:	601a      	str	r2, [r3, #0]
        break;
 8002e7a:	e057      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4a32      	ldr	r2, [pc, #200]	; (8002f48 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002e80:	601a      	str	r2, [r3, #0]
        break;
 8002e82:	e053      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002e88:	601a      	str	r2, [r3, #0]
        break;
 8002e8a:	e04f      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002e90:	601a      	str	r2, [r3, #0]
        break;
 8002e92:	e04b      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002e98:	601a      	str	r2, [r3, #0]
        break;
 8002e9a:	e047      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	60fb      	str	r3, [r7, #12]
        break;
 8002ea2:	e043      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002ea4:	7abb      	ldrb	r3, [r7, #10]
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	d83c      	bhi.n	8002f24 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002ef5 	.word	0x08002ef5
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002f05 	.word	0x08002f05
 8002ec8:	08002f0d 	.word	0x08002f0d
 8002ecc:	08002f15 	.word	0x08002f15
 8002ed0:	08002f25 	.word	0x08002f25
 8002ed4:	08002f1d 	.word	0x08002f1d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
        break;
 8002ee0:	e024      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ee8:	601a      	str	r2, [r3, #0]
        break;
 8002eea:	e01f      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002ef0:	601a      	str	r2, [r3, #0]
        break;
 8002ef2:	e01b      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002ef8:	601a      	str	r2, [r3, #0]
        break;
 8002efa:	e017      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002f00:	601a      	str	r2, [r3, #0]
        break;
 8002f02:	e013      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002f08:	601a      	str	r2, [r3, #0]
        break;
 8002f0a:	e00f      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002f10:	601a      	str	r2, [r3, #0]
        break;
 8002f12:	e00b      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002f18:	601a      	str	r2, [r3, #0]
        break;
 8002f1a:	e007      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002f20:	601a      	str	r2, [r3, #0]
        break;
 8002f22:	e003      	b.n	8002f2c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	bf00      	nop
    }
  }

  return ret;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	41200000 	.word	0x41200000
 8002f3c:	41c80000 	.word	0x41c80000
 8002f40:	42480000 	.word	0x42480000
 8002f44:	42c80000 	.word	0x42c80000
 8002f48:	43480000 	.word	0x43480000
 8002f4c:	43c80000 	.word	0x43c80000
 8002f50:	44ca8000 	.word	0x44ca8000
 8002f54:	45a80000 	.word	0x45a80000
 8002f58:	44a80000 	.word	0x44a80000

08002f5c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d106      	bne.n	8002f80 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002f72:	ed97 0a00 	vldr	s0, [r7]
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fc78 	bl	800386c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	e005      	b.n	8002f8c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002f80:	ed97 0a00 	vldr	s0, [r7]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fcd3 	bl	8003930 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002f8a:	4603      	mov	r3, r0
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	331c      	adds	r3, #28
 8002fa6:	f107 020b 	add.w	r2, r7, #11
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fee9 	bl	8003d84 <lsm303agr_xl_full_scale_get>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	e023      	b.n	8003006 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002fbe:	7afb      	ldrb	r3, [r7, #11]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d81b      	bhi.n	8002ffc <LSM303AGR_ACC_GetFullScale+0x68>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <LSM303AGR_ACC_GetFullScale+0x38>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fe5 	.word	0x08002fe5
 8002fd4:	08002fed 	.word	0x08002fed
 8002fd8:	08002ff5 	.word	0x08002ff5
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
      break;
 8002fe2:	e00f      	b.n	8003004 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	601a      	str	r2, [r3, #0]
      break;
 8002fea:	e00b      	b.n	8003004 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
      break;
 8002ff2:	e007      	b.n	8003004 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	601a      	str	r2, [r3, #0]
      break;
 8002ffa:	e003      	b.n	8003004 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	60fb      	str	r3, [r7, #12]
      break;
 8003002:	bf00      	nop
  }

  return ret;
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop

08003010 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b02      	cmp	r3, #2
 800301e:	dd0b      	ble.n	8003038 <LSM303AGR_ACC_SetFullScale+0x28>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b04      	cmp	r3, #4
 8003024:	dd06      	ble.n	8003034 <LSM303AGR_ACC_SetFullScale+0x24>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	dc01      	bgt.n	8003030 <LSM303AGR_ACC_SetFullScale+0x20>
 800302c:	2302      	movs	r3, #2
 800302e:	e004      	b.n	800303a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003030:	2303      	movs	r3, #3
 8003032:	e002      	b.n	800303a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003038:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800303a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	331c      	adds	r3, #28
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fe77 	bl	8003d38 <lsm303agr_xl_full_scale_set>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	e000      	b.n	8003058 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	331c      	adds	r3, #28
 8003076:	f107 020f 	add.w	r2, r7, #15
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fda5 	bl	8003bcc <lsm303agr_xl_operating_mode_get>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	e04a      	b.n	8003124 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d00c      	beq.n	80030ae <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003094:	2b02      	cmp	r3, #2
 8003096:	dc0e      	bgt.n	80030b6 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d003      	beq.n	80030a8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80030a0:	e009      	b.n	80030b6 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80030a2:	2310      	movs	r3, #16
 80030a4:	83fb      	strh	r3, [r7, #30]
      break;
 80030a6:	e00a      	b.n	80030be <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	83fb      	strh	r3, [r7, #30]
      break;
 80030ac:	e007      	b.n	80030be <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80030ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b2:	83fb      	strh	r3, [r7, #30]
      break;
 80030b4:	e003      	b.n	80030be <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d101      	bne.n	80030ca <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	e02c      	b.n	8003124 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	331c      	adds	r3, #28
 80030ce:	f107 0210 	add.w	r2, r7, #16
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 feb3 	bl	8003e40 <lsm303agr_acceleration_raw_get>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	e01e      	b.n	8003124 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80030e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80030f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f4:	b21a      	sxth	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80030fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030fe:	461a      	mov	r2, r3
 8003100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003104:	fb92 f3f3 	sdiv	r3, r2, r3
 8003108:	b21a      	sxth	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800310e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003112:	461a      	mov	r2, r3
 8003114:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003118:	fb92 f3f3 	sdiv	r3, r2, r3
 800311c:	b21a      	sxth	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	809a      	strh	r2, [r3, #4]

  return ret;
 8003122:	69bb      	ldr	r3, [r7, #24]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff8c 	bl	8003060 <LSM303AGR_ACC_GetAxesRaw>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e03c      	b.n	80031ce <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fde9 	bl	8002d32 <LSM303AGR_ACC_GetSensitivity>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e030      	b.n	80031ce <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800316c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003178:	edd7 7a03 	vldr	s15, [r7, #12]
 800317c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003184:	ee17 2a90 	vmov	r2, s15
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800318c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003198:	edd7 7a03 	vldr	s15, [r7, #12]
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a4:	ee17 2a90 	vmov	r2, s15
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80031ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c4:	ee17 2a90 	vmov	r2, s15
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
 80031e2:	4613      	mov	r3, r2
 80031e4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f103 001c 	add.w	r0, r3, #28
 80031ec:	1cba      	adds	r2, r7, #2
 80031ee:	78f9      	ldrb	r1, [r7, #3]
 80031f0:	2301      	movs	r3, #1
 80031f2:	f000 fcd3 	bl	8003b9c <lsm303agr_write_reg>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e000      	b.n	8003204 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e04b      	b.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	7b1a      	ldrb	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003264:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800326a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e01e      	b.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4798      	blx	r3
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e014      	b.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	331c      	adds	r3, #28
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 ff75 	bl	800419e <lsm303agr_mag_i2c_interface_set>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
 80032be:	e000      	b.n	80032c2 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80032c0:	68fb      	ldr	r3, [r7, #12]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	08003aa9 	.word	0x08003aa9
 80032d0:	08003b0b 	.word	0x08003b0b

080032d4 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	331c      	adds	r3, #28
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fe7c 	bl	8003fe0 <lsm303agr_mag_block_data_update_set>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e028      	b.n	8003346 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	331c      	adds	r3, #28
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fdeb 	bl	8003ed6 <lsm303agr_mag_operating_mode_set>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	e01c      	b.n	8003346 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	331c      	adds	r3, #28
 8003310:	2103      	movs	r1, #3
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fe05 	bl	8003f22 <lsm303agr_mag_data_rate_set>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e010      	b.n	8003346 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	331c      	adds	r3, #28
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 feeb 	bl	8004106 <lsm303agr_mag_self_test_set>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	e004      	b.n	8003346 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f874 	bl	8003444 <LSM303AGR_MAG_Disable>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e004      	b.n	8003372 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	331c      	adds	r3, #28
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 feaa 	bl	80040e4 <lsm303agr_mag_device_id_get>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e000      	b.n	800339e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2232      	movs	r2, #50	; 0x32
 80033da:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80033f0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	42c80000 	.word	0x42c80000

08003404 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e010      	b.n	800343c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	331c      	adds	r3, #28
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd58 	bl	8003ed6 <lsm303agr_mag_operating_mode_set>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e004      	b.n	800343c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e010      	b.n	800347c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	331c      	adds	r3, #28
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd38 	bl	8003ed6 <lsm303agr_mag_operating_mode_set>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	e004      	b.n	800347c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003494:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	331c      	adds	r3, #28
 80034b6:	f107 020b 	add.w	r2, r7, #11
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd57 	bl	8003f70 <lsm303agr_mag_data_rate_get>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	e023      	b.n	8003516 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d81b      	bhi.n	800350c <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034f5 	.word	0x080034f5
 80034e4:	080034fd 	.word	0x080034fd
 80034e8:	08003505 	.word	0x08003505
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80034f0:	601a      	str	r2, [r3, #0]
      break;
 80034f2:	e00f      	b.n	8003514 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80034f8:	601a      	str	r2, [r3, #0]
      break;
 80034fa:	e00b      	b.n	8003514 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003500:	601a      	str	r2, [r3, #0]
      break;
 8003502:	e007      	b.n	8003514 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003508:	601a      	str	r2, [r3, #0]
      break;
 800350a:	e003      	b.n	8003514 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	60fb      	str	r3, [r7, #12]
      break;
 8003512:	bf00      	nop
  }

  return ret;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	41200000 	.word	0x41200000
 8003524:	41a00000 	.word	0x41a00000
 8003528:	42480000 	.word	0x42480000
 800352c:	42c80000 	.word	0x42c80000

08003530 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 800353c:	edd7 7a00 	vldr	s15, [r7]
 8003540:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d801      	bhi.n	8003552 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800354e:	2300      	movs	r3, #0
 8003550:	e016      	b.n	8003580 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003552:	edd7 7a00 	vldr	s15, [r7]
 8003556:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d801      	bhi.n	8003568 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003564:	2301      	movs	r3, #1
 8003566:	e00b      	b.n	8003580 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003568:	edd7 7a00 	vldr	s15, [r7]
 800356c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80035a8 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	d801      	bhi.n	800357e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800357a:	2302      	movs	r3, #2
 800357c:	e000      	b.n	8003580 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800357e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003580:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	331c      	adds	r3, #28
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fcc9 	bl	8003f22 <lsm303agr_mag_data_rate_set>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	e000      	b.n	800359e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	42480000 	.word	0x42480000

080035ac <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2232      	movs	r2, #50	; 0x32
 80035ba:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	331c      	adds	r3, #28
 80035f0:	f107 0208 	add.w	r2, r7, #8
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fd18 	bl	800402c <lsm303agr_magnetic_raw_get>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e00c      	b.n	8003622 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003608:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003610:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003618:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	331c      	adds	r3, #28
 8003638:	f107 0210 	add.w	r2, r7, #16
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fcf4 	bl	800402c <lsm303agr_magnetic_raw_get>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	e036      	b.n	80036be <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff14 	bl	8003484 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800365c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003668:	edd7 7a03 	vldr	s15, [r7, #12]
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003674:	ee17 2a90 	vmov	r2, s15
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800367c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	edd7 7a03 	vldr	s15, [r7, #12]
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003694:	ee17 2a90 	vmov	r2, s15
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800369c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b4:	ee17 2a90 	vmov	r2, s15
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	331c      	adds	r3, #28
 80036da:	f107 020b 	add.w	r2, r7, #11
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fb4f 	bl	8003d84 <lsm303agr_xl_full_scale_get>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	e023      	b.n	800373a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d81b      	bhi.n	8003730 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003711 	.word	0x08003711
 8003704:	08003719 	.word	0x08003719
 8003708:	08003721 	.word	0x08003721
 800370c:	08003729 	.word	0x08003729
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003714:	601a      	str	r2, [r3, #0]
      break;
 8003716:	e00f      	b.n	8003738 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 800371c:	601a      	str	r2, [r3, #0]
      break;
 800371e:	e00b      	b.n	8003738 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003724:	601a      	str	r2, [r3, #0]
      break;
 8003726:	e007      	b.n	8003738 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 800372c:	601a      	str	r2, [r3, #0]
      break;
 800372e:	e003      	b.n	8003738 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
 8003734:	60fb      	str	r3, [r7, #12]
      break;
 8003736:	bf00      	nop
  }

  return ret;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	3f7ae148 	.word	0x3f7ae148
 8003748:	3ff9999a 	.word	0x3ff9999a
 800374c:	4079999a 	.word	0x4079999a
 8003750:	413b851f 	.word	0x413b851f

08003754 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	331c      	adds	r3, #28
 8003766:	f107 020b 	add.w	r2, r7, #11
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fb09 	bl	8003d84 <lsm303agr_xl_full_scale_get>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e023      	b.n	80037c6 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d81b      	bhi.n	80037bc <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037ad 	.word	0x080037ad
 8003798:	080037b5 	.word	0x080037b5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80037a0:	601a      	str	r2, [r3, #0]
      break;
 80037a2:	e00f      	b.n	80037c4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80037a8:	601a      	str	r2, [r3, #0]
      break;
 80037aa:	e00b      	b.n	80037c4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80037b0:	601a      	str	r2, [r3, #0]
      break;
 80037b2:	e007      	b.n	80037c4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80037b8:	601a      	str	r2, [r3, #0]
      break;
 80037ba:	e003      	b.n	80037c4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	60fb      	str	r3, [r7, #12]
      break;
 80037c2:	bf00      	nop
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	4079999a 	.word	0x4079999a
 80037d4:	40fa3d71 	.word	0x40fa3d71
 80037d8:	417a147b 	.word	0x417a147b
 80037dc:	423b999a 	.word	0x423b999a

080037e0 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	331c      	adds	r3, #28
 80037f2:	f107 020b 	add.w	r2, r7, #11
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fac3 	bl	8003d84 <lsm303agr_xl_full_scale_get>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	e023      	b.n	8003852 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d81b      	bhi.n	8003848 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003829 	.word	0x08003829
 800381c:	08003831 	.word	0x08003831
 8003820:	08003839 	.word	0x08003839
 8003824:	08003841 	.word	0x08003841
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 800382c:	601a      	str	r2, [r3, #0]
      break;
 800382e:	e00f      	b.n	8003850 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003834:	601a      	str	r2, [r3, #0]
      break;
 8003836:	e00b      	b.n	8003850 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 800383c:	601a      	str	r2, [r3, #0]
      break;
 800383e:	e007      	b.n	8003850 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003844:	601a      	str	r2, [r3, #0]
      break;
 8003846:	e003      	b.n	8003850 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003848:	f04f 33ff 	mov.w	r3, #4294967295
 800384c:	60fb      	str	r3, [r7, #12]
      break;
 800384e:	bf00      	nop
  }

  return ret;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	417a147b 	.word	0x417a147b
 8003860:	41fa147b 	.word	0x41fa147b
 8003864:	427a147b 	.word	0x427a147b
 8003868:	433b947b 	.word	0x433b947b

0800386c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003878:	edd7 7a00 	vldr	s15, [r7]
 800387c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d801      	bhi.n	800388e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800388a:	2301      	movs	r3, #1
 800388c:	e037      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800388e:	edd7 7a00 	vldr	s15, [r7]
 8003892:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389e:	d801      	bhi.n	80038a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e02c      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80038a4:	edd7 7a00 	vldr	s15, [r7]
 80038a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	d801      	bhi.n	80038ba <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e021      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80038ba:	edd7 7a00 	vldr	s15, [r7]
 80038be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003924 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80038c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	d801      	bhi.n	80038d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e016      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80038d0:	edd7 7a00 	vldr	s15, [r7]
 80038d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003928 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80038d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e0:	d801      	bhi.n	80038e6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e00b      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80038e6:	edd7 7a00 	vldr	s15, [r7]
 80038ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800392c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80038ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d801      	bhi.n	80038fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80038f8:	2306      	movs	r3, #6
 80038fa:	e000      	b.n	80038fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80038fc:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80038fe:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	331c      	adds	r3, #28
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f993 	bl	8003c34 <lsm303agr_xl_data_rate_set>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	e000      	b.n	800391c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	42480000 	.word	0x42480000
 8003928:	42c80000 	.word	0x42c80000
 800392c:	43480000 	.word	0x43480000

08003930 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800393c:	edd7 7a00 	vldr	s15, [r7]
 8003940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394c:	d801      	bhi.n	8003952 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800394e:	2301      	movs	r3, #1
 8003950:	e037      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003952:	edd7 7a00 	vldr	s15, [r7]
 8003956:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800395a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	d801      	bhi.n	8003968 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003964:	2302      	movs	r3, #2
 8003966:	e02c      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003968:	edd7 7a00 	vldr	s15, [r7]
 800396c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	d801      	bhi.n	800397e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800397a:	2303      	movs	r3, #3
 800397c:	e021      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800397e:	edd7 7a00 	vldr	s15, [r7]
 8003982:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80039d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	d801      	bhi.n	8003994 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003990:	2304      	movs	r3, #4
 8003992:	e016      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003994:	edd7 7a00 	vldr	s15, [r7]
 8003998:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80039dc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800399c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	d801      	bhi.n	80039aa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e00b      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80039aa:	edd7 7a00 	vldr	s15, [r7]
 80039ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80039e0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80039b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	d801      	bhi.n	80039c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80039bc:	2306      	movs	r3, #6
 80039be:	e000      	b.n	80039c2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80039c0:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	42480000 	.word	0x42480000
 80039dc:	42c80000 	.word	0x42c80000
 80039e0:	43480000 	.word	0x43480000

080039e4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	72fb      	strb	r3, [r7, #11]
 80039f4:	4613      	mov	r3, r2
 80039f6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10e      	bne.n	8003a22 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	695c      	ldr	r4, [r3, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	b298      	uxth	r0, r3
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	b299      	uxth	r1, r3
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	47a0      	blx	r4
 8003a1e:	4603      	mov	r3, r0
 8003a20:	e00d      	b.n	8003a3e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	695c      	ldr	r4, [r3, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	7b1b      	ldrb	r3, [r3, #12]
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	b299      	uxth	r1, r3
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	47a0      	blx	r4
 8003a3c:	4603      	mov	r3, r0
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}

08003a46 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a46:	b590      	push	{r4, r7, lr}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	461a      	mov	r2, r3
 8003a52:	460b      	mov	r3, r1
 8003a54:	72fb      	strb	r3, [r7, #11]
 8003a56:	4613      	mov	r3, r2
 8003a58:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	691c      	ldr	r4, [r3, #16]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	7b1b      	ldrb	r3, [r3, #12]
 8003a6e:	b298      	uxth	r0, r3
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	47a0      	blx	r4
 8003a80:	4603      	mov	r3, r0
 8003a82:	e00d      	b.n	8003aa0 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	691c      	ldr	r4, [r3, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	7b1b      	ldrb	r3, [r3, #12]
 8003a8c:	b298      	uxth	r0, r3
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	b299      	uxth	r1, r3
 8003a98:	893b      	ldrh	r3, [r7, #8]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	47a0      	blx	r4
 8003a9e:	4603      	mov	r3, r0
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}

08003aa8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	72fb      	strb	r3, [r7, #11]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	695c      	ldr	r4, [r3, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	7b1b      	ldrb	r3, [r3, #12]
 8003ad0:	b298      	uxth	r0, r3
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
 8003ad4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	b299      	uxth	r1, r3
 8003adc:	893b      	ldrh	r3, [r7, #8]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	47a0      	blx	r4
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	e00d      	b.n	8003b02 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	695c      	ldr	r4, [r3, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	7b1b      	ldrb	r3, [r3, #12]
 8003aee:	b298      	uxth	r0, r3
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	b299      	uxth	r1, r3
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	47a0      	blx	r4
 8003b00:	4603      	mov	r3, r0
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}

08003b0a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b0a:	b590      	push	{r4, r7, lr}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	461a      	mov	r2, r3
 8003b16:	460b      	mov	r3, r1
 8003b18:	72fb      	strb	r3, [r7, #11]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	691c      	ldr	r4, [r3, #16]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	7b1b      	ldrb	r3, [r3, #12]
 8003b32:	b298      	uxth	r0, r3
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	b299      	uxth	r1, r3
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	47a0      	blx	r4
 8003b44:	4603      	mov	r3, r0
 8003b46:	e00d      	b.n	8003b64 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	691c      	ldr	r4, [r3, #16]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	7b1b      	ldrb	r3, [r3, #12]
 8003b50:	b298      	uxth	r0, r3
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	b299      	uxth	r1, r3
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	47a0      	blx	r4
 8003b62:	4603      	mov	r3, r0
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}

08003b6c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	72fb      	strb	r3, [r7, #11]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685c      	ldr	r4, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6898      	ldr	r0, [r3, #8]
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	7af9      	ldrb	r1, [r7, #11]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	47a0      	blx	r4
 8003b90:	6178      	str	r0, [r7, #20]
  return ret;
 8003b92:	697b      	ldr	r3, [r7, #20]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}

08003b9c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	72fb      	strb	r3, [r7, #11]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681c      	ldr	r4, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6898      	ldr	r0, [r3, #8]
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	7af9      	ldrb	r1, [r7, #11]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	47a0      	blx	r4
 8003bc0:	6178      	str	r0, [r7, #20]
  return ret;
 8003bc2:	697b      	ldr	r3, [r7, #20]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd90      	pop	{r4, r7, pc}

08003bcc <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003bd6:	f107 020c 	add.w	r2, r7, #12
 8003bda:	2301      	movs	r3, #1
 8003bdc:	2120      	movs	r1, #32
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffc4 	bl	8003b6c <lsm303agr_read_reg>
 8003be4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003bec:	f107 0210 	add.w	r2, r7, #16
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	2123      	movs	r1, #35	; 0x23
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffb9 	bl	8003b6c <lsm303agr_read_reg>
 8003bfa:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003bfc:	7b3b      	ldrb	r3, [r7, #12]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e00c      	b.n	8003c2a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003c10:	7c3b      	ldrb	r3, [r7, #16]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003c2a:	697b      	ldr	r3, [r7, #20]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003c40:	f107 0208 	add.w	r2, r7, #8
 8003c44:	2301      	movs	r3, #1
 8003c46:	2120      	movs	r1, #32
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff8f 	bl	8003b6c <lsm303agr_read_reg>
 8003c4e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	7a3b      	ldrb	r3, [r7, #8]
 8003c60:	f362 1307 	bfi	r3, r2, #4, #4
 8003c64:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003c66:	f107 0208 	add.w	r2, r7, #8
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff94 	bl	8003b9c <lsm303agr_write_reg>
 8003c74:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003c8a:	f107 0208 	add.w	r2, r7, #8
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2120      	movs	r1, #32
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff6a 	bl	8003b6c <lsm303agr_read_reg>
 8003c98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003c9a:	7a3b      	ldrb	r3, [r7, #8]
 8003c9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b09      	cmp	r3, #9
 8003ca4:	d83e      	bhi.n	8003d24 <lsm303agr_xl_data_rate_get+0xa4>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <lsm303agr_xl_data_rate_get+0x2c>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003cf5 	.word	0x08003cf5
 8003cc0:	08003cfd 	.word	0x08003cfd
 8003cc4:	08003d05 	.word	0x08003d05
 8003cc8:	08003d0d 	.word	0x08003d0d
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d1d 	.word	0x08003d1d
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
      break;
 8003cda:	e027      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	e023      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
      break;
 8003cea:	e01f      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	701a      	strb	r2, [r3, #0]
      break;
 8003cf2:	e01b      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
      break;
 8003cfa:	e017      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	701a      	strb	r2, [r3, #0]
      break;
 8003d02:	e013      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2206      	movs	r2, #6
 8003d08:	701a      	strb	r2, [r3, #0]
      break;
 8003d0a:	e00f      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2207      	movs	r2, #7
 8003d10:	701a      	strb	r2, [r3, #0]
      break;
 8003d12:	e00b      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	701a      	strb	r2, [r3, #0]
      break;
 8003d1a:	e007      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2209      	movs	r2, #9
 8003d20:	701a      	strb	r2, [r3, #0]
      break;
 8003d22:	e003      	b.n	8003d2c <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
      break;
 8003d2a:	bf00      	nop
  }

  return ret;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop

08003d38 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d44:	f107 0208 	add.w	r2, r7, #8
 8003d48:	2301      	movs	r3, #1
 8003d4a:	2123      	movs	r1, #35	; 0x23
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff0d 	bl	8003b6c <lsm303agr_read_reg>
 8003d52:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	7a3b      	ldrb	r3, [r7, #8]
 8003d64:	f362 1305 	bfi	r3, r2, #4, #2
 8003d68:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d6a:	f107 0208 	add.w	r2, r7, #8
 8003d6e:	2301      	movs	r3, #1
 8003d70:	2123      	movs	r1, #35	; 0x23
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff12 	bl	8003b9c <lsm303agr_write_reg>
 8003d78:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	2301      	movs	r3, #1
 8003d94:	2123      	movs	r1, #35	; 0x23
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fee8 	bl	8003b6c <lsm303agr_read_reg>
 8003d9c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003d9e:	7a3b      	ldrb	r3, [r7, #8]
 8003da0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d81a      	bhi.n	8003de0 <lsm303agr_xl_full_scale_get+0x5c>
 8003daa:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <lsm303agr_xl_full_scale_get+0x2c>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dc1 	.word	0x08003dc1
 8003db4:	08003dc9 	.word	0x08003dc9
 8003db8:	08003dd1 	.word	0x08003dd1
 8003dbc:	08003dd9 	.word	0x08003dd9
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
      break;
 8003dc6:	e00f      	b.n	8003de8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
      break;
 8003dce:	e00b      	b.n	8003de8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e007      	b.n	8003de8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e003      	b.n	8003de8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	bf00      	nop
  }

  return ret;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e00:	f107 0208 	add.w	r2, r7, #8
 8003e04:	2301      	movs	r3, #1
 8003e06:	2123      	movs	r1, #35	; 0x23
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff feaf 	bl	8003b6c <lsm303agr_read_reg>
 8003e0e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	7a3b      	ldrb	r3, [r7, #8]
 8003e20:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e24:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003e26:	f107 0208 	add.w	r2, r7, #8
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	2123      	movs	r1, #35	; 0x23
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff feb4 	bl	8003b9c <lsm303agr_write_reg>
 8003e34:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003e4a:	f107 020c 	add.w	r2, r7, #12
 8003e4e:	2306      	movs	r3, #6
 8003e50:	2128      	movs	r1, #40	; 0x28
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fe8a 	bl	8003b6c <lsm303agr_read_reg>
 8003e58:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003e5a:	7b7b      	ldrb	r3, [r7, #13]
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	7b3b      	ldrb	r3, [r7, #12]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3302      	adds	r3, #2
 8003e82:	b212      	sxth	r2, r2
 8003e84:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	7bbb      	ldrb	r3, [r7, #14]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	b212      	sxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003ea4:	7c7a      	ldrb	r2, [r7, #17]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	b212      	sxth	r2, r2
 8003eac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	7c3b      	ldrb	r3, [r7, #16]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	b212      	sxth	r2, r2
 8003eca:	801a      	strh	r2, [r3, #0]
  return ret;
 8003ecc:	697b      	ldr	r3, [r7, #20]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ee2:	f107 0208 	add.w	r2, r7, #8
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	2160      	movs	r1, #96	; 0x60
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fe3e 	bl	8003b6c <lsm303agr_read_reg>
 8003ef0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	7a3b      	ldrb	r3, [r7, #8]
 8003f02:	f362 0301 	bfi	r3, r2, #0, #2
 8003f06:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003f08:	f107 0208 	add.w	r2, r7, #8
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2160      	movs	r1, #96	; 0x60
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fe43 	bl	8003b9c <lsm303agr_write_reg>
 8003f16:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003f2e:	f107 0208 	add.w	r2, r7, #8
 8003f32:	2301      	movs	r3, #1
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe18 	bl	8003b6c <lsm303agr_read_reg>
 8003f3c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	7a3b      	ldrb	r3, [r7, #8]
 8003f4e:	f362 0383 	bfi	r3, r2, #2, #2
 8003f52:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003f54:	f107 0208 	add.w	r2, r7, #8
 8003f58:	2301      	movs	r3, #1
 8003f5a:	2160      	movs	r1, #96	; 0x60
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fe1d 	bl	8003b9c <lsm303agr_write_reg>
 8003f62:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003f64:	68fb      	ldr	r3, [r7, #12]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003f7a:	f107 0208 	add.w	r2, r7, #8
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2160      	movs	r1, #96	; 0x60
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fdf2 	bl	8003b6c <lsm303agr_read_reg>
 8003f88:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003f8a:	7a3b      	ldrb	r3, [r7, #8]
 8003f8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d81a      	bhi.n	8003fcc <lsm303agr_mag_data_rate_get+0x5c>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <lsm303agr_mag_data_rate_get+0x2c>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fbd 	.word	0x08003fbd
 8003fa8:	08003fc5 	.word	0x08003fc5
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	e00f      	b.n	8003fd4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
      break;
 8003fba:	e00b      	b.n	8003fd4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	701a      	strb	r2, [r3, #0]
      break;
 8003fc2:	e007      	b.n	8003fd4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	701a      	strb	r2, [r3, #0]
      break;
 8003fca:	e003      	b.n	8003fd4 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
      break;
 8003fd2:	bf00      	nop
  }

  return ret;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop

08003fe0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fec:	f107 0208 	add.w	r2, r7, #8
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	2162      	movs	r1, #98	; 0x62
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fdb9 	bl	8003b6c <lsm303agr_read_reg>
 8003ffa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	7a3b      	ldrb	r3, [r7, #8]
 800400c:	f362 1304 	bfi	r3, r2, #4, #1
 8004010:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004012:	f107 0208 	add.w	r2, r7, #8
 8004016:	2301      	movs	r3, #1
 8004018:	2162      	movs	r1, #98	; 0x62
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fdbe 	bl	8003b9c <lsm303agr_write_reg>
 8004020:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004036:	f107 020c 	add.w	r2, r7, #12
 800403a:	2306      	movs	r3, #6
 800403c:	2168      	movs	r1, #104	; 0x68
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fd94 	bl	8003b6c <lsm303agr_read_reg>
 8004044:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004046:	7b7b      	ldrb	r3, [r7, #13]
 8004048:	b21a      	sxth	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004054:	b29b      	uxth	r3, r3
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	b29a      	uxth	r2, r3
 800405a:	7b3b      	ldrb	r3, [r7, #12]
 800405c:	b29b      	uxth	r3, r3
 800405e:	4413      	add	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	b21a      	sxth	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3302      	adds	r3, #2
 800406e:	b212      	sxth	r2, r2
 8004070:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	3302      	adds	r3, #2
 8004076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800407a:	b29b      	uxth	r3, r3
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	b29a      	uxth	r2, r3
 8004080:	7bbb      	ldrb	r3, [r7, #14]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4413      	add	r3, r2
 8004086:	b29a      	uxth	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	3302      	adds	r3, #2
 800408c:	b212      	sxth	r2, r2
 800408e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004090:	7c7a      	ldrb	r2, [r7, #17]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	3304      	adds	r3, #4
 8004096:	b212      	sxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3304      	adds	r3, #4
 800409e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	7c3b      	ldrb	r3, [r7, #16]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3304      	adds	r3, #4
 80040b4:	b212      	sxth	r2, r2
 80040b6:	801a      	strh	r2, [r3, #0]
  return ret;
 80040b8:	697b      	ldr	r3, [r7, #20]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80040cc:	2301      	movs	r3, #1
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	210f      	movs	r1, #15
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fd4a 	bl	8003b6c <lsm303agr_read_reg>
 80040d8:	60f8      	str	r0, [r7, #12]
  return ret;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80040ee:	2301      	movs	r3, #1
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	214f      	movs	r1, #79	; 0x4f
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fd39 	bl	8003b6c <lsm303agr_read_reg>
 80040fa:	60f8      	str	r0, [r7, #12]
  return ret;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004112:	f107 0208 	add.w	r2, r7, #8
 8004116:	2301      	movs	r3, #1
 8004118:	2162      	movs	r1, #98	; 0x62
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fd26 	bl	8003b6c <lsm303agr_read_reg>
 8004120:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10f      	bne.n	8004148 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	7a3b      	ldrb	r3, [r7, #8]
 8004132:	f362 0341 	bfi	r3, r2, #1, #1
 8004136:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004138:	f107 0208 	add.w	r2, r7, #8
 800413c:	2301      	movs	r3, #1
 800413e:	2162      	movs	r1, #98	; 0x62
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fd2b 	bl	8003b9c <lsm303agr_write_reg>
 8004146:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800415e:	f107 0208 	add.w	r2, r7, #8
 8004162:	2301      	movs	r3, #1
 8004164:	212e      	movs	r1, #46	; 0x2e
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fd00 	bl	8003b6c <lsm303agr_read_reg>
 800416c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	b2da      	uxtb	r2, r3
 800417c:	7a3b      	ldrb	r3, [r7, #8]
 800417e:	f362 1387 	bfi	r3, r2, #6, #2
 8004182:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004184:	f107 0208 	add.w	r2, r7, #8
 8004188:	2301      	movs	r3, #1
 800418a:	212e      	movs	r1, #46	; 0x2e
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fd05 	bl	8003b9c <lsm303agr_write_reg>
 8004192:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004194:	68fb      	ldr	r3, [r7, #12]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80041aa:	f107 0208 	add.w	r2, r7, #8
 80041ae:	2301      	movs	r3, #1
 80041b0:	2162      	movs	r1, #98	; 0x62
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fcda 	bl	8003b6c <lsm303agr_read_reg>
 80041b8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	7a3b      	ldrb	r3, [r7, #8]
 80041ca:	f362 1345 	bfi	r3, r2, #5, #1
 80041ce:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80041d0:	f107 0208 	add.w	r2, r7, #8
 80041d4:	2301      	movs	r3, #1
 80041d6:	2162      	movs	r1, #98	; 0x62
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fcdf 	bl	8003b9c <lsm303agr_write_reg>
 80041de:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e04d      	b.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7b1a      	ldrb	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <LSM6DSL_RegisterBusIO+0xc4>)
 8004244:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <LSM6DSL_RegisterBusIO+0xc8>)
 800424a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e020      	b.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4798      	blx	r3
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e016      	b.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d112      	bne.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004288:	230c      	movs	r3, #12
 800428a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800428c:	7afb      	ldrb	r3, [r7, #11]
 800428e:	461a      	mov	r2, r3
 8004290:	2112      	movs	r1, #18
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd2d 	bl	8004cf2 <LSM6DSL_Write_Reg>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80042a4:	68fb      	ldr	r3, [r7, #12]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	08005161 	.word	0x08005161
 80042b4:	08005197 	.word	0x08005197

080042b8 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	331c      	adds	r3, #28
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fa59 	bl	800577e <lsm6dsl_auto_increment_set>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	e054      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	331c      	adds	r3, #28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f980 	bl	80055e4 <lsm6dsl_block_data_update_set>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
 80042ee:	e048      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	331c      	adds	r3, #28
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 fa67 	bl	80057ca <lsm6dsl_fifo_mode_set>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e03c      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	331c      	adds	r3, #28
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ffe6 	bl	80052e8 <lsm6dsl_xl_data_rate_set>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	e02c      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	331c      	adds	r3, #28
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ff7c 	bl	800522c <lsm6dsl_xl_full_scale_set>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	e020      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2204      	movs	r2, #4
 8004344:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	331c      	adds	r3, #28
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f8c0 	bl	80054d4 <lsm6dsl_gy_data_rate_set>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	e010      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	331c      	adds	r3, #28
 8004364:	2106      	movs	r1, #6
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f84c 	bl	8005404 <lsm6dsl_gy_full_scale_set>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	e004      	b.n	8004382 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f888 	bl	80044a8 <LSM6DSL_ACC_Disable>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e015      	b.n	80043d0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa9a 	bl	80048de <LSM6DSL_GYRO_Disable>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80043b0:	f04f 33ff 	mov.w	r3, #4294967295
 80043b4:	e00c      	b.n	80043d0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	331c      	adds	r3, #28
 80043e6:	6839      	ldr	r1, [r7, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 f9b7 	bl	800575c <lsm6dsl_device_id_get>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
 80043f8:	e000      	b.n	80043fc <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2201      	movs	r2, #1
 8004418:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800442c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <LSM6DSL_GetCapabilities+0x58>)
 800443e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4a06      	ldr	r2, [pc, #24]	; (800445c <LSM6DSL_GetCapabilities+0x58>)
 8004444:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	45d02000 	.word	0x45d02000

08004460 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e014      	b.n	80044a0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f103 021c 	add.w	r2, r3, #28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f000 ff2f 	bl	80052e8 <lsm6dsl_xl_data_rate_set>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	e004      	b.n	80044a0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e01f      	b.n	80044fe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f103 021c 	add.w	r2, r3, #28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	332b      	adds	r3, #43	; 0x2b
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 ff32 	bl	8005334 <lsm6dsl_xl_data_rate_get>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	e010      	b.n	80044fe <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	331c      	adds	r3, #28
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 ff00 	bl	80052e8 <lsm6dsl_xl_data_rate_set>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
 80044f2:	e004      	b.n	80044fe <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	331c      	adds	r3, #28
 800451a:	f107 020b 	add.w	r2, r7, #11
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fea9 	bl	8005278 <lsm6dsl_xl_full_scale_get>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800452c:	f04f 33ff 	mov.w	r3, #4294967295
 8004530:	e023      	b.n	800457a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d81b      	bhi.n	8004570 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004569 	.word	0x08004569
 8004548:	08004559 	.word	0x08004559
 800454c:	08004561 	.word	0x08004561
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004554:	601a      	str	r2, [r3, #0]
      break;
 8004556:	e00f      	b.n	8004578 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800455c:	601a      	str	r2, [r3, #0]
      break;
 800455e:	e00b      	b.n	8004578 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004564:	601a      	str	r2, [r3, #0]
      break;
 8004566:	e007      	b.n	8004578 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800456c:	601a      	str	r2, [r3, #0]
      break;
 800456e:	e003      	b.n	8004578 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	60fb      	str	r3, [r7, #12]
      break;
 8004576:	bf00      	nop
  }

  return ret;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	3d79db23 	.word	0x3d79db23
 8004588:	3df9db23 	.word	0x3df9db23
 800458c:	3e79db23 	.word	0x3e79db23
 8004590:	3ef9db23 	.word	0x3ef9db23

08004594 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	331c      	adds	r3, #28
 80045a6:	f107 020b 	add.w	r2, r7, #11
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fec1 	bl	8005334 <lsm6dsl_xl_data_rate_get>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	e054      	b.n	8004668 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80045be:	7afb      	ldrb	r3, [r7, #11]
 80045c0:	2b0b      	cmp	r3, #11
 80045c2:	d84c      	bhi.n	800465e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045fd 	.word	0x080045fd
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	08004617 	.word	0x08004617
 80045d8:	0800461f 	.word	0x0800461f
 80045dc:	08004627 	.word	0x08004627
 80045e0:	0800462f 	.word	0x0800462f
 80045e4:	08004637 	.word	0x08004637
 80045e8:	0800463f 	.word	0x0800463f
 80045ec:	08004647 	.word	0x08004647
 80045f0:	0800464f 	.word	0x0800464f
 80045f4:	08004657 	.word	0x08004657
 80045f8:	08004607 	.word	0x08004607
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
      break;
 8004604:	e02f      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800460a:	601a      	str	r2, [r3, #0]
      break;
 800460c:	e02b      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004612:	601a      	str	r2, [r3, #0]
      break;
 8004614:	e027      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800461a:	601a      	str	r2, [r3, #0]
      break;
 800461c:	e023      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004622:	601a      	str	r2, [r3, #0]
      break;
 8004624:	e01f      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800462a:	601a      	str	r2, [r3, #0]
      break;
 800462c:	e01b      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004632:	601a      	str	r2, [r3, #0]
      break;
 8004634:	e017      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800463a:	601a      	str	r2, [r3, #0]
      break;
 800463c:	e013      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004642:	601a      	str	r2, [r3, #0]
      break;
 8004644:	e00f      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800464a:	601a      	str	r2, [r3, #0]
      break;
 800464c:	e00b      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4a10      	ldr	r2, [pc, #64]	; (8004694 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004652:	601a      	str	r2, [r3, #0]
      break;
 8004654:	e007      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800465a:	601a      	str	r2, [r3, #0]
      break;
 800465c:	e003      	b.n	8004666 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60fb      	str	r3, [r7, #12]
      break;
 8004664:	bf00      	nop
  }

  return ret;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	3fcccccd 	.word	0x3fcccccd
 8004674:	41480000 	.word	0x41480000
 8004678:	41d00000 	.word	0x41d00000
 800467c:	42500000 	.word	0x42500000
 8004680:	42d00000 	.word	0x42d00000
 8004684:	43500000 	.word	0x43500000
 8004688:	43d00000 	.word	0x43d00000
 800468c:	44504000 	.word	0x44504000
 8004690:	44cf8000 	.word	0x44cf8000
 8004694:	45502000 	.word	0x45502000
 8004698:	45d02000 	.word	0x45d02000

0800469c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d106      	bne.n	80046c0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80046b2:	ed97 0a00 	vldr	s0, [r7]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fb36 	bl	8004d28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80046bc:	4603      	mov	r3, r0
 80046be:	e005      	b.n	80046cc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80046c0:	ed97 0a00 	vldr	s0, [r7]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fbbb 	bl	8004e40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80046ca:	4603      	mov	r3, r0
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	331c      	adds	r3, #28
 80046e6:	f107 020b 	add.w	r2, r7, #11
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fdc3 	bl	8005278 <lsm6dsl_xl_full_scale_get>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	e023      	b.n	8004746 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80046fe:	7afb      	ldrb	r3, [r7, #11]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d81b      	bhi.n	800473c <LSM6DSL_ACC_GetFullScale+0x68>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	0800471d 	.word	0x0800471d
 8004710:	08004735 	.word	0x08004735
 8004714:	08004725 	.word	0x08004725
 8004718:	0800472d 	.word	0x0800472d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2202      	movs	r2, #2
 8004720:	601a      	str	r2, [r3, #0]
      break;
 8004722:	e00f      	b.n	8004744 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2204      	movs	r2, #4
 8004728:	601a      	str	r2, [r3, #0]
      break;
 800472a:	e00b      	b.n	8004744 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2208      	movs	r2, #8
 8004730:	601a      	str	r2, [r3, #0]
      break;
 8004732:	e007      	b.n	8004744 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2210      	movs	r2, #16
 8004738:	601a      	str	r2, [r3, #0]
      break;
 800473a:	e003      	b.n	8004744 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	60fb      	str	r3, [r7, #12]
      break;
 8004742:	bf00      	nop
  }

  return ret;
 8004744:	68fb      	ldr	r3, [r7, #12]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop

08004750 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b02      	cmp	r3, #2
 800475e:	dd0b      	ble.n	8004778 <LSM6DSL_ACC_SetFullScale+0x28>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b04      	cmp	r3, #4
 8004764:	dd06      	ble.n	8004774 <LSM6DSL_ACC_SetFullScale+0x24>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	dc01      	bgt.n	8004770 <LSM6DSL_ACC_SetFullScale+0x20>
 800476c:	2303      	movs	r3, #3
 800476e:	e004      	b.n	800477a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004770:	2301      	movs	r3, #1
 8004772:	e002      	b.n	800477a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004774:	2302      	movs	r3, #2
 8004776:	e000      	b.n	800477a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004778:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800477a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	331c      	adds	r3, #28
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fd51 	bl	800522c <lsm6dsl_xl_full_scale_set>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004790:	f04f 33ff 	mov.w	r3, #4294967295
 8004794:	e000      	b.n	8004798 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	331c      	adds	r3, #28
 80047ae:	f107 0208 	add.w	r2, r7, #8
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 ff86 	bl	80056c6 <lsm6dsl_acceleration_raw_get>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	e00c      	b.n	80047e0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80047c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80047ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80047d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	331c      	adds	r3, #28
 80047fc:	f107 0210 	add.w	r2, r7, #16
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 ff5f 	bl	80056c6 <lsm6dsl_acceleration_raw_get>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
 8004812:	e03c      	b.n	800488e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fe74 	bl	8004508 <LSM6DSL_ACC_GetSensitivity>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	e030      	b.n	800488e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800482c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004838:	edd7 7a03 	vldr	s15, [r7, #12]
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004844:	ee17 2a90 	vmov	r2, s15
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800484c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004858:	edd7 7a03 	vldr	s15, [r7, #12]
 800485c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800486c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004878:	edd7 7a03 	vldr	s15, [r7, #12]
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e014      	b.n	80048d6 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f103 021c 	add.w	r2, r3, #28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fe0a 	bl	80054d4 <lsm6dsl_gy_data_rate_set>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	e004      	b.n	80048d6 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e01f      	b.n	8004934 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 021c 	add.w	r2, r3, #28
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	332c      	adds	r3, #44	; 0x2c
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fe0d 	bl	8005520 <lsm6dsl_gy_data_rate_get>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	e010      	b.n	8004934 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	331c      	adds	r3, #28
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fddb 	bl	80054d4 <lsm6dsl_gy_data_rate_set>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	e004      	b.n	8004934 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	331c      	adds	r3, #28
 800494e:	f107 020b 	add.w	r2, r7, #11
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fd7b 	bl	8005450 <lsm6dsl_gy_full_scale_get>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	e02d      	b.n	80049c2 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	2b06      	cmp	r3, #6
 800496a:	d825      	bhi.n	80049b8 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004999 	.word	0x08004999
 8004978:	08004991 	.word	0x08004991
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049b9 	.word	0x080049b9
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b9 	.word	0x080049b9
 800498c:	080049b1 	.word	0x080049b1
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004994:	601a      	str	r2, [r3, #0]
      break;
 8004996:	e013      	b.n	80049c0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800499c:	601a      	str	r2, [r3, #0]
      break;
 800499e:	e00f      	b.n	80049c0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80049a4:	601a      	str	r2, [r3, #0]
      break;
 80049a6:	e00b      	b.n	80049c0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80049ac:	601a      	str	r2, [r3, #0]
      break;
 80049ae:	e007      	b.n	80049c0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80049b4:	601a      	str	r2, [r3, #0]
      break;
 80049b6:	e003      	b.n	80049c0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	60fb      	str	r3, [r7, #12]
      break;
 80049be:	bf00      	nop
  }

  return ret;
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	408c0000 	.word	0x408c0000
 80049d0:	410c0000 	.word	0x410c0000
 80049d4:	418c0000 	.word	0x418c0000
 80049d8:	420c0000 	.word	0x420c0000
 80049dc:	428c0000 	.word	0x428c0000

080049e0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	331c      	adds	r3, #28
 80049f2:	f107 020b 	add.w	r2, r7, #11
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fd91 	bl	8005520 <lsm6dsl_gy_data_rate_get>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
 8004a08:	e04e      	b.n	8004aa8 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	2b0a      	cmp	r3, #10
 8004a0e:	d846      	bhi.n	8004a9e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a4f 	.word	0x08004a4f
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a5f 	.word	0x08004a5f
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a6f 	.word	0x08004a6f
 8004a30:	08004a77 	.word	0x08004a77
 8004a34:	08004a7f 	.word	0x08004a7f
 8004a38:	08004a87 	.word	0x08004a87
 8004a3c:	08004a8f 	.word	0x08004a8f
 8004a40:	08004a97 	.word	0x08004a97
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
      break;
 8004a4c:	e02b      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004a52:	601a      	str	r2, [r3, #0]
      break;
 8004a54:	e027      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	4a16      	ldr	r2, [pc, #88]	; (8004ab4 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004a5a:	601a      	str	r2, [r3, #0]
      break;
 8004a5c:	e023      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004a62:	601a      	str	r2, [r3, #0]
      break;
 8004a64:	e01f      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004a6a:	601a      	str	r2, [r3, #0]
      break;
 8004a6c:	e01b      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004a72:	601a      	str	r2, [r3, #0]
      break;
 8004a74:	e017      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004a7a:	601a      	str	r2, [r3, #0]
      break;
 8004a7c:	e013      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004a82:	601a      	str	r2, [r3, #0]
      break;
 8004a84:	e00f      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4a10      	ldr	r2, [pc, #64]	; (8004acc <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004a8a:	601a      	str	r2, [r3, #0]
      break;
 8004a8c:	e00b      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004a92:	601a      	str	r2, [r3, #0]
      break;
 8004a94:	e007      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004a9a:	601a      	str	r2, [r3, #0]
      break;
 8004a9c:	e003      	b.n	8004aa6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	60fb      	str	r3, [r7, #12]
      break;
 8004aa4:	bf00      	nop
  }

  return ret;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	41480000 	.word	0x41480000
 8004ab4:	41d00000 	.word	0x41d00000
 8004ab8:	42500000 	.word	0x42500000
 8004abc:	42d00000 	.word	0x42d00000
 8004ac0:	43500000 	.word	0x43500000
 8004ac4:	43d00000 	.word	0x43d00000
 8004ac8:	44504000 	.word	0x44504000
 8004acc:	44cf8000 	.word	0x44cf8000
 8004ad0:	45502000 	.word	0x45502000
 8004ad4:	45d02000 	.word	0x45d02000

08004ad8 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d106      	bne.n	8004afc <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004aee:	ed97 0a00 	vldr	s0, [r7]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa26 	bl	8004f44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	e005      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004afc:	ed97 0a00 	vldr	s0, [r7]
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 faab 	bl	800505c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004b06:	4603      	mov	r3, r0
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	331c      	adds	r3, #28
 8004b22:	f107 020b 	add.w	r2, r7, #11
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fc91 	bl	8005450 <lsm6dsl_gy_full_scale_get>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	e030      	b.n	8004b9c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	2b06      	cmp	r3, #6
 8004b3e:	d828      	bhi.n	8004b92 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b7f 	.word	0x08004b7f
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b89 	.word	0x08004b89
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	227d      	movs	r2, #125	; 0x7d
 8004b68:	601a      	str	r2, [r3, #0]
      break;
 8004b6a:	e016      	b.n	8004b9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	22fa      	movs	r2, #250	; 0xfa
 8004b70:	601a      	str	r2, [r3, #0]
      break;
 8004b72:	e012      	b.n	8004b9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b7a:	601a      	str	r2, [r3, #0]
      break;
 8004b7c:	e00d      	b.n	8004b9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b84:	601a      	str	r2, [r3, #0]
      break;
 8004b86:	e008      	b.n	8004b9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b8e:	601a      	str	r2, [r3, #0]
      break;
 8004b90:	e003      	b.n	8004b9a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	60fb      	str	r3, [r7, #12]
      break;
 8004b98:	bf00      	nop
  }

  return ret;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b7d      	cmp	r3, #125	; 0x7d
 8004bb2:	dd12      	ble.n	8004bda <LSM6DSL_GYRO_SetFullScale+0x36>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2bfa      	cmp	r3, #250	; 0xfa
 8004bb8:	dd0d      	ble.n	8004bd6 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bc0:	dd07      	ble.n	8004bd2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc8:	dc01      	bgt.n	8004bce <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004bce:	2306      	movs	r3, #6
 8004bd0:	e004      	b.n	8004bdc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <LSM6DSL_GYRO_SetFullScale+0x38>
 8004bda:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004bdc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	331c      	adds	r3, #28
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fc0c 	bl	8005404 <lsm6dsl_gy_full_scale_set>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	e000      	b.n	8004bfa <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	331c      	adds	r3, #28
 8004c10:	f107 0208 	add.w	r2, r7, #8
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fd0a 	bl	8005630 <lsm6dsl_angular_rate_raw_get>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	e00c      	b.n	8004c42 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004c28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004c30:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004c38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	331c      	adds	r3, #28
 8004c58:	f107 0210 	add.w	r2, r7, #16
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fce6 	bl	8005630 <lsm6dsl_angular_rate_raw_get>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6e:	e03c      	b.n	8004cea <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fe60 	bl	800493c <LSM6DSL_GYRO_GetSensitivity>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	e030      	b.n	8004cea <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004c88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca0:	ee17 2a90 	vmov	r2, s15
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc0:	ee17 2a90 	vmov	r2, s15
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004cc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce0:	ee17 2a90 	vmov	r2, s15
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f103 001c 	add.w	r0, r3, #28
 8004d08:	1cba      	adds	r2, r7, #2
 8004d0a:	78f9      	ldrb	r1, [r7, #3]
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f000 fa75 	bl	80051fc <lsm6dsl_write_reg>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	e000      	b.n	8004d20 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004d34:	edd7 7a00 	vldr	s15, [r7]
 8004d38:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	d801      	bhi.n	8004d4a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e058      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d4a:	edd7 7a00 	vldr	s15, [r7]
 8004d4e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	d801      	bhi.n	8004d60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e04d      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d60:	edd7 7a00 	vldr	s15, [r7]
 8004d64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004e24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	d801      	bhi.n	8004d76 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004d72:	2303      	movs	r3, #3
 8004d74:	e042      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d76:	edd7 7a00 	vldr	s15, [r7]
 8004d7a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d801      	bhi.n	8004d8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	e037      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d8c:	edd7 7a00 	vldr	s15, [r7]
 8004d90:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	d801      	bhi.n	8004da2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	e02c      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004da2:	edd7 7a00 	vldr	s15, [r7]
 8004da6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db2:	d801      	bhi.n	8004db8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004db4:	2306      	movs	r3, #6
 8004db6:	e021      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004db8:	edd7 7a00 	vldr	s15, [r7]
 8004dbc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	d801      	bhi.n	8004dce <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004dca:	2307      	movs	r3, #7
 8004dcc:	e016      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004dce:	edd7 7a00 	vldr	s15, [r7]
 8004dd2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d801      	bhi.n	8004de4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004de0:	2308      	movs	r3, #8
 8004de2:	e00b      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004de4:	edd7 7a00 	vldr	s15, [r7]
 8004de8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df4:	d801      	bhi.n	8004dfa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004df6:	2309      	movs	r3, #9
 8004df8:	e000      	b.n	8004dfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004dfa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004dfc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	331c      	adds	r3, #28
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa6e 	bl	80052e8 <lsm6dsl_xl_data_rate_set>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	e000      	b.n	8004e1a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	42500000 	.word	0x42500000
 8004e28:	42d00000 	.word	0x42d00000
 8004e2c:	43500000 	.word	0x43500000
 8004e30:	43d00000 	.word	0x43d00000
 8004e34:	44504000 	.word	0x44504000
 8004e38:	44cf8000 	.word	0x44cf8000
 8004e3c:	45502000 	.word	0x45502000

08004e40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004e4c:	edd7 7a00 	vldr	s15, [r7]
 8004e50:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5c:	d801      	bhi.n	8004e62 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e058      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e62:	edd7 7a00 	vldr	s15, [r7]
 8004e66:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	d801      	bhi.n	8004e78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e04d      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e78:	edd7 7a00 	vldr	s15, [r7]
 8004e7c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004f28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	d801      	bhi.n	8004e8e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e042      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e8e:	edd7 7a00 	vldr	s15, [r7]
 8004e92:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	d801      	bhi.n	8004ea4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e037      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ea4:	edd7 7a00 	vldr	s15, [r7]
 8004ea8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb4:	d801      	bhi.n	8004eba <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004eb6:	2305      	movs	r3, #5
 8004eb8:	e02c      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004eba:	edd7 7a00 	vldr	s15, [r7]
 8004ebe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d801      	bhi.n	8004ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004ecc:	2306      	movs	r3, #6
 8004ece:	e021      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ed0:	edd7 7a00 	vldr	s15, [r7]
 8004ed4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004f38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	d801      	bhi.n	8004ee6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e016      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ee6:	edd7 7a00 	vldr	s15, [r7]
 8004eea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	d801      	bhi.n	8004efc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	e00b      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004efc:	edd7 7a00 	vldr	s15, [r7]
 8004f00:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004f40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	d801      	bhi.n	8004f12 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004f0e:	2309      	movs	r3, #9
 8004f10:	e000      	b.n	8004f14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f12:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	42500000 	.word	0x42500000
 8004f2c:	42d00000 	.word	0x42d00000
 8004f30:	43500000 	.word	0x43500000
 8004f34:	43d00000 	.word	0x43d00000
 8004f38:	44504000 	.word	0x44504000
 8004f3c:	44cf8000 	.word	0x44cf8000
 8004f40:	45502000 	.word	0x45502000

08004f44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004f50:	edd7 7a00 	vldr	s15, [r7]
 8004f54:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	d801      	bhi.n	8004f66 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e058      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f66:	edd7 7a00 	vldr	s15, [r7]
 8004f6a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	d801      	bhi.n	8004f7c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e04d      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f7c:	edd7 7a00 	vldr	s15, [r7]
 8004f80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005040 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	d801      	bhi.n	8004f92 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e042      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f92:	edd7 7a00 	vldr	s15, [r7]
 8004f96:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005044 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d801      	bhi.n	8004fa8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	e037      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004fa8:	edd7 7a00 	vldr	s15, [r7]
 8004fac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005048 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb8:	d801      	bhi.n	8004fbe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004fba:	2305      	movs	r3, #5
 8004fbc:	e02c      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004fbe:	edd7 7a00 	vldr	s15, [r7]
 8004fc2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d801      	bhi.n	8004fd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004fd0:	2306      	movs	r3, #6
 8004fd2:	e021      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004fd4:	edd7 7a00 	vldr	s15, [r7]
 8004fd8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005050 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d801      	bhi.n	8004fea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	e016      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004fea:	edd7 7a00 	vldr	s15, [r7]
 8004fee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	d801      	bhi.n	8005000 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	e00b      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005000:	edd7 7a00 	vldr	s15, [r7]
 8005004:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005058 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d801      	bhi.n	8005016 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005012:	2309      	movs	r3, #9
 8005014:	e000      	b.n	8005018 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005016:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005018:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	331c      	adds	r3, #28
 800501e:	7bfa      	ldrb	r2, [r7, #15]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fa56 	bl	80054d4 <lsm6dsl_gy_data_rate_set>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	e000      	b.n	8005036 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	42500000 	.word	0x42500000
 8005044:	42d00000 	.word	0x42d00000
 8005048:	43500000 	.word	0x43500000
 800504c:	43d00000 	.word	0x43d00000
 8005050:	44504000 	.word	0x44504000
 8005054:	44cf8000 	.word	0x44cf8000
 8005058:	45502000 	.word	0x45502000

0800505c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005068:	edd7 7a00 	vldr	s15, [r7]
 800506c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	d801      	bhi.n	800507e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800507a:	2301      	movs	r3, #1
 800507c:	e058      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800507e:	edd7 7a00 	vldr	s15, [r7]
 8005082:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	d801      	bhi.n	8005094 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005090:	2302      	movs	r3, #2
 8005092:	e04d      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005094:	edd7 7a00 	vldr	s15, [r7]
 8005098:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005144 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800509c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	d801      	bhi.n	80050aa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80050a6:	2303      	movs	r3, #3
 80050a8:	e042      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80050aa:	edd7 7a00 	vldr	s15, [r7]
 80050ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005148 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80050b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ba:	d801      	bhi.n	80050c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80050bc:	2304      	movs	r3, #4
 80050be:	e037      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80050c0:	edd7 7a00 	vldr	s15, [r7]
 80050c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800514c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80050c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	d801      	bhi.n	80050d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80050d2:	2305      	movs	r3, #5
 80050d4:	e02c      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80050d6:	edd7 7a00 	vldr	s15, [r7]
 80050da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005150 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80050de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	d801      	bhi.n	80050ec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80050e8:	2306      	movs	r3, #6
 80050ea:	e021      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80050ec:	edd7 7a00 	vldr	s15, [r7]
 80050f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005154 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80050f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	d801      	bhi.n	8005102 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80050fe:	2307      	movs	r3, #7
 8005100:	e016      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005102:	edd7 7a00 	vldr	s15, [r7]
 8005106:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005158 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800510a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	d801      	bhi.n	8005118 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005114:	2308      	movs	r3, #8
 8005116:	e00b      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005118:	edd7 7a00 	vldr	s15, [r7]
 800511c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800515c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d801      	bhi.n	800512e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800512a:	2309      	movs	r3, #9
 800512c:	e000      	b.n	8005130 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800512e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	42500000 	.word	0x42500000
 8005148:	42d00000 	.word	0x42d00000
 800514c:	43500000 	.word	0x43500000
 8005150:	43d00000 	.word	0x43d00000
 8005154:	44504000 	.word	0x44504000
 8005158:	44cf8000 	.word	0x44cf8000
 800515c:	45502000 	.word	0x45502000

08005160 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	461a      	mov	r2, r3
 800516c:	460b      	mov	r3, r1
 800516e:	72fb      	strb	r3, [r7, #11]
 8005170:	4613      	mov	r3, r2
 8005172:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	695c      	ldr	r4, [r3, #20]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	7b1b      	ldrb	r3, [r3, #12]
 8005180:	b298      	uxth	r0, r3
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	b299      	uxth	r1, r3
 8005186:	893b      	ldrh	r3, [r7, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	47a0      	blx	r4
 800518c:	4603      	mov	r3, r0
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bd90      	pop	{r4, r7, pc}

08005196 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005196:	b590      	push	{r4, r7, lr}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	461a      	mov	r2, r3
 80051a2:	460b      	mov	r3, r1
 80051a4:	72fb      	strb	r3, [r7, #11]
 80051a6:	4613      	mov	r3, r2
 80051a8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	691c      	ldr	r4, [r3, #16]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	7b1b      	ldrb	r3, [r3, #12]
 80051b6:	b298      	uxth	r0, r3
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	b299      	uxth	r1, r3
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	47a0      	blx	r4
 80051c2:	4603      	mov	r3, r0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd90      	pop	{r4, r7, pc}

080051cc <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	461a      	mov	r2, r3
 80051d8:	460b      	mov	r3, r1
 80051da:	72fb      	strb	r3, [r7, #11]
 80051dc:	4613      	mov	r3, r2
 80051de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685c      	ldr	r4, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6898      	ldr	r0, [r3, #8]
 80051e8:	893b      	ldrh	r3, [r7, #8]
 80051ea:	7af9      	ldrb	r1, [r7, #11]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	47a0      	blx	r4
 80051f0:	6178      	str	r0, [r7, #20]
  return ret;
 80051f2:	697b      	ldr	r3, [r7, #20]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd90      	pop	{r4, r7, pc}

080051fc <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	461a      	mov	r2, r3
 8005208:	460b      	mov	r3, r1
 800520a:	72fb      	strb	r3, [r7, #11]
 800520c:	4613      	mov	r3, r2
 800520e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681c      	ldr	r4, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6898      	ldr	r0, [r3, #8]
 8005218:	893b      	ldrh	r3, [r7, #8]
 800521a:	7af9      	ldrb	r1, [r7, #11]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	47a0      	blx	r4
 8005220:	6178      	str	r0, [r7, #20]
  return ret;
 8005222:	697b      	ldr	r3, [r7, #20]
}
 8005224:	4618      	mov	r0, r3
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}

0800522c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005238:	f107 0208 	add.w	r2, r7, #8
 800523c:	2301      	movs	r3, #1
 800523e:	2110      	movs	r1, #16
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ffc3 	bl	80051cc <lsm6dsl_read_reg>
 8005246:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	b2da      	uxtb	r2, r3
 8005256:	7a3b      	ldrb	r3, [r7, #8]
 8005258:	f362 0383 	bfi	r3, r2, #2, #2
 800525c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800525e:	f107 0208 	add.w	r2, r7, #8
 8005262:	2301      	movs	r3, #1
 8005264:	2110      	movs	r1, #16
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ffc8 	bl	80051fc <lsm6dsl_write_reg>
 800526c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005282:	f107 0208 	add.w	r2, r7, #8
 8005286:	2301      	movs	r3, #1
 8005288:	2110      	movs	r1, #16
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ff9e 	bl	80051cc <lsm6dsl_read_reg>
 8005290:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8005292:	7a3b      	ldrb	r3, [r7, #8]
 8005294:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b03      	cmp	r3, #3
 800529c:	d81a      	bhi.n	80052d4 <lsm6dsl_xl_full_scale_get+0x5c>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052bd 	.word	0x080052bd
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e00f      	b.n	80052dc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e00b      	b.n	80052dc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2202      	movs	r2, #2
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e007      	b.n	80052dc <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2203      	movs	r2, #3
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	e003      	b.n	80052dc <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2204      	movs	r2, #4
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	bf00      	nop
  }

  return ret;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80052f4:	f107 0208 	add.w	r2, r7, #8
 80052f8:	2301      	movs	r3, #1
 80052fa:	2110      	movs	r1, #16
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff65 	bl	80051cc <lsm6dsl_read_reg>
 8005302:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	b2da      	uxtb	r2, r3
 8005312:	7a3b      	ldrb	r3, [r7, #8]
 8005314:	f362 1307 	bfi	r3, r2, #4, #4
 8005318:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	2301      	movs	r3, #1
 8005320:	2110      	movs	r1, #16
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ff6a 	bl	80051fc <lsm6dsl_write_reg>
 8005328:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800533e:	f107 0208 	add.w	r2, r7, #8
 8005342:	2301      	movs	r3, #1
 8005344:	2110      	movs	r1, #16
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ff40 	bl	80051cc <lsm6dsl_read_reg>
 800534c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800534e:	7a3b      	ldrb	r3, [r7, #8]
 8005350:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b0b      	cmp	r3, #11
 8005358:	d84a      	bhi.n	80053f0 <lsm6dsl_xl_data_rate_get+0xbc>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <lsm6dsl_xl_data_rate_get+0x2c>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005391 	.word	0x08005391
 8005364:	08005399 	.word	0x08005399
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053a9 	.word	0x080053a9
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053d9 	.word	0x080053d9
 8005388:	080053e1 	.word	0x080053e1
 800538c:	080053e9 	.word	0x080053e9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
      break;
 8005396:	e02f      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
      break;
 800539e:	e02b      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2202      	movs	r2, #2
 80053a4:	701a      	strb	r2, [r3, #0]
      break;
 80053a6:	e027      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2203      	movs	r2, #3
 80053ac:	701a      	strb	r2, [r3, #0]
      break;
 80053ae:	e023      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2204      	movs	r2, #4
 80053b4:	701a      	strb	r2, [r3, #0]
      break;
 80053b6:	e01f      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2205      	movs	r2, #5
 80053bc:	701a      	strb	r2, [r3, #0]
      break;
 80053be:	e01b      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2206      	movs	r2, #6
 80053c4:	701a      	strb	r2, [r3, #0]
      break;
 80053c6:	e017      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2207      	movs	r2, #7
 80053cc:	701a      	strb	r2, [r3, #0]
      break;
 80053ce:	e013      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2208      	movs	r2, #8
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e00f      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2209      	movs	r2, #9
 80053dc:	701a      	strb	r2, [r3, #0]
      break;
 80053de:	e00b      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	220a      	movs	r2, #10
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e007      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	220b      	movs	r2, #11
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	e003      	b.n	80053f8 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	220c      	movs	r2, #12
 80053f4:	701a      	strb	r2, [r3, #0]
      break;
 80053f6:	bf00      	nop
  }

  return ret;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop

08005404 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005410:	f107 0208 	add.w	r2, r7, #8
 8005414:	2301      	movs	r3, #1
 8005416:	2111      	movs	r1, #17
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fed7 	bl	80051cc <lsm6dsl_read_reg>
 800541e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	b2da      	uxtb	r2, r3
 800542e:	7a3b      	ldrb	r3, [r7, #8]
 8005430:	f362 0343 	bfi	r3, r2, #1, #3
 8005434:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005436:	f107 0208 	add.w	r2, r7, #8
 800543a:	2301      	movs	r3, #1
 800543c:	2111      	movs	r1, #17
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fedc 	bl	80051fc <lsm6dsl_write_reg>
 8005444:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800545a:	f107 0208 	add.w	r2, r7, #8
 800545e:	2301      	movs	r3, #1
 8005460:	2111      	movs	r1, #17
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff feb2 	bl	80051cc <lsm6dsl_read_reg>
 8005468:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800546a:	7a3b      	ldrb	r3, [r7, #8]
 800546c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b06      	cmp	r3, #6
 8005474:	d824      	bhi.n	80054c0 <lsm6dsl_gy_full_scale_get+0x70>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	08005499 	.word	0x08005499
 8005480:	080054a1 	.word	0x080054a1
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054c1 	.word	0x080054c1
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054c1 	.word	0x080054c1
 8005494:	080054b9 	.word	0x080054b9
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
      break;
 800549e:	e013      	b.n	80054c8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
      break;
 80054a6:	e00f      	b.n	80054c8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2202      	movs	r2, #2
 80054ac:	701a      	strb	r2, [r3, #0]
      break;
 80054ae:	e00b      	b.n	80054c8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2204      	movs	r2, #4
 80054b4:	701a      	strb	r2, [r3, #0]
      break;
 80054b6:	e007      	b.n	80054c8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2206      	movs	r2, #6
 80054bc:	701a      	strb	r2, [r3, #0]
      break;
 80054be:	e003      	b.n	80054c8 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2207      	movs	r2, #7
 80054c4:	701a      	strb	r2, [r3, #0]
      break;
 80054c6:	bf00      	nop
  }

  return ret;
 80054c8:	68fb      	ldr	r3, [r7, #12]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop

080054d4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80054e0:	f107 0208 	add.w	r2, r7, #8
 80054e4:	2301      	movs	r3, #1
 80054e6:	2111      	movs	r1, #17
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fe6f 	bl	80051cc <lsm6dsl_read_reg>
 80054ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	7a3b      	ldrb	r3, [r7, #8]
 8005500:	f362 1307 	bfi	r3, r2, #4, #4
 8005504:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005506:	f107 0208 	add.w	r2, r7, #8
 800550a:	2301      	movs	r3, #1
 800550c:	2111      	movs	r1, #17
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe74 	bl	80051fc <lsm6dsl_write_reg>
 8005514:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005516:	68fb      	ldr	r3, [r7, #12]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800552a:	f107 0208 	add.w	r2, r7, #8
 800552e:	2301      	movs	r3, #1
 8005530:	2111      	movs	r1, #17
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fe4a 	bl	80051cc <lsm6dsl_read_reg>
 8005538:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800553a:	7a3b      	ldrb	r3, [r7, #8]
 800553c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b0a      	cmp	r3, #10
 8005544:	d844      	bhi.n	80055d0 <lsm6dsl_gy_data_rate_get+0xb0>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <lsm6dsl_gy_data_rate_get+0x2c>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005579 	.word	0x08005579
 8005550:	08005581 	.word	0x08005581
 8005554:	08005589 	.word	0x08005589
 8005558:	08005591 	.word	0x08005591
 800555c:	08005599 	.word	0x08005599
 8005560:	080055a1 	.word	0x080055a1
 8005564:	080055a9 	.word	0x080055a9
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055b9 	.word	0x080055b9
 8005570:	080055c1 	.word	0x080055c1
 8005574:	080055c9 	.word	0x080055c9
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
      break;
 800557e:	e02b      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	e027      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2202      	movs	r2, #2
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	e023      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2203      	movs	r2, #3
 8005594:	701a      	strb	r2, [r3, #0]
      break;
 8005596:	e01f      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2204      	movs	r2, #4
 800559c:	701a      	strb	r2, [r3, #0]
      break;
 800559e:	e01b      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2205      	movs	r2, #5
 80055a4:	701a      	strb	r2, [r3, #0]
      break;
 80055a6:	e017      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2206      	movs	r2, #6
 80055ac:	701a      	strb	r2, [r3, #0]
      break;
 80055ae:	e013      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2207      	movs	r2, #7
 80055b4:	701a      	strb	r2, [r3, #0]
      break;
 80055b6:	e00f      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2208      	movs	r2, #8
 80055bc:	701a      	strb	r2, [r3, #0]
      break;
 80055be:	e00b      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2209      	movs	r2, #9
 80055c4:	701a      	strb	r2, [r3, #0]
      break;
 80055c6:	e007      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	220a      	movs	r2, #10
 80055cc:	701a      	strb	r2, [r3, #0]
      break;
 80055ce:	e003      	b.n	80055d8 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	220b      	movs	r2, #11
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	bf00      	nop
  }

  return ret;
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop

080055e4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80055f0:	f107 0208 	add.w	r2, r7, #8
 80055f4:	2301      	movs	r3, #1
 80055f6:	2112      	movs	r1, #18
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fde7 	bl	80051cc <lsm6dsl_read_reg>
 80055fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	7a3b      	ldrb	r3, [r7, #8]
 8005610:	f362 1386 	bfi	r3, r2, #6, #1
 8005614:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005616:	f107 0208 	add.w	r2, r7, #8
 800561a:	2301      	movs	r3, #1
 800561c:	2112      	movs	r1, #18
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fdec 	bl	80051fc <lsm6dsl_write_reg>
 8005624:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800563a:	f107 020c 	add.w	r2, r7, #12
 800563e:	2306      	movs	r3, #6
 8005640:	2122      	movs	r1, #34	; 0x22
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fdc2 	bl	80051cc <lsm6dsl_read_reg>
 8005648:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800564a:	7b7b      	ldrb	r3, [r7, #13]
 800564c:	b21a      	sxth	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005658:	b29b      	uxth	r3, r3
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b29a      	uxth	r2, r3
 800565e:	7b3b      	ldrb	r3, [r7, #12]
 8005660:	b29b      	uxth	r3, r3
 8005662:	4413      	add	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	b21a      	sxth	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800566c:	7bfa      	ldrb	r2, [r7, #15]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3302      	adds	r3, #2
 8005672:	b212      	sxth	r2, r2
 8005674:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	3302      	adds	r3, #2
 800567a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800567e:	b29b      	uxth	r3, r3
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	b29a      	uxth	r2, r3
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	b29b      	uxth	r3, r3
 8005688:	4413      	add	r3, r2
 800568a:	b29a      	uxth	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	3302      	adds	r3, #2
 8005690:	b212      	sxth	r2, r2
 8005692:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005694:	7c7a      	ldrb	r2, [r7, #17]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3304      	adds	r3, #4
 800569a:	b212      	sxth	r2, r2
 800569c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	3304      	adds	r3, #4
 80056a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	7c3b      	ldrb	r3, [r7, #16]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	3304      	adds	r3, #4
 80056b8:	b212      	sxth	r2, r2
 80056ba:	801a      	strh	r2, [r3, #0]
  return ret;
 80056bc:	697b      	ldr	r3, [r7, #20]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80056d0:	f107 020c 	add.w	r2, r7, #12
 80056d4:	2306      	movs	r3, #6
 80056d6:	2128      	movs	r1, #40	; 0x28
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff fd77 	bl	80051cc <lsm6dsl_read_reg>
 80056de:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80056e0:	7b7b      	ldrb	r3, [r7, #13]
 80056e2:	b21a      	sxth	r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	7b3b      	ldrb	r3, [r7, #12]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	b21a      	sxth	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	3302      	adds	r3, #2
 8005708:	b212      	sxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	3302      	adds	r3, #2
 8005710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005714:	b29b      	uxth	r3, r3
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	b29a      	uxth	r2, r3
 800571a:	7bbb      	ldrb	r3, [r7, #14]
 800571c:	b29b      	uxth	r3, r3
 800571e:	4413      	add	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	3302      	adds	r3, #2
 8005726:	b212      	sxth	r2, r2
 8005728:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800572a:	7c7a      	ldrb	r2, [r7, #17]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3304      	adds	r3, #4
 8005730:	b212      	sxth	r2, r2
 8005732:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	3304      	adds	r3, #4
 8005738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800573c:	b29b      	uxth	r3, r3
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	b29a      	uxth	r2, r3
 8005742:	7c3b      	ldrb	r3, [r7, #16]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4413      	add	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3304      	adds	r3, #4
 800574e:	b212      	sxth	r2, r2
 8005750:	801a      	strh	r2, [r3, #0]
  return ret;
 8005752:	697b      	ldr	r3, [r7, #20]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005766:	2301      	movs	r3, #1
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	210f      	movs	r1, #15
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fd2d 	bl	80051cc <lsm6dsl_read_reg>
 8005772:	60f8      	str	r0, [r7, #12]
  return ret;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800578a:	f107 0208 	add.w	r2, r7, #8
 800578e:	2301      	movs	r3, #1
 8005790:	2112      	movs	r1, #18
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fd1a 	bl	80051cc <lsm6dsl_read_reg>
 8005798:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10f      	bne.n	80057c0 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	7a3b      	ldrb	r3, [r7, #8]
 80057aa:	f362 0382 	bfi	r3, r2, #2, #1
 80057ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80057b0:	f107 0208 	add.w	r2, r7, #8
 80057b4:	2301      	movs	r3, #1
 80057b6:	2112      	movs	r1, #18
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fd1f 	bl	80051fc <lsm6dsl_write_reg>
 80057be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80057d6:	f107 0208 	add.w	r2, r7, #8
 80057da:	2301      	movs	r3, #1
 80057dc:	210a      	movs	r1, #10
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fcf4 	bl	80051cc <lsm6dsl_read_reg>
 80057e4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10f      	bne.n	800580c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	7a3b      	ldrb	r3, [r7, #8]
 80057f6:	f362 0302 	bfi	r3, r2, #0, #3
 80057fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80057fc:	f107 0208 	add.w	r2, r7, #8
 8005800:	2301      	movs	r3, #1
 8005802:	210a      	movs	r1, #10
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fcf9 	bl	80051fc <lsm6dsl_write_reg>
 800580a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <IKS01A2_ENV_SENSOR_Disable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d903      	bls.n	8005830 <IKS01A2_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005828:	f06f 0301 	mvn.w	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e028      	b.n	8005882 <IKS01A2_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <IKS01A2_ENV_SENSOR_Disable+0x74>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4013      	ands	r3, r2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d11c      	bne.n	800587c <IKS01A2_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <IKS01A2_ENV_SENSOR_Disable+0x78>)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800584a:	4812      	ldr	r0, [pc, #72]	; (8005894 <IKS01A2_ENV_SENSOR_Disable+0x7c>)
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4413      	add	r3, r2
 8005854:	440b      	add	r3, r1
 8005856:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	490e      	ldr	r1, [pc, #56]	; (8005898 <IKS01A2_ENV_SENSOR_Disable+0x80>)
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <IKS01A2_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800586e:	f06f 0304 	mvn.w	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e005      	b.n	8005882 <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e002      	b.n	8005882 <IKS01A2_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800587c:	f06f 0301 	mvn.w	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200011ac 	.word	0x200011ac
 8005890:	200000d0 	.word	0x200000d0
 8005894:	20001194 	.word	0x20001194
 8005898:	2000156c 	.word	0x2000156c

0800589c <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08e      	sub	sp, #56	; 0x38
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80058aa:	2301      	movs	r3, #1
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d06e      	beq.n	8005996 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	f200 809d 	bhi.w	80059fa <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <IKS01A2_MOTION_SENSOR_Init+0x32>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d032      	beq.n	8005932 <IKS01A2_MOTION_SENSOR_Init+0x96>
 80058cc:	e095      	b.n	80059fa <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80058ce:	6838      	ldr	r0, [r7, #0]
 80058d0:	f000 fa32 	bl	8005d38 <LSM6DSL_0_Probe>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	e0cc      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80058e0:	4a68      	ldr	r2, [pc, #416]	; (8005a84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4967      	ldr	r1, [pc, #412]	; (8005a88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058f2:	f107 010c 	add.w	r1, r7, #12
 80058f6:	4610      	mov	r0, r2
 80058f8:	4798      	blx	r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005900:	f06f 0306 	mvn.w	r3, #6
 8005904:	e0b9      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005906:	7b3b      	ldrb	r3, [r7, #12]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d103      	bne.n	8005914 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005914:	7b7b      	ldrb	r3, [r7, #13]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d103      	bne.n	8005922 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d16c      	bne.n	8005a02 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	f043 0304 	orr.w	r3, r3, #4
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005930:	e067      	b.n	8005a02 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005932:	6838      	ldr	r0, [r7, #0]
 8005934:	f000 fabc 	bl	8005eb0 <LSM303AGR_ACC_0_Probe>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	e09a      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005944:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	494e      	ldr	r1, [pc, #312]	; (8005a88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005956:	f107 010c 	add.w	r1, r7, #12
 800595a:	4610      	mov	r0, r2
 800595c:	4798      	blx	r3
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005964:	f06f 0306 	mvn.w	r3, #6
 8005968:	e087      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800596a:	7b3b      	ldrb	r3, [r7, #12]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d103      	bne.n	8005978 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	f043 0302 	orr.w	r3, r3, #2
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005978:	7b7b      	ldrb	r3, [r7, #13]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d103      	bne.n	8005986 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d13c      	bne.n	8005a06 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005994:	e037      	b.n	8005a06 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005996:	6838      	ldr	r0, [r7, #0]
 8005998:	f000 fb2e 	bl	8005ff8 <LSM303AGR_MAG_0_Probe>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e068      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80059a8:	4a36      	ldr	r2, [pc, #216]	; (8005a84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4935      	ldr	r1, [pc, #212]	; (8005a88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059ba:	f107 010c 	add.w	r1, r7, #12
 80059be:	4610      	mov	r0, r2
 80059c0:	4798      	blx	r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059c8:	f06f 0306 	mvn.w	r3, #6
 80059cc:	e055      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059ce:	7b3b      	ldrb	r3, [r7, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d103      	bne.n	80059dc <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	f043 0302 	orr.w	r3, r3, #2
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d103      	bne.n	80059ea <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d10c      	bne.n	8005a0a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f043 0304 	orr.w	r3, r3, #4
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059f8:	e007      	b.n	8005a0a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80059fa:	f06f 0301 	mvn.w	r3, #1
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005a00:	e004      	b.n	8005a0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a0a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	e031      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	e02a      	b.n	8005a72 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	4013      	ands	r3, r2
 8005a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d11e      	bne.n	8005a66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d118      	bne.n	8005a66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a3c:	4814      	ldr	r0, [pc, #80]	; (8005a90 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	440b      	add	r3, r1
 8005a48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	490e      	ldr	r1, [pc, #56]	; (8005a88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a56:	4610      	mov	r0, r2
 8005a58:	4798      	blx	r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005a60:	f06f 0304 	mvn.w	r3, #4
 8005a64:	e009      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	3301      	adds	r3, #1
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d9d1      	bls.n	8005a1c <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3738      	adds	r7, #56	; 0x38
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200011d8 	.word	0x200011d8
 8005a88:	20001574 	.word	0x20001574
 8005a8c:	200000e4 	.word	0x200000e4
 8005a90:	200011b4 	.word	0x200011b4

08005a94 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d903      	bls.n	8005aac <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005aa4:	f06f 0301 	mvn.w	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e028      	b.n	8005afe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11c      	bne.n	8005af8 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ac6:	4812      	ldr	r0, [pc, #72]	; (8005b10 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	490e      	ldr	r1, [pc, #56]	; (8005b14 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aea:	f06f 0304 	mvn.w	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e005      	b.n	8005afe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e002      	b.n	8005afe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005af8:	f06f 0301 	mvn.w	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200011e4 	.word	0x200011e4
 8005b0c:	200000e4 	.word	0x200000e4
 8005b10:	200011b4 	.word	0x200011b4
 8005b14:	20001574 	.word	0x20001574

08005b18 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d903      	bls.n	8005b30 <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b28:	f06f 0301 	mvn.w	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e028      	b.n	8005b82 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d11c      	bne.n	8005b7c <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005b42:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b4a:	4812      	ldr	r0, [pc, #72]	; (8005b94 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	440b      	add	r3, r1
 8005b56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b6e:	f06f 0304 	mvn.w	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e005      	b.n	8005b82 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e002      	b.n	8005b82 <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b7c:	f06f 0301 	mvn.w	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005b82:	68fb      	ldr	r3, [r7, #12]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	200011e4 	.word	0x200011e4
 8005b90:	200000e4 	.word	0x200000e4
 8005b94:	200011b4 	.word	0x200011b4
 8005b98:	20001574 	.word	0x20001574

08005b9c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d903      	bls.n	8005bb6 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e029      	b.n	8005c0a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005bb6:	4a17      	ldr	r2, [pc, #92]	; (8005c14 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d11d      	bne.n	8005c04 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bd0:	4812      	ldr	r0, [pc, #72]	; (8005c1c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	490f      	ldr	r1, [pc, #60]	; (8005c20 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bf6:	f06f 0304 	mvn.w	r3, #4
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e005      	b.n	8005c0a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e002      	b.n	8005c0a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c04:	f06f 0301 	mvn.w	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c0a:	697b      	ldr	r3, [r7, #20]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200011e4 	.word	0x200011e4
 8005c18:	200000e4 	.word	0x200000e4
 8005c1c:	200011b4 	.word	0x200011b4
 8005c20:	20001574 	.word	0x20001574

08005c24 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d903      	bls.n	8005c40 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c38:	f06f 0301 	mvn.w	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e02a      	b.n	8005c96 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c40:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d11e      	bne.n	8005c90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005c52:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c5a:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	440b      	add	r3, r1
 8005c66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	490f      	ldr	r1, [pc, #60]	; (8005cac <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c74:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4798      	blx	r3
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c82:	f06f 0304 	mvn.w	r3, #4
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e005      	b.n	8005c96 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e002      	b.n	8005c96 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c90:	f06f 0301 	mvn.w	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c96:	697b      	ldr	r3, [r7, #20]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	200011e4 	.word	0x200011e4
 8005ca4:	200000e4 	.word	0x200000e4
 8005ca8:	200011b4 	.word	0x200011b4
 8005cac:	20001574 	.word	0x20001574

08005cb0 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d903      	bls.n	8005cca <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cc2:	f06f 0301 	mvn.w	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e029      	b.n	8005d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d11d      	bne.n	8005d18 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ce4:	4812      	ldr	r0, [pc, #72]	; (8005d30 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	440b      	add	r3, r1
 8005cf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	490f      	ldr	r1, [pc, #60]	; (8005d34 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d0a:	f06f 0304 	mvn.w	r3, #4
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e005      	b.n	8005d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e002      	b.n	8005d1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d18:	f06f 0301 	mvn.w	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200011e4 	.word	0x200011e4
 8005d2c:	200000e4 	.word	0x200000e4
 8005d30:	200011b4 	.word	0x200011b4
 8005d34:	20001574 	.word	0x20001574

08005d38 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b092      	sub	sp, #72	; 0x48
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005d44:	2300      	movs	r3, #0
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005d48:	23d7      	movs	r3, #215	; 0xd7
 8005d4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <LSM6DSL_0_Probe+0x140>)
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <LSM6DSL_0_Probe+0x144>)
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <LSM6DSL_0_Probe+0x148>)
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005d5a:	4b4a      	ldr	r3, [pc, #296]	; (8005e84 <LSM6DSL_0_Probe+0x14c>)
 8005d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <LSM6DSL_0_Probe+0x150>)
 8005d60:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d66:	4619      	mov	r1, r3
 8005d68:	4848      	ldr	r0, [pc, #288]	; (8005e8c <LSM6DSL_0_Probe+0x154>)
 8005d6a:	f7fe fa3f 	bl	80041ec <LSM6DSL_RegisterBusIO>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d74:	f06f 0306 	mvn.w	r3, #6
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7a:	e077      	b.n	8005e6c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005d7c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d80:	4619      	mov	r1, r3
 8005d82:	4842      	ldr	r0, [pc, #264]	; (8005e8c <LSM6DSL_0_Probe+0x154>)
 8005d84:	f7fe fb28 	bl	80043d8 <LSM6DSL_ReadID>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d8e:	f06f 0306 	mvn.w	r3, #6
 8005d92:	647b      	str	r3, [r7, #68]	; 0x44
 8005d94:	e06a      	b.n	8005e6c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d9a:	2b6a      	cmp	r3, #106	; 0x6a
 8005d9c:	d003      	beq.n	8005da6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d9e:	f06f 0306 	mvn.w	r3, #6
 8005da2:	647b      	str	r3, [r7, #68]	; 0x44
 8005da4:	e062      	b.n	8005e6c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	4619      	mov	r1, r3
 8005dac:	4837      	ldr	r0, [pc, #220]	; (8005e8c <LSM6DSL_0_Probe+0x154>)
 8005dae:	f7fe fb29 	bl	8004404 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005db2:	7a7b      	ldrb	r3, [r7, #9]
 8005db4:	461a      	mov	r2, r3
 8005db6:	7a3b      	ldrb	r3, [r7, #8]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	7abb      	ldrb	r3, [r7, #10]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	4a33      	ldr	r2, [pc, #204]	; (8005e90 <LSM6DSL_0_Probe+0x158>)
 8005dc4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005dc6:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <LSM6DSL_0_Probe+0x15c>)
 8005dc8:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <LSM6DSL_0_Probe+0x154>)
 8005dca:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005dcc:	4b32      	ldr	r3, [pc, #200]	; (8005e98 <LSM6DSL_0_Probe+0x160>)
 8005dce:	4a33      	ldr	r2, [pc, #204]	; (8005e9c <LSM6DSL_0_Probe+0x164>)
 8005dd0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11d      	bne.n	8005e14 <LSM6DSL_0_Probe+0xdc>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <LSM6DSL_0_Probe+0xdc>
 8005de2:	7a7b      	ldrb	r3, [r7, #9]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d115      	bne.n	8005e14 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <LSM6DSL_0_Probe+0x168>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <LSM6DSL_0_Probe+0x16c>)
 8005dee:	492e      	ldr	r1, [pc, #184]	; (8005ea8 <LSM6DSL_0_Probe+0x170>)
 8005df0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005df4:	4b28      	ldr	r3, [pc, #160]	; (8005e98 <LSM6DSL_0_Probe+0x160>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <LSM6DSL_0_Probe+0x15c>)
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e08:	f06f 0304 	mvn.w	r3, #4
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0e:	e001      	b.n	8005e14 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d11d      	bne.n	8005e56 <LSM6DSL_0_Probe+0x11e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d018      	beq.n	8005e56 <LSM6DSL_0_Probe+0x11e>
 8005e24:	7a3b      	ldrb	r3, [r7, #8]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d115      	bne.n	8005e56 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <LSM6DSL_0_Probe+0x168>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <LSM6DSL_0_Probe+0x16c>)
 8005e30:	491e      	ldr	r1, [pc, #120]	; (8005eac <LSM6DSL_0_Probe+0x174>)
 8005e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005e36:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <LSM6DSL_0_Probe+0x160>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <LSM6DSL_0_Probe+0x15c>)
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e4a:	f06f 0304 	mvn.w	r3, #4
 8005e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e50:	e001      	b.n	8005e56 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d107      	bne.n	8005e6c <LSM6DSL_0_Probe+0x134>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e66:	f06f 0304 	mvn.w	r3, #4
 8005e6a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3748      	adds	r7, #72	; 0x48
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	08002581 	.word	0x08002581
 8005e7c:	080025fd 	.word	0x080025fd
 8005e80:	080026b1 	.word	0x080026b1
 8005e84:	0800264d 	.word	0x0800264d
 8005e88:	08002715 	.word	0x08002715
 8005e8c:	200011f0 	.word	0x200011f0
 8005e90:	200011e4 	.word	0x200011e4
 8005e94:	20001574 	.word	0x20001574
 8005e98:	200011d8 	.word	0x200011d8
 8005e9c:	20000078 	.word	0x20000078
 8005ea0:	200000e4 	.word	0x200000e4
 8005ea4:	200011b4 	.word	0x200011b4
 8005ea8:	200000ac 	.word	0x200000ac
 8005eac:	20000088 	.word	0x20000088

08005eb0 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b092      	sub	sp, #72	; 0x48
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005ec0:	2333      	movs	r3, #51	; 0x33
 8005ec2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <LSM303AGR_ACC_0_Probe+0x114>)
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005eca:	4b3f      	ldr	r3, [pc, #252]	; (8005fc8 <LSM303AGR_ACC_0_Probe+0x118>)
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005ece:	4b3f      	ldr	r3, [pc, #252]	; (8005fcc <LSM303AGR_ACC_0_Probe+0x11c>)
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005ed2:	4b3f      	ldr	r3, [pc, #252]	; (8005fd0 <LSM303AGR_ACC_0_Probe+0x120>)
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005ed6:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <LSM303AGR_ACC_0_Probe+0x124>)
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ede:	4619      	mov	r1, r3
 8005ee0:	483d      	ldr	r0, [pc, #244]	; (8005fd8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005ee2:	f7fc fdcd 	bl	8002a80 <LSM303AGR_ACC_RegisterBusIO>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005eec:	f06f 0306 	mvn.w	r3, #6
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef2:	e062      	b.n	8005fba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005ef4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4837      	ldr	r0, [pc, #220]	; (8005fd8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005efc:	f7fc fe81 	bl	8002c02 <LSM303AGR_ACC_ReadID>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f06:	f06f 0306 	mvn.w	r3, #6
 8005f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0c:	e055      	b.n	8005fba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f12:	2b33      	cmp	r3, #51	; 0x33
 8005f14:	d003      	beq.n	8005f1e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f16:	f06f 0306 	mvn.w	r3, #6
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	e04d      	b.n	8005fba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005f1e:	f107 0308 	add.w	r3, r7, #8
 8005f22:	4619      	mov	r1, r3
 8005f24:	482c      	ldr	r0, [pc, #176]	; (8005fd8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f26:	f7fc fe83 	bl	8002c30 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f2a:	7a7b      	ldrb	r3, [r7, #9]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	7a3b      	ldrb	r3, [r7, #8]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005f34:	7abb      	ldrb	r3, [r7, #10]
 8005f36:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <LSM303AGR_ACC_0_Probe+0x12c>)
 8005f3c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005f3e:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f42:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005f46:	4a28      	ldr	r2, [pc, #160]	; (8005fe8 <LSM303AGR_ACC_0_Probe+0x138>)
 8005f48:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11e      	bne.n	8005f8e <LSM303AGR_ACC_0_Probe+0xde>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <LSM303AGR_ACC_0_Probe+0xde>
 8005f5a:	7a3b      	ldrb	r3, [r7, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d116      	bne.n	8005f8e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005f60:	4b22      	ldr	r3, [pc, #136]	; (8005fec <LSM303AGR_ACC_0_Probe+0x13c>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <LSM303AGR_ACC_0_Probe+0x140>)
 8005f66:	3303      	adds	r3, #3
 8005f68:	4922      	ldr	r1, [pc, #136]	; (8005ff4 <LSM303AGR_ACC_0_Probe+0x144>)
 8005f6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005f76:	6852      	ldr	r2, [r2, #4]
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f82:	f06f 0304 	mvn.w	r3, #4
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	e001      	b.n	8005f8e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <LSM303AGR_ACC_0_Probe+0xf4>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f9e:	f06f 0304 	mvn.w	r3, #4
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d107      	bne.n	8005fba <LSM303AGR_ACC_0_Probe+0x10a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fb4:	f06f 0304 	mvn.w	r3, #4
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3748      	adds	r7, #72	; 0x48
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08002581 	.word	0x08002581
 8005fc8:	080025fd 	.word	0x080025fd
 8005fcc:	080026b1 	.word	0x080026b1
 8005fd0:	0800264d 	.word	0x0800264d
 8005fd4:	08002715 	.word	0x08002715
 8005fd8:	20001220 	.word	0x20001220
 8005fdc:	200011e4 	.word	0x200011e4
 8005fe0:	20001574 	.word	0x20001574
 8005fe4:	200011d8 	.word	0x200011d8
 8005fe8:	20000010 	.word	0x20000010
 8005fec:	200000e4 	.word	0x200000e4
 8005ff0:	200011b4 	.word	0x200011b4
 8005ff4:	20000020 	.word	0x20000020

08005ff8 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b092      	sub	sp, #72	; 0x48
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006000:	2300      	movs	r3, #0
 8006002:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006004:	2300      	movs	r3, #0
 8006006:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006008:	233d      	movs	r3, #61	; 0x3d
 800600a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800600e:	4b3f      	ldr	r3, [pc, #252]	; (800610c <LSM303AGR_MAG_0_Probe+0x114>)
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006012:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <LSM303AGR_MAG_0_Probe+0x118>)
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800601a:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <LSM303AGR_MAG_0_Probe+0x120>)
 800601c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800601e:	4b3f      	ldr	r3, [pc, #252]	; (800611c <LSM303AGR_MAG_0_Probe+0x124>)
 8006020:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006026:	4619      	mov	r1, r3
 8006028:	483d      	ldr	r0, [pc, #244]	; (8006120 <LSM303AGR_MAG_0_Probe+0x128>)
 800602a:	f7fd f8ef 	bl	800320c <LSM303AGR_MAG_RegisterBusIO>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006034:	f06f 0306 	mvn.w	r3, #6
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
 800603a:	e062      	b.n	8006102 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800603c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006040:	4619      	mov	r1, r3
 8006042:	4837      	ldr	r0, [pc, #220]	; (8006120 <LSM303AGR_MAG_0_Probe+0x128>)
 8006044:	f7fd f999 	bl	800337a <LSM303AGR_MAG_ReadID>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800604e:	f06f 0306 	mvn.w	r3, #6
 8006052:	647b      	str	r3, [r7, #68]	; 0x44
 8006054:	e055      	b.n	8006102 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8006056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d003      	beq.n	8006066 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800605e:	f06f 0306 	mvn.w	r3, #6
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
 8006064:	e04d      	b.n	8006102 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4619      	mov	r1, r3
 800606c:	482c      	ldr	r0, [pc, #176]	; (8006120 <LSM303AGR_MAG_0_Probe+0x128>)
 800606e:	f7fd f99b 	bl	80033a8 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006072:	7a7b      	ldrb	r3, [r7, #9]
 8006074:	461a      	mov	r2, r3
 8006076:	7a3b      	ldrb	r3, [r7, #8]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800607c:	7abb      	ldrb	r3, [r7, #10]
 800607e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006080:	4313      	orrs	r3, r2
 8006082:	4a28      	ldr	r2, [pc, #160]	; (8006124 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006084:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006086:	4b28      	ldr	r3, [pc, #160]	; (8006128 <LSM303AGR_MAG_0_Probe+0x130>)
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <LSM303AGR_MAG_0_Probe+0x128>)
 800608a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <LSM303AGR_MAG_0_Probe+0x134>)
 800608e:	4a28      	ldr	r2, [pc, #160]	; (8006130 <LSM303AGR_MAG_0_Probe+0x138>)
 8006090:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11e      	bne.n	80060d6 <LSM303AGR_MAG_0_Probe+0xde>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d019      	beq.n	80060d6 <LSM303AGR_MAG_0_Probe+0xde>
 80060a2:	7abb      	ldrb	r3, [r7, #10]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d116      	bne.n	80060d6 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <LSM303AGR_MAG_0_Probe+0x13c>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <LSM303AGR_MAG_0_Probe+0x140>)
 80060ae:	3306      	adds	r3, #6
 80060b0:	4922      	ldr	r1, [pc, #136]	; (800613c <LSM303AGR_MAG_0_Probe+0x144>)
 80060b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <LSM303AGR_MAG_0_Probe+0x134>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <LSM303AGR_MAG_0_Probe+0x130>)
 80060be:	6892      	ldr	r2, [r2, #8]
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060ca:	f06f 0304 	mvn.w	r3, #4
 80060ce:	647b      	str	r3, [r7, #68]	; 0x44
 80060d0:	e001      	b.n	80060d6 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <LSM303AGR_MAG_0_Probe+0xf4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e6:	f06f 0304 	mvn.w	r3, #4
 80060ea:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80060ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d107      	bne.n	8006102 <LSM303AGR_MAG_0_Probe+0x10a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060fc:	f06f 0304 	mvn.w	r3, #4
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006104:	4618      	mov	r0, r3
 8006106:	3748      	adds	r7, #72	; 0x48
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	08002581 	.word	0x08002581
 8006110:	080025fd 	.word	0x080025fd
 8006114:	080026b1 	.word	0x080026b1
 8006118:	0800264d 	.word	0x0800264d
 800611c:	08002715 	.word	0x08002715
 8006120:	2000124c 	.word	0x2000124c
 8006124:	200011e4 	.word	0x200011e4
 8006128:	20001574 	.word	0x20001574
 800612c:	200011d8 	.word	0x200011d8
 8006130:	20000044 	.word	0x20000044
 8006134:	200000e4 	.word	0x200000e4
 8006138:	200011b4 	.word	0x200011b4
 800613c:	20000054 	.word	0x20000054

08006140 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d903      	bls.n	800615c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006154:	f06f 0301 	mvn.w	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e025      	b.n	80061a8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	79fa      	ldrb	r2, [r7, #7]
 8006160:	4914      	ldr	r1, [pc, #80]	; (80061b4 <BSP_COM_Init+0x74>)
 8006162:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006166:	4814      	ldr	r0, [pc, #80]	; (80061b8 <BSP_COM_Init+0x78>)
 8006168:	4613      	mov	r3, r2
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4403      	add	r3, r0
 8006172:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8006174:	79fa      	ldrb	r2, [r7, #7]
 8006176:	4613      	mov	r3, r2
 8006178:	015b      	lsls	r3, r3, #5
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <BSP_COM_Init+0x78>)
 8006180:	4413      	add	r3, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f84e 	bl	8006224 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	4613      	mov	r3, r2
 800618c:	015b      	lsls	r3, r3, #5
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <BSP_COM_Init+0x78>)
 8006194:	4413      	add	r3, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f810 	bl	80061bc <MX_USART2_UART_Init>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80061a2:	f06f 0303 	mvn.w	r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80061a8:	68fb      	ldr	r3, [r7, #12]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200000f8 	.word	0x200000f8
 80061b8:	200015c8 	.word	0x200015c8

080061bc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <MX_USART2_UART_Init+0x64>)
 80061cc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80061d4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	220c      	movs	r2, #12
 80061ec:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f004 f852 	bl	800a2b0 <HAL_UART_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40004400 	.word	0x40004400

08006224 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800622c:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <USART2_MspInit+0xcc>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <USART2_MspInit+0xcc>)
 8006232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006236:	6593      	str	r3, [r2, #88]	; 0x58
 8006238:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <USART2_MspInit+0xcc>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <USART2_MspInit+0xcc>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006248:	4a29      	ldr	r2, [pc, #164]	; (80062f0 <USART2_MspInit+0xcc>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <USART2_MspInit+0xcc>)
 8006252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800625c:	2304      	movs	r3, #4
 800625e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	2302      	movs	r3, #2
 8006262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006268:	2303      	movs	r3, #3
 800626a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800626c:	2307      	movs	r3, #7
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	4619      	mov	r1, r3
 8006276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800627a:	f000 fcaf 	bl	8006bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800627e:	2308      	movs	r3, #8
 8006280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628a:	2303      	movs	r3, #3
 800628c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800628e:	2307      	movs	r3, #7
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006292:	f107 0314 	add.w	r3, r7, #20
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629c:	f000 fc9e 	bl	8006bdc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <USART2_MspInit+0xd0>)
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <USART2_MspInit+0xd4>)
 80062a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <USART2_MspInit+0xd0>)
 80062a8:	2202      	movs	r2, #2
 80062aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <USART2_MspInit+0xd0>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <USART2_MspInit+0xd0>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <USART2_MspInit+0xd0>)
 80062ba:	2280      	movs	r2, #128	; 0x80
 80062bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062be:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <USART2_MspInit+0xd0>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <USART2_MspInit+0xd0>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <USART2_MspInit+0xd0>)
 80062cc:	2220      	movs	r2, #32
 80062ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <USART2_MspInit+0xd0>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 80062d6:	4807      	ldr	r0, [pc, #28]	; (80062f4 <USART2_MspInit+0xd0>)
 80062d8:	f000 fa88 	bl	80067ec <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a05      	ldr	r2, [pc, #20]	; (80062f4 <USART2_MspInit+0xd0>)
 80062e0:	671a      	str	r2, [r3, #112]	; 0x70
 80062e2:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <USART2_MspInit+0xd0>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80062e8:	bf00      	nop
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000
 80062f4:	20001580 	.word	0x20001580
 80062f8:	4002006c 	.word	0x4002006c

080062fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <HAL_Init+0x3c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0b      	ldr	r2, [pc, #44]	; (8006338 <HAL_Init+0x3c>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006310:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006312:	2003      	movs	r0, #3
 8006314:	f000 f93e 	bl	8006594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006318:	2000      	movs	r0, #0
 800631a:	f000 f80f 	bl	800633c <HAL_InitTick>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	71fb      	strb	r3, [r7, #7]
 8006328:	e001      	b.n	800632e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800632a:	f7fc f8bf 	bl	80024ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800632e:	79fb      	ldrb	r3, [r7, #7]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40022000 	.word	0x40022000

0800633c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006348:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <HAL_InitTick+0x6c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d023      	beq.n	8006398 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006350:	4b16      	ldr	r3, [pc, #88]	; (80063ac <HAL_InitTick+0x70>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <HAL_InitTick+0x6c>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800635e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f949 	bl	80065fe <HAL_SYSTICK_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10f      	bne.n	8006392 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b0f      	cmp	r3, #15
 8006376:	d809      	bhi.n	800638c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006378:	2200      	movs	r2, #0
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	f000 f913 	bl	80065aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006384:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <HAL_InitTick+0x74>)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e007      	b.n	800639c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	e004      	b.n	800639c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	e001      	b.n	800639c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000100 	.word	0x20000100
 80063ac:	2000000c 	.word	0x2000000c
 80063b0:	200000fc 	.word	0x200000fc

080063b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_IncTick+0x20>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <HAL_IncTick+0x24>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4413      	add	r3, r2
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <HAL_IncTick+0x24>)
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000100 	.word	0x20000100
 80063d8:	2000164c 	.word	0x2000164c

080063dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return uwTick;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <HAL_GetTick+0x14>)
 80063e2:	681b      	ldr	r3, [r3, #0]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	2000164c 	.word	0x2000164c

080063f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <__NVIC_SetPriorityGrouping+0x44>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006410:	4013      	ands	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800641c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006426:	4a04      	ldr	r2, [pc, #16]	; (8006438 <__NVIC_SetPriorityGrouping+0x44>)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	60d3      	str	r3, [r2, #12]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	e000ed00 	.word	0xe000ed00

0800643c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__NVIC_GetPriorityGrouping+0x18>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	f003 0307 	and.w	r3, r3, #7
}
 800644a:	4618      	mov	r0, r3
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	db0b      	blt.n	8006482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	f003 021f 	and.w	r2, r3, #31
 8006470:	4907      	ldr	r1, [pc, #28]	; (8006490 <__NVIC_EnableIRQ+0x38>)
 8006472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2001      	movs	r0, #1
 800647a:	fa00 f202 	lsl.w	r2, r0, r2
 800647e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	e000e100 	.word	0xe000e100

08006494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	db0a      	blt.n	80064be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	490c      	ldr	r1, [pc, #48]	; (80064e0 <__NVIC_SetPriority+0x4c>)
 80064ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b2:	0112      	lsls	r2, r2, #4
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	440b      	add	r3, r1
 80064b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064bc:	e00a      	b.n	80064d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4908      	ldr	r1, [pc, #32]	; (80064e4 <__NVIC_SetPriority+0x50>)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3b04      	subs	r3, #4
 80064cc:	0112      	lsls	r2, r2, #4
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	440b      	add	r3, r1
 80064d2:	761a      	strb	r2, [r3, #24]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	e000e100 	.word	0xe000e100
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f1c3 0307 	rsb	r3, r3, #7
 8006502:	2b04      	cmp	r3, #4
 8006504:	bf28      	it	cs
 8006506:	2304      	movcs	r3, #4
 8006508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3304      	adds	r3, #4
 800650e:	2b06      	cmp	r3, #6
 8006510:	d902      	bls.n	8006518 <NVIC_EncodePriority+0x30>
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	3b03      	subs	r3, #3
 8006516:	e000      	b.n	800651a <NVIC_EncodePriority+0x32>
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800651c:	f04f 32ff 	mov.w	r2, #4294967295
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	401a      	ands	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006530:	f04f 31ff 	mov.w	r1, #4294967295
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	fa01 f303 	lsl.w	r3, r1, r3
 800653a:	43d9      	mvns	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006540:	4313      	orrs	r3, r2
         );
}
 8006542:	4618      	mov	r0, r3
 8006544:	3724      	adds	r7, #36	; 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3b01      	subs	r3, #1
 800655c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006560:	d301      	bcc.n	8006566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006562:	2301      	movs	r3, #1
 8006564:	e00f      	b.n	8006586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <SysTick_Config+0x40>)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3b01      	subs	r3, #1
 800656c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800656e:	210f      	movs	r1, #15
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	f7ff ff8e 	bl	8006494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <SysTick_Config+0x40>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <SysTick_Config+0x40>)
 8006580:	2207      	movs	r2, #7
 8006582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000e010 	.word	0xe000e010

08006594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff ff29 	bl	80063f4 <__NVIC_SetPriorityGrouping>
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	4603      	mov	r3, r0
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065bc:	f7ff ff3e 	bl	800643c <__NVIC_GetPriorityGrouping>
 80065c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	6978      	ldr	r0, [r7, #20]
 80065c8:	f7ff ff8e 	bl	80064e8 <NVIC_EncodePriority>
 80065cc:	4602      	mov	r2, r0
 80065ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff ff5d 	bl	8006494 <__NVIC_SetPriority>
}
 80065da:	bf00      	nop
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	4603      	mov	r3, r0
 80065ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff ff31 	bl	8006458 <__NVIC_EnableIRQ>
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ffa2 	bl	8006550 <SysTick_Config>
 800660c:	4603      	mov	r3, r0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e054      	b.n	80066d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	7f5b      	ldrb	r3, [r3, #29]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb fa72 	bl	8001b24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a22      	ldr	r2, [pc, #136]	; (80066dc <HAL_CRC_Init+0xc4>)
 8006654:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0218 	bic.w	r2, r2, #24
 8006664:	609a      	str	r2, [r3, #8]
 8006666:	e00c      	b.n	8006682 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	461a      	mov	r2, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f834 	bl	80066e0 <HAL_CRCEx_Polynomial_Set>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e028      	b.n	80066d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	611a      	str	r2, [r3, #16]
 8006694:	e004      	b.n	80066a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6912      	ldr	r2, [r2, #16]
 800669e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	04c11db7 	.word	0x04c11db7

080066e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80066f0:	231f      	movs	r3, #31
 80066f2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80066f4:	bf00      	nop
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1e5a      	subs	r2, r3, #1
 80066fa:	613a      	str	r2, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_CRCEx_Polynomial_Set+0x34>
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_CRCEx_Polynomial_Set+0x16>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b18      	cmp	r3, #24
 8006718:	d846      	bhi.n	80067a8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <HAL_CRCEx_Polynomial_Set+0x40>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	080067af 	.word	0x080067af
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080067a9 	.word	0x080067a9
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067a9 	.word	0x080067a9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067a9 	.word	0x080067a9
 8006740:	0800679d 	.word	0x0800679d
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067a9 	.word	0x080067a9
 8006754:	080067a9 	.word	0x080067a9
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	08006791 	.word	0x08006791
 8006764:	080067a9 	.word	0x080067a9
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067a9 	.word	0x080067a9
 8006780:	08006785 	.word	0x08006785
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b06      	cmp	r3, #6
 8006788:	d913      	bls.n	80067b2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800678e:	e010      	b.n	80067b2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b07      	cmp	r3, #7
 8006794:	d90f      	bls.n	80067b6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800679a:	e00c      	b.n	80067b6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d90b      	bls.n	80067ba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80067a6:	e008      	b.n	80067ba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e006      	b.n	80067bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80067ae:	bf00      	nop
 80067b0:	e004      	b.n	80067bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80067b2:	bf00      	nop
 80067b4:	e002      	b.n	80067bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80067ba:	bf00      	nop
  }
  if (status == HAL_OK)
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10d      	bne.n	80067de <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f023 0118 	bic.w	r1, r3, #24
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e098      	b.n	8006930 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	4b4d      	ldr	r3, [pc, #308]	; (800693c <HAL_DMA_Init+0x150>)
 8006806:	429a      	cmp	r2, r3
 8006808:	d80f      	bhi.n	800682a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	4b4b      	ldr	r3, [pc, #300]	; (8006940 <HAL_DMA_Init+0x154>)
 8006812:	4413      	add	r3, r2
 8006814:	4a4b      	ldr	r2, [pc, #300]	; (8006944 <HAL_DMA_Init+0x158>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	009a      	lsls	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a48      	ldr	r2, [pc, #288]	; (8006948 <HAL_DMA_Init+0x15c>)
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
 8006828:	e00e      	b.n	8006848 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	4b46      	ldr	r3, [pc, #280]	; (800694c <HAL_DMA_Init+0x160>)
 8006832:	4413      	add	r3, r2
 8006834:	4a43      	ldr	r2, [pc, #268]	; (8006944 <HAL_DMA_Init+0x158>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	009a      	lsls	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a42      	ldr	r2, [pc, #264]	; (8006950 <HAL_DMA_Init+0x164>)
 8006846:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800686c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a2:	d039      	beq.n	8006918 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	4a27      	ldr	r2, [pc, #156]	; (8006948 <HAL_DMA_Init+0x15c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d11a      	bne.n	80068e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_DMA_Init+0x168>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f003 031c 	and.w	r3, r3, #28
 80068ba:	210f      	movs	r1, #15
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	43db      	mvns	r3, r3
 80068c2:	4924      	ldr	r1, [pc, #144]	; (8006954 <HAL_DMA_Init+0x168>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80068c8:	4b22      	ldr	r3, [pc, #136]	; (8006954 <HAL_DMA_Init+0x168>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6859      	ldr	r1, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	f003 031c 	and.w	r3, r3, #28
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	491d      	ldr	r1, [pc, #116]	; (8006954 <HAL_DMA_Init+0x168>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	600b      	str	r3, [r1, #0]
 80068e2:	e019      	b.n	8006918 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80068e4:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <HAL_DMA_Init+0x16c>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	f003 031c 	and.w	r3, r3, #28
 80068f0:	210f      	movs	r1, #15
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	4917      	ldr	r1, [pc, #92]	; (8006958 <HAL_DMA_Init+0x16c>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80068fe:	4b16      	ldr	r3, [pc, #88]	; (8006958 <HAL_DMA_Init+0x16c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f003 031c 	and.w	r3, r3, #28
 800690e:	fa01 f303 	lsl.w	r3, r1, r3
 8006912:	4911      	ldr	r1, [pc, #68]	; (8006958 <HAL_DMA_Init+0x16c>)
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40020407 	.word	0x40020407
 8006940:	bffdfff8 	.word	0xbffdfff8
 8006944:	cccccccd 	.word	0xcccccccd
 8006948:	40020000 	.word	0x40020000
 800694c:	bffdfbf8 	.word	0xbffdfbf8
 8006950:	40020400 	.word	0x40020400
 8006954:	400200a8 	.word	0x400200a8
 8006958:	400204a8 	.word	0x400204a8

0800695c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_DMA_Start_IT+0x20>
 8006978:	2302      	movs	r3, #2
 800697a:	e04b      	b.n	8006a14 <HAL_DMA_Start_IT+0xb8>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d13a      	bne.n	8006a06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f8e0 	bl	8006b7a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 020e 	orr.w	r2, r2, #14
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e00f      	b.n	80069f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0204 	bic.w	r2, r2, #4
 80069e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 020a 	orr.w	r2, r2, #10
 80069f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e005      	b.n	8006a12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f003 031c 	and.w	r3, r3, #28
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	409a      	lsls	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d026      	beq.n	8006a96 <HAL_DMA_IRQHandler+0x7a>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d021      	beq.n	8006a96 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0204 	bic.w	r2, r2, #4
 8006a6e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f003 021c 	and.w	r2, r3, #28
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a82:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d071      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006a94:	e06c      	b.n	8006b70 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	f003 031c 	and.w	r3, r3, #28
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d02e      	beq.n	8006b08 <HAL_DMA_IRQHandler+0xec>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d029      	beq.n	8006b08 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 020a 	bic.w	r2, r2, #10
 8006ad0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	f003 021c 	and.w	r2, r3, #28
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d038      	beq.n	8006b70 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006b06:	e033      	b.n	8006b70 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	f003 031c 	and.w	r3, r3, #28
 8006b10:	2208      	movs	r2, #8
 8006b12:	409a      	lsls	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02a      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x156>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d025      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 020e 	bic.w	r2, r2, #14
 8006b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	f003 021c 	and.w	r2, r3, #28
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	2101      	movs	r1, #1
 8006b44:	fa01 f202 	lsl.w	r2, r1, r2
 8006b48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
}
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	f003 021c 	and.w	r2, r3, #28
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d108      	bne.n	8006bbe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006bbc:	e007      	b.n	8006bce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	60da      	str	r2, [r3, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bea:	e17f      	b.n	8006eec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8171 	beq.w	8006ee6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d005      	beq.n	8006c1c <HAL_GPIO_Init+0x40>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d130      	bne.n	8006c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	2203      	movs	r2, #3
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c52:	2201      	movs	r2, #1
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	091b      	lsrs	r3, r3, #4
 8006c68:	f003 0201 	and.w	r2, r3, #1
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d118      	bne.n	8006cbc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006c90:	2201      	movs	r2, #1
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	08db      	lsrs	r3, r3, #3
 8006ca6:	f003 0201 	and.w	r2, r3, #1
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d017      	beq.n	8006cf8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d123      	bne.n	8006d4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	08da      	lsrs	r2, r3, #3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3208      	adds	r2, #8
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4013      	ands	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	08da      	lsrs	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	6939      	ldr	r1, [r7, #16]
 8006d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	2203      	movs	r2, #3
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4013      	ands	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0203 	and.w	r2, r3, #3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80ac 	beq.w	8006ee6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8e:	4b5f      	ldr	r3, [pc, #380]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	4a5e      	ldr	r2, [pc, #376]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	6613      	str	r3, [r2, #96]	; 0x60
 8006d9a:	4b5c      	ldr	r3, [pc, #368]	; (8006f0c <HAL_GPIO_Init+0x330>)
 8006d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	60bb      	str	r3, [r7, #8]
 8006da4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006da6:	4a5a      	ldr	r2, [pc, #360]	; (8006f10 <HAL_GPIO_Init+0x334>)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	3302      	adds	r3, #2
 8006dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	220f      	movs	r2, #15
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dd0:	d025      	beq.n	8006e1e <HAL_GPIO_Init+0x242>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <HAL_GPIO_Init+0x338>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01f      	beq.n	8006e1a <HAL_GPIO_Init+0x23e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a4e      	ldr	r2, [pc, #312]	; (8006f18 <HAL_GPIO_Init+0x33c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d019      	beq.n	8006e16 <HAL_GPIO_Init+0x23a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a4d      	ldr	r2, [pc, #308]	; (8006f1c <HAL_GPIO_Init+0x340>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d013      	beq.n	8006e12 <HAL_GPIO_Init+0x236>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a4c      	ldr	r2, [pc, #304]	; (8006f20 <HAL_GPIO_Init+0x344>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00d      	beq.n	8006e0e <HAL_GPIO_Init+0x232>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a4b      	ldr	r2, [pc, #300]	; (8006f24 <HAL_GPIO_Init+0x348>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <HAL_GPIO_Init+0x22e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <HAL_GPIO_Init+0x34c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d101      	bne.n	8006e06 <HAL_GPIO_Init+0x22a>
 8006e02:	2306      	movs	r3, #6
 8006e04:	e00c      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e06:	2307      	movs	r3, #7
 8006e08:	e00a      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e0a:	2305      	movs	r3, #5
 8006e0c:	e008      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	e006      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e12:	2303      	movs	r3, #3
 8006e14:	e004      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e002      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_GPIO_Init+0x244>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	f002 0203 	and.w	r2, r2, #3
 8006e26:	0092      	lsls	r2, r2, #2
 8006e28:	4093      	lsls	r3, r2
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e30:	4937      	ldr	r1, [pc, #220]	; (8006f10 <HAL_GPIO_Init+0x334>)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	089b      	lsrs	r3, r3, #2
 8006e36:	3302      	adds	r3, #2
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	43db      	mvns	r3, r3
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e62:	4a32      	ldr	r2, [pc, #200]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e68:	4b30      	ldr	r3, [pc, #192]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4013      	ands	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e8c:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e92:	4b26      	ldr	r3, [pc, #152]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006eb6:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006ebc:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ee0:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <HAL_GPIO_Init+0x350>)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f47f ae78 	bne.w	8006bec <HAL_GPIO_Init+0x10>
  }
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40010000 	.word	0x40010000
 8006f14:	48000400 	.word	0x48000400
 8006f18:	48000800 	.word	0x48000800
 8006f1c:	48000c00 	.word	0x48000c00
 8006f20:	48001000 	.word	0x48001000
 8006f24:	48001400 	.word	0x48001400
 8006f28:	48001800 	.word	0x48001800
 8006f2c:	40010400 	.word	0x40010400

08006f30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006f3e:	e0cd      	b.n	80070dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006f40:	2201      	movs	r2, #1
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80c0 	beq.w	80070d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006f56:	4a68      	ldr	r2, [pc, #416]	; (80070f8 <HAL_GPIO_DeInit+0x1c8>)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	089b      	lsrs	r3, r3, #2
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	220f      	movs	r2, #15
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4013      	ands	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f7e:	d025      	beq.n	8006fcc <HAL_GPIO_DeInit+0x9c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a5e      	ldr	r2, [pc, #376]	; (80070fc <HAL_GPIO_DeInit+0x1cc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d01f      	beq.n	8006fc8 <HAL_GPIO_DeInit+0x98>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a5d      	ldr	r2, [pc, #372]	; (8007100 <HAL_GPIO_DeInit+0x1d0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d019      	beq.n	8006fc4 <HAL_GPIO_DeInit+0x94>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a5c      	ldr	r2, [pc, #368]	; (8007104 <HAL_GPIO_DeInit+0x1d4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_GPIO_DeInit+0x90>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a5b      	ldr	r2, [pc, #364]	; (8007108 <HAL_GPIO_DeInit+0x1d8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00d      	beq.n	8006fbc <HAL_GPIO_DeInit+0x8c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_GPIO_DeInit+0x1dc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <HAL_GPIO_DeInit+0x88>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a59      	ldr	r2, [pc, #356]	; (8007110 <HAL_GPIO_DeInit+0x1e0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_GPIO_DeInit+0x84>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	e00c      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fb4:	2307      	movs	r3, #7
 8006fb6:	e00a      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fb8:	2305      	movs	r3, #5
 8006fba:	e008      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	e006      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e004      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e002      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_GPIO_DeInit+0x9e>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	f002 0203 	and.w	r2, r2, #3
 8006fd4:	0092      	lsls	r2, r2, #2
 8006fd6:	4093      	lsls	r3, r2
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d132      	bne.n	8007044 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006fde:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	494b      	ldr	r1, [pc, #300]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006fec:	4b49      	ldr	r3, [pc, #292]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	4947      	ldr	r1, [pc, #284]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006ffa:	4b46      	ldr	r3, [pc, #280]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	43db      	mvns	r3, r3
 8007002:	4944      	ldr	r1, [pc, #272]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8007004:	4013      	ands	r3, r2
 8007006:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	43db      	mvns	r3, r3
 8007010:	4940      	ldr	r1, [pc, #256]	; (8007114 <HAL_GPIO_DeInit+0x1e4>)
 8007012:	4013      	ands	r3, r2
 8007014:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	220f      	movs	r2, #15
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007026:	4a34      	ldr	r2, [pc, #208]	; (80070f8 <HAL_GPIO_DeInit+0x1c8>)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	3302      	adds	r3, #2
 800702e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	43da      	mvns	r2, r3
 8007036:	4830      	ldr	r0, [pc, #192]	; (80070f8 <HAL_GPIO_DeInit+0x1c8>)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	400a      	ands	r2, r1
 800703e:	3302      	adds	r3, #2
 8007040:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	2103      	movs	r1, #3
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	08da      	lsrs	r2, r3, #3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3208      	adds	r2, #8
 8007060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	220f      	movs	r2, #15
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	08d2      	lsrs	r2, r2, #3
 8007078:	4019      	ands	r1, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3208      	adds	r2, #8
 800707e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	2103      	movs	r1, #3
 800708c:	fa01 f303 	lsl.w	r3, r1, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	2101      	movs	r1, #1
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	fa01 f303 	lsl.w	r3, r1, r3
 80070a4:	43db      	mvns	r3, r3
 80070a6:	401a      	ands	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	2103      	movs	r1, #3
 80070b6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ba:	43db      	mvns	r3, r3
 80070bc:	401a      	ands	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	2101      	movs	r1, #1
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	401a      	ands	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	3301      	adds	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f47f af2b 	bne.w	8006f40 <HAL_GPIO_DeInit+0x10>
  }
}
 80070ea:	bf00      	nop
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010000 	.word	0x40010000
 80070fc:	48000400 	.word	0x48000400
 8007100:	48000800 	.word	0x48000800
 8007104:	48000c00 	.word	0x48000c00
 8007108:	48001000 	.word	0x48001000
 800710c:	48001400 	.word	0x48001400
 8007110:	48001800 	.word	0x48001800
 8007114:	40010400 	.word	0x40010400

08007118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	807b      	strh	r3, [r7, #2]
 8007124:	4613      	mov	r3, r2
 8007126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007128:	787b      	ldrb	r3, [r7, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800712e:	887a      	ldrh	r2, [r7, #2]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007134:	e002      	b.n	800713c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007136:	887a      	ldrh	r2, [r7, #2]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007152:	4b08      	ldr	r3, [pc, #32]	; (8007174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007154:	695a      	ldr	r2, [r3, #20]
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d006      	beq.n	800716c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800715e:	4a05      	ldr	r2, [pc, #20]	; (8007174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fa feec 	bl	8001f44 <HAL_GPIO_EXTI_Callback>
  }
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40010400 	.word	0x40010400

08007178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e081      	b.n	800728e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f8a8 	bl	80072f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	; 0x24
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0201 	bic.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ee:	609a      	str	r2, [r3, #8]
 80071f0:	e006      	b.n	8007200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d104      	bne.n	8007212 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69d9      	ldr	r1, [r3, #28]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e021      	b.n	80072ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	; 0x24
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f821 	bl	8007308 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	817b      	strh	r3, [r7, #10]
 800732e:	460b      	mov	r3, r1
 8007330:	813b      	strh	r3, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b20      	cmp	r3, #32
 8007340:	f040 80f9 	bne.w	8007536 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_I2C_Mem_Write+0x34>
 800734a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0ed      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_I2C_Mem_Write+0x4e>
 8007366:	2302      	movs	r3, #2
 8007368:	e0e6      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007372:	f7ff f833 	bl	80063dc <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2319      	movs	r3, #25
 800737e:	2201      	movs	r2, #1
 8007380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fadd 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0d1      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2221      	movs	r2, #33	; 0x21
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2240      	movs	r2, #64	; 0x40
 80073a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073bc:	88f8      	ldrh	r0, [r7, #6]
 80073be:	893a      	ldrh	r2, [r7, #8]
 80073c0:	8979      	ldrh	r1, [r7, #10]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4603      	mov	r3, r0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f9ed 	bl	80077ac <I2C_RequestMemoryWrite>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0a9      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2bff      	cmp	r3, #255	; 0xff
 80073ec:	d90e      	bls.n	800740c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	22ff      	movs	r2, #255	; 0xff
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	8979      	ldrh	r1, [r7, #10]
 80073fc:	2300      	movs	r3, #0
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fc45 	bl	8007c94 <I2C_TransferConfig>
 800740a:	e00f      	b.n	800742c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	b2da      	uxtb	r2, r3
 800741c:	8979      	ldrh	r1, [r7, #10]
 800741e:	2300      	movs	r3, #0
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fc34 	bl	8007c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fac7 	bl	80079c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e07b      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d034      	beq.n	80074e4 <HAL_I2C_Mem_Write+0x1c8>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747e:	2b00      	cmp	r3, #0
 8007480:	d130      	bne.n	80074e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	2200      	movs	r2, #0
 800748a:	2180      	movs	r1, #128	; 0x80
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fa59 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e04d      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2bff      	cmp	r3, #255	; 0xff
 80074a4:	d90e      	bls.n	80074c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	22ff      	movs	r2, #255	; 0xff
 80074aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	8979      	ldrh	r1, [r7, #10]
 80074b4:	2300      	movs	r3, #0
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fbe9 	bl	8007c94 <I2C_TransferConfig>
 80074c2:	e00f      	b.n	80074e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	8979      	ldrh	r1, [r7, #10]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fbd8 	bl	8007c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d19e      	bne.n	800742c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 faa6 	bl	8007a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e01a      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2220      	movs	r2, #32
 8007508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6859      	ldr	r1, [r3, #4]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <HAL_I2C_Mem_Write+0x224>)
 8007516:	400b      	ands	r3, r1
 8007518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	e000      	b.n	8007538 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007536:	2302      	movs	r3, #2
  }
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	fe00e800 	.word	0xfe00e800

08007544 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	461a      	mov	r2, r3
 8007552:	4603      	mov	r3, r0
 8007554:	817b      	strh	r3, [r7, #10]
 8007556:	460b      	mov	r3, r1
 8007558:	813b      	strh	r3, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	f040 80fd 	bne.w	8007766 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_I2C_Mem_Read+0x34>
 8007572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e0f1      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_I2C_Mem_Read+0x4e>
 800758e:	2302      	movs	r3, #2
 8007590:	e0ea      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800759a:	f7fe ff1f 	bl	80063dc <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2319      	movs	r3, #25
 80075a6:	2201      	movs	r2, #1
 80075a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f9c9 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0d5      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2222      	movs	r2, #34	; 0x22
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2240      	movs	r2, #64	; 0x40
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a3a      	ldr	r2, [r7, #32]
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075e4:	88f8      	ldrh	r0, [r7, #6]
 80075e6:	893a      	ldrh	r2, [r7, #8]
 80075e8:	8979      	ldrh	r1, [r7, #10]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	4603      	mov	r3, r0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f92d 	bl	8007854 <I2C_RequestMemoryRead>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0ad      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2bff      	cmp	r3, #255	; 0xff
 8007614:	d90e      	bls.n	8007634 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	b2da      	uxtb	r2, r3
 8007622:	8979      	ldrh	r1, [r7, #10]
 8007624:	4b52      	ldr	r3, [pc, #328]	; (8007770 <HAL_I2C_Mem_Read+0x22c>)
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fb31 	bl	8007c94 <I2C_TransferConfig>
 8007632:	e00f      	b.n	8007654 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	b2da      	uxtb	r2, r3
 8007644:	8979      	ldrh	r1, [r7, #10]
 8007646:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <HAL_I2C_Mem_Read+0x22c>)
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fb20 	bl	8007c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2200      	movs	r2, #0
 800765c:	2104      	movs	r1, #4
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f970 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e07c      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d034      	beq.n	8007714 <HAL_I2C_Mem_Read+0x1d0>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d130      	bne.n	8007714 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	2200      	movs	r2, #0
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f941 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e04d      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2bff      	cmp	r3, #255	; 0xff
 80076d4:	d90e      	bls.n	80076f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	22ff      	movs	r2, #255	; 0xff
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	8979      	ldrh	r1, [r7, #10]
 80076e4:	2300      	movs	r3, #0
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fad1 	bl	8007c94 <I2C_TransferConfig>
 80076f2:	e00f      	b.n	8007714 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007702:	b2da      	uxtb	r2, r3
 8007704:	8979      	ldrh	r1, [r7, #10]
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fac0 	bl	8007c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d19a      	bne.n	8007654 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f98e 	bl	8007a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e01a      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2220      	movs	r2, #32
 8007738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6859      	ldr	r1, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <HAL_I2C_Mem_Read+0x230>)
 8007746:	400b      	ands	r3, r1
 8007748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	80002400 	.word	0x80002400
 8007774:	fe00e800 	.word	0xfe00e800

08007778 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007786:	b2db      	uxtb	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	817b      	strh	r3, [r7, #10]
 80077be:	460b      	mov	r3, r1
 80077c0:	813b      	strh	r3, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	8979      	ldrh	r1, [r7, #10]
 80077cc:	4b20      	ldr	r3, [pc, #128]	; (8007850 <I2C_RequestMemoryWrite+0xa4>)
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fa5d 	bl	8007c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f8f0 	bl	80079c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e02c      	b.n	8007848 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d105      	bne.n	8007800 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077f4:	893b      	ldrh	r3, [r7, #8]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28
 80077fe:	e015      	b.n	800782c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007800:	893b      	ldrh	r3, [r7, #8]
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	b29b      	uxth	r3, r3
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	69b9      	ldr	r1, [r7, #24]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f8d6 	bl	80079c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e012      	b.n	8007848 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2200      	movs	r2, #0
 8007834:	2180      	movs	r1, #128	; 0x80
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f884 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	80002000 	.word	0x80002000

08007854 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4603      	mov	r3, r0
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	460b      	mov	r3, r1
 8007868:	813b      	strh	r3, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	b2da      	uxtb	r2, r3
 8007872:	8979      	ldrh	r1, [r7, #10]
 8007874:	4b20      	ldr	r3, [pc, #128]	; (80078f8 <I2C_RequestMemoryRead+0xa4>)
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fa0a 	bl	8007c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f89d 	bl	80079c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e02c      	b.n	80078ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28
 80078a4:	e015      	b.n	80078d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	0a1b      	lsrs	r3, r3, #8
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f883 	bl	80079c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e012      	b.n	80078ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2200      	movs	r2, #0
 80078da:	2140      	movs	r1, #64	; 0x40
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f831 	bl	8007944 <I2C_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	80002000 	.word	0x80002000

080078fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d103      	bne.n	800791a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b01      	cmp	r3, #1
 8007926:	d007      	beq.n	8007938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	619a      	str	r2, [r3, #24]
  }
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007954:	e022      	b.n	800799c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d01e      	beq.n	800799c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795e:	f7fe fd3d 	bl	80063dc <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d302      	bcc.n	8007974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d113      	bne.n	800799c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007978:	f043 0220 	orr.w	r2, r3, #32
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e00f      	b.n	80079bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4013      	ands	r3, r2
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d0cd      	beq.n	8007956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079d0:	e02c      	b.n	8007a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f870 	bl	8007abc <I2C_IsErrorOccurred>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e02a      	b.n	8007a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d01e      	beq.n	8007a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ee:	f7fe fcf5 	bl	80063dc <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d302      	bcc.n	8007a04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d113      	bne.n	8007a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a08:	f043 0220 	orr.w	r2, r3, #32
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e007      	b.n	8007a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d1cb      	bne.n	80079d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a50:	e028      	b.n	8007aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f830 	bl	8007abc <I2C_IsErrorOccurred>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e026      	b.n	8007ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fe fcb9 	bl	80063dc <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d113      	bne.n	8007aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a80:	f043 0220 	orr.w	r2, r3, #32
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e007      	b.n	8007ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d1cf      	bne.n	8007a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d075      	beq.n	8007bd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2210      	movs	r2, #16
 8007aee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007af0:	e056      	b.n	8007ba0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d052      	beq.n	8007ba0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fe fc6f 	bl	80063dc <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_IsErrorOccurred+0x54>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d147      	bne.n	8007ba0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b32:	d12e      	bne.n	8007b92 <I2C_IsErrorOccurred+0xd6>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b3a:	d02a      	beq.n	8007b92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007b3c:	7cfb      	ldrb	r3, [r7, #19]
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d027      	beq.n	8007b92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b50:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b52:	f7fe fc43 	bl	80063dc <HAL_GetTick>
 8007b56:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b58:	e01b      	b.n	8007b92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b5a:	f7fe fc3f 	bl	80063dc <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b19      	cmp	r3, #25
 8007b66:	d914      	bls.n	8007b92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6c:	f043 0220 	orr.w	r2, r3, #32
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d1dc      	bne.n	8007b5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	d003      	beq.n	8007bb6 <I2C_IsErrorOccurred+0xfa>
 8007bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d09d      	beq.n	8007af2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f043 0304 	orr.w	r3, r3, #4
 8007bcc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	f043 0308 	orr.w	r3, r3, #8
 8007c0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01c      	beq.n	8007c84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fe56 	bl	80078fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6859      	ldr	r1, [r3, #4]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <I2C_IsErrorOccurred+0x1d4>)
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3728      	adds	r7, #40	; 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	fe00e800 	.word	0xfe00e800

08007c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607b      	str	r3, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	817b      	strh	r3, [r7, #10]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ca6:	897b      	ldrh	r3, [r7, #10]
 8007ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cac:	7a7b      	ldrb	r3, [r7, #9]
 8007cae:	041b      	lsls	r3, r3, #16
 8007cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cb4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cc2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	0d5b      	lsrs	r3, r3, #21
 8007cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <I2C_TransferConfig+0x60>)
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	43db      	mvns	r3, r3
 8007cd8:	ea02 0103 	and.w	r1, r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	03ff63ff 	.word	0x03ff63ff

08007cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d138      	bne.n	8007d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e032      	b.n	8007d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2224      	movs	r2, #36	; 0x24
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0201 	bic.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6819      	ldr	r1, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d80:	2302      	movs	r3, #2
  }
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d139      	bne.n	8007e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e033      	b.n	8007e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2224      	movs	r2, #36	; 0x24
 8007dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	e000      	b.n	8007e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e18:	2302      	movs	r3, #2
  }
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40007000 	.word	0x40007000

08007e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e52:	d130      	bne.n	8007eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e54:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e60:	d038      	beq.n	8007ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e72:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2232      	movs	r2, #50	; 0x32
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	0c9b      	lsrs	r3, r3, #18
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e88:	e002      	b.n	8007e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e90:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e9c:	d102      	bne.n	8007ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f2      	bne.n	8007e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb0:	d110      	bne.n	8007ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e00f      	b.n	8007ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec2:	d007      	beq.n	8007ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ecc:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ed2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40007000 	.word	0x40007000
 8007ee8:	2000000c 	.word	0x2000000c
 8007eec:	431bde83 	.word	0x431bde83

08007ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e3d4      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f02:	4ba1      	ldr	r3, [pc, #644]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 030c 	and.w	r3, r3, #12
 8007f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f0c:	4b9e      	ldr	r3, [pc, #632]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80e4 	beq.w	80080ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_RCC_OscConfig+0x4a>
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b0c      	cmp	r3, #12
 8007f2e:	f040 808b 	bne.w	8008048 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	f040 8087 	bne.w	8008048 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f3a:	4b93      	ldr	r3, [pc, #588]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_RCC_OscConfig+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e3ac      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	4b8c      	ldr	r3, [pc, #560]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <HAL_RCC_OscConfig+0x7c>
 8007f62:	4b89      	ldr	r3, [pc, #548]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f6a:	e005      	b.n	8007f78 <HAL_RCC_OscConfig+0x88>
 8007f6c:	4b86      	ldr	r3, [pc, #536]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d223      	bcs.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fd41 	bl	8008a08 <RCC_SetFlashLatencyFromMSIRange>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e38d      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f90:	4b7d      	ldr	r3, [pc, #500]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a7c      	ldr	r2, [pc, #496]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f96:	f043 0308 	orr.w	r3, r3, #8
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b7a      	ldr	r3, [pc, #488]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	4977      	ldr	r1, [pc, #476]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fae:	4b76      	ldr	r3, [pc, #472]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	4972      	ldr	r1, [pc, #456]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	604b      	str	r3, [r1, #4]
 8007fc2:	e025      	b.n	8008010 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fc4:	4b70      	ldr	r3, [pc, #448]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a6f      	ldr	r2, [pc, #444]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fca:	f043 0308 	orr.w	r3, r3, #8
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	4b6d      	ldr	r3, [pc, #436]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	496a      	ldr	r1, [pc, #424]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fe2:	4b69      	ldr	r3, [pc, #420]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	4965      	ldr	r1, [pc, #404]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d109      	bne.n	8008010 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fd01 	bl	8008a08 <RCC_SetFlashLatencyFromMSIRange>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e34d      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008010:	f000 fc36 	bl	8008880 <HAL_RCC_GetSysClockFreq>
 8008014:	4602      	mov	r2, r0
 8008016:	4b5c      	ldr	r3, [pc, #368]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	091b      	lsrs	r3, r3, #4
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	495a      	ldr	r1, [pc, #360]	; (800818c <HAL_RCC_OscConfig+0x29c>)
 8008022:	5ccb      	ldrb	r3, [r1, r3]
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	4a58      	ldr	r2, [pc, #352]	; (8008190 <HAL_RCC_OscConfig+0x2a0>)
 800802e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008030:	4b58      	ldr	r3, [pc, #352]	; (8008194 <HAL_RCC_OscConfig+0x2a4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe f981 	bl	800633c <HAL_InitTick>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d052      	beq.n	80080ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	e331      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d032      	beq.n	80080b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008050:	4b4d      	ldr	r3, [pc, #308]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a4c      	ldr	r2, [pc, #304]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800805c:	f7fe f9be 	bl	80063dc <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008064:	f7fe f9ba 	bl	80063dc <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e31a      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008076:	4b44      	ldr	r3, [pc, #272]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008082:	4b41      	ldr	r3, [pc, #260]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a40      	ldr	r2, [pc, #256]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008088:	f043 0308 	orr.w	r3, r3, #8
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4b3e      	ldr	r3, [pc, #248]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	493b      	ldr	r1, [pc, #236]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080a0:	4b39      	ldr	r3, [pc, #228]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	4936      	ldr	r1, [pc, #216]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	604b      	str	r3, [r1, #4]
 80080b4:	e01a      	b.n	80080ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80080b6:	4b34      	ldr	r3, [pc, #208]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a33      	ldr	r2, [pc, #204]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80080c2:	f7fe f98b 	bl	80063dc <HAL_GetTick>
 80080c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80080c8:	e008      	b.n	80080dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80080ca:	f7fe f987 	bl	80063dc <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e2e7      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80080dc:	4b2a      	ldr	r3, [pc, #168]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f0      	bne.n	80080ca <HAL_RCC_OscConfig+0x1da>
 80080e8:	e000      	b.n	80080ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d074      	beq.n	80081e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b08      	cmp	r3, #8
 80080fc:	d005      	beq.n	800810a <HAL_RCC_OscConfig+0x21a>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b0c      	cmp	r3, #12
 8008102:	d10e      	bne.n	8008122 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d10b      	bne.n	8008122 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800810a:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d064      	beq.n	80081e0 <HAL_RCC_OscConfig+0x2f0>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d160      	bne.n	80081e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e2c4      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800812a:	d106      	bne.n	800813a <HAL_RCC_OscConfig+0x24a>
 800812c:	4b16      	ldr	r3, [pc, #88]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e01d      	b.n	8008176 <HAL_RCC_OscConfig+0x286>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008142:	d10c      	bne.n	800815e <HAL_RCC_OscConfig+0x26e>
 8008144:	4b10      	ldr	r3, [pc, #64]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a0f      	ldr	r2, [pc, #60]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 800814a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a0c      	ldr	r2, [pc, #48]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	e00b      	b.n	8008176 <HAL_RCC_OscConfig+0x286>
 800815e:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a09      	ldr	r2, [pc, #36]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a06      	ldr	r2, [pc, #24]	; (8008188 <HAL_RCC_OscConfig+0x298>)
 8008170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008174:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01c      	beq.n	80081b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800817e:	f7fe f92d 	bl	80063dc <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008184:	e011      	b.n	80081aa <HAL_RCC_OscConfig+0x2ba>
 8008186:	bf00      	nop
 8008188:	40021000 	.word	0x40021000
 800818c:	080177fc 	.word	0x080177fc
 8008190:	2000000c 	.word	0x2000000c
 8008194:	200000fc 	.word	0x200000fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008198:	f7fe f920 	bl	80063dc <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e280      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081aa:	4baf      	ldr	r3, [pc, #700]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0x2a8>
 80081b6:	e014      	b.n	80081e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fe f910 	bl	80063dc <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081c0:	f7fe f90c 	bl	80063dc <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b64      	cmp	r3, #100	; 0x64
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e26c      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081d2:	4ba5      	ldr	r3, [pc, #660]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x2d0>
 80081de:	e000      	b.n	80081e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d060      	beq.n	80082b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_OscConfig+0x310>
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b0c      	cmp	r3, #12
 80081f8:	d119      	bne.n	800822e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d116      	bne.n	800822e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008200:	4b99      	ldr	r3, [pc, #612]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <HAL_RCC_OscConfig+0x328>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e249      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008218:	4b93      	ldr	r3, [pc, #588]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	061b      	lsls	r3, r3, #24
 8008226:	4990      	ldr	r1, [pc, #576]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008228:	4313      	orrs	r3, r2
 800822a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800822c:	e040      	b.n	80082b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d023      	beq.n	800827e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008236:	4b8c      	ldr	r3, [pc, #560]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a8b      	ldr	r2, [pc, #556]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800823c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008242:	f7fe f8cb 	bl	80063dc <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008248:	e008      	b.n	800825c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800824a:	f7fe f8c7 	bl	80063dc <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e227      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800825c:	4b82      	ldr	r3, [pc, #520]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0f0      	beq.n	800824a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008268:	4b7f      	ldr	r3, [pc, #508]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	061b      	lsls	r3, r3, #24
 8008276:	497c      	ldr	r1, [pc, #496]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008278:	4313      	orrs	r3, r2
 800827a:	604b      	str	r3, [r1, #4]
 800827c:	e018      	b.n	80082b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800827e:	4b7a      	ldr	r3, [pc, #488]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a79      	ldr	r2, [pc, #484]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828a:	f7fe f8a7 	bl	80063dc <HAL_GetTick>
 800828e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008290:	e008      	b.n	80082a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008292:	f7fe f8a3 	bl	80063dc <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e203      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082a4:	4b70      	ldr	r3, [pc, #448]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f0      	bne.n	8008292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d03c      	beq.n	8008336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01c      	beq.n	80082fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082c4:	4b68      	ldr	r3, [pc, #416]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80082c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ca:	4a67      	ldr	r2, [pc, #412]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d4:	f7fe f882 	bl	80063dc <HAL_GetTick>
 80082d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082da:	e008      	b.n	80082ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082dc:	f7fe f87e 	bl	80063dc <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e1de      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082ee:	4b5e      	ldr	r3, [pc, #376]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80082f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0ef      	beq.n	80082dc <HAL_RCC_OscConfig+0x3ec>
 80082fc:	e01b      	b.n	8008336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082fe:	4b5a      	ldr	r3, [pc, #360]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008304:	4a58      	ldr	r2, [pc, #352]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830e:	f7fe f865 	bl	80063dc <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008316:	f7fe f861 	bl	80063dc <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e1c1      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008328:	4b4f      	ldr	r3, [pc, #316]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1ef      	bne.n	8008316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80a6 	beq.w	8008490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008344:	2300      	movs	r3, #0
 8008346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008348:	4b47      	ldr	r3, [pc, #284]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10d      	bne.n	8008370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008354:	4b44      	ldr	r3, [pc, #272]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008358:	4a43      	ldr	r2, [pc, #268]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800835a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835e:	6593      	str	r3, [r2, #88]	; 0x58
 8008360:	4b41      	ldr	r3, [pc, #260]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800836c:	2301      	movs	r3, #1
 800836e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008370:	4b3e      	ldr	r3, [pc, #248]	; (800846c <HAL_RCC_OscConfig+0x57c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d118      	bne.n	80083ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800837c:	4b3b      	ldr	r3, [pc, #236]	; (800846c <HAL_RCC_OscConfig+0x57c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a3a      	ldr	r2, [pc, #232]	; (800846c <HAL_RCC_OscConfig+0x57c>)
 8008382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008388:	f7fe f828 	bl	80063dc <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008390:	f7fe f824 	bl	80063dc <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e184      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083a2:	4b32      	ldr	r3, [pc, #200]	; (800846c <HAL_RCC_OscConfig+0x57c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d108      	bne.n	80083c8 <HAL_RCC_OscConfig+0x4d8>
 80083b6:	4b2c      	ldr	r3, [pc, #176]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083bc:	4a2a      	ldr	r2, [pc, #168]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083c6:	e024      	b.n	8008412 <HAL_RCC_OscConfig+0x522>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b05      	cmp	r3, #5
 80083ce:	d110      	bne.n	80083f2 <HAL_RCC_OscConfig+0x502>
 80083d0:	4b25      	ldr	r3, [pc, #148]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	4a24      	ldr	r2, [pc, #144]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083d8:	f043 0304 	orr.w	r3, r3, #4
 80083dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083e0:	4b21      	ldr	r3, [pc, #132]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e6:	4a20      	ldr	r2, [pc, #128]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083e8:	f043 0301 	orr.w	r3, r3, #1
 80083ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80083f0:	e00f      	b.n	8008412 <HAL_RCC_OscConfig+0x522>
 80083f2:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 8008404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008408:	4a17      	ldr	r2, [pc, #92]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800840a:	f023 0304 	bic.w	r3, r3, #4
 800840e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d016      	beq.n	8008448 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841a:	f7fd ffdf 	bl	80063dc <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008420:	e00a      	b.n	8008438 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008422:	f7fd ffdb 	bl	80063dc <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008430:	4293      	cmp	r3, r2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e139      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <HAL_RCC_OscConfig+0x578>)
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ed      	beq.n	8008422 <HAL_RCC_OscConfig+0x532>
 8008446:	e01a      	b.n	800847e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008448:	f7fd ffc8 	bl	80063dc <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800844e:	e00f      	b.n	8008470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008450:	f7fd ffc4 	bl	80063dc <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f241 3288 	movw	r2, #5000	; 0x1388
 800845e:	4293      	cmp	r3, r2
 8008460:	d906      	bls.n	8008470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e122      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
 8008466:	bf00      	nop
 8008468:	40021000 	.word	0x40021000
 800846c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008470:	4b90      	ldr	r3, [pc, #576]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e8      	bne.n	8008450 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800847e:	7ffb      	ldrb	r3, [r7, #31]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d105      	bne.n	8008490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008484:	4b8b      	ldr	r3, [pc, #556]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	4a8a      	ldr	r2, [pc, #552]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800848a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800848e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8108 	beq.w	80086aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	2b02      	cmp	r3, #2
 80084a0:	f040 80d0 	bne.w	8008644 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80084a4:	4b83      	ldr	r3, [pc, #524]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f003 0203 	and.w	r2, r3, #3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d130      	bne.n	800851a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	3b01      	subs	r3, #1
 80084c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d127      	bne.n	800851a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d11f      	bne.n	800851a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084e4:	2a07      	cmp	r2, #7
 80084e6:	bf14      	ite	ne
 80084e8:	2201      	movne	r2, #1
 80084ea:	2200      	moveq	r2, #0
 80084ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d113      	bne.n	800851a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	3b01      	subs	r3, #1
 8008500:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008502:	429a      	cmp	r2, r3
 8008504:	d109      	bne.n	800851a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	3b01      	subs	r3, #1
 8008514:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008516:	429a      	cmp	r2, r3
 8008518:	d06e      	beq.n	80085f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b0c      	cmp	r3, #12
 800851e:	d069      	beq.n	80085f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008520:	4b64      	ldr	r3, [pc, #400]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d105      	bne.n	8008538 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800852c:	4b61      	ldr	r3, [pc, #388]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0b7      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800853c:	4b5d      	ldr	r3, [pc, #372]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a5c      	ldr	r2, [pc, #368]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008546:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008548:	f7fd ff48 	bl	80063dc <HAL_GetTick>
 800854c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008550:	f7fd ff44 	bl	80063dc <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e0a4      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008562:	4b54      	ldr	r3, [pc, #336]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1f0      	bne.n	8008550 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800856e:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	4b51      	ldr	r3, [pc, #324]	; (80086b8 <HAL_RCC_OscConfig+0x7c8>)
 8008574:	4013      	ands	r3, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800857e:	3a01      	subs	r2, #1
 8008580:	0112      	lsls	r2, r2, #4
 8008582:	4311      	orrs	r1, r2
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008588:	0212      	lsls	r2, r2, #8
 800858a:	4311      	orrs	r1, r2
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008590:	0852      	lsrs	r2, r2, #1
 8008592:	3a01      	subs	r2, #1
 8008594:	0552      	lsls	r2, r2, #21
 8008596:	4311      	orrs	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800859c:	0852      	lsrs	r2, r2, #1
 800859e:	3a01      	subs	r2, #1
 80085a0:	0652      	lsls	r2, r2, #25
 80085a2:	4311      	orrs	r1, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085a8:	0912      	lsrs	r2, r2, #4
 80085aa:	0452      	lsls	r2, r2, #17
 80085ac:	430a      	orrs	r2, r1
 80085ae:	4941      	ldr	r1, [pc, #260]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80085b4:	4b3f      	ldr	r3, [pc, #252]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3e      	ldr	r2, [pc, #248]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80085c0:	4b3c      	ldr	r3, [pc, #240]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4a3b      	ldr	r2, [pc, #236]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085cc:	f7fd ff06 	bl	80063dc <HAL_GetTick>
 80085d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085d4:	f7fd ff02 	bl	80063dc <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e062      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085e6:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80085f2:	e05a      	b.n	80086aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e059      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085f8:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d152      	bne.n	80086aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008604:	4b2b      	ldr	r3, [pc, #172]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a2a      	ldr	r2, [pc, #168]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800860a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800860e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800861c:	f7fd fede 	bl	80063dc <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008624:	f7fd feda 	bl	80063dc <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e03a      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008636:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0x734>
 8008642:	e032      	b.n	80086aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b0c      	cmp	r3, #12
 8008648:	d02d      	beq.n	80086a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a19      	ldr	r2, [pc, #100]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008654:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008662:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4a13      	ldr	r2, [pc, #76]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 8008674:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800867c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867e:	f7fd fead 	bl	80063dc <HAL_GetTick>
 8008682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008684:	e008      	b.n	8008698 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008686:	f7fd fea9 	bl	80063dc <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e009      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <HAL_RCC_OscConfig+0x7c4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f0      	bne.n	8008686 <HAL_RCC_OscConfig+0x796>
 80086a4:	e001      	b.n	80086aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40021000 	.word	0x40021000
 80086b8:	f99d808c 	.word	0xf99d808c

080086bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0c8      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086d0:	4b66      	ldr	r3, [pc, #408]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d910      	bls.n	8008700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086de:	4b63      	ldr	r3, [pc, #396]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f023 0207 	bic.w	r2, r3, #7
 80086e6:	4961      	ldr	r1, [pc, #388]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ee:	4b5f      	ldr	r3, [pc, #380]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0b0      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d04c      	beq.n	80087a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d107      	bne.n	8008724 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008714:	4b56      	ldr	r3, [pc, #344]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d121      	bne.n	8008764 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e09e      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d107      	bne.n	800873c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800872c:	4b50      	ldr	r3, [pc, #320]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d115      	bne.n	8008764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e092      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d107      	bne.n	8008754 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008744:	4b4a      	ldr	r3, [pc, #296]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d109      	bne.n	8008764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e086      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008754:	4b46      	ldr	r3, [pc, #280]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e07e      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f023 0203 	bic.w	r2, r3, #3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	493f      	ldr	r1, [pc, #252]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008772:	4313      	orrs	r3, r2
 8008774:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008776:	f7fd fe31 	bl	80063dc <HAL_GetTick>
 800877a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800877c:	e00a      	b.n	8008794 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800877e:	f7fd fe2d 	bl	80063dc <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	f241 3288 	movw	r2, #5000	; 0x1388
 800878c:	4293      	cmp	r3, r2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e066      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008794:	4b36      	ldr	r3, [pc, #216]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 020c 	and.w	r2, r3, #12
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d1eb      	bne.n	800877e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d008      	beq.n	80087c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087b2:	4b2f      	ldr	r3, [pc, #188]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	492c      	ldr	r1, [pc, #176]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087c4:	4b29      	ldr	r3, [pc, #164]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d210      	bcs.n	80087f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087d2:	4b26      	ldr	r3, [pc, #152]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f023 0207 	bic.w	r2, r3, #7
 80087da:	4924      	ldr	r1, [pc, #144]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	4313      	orrs	r3, r2
 80087e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087e2:	4b22      	ldr	r3, [pc, #136]	; (800886c <HAL_RCC_ClockConfig+0x1b0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d001      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e036      	b.n	8008862 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008800:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4918      	ldr	r1, [pc, #96]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 800880e:	4313      	orrs	r3, r2
 8008810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800881e:	4b14      	ldr	r3, [pc, #80]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	4910      	ldr	r1, [pc, #64]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008832:	f000 f825 	bl	8008880 <HAL_RCC_GetSysClockFreq>
 8008836:	4602      	mov	r2, r0
 8008838:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <HAL_RCC_ClockConfig+0x1b4>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	490c      	ldr	r1, [pc, #48]	; (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 8008844:	5ccb      	ldrb	r3, [r1, r3]
 8008846:	f003 031f 	and.w	r3, r3, #31
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	4a0a      	ldr	r2, [pc, #40]	; (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <HAL_RCC_ClockConfig+0x1c0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd fd70 	bl	800633c <HAL_InitTick>
 800885c:	4603      	mov	r3, r0
 800885e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008860:	7afb      	ldrb	r3, [r7, #11]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40022000 	.word	0x40022000
 8008870:	40021000 	.word	0x40021000
 8008874:	080177fc 	.word	0x080177fc
 8008878:	2000000c 	.word	0x2000000c
 800887c:	200000fc 	.word	0x200000fc

08008880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008880:	b480      	push	{r7}
 8008882:	b089      	sub	sp, #36	; 0x24
 8008884:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800888e:	4b3e      	ldr	r3, [pc, #248]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f003 030c 	and.w	r3, r3, #12
 8008896:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008898:	4b3b      	ldr	r3, [pc, #236]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <HAL_RCC_GetSysClockFreq+0x34>
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	2b0c      	cmp	r3, #12
 80088ac:	d121      	bne.n	80088f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d11e      	bne.n	80088f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80088b4:	4b34      	ldr	r3, [pc, #208]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d107      	bne.n	80088d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80088c0:	4b31      	ldr	r3, [pc, #196]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 80088c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088c6:	0a1b      	lsrs	r3, r3, #8
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	61fb      	str	r3, [r7, #28]
 80088ce:	e005      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80088d0:	4b2d      	ldr	r3, [pc, #180]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80088dc:	4a2b      	ldr	r2, [pc, #172]	; (800898c <HAL_RCC_GetSysClockFreq+0x10c>)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088f0:	e00a      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d102      	bne.n	80088fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088f8:	4b25      	ldr	r3, [pc, #148]	; (8008990 <HAL_RCC_GetSysClockFreq+0x110>)
 80088fa:	61bb      	str	r3, [r7, #24]
 80088fc:	e004      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b08      	cmp	r3, #8
 8008902:	d101      	bne.n	8008908 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008904:	4b23      	ldr	r3, [pc, #140]	; (8008994 <HAL_RCC_GetSysClockFreq+0x114>)
 8008906:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2b0c      	cmp	r3, #12
 800890c:	d134      	bne.n	8008978 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800890e:	4b1e      	ldr	r3, [pc, #120]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d003      	beq.n	8008926 <HAL_RCC_GetSysClockFreq+0xa6>
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d003      	beq.n	800892c <HAL_RCC_GetSysClockFreq+0xac>
 8008924:	e005      	b.n	8008932 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <HAL_RCC_GetSysClockFreq+0x110>)
 8008928:	617b      	str	r3, [r7, #20]
      break;
 800892a:	e005      	b.n	8008938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800892c:	4b19      	ldr	r3, [pc, #100]	; (8008994 <HAL_RCC_GetSysClockFreq+0x114>)
 800892e:	617b      	str	r3, [r7, #20]
      break;
 8008930:	e002      	b.n	8008938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	617b      	str	r3, [r7, #20]
      break;
 8008936:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	3301      	adds	r3, #1
 8008944:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	fb02 f203 	mul.w	r2, r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800895e:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <HAL_RCC_GetSysClockFreq+0x108>)
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	0e5b      	lsrs	r3, r3, #25
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	3301      	adds	r3, #1
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	fbb2 f3f3 	udiv	r3, r2, r3
 8008976:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008978:	69bb      	ldr	r3, [r7, #24]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3724      	adds	r7, #36	; 0x24
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40021000 	.word	0x40021000
 800898c:	08017814 	.word	0x08017814
 8008990:	00f42400 	.word	0x00f42400
 8008994:	007a1200 	.word	0x007a1200

08008998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800899c:	4b03      	ldr	r3, [pc, #12]	; (80089ac <HAL_RCC_GetHCLKFreq+0x14>)
 800899e:	681b      	ldr	r3, [r3, #0]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	2000000c 	.word	0x2000000c

080089b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80089b4:	f7ff fff0 	bl	8008998 <HAL_RCC_GetHCLKFreq>
 80089b8:	4602      	mov	r2, r0
 80089ba:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	4904      	ldr	r1, [pc, #16]	; (80089d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089c6:	5ccb      	ldrb	r3, [r1, r3]
 80089c8:	f003 031f 	and.w	r3, r3, #31
 80089cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40021000 	.word	0x40021000
 80089d8:	0801780c 	.word	0x0801780c

080089dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80089e0:	f7ff ffda 	bl	8008998 <HAL_RCC_GetHCLKFreq>
 80089e4:	4602      	mov	r2, r0
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	0adb      	lsrs	r3, r3, #11
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	4904      	ldr	r1, [pc, #16]	; (8008a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089f2:	5ccb      	ldrb	r3, [r1, r3]
 80089f4:	f003 031f 	and.w	r3, r3, #31
 80089f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40021000 	.word	0x40021000
 8008a04:	0801780c 	.word	0x0801780c

08008a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a14:	4b2a      	ldr	r3, [pc, #168]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a20:	f7ff fa02 	bl	8007e28 <HAL_PWREx_GetVoltageRange>
 8008a24:	6178      	str	r0, [r7, #20]
 8008a26:	e014      	b.n	8008a52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a28:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2c:	4a24      	ldr	r2, [pc, #144]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a32:	6593      	str	r3, [r2, #88]	; 0x58
 8008a34:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a40:	f7ff f9f2 	bl	8007e28 <HAL_PWREx_GetVoltageRange>
 8008a44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a46:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	4a1d      	ldr	r2, [pc, #116]	; (8008ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a58:	d10b      	bne.n	8008a72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b80      	cmp	r3, #128	; 0x80
 8008a5e:	d919      	bls.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2ba0      	cmp	r3, #160	; 0xa0
 8008a64:	d902      	bls.n	8008a6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a66:	2302      	movs	r3, #2
 8008a68:	613b      	str	r3, [r7, #16]
 8008a6a:	e013      	b.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	e010      	b.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b80      	cmp	r3, #128	; 0x80
 8008a76:	d902      	bls.n	8008a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008a78:	2303      	movs	r3, #3
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	e00a      	b.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d102      	bne.n	8008a8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a84:	2302      	movs	r3, #2
 8008a86:	613b      	str	r3, [r7, #16]
 8008a88:	e004      	b.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b70      	cmp	r3, #112	; 0x70
 8008a8e:	d101      	bne.n	8008a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008a90:	2301      	movs	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f023 0207 	bic.w	r2, r3, #7
 8008a9c:	4909      	ldr	r1, [pc, #36]	; (8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d001      	beq.n	8008ab6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40022000 	.word	0x40022000

08008ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d041      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008aec:	d02a      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008aee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008af2:	d824      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008af8:	d008      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008afe:	d81e      	bhi.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b08:	d010      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b0a:	e018      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b0c:	4b86      	ldr	r3, [pc, #536]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	4a85      	ldr	r2, [pc, #532]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b18:	e015      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	2100      	movs	r1, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fabb 	bl	800909c <RCCEx_PLLSAI1_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b2a:	e00c      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3320      	adds	r3, #32
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fba6 	bl	8009284 <RCCEx_PLLSAI2_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008b3c:	e003      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	74fb      	strb	r3, [r7, #19]
      break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b46:	7cfb      	ldrb	r3, [r7, #19]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b4c:	4b76      	ldr	r3, [pc, #472]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5a:	4973      	ldr	r1, [pc, #460]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008b62:	e001      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	7cfb      	ldrb	r3, [r7, #19]
 8008b66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d041      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b7c:	d02a      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b82:	d824      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b88:	d008      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b8e:	d81e      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b98:	d010      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008b9a:	e018      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b9c:	4b62      	ldr	r3, [pc, #392]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	4a61      	ldr	r2, [pc, #388]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ba8:	e015      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3304      	adds	r3, #4
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fa73 	bl	800909c <RCCEx_PLLSAI1_Config>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008bba:	e00c      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3320      	adds	r3, #32
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fb5e 	bl	8009284 <RCCEx_PLLSAI2_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008bcc:	e003      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd6:	7cfb      	ldrb	r3, [r7, #19]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10b      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008bdc:	4b52      	ldr	r3, [pc, #328]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bea:	494f      	ldr	r1, [pc, #316]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008bf2:	e001      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	7cfb      	ldrb	r3, [r7, #19]
 8008bf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80a0 	beq.w	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c06:	2300      	movs	r3, #0
 8008c08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c0a:	4b47      	ldr	r3, [pc, #284]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c20:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c24:	4a40      	ldr	r2, [pc, #256]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c2c:	4b3e      	ldr	r3, [pc, #248]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c3c:	4b3b      	ldr	r3, [pc, #236]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a3a      	ldr	r2, [pc, #232]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c48:	f7fd fbc8 	bl	80063dc <HAL_GetTick>
 8008c4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c4e:	e009      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c50:	f7fd fbc4 	bl	80063dc <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d902      	bls.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	74fb      	strb	r3, [r7, #19]
        break;
 8008c62:	e005      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c64:	4b31      	ldr	r3, [pc, #196]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0ef      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008c70:	7cfb      	ldrb	r3, [r7, #19]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d15c      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c76:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01f      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d019      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c94:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ca0:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca6:	4a20      	ldr	r2, [pc, #128]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008cb0:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008cc0:	4a19      	ldr	r2, [pc, #100]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd2:	f7fd fb83 	bl	80063dc <HAL_GetTick>
 8008cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cd8:	e00b      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f7fd fb7f 	bl	80063dc <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d902      	bls.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	74fb      	strb	r3, [r7, #19]
            break;
 8008cf0:	e006      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0ec      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008d00:	7cfb      	ldrb	r3, [r7, #19]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10c      	bne.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d06:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d16:	4904      	ldr	r1, [pc, #16]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d1e:	e009      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d20:	7cfb      	ldrb	r3, [r7, #19]
 8008d22:	74bb      	strb	r3, [r7, #18]
 8008d24:	e006      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008d26:	bf00      	nop
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d30:	7cfb      	ldrb	r3, [r7, #19]
 8008d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d34:	7c7b      	ldrb	r3, [r7, #17]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d105      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d3a:	4b9e      	ldr	r3, [pc, #632]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3e:	4a9d      	ldr	r2, [pc, #628]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d52:	4b98      	ldr	r3, [pc, #608]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d58:	f023 0203 	bic.w	r2, r3, #3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	4994      	ldr	r1, [pc, #592]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d74:	4b8f      	ldr	r3, [pc, #572]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7a:	f023 020c 	bic.w	r2, r3, #12
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	498c      	ldr	r1, [pc, #560]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d96:	4b87      	ldr	r3, [pc, #540]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da4:	4983      	ldr	r1, [pc, #524]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0308 	and.w	r3, r3, #8
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008db8:	4b7e      	ldr	r3, [pc, #504]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc6:	497b      	ldr	r1, [pc, #492]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008dda:	4b76      	ldr	r3, [pc, #472]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	4972      	ldr	r1, [pc, #456]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dfc:	4b6d      	ldr	r3, [pc, #436]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0a:	496a      	ldr	r1, [pc, #424]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e1e:	4b65      	ldr	r3, [pc, #404]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e2c:	4961      	ldr	r1, [pc, #388]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e40:	4b5c      	ldr	r3, [pc, #368]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4e:	4959      	ldr	r1, [pc, #356]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00a      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e62:	4b54      	ldr	r3, [pc, #336]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	4950      	ldr	r1, [pc, #320]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e84:	4b4b      	ldr	r3, [pc, #300]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e92:	4948      	ldr	r1, [pc, #288]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ea6:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb4:	493f      	ldr	r1, [pc, #252]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d028      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ec8:	4b3a      	ldr	r3, [pc, #232]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed6:	4937      	ldr	r1, [pc, #220]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ee6:	d106      	bne.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ee8:	4b32      	ldr	r3, [pc, #200]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	4a31      	ldr	r2, [pc, #196]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef2:	60d3      	str	r3, [r2, #12]
 8008ef4:	e011      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008efe:	d10c      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3304      	adds	r3, #4
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 f8c8 	bl	800909c <RCCEx_PLLSAI1_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008f10:	7cfb      	ldrb	r3, [r7, #19]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008f16:	7cfb      	ldrb	r3, [r7, #19]
 8008f18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d028      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f26:	4b23      	ldr	r3, [pc, #140]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f34:	491f      	ldr	r1, [pc, #124]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f44:	d106      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f46:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	4a1a      	ldr	r2, [pc, #104]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f50:	60d3      	str	r3, [r2, #12]
 8008f52:	e011      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3304      	adds	r3, #4
 8008f62:	2101      	movs	r1, #1
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f899 	bl	800909c <RCCEx_PLLSAI1_Config>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008f6e:	7cfb      	ldrb	r3, [r7, #19]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008f74:	7cfb      	ldrb	r3, [r7, #19]
 8008f76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02b      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f84:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f92:	4908      	ldr	r1, [pc, #32]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fa2:	d109      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fa4:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4a02      	ldr	r2, [pc, #8]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fae:	60d3      	str	r3, [r2, #12]
 8008fb0:	e014      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008fb2:	bf00      	nop
 8008fb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fc0:	d10c      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f867 	bl	800909c <RCCEx_PLLSAI1_Config>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fd2:	7cfb      	ldrb	r3, [r7, #19]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008fd8:	7cfb      	ldrb	r3, [r7, #19]
 8008fda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d02f      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008fe8:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff6:	4928      	ldr	r1, [pc, #160]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009006:	d10d      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	2102      	movs	r1, #2
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f844 	bl	800909c <RCCEx_PLLSAI1_Config>
 8009014:	4603      	mov	r3, r0
 8009016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009018:	7cfb      	ldrb	r3, [r7, #19]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d014      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800901e:	7cfb      	ldrb	r3, [r7, #19]
 8009020:	74bb      	strb	r3, [r7, #18]
 8009022:	e011      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800902c:	d10c      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3320      	adds	r3, #32
 8009032:	2102      	movs	r1, #2
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f925 	bl	8009284 <RCCEx_PLLSAI2_Config>
 800903a:	4603      	mov	r3, r0
 800903c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800903e:	7cfb      	ldrb	r3, [r7, #19]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009044:	7cfb      	ldrb	r3, [r7, #19]
 8009046:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009062:	490d      	ldr	r1, [pc, #52]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009064:	4313      	orrs	r3, r2
 8009066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009076:	4b08      	ldr	r3, [pc, #32]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009086:	4904      	ldr	r1, [pc, #16]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800908e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	40021000 	.word	0x40021000

0800909c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80090aa:	4b75      	ldr	r3, [pc, #468]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d018      	beq.n	80090e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80090b6:	4b72      	ldr	r3, [pc, #456]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f003 0203 	and.w	r2, r3, #3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d10d      	bne.n	80090e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
       ||
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80090ce:	4b6c      	ldr	r3, [pc, #432]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	091b      	lsrs	r3, r3, #4
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
       ||
 80090de:	429a      	cmp	r2, r3
 80090e0:	d047      	beq.n	8009172 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
 80090e6:	e044      	b.n	8009172 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d018      	beq.n	8009122 <RCCEx_PLLSAI1_Config+0x86>
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d825      	bhi.n	8009140 <RCCEx_PLLSAI1_Config+0xa4>
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d002      	beq.n	80090fe <RCCEx_PLLSAI1_Config+0x62>
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d009      	beq.n	8009110 <RCCEx_PLLSAI1_Config+0x74>
 80090fc:	e020      	b.n	8009140 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80090fe:	4b60      	ldr	r3, [pc, #384]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d11d      	bne.n	8009146 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800910e:	e01a      	b.n	8009146 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009110:	4b5b      	ldr	r3, [pc, #364]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009118:	2b00      	cmp	r3, #0
 800911a:	d116      	bne.n	800914a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009120:	e013      	b.n	800914a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009122:	4b57      	ldr	r3, [pc, #348]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10f      	bne.n	800914e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800912e:	4b54      	ldr	r3, [pc, #336]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800913e:	e006      	b.n	800914e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	73fb      	strb	r3, [r7, #15]
      break;
 8009144:	e004      	b.n	8009150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009146:	bf00      	nop
 8009148:	e002      	b.n	8009150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800914a:	bf00      	nop
 800914c:	e000      	b.n	8009150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800914e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10d      	bne.n	8009172 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009156:	4b4a      	ldr	r3, [pc, #296]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	3b01      	subs	r3, #1
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	430b      	orrs	r3, r1
 800916c:	4944      	ldr	r1, [pc, #272]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800916e:	4313      	orrs	r3, r2
 8009170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d17d      	bne.n	8009274 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009178:	4b41      	ldr	r3, [pc, #260]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a40      	ldr	r2, [pc, #256]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800917e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009184:	f7fd f92a 	bl	80063dc <HAL_GetTick>
 8009188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800918a:	e009      	b.n	80091a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800918c:	f7fd f926 	bl	80063dc <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d902      	bls.n	80091a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	73fb      	strb	r3, [r7, #15]
        break;
 800919e:	e005      	b.n	80091ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091a0:	4b37      	ldr	r3, [pc, #220]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1ef      	bne.n	800918c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d160      	bne.n	8009274 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d111      	bne.n	80091dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091b8:	4b31      	ldr	r3, [pc, #196]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80091c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6892      	ldr	r2, [r2, #8]
 80091c8:	0211      	lsls	r1, r2, #8
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68d2      	ldr	r2, [r2, #12]
 80091ce:	0912      	lsrs	r2, r2, #4
 80091d0:	0452      	lsls	r2, r2, #17
 80091d2:	430a      	orrs	r2, r1
 80091d4:	492a      	ldr	r1, [pc, #168]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	610b      	str	r3, [r1, #16]
 80091da:	e027      	b.n	800922c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d112      	bne.n	8009208 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091e2:	4b27      	ldr	r3, [pc, #156]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80091ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6892      	ldr	r2, [r2, #8]
 80091f2:	0211      	lsls	r1, r2, #8
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6912      	ldr	r2, [r2, #16]
 80091f8:	0852      	lsrs	r2, r2, #1
 80091fa:	3a01      	subs	r2, #1
 80091fc:	0552      	lsls	r2, r2, #21
 80091fe:	430a      	orrs	r2, r1
 8009200:	491f      	ldr	r1, [pc, #124]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009202:	4313      	orrs	r3, r2
 8009204:	610b      	str	r3, [r1, #16]
 8009206:	e011      	b.n	800922c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009208:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6892      	ldr	r2, [r2, #8]
 8009218:	0211      	lsls	r1, r2, #8
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6952      	ldr	r2, [r2, #20]
 800921e:	0852      	lsrs	r2, r2, #1
 8009220:	3a01      	subs	r2, #1
 8009222:	0652      	lsls	r2, r2, #25
 8009224:	430a      	orrs	r2, r1
 8009226:	4916      	ldr	r1, [pc, #88]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009228:	4313      	orrs	r3, r2
 800922a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800922c:	4b14      	ldr	r3, [pc, #80]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a13      	ldr	r2, [pc, #76]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009238:	f7fd f8d0 	bl	80063dc <HAL_GetTick>
 800923c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800923e:	e009      	b.n	8009254 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009240:	f7fd f8cc 	bl	80063dc <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d902      	bls.n	8009254 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	73fb      	strb	r3, [r7, #15]
          break;
 8009252:	e005      	b.n	8009260 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0ef      	beq.n	8009240 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009268:	691a      	ldr	r2, [r3, #16]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	4904      	ldr	r1, [pc, #16]	; (8009280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009270:	4313      	orrs	r3, r2
 8009272:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40021000 	.word	0x40021000

08009284 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009292:	4b6a      	ldr	r3, [pc, #424]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f003 0303 	and.w	r3, r3, #3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d018      	beq.n	80092d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800929e:	4b67      	ldr	r3, [pc, #412]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0203 	and.w	r2, r3, #3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d10d      	bne.n	80092ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
       ||
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80092b6:	4b61      	ldr	r3, [pc, #388]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
       ||
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d047      	beq.n	800935a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	73fb      	strb	r3, [r7, #15]
 80092ce:	e044      	b.n	800935a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d018      	beq.n	800930a <RCCEx_PLLSAI2_Config+0x86>
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d825      	bhi.n	8009328 <RCCEx_PLLSAI2_Config+0xa4>
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d002      	beq.n	80092e6 <RCCEx_PLLSAI2_Config+0x62>
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d009      	beq.n	80092f8 <RCCEx_PLLSAI2_Config+0x74>
 80092e4:	e020      	b.n	8009328 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092e6:	4b55      	ldr	r3, [pc, #340]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11d      	bne.n	800932e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092f6:	e01a      	b.n	800932e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092f8:	4b50      	ldr	r3, [pc, #320]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009300:	2b00      	cmp	r3, #0
 8009302:	d116      	bne.n	8009332 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009308:	e013      	b.n	8009332 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800930a:	4b4c      	ldr	r3, [pc, #304]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10f      	bne.n	8009336 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009316:	4b49      	ldr	r3, [pc, #292]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009326:	e006      	b.n	8009336 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
      break;
 800932c:	e004      	b.n	8009338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800932e:	bf00      	nop
 8009330:	e002      	b.n	8009338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009332:	bf00      	nop
 8009334:	e000      	b.n	8009338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009336:	bf00      	nop
    }

    if(status == HAL_OK)
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10d      	bne.n	800935a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800933e:	4b3f      	ldr	r3, [pc, #252]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6819      	ldr	r1, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	3b01      	subs	r3, #1
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	430b      	orrs	r3, r1
 8009354:	4939      	ldr	r1, [pc, #228]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009356:	4313      	orrs	r3, r2
 8009358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d167      	bne.n	8009430 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009360:	4b36      	ldr	r3, [pc, #216]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a35      	ldr	r2, [pc, #212]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800936a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936c:	f7fd f836 	bl	80063dc <HAL_GetTick>
 8009370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009372:	e009      	b.n	8009388 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009374:	f7fd f832 	bl	80063dc <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d902      	bls.n	8009388 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	73fb      	strb	r3, [r7, #15]
        break;
 8009386:	e005      	b.n	8009394 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009388:	4b2c      	ldr	r3, [pc, #176]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1ef      	bne.n	8009374 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d14a      	bne.n	8009430 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d111      	bne.n	80093c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80093a0:	4b26      	ldr	r3, [pc, #152]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6892      	ldr	r2, [r2, #8]
 80093b0:	0211      	lsls	r1, r2, #8
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	68d2      	ldr	r2, [r2, #12]
 80093b6:	0912      	lsrs	r2, r2, #4
 80093b8:	0452      	lsls	r2, r2, #17
 80093ba:	430a      	orrs	r2, r1
 80093bc:	491f      	ldr	r1, [pc, #124]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	614b      	str	r3, [r1, #20]
 80093c2:	e011      	b.n	80093e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80093c4:	4b1d      	ldr	r3, [pc, #116]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6892      	ldr	r2, [r2, #8]
 80093d4:	0211      	lsls	r1, r2, #8
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6912      	ldr	r2, [r2, #16]
 80093da:	0852      	lsrs	r2, r2, #1
 80093dc:	3a01      	subs	r2, #1
 80093de:	0652      	lsls	r2, r2, #25
 80093e0:	430a      	orrs	r2, r1
 80093e2:	4916      	ldr	r1, [pc, #88]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80093e8:	4b14      	ldr	r3, [pc, #80]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a13      	ldr	r2, [pc, #76]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 80093ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f4:	f7fc fff2 	bl	80063dc <HAL_GetTick>
 80093f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80093fa:	e009      	b.n	8009410 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80093fc:	f7fc ffee 	bl	80063dc <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d902      	bls.n	8009410 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
          break;
 800940e:	e005      	b.n	800941c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0ef      	beq.n	80093fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009422:	4b06      	ldr	r3, [pc, #24]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009424:	695a      	ldr	r2, [r3, #20]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	4904      	ldr	r1, [pc, #16]	; (800943c <RCCEx_PLLSAI2_Config+0x1b8>)
 800942c:	4313      	orrs	r3, r2
 800942e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	40021000 	.word	0x40021000

08009440 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d06c      	beq.n	800952c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7f8 fed0 	bl	800220c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	22ca      	movs	r2, #202	; 0xca
 800947a:	625a      	str	r2, [r3, #36]	; 0x24
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2253      	movs	r2, #83	; 0x53
 8009482:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9a0 	bl	80097ca <RTC_EnterInitMode>
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d14b      	bne.n	800952c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6899      	ldr	r1, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	68d2      	ldr	r2, [r2, #12]
 80094ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6919      	ldr	r1, [r3, #16]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	041a      	lsls	r2, r3, #16
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9a3 	bl	8009830 <RTC_ExitInitMode>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11b      	bne.n	800952c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0203 	bic.w	r2, r2, #3
 8009502:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69da      	ldr	r2, [r3, #28]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	22ff      	movs	r2, #255	; 0xff
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009536:	b590      	push	{r4, r7, lr}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_RTC_SetTime+0x1a>
 800954c:	2302      	movs	r3, #2
 800954e:	e08b      	b.n	8009668 <HAL_RTC_SetTime+0x132>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	22ca      	movs	r2, #202	; 0xca
 8009566:	625a      	str	r2, [r3, #36]	; 0x24
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2253      	movs	r2, #83	; 0x53
 800956e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f92a 	bl	80097ca <RTC_EnterInitMode>
 8009576:	4603      	mov	r3, r0
 8009578:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800957a:	7cfb      	ldrb	r3, [r7, #19]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d163      	bne.n	8009648 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d126      	bne.n	80095d4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2200      	movs	r2, #0
 8009598:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f984 	bl	80098ac <RTC_ByteToBcd2>
 80095a4:	4603      	mov	r3, r0
 80095a6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f97d 	bl	80098ac <RTC_ByteToBcd2>
 80095b2:	4603      	mov	r3, r0
 80095b4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80095b6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	789b      	ldrb	r3, [r3, #2]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f975 	bl	80098ac <RTC_ByteToBcd2>
 80095c2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095c4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	78db      	ldrb	r3, [r3, #3]
 80095cc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	e018      	b.n	8009606 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80095f4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095fa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	78db      	ldrb	r3, [r3, #3]
 8009600:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009610:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009614:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009624:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6899      	ldr	r1, [r3, #8]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	431a      	orrs	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f8f6 	bl	8009830 <RTC_ExitInitMode>
 8009644:	4603      	mov	r3, r0
 8009646:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009650:	7cfb      	ldrb	r3, [r7, #19]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009666:	7cfb      	ldrb	r3, [r7, #19]
}
 8009668:	4618      	mov	r0, r3
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <HAL_RTC_SetDate+0x1a>
 8009686:	2302      	movs	r3, #2
 8009688:	e075      	b.n	8009776 <HAL_RTC_SetDate+0x106>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10e      	bne.n	80096be <HAL_RTC_SetDate+0x4e>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	f003 0310 	and.w	r3, r3, #16
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	f023 0310 	bic.w	r3, r3, #16
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	330a      	adds	r3, #10
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11c      	bne.n	80096fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	78db      	ldrb	r3, [r3, #3]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f8ef 	bl	80098ac <RTC_ByteToBcd2>
 80096ce:	4603      	mov	r3, r0
 80096d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f8e8 	bl	80098ac <RTC_ByteToBcd2>
 80096dc:	4603      	mov	r3, r0
 80096de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80096e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	789b      	ldrb	r3, [r3, #2]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f8e0 	bl	80098ac <RTC_ByteToBcd2>
 80096ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80096ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e00e      	b.n	800971c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	78db      	ldrb	r3, [r3, #3]
 8009702:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800970a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009710:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	22ca      	movs	r2, #202	; 0xca
 8009722:	625a      	str	r2, [r3, #36]	; 0x24
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2253      	movs	r2, #83	; 0x53
 800972a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f84c 	bl	80097ca <RTC_EnterInitMode>
 8009732:	4603      	mov	r3, r0
 8009734:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009736:	7cfb      	ldrb	r3, [r7, #19]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009746:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800974a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 f86f 	bl	8009830 <RTC_ExitInitMode>
 8009752:	4603      	mov	r3, r0
 8009754:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	22ff      	movs	r2, #255	; 0xff
 800975c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800975e:	7cfb      	ldrb	r3, [r7, #19]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009774:	7cfb      	ldrb	r3, [r7, #19]
}
 8009776:	4618      	mov	r0, r3
 8009778:	371c      	adds	r7, #28
 800977a:	46bd      	mov	sp, r7
 800977c:	bd90      	pop	{r4, r7, pc}

0800977e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009794:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009796:	f7fc fe21 	bl	80063dc <HAL_GetTick>
 800979a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800979c:	e009      	b.n	80097b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800979e:	f7fc fe1d 	bl	80063dc <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ac:	d901      	bls.n	80097b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e007      	b.n	80097c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0ee      	beq.n	800979e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d120      	bne.n	8009826 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80097ee:	f7fc fdf5 	bl	80063dc <HAL_GetTick>
 80097f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097f4:	e00d      	b.n	8009812 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80097f6:	f7fc fdf1 	bl	80063dc <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009804:	d905      	bls.n	8009812 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2203      	movs	r2, #3
 800980e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <RTC_EnterInitMode+0x5c>
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b03      	cmp	r3, #3
 8009824:	d1e7      	bne.n	80097f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800983c:	4b1a      	ldr	r3, [pc, #104]	; (80098a8 <RTC_ExitInitMode+0x78>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	4a19      	ldr	r2, [pc, #100]	; (80098a8 <RTC_ExitInitMode+0x78>)
 8009842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009846:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009848:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <RTC_ExitInitMode+0x78>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10c      	bne.n	800986e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff92 	bl	800977e <HAL_RTC_WaitForSynchro>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01e      	beq.n	800989e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2203      	movs	r2, #3
 8009864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	73fb      	strb	r3, [r7, #15]
 800986c:	e017      	b.n	800989e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800986e:	4b0e      	ldr	r3, [pc, #56]	; (80098a8 <RTC_ExitInitMode+0x78>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	4a0d      	ldr	r2, [pc, #52]	; (80098a8 <RTC_ExitInitMode+0x78>)
 8009874:	f023 0320 	bic.w	r3, r3, #32
 8009878:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff ff7f 	bl	800977e <HAL_RTC_WaitForSynchro>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2203      	movs	r2, #3
 800988a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <RTC_ExitInitMode+0x78>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	4a04      	ldr	r2, [pc, #16]	; (80098a8 <RTC_ExitInitMode+0x78>)
 8009898:	f043 0320 	orr.w	r3, r3, #32
 800989c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	40002800 	.word	0x40002800

080098ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80098be:	e005      	b.n	80098cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	3b0a      	subs	r3, #10
 80098ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d8f6      	bhi.n	80098c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	4313      	orrs	r3, r2
 80098de:	b2db      	uxtb	r3, r3
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e049      	b.n	8009992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7f9 f864 	bl	80029e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f000 fae6 	bl	8009efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d001      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e04f      	b.n	8009a54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0201 	orr.w	r2, r2, #1
 80099ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a23      	ldr	r2, [pc, #140]	; (8009a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d01d      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099de:	d018      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a1f      	ldr	r2, [pc, #124]	; (8009a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a1e      	ldr	r2, [pc, #120]	; (8009a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00e      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a1c      	ldr	r2, [pc, #112]	; (8009a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d009      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a1b      	ldr	r2, [pc, #108]	; (8009a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d004      	beq.n	8009a12 <HAL_TIM_Base_Start_IT+0x76>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a19      	ldr	r2, [pc, #100]	; (8009a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d115      	bne.n	8009a3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b06      	cmp	r3, #6
 8009a22:	d015      	beq.n	8009a50 <HAL_TIM_Base_Start_IT+0xb4>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2a:	d011      	beq.n	8009a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0201 	orr.w	r2, r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3c:	e008      	b.n	8009a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0201 	orr.w	r2, r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e000      	b.n	8009a52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	40012c00 	.word	0x40012c00
 8009a64:	40000400 	.word	0x40000400
 8009a68:	40000800 	.word	0x40000800
 8009a6c:	40000c00 	.word	0x40000c00
 8009a70:	40013400 	.word	0x40013400
 8009a74:	40014000 	.word	0x40014000
 8009a78:	00010007 	.word	0x00010007

08009a7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0201 	bic.w	r2, r2, #1
 8009a92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a1a      	ldr	r2, [r3, #32]
 8009a9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <HAL_TIM_Base_Stop_IT+0x48>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6a1a      	ldr	r2, [r3, #32]
 8009aaa:	f240 4344 	movw	r3, #1092	; 0x444
 8009aae:	4013      	ands	r3, r2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d107      	bne.n	8009ac4 <HAL_TIM_Base_Stop_IT+0x48>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0201 	bic.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d122      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d11b      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f06f 0202 	mvn.w	r2, #2
 8009b06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9ce 	bl	8009ebe <HAL_TIM_IC_CaptureCallback>
 8009b22:	e005      	b.n	8009b30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9c0 	bl	8009eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f9d1 	bl	8009ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d122      	bne.n	8009b8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d11b      	bne.n	8009b8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f06f 0204 	mvn.w	r2, #4
 8009b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9a4 	bl	8009ebe <HAL_TIM_IC_CaptureCallback>
 8009b76:	e005      	b.n	8009b84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f996 	bl	8009eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f9a7 	bl	8009ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f003 0308 	and.w	r3, r3, #8
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d122      	bne.n	8009bde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	d11b      	bne.n	8009bde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f06f 0208 	mvn.w	r2, #8
 8009bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2204      	movs	r2, #4
 8009bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f97a 	bl	8009ebe <HAL_TIM_IC_CaptureCallback>
 8009bca:	e005      	b.n	8009bd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f96c 	bl	8009eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f97d 	bl	8009ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d122      	bne.n	8009c32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 0310 	and.w	r3, r3, #16
 8009bf6:	2b10      	cmp	r3, #16
 8009bf8:	d11b      	bne.n	8009c32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f06f 0210 	mvn.w	r2, #16
 8009c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2208      	movs	r2, #8
 8009c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f950 	bl	8009ebe <HAL_TIM_IC_CaptureCallback>
 8009c1e:	e005      	b.n	8009c2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f942 	bl	8009eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f953 	bl	8009ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d10e      	bne.n	8009c5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d107      	bne.n	8009c5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f06f 0201 	mvn.w	r2, #1
 8009c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7f7 fd3d 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c68:	2b80      	cmp	r3, #128	; 0x80
 8009c6a:	d10e      	bne.n	8009c8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c76:	2b80      	cmp	r3, #128	; 0x80
 8009c78:	d107      	bne.n	8009c8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 faff 	bl	800a288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c98:	d10e      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca4:	2b80      	cmp	r3, #128	; 0x80
 8009ca6:	d107      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 faf2 	bl	800a29c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc2:	2b40      	cmp	r3, #64	; 0x40
 8009cc4:	d10e      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d107      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f901 	bl	8009ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d10e      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f003 0320 	and.w	r3, r3, #32
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	d107      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0220 	mvn.w	r2, #32
 8009d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fab2 	bl	800a274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_TIM_ConfigClockSource+0x1c>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e0b6      	b.n	8009ea2 <HAL_TIM_ConfigClockSource+0x18a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d70:	d03e      	beq.n	8009df0 <HAL_TIM_ConfigClockSource+0xd8>
 8009d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d76:	f200 8087 	bhi.w	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d7e:	f000 8086 	beq.w	8009e8e <HAL_TIM_ConfigClockSource+0x176>
 8009d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d86:	d87f      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009d88:	2b70      	cmp	r3, #112	; 0x70
 8009d8a:	d01a      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0xaa>
 8009d8c:	2b70      	cmp	r3, #112	; 0x70
 8009d8e:	d87b      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009d90:	2b60      	cmp	r3, #96	; 0x60
 8009d92:	d050      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x11e>
 8009d94:	2b60      	cmp	r3, #96	; 0x60
 8009d96:	d877      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009d98:	2b50      	cmp	r3, #80	; 0x50
 8009d9a:	d03c      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0xfe>
 8009d9c:	2b50      	cmp	r3, #80	; 0x50
 8009d9e:	d873      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	d058      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x13e>
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	d86f      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009da8:	2b30      	cmp	r3, #48	; 0x30
 8009daa:	d064      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x15e>
 8009dac:	2b30      	cmp	r3, #48	; 0x30
 8009dae:	d86b      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d060      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x15e>
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d867      	bhi.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05c      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x15e>
 8009dbc:	2b10      	cmp	r3, #16
 8009dbe:	d05a      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x15e>
 8009dc0:	e062      	b.n	8009e88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6899      	ldr	r1, [r3, #8]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	f000 f9a7 	bl	800a124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	609a      	str	r2, [r3, #8]
      break;
 8009dee:	e04f      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6818      	ldr	r0, [r3, #0]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	6899      	ldr	r1, [r3, #8]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f000 f990 	bl	800a124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e12:	609a      	str	r2, [r3, #8]
      break;
 8009e14:	e03c      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6859      	ldr	r1, [r3, #4]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f000 f904 	bl	800a030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2150      	movs	r1, #80	; 0x50
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 f95d 	bl	800a0ee <TIM_ITRx_SetConfig>
      break;
 8009e34:	e02c      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6859      	ldr	r1, [r3, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f000 f923 	bl	800a08e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2160      	movs	r1, #96	; 0x60
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f94d 	bl	800a0ee <TIM_ITRx_SetConfig>
      break;
 8009e54:	e01c      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6859      	ldr	r1, [r3, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f000 f8e4 	bl	800a030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2140      	movs	r1, #64	; 0x40
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f93d 	bl	800a0ee <TIM_ITRx_SetConfig>
      break;
 8009e74:	e00c      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f000 f934 	bl	800a0ee <TIM_ITRx_SetConfig>
      break;
 8009e86:	e003      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8c:	e000      	b.n	8009e90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a40      	ldr	r2, [pc, #256]	; (800a010 <TIM_Base_SetConfig+0x114>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d013      	beq.n	8009f3c <TIM_Base_SetConfig+0x40>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d00f      	beq.n	8009f3c <TIM_Base_SetConfig+0x40>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <TIM_Base_SetConfig+0x118>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00b      	beq.n	8009f3c <TIM_Base_SetConfig+0x40>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a3c      	ldr	r2, [pc, #240]	; (800a018 <TIM_Base_SetConfig+0x11c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d007      	beq.n	8009f3c <TIM_Base_SetConfig+0x40>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a3b      	ldr	r2, [pc, #236]	; (800a01c <TIM_Base_SetConfig+0x120>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_Base_SetConfig+0x40>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a3a      	ldr	r2, [pc, #232]	; (800a020 <TIM_Base_SetConfig+0x124>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d108      	bne.n	8009f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a2f      	ldr	r2, [pc, #188]	; (800a010 <TIM_Base_SetConfig+0x114>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d01f      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5c:	d01b      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a2c      	ldr	r2, [pc, #176]	; (800a014 <TIM_Base_SetConfig+0x118>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d017      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a2b      	ldr	r2, [pc, #172]	; (800a018 <TIM_Base_SetConfig+0x11c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d013      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a2a      	ldr	r2, [pc, #168]	; (800a01c <TIM_Base_SetConfig+0x120>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d00f      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a29      	ldr	r2, [pc, #164]	; (800a020 <TIM_Base_SetConfig+0x124>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00b      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a28      	ldr	r2, [pc, #160]	; (800a024 <TIM_Base_SetConfig+0x128>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d007      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a27      	ldr	r2, [pc, #156]	; (800a028 <TIM_Base_SetConfig+0x12c>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d003      	beq.n	8009f96 <TIM_Base_SetConfig+0x9a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a26      	ldr	r2, [pc, #152]	; (800a02c <TIM_Base_SetConfig+0x130>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d108      	bne.n	8009fa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a10      	ldr	r2, [pc, #64]	; (800a010 <TIM_Base_SetConfig+0x114>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d00f      	beq.n	8009ff4 <TIM_Base_SetConfig+0xf8>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a12      	ldr	r2, [pc, #72]	; (800a020 <TIM_Base_SetConfig+0x124>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00b      	beq.n	8009ff4 <TIM_Base_SetConfig+0xf8>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a11      	ldr	r2, [pc, #68]	; (800a024 <TIM_Base_SetConfig+0x128>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d007      	beq.n	8009ff4 <TIM_Base_SetConfig+0xf8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a10      	ldr	r2, [pc, #64]	; (800a028 <TIM_Base_SetConfig+0x12c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d003      	beq.n	8009ff4 <TIM_Base_SetConfig+0xf8>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a0f      	ldr	r2, [pc, #60]	; (800a02c <TIM_Base_SetConfig+0x130>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d103      	bne.n	8009ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	691a      	ldr	r2, [r3, #16]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	615a      	str	r2, [r3, #20]
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40000400 	.word	0x40000400
 800a018:	40000800 	.word	0x40000800
 800a01c:	40000c00 	.word	0x40000c00
 800a020:	40013400 	.word	0x40013400
 800a024:	40014000 	.word	0x40014000
 800a028:	40014400 	.word	0x40014400
 800a02c:	40014800 	.word	0x40014800

0800a030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	f023 0201 	bic.w	r2, r3, #1
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a05a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f023 030a 	bic.w	r3, r3, #10
 800a06c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	621a      	str	r2, [r3, #32]
}
 800a082:	bf00      	nop
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a08e:	b480      	push	{r7}
 800a090:	b087      	sub	sp, #28
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	f023 0210 	bic.w	r2, r3, #16
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	031b      	lsls	r3, r3, #12
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	011b      	lsls	r3, r3, #4
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	621a      	str	r2, [r3, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b085      	sub	sp, #20
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f043 0307 	orr.w	r3, r3, #7
 800a110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	609a      	str	r2, [r3, #8]
}
 800a118:	bf00      	nop
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a13e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	021a      	lsls	r2, r3, #8
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	431a      	orrs	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	609a      	str	r2, [r3, #8]
}
 800a158:	bf00      	nop
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a178:	2302      	movs	r3, #2
 800a17a:	e068      	b.n	800a24e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2e      	ldr	r2, [pc, #184]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a2d      	ldr	r2, [pc, #180]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d108      	bne.n	800a1c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1e      	ldr	r2, [pc, #120]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d01d      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ee:	d018      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1b      	ldr	r2, [pc, #108]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d013      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a1a      	ldr	r2, [pc, #104]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00e      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a18      	ldr	r2, [pc, #96]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d009      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a13      	ldr	r2, [pc, #76]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d004      	beq.n	800a222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a14      	ldr	r2, [pc, #80]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d10c      	bne.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4313      	orrs	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	40012c00 	.word	0x40012c00
 800a260:	40013400 	.word	0x40013400
 800a264:	40000400 	.word	0x40000400
 800a268:	40000800 	.word	0x40000800
 800a26c:	40000c00 	.word	0x40000c00
 800a270:	40014000 	.word	0x40014000

0800a274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e040      	b.n	800a344 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f83a 	bl	800a34c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2224      	movs	r2, #36	; 0x24
 800a2dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0201 	bic.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f94a 	bl	800a588 <UART_SetConfig>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e022      	b.n	800a344 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fbc8 	bl	800aa9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a31a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a32a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fc4f 	bl	800abe0 <UART_CheckIdleState>
 800a342:	4603      	mov	r3, r0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08a      	sub	sp, #40	; 0x28
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a374:	2b20      	cmp	r3, #32
 800a376:	f040 8082 	bne.w	800a47e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <HAL_UART_Transmit+0x26>
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e07a      	b.n	800a480 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_UART_Transmit+0x38>
 800a394:	2302      	movs	r3, #2
 800a396:	e073      	b.n	800a480 <HAL_UART_Transmit+0x120>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2221      	movs	r2, #33	; 0x21
 800a3ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ae:	f7fc f815 	bl	80063dc <HAL_GetTick>
 800a3b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	88fa      	ldrh	r2, [r7, #6]
 800a3b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	88fa      	ldrh	r2, [r7, #6]
 800a3c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3cc:	d108      	bne.n	800a3e0 <HAL_UART_Transmit+0x80>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	e003      	b.n	800a3e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a3f0:	e02d      	b.n	800a44e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 fc38 	bl	800ac72 <UART_WaitOnFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e039      	b.n	800a480 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10b      	bne.n	800a42a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	881a      	ldrh	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a41e:	b292      	uxth	r2, r2
 800a420:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	3302      	adds	r3, #2
 800a426:	61bb      	str	r3, [r7, #24]
 800a428:	e008      	b.n	800a43c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	b292      	uxth	r2, r2
 800a434:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	3301      	adds	r3, #1
 800a43a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a442:	b29b      	uxth	r3, r3
 800a444:	3b01      	subs	r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1cb      	bne.n	800a3f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	2140      	movs	r1, #64	; 0x40
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fc04 	bl	800ac72 <UART_WaitOnFlagUntilTimeout>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e005      	b.n	800a480 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2220      	movs	r2, #32
 800a478:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e000      	b.n	800a480 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a47e:	2302      	movs	r3, #2
  }
}
 800a480:	4618      	mov	r0, r3
 800a482:	3720      	adds	r7, #32
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d142      	bne.n	800a524 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <HAL_UART_Receive_DMA+0x22>
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e03b      	b.n	800a526 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Receive_DMA+0x34>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e034      	b.n	800a526 <HAL_UART_Receive_DMA+0x9e>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a18      	ldr	r2, [pc, #96]	; (800a530 <HAL_UART_Receive_DMA+0xa8>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d01f      	beq.n	800a514 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d018      	beq.n	800a514 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	623b      	str	r3, [r7, #32]
 800a502:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	69f9      	ldr	r1, [r7, #28]
 800a506:	6a3a      	ldr	r2, [r7, #32]
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e6      	bne.n	800a4e2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	461a      	mov	r2, r3
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fc6e 	bl	800adfc <UART_Start_Receive_DMA>
 800a520:	4603      	mov	r3, r0
 800a522:	e000      	b.n	800a526 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a524:	2302      	movs	r3, #2
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	3728      	adds	r7, #40	; 0x28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40008000 	.word	0x40008000

0800a534 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a588:	b5b0      	push	{r4, r5, r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	4bad      	ldr	r3, [pc, #692]	; (800a868 <UART_SetConfig+0x2e0>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	69f9      	ldr	r1, [r7, #28]
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4aa2      	ldr	r2, [pc, #648]	; (800a86c <UART_SetConfig+0x2e4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	430a      	orrs	r2, r1
 800a602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a99      	ldr	r2, [pc, #612]	; (800a870 <UART_SetConfig+0x2e8>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d121      	bne.n	800a652 <UART_SetConfig+0xca>
 800a60e:	4b99      	ldr	r3, [pc, #612]	; (800a874 <UART_SetConfig+0x2ec>)
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a614:	f003 0303 	and.w	r3, r3, #3
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d817      	bhi.n	800a64c <UART_SetConfig+0xc4>
 800a61c:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <UART_SetConfig+0x9c>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a635 	.word	0x0800a635
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a63b 	.word	0x0800a63b
 800a630:	0800a647 	.word	0x0800a647
 800a634:	2301      	movs	r3, #1
 800a636:	76fb      	strb	r3, [r7, #27]
 800a638:	e0e7      	b.n	800a80a <UART_SetConfig+0x282>
 800a63a:	2302      	movs	r3, #2
 800a63c:	76fb      	strb	r3, [r7, #27]
 800a63e:	e0e4      	b.n	800a80a <UART_SetConfig+0x282>
 800a640:	2304      	movs	r3, #4
 800a642:	76fb      	strb	r3, [r7, #27]
 800a644:	e0e1      	b.n	800a80a <UART_SetConfig+0x282>
 800a646:	2308      	movs	r3, #8
 800a648:	76fb      	strb	r3, [r7, #27]
 800a64a:	e0de      	b.n	800a80a <UART_SetConfig+0x282>
 800a64c:	2310      	movs	r3, #16
 800a64e:	76fb      	strb	r3, [r7, #27]
 800a650:	e0db      	b.n	800a80a <UART_SetConfig+0x282>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a88      	ldr	r2, [pc, #544]	; (800a878 <UART_SetConfig+0x2f0>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d132      	bne.n	800a6c2 <UART_SetConfig+0x13a>
 800a65c:	4b85      	ldr	r3, [pc, #532]	; (800a874 <UART_SetConfig+0x2ec>)
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a662:	f003 030c 	and.w	r3, r3, #12
 800a666:	2b0c      	cmp	r3, #12
 800a668:	d828      	bhi.n	800a6bc <UART_SetConfig+0x134>
 800a66a:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <UART_SetConfig+0xe8>)
 800a66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a670:	0800a6a5 	.word	0x0800a6a5
 800a674:	0800a6bd 	.word	0x0800a6bd
 800a678:	0800a6bd 	.word	0x0800a6bd
 800a67c:	0800a6bd 	.word	0x0800a6bd
 800a680:	0800a6b1 	.word	0x0800a6b1
 800a684:	0800a6bd 	.word	0x0800a6bd
 800a688:	0800a6bd 	.word	0x0800a6bd
 800a68c:	0800a6bd 	.word	0x0800a6bd
 800a690:	0800a6ab 	.word	0x0800a6ab
 800a694:	0800a6bd 	.word	0x0800a6bd
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a6b7 	.word	0x0800a6b7
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	76fb      	strb	r3, [r7, #27]
 800a6a8:	e0af      	b.n	800a80a <UART_SetConfig+0x282>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	76fb      	strb	r3, [r7, #27]
 800a6ae:	e0ac      	b.n	800a80a <UART_SetConfig+0x282>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	76fb      	strb	r3, [r7, #27]
 800a6b4:	e0a9      	b.n	800a80a <UART_SetConfig+0x282>
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	76fb      	strb	r3, [r7, #27]
 800a6ba:	e0a6      	b.n	800a80a <UART_SetConfig+0x282>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	76fb      	strb	r3, [r7, #27]
 800a6c0:	e0a3      	b.n	800a80a <UART_SetConfig+0x282>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a6d      	ldr	r2, [pc, #436]	; (800a87c <UART_SetConfig+0x2f4>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d120      	bne.n	800a70e <UART_SetConfig+0x186>
 800a6cc:	4b69      	ldr	r3, [pc, #420]	; (800a874 <UART_SetConfig+0x2ec>)
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a6d6:	2b30      	cmp	r3, #48	; 0x30
 800a6d8:	d013      	beq.n	800a702 <UART_SetConfig+0x17a>
 800a6da:	2b30      	cmp	r3, #48	; 0x30
 800a6dc:	d814      	bhi.n	800a708 <UART_SetConfig+0x180>
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d009      	beq.n	800a6f6 <UART_SetConfig+0x16e>
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d810      	bhi.n	800a708 <UART_SetConfig+0x180>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <UART_SetConfig+0x168>
 800a6ea:	2b10      	cmp	r3, #16
 800a6ec:	d006      	beq.n	800a6fc <UART_SetConfig+0x174>
 800a6ee:	e00b      	b.n	800a708 <UART_SetConfig+0x180>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	76fb      	strb	r3, [r7, #27]
 800a6f4:	e089      	b.n	800a80a <UART_SetConfig+0x282>
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	76fb      	strb	r3, [r7, #27]
 800a6fa:	e086      	b.n	800a80a <UART_SetConfig+0x282>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	76fb      	strb	r3, [r7, #27]
 800a700:	e083      	b.n	800a80a <UART_SetConfig+0x282>
 800a702:	2308      	movs	r3, #8
 800a704:	76fb      	strb	r3, [r7, #27]
 800a706:	e080      	b.n	800a80a <UART_SetConfig+0x282>
 800a708:	2310      	movs	r3, #16
 800a70a:	76fb      	strb	r3, [r7, #27]
 800a70c:	e07d      	b.n	800a80a <UART_SetConfig+0x282>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a5b      	ldr	r2, [pc, #364]	; (800a880 <UART_SetConfig+0x2f8>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d120      	bne.n	800a75a <UART_SetConfig+0x1d2>
 800a718:	4b56      	ldr	r3, [pc, #344]	; (800a874 <UART_SetConfig+0x2ec>)
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a722:	2bc0      	cmp	r3, #192	; 0xc0
 800a724:	d013      	beq.n	800a74e <UART_SetConfig+0x1c6>
 800a726:	2bc0      	cmp	r3, #192	; 0xc0
 800a728:	d814      	bhi.n	800a754 <UART_SetConfig+0x1cc>
 800a72a:	2b80      	cmp	r3, #128	; 0x80
 800a72c:	d009      	beq.n	800a742 <UART_SetConfig+0x1ba>
 800a72e:	2b80      	cmp	r3, #128	; 0x80
 800a730:	d810      	bhi.n	800a754 <UART_SetConfig+0x1cc>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <UART_SetConfig+0x1b4>
 800a736:	2b40      	cmp	r3, #64	; 0x40
 800a738:	d006      	beq.n	800a748 <UART_SetConfig+0x1c0>
 800a73a:	e00b      	b.n	800a754 <UART_SetConfig+0x1cc>
 800a73c:	2300      	movs	r3, #0
 800a73e:	76fb      	strb	r3, [r7, #27]
 800a740:	e063      	b.n	800a80a <UART_SetConfig+0x282>
 800a742:	2302      	movs	r3, #2
 800a744:	76fb      	strb	r3, [r7, #27]
 800a746:	e060      	b.n	800a80a <UART_SetConfig+0x282>
 800a748:	2304      	movs	r3, #4
 800a74a:	76fb      	strb	r3, [r7, #27]
 800a74c:	e05d      	b.n	800a80a <UART_SetConfig+0x282>
 800a74e:	2308      	movs	r3, #8
 800a750:	76fb      	strb	r3, [r7, #27]
 800a752:	e05a      	b.n	800a80a <UART_SetConfig+0x282>
 800a754:	2310      	movs	r3, #16
 800a756:	76fb      	strb	r3, [r7, #27]
 800a758:	e057      	b.n	800a80a <UART_SetConfig+0x282>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a49      	ldr	r2, [pc, #292]	; (800a884 <UART_SetConfig+0x2fc>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d125      	bne.n	800a7b0 <UART_SetConfig+0x228>
 800a764:	4b43      	ldr	r3, [pc, #268]	; (800a874 <UART_SetConfig+0x2ec>)
 800a766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a772:	d017      	beq.n	800a7a4 <UART_SetConfig+0x21c>
 800a774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a778:	d817      	bhi.n	800a7aa <UART_SetConfig+0x222>
 800a77a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77e:	d00b      	beq.n	800a798 <UART_SetConfig+0x210>
 800a780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a784:	d811      	bhi.n	800a7aa <UART_SetConfig+0x222>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <UART_SetConfig+0x20a>
 800a78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78e:	d006      	beq.n	800a79e <UART_SetConfig+0x216>
 800a790:	e00b      	b.n	800a7aa <UART_SetConfig+0x222>
 800a792:	2300      	movs	r3, #0
 800a794:	76fb      	strb	r3, [r7, #27]
 800a796:	e038      	b.n	800a80a <UART_SetConfig+0x282>
 800a798:	2302      	movs	r3, #2
 800a79a:	76fb      	strb	r3, [r7, #27]
 800a79c:	e035      	b.n	800a80a <UART_SetConfig+0x282>
 800a79e:	2304      	movs	r3, #4
 800a7a0:	76fb      	strb	r3, [r7, #27]
 800a7a2:	e032      	b.n	800a80a <UART_SetConfig+0x282>
 800a7a4:	2308      	movs	r3, #8
 800a7a6:	76fb      	strb	r3, [r7, #27]
 800a7a8:	e02f      	b.n	800a80a <UART_SetConfig+0x282>
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	76fb      	strb	r3, [r7, #27]
 800a7ae:	e02c      	b.n	800a80a <UART_SetConfig+0x282>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a2d      	ldr	r2, [pc, #180]	; (800a86c <UART_SetConfig+0x2e4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d125      	bne.n	800a806 <UART_SetConfig+0x27e>
 800a7ba:	4b2e      	ldr	r3, [pc, #184]	; (800a874 <UART_SetConfig+0x2ec>)
 800a7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a7c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7c8:	d017      	beq.n	800a7fa <UART_SetConfig+0x272>
 800a7ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7ce:	d817      	bhi.n	800a800 <UART_SetConfig+0x278>
 800a7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d4:	d00b      	beq.n	800a7ee <UART_SetConfig+0x266>
 800a7d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7da:	d811      	bhi.n	800a800 <UART_SetConfig+0x278>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <UART_SetConfig+0x260>
 800a7e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e4:	d006      	beq.n	800a7f4 <UART_SetConfig+0x26c>
 800a7e6:	e00b      	b.n	800a800 <UART_SetConfig+0x278>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	76fb      	strb	r3, [r7, #27]
 800a7ec:	e00d      	b.n	800a80a <UART_SetConfig+0x282>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	76fb      	strb	r3, [r7, #27]
 800a7f2:	e00a      	b.n	800a80a <UART_SetConfig+0x282>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	76fb      	strb	r3, [r7, #27]
 800a7f8:	e007      	b.n	800a80a <UART_SetConfig+0x282>
 800a7fa:	2308      	movs	r3, #8
 800a7fc:	76fb      	strb	r3, [r7, #27]
 800a7fe:	e004      	b.n	800a80a <UART_SetConfig+0x282>
 800a800:	2310      	movs	r3, #16
 800a802:	76fb      	strb	r3, [r7, #27]
 800a804:	e001      	b.n	800a80a <UART_SetConfig+0x282>
 800a806:	2310      	movs	r3, #16
 800a808:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a17      	ldr	r2, [pc, #92]	; (800a86c <UART_SetConfig+0x2e4>)
 800a810:	4293      	cmp	r3, r2
 800a812:	f040 8087 	bne.w	800a924 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a816:	7efb      	ldrb	r3, [r7, #27]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d837      	bhi.n	800a88c <UART_SetConfig+0x304>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <UART_SetConfig+0x29c>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a88d 	.word	0x0800a88d
 800a82c:	0800a851 	.word	0x0800a851
 800a830:	0800a88d 	.word	0x0800a88d
 800a834:	0800a857 	.word	0x0800a857
 800a838:	0800a88d 	.word	0x0800a88d
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a88d 	.word	0x0800a88d
 800a844:	0800a85f 	.word	0x0800a85f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a848:	f7fe f8b2 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 800a84c:	6178      	str	r0, [r7, #20]
        break;
 800a84e:	e022      	b.n	800a896 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a850:	4b0d      	ldr	r3, [pc, #52]	; (800a888 <UART_SetConfig+0x300>)
 800a852:	617b      	str	r3, [r7, #20]
        break;
 800a854:	e01f      	b.n	800a896 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a856:	f7fe f813 	bl	8008880 <HAL_RCC_GetSysClockFreq>
 800a85a:	6178      	str	r0, [r7, #20]
        break;
 800a85c:	e01b      	b.n	800a896 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a85e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a862:	617b      	str	r3, [r7, #20]
        break;
 800a864:	e017      	b.n	800a896 <UART_SetConfig+0x30e>
 800a866:	bf00      	nop
 800a868:	efff69f3 	.word	0xefff69f3
 800a86c:	40008000 	.word	0x40008000
 800a870:	40013800 	.word	0x40013800
 800a874:	40021000 	.word	0x40021000
 800a878:	40004400 	.word	0x40004400
 800a87c:	40004800 	.word	0x40004800
 800a880:	40004c00 	.word	0x40004c00
 800a884:	40005000 	.word	0x40005000
 800a888:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	76bb      	strb	r3, [r7, #26]
        break;
 800a894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 80f1 	beq.w	800aa80 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	4413      	add	r3, r2
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d305      	bcc.n	800a8ba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d902      	bls.n	800a8c0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	76bb      	strb	r3, [r7, #26]
 800a8be:	e0df      	b.n	800aa80 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f04f 0100 	mov.w	r1, #0
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	020b      	lsls	r3, r1, #8
 800a8d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8d6:	0202      	lsls	r2, r0, #8
 800a8d8:	6879      	ldr	r1, [r7, #4]
 800a8da:	6849      	ldr	r1, [r1, #4]
 800a8dc:	0849      	lsrs	r1, r1, #1
 800a8de:	4608      	mov	r0, r1
 800a8e0:	f04f 0100 	mov.w	r1, #0
 800a8e4:	1814      	adds	r4, r2, r0
 800a8e6:	eb43 0501 	adc.w	r5, r3, r1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f6 f922 	bl	8000b40 <__aeabi_uldivmod>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4613      	mov	r3, r2
 800a902:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a90a:	d308      	bcc.n	800a91e <UART_SetConfig+0x396>
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a912:	d204      	bcs.n	800a91e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	60da      	str	r2, [r3, #12]
 800a91c:	e0b0      	b.n	800aa80 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	76bb      	strb	r3, [r7, #26]
 800a922:	e0ad      	b.n	800aa80 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92c:	d15b      	bne.n	800a9e6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a92e:	7efb      	ldrb	r3, [r7, #27]
 800a930:	2b08      	cmp	r3, #8
 800a932:	d828      	bhi.n	800a986 <UART_SetConfig+0x3fe>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <UART_SetConfig+0x3b4>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800a969 	.word	0x0800a969
 800a944:	0800a971 	.word	0x0800a971
 800a948:	0800a987 	.word	0x0800a987
 800a94c:	0800a977 	.word	0x0800a977
 800a950:	0800a987 	.word	0x0800a987
 800a954:	0800a987 	.word	0x0800a987
 800a958:	0800a987 	.word	0x0800a987
 800a95c:	0800a97f 	.word	0x0800a97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a960:	f7fe f826 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 800a964:	6178      	str	r0, [r7, #20]
        break;
 800a966:	e013      	b.n	800a990 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a968:	f7fe f838 	bl	80089dc <HAL_RCC_GetPCLK2Freq>
 800a96c:	6178      	str	r0, [r7, #20]
        break;
 800a96e:	e00f      	b.n	800a990 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a970:	4b49      	ldr	r3, [pc, #292]	; (800aa98 <UART_SetConfig+0x510>)
 800a972:	617b      	str	r3, [r7, #20]
        break;
 800a974:	e00c      	b.n	800a990 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a976:	f7fd ff83 	bl	8008880 <HAL_RCC_GetSysClockFreq>
 800a97a:	6178      	str	r0, [r7, #20]
        break;
 800a97c:	e008      	b.n	800a990 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a982:	617b      	str	r3, [r7, #20]
        break;
 800a984:	e004      	b.n	800a990 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	76bb      	strb	r3, [r7, #26]
        break;
 800a98e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d074      	beq.n	800aa80 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	005a      	lsls	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	d916      	bls.n	800a9e0 <UART_SetConfig+0x458>
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b8:	d212      	bcs.n	800a9e0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f023 030f 	bic.w	r3, r3, #15
 800a9c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	89fa      	ldrh	r2, [r7, #14]
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	e04f      	b.n	800aa80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	76bb      	strb	r3, [r7, #26]
 800a9e4:	e04c      	b.n	800aa80 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9e6:	7efb      	ldrb	r3, [r7, #27]
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d828      	bhi.n	800aa3e <UART_SetConfig+0x4b6>
 800a9ec:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <UART_SetConfig+0x46c>)
 800a9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f2:	bf00      	nop
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa21 	.word	0x0800aa21
 800a9fc:	0800aa29 	.word	0x0800aa29
 800aa00:	0800aa3f 	.word	0x0800aa3f
 800aa04:	0800aa2f 	.word	0x0800aa2f
 800aa08:	0800aa3f 	.word	0x0800aa3f
 800aa0c:	0800aa3f 	.word	0x0800aa3f
 800aa10:	0800aa3f 	.word	0x0800aa3f
 800aa14:	0800aa37 	.word	0x0800aa37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa18:	f7fd ffca 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 800aa1c:	6178      	str	r0, [r7, #20]
        break;
 800aa1e:	e013      	b.n	800aa48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa20:	f7fd ffdc 	bl	80089dc <HAL_RCC_GetPCLK2Freq>
 800aa24:	6178      	str	r0, [r7, #20]
        break;
 800aa26:	e00f      	b.n	800aa48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa28:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <UART_SetConfig+0x510>)
 800aa2a:	617b      	str	r3, [r7, #20]
        break;
 800aa2c:	e00c      	b.n	800aa48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa2e:	f7fd ff27 	bl	8008880 <HAL_RCC_GetSysClockFreq>
 800aa32:	6178      	str	r0, [r7, #20]
        break;
 800aa34:	e008      	b.n	800aa48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa3a:	617b      	str	r3, [r7, #20]
        break;
 800aa3c:	e004      	b.n	800aa48 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	76bb      	strb	r3, [r7, #26]
        break;
 800aa46:	bf00      	nop
    }

    if (pclk != 0U)
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d018      	beq.n	800aa80 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	085a      	lsrs	r2, r3, #1
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	441a      	add	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b0f      	cmp	r3, #15
 800aa66:	d909      	bls.n	800aa7c <UART_SetConfig+0x4f4>
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa6e:	d205      	bcs.n	800aa7c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	60da      	str	r2, [r3, #12]
 800aa7a:	e001      	b.n	800aa80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aa8c:	7ebb      	ldrb	r3, [r7, #26]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3720      	adds	r7, #32
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bdb0      	pop	{r4, r5, r7, pc}
 800aa96:	bf00      	nop
 800aa98:	00f42400 	.word	0x00f42400

0800aa9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00a      	beq.n	800aac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	f003 0302 	and.w	r3, r3, #2
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00a      	beq.n	800aae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00a      	beq.n	800ab0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	f003 0308 	and.w	r3, r3, #8
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	f003 0310 	and.w	r3, r3, #16
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00a      	beq.n	800ab4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01a      	beq.n	800abb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab9a:	d10a      	bne.n	800abb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	605a      	str	r2, [r3, #4]
  }
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af02      	add	r7, sp, #8
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abf0:	f7fb fbf4 	bl	80063dc <HAL_GetTick>
 800abf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0308 	and.w	r3, r3, #8
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d10e      	bne.n	800ac22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f82d 	bl	800ac72 <UART_WaitOnFlagUntilTimeout>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e023      	b.n	800ac6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0304 	and.w	r3, r3, #4
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d10e      	bne.n	800ac4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f817 	bl	800ac72 <UART_WaitOnFlagUntilTimeout>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e00d      	b.n	800ac6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2220      	movs	r2, #32
 800ac52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2220      	movs	r2, #32
 800ac58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b09c      	sub	sp, #112	; 0x70
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	60f8      	str	r0, [r7, #12]
 800ac7a:	60b9      	str	r1, [r7, #8]
 800ac7c:	603b      	str	r3, [r7, #0]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac82:	e0a5      	b.n	800add0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	f000 80a1 	beq.w	800add0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8e:	f7fb fba5 	bl	80063dc <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d13e      	bne.n	800ad22 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800acb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acb8:	667b      	str	r3, [r7, #100]	; 0x64
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800acd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e6      	bne.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	663b      	str	r3, [r7, #96]	; 0x60
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acf6:	64ba      	str	r2, [r7, #72]	; 0x48
 800acf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e5      	bne.n	800acd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2220      	movs	r2, #32
 800ad14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e067      	b.n	800adf2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0304 	and.w	r3, r3, #4
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d04f      	beq.n	800add0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad3e:	d147      	bne.n	800add0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad48:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	e853 3f00 	ldrex	r3, [r3]
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	461a      	mov	r2, r3
 800ad66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad70:	e841 2300 	strex	r3, r2, [r1]
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e6      	bne.n	800ad4a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3308      	adds	r3, #8
 800ad82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	e853 3f00 	ldrex	r3, [r3]
 800ad8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f023 0301 	bic.w	r3, r3, #1
 800ad92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3308      	adds	r3, #8
 800ad9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad9c:	623a      	str	r2, [r7, #32]
 800ad9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	69f9      	ldr	r1, [r7, #28]
 800ada2:	6a3a      	ldr	r2, [r7, #32]
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	61bb      	str	r3, [r7, #24]
   return(result);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e5      	bne.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	e010      	b.n	800adf2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	69da      	ldr	r2, [r3, #28]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	4013      	ands	r3, r2
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	429a      	cmp	r2, r3
 800adde:	bf0c      	ite	eq
 800ade0:	2301      	moveq	r3, #1
 800ade2:	2300      	movne	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	461a      	mov	r2, r3
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	429a      	cmp	r2, r3
 800adec:	f43f af4a 	beq.w	800ac84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3770      	adds	r7, #112	; 0x70
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b096      	sub	sp, #88	; 0x58
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	4613      	mov	r3, r2
 800ae08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	88fa      	ldrh	r2, [r7, #6]
 800ae14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2222      	movs	r2, #34	; 0x22
 800ae24:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d02b      	beq.n	800ae86 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae32:	4a42      	ldr	r2, [pc, #264]	; (800af3c <UART_Start_Receive_DMA+0x140>)
 800ae34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae3a:	4a41      	ldr	r2, [pc, #260]	; (800af40 <UART_Start_Receive_DMA+0x144>)
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	4a40      	ldr	r2, [pc, #256]	; (800af44 <UART_Start_Receive_DMA+0x148>)
 800ae44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3324      	adds	r3, #36	; 0x24
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5e:	461a      	mov	r2, r3
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	f7fb fd7b 	bl	800695c <HAL_DMA_Start_IT>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2210      	movs	r2, #16
 800ae70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e055      	b.n	800af32 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d018      	beq.n	800aec8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeaa:	657b      	str	r3, [r7, #84]	; 0x54
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeb6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aeba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e6      	bne.n	800ae96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3308      	adds	r3, #8
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	e853 3f00 	ldrex	r3, [r3]
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	653b      	str	r3, [r7, #80]	; 0x50
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3308      	adds	r3, #8
 800aee6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aee8:	637a      	str	r2, [r7, #52]	; 0x34
 800aeea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aeee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aef0:	e841 2300 	strex	r3, r2, [r1]
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e5      	bne.n	800aec8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	e853 3f00 	ldrex	r3, [r3]
 800af0a:	613b      	str	r3, [r7, #16]
   return(result);
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af1c:	623a      	str	r2, [r7, #32]
 800af1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	6a3a      	ldr	r2, [r7, #32]
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	61bb      	str	r3, [r7, #24]
   return(result);
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e5      	bne.n	800aefc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3758      	adds	r7, #88	; 0x58
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	0800b05b 	.word	0x0800b05b
 800af40:	0800b17f 	.word	0x0800b17f
 800af44:	0800b1b7 	.word	0x0800b1b7

0800af48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b089      	sub	sp, #36	; 0x24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af64:	61fb      	str	r3, [r7, #28]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	6979      	ldr	r1, [r7, #20]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	613b      	str	r3, [r7, #16]
   return(result);
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e6      	bne.n	800af50 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	679a      	str	r2, [r3, #120]	; 0x78
}
 800af88:	bf00      	nop
 800af8a:	3724      	adds	r7, #36	; 0x24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b095      	sub	sp, #84	; 0x54
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afba:	643b      	str	r3, [r7, #64]	; 0x40
 800afbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e6      	bne.n	800af9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3308      	adds	r3, #8
 800afd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	f023 0301 	bic.w	r3, r3, #1
 800afe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3308      	adds	r3, #8
 800afec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff6:	e841 2300 	strex	r3, r2, [r1]
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1e5      	bne.n	800afce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b006:	2b01      	cmp	r3, #1
 800b008:	d118      	bne.n	800b03c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	e853 3f00 	ldrex	r3, [r3]
 800b016:	60bb      	str	r3, [r7, #8]
   return(result);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f023 0310 	bic.w	r3, r3, #16
 800b01e:	647b      	str	r3, [r7, #68]	; 0x44
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b028:	61bb      	str	r3, [r7, #24]
 800b02a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	6979      	ldr	r1, [r7, #20]
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	613b      	str	r3, [r7, #16]
   return(result);
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e6      	bne.n	800b00a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b04e:	bf00      	nop
 800b050:	3754      	adds	r7, #84	; 0x54
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b09c      	sub	sp, #112	; 0x70
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d170      	bne.n	800b158 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b078:	2200      	movs	r2, #0
 800b07a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b08c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b08e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b092:	66bb      	str	r3, [r7, #104]	; 0x68
 800b094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b09c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b09e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e6      	bne.n	800b07e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	e853 3f00 	ldrex	r3, [r3]
 800b0be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c2:	f023 0301 	bic.w	r3, r3, #1
 800b0c6:	667b      	str	r3, [r7, #100]	; 0x64
 800b0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0d0:	647a      	str	r2, [r7, #68]	; 0x44
 800b0d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0d8:	e841 2300 	strex	r3, r2, [r1]
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1e5      	bne.n	800b0b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0fa:	663b      	str	r3, [r7, #96]	; 0x60
 800b0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3308      	adds	r3, #8
 800b102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b104:	633a      	str	r2, [r7, #48]	; 0x30
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e5      	bne.n	800b0e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b11a:	2220      	movs	r2, #32
 800b11c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b122:	2b01      	cmp	r3, #1
 800b124:	d118      	bne.n	800b158 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	60fb      	str	r3, [r7, #12]
   return(result);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0310 	bic.w	r3, r3, #16
 800b13a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	617b      	str	r3, [r7, #20]
   return(result);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e6      	bne.n	800b126 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b15a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d107      	bne.n	800b170 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b162:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b166:	4619      	mov	r1, r3
 800b168:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b16a:	f7ff fa01 	bl	800a570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b16e:	e002      	b.n	800b176 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b170:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b172:	f7ff f9df 	bl	800a534 <HAL_UART_RxCpltCallback>
}
 800b176:	bf00      	nop
 800b178:	3770      	adds	r7, #112	; 0x70
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b190:	2b01      	cmp	r3, #1
 800b192:	d109      	bne.n	800b1a8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff f9e5 	bl	800a570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1a6:	e002      	b.n	800b1ae <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff f9cd 	bl	800a548 <HAL_UART_RxHalfCpltCallback>
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b086      	sub	sp, #24
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1da:	2b80      	cmp	r3, #128	; 0x80
 800b1dc:	d109      	bne.n	800b1f2 <UART_DMAError+0x3c>
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b21      	cmp	r3, #33	; 0x21
 800b1e2:	d106      	bne.n	800b1f2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b1ec:	6978      	ldr	r0, [r7, #20]
 800b1ee:	f7ff feab 	bl	800af48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fc:	2b40      	cmp	r3, #64	; 0x40
 800b1fe:	d109      	bne.n	800b214 <UART_DMAError+0x5e>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b22      	cmp	r3, #34	; 0x22
 800b204:	d106      	bne.n	800b214 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b20e:	6978      	ldr	r0, [r7, #20]
 800b210:	f7ff fec0 	bl	800af94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b21a:	f043 0210 	orr.w	r2, r3, #16
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b224:	6978      	ldr	r0, [r7, #20]
 800b226:	f7ff f999 	bl	800a55c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b22a:	bf00      	nop
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <DataHist_parameters>:
 800b234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b238:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b23a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b23c:	7020      	strb	r0, [r4, #0]
 800b23e:	6808      	ldr	r0, [r1, #0]
 800b240:	6060      	str	r0, [r4, #4]
 800b242:	6848      	ldr	r0, [r1, #4]
 800b244:	60a0      	str	r0, [r4, #8]
 800b246:	6888      	ldr	r0, [r1, #8]
 800b248:	60e0      	str	r0, [r4, #12]
 800b24a:	68c8      	ldr	r0, [r1, #12]
 800b24c:	6120      	str	r0, [r4, #16]
 800b24e:	6908      	ldr	r0, [r1, #16]
 800b250:	6160      	str	r0, [r4, #20]
 800b252:	6948      	ldr	r0, [r1, #20]
 800b254:	61a0      	str	r0, [r4, #24]
 800b256:	6988      	ldr	r0, [r1, #24]
 800b258:	61e0      	str	r0, [r4, #28]
 800b25a:	69c8      	ldr	r0, [r1, #28]
 800b25c:	6220      	str	r0, [r4, #32]
 800b25e:	6a09      	ldr	r1, [r1, #32]
 800b260:	6261      	str	r1, [r4, #36]	; 0x24
 800b262:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b266:	8811      	ldrh	r1, [r2, #0]
 800b268:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b26c:	8521      	strh	r1, [r4, #40]	; 0x28
 800b26e:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b272:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b276:	f04f 0e00 	mov.w	lr, #0
 800b27a:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b27e:	4641      	mov	r1, r8
 800b280:	f852 0b04 	ldr.w	r0, [r2], #4
 800b284:	f841 0b04 	str.w	r0, [r1], #4
 800b288:	4562      	cmp	r2, ip
 800b28a:	d1f9      	bne.n	800b280 <DataHist_parameters+0x4c>
 800b28c:	f10e 0e1e 	add.w	lr, lr, #30
 800b290:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b294:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b298:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b29c:	d1ed      	bne.n	800b27a <DataHist_parameters+0x46>
 800b29e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b2a2:	881a      	ldrh	r2, [r3, #0]
 800b2a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b2a8:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b2ac:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b2b0:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b2b4:	f04f 0c00 	mov.w	ip, #0
 800b2b8:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b2bc:	4672      	mov	r2, lr
 800b2be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b2c2:	f842 1b04 	str.w	r1, [r2], #4
 800b2c6:	4283      	cmp	r3, r0
 800b2c8:	d1f9      	bne.n	800b2be <DataHist_parameters+0x8a>
 800b2ca:	f10c 0c1e 	add.w	ip, ip, #30
 800b2ce:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b2d2:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b2d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b2da:	d1ed      	bne.n	800b2b8 <DataHist_parameters+0x84>
 800b2dc:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b2e0:	883b      	ldrh	r3, [r7, #0]
 800b2e2:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b2e6:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b2ea:	3780      	adds	r7, #128	; 0x80
 800b2ec:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b2f6:	4662      	mov	r2, ip
 800b2f8:	f853 1b04 	ldr.w	r1, [r3], #4
 800b2fc:	f842 1b04 	str.w	r1, [r2], #4
 800b300:	42bb      	cmp	r3, r7
 800b302:	d1f9      	bne.n	800b2f8 <DataHist_parameters+0xc4>
 800b304:	301e      	adds	r0, #30
 800b306:	285a      	cmp	r0, #90	; 0x5a
 800b308:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b30c:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b310:	d1ef      	bne.n	800b2f2 <DataHist_parameters+0xbe>
 800b312:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b316:	8833      	ldrh	r3, [r6, #0]
 800b318:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b31c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b320:	3680      	adds	r6, #128	; 0x80
 800b322:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b326:	2000      	movs	r0, #0
 800b328:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b32c:	463a      	mov	r2, r7
 800b32e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b332:	f842 1b04 	str.w	r1, [r2], #4
 800b336:	429e      	cmp	r6, r3
 800b338:	d1f9      	bne.n	800b32e <DataHist_parameters+0xfa>
 800b33a:	301e      	adds	r0, #30
 800b33c:	285a      	cmp	r0, #90	; 0x5a
 800b33e:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b342:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b346:	d1ef      	bne.n	800b328 <DataHist_parameters+0xf4>
 800b348:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b34c:	69aa      	ldr	r2, [r5, #24]
 800b34e:	f8c3 c004 	str.w	ip, [r3, #4]
 800b352:	782b      	ldrb	r3, [r5, #0]
 800b354:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b358:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b35c:	619a      	str	r2, [r3, #24]
 800b35e:	686a      	ldr	r2, [r5, #4]
 800b360:	605a      	str	r2, [r3, #4]
 800b362:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b366:	68a9      	ldr	r1, [r5, #8]
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b36e:	68e9      	ldr	r1, [r5, #12]
 800b370:	6011      	str	r1, [r2, #0]
 800b372:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b376:	6929      	ldr	r1, [r5, #16]
 800b378:	6011      	str	r1, [r2, #0]
 800b37a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b37e:	6969      	ldr	r1, [r5, #20]
 800b380:	6011      	str	r1, [r2, #0]
 800b382:	69ea      	ldr	r2, [r5, #28]
 800b384:	61da      	str	r2, [r3, #28]
 800b386:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b38a:	6a2a      	ldr	r2, [r5, #32]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b392:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b39a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b3a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3aa:	bf00      	nop

0800b3ac <rotVect>:
 800b3ac:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b3b0:	ed92 5a01 	vldr	s10, [r2, #4]
 800b3b4:	edd2 5a00 	vldr	s11, [r2]
 800b3b8:	ed92 6a02 	vldr	s12, [r2, #8]
 800b3bc:	ee07 3a90 	vmov	s15, r3
 800b3c0:	f991 3000 	ldrsb.w	r3, [r1]
 800b3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3c8:	ee06 3a90 	vmov	s13, r3
 800b3cc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b3d0:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b3d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b3d8:	ee07 3a10 	vmov	s14, r3
 800b3dc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b3e4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b3e8:	edc0 7a00 	vstr	s15, [r0]
 800b3ec:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b3f0:	ed92 5a01 	vldr	s10, [r2, #4]
 800b3f4:	edd2 5a00 	vldr	s11, [r2]
 800b3f8:	ed92 6a02 	vldr	s12, [r2, #8]
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b408:	ee06 3a90 	vmov	s13, r3
 800b40c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b410:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b414:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b418:	ee07 3a10 	vmov	s14, r3
 800b41c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b424:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b428:	edc0 7a01 	vstr	s15, [r0, #4]
 800b42c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b430:	ed92 5a01 	vldr	s10, [r2, #4]
 800b434:	edd2 5a00 	vldr	s11, [r2]
 800b438:	ed92 6a02 	vldr	s12, [r2, #8]
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b448:	ee06 3a90 	vmov	s13, r3
 800b44c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b450:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b454:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b458:	ee07 3a10 	vmov	s14, r3
 800b45c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b464:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b468:	edc0 7a02 	vstr	s15, [r0, #8]
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop

0800b470 <findAxis>:
 800b470:	f990 3000 	ldrsb.w	r3, [r0]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d027      	beq.n	800b4c8 <findAxis+0x58>
 800b478:	3301      	adds	r3, #1
 800b47a:	d00e      	beq.n	800b49a <findAxis+0x2a>
 800b47c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d053      	beq.n	800b52c <findAxis+0xbc>
 800b484:	3301      	adds	r3, #1
 800b486:	d048      	beq.n	800b51a <findAxis+0xaa>
 800b488:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d053      	beq.n	800b538 <findAxis+0xc8>
 800b490:	3301      	adds	r3, #1
 800b492:	d104      	bne.n	800b49e <findAxis+0x2e>
 800b494:	2364      	movs	r3, #100	; 0x64
 800b496:	700b      	strb	r3, [r1, #0]
 800b498:	e001      	b.n	800b49e <findAxis+0x2e>
 800b49a:	2377      	movs	r3, #119	; 0x77
 800b49c:	700b      	strb	r3, [r1, #0]
 800b49e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d016      	beq.n	800b4d4 <findAxis+0x64>
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	d02e      	beq.n	800b508 <findAxis+0x98>
 800b4aa:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d039      	beq.n	800b526 <findAxis+0xb6>
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	d034      	beq.n	800b520 <findAxis+0xb0>
 800b4b6:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d03f      	beq.n	800b53e <findAxis+0xce>
 800b4be:	3301      	adds	r3, #1
 800b4c0:	d10a      	bne.n	800b4d8 <findAxis+0x68>
 800b4c2:	2364      	movs	r3, #100	; 0x64
 800b4c4:	704b      	strb	r3, [r1, #1]
 800b4c6:	e007      	b.n	800b4d8 <findAxis+0x68>
 800b4c8:	2365      	movs	r3, #101	; 0x65
 800b4ca:	700b      	strb	r3, [r1, #0]
 800b4cc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d1e8      	bne.n	800b4a6 <findAxis+0x36>
 800b4d4:	2365      	movs	r3, #101	; 0x65
 800b4d6:	704b      	strb	r3, [r1, #1]
 800b4d8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d010      	beq.n	800b502 <findAxis+0x92>
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	d014      	beq.n	800b50e <findAxis+0x9e>
 800b4e4:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d022      	beq.n	800b532 <findAxis+0xc2>
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	d011      	beq.n	800b514 <findAxis+0xa4>
 800b4f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d025      	beq.n	800b544 <findAxis+0xd4>
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	bf04      	itt	eq
 800b4fc:	2364      	moveq	r3, #100	; 0x64
 800b4fe:	708b      	strbeq	r3, [r1, #2]
 800b500:	4770      	bx	lr
 800b502:	2365      	movs	r3, #101	; 0x65
 800b504:	708b      	strb	r3, [r1, #2]
 800b506:	4770      	bx	lr
 800b508:	2377      	movs	r3, #119	; 0x77
 800b50a:	704b      	strb	r3, [r1, #1]
 800b50c:	e7e4      	b.n	800b4d8 <findAxis+0x68>
 800b50e:	2377      	movs	r3, #119	; 0x77
 800b510:	708b      	strb	r3, [r1, #2]
 800b512:	4770      	bx	lr
 800b514:	2373      	movs	r3, #115	; 0x73
 800b516:	708b      	strb	r3, [r1, #2]
 800b518:	4770      	bx	lr
 800b51a:	2373      	movs	r3, #115	; 0x73
 800b51c:	700b      	strb	r3, [r1, #0]
 800b51e:	e7be      	b.n	800b49e <findAxis+0x2e>
 800b520:	2373      	movs	r3, #115	; 0x73
 800b522:	704b      	strb	r3, [r1, #1]
 800b524:	e7d8      	b.n	800b4d8 <findAxis+0x68>
 800b526:	236e      	movs	r3, #110	; 0x6e
 800b528:	704b      	strb	r3, [r1, #1]
 800b52a:	e7d5      	b.n	800b4d8 <findAxis+0x68>
 800b52c:	236e      	movs	r3, #110	; 0x6e
 800b52e:	700b      	strb	r3, [r1, #0]
 800b530:	e7b5      	b.n	800b49e <findAxis+0x2e>
 800b532:	236e      	movs	r3, #110	; 0x6e
 800b534:	708b      	strb	r3, [r1, #2]
 800b536:	4770      	bx	lr
 800b538:	2375      	movs	r3, #117	; 0x75
 800b53a:	700b      	strb	r3, [r1, #0]
 800b53c:	e7af      	b.n	800b49e <findAxis+0x2e>
 800b53e:	2375      	movs	r3, #117	; 0x75
 800b540:	704b      	strb	r3, [r1, #1]
 800b542:	e7c9      	b.n	800b4d8 <findAxis+0x68>
 800b544:	2375      	movs	r3, #117	; 0x75
 800b546:	708b      	strb	r3, [r1, #2]
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	0000      	movs	r0, r0
	...

0800b550 <findDirection>:
 800b550:	b5d0      	push	{r4, r6, r7, lr}
 800b552:	ed2d 8b04 	vpush	{d8-d9}
 800b556:	eef0 8ac0 	vabs.f32	s17, s0
 800b55a:	eeb0 8ae0 	vabs.f32	s16, s1
 800b55e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b566:	4604      	mov	r4, r0
 800b568:	eeb0 9ac1 	vabs.f32	s18, s2
 800b56c:	dd36      	ble.n	800b5dc <findDirection+0x8c>
 800b56e:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b576:	dd31      	ble.n	800b5dc <findDirection+0x8c>
 800b578:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b580:	ee18 0a90 	vmov	r0, s17
 800b584:	f340 8094 	ble.w	800b6b0 <findDirection+0x160>
 800b588:	f7f4 ff82 	bl	8000490 <__aeabi_f2d>
 800b58c:	4606      	mov	r6, r0
 800b58e:	ee18 0a10 	vmov	r0, s16
 800b592:	460f      	mov	r7, r1
 800b594:	f7f4 ff7c 	bl	8000490 <__aeabi_f2d>
 800b598:	a387      	add	r3, pc, #540	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	f7f4 ffcf 	bl	8000540 <__aeabi_dmul>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 fa59 	bl	8000a60 <__aeabi_dcmpgt>
 800b5ae:	b188      	cbz	r0, 800b5d4 <findDirection+0x84>
 800b5b0:	ee19 0a10 	vmov	r0, s18
 800b5b4:	f7f4 ff6c 	bl	8000490 <__aeabi_f2d>
 800b5b8:	a37f      	add	r3, pc, #508	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5be:	f7f4 ffbf 	bl	8000540 <__aeabi_dmul>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f5 fa49 	bl	8000a60 <__aeabi_dcmpgt>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	bf18      	it	ne
 800b5d2:	2404      	movne	r4, #4
 800b5d4:	ecbd 8b04 	vpop	{d8-d9}
 800b5d8:	4620      	mov	r0, r4
 800b5da:	bdd0      	pop	{r4, r6, r7, pc}
 800b5dc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e4:	dd32      	ble.n	800b64c <findDirection+0xfc>
 800b5e6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ee:	ee18 0a10 	vmov	r0, s16
 800b5f2:	f340 8086 	ble.w	800b702 <findDirection+0x1b2>
 800b5f6:	f7f4 ff4b 	bl	8000490 <__aeabi_f2d>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	ee18 0a90 	vmov	r0, s17
 800b600:	460f      	mov	r7, r1
 800b602:	f7f4 ff45 	bl	8000490 <__aeabi_f2d>
 800b606:	a36c      	add	r3, pc, #432	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f4 ff98 	bl	8000540 <__aeabi_dmul>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	4630      	mov	r0, r6
 800b616:	4639      	mov	r1, r7
 800b618:	f7f5 fa22 	bl	8000a60 <__aeabi_dcmpgt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d0d9      	beq.n	800b5d4 <findDirection+0x84>
 800b620:	ee19 0a10 	vmov	r0, s18
 800b624:	f7f4 ff34 	bl	8000490 <__aeabi_f2d>
 800b628:	a363      	add	r3, pc, #396	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 ff87 	bl	8000540 <__aeabi_dmul>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4630      	mov	r0, r6
 800b638:	4639      	mov	r1, r7
 800b63a:	f7f5 fa11 	bl	8000a60 <__aeabi_dcmpgt>
 800b63e:	ecbd 8b04 	vpop	{d8-d9}
 800b642:	2800      	cmp	r0, #0
 800b644:	bf18      	it	ne
 800b646:	2401      	movne	r4, #1
 800b648:	4620      	mov	r0, r4
 800b64a:	bdd0      	pop	{r4, r6, r7, pc}
 800b64c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b654:	ee19 0a10 	vmov	r0, s18
 800b658:	dd7f      	ble.n	800b75a <findDirection+0x20a>
 800b65a:	f7f4 ff19 	bl	8000490 <__aeabi_f2d>
 800b65e:	4606      	mov	r6, r0
 800b660:	ee18 0a10 	vmov	r0, s16
 800b664:	460f      	mov	r7, r1
 800b666:	f7f4 ff13 	bl	8000490 <__aeabi_f2d>
 800b66a:	a353      	add	r3, pc, #332	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 ff66 	bl	8000540 <__aeabi_dmul>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f5 f9f0 	bl	8000a60 <__aeabi_dcmpgt>
 800b680:	2800      	cmp	r0, #0
 800b682:	d0a7      	beq.n	800b5d4 <findDirection+0x84>
 800b684:	ee18 0a90 	vmov	r0, s17
 800b688:	f7f4 ff02 	bl	8000490 <__aeabi_f2d>
 800b68c:	a34a      	add	r3, pc, #296	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 ff55 	bl	8000540 <__aeabi_dmul>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4630      	mov	r0, r6
 800b69c:	4639      	mov	r1, r7
 800b69e:	f7f5 f9df 	bl	8000a60 <__aeabi_dcmpgt>
 800b6a2:	ecbd 8b04 	vpop	{d8-d9}
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	bf18      	it	ne
 800b6aa:	2400      	movne	r4, #0
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	bdd0      	pop	{r4, r6, r7, pc}
 800b6b0:	f7f4 feee 	bl	8000490 <__aeabi_f2d>
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	ee18 0a10 	vmov	r0, s16
 800b6ba:	460f      	mov	r7, r1
 800b6bc:	f7f4 fee8 	bl	8000490 <__aeabi_f2d>
 800b6c0:	a33d      	add	r3, pc, #244	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f4 ff3b 	bl	8000540 <__aeabi_dmul>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f5 f9c5 	bl	8000a60 <__aeabi_dcmpgt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f43f af7c 	beq.w	800b5d4 <findDirection+0x84>
 800b6dc:	ee19 0a10 	vmov	r0, s18
 800b6e0:	f7f4 fed6 	bl	8000490 <__aeabi_f2d>
 800b6e4:	a334      	add	r3, pc, #208	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 ff29 	bl	8000540 <__aeabi_dmul>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	f7f5 f9b3 	bl	8000a60 <__aeabi_dcmpgt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	bf18      	it	ne
 800b6fe:	2405      	movne	r4, #5
 800b700:	e768      	b.n	800b5d4 <findDirection+0x84>
 800b702:	f7f4 fec5 	bl	8000490 <__aeabi_f2d>
 800b706:	4606      	mov	r6, r0
 800b708:	ee18 0a90 	vmov	r0, s17
 800b70c:	460f      	mov	r7, r1
 800b70e:	f7f4 febf 	bl	8000490 <__aeabi_f2d>
 800b712:	a329      	add	r3, pc, #164	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f4 ff12 	bl	8000540 <__aeabi_dmul>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f5 f99c 	bl	8000a60 <__aeabi_dcmpgt>
 800b728:	2800      	cmp	r0, #0
 800b72a:	f43f af53 	beq.w	800b5d4 <findDirection+0x84>
 800b72e:	ee19 0a10 	vmov	r0, s18
 800b732:	f7f4 fead 	bl	8000490 <__aeabi_f2d>
 800b736:	a320      	add	r3, pc, #128	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 ff00 	bl	8000540 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4630      	mov	r0, r6
 800b746:	4639      	mov	r1, r7
 800b748:	f7f5 f98a 	bl	8000a60 <__aeabi_dcmpgt>
 800b74c:	ecbd 8b04 	vpop	{d8-d9}
 800b750:	2800      	cmp	r0, #0
 800b752:	bf18      	it	ne
 800b754:	2403      	movne	r4, #3
 800b756:	4620      	mov	r0, r4
 800b758:	bdd0      	pop	{r4, r6, r7, pc}
 800b75a:	f7f4 fe99 	bl	8000490 <__aeabi_f2d>
 800b75e:	4606      	mov	r6, r0
 800b760:	ee18 0a10 	vmov	r0, s16
 800b764:	460f      	mov	r7, r1
 800b766:	f7f4 fe93 	bl	8000490 <__aeabi_f2d>
 800b76a:	a313      	add	r3, pc, #76	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 fee6 	bl	8000540 <__aeabi_dmul>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f5 f970 	bl	8000a60 <__aeabi_dcmpgt>
 800b780:	2800      	cmp	r0, #0
 800b782:	f43f af27 	beq.w	800b5d4 <findDirection+0x84>
 800b786:	ee18 0a90 	vmov	r0, s17
 800b78a:	f7f4 fe81 	bl	8000490 <__aeabi_f2d>
 800b78e:	a30a      	add	r3, pc, #40	; (adr r3, 800b7b8 <findDirection+0x268>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fed4 	bl	8000540 <__aeabi_dmul>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f5 f95e 	bl	8000a60 <__aeabi_dcmpgt>
 800b7a4:	ecbd 8b04 	vpop	{d8-d9}
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	bf18      	it	ne
 800b7ac:	2402      	movne	r4, #2
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	bdd0      	pop	{r4, r6, r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	f3af 8000 	nop.w
 800b7b8:	e0000000 	.word	0xe0000000
 800b7bc:	3ff6b851 	.word	0x3ff6b851

0800b7c0 <updateOrientation>:
 800b7c0:	b410      	push	{r4}
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	6043      	str	r3, [r0, #4]
 800b7c8:	7203      	strb	r3, [r0, #8]
 800b7ca:	780c      	ldrb	r4, [r1, #0]
 800b7cc:	784a      	ldrb	r2, [r1, #1]
 800b7ce:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b7d2:	2b17      	cmp	r3, #23
 800b7d4:	bf98      	it	ls
 800b7d6:	3420      	addls	r4, #32
 800b7d8:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b7dc:	bf98      	it	ls
 800b7de:	b2e4      	uxtbls	r4, r4
 800b7e0:	2b17      	cmp	r3, #23
 800b7e2:	788b      	ldrb	r3, [r1, #2]
 800b7e4:	bf98      	it	ls
 800b7e6:	3220      	addls	r2, #32
 800b7e8:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b7ec:	bf98      	it	ls
 800b7ee:	b2d2      	uxtbls	r2, r2
 800b7f0:	2917      	cmp	r1, #23
 800b7f2:	bf98      	it	ls
 800b7f4:	3320      	addls	r3, #32
 800b7f6:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b7fa:	bf98      	it	ls
 800b7fc:	b2db      	uxtbls	r3, r3
 800b7fe:	2c13      	cmp	r4, #19
 800b800:	d80d      	bhi.n	800b81e <updateOrientation+0x5e>
 800b802:	e8df f004 	tbb	[pc, r4]
 800b806:	0a36      	.short	0x0a36
 800b808:	0c0c0c0c 	.word	0x0c0c0c0c
 800b80c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b810:	0c0c0c39 	.word	0x0c0c0c39
 800b814:	3f0c3c0c 	.word	0x3f0c3c0c
 800b818:	420c      	.short	0x420c
 800b81a:	2101      	movs	r1, #1
 800b81c:	7001      	strb	r1, [r0, #0]
 800b81e:	3a64      	subs	r2, #100	; 0x64
 800b820:	2a13      	cmp	r2, #19
 800b822:	d80d      	bhi.n	800b840 <updateOrientation+0x80>
 800b824:	e8df f002 	tbb	[pc, r2]
 800b828:	0c0c0a34 	.word	0x0c0c0a34
 800b82c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b830:	0c370c0c 	.word	0x0c370c0c
 800b834:	3a0c0c0c 	.word	0x3a0c0c0c
 800b838:	400c3d0c 	.word	0x400c3d0c
 800b83c:	2201      	movs	r2, #1
 800b83e:	7042      	strb	r2, [r0, #1]
 800b840:	3b64      	subs	r3, #100	; 0x64
 800b842:	2b13      	cmp	r3, #19
 800b844:	d80d      	bhi.n	800b862 <updateOrientation+0xa2>
 800b846:	e8df f003 	tbb	[pc, r3]
 800b84a:	320a      	.short	0x320a
 800b84c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b850:	0c0c0c0c 	.word	0x0c0c0c0c
 800b854:	0c0c0c37 	.word	0x0c0c0c37
 800b858:	410c3c0c 	.word	0x410c3c0c
 800b85c:	0f0c      	.short	0x0f0c
 800b85e:	23ff      	movs	r3, #255	; 0xff
 800b860:	7203      	strb	r3, [r0, #8]
 800b862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	23ff      	movs	r3, #255	; 0xff
 800b86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86e:	7083      	strb	r3, [r0, #2]
 800b870:	4770      	bx	lr
 800b872:	21ff      	movs	r1, #255	; 0xff
 800b874:	7181      	strb	r1, [r0, #6]
 800b876:	e7d2      	b.n	800b81e <updateOrientation+0x5e>
 800b878:	2101      	movs	r1, #1
 800b87a:	70c1      	strb	r1, [r0, #3]
 800b87c:	e7cf      	b.n	800b81e <updateOrientation+0x5e>
 800b87e:	21ff      	movs	r1, #255	; 0xff
 800b880:	70c1      	strb	r1, [r0, #3]
 800b882:	e7cc      	b.n	800b81e <updateOrientation+0x5e>
 800b884:	2101      	movs	r1, #1
 800b886:	7181      	strb	r1, [r0, #6]
 800b888:	e7c9      	b.n	800b81e <updateOrientation+0x5e>
 800b88a:	21ff      	movs	r1, #255	; 0xff
 800b88c:	7001      	strb	r1, [r0, #0]
 800b88e:	e7c6      	b.n	800b81e <updateOrientation+0x5e>
 800b890:	22ff      	movs	r2, #255	; 0xff
 800b892:	71c2      	strb	r2, [r0, #7]
 800b894:	e7d4      	b.n	800b840 <updateOrientation+0x80>
 800b896:	2201      	movs	r2, #1
 800b898:	7102      	strb	r2, [r0, #4]
 800b89a:	e7d1      	b.n	800b840 <updateOrientation+0x80>
 800b89c:	22ff      	movs	r2, #255	; 0xff
 800b89e:	7102      	strb	r2, [r0, #4]
 800b8a0:	e7ce      	b.n	800b840 <updateOrientation+0x80>
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	71c2      	strb	r2, [r0, #7]
 800b8a6:	e7cb      	b.n	800b840 <updateOrientation+0x80>
 800b8a8:	22ff      	movs	r2, #255	; 0xff
 800b8aa:	7042      	strb	r2, [r0, #1]
 800b8ac:	e7c8      	b.n	800b840 <updateOrientation+0x80>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b4:	7083      	strb	r3, [r0, #2]
 800b8b6:	4770      	bx	lr
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8be:	7143      	strb	r3, [r0, #5]
 800b8c0:	4770      	bx	lr
 800b8c2:	23ff      	movs	r3, #255	; 0xff
 800b8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8c8:	7143      	strb	r3, [r0, #5]
 800b8ca:	4770      	bx	lr
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d2:	7203      	strb	r3, [r0, #8]
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop

0800b8d8 <qmult>:
 800b8d8:	ed91 2a03 	vldr	s4, [r1, #12]
 800b8dc:	ed90 3a01 	vldr	s6, [r0, #4]
 800b8e0:	edd0 5a02 	vldr	s11, [r0, #8]
 800b8e4:	edd1 4a01 	vldr	s9, [r1, #4]
 800b8e8:	ed90 4a00 	vldr	s8, [r0]
 800b8ec:	edd1 3a00 	vldr	s7, [r1]
 800b8f0:	ed91 5a02 	vldr	s10, [r1, #8]
 800b8f4:	edd0 2a03 	vldr	s5, [r0, #12]
 800b8f8:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b8fc:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b900:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b904:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b908:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b90c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b910:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b914:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b918:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b91c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b920:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b924:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b928:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b92c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b930:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b934:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b938:	ed82 6a00 	vstr	s12, [r2]
 800b93c:	edc2 6a01 	vstr	s13, [r2, #4]
 800b940:	ed82 7a02 	vstr	s14, [r2, #8]
 800b944:	edc2 7a03 	vstr	s15, [r2, #12]
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop

0800b94c <MEMS_setMagIndexToOne>:
 800b94c:	291f      	cmp	r1, #31
 800b94e:	b430      	push	{r4, r5}
 800b950:	d920      	bls.n	800b994 <MEMS_setMagIndexToOne+0x48>
 800b952:	6885      	ldr	r5, [r0, #8]
 800b954:	3920      	subs	r1, #32
 800b956:	2401      	movs	r4, #1
 800b958:	fa04 f101 	lsl.w	r1, r4, r1
 800b95c:	ea21 0105 	bic.w	r1, r1, r5
 800b960:	4069      	eors	r1, r5
 800b962:	2a1f      	cmp	r2, #31
 800b964:	6081      	str	r1, [r0, #8]
 800b966:	d91f      	bls.n	800b9a8 <MEMS_setMagIndexToOne+0x5c>
 800b968:	6901      	ldr	r1, [r0, #16]
 800b96a:	f1a2 0420 	sub.w	r4, r2, #32
 800b96e:	2201      	movs	r2, #1
 800b970:	40a2      	lsls	r2, r4
 800b972:	ea22 0201 	bic.w	r2, r2, r1
 800b976:	404a      	eors	r2, r1
 800b978:	2b1f      	cmp	r3, #31
 800b97a:	6102      	str	r2, [r0, #16]
 800b97c:	d91e      	bls.n	800b9bc <MEMS_setMagIndexToOne+0x70>
 800b97e:	69c2      	ldr	r2, [r0, #28]
 800b980:	f1a3 0120 	sub.w	r1, r3, #32
 800b984:	2301      	movs	r3, #1
 800b986:	408b      	lsls	r3, r1
 800b988:	ea23 0302 	bic.w	r3, r3, r2
 800b98c:	4053      	eors	r3, r2
 800b98e:	bc30      	pop	{r4, r5}
 800b990:	61c3      	str	r3, [r0, #28]
 800b992:	4770      	bx	lr
 800b994:	68c5      	ldr	r5, [r0, #12]
 800b996:	2401      	movs	r4, #1
 800b998:	fa04 f101 	lsl.w	r1, r4, r1
 800b99c:	ea21 0105 	bic.w	r1, r1, r5
 800b9a0:	4069      	eors	r1, r5
 800b9a2:	2a1f      	cmp	r2, #31
 800b9a4:	60c1      	str	r1, [r0, #12]
 800b9a6:	d8df      	bhi.n	800b968 <MEMS_setMagIndexToOne+0x1c>
 800b9a8:	6944      	ldr	r4, [r0, #20]
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	fa01 f202 	lsl.w	r2, r1, r2
 800b9b0:	ea22 0204 	bic.w	r2, r2, r4
 800b9b4:	4062      	eors	r2, r4
 800b9b6:	2b1f      	cmp	r3, #31
 800b9b8:	6142      	str	r2, [r0, #20]
 800b9ba:	d8e0      	bhi.n	800b97e <MEMS_setMagIndexToOne+0x32>
 800b9bc:	6981      	ldr	r1, [r0, #24]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c4:	ea23 0301 	bic.w	r3, r3, r1
 800b9c8:	404b      	eors	r3, r1
 800b9ca:	bc30      	pop	{r4, r5}
 800b9cc:	6183      	str	r3, [r0, #24]
 800b9ce:	4770      	bx	lr

0800b9d0 <getRotationMatrix>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	2100      	movs	r1, #0
 800b9da:	2224      	movs	r2, #36	; 0x24
 800b9dc:	f00b fdf4 	bl	80175c8 <memset>
 800b9e0:	edd5 5a00 	vldr	s11, [r5]
 800b9e4:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bb0c <getRotationMatrix+0x13c>
 800b9e8:	edc0 5a02 	vstr	s11, [r0, #8]
 800b9ec:	ed95 7a01 	vldr	s14, [r5, #4]
 800b9f0:	ed80 7a05 	vstr	s14, [r0, #20]
 800b9f4:	ed95 5a02 	vldr	s10, [r5, #8]
 800b9f8:	ed80 5a08 	vstr	s10, [r0, #32]
 800b9fc:	ed94 4a02 	vldr	s8, [r4, #8]
 800ba00:	edd4 3a01 	vldr	s7, [r4, #4]
 800ba04:	edd4 4a00 	vldr	s9, [r4]
 800ba08:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800ba0c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800ba10:	eee3 7a85 	vfma.f32	s15, s7, s10
 800ba14:	4603      	mov	r3, r0
 800ba16:	eee4 6a87 	vfma.f32	s13, s9, s14
 800ba1a:	eeb0 7ae7 	vabs.f32	s14, s15
 800ba1e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800ba22:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800ba2e:	bfdc      	itt	le
 800ba30:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800ba34:	eeb0 7a43 	vmovle.f32	s14, s6
 800ba38:	eeb0 5ac6 	vabs.f32	s10, s12
 800ba3c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ba40:	edc0 6a06 	vstr	s13, [r0, #24]
 800ba44:	bfd4      	ite	le
 800ba46:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800ba4a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba52:	ed80 6a03 	vstr	s12, [r0, #12]
 800ba56:	edc0 7a00 	vstr	s15, [r0]
 800ba5a:	d447      	bmi.n	800baec <getRotationMatrix+0x11c>
 800ba5c:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800ba60:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800ba64:	eef0 5a66 	vmov.f32	s11, s13
 800ba68:	edd3 6a06 	vldr	s13, [r3, #24]
 800ba6c:	eeb0 5ae6 	vabs.f32	s10, s13
 800ba70:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800ba74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba78:	d543      	bpl.n	800bb02 <getRotationMatrix+0x132>
 800ba7a:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800ba7e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800ba82:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800ba86:	eeb0 7a45 	vmov.f32	s14, s10
 800ba8a:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800ba8e:	eef0 5a44 	vmov.f32	s11, s8
 800ba92:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800ba96:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800ba9a:	ee65 5a07 	vmul.f32	s11, s10, s14
 800ba9e:	edd3 3a08 	vldr	s7, [r3, #32]
 800baa2:	edd3 4a02 	vldr	s9, [r3, #8]
 800baa6:	ed93 4a05 	vldr	s8, [r3, #20]
 800baaa:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800baae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bab2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bab6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800baba:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800babe:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bac2:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bac6:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800baca:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bace:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bad2:	edc3 7a00 	vstr	s15, [r3]
 800bad6:	ed83 6a03 	vstr	s12, [r3, #12]
 800bada:	ed83 7a06 	vstr	s14, [r3, #24]
 800bade:	ed83 5a04 	vstr	s10, [r3, #16]
 800bae2:	edc3 5a01 	vstr	s11, [r3, #4]
 800bae6:	edc3 6a07 	vstr	s13, [r3, #28]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800baf0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800baf4:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800baf8:	eeb0 7a45 	vmov.f32	s14, s10
 800bafc:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bb00:	e7b2      	b.n	800ba68 <getRotationMatrix+0x98>
 800bb02:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bb06:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bb0a:	e7c2      	b.n	800ba92 <getRotationMatrix+0xc2>
 800bb0c:	00000000 	.word	0x00000000

0800bb10 <b_dcm2q>:
 800bb10:	ed90 5a08 	vldr	s10, [r0, #32]
 800bb14:	edd0 7a00 	vldr	s15, [r0]
 800bb18:	edd0 6a04 	vldr	s13, [r0, #16]
 800bb1c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bb20:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bb24:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bb28:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bb2c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb34:	bfc5      	ittet	gt
 800bb36:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bb3a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bb3e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800bc4c <b_dcm2q+0x13c>
 800bb42:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bb46:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bb4a:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bb4e:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bb52:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	bfc5      	ittet	gt
 800bb5c:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bb60:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bb64:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800bc4c <b_dcm2q+0x13c>
 800bb68:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bb6c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bb70:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	dd5b      	ble.n	800bc32 <b_dcm2q+0x122>
 800bb7a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bb7e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bb82:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bb86:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bb8a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bb8e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bb92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bb96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb9a:	edd0 6a07 	vldr	s13, [r0, #28]
 800bb9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba6:	bf85      	ittet	hi
 800bba8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bbac:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800bbb0:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800bc4c <b_dcm2q+0x13c>
 800bbb4:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800bbb8:	edd0 7a05 	vldr	s15, [r0, #20]
 800bbbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bbc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc8:	d43c      	bmi.n	800bc44 <b_dcm2q+0x134>
 800bbca:	bfd8      	it	le
 800bbcc:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800bbd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bbd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbd8:	ed81 7a00 	vstr	s14, [r1]
 800bbdc:	edd0 7a06 	vldr	s15, [r0, #24]
 800bbe0:	ed90 7a02 	vldr	s14, [r0, #8]
 800bbe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf0:	d425      	bmi.n	800bc3e <b_dcm2q+0x12e>
 800bbf2:	bfd8      	it	le
 800bbf4:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800bbf8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bbfc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bc00:	edc1 5a01 	vstr	s11, [r1, #4]
 800bc04:	edd0 7a01 	vldr	s15, [r0, #4]
 800bc08:	ed90 7a03 	vldr	s14, [r0, #12]
 800bc0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc18:	d40e      	bmi.n	800bc38 <b_dcm2q+0x128>
 800bc1a:	bfd8      	it	le
 800bc1c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800bc20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc24:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bc28:	edc1 4a03 	vstr	s9, [r1, #12]
 800bc2c:	ed81 6a02 	vstr	s12, [r1, #8]
 800bc30:	4770      	bx	lr
 800bc32:	eddf 4a06 	vldr	s9, [pc, #24]	; 800bc4c <b_dcm2q+0x13c>
 800bc36:	e7aa      	b.n	800bb8e <b_dcm2q+0x7e>
 800bc38:	eeb1 6a46 	vneg.f32	s12, s12
 800bc3c:	e7f0      	b.n	800bc20 <b_dcm2q+0x110>
 800bc3e:	eef1 5a65 	vneg.f32	s11, s11
 800bc42:	e7d9      	b.n	800bbf8 <b_dcm2q+0xe8>
 800bc44:	eeb1 7a47 	vneg.f32	s14, s14
 800bc48:	e7c2      	b.n	800bbd0 <b_dcm2q+0xc0>
 800bc4a:	bf00      	nop
 800bc4c:	00000000 	.word	0x00000000

0800bc50 <q2hpr>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	ed90 7a00 	vldr	s14, [r0]
 800bc56:	edd0 6a01 	vldr	s13, [r0, #4]
 800bc5a:	edd0 7a02 	vldr	s15, [r0, #8]
 800bc5e:	ed90 5a03 	vldr	s10, [r0, #12]
 800bc62:	ed2d 8b0a 	vpush	{d8-d12}
 800bc66:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bc6a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bc6e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800bc72:	ee67 0a07 	vmul.f32	s1, s14, s14
 800bc76:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800bc7a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bc7e:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bc82:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bc86:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bc8a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800bc8e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800bc92:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800bc96:	ee30 ca00 	vadd.f32	s24, s0, s0
 800bc9a:	ee36 ba06 	vadd.f32	s22, s12, s12
 800bc9e:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bca2:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bca6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800bcaa:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800bcae:	460c      	mov	r4, r1
 800bcb0:	bb8a      	cbnz	r2, 800bd16 <q2hpr+0xc6>
 800bcb2:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bcb6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bcba:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bcbe:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bcc2:	f009 ffa3 	bl	8015c0c <atan2f>
 800bcc6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcca:	ed84 8a00 	vstr	s16, [r4]
 800bcce:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bcd2:	f009 ff69 	bl	8015ba8 <asinf>
 800bcd6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bcda:	eef0 8a40 	vmov.f32	s17, s0
 800bcde:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bce2:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bce6:	f009 ff91 	bl	8015c0c <atan2f>
 800bcea:	eef1 8a68 	vneg.f32	s17, s17
 800bcee:	eeb0 9a40 	vmov.f32	s18, s0
 800bcf2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfa:	ed84 9a02 	vstr	s18, [r4, #8]
 800bcfe:	edc4 8a01 	vstr	s17, [r4, #4]
 800bd02:	d505      	bpl.n	800bd10 <q2hpr+0xc0>
 800bd04:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bd5c <q2hpr+0x10c>
 800bd08:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bd0c:	ed84 8a00 	vstr	s16, [r4]
 800bd10:	ecbd 8b0a 	vpop	{d8-d12}
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bd1a:	f009 ff45 	bl	8015ba8 <asinf>
 800bd1e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bd22:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bd26:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bd2a:	eeb0 9a40 	vmov.f32	s18, s0
 800bd2e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bd32:	f009 ff6b 	bl	8015c0c <atan2f>
 800bd36:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bd3a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bd3e:	eef0 8a40 	vmov.f32	s17, s0
 800bd42:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bd46:	eeb1 0a48 	vneg.f32	s0, s16
 800bd4a:	f009 ff5f 	bl	8015c0c <atan2f>
 800bd4e:	eef1 8a68 	vneg.f32	s17, s17
 800bd52:	eeb0 8a40 	vmov.f32	s16, s0
 800bd56:	ed84 0a00 	vstr	s0, [r4]
 800bd5a:	e7ca      	b.n	800bcf2 <q2hpr+0xa2>
 800bd5c:	40c90fdb 	.word	0x40c90fdb

0800bd60 <llEvaluate.constprop.0>:
 800bd60:	edd2 0a00 	vldr	s1, [r2]
 800bd64:	ed90 1a00 	vldr	s2, [r0]
 800bd68:	edd0 1a04 	vldr	s3, [r0, #16]
 800bd6c:	edd2 5a01 	vldr	s11, [r2, #4]
 800bd70:	ed90 6a08 	vldr	s12, [r0, #32]
 800bd74:	ed90 2a05 	vldr	s4, [r0, #20]
 800bd78:	ed92 7a02 	vldr	s14, [r2, #8]
 800bd7c:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bd80:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bd84:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bd88:	edd2 7a03 	vldr	s15, [r2, #12]
 800bd8c:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bd90:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bd94:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bd98:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	f10d 0810 	add.w	r8, sp, #16
 800bda6:	2704      	movs	r7, #4
 800bda8:	f101 0510 	add.w	r5, r1, #16
 800bdac:	2f04      	cmp	r7, #4
 800bdae:	4686      	mov	lr, r0
 800bdb0:	f04f 0c03 	mov.w	ip, #3
 800bdb4:	b27b      	sxtb	r3, r7
 800bdb6:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bdba:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bdbe:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bdc2:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bdc6:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bdca:	edcd 6a00 	vstr	s13, [sp]
 800bdce:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bdd2:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bdd6:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bdda:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bdde:	edcd 6a02 	vstr	s13, [sp, #8]
 800bde2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bde6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bdea:	ed78 7a01 	vldmdb	r8!, {s15}
 800bdee:	ed65 7a01 	vstmdb	r5!, {s15}
 800bdf2:	d029      	beq.n	800be48 <llEvaluate.constprop.0+0xe8>
 800bdf4:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bdf8:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bdfc:	4432      	add	r2, r6
 800bdfe:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800be02:	edd2 6a00 	vldr	s13, [r2]
 800be06:	ed94 7a00 	vldr	s14, [r4]
 800be0a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800be0e:	3301      	adds	r3, #1
 800be10:	b2da      	uxtb	r2, r3
 800be12:	2a04      	cmp	r2, #4
 800be14:	b25b      	sxtb	r3, r3
 800be16:	edc5 7a00 	vstr	s15, [r5]
 800be1a:	d1ed      	bne.n	800bdf8 <llEvaluate.constprop.0+0x98>
 800be1c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800be20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800be24:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800be28:	ed85 7a00 	vstr	s14, [r5]
 800be2c:	d013      	beq.n	800be56 <llEvaluate.constprop.0+0xf6>
 800be2e:	3f01      	subs	r7, #1
 800be30:	b2ff      	uxtb	r7, r7
 800be32:	ed78 7a01 	vldmdb	r8!, {s15}
 800be36:	2f04      	cmp	r7, #4
 800be38:	f1ae 0e14 	sub.w	lr, lr, #20
 800be3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800be40:	b27b      	sxtb	r3, r7
 800be42:	ed65 7a01 	vstmdb	r5!, {s15}
 800be46:	d1d5      	bne.n	800bdf4 <llEvaluate.constprop.0+0x94>
 800be48:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800be4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800be50:	ed85 7a00 	vstr	s14, [r5]
 800be54:	e7eb      	b.n	800be2e <llEvaluate.constprop.0+0xce>
 800be56:	b004      	add	sp, #16
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be5c <MEMS_updateMagBufferIndex>:
 800be5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be60:	ed2d 8b02 	vpush	{d8}
 800be64:	7804      	ldrb	r4, [r0, #0]
 800be66:	7842      	ldrb	r2, [r0, #1]
 800be68:	4606      	mov	r6, r0
 800be6a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800be6e:	2300      	movs	r3, #0
 800be70:	4294      	cmp	r4, r2
 800be72:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800be76:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800be7a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800be7e:	b083      	sub	sp, #12
 800be80:	460d      	mov	r5, r1
 800be82:	f100 0001 	add.w	r0, r0, #1
 800be86:	f000 8083 	beq.w	800bf90 <MEMS_updateMagBufferIndex+0x134>
 800be8a:	1b00      	subs	r0, r0, r4
 800be8c:	fb90 f8f2 	sdiv	r8, r0, r2
 800be90:	fb02 0018 	mls	r0, r2, r8, r0
 800be94:	2800      	cmp	r0, #0
 800be96:	bfb6      	itet	lt
 800be98:	eb02 0800 	addlt.w	r8, r2, r0
 800be9c:	fa0f f880 	sxthge.w	r8, r0
 800bea0:	fa0f f888 	sxthlt.w	r8, r8
 800bea4:	b934      	cbnz	r4, 800beb4 <MEMS_updateMagBufferIndex+0x58>
 800bea6:	23ff      	movs	r3, #255	; 0xff
 800bea8:	70b3      	strb	r3, [r6, #2]
 800beaa:	b003      	add	sp, #12
 800beac:	ecbd 8b02 	vpop	{d8}
 800beb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800beb8:	2700      	movs	r7, #0
 800beba:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800bebe:	463b      	mov	r3, r7
 800bec0:	e000      	b.n	800bec4 <MEMS_updateMagBufferIndex+0x68>
 800bec2:	7872      	ldrb	r2, [r6, #1]
 800bec4:	4443      	add	r3, r8
 800bec6:	fb93 f4f2 	sdiv	r4, r3, r2
 800beca:	fb02 3314 	mls	r3, r2, r4, r3
 800bece:	b2dc      	uxtb	r4, r3
 800bed0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800bed4:	3701      	adds	r7, #1
 800bed6:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800beda:	fb92 f3f5 	sdiv	r3, r2, r5
 800bede:	fb05 2313 	mls	r3, r5, r3, r2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bfb8      	it	lt
 800bee6:	195b      	addlt	r3, r3, r5
 800bee8:	b21b      	sxth	r3, r3
 800beea:	ee00 3a10 	vmov	s0, r3
 800beee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bef2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bef6:	f009 fd5f 	bl	80159b8 <roundf>
 800befa:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800befe:	fb92 f3f5 	sdiv	r3, r2, r5
 800bf02:	fb05 2313 	mls	r3, r5, r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	bfb8      	it	lt
 800bf0a:	195b      	addlt	r3, r3, r5
 800bf0c:	b21b      	sxth	r3, r3
 800bf0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf12:	ee00 3a10 	vmov	s0, r3
 800bf16:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf1a:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bf22:	f009 fd49 	bl	80159b8 <roundf>
 800bf26:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800bf2a:	fb92 f3f5 	sdiv	r3, r2, r5
 800bf2e:	fb05 2313 	mls	r3, r5, r3, r2
 800bf32:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf36:	18ea      	adds	r2, r5, r3
 800bf38:	b219      	sxth	r1, r3
 800bf3a:	b212      	sxth	r2, r2
 800bf3c:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800bf40:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf44:	ee00 1a10 	vmov	s0, r1
 800bf48:	ee07 2a90 	vmov	s15, r2
 800bf4c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bf5a:	bfb8      	it	lt
 800bf5c:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800bf60:	f009 fd2a 	bl	80159b8 <roundf>
 800bf64:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf68:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800bf6c:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf74:	4622      	mov	r2, r4
 800bf76:	4649      	mov	r1, r9
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7ff fce7 	bl	800b94c <MEMS_setMagIndexToOne>
 800bf7e:	7832      	ldrb	r2, [r6, #0]
 800bf80:	b2fb      	uxtb	r3, r7
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d89d      	bhi.n	800bec2 <MEMS_updateMagBufferIndex+0x66>
 800bf86:	b003      	add	sp, #12
 800bf88:	ecbd 8b02 	vpop	{d8}
 800bf8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf90:	fb90 f8f4 	sdiv	r8, r0, r4
 800bf94:	fb04 0018 	mls	r0, r4, r8, r0
 800bf98:	fa0f f880 	sxth.w	r8, r0
 800bf9c:	e782      	b.n	800bea4 <MEMS_updateMagBufferIndex+0x48>
 800bf9e:	bf00      	nop

0800bfa0 <getMagStats.constprop.0>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bfa6:	2400      	movs	r4, #0
 800bfa8:	4607      	mov	r7, r0
 800bfaa:	6034      	str	r4, [r6, #0]
 800bfac:	601c      	str	r4, [r3, #0]
 800bfae:	7800      	ldrb	r0, [r0, #0]
 800bfb0:	787d      	ldrb	r5, [r7, #1]
 800bfb2:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800bfb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bfba:	42a8      	cmp	r0, r5
 800bfbc:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800bfc0:	f000 80c0 	beq.w	800c144 <getMagStats.constprop.0+0x1a4>
 800bfc4:	3401      	adds	r4, #1
 800bfc6:	eba4 0c00 	sub.w	ip, r4, r0
 800bfca:	fb9c f4f5 	sdiv	r4, ip, r5
 800bfce:	fb05 c414 	mls	r4, r5, r4, ip
 800bfd2:	2c00      	cmp	r4, #0
 800bfd4:	bfb8      	it	lt
 800bfd6:	1964      	addlt	r4, r4, r5
 800bfd8:	b224      	sxth	r4, r4
 800bfda:	ee04 0a90 	vmov	s9, r0
 800bfde:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c160 <getMagStats.constprop.0+0x1c0>
 800bfe2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800bfe6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800bfea:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f000 80b2 	beq.w	800c158 <getMagStats.constprop.0+0x1b8>
 800bff4:	3801      	subs	r0, #1
 800bff6:	fa54 fc80 	uxtab	ip, r4, r0
 800bffa:	f8b1 9000 	ldrh.w	r9, [r1]
 800bffe:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c002:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c006:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c164 <getMagStats.constprop.0+0x1c4>
 800c00a:	2000      	movs	r0, #0
 800c00c:	e002      	b.n	800c014 <getMagStats.constprop.0+0x74>
 800c00e:	ed93 3a00 	vldr	s6, [r3]
 800c012:	3401      	adds	r4, #1
 800c014:	fb94 f1f5 	sdiv	r1, r4, r5
 800c018:	fb05 4111 	mls	r1, r5, r1, r4
 800c01c:	b2c9      	uxtb	r1, r1
 800c01e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c022:	edd2 3a00 	vldr	s7, [r2]
 800c026:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c02a:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c02e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c030:	ed92 4a04 	vldr	s8, [r2, #16]
 800c034:	ed92 6a08 	vldr	s12, [r2, #32]
 800c038:	ebaa 0a09 	sub.w	sl, sl, r9
 800c03c:	ebab 0b08 	sub.w	fp, fp, r8
 800c040:	fa0f fa8a 	sxth.w	sl, sl
 800c044:	ee07 aa10 	vmov	s14, sl
 800c048:	fa0f fa8b 	sxth.w	sl, fp
 800c04c:	ee06 aa90 	vmov	s13, sl
 800c050:	eba1 010e 	sub.w	r1, r1, lr
 800c054:	b209      	sxth	r1, r1
 800c056:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c05a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c05e:	ee07 1a90 	vmov	s15, r1
 800c062:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c066:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c06a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c06e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c072:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c076:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c07a:	ee16 1a90 	vmov	r1, s13
 800c07e:	ee17 aa10 	vmov	sl, s14
 800c082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c086:	fb11 f101 	smulbb	r1, r1, r1
 800c08a:	fa0f fa8a 	sxth.w	sl, sl
 800c08e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c092:	ee17 1a90 	vmov	r1, s15
 800c096:	b209      	sxth	r1, r1
 800c098:	fb01 a101 	mla	r1, r1, r1, sl
 800c09c:	ee07 1a90 	vmov	s15, r1
 800c0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a4:	f100 0a01 	add.w	sl, r0, #1
 800c0a8:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c0ac:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c0b0:	ee17 1a90 	vmov	r1, s15
 800c0b4:	b209      	sxth	r1, r1
 800c0b6:	ee07 1a10 	vmov	s14, r1
 800c0ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c0be:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c0c2:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c0c6:	eef0 7ae7 	vabs.f32	s15, s15
 800c0ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0ce:	ed83 7a00 	vstr	s14, [r3]
 800c0d2:	ee17 1a90 	vmov	r1, s15
 800c0d6:	b209      	sxth	r1, r1
 800c0d8:	fb01 fb01 	mul.w	fp, r1, r1
 800c0dc:	ee07 ba90 	vmov	s15, fp
 800c0e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0e4:	ee07 1a90 	vmov	s15, r1
 800c0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0ec:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c0f0:	edd6 7a00 	vldr	s15, [r6]
 800c0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0fc:	bf48      	it	mi
 800c0fe:	fa5f f08a 	uxtbmi.w	r0, sl
 800c102:	45a4      	cmp	ip, r4
 800c104:	edc6 7a00 	vstr	s15, [r6]
 800c108:	d181      	bne.n	800c00e <getMagStats.constprop.0+0x6e>
 800c10a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c10e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c168 <getMagStats.constprop.0+0x1c8>
 800c112:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c116:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c11a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c11e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c126:	bfb8      	it	lt
 800c128:	eef0 7a47 	vmovlt.f32	s15, s14
 800c12c:	edc6 7a00 	vstr	s15, [r6]
 800c130:	edd3 7a00 	vldr	s15, [r3]
 800c134:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c138:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c13c:	edc3 7a00 	vstr	s15, [r3]
 800c140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c144:	1c65      	adds	r5, r4, #1
 800c146:	fb95 f4f0 	sdiv	r4, r5, r0
 800c14a:	fb00 5414 	mls	r4, r0, r4, r5
 800c14e:	ee04 0a90 	vmov	s9, r0
 800c152:	b224      	sxth	r4, r4
 800c154:	4605      	mov	r5, r0
 800c156:	e742      	b.n	800bfde <getMagStats.constprop.0+0x3e>
 800c158:	edd6 7a00 	vldr	s15, [r6]
 800c15c:	e7d5      	b.n	800c10a <getMagStats.constprop.0+0x16a>
 800c15e:	bf00      	nop
 800c160:	423c0000 	.word	0x423c0000
 800c164:	00000000 	.word	0x00000000
 800c168:	3f59999a 	.word	0x3f59999a

0800c16c <MFX_emptyAttitude>:
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	ed2d 8b10 	vpush	{d8-d15}
 800c174:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c178:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c17c:	f04f 0a00 	mov.w	sl, #0
 800c180:	4fef      	ldr	r7, [pc, #956]	; (800c540 <MFX_emptyAttitude+0x3d4>)
 800c182:	f8c4 a008 	str.w	sl, [r4, #8]
 800c186:	e9c4 aa00 	strd	sl, sl, [r4]
 800c18a:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c18e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c192:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c196:	4680      	mov	r8, r0
 800c198:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c19c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c1a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c1a4:	0c1b      	lsrs	r3, r3, #16
 800c1a6:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c1aa:	ab27      	add	r3, sp, #156	; 0x9c
 800c1ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1b0:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c1b4:	ab2d      	add	r3, sp, #180	; 0xb4
 800c1b6:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c1ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1be:	ab30      	add	r3, sp, #192	; 0xc0
 800c1c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1c4:	ab33      	add	r3, sp, #204	; 0xcc
 800c1c6:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c1ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1ce:	f04f 0c00 	mov.w	ip, #0
 800c1d2:	ab36      	add	r3, sp, #216	; 0xd8
 800c1d4:	f04f 0b00 	mov.w	fp, #0
 800c1d8:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c1dc:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c1e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	2224      	movs	r2, #36	; 0x24
 800c1e8:	f00b f9ee 	bl	80175c8 <memset>
 800c1ec:	4651      	mov	r1, sl
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c1f4:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c544 <MFX_emptyAttitude+0x3d8>
 800c1f8:	eddf ead3 	vldr	s29, [pc, #844]	; 800c548 <MFX_emptyAttitude+0x3dc>
 800c1fc:	f00b f9e4 	bl	80175c8 <memset>
 800c200:	edd5 4a00 	vldr	s9, [r5]
 800c204:	ed95 5a01 	vldr	s10, [r5, #4]
 800c208:	edd5 5a02 	vldr	s11, [r5, #8]
 800c20c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c210:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c214:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c218:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c21c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c220:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c224:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c228:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c22c:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c230:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c234:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c238:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c23c:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c240:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c244:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c248:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c24c:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c250:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c254:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c258:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c25c:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c260:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c264:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c268:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c26c:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c270:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c274:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c278:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c27c:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c280:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c284:	ed95 6a03 	vldr	s12, [r5, #12]
 800c288:	edd5 6a04 	vldr	s13, [r5, #16]
 800c28c:	ed95 7a05 	vldr	s14, [r5, #20]
 800c290:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c294:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c298:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c29c:	edcd 6a07 	vstr	s13, [sp, #28]
 800c2a0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c2a4:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c2a8:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c2ac:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c2b0:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c2b4:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c2b8:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c2bc:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c2c0:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c2c4:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c2c8:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c2cc:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c2d0:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c2d4:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c2d8:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c2dc:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c2e0:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c2e4:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c2e8:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c2ec:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c2f0:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c2f4:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c2f8:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c2fc:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c300:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c304:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c308:	edd5 7a06 	vldr	s15, [r5, #24]
 800c30c:	edd5 fa07 	vldr	s31, [r5, #28]
 800c310:	ed95 fa08 	vldr	s30, [r5, #32]
 800c314:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c318:	edcd 7a05 	vstr	s15, [sp, #20]
 800c31c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c320:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c324:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c328:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c32c:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c330:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c334:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c338:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c33c:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c340:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c344:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c348:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c34c:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c350:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c354:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c358:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c35c:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c360:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c364:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c368:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c36c:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c370:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c374:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c378:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c37c:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c380:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c384:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c388:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c38c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c38e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c396:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	f8cc 3000 	str.w	r3, [ip]
 800c3a2:	4651      	mov	r1, sl
 800c3a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c3ae:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c3b2:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c3b6:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c3ba:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c3be:	f00b f903 	bl	80175c8 <memset>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c3c8:	a898      	add	r0, sp, #608	; 0x260
 800c3ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c3ce:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c3d2:	f00b f8eb 	bl	80175ac <memcpy>
 800c3d6:	4651      	mov	r1, sl
 800c3d8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c3e2:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c3e6:	f00b f8ef 	bl	80175c8 <memset>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c3f0:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c3f2:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c3f6:	f00b f8d9 	bl	80175ac <memcpy>
 800c3fa:	4651      	mov	r1, sl
 800c3fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c400:	4620      	mov	r0, r4
 800c402:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c406:	f00b f8df 	bl	80175c8 <memset>
 800c40a:	4621      	mov	r1, r4
 800c40c:	8037      	strh	r7, [r6, #0]
 800c40e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c412:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c416:	f00b f8c9 	bl	80175ac <memcpy>
 800c41a:	4651      	mov	r1, sl
 800c41c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c420:	4620      	mov	r0, r4
 800c422:	ed86 8a01 	vstr	s16, [r6, #4]
 800c426:	f00b f8cf 	bl	80175c8 <memset>
 800c42a:	4621      	mov	r1, r4
 800c42c:	802f      	strh	r7, [r5, #0]
 800c42e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c432:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c436:	f00b f8b9 	bl	80175ac <memcpy>
 800c43a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c43e:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c442:	2701      	movs	r7, #1
 800c444:	9600      	str	r6, [sp, #0]
 800c446:	9403      	str	r4, [sp, #12]
 800c448:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c54c <MFX_emptyAttitude+0x3e0>
 800c44c:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c550 <MFX_emptyAttitude+0x3e4>
 800c450:	ed85 8a01 	vstr	s16, [r5, #4]
 800c454:	483f      	ldr	r0, [pc, #252]	; (800c554 <MFX_emptyAttitude+0x3e8>)
 800c456:	4d40      	ldr	r5, [pc, #256]	; (800c558 <MFX_emptyAttitude+0x3ec>)
 800c458:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c57c <MFX_emptyAttitude+0x410>
 800c45c:	951c      	str	r5, [sp, #112]	; 0x70
 800c45e:	abf2      	add	r3, sp, #968	; 0x3c8
 800c460:	aa96      	add	r2, sp, #600	; 0x258
 800c462:	a90d      	add	r1, sp, #52	; 0x34
 800c464:	9017      	str	r0, [sp, #92]	; 0x5c
 800c466:	4d3d      	ldr	r5, [pc, #244]	; (800c55c <MFX_emptyAttitude+0x3f0>)
 800c468:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c46c:	4638      	mov	r0, r7
 800c46e:	ae27      	add	r6, sp, #156	; 0x9c
 800c470:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c474:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c478:	951b      	str	r5, [sp, #108]	; 0x6c
 800c47a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c47e:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c482:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c486:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c48a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c48e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c492:	f7fe fecf 	bl	800b234 <DataHist_parameters>
 800c496:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c498:	4b31      	ldr	r3, [pc, #196]	; (800c560 <MFX_emptyAttitude+0x3f4>)
 800c49a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c49e:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c4a2:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c4a6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c4aa:	f8c8 300c 	str.w	r3, [r8, #12]
 800c4ae:	4b2d      	ldr	r3, [pc, #180]	; (800c564 <MFX_emptyAttitude+0x3f8>)
 800c4b0:	f8c8 3014 	str.w	r3, [r8, #20]
 800c4b4:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c4b8:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c568 <MFX_emptyAttitude+0x3fc>
 800c4bc:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c56c <MFX_emptyAttitude+0x400>
 800c4c0:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c570 <MFX_emptyAttitude+0x404>
 800c4c4:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c574 <MFX_emptyAttitude+0x408>
 800c4c8:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c578 <MFX_emptyAttitude+0x40c>
 800c4cc:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c4d0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c580 <MFX_emptyAttitude+0x414>
 800c4d4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c584 <MFX_emptyAttitude+0x418>
 800c4d8:	edc8 2a06 	vstr	s5, [r8, #24]
 800c4dc:	f04f 0b00 	mov.w	fp, #0
 800c4e0:	f04f 0c00 	mov.w	ip, #0
 800c4e4:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c4e8:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c4ec:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c4f0:	ad2d      	add	r5, sp, #180	; 0xb4
 800c4f2:	469b      	mov	fp, r3
 800c4f4:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c588 <MFX_emptyAttitude+0x41c>
 800c4f8:	ed88 3a07 	vstr	s6, [r8, #28]
 800c4fc:	f240 1301 	movw	r3, #257	; 0x101
 800c500:	edc8 3a08 	vstr	s7, [r8, #32]
 800c504:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c508:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c50c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c510:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c514:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c518:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c51c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c520:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c524:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c528:	f8c8 3000 	str.w	r3, [r8]
 800c52c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c530:	ed88 8a02 	vstr	s16, [r8, #8]
 800c534:	ed88 8a04 	vstr	s16, [r8, #16]
 800c538:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c53c:	e028      	b.n	800c590 <MFX_emptyAttitude+0x424>
 800c53e:	bf00      	nop
 800c540:	080177b0 	.word	0x080177b0
 800c544:	00000000 	.word	0x00000000
 800c548:	447a0000 	.word	0x447a0000
 800c54c:	3e93ffa3 	.word	0x3e93ffa3
 800c550:	3e5cec8f 	.word	0x3e5cec8f
 800c554:	3ea25c13 	.word	0x3ea25c13
 800c558:	40a00000 	.word	0x40a00000
 800c55c:	3d57bb3d 	.word	0x3d57bb3d
 800c560:	01010100 	.word	0x01010100
 800c564:	41200000 	.word	0x41200000
 800c568:	3a9d4952 	.word	0x3a9d4952
 800c56c:	3ac49ba6 	.word	0x3ac49ba6
 800c570:	3b03126f 	.word	0x3b03126f
 800c574:	402ab021 	.word	0x402ab021
 800c578:	3a83126f 	.word	0x3a83126f
 800c57c:	3e006d36 	.word	0x3e006d36
 800c580:	3f639581 	.word	0x3f639581
 800c584:	3f13f7cf 	.word	0x3f13f7cf
 800c588:	3f2ac083 	.word	0x3f2ac083
 800c58c:	3f4ccccd 	.word	0x3f4ccccd
 800c590:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c592:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c596:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c59a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c59e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c5a2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c5a6:	ab33      	add	r3, sp, #204	; 0xcc
 800c5a8:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c5ac:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c5b0:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c5b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5b6:	ab36      	add	r3, sp, #216	; 0xd8
 800c5b8:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c5bc:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c5c0:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c5c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5c6:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c58c <MFX_emptyAttitude+0x420>
 800c5ca:	4bd6      	ldr	r3, [pc, #856]	; (800c924 <MFX_emptyAttitude+0x7b8>)
 800c5cc:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c5d0:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c5d4:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c5d8:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c5dc:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c5e0:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c5e4:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c5e8:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c5ec:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c5f0:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c5f4:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c5f8:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c5fc:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c600:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c604:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c608:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c60c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c610:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c614:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c618:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c61c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c620:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c624:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c628:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c62c:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c630:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c634:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c638:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c63c:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c640:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c644:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c648:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c64c:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c650:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c654:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c658:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c65c:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c660:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c664:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c668:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c66c:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c670:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c674:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c678:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c67c:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c680:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c684:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c688:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c68c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c690:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c694:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c698:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c69c:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c6a0:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c6a4:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c6a8:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c6ac:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c6b0:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c6b4:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c6b8:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c6bc:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c6c0:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c6c4:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c6c8:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c6cc:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c6d0:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c6d4:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c6d8:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c6dc:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c6e0:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c6e4:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c6e8:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c6ec:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c6f0:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c6f4:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c6f8:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c6fc:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c700:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c704:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c708:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c70c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c710:	eddd 6a07 	vldr	s13, [sp, #28]
 800c714:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c718:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c71c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c720:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c724:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c728:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c72c:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c730:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c734:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c738:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c73c:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c740:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c744:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c748:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c74c:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c750:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c754:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c758:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c75c:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c760:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c764:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c768:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c76c:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c770:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c774:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c778:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c77c:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c780:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c784:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c788:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c78c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c790:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c794:	eddd 7a05 	vldr	s15, [sp, #20]
 800c798:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c79c:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c7a0:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c7a4:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c7a8:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c7ac:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c7b0:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c7b4:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c7b8:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c7bc:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c7c0:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c7c4:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c7c8:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c7cc:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c7d0:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c7d4:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c7d8:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c7dc:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c7e0:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c7e4:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c7e8:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c7ec:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c7f0:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c7f4:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c7f8:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c7fc:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c800:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c804:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c808:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c80c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c810:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c814:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c818:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c81c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c820:	7820      	ldrb	r0, [r4, #0]
 800c822:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c826:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c82a:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c82e:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c832:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c836:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c83a:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c83e:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c842:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c846:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c84a:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c84e:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c852:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c856:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c85a:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c85e:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c862:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c866:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c86a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c86e:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c872:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c876:	f8cd e00c 	str.w	lr, [sp, #12]
 800c87a:	9500      	str	r5, [sp, #0]
 800c87c:	f7fe fcda 	bl	800b234 <DataHist_parameters>
 800c880:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c884:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c888:	9205      	str	r2, [sp, #20]
 800c88a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c88e:	ed8b ba00 	vstr	s22, [fp]
 800c892:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c896:	ed83 ba00 	vstr	s22, [r3]
 800c89a:	9b05      	ldr	r3, [sp, #20]
 800c89c:	9106      	str	r1, [sp, #24]
 800c89e:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c8a2:	ed89 ba00 	vstr	s22, [r9]
 800c8a6:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c8aa:	ed83 8a00 	vstr	s16, [r3]
 800c8ae:	9b06      	ldr	r3, [sp, #24]
 800c8b0:	9207      	str	r2, [sp, #28]
 800c8b2:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c8b6:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c8ba:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c8be:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c8c2:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c8c6:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c8ca:	ed8e ba00 	vstr	s22, [lr]
 800c8ce:	ed8c ba00 	vstr	s22, [ip]
 800c8d2:	ed87 ba00 	vstr	s22, [r7]
 800c8d6:	ed86 ba00 	vstr	s22, [r6]
 800c8da:	ed85 ba00 	vstr	s22, [r5]
 800c8de:	ed84 ba00 	vstr	s22, [r4]
 800c8e2:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c8e6:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c8ea:	ed83 ba00 	vstr	s22, [r3]
 800c8ee:	9b07      	ldr	r3, [sp, #28]
 800c8f0:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c8f4:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c8f8:	ed80 8a00 	vstr	s16, [r0]
 800c8fc:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c900:	ed81 ba00 	vstr	s22, [r1]
 800c904:	ed83 ba00 	vstr	s22, [r3]
 800c908:	230a      	movs	r3, #10
 800c90a:	ed82 ba00 	vstr	s22, [r2]
 800c90e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c912:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c916:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c91a:	ecbd 8b10 	vpop	{d8-d15}
 800c91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c922:	bf00      	nop
 800c924:	3f333333 	.word	0x3f333333

0800c928 <output_update>:
 800c928:	ed90 7a00 	vldr	s14, [r0]
 800c92c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c930:	ed90 5a03 	vldr	s10, [r0, #12]
 800c934:	edd0 5a02 	vldr	s11, [r0, #8]
 800c938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c940:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c944:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c948:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c94c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c950:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c954:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c958:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c95c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c960:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c964:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c968:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c96c:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c974:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c978:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c97c:	460f      	mov	r7, r1
 800c97e:	4615      	mov	r5, r2
 800c980:	461e      	mov	r6, r3
 800c982:	f1bc 0f00 	cmp.w	ip, #0
 800c986:	d146      	bne.n	800ca16 <output_update+0xee>
 800c988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c98c:	eef1 6a66 	vneg.f32	s13, s13
 800c990:	edc3 7a01 	vstr	s15, [r3, #4]
 800c994:	edc3 6a00 	vstr	s13, [r3]
 800c998:	ed83 5a02 	vstr	s10, [r3, #8]
 800c99c:	4662      	mov	r2, ip
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	f7ff f955 	bl	800bc50 <q2hpr>
 800c9a6:	edd5 6a01 	vldr	s13, [r5, #4]
 800c9aa:	ed95 7a00 	vldr	s14, [r5]
 800c9ae:	edd5 7a02 	vldr	s15, [r5, #8]
 800c9b2:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800cac4 <output_update+0x19c>
 800c9b6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c9ba:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c9be:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c9c2:	ed85 7a00 	vstr	s14, [r5]
 800c9c6:	edc5 6a01 	vstr	s13, [r5, #4]
 800c9ca:	edc5 7a02 	vstr	s15, [r5, #8]
 800c9ce:	ed97 7a01 	vldr	s14, [r7, #4]
 800c9d2:	edd6 7a00 	vldr	s15, [r6]
 800c9d6:	6822      	ldr	r2, [r4, #0]
 800c9d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9dc:	edc8 7a00 	vstr	s15, [r8]
 800c9e0:	ed97 7a00 	vldr	s14, [r7]
 800c9e4:	edd6 7a01 	vldr	s15, [r6, #4]
 800c9e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9ec:	edc8 7a01 	vstr	s15, [r8, #4]
 800c9f0:	edd6 7a02 	vldr	s15, [r6, #8]
 800c9f4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c9f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9fc:	edc8 7a02 	vstr	s15, [r8, #8]
 800ca00:	edd4 7a02 	vldr	s15, [r4, #8]
 800ca04:	6863      	ldr	r3, [r4, #4]
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	eef1 7a67 	vneg.f32	s15, s15
 800ca0c:	6062      	str	r2, [r4, #4]
 800ca0e:	edc4 7a02 	vstr	s15, [r4, #8]
 800ca12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca16:	f1bc 0f01 	cmp.w	ip, #1
 800ca1a:	d015      	beq.n	800ca48 <output_update+0x120>
 800ca1c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cac4 <output_update+0x19c>
 800ca20:	edd2 6a00 	vldr	s13, [r2]
 800ca24:	ed92 7a01 	vldr	s14, [r2, #4]
 800ca28:	edd2 7a02 	vldr	s15, [r2, #8]
 800ca2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ca30:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca34:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ca38:	edc2 6a00 	vstr	s13, [r2]
 800ca3c:	ed82 7a01 	vstr	s14, [r2, #4]
 800ca40:	edc2 7a02 	vstr	s15, [r2, #8]
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca4c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800ca50:	eef1 6a66 	vneg.f32	s13, s13
 800ca54:	edc3 7a00 	vstr	s15, [r3]
 800ca58:	ed83 6a02 	vstr	s12, [r3, #8]
 800ca5c:	edc3 6a01 	vstr	s13, [r3, #4]
 800ca60:	4662      	mov	r2, ip
 800ca62:	4629      	mov	r1, r5
 800ca64:	f7ff f8f4 	bl	800bc50 <q2hpr>
 800ca68:	edd5 6a00 	vldr	s13, [r5]
 800ca6c:	ed95 7a01 	vldr	s14, [r5, #4]
 800ca70:	edd5 7a02 	vldr	s15, [r5, #8]
 800ca74:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cac4 <output_update+0x19c>
 800ca78:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ca80:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ca84:	ed85 7a01 	vstr	s14, [r5, #4]
 800ca88:	edc5 6a00 	vstr	s13, [r5]
 800ca8c:	edc5 7a02 	vstr	s15, [r5, #8]
 800ca90:	ed97 7a00 	vldr	s14, [r7]
 800ca94:	edd6 7a00 	vldr	s15, [r6]
 800ca98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca9c:	edc8 7a00 	vstr	s15, [r8]
 800caa0:	ed97 7a01 	vldr	s14, [r7, #4]
 800caa4:	edd6 7a01 	vldr	s15, [r6, #4]
 800caa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caac:	edc8 7a01 	vstr	s15, [r8, #4]
 800cab0:	edd6 7a02 	vldr	s15, [r6, #8]
 800cab4:	ed97 7a02 	vldr	s14, [r7, #8]
 800cab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cabc:	edc8 7a02 	vstr	s15, [r8, #8]
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	42652ee1 	.word	0x42652ee1

0800cac8 <kalman_3gyro.constprop.0>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	ed2d 8b10 	vpush	{d8-d15}
 800cad0:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800cad4:	edd2 9a02 	vldr	s19, [r2, #8]
 800cad8:	edd2 8a03 	vldr	s17, [r2, #12]
 800cadc:	edd2 6a04 	vldr	s13, [r2, #16]
 800cae0:	ed92 6a05 	vldr	s12, [r2, #20]
 800cae4:	6854      	ldr	r4, [r2, #4]
 800cae6:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800caea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800caee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf2:	4683      	mov	fp, r0
 800caf4:	edd2 7a00 	vldr	s15, [r2]
 800caf8:	48e3      	ldr	r0, [pc, #908]	; (800ce88 <kalman_3gyro.constprop.0+0x3c0>)
 800cafa:	9108      	str	r1, [sp, #32]
 800cafc:	904a      	str	r0, [sp, #296]	; 0x128
 800cafe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800cb02:	460d      	mov	r5, r1
 800cb04:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800cb08:	2100      	movs	r1, #0
 800cb0a:	9328      	str	r3, [sp, #160]	; 0xa0
 800cb0c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800cb10:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800cb14:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cb18:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800cb1c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800cb20:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800cb24:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800cb28:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800cb2c:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800cb30:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800cb34:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800cb38:	946f      	str	r4, [sp, #444]	; 0x1bc
 800cb3a:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cb3c:	9471      	str	r4, [sp, #452]	; 0x1c4
 800cb3e:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800cb42:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800cb46:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800cb4a:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800cb4e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cb52:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cb56:	eeb0 8a60 	vmov.f32	s16, s1
 800cb5a:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800cb5e:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800cb62:	ed8d 1a07 	vstr	s2, [sp, #28]
 800cb66:	f00a fd2f 	bl	80175c8 <memset>
 800cb6a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800cb6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cb72:	600b      	str	r3, [r1, #0]
 800cb74:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cb78:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cb7c:	600b      	str	r3, [r1, #0]
 800cb7e:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cb82:	600b      	str	r3, [r1, #0]
 800cb84:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cb88:	600b      	str	r3, [r1, #0]
 800cb8a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cb8e:	600b      	str	r3, [r1, #0]
 800cb90:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cb94:	600b      	str	r3, [r1, #0]
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	f001 82c2 	beq.w	800e120 <kalman_3gyro.constprop.0+0x1658>
 800cb9c:	ed95 5a02 	vldr	s10, [r5, #8]
 800cba0:	edd5 5a01 	vldr	s11, [r5, #4]
 800cba4:	ed95 3a00 	vldr	s6, [r5]
 800cba8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cbac:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800cbb0:	ee35 4a05 	vadd.f32	s8, s10, s10
 800cbb4:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800cbb8:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cbbc:	ee63 7a27 	vmul.f32	s15, s6, s15
 800cbc0:	ee33 3a03 	vadd.f32	s6, s6, s6
 800cbc4:	9b08      	ldr	r3, [sp, #32]
 800cbc6:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800cbca:	ed82 4a00 	vstr	s8, [r2]
 800cbce:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800cbd2:	edc2 4a00 	vstr	s9, [r2]
 800cbd6:	ed93 6a05 	vldr	s12, [r3, #20]
 800cbda:	edd3 6a04 	vldr	s13, [r3, #16]
 800cbde:	ed93 7a03 	vldr	s14, [r3, #12]
 800cbe2:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800cbe6:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800cbea:	ed82 5a00 	vstr	s10, [r2]
 800cbee:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800cbf2:	ed82 3a00 	vstr	s6, [r2]
 800cbf6:	eef1 3a46 	vneg.f32	s7, s12
 800cbfa:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800cbfe:	edc2 5a00 	vstr	s11, [r2]
 800cc02:	eeb1 4a66 	vneg.f32	s8, s13
 800cc06:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800cc0a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800cc0e:	edc2 7a00 	vstr	s15, [r2]
 800cc12:	ee34 3a04 	vadd.f32	s6, s8, s8
 800cc16:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800cc1a:	eef1 4a47 	vneg.f32	s9, s14
 800cc1e:	ed82 5a00 	vstr	s10, [r2]
 800cc22:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800cc26:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800cc2a:	ed81 3a00 	vstr	s6, [r1]
 800cc2e:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800cc32:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800cc36:	ed81 5a00 	vstr	s10, [r1]
 800cc3a:	ee77 7a07 	vadd.f32	s15, s14, s14
 800cc3e:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800cc42:	edc1 5a00 	vstr	s11, [r1]
 800cc46:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800cc4a:	edc1 7a00 	vstr	s15, [r1]
 800cc4e:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800cc52:	2300      	movs	r3, #0
 800cc54:	600b      	str	r3, [r1, #0]
 800cc56:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800cc5a:	ee76 2a06 	vadd.f32	s5, s12, s12
 800cc5e:	600b      	str	r3, [r1, #0]
 800cc60:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800cc64:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800cc68:	600b      	str	r3, [r1, #0]
 800cc6a:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800cc6e:	edc2 2a00 	vstr	s5, [r2]
 800cc72:	600b      	str	r3, [r1, #0]
 800cc74:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800cc78:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800cc7c:	600b      	str	r3, [r1, #0]
 800cc7e:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800cc82:	a87b      	add	r0, sp, #492	; 0x1ec
 800cc84:	600b      	str	r3, [r1, #0]
 800cc86:	2230      	movs	r2, #48	; 0x30
 800cc88:	2100      	movs	r1, #0
 800cc8a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800cc8e:	934b      	str	r3, [sp, #300]	; 0x12c
 800cc90:	934f      	str	r3, [sp, #316]	; 0x13c
 800cc92:	9353      	str	r3, [sp, #332]	; 0x14c
 800cc94:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800cc98:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800cc9c:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800cca0:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800cca4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800cca8:	942c      	str	r4, [sp, #176]	; 0xb0
 800ccaa:	f00a fc8d 	bl	80175c8 <memset>
 800ccae:	eddb 6a06 	vldr	s13, [fp, #24]
 800ccb2:	ed9b 7a07 	vldr	s14, [fp, #28]
 800ccb6:	eddb 7a08 	vldr	s15, [fp, #32]
 800ccba:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800ccbe:	ee68 6a26 	vmul.f32	s13, s16, s13
 800ccc2:	ee28 7a07 	vmul.f32	s14, s16, s14
 800ccc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ccca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800ccce:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800ccd2:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f043 84a8 	bne.w	801062c <kalman_3gyro.constprop.0+0x3b64>
 800ccdc:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f043 81e7 	bne.w	80100b4 <kalman_3gyro.constprop.0+0x35ec>
 800cce6:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800ccf0:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800ccf4:	9310      	str	r3, [sp, #64]	; 0x40
 800ccf6:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800ccfa:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800ccfe:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800cd02:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd04:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cd08:	edd0 7a00 	vldr	s15, [r0]
 800cd0c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cd10:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cd14:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cd18:	ed93 6a00 	vldr	s12, [r3]
 800cd1c:	ed91 7a00 	vldr	s14, [r1]
 800cd20:	edd2 6a00 	vldr	s13, [r2]
 800cd24:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cd28:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd32:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cd36:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cd3a:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cd3e:	933a      	str	r3, [sp, #232]	; 0xe8
 800cd40:	933b      	str	r3, [sp, #236]	; 0xec
 800cd42:	933c      	str	r3, [sp, #240]	; 0xf0
 800cd44:	933d      	str	r3, [sp, #244]	; 0xf4
 800cd46:	d14e      	bne.n	800cde6 <kalman_3gyro.constprop.0+0x31e>
 800cd48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd50:	d149      	bne.n	800cde6 <kalman_3gyro.constprop.0+0x31e>
 800cd52:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5a:	d144      	bne.n	800cde6 <kalman_3gyro.constprop.0+0x31e>
 800cd5c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd64:	d13f      	bne.n	800cde6 <kalman_3gyro.constprop.0+0x31e>
 800cd66:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cd68:	9336      	str	r3, [sp, #216]	; 0xd8
 800cd6a:	7802      	ldrb	r2, [r0, #0]
 800cd6c:	9337      	str	r3, [sp, #220]	; 0xdc
 800cd6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cd72:	9338      	str	r3, [sp, #224]	; 0xe0
 800cd74:	2300      	movs	r3, #0
 800cd76:	ed90 7a03 	vldr	s14, [r0, #12]
 800cd7a:	edd0 6a01 	vldr	s13, [r0, #4]
 800cd7e:	edd0 7a02 	vldr	s15, [r0, #8]
 800cd82:	9139      	str	r1, [sp, #228]	; 0xe4
 800cd84:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	f003 8568 	beq.w	801085e <kalman_3gyro.constprop.0+0x3d96>
 800cd8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd92:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cd96:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cd9a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cd9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cda2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cda6:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cdaa:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cdae:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cdb8:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cdbc:	f00a fc04 	bl	80175c8 <memset>
 800cdc0:	4b32      	ldr	r3, [pc, #200]	; (800ce8c <kalman_3gyro.constprop.0+0x3c4>)
 800cdc2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cdc6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cdca:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cdce:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cdd2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cdd6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cdda:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cdde:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cde2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800ce90 <kalman_3gyro.constprop.0+0x3c8>
 800cdec:	ed93 7a01 	vldr	s14, [r3, #4]
 800cdf0:	edd3 5a00 	vldr	s11, [r3]
 800cdf4:	edd3 7a02 	vldr	s15, [r3, #8]
 800cdf8:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cdfc:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800ce00:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800ce04:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	f101 8127 	bmi.w	800e05e <kalman_3gyro.constprop.0+0x1596>
 800ce10:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800ce14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce18:	ee79 6a66 	vsub.f32	s13, s18, s13
 800ce1c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800ce20:	eef0 6ae6 	vabs.f32	s13, s13
 800ce24:	ee76 aaea 	vsub.f32	s21, s13, s21
 800ce28:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800ce2c:	ed93 5a04 	vldr	s10, [r3, #16]
 800ce30:	ed93 3a03 	vldr	s6, [r3, #12]
 800ce34:	edd3 1a05 	vldr	s3, [r3, #20]
 800ce38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ce90 <kalman_3gyro.constprop.0+0x3c8>
 800ce3c:	9b04      	ldr	r3, [sp, #16]
 800ce3e:	ed95 ca00 	vldr	s24, [r5]
 800ce42:	ed93 ba00 	vldr	s22, [r3]
 800ce46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4a:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800ce4e:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800ce52:	461e      	mov	r6, r3
 800ce54:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800ce58:	9502      	str	r5, [sp, #8]
 800ce5a:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800ce5e:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800ce62:	9327      	str	r3, [sp, #156]	; 0x9c
 800ce64:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800ce68:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800ce6c:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800ce70:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800ce74:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800ce78:	9501      	str	r5, [sp, #4]
 800ce7a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800ce7e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800ce82:	eee3 6a03 	vfma.f32	s13, s6, s6
 800ce86:	e009      	b.n	800ce9c <kalman_3gyro.constprop.0+0x3d4>
 800ce88:	3a9d4952 	.word	0x3a9d4952
 800ce8c:	40a00000 	.word	0x40a00000
 800ce90:	3c23d70a 	.word	0x3c23d70a
 800ce94:	3dcccccd 	.word	0x3dcccccd
 800ce98:	4b000000 	.word	0x4b000000
 800ce9c:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800cea0:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800cea4:	ee25 8a82 	vmul.f32	s16, s11, s4
 800cea8:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800ceac:	950c      	str	r5, [sp, #48]	; 0x30
 800ceae:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800ceb2:	ee67 fa02 	vmul.f32	s31, s14, s4
 800ceb6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ceba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebe:	bf58      	it	pl
 800cec0:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800cec4:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800cec8:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800cecc:	bf48      	it	mi
 800cece:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800ce94 <kalman_3gyro.constprop.0+0x3cc>
 800ced2:	ed96 6a00 	vldr	s12, [r6]
 800ced6:	edda 4a00 	vldr	s9, [sl]
 800ceda:	ed93 fa00 	vldr	s30, [r3]
 800cede:	ed90 ea00 	vldr	s28, [r0]
 800cee2:	edd4 3a00 	vldr	s7, [r4]
 800cee6:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800ceea:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800ceee:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800cef2:	9617      	str	r6, [sp, #92]	; 0x5c
 800cef4:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800cef8:	961a      	str	r6, [sp, #104]	; 0x68
 800cefa:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800cefe:	9611      	str	r6, [sp, #68]	; 0x44
 800cf00:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800cf04:	9618      	str	r6, [sp, #96]	; 0x60
 800cf06:	9e02      	ldr	r6, [sp, #8]
 800cf08:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800cf12:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cf16:	ee23 3a26 	vmul.f32	s6, s6, s13
 800cf1a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cf1e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800cf22:	edd1 6a00 	vldr	s13, [r1]
 800cf26:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800cf2a:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800cf2e:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800cf32:	edcd 6a05 	vstr	s13, [sp, #20]
 800cf36:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cf3a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800cf3e:	ed92 6a00 	vldr	s12, [r2]
 800cf42:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800cf46:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800cf4a:	edd6 2a00 	vldr	s5, [r6]
 800cf4e:	eddc 4a00 	vldr	s9, [ip]
 800cf52:	9e01      	ldr	r6, [sp, #4]
 800cf54:	edd0 ca00 	vldr	s25, [r0]
 800cf58:	ed96 1a00 	vldr	s2, [r6]
 800cf5c:	9803      	ldr	r0, [sp, #12]
 800cf5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cf60:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800cf64:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800cf68:	eddc 0a00 	vldr	s1, [ip]
 800cf6c:	ed96 da00 	vldr	s26, [r6]
 800cf70:	edd0 4a00 	vldr	s9, [r0]
 800cf74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cf76:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800cf7a:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800cf7e:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800cf82:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800cf86:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800cf8a:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800cf8e:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800cf92:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800cf96:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800cf9a:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800cf9e:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800cfa2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800cfa6:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800cfaa:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800cfae:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800cfb2:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800cfb6:	edd6 4a00 	vldr	s9, [r6]
 800cfba:	edd9 6a00 	vldr	s13, [r9]
 800cfbe:	edde ba00 	vldr	s23, [lr]
 800cfc2:	ed95 4a00 	vldr	s8, [r5]
 800cfc6:	ed94 0a00 	vldr	s0, [r4]
 800cfca:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800cfce:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800cfd2:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800cfd6:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800cfda:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800cfde:	edd9 ea00 	vldr	s29, [r9]
 800cfe2:	edd1 2a00 	vldr	s5, [r1]
 800cfe6:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800cfea:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800cfee:	ed92 1a00 	vldr	s2, [r2]
 800cff2:	edd3 ca00 	vldr	s25, [r3]
 800cff6:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800cffa:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800cffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d000:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d002:	edd3 4a00 	vldr	s9, [r3]
 800d006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d008:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d00c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d010:	edd3 fa00 	vldr	s31, [r3]
 800d014:	eef0 4a6f 	vmov.f32	s9, s31
 800d018:	edd6 fa00 	vldr	s31, [r6]
 800d01c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d01e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d022:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d026:	ed96 3a00 	vldr	s6, [r6]
 800d02a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d02c:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d030:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d034:	eddd 5a06 	vldr	s11, [sp, #24]
 800d038:	edd6 fa00 	vldr	s31, [r6]
 800d03c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d03e:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d042:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d046:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d04a:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d04e:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d052:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d056:	edd8 5a00 	vldr	s11, [r8]
 800d05a:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d05e:	eef0 5a44 	vmov.f32	s11, s8
 800d062:	ed97 4a00 	vldr	s8, [r7]
 800d066:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d06a:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d06e:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d072:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d076:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d07a:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d07e:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d082:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d086:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d08a:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d08e:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d092:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d096:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d09a:	edd6 ca00 	vldr	s25, [r6]
 800d09e:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d0a2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d0a4:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d0a8:	ed96 ea00 	vldr	s28, [r6]
 800d0ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d0ae:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d0b2:	ed96 da00 	vldr	s26, [r6]
 800d0b6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d0b8:	ee7f faac 	vadd.f32	s31, s31, s25
 800d0bc:	edd6 ca00 	vldr	s25, [r6]
 800d0c0:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d0c4:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d0c8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d0ca:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d0ce:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d0d2:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d0d6:	eddd ba05 	vldr	s23, [sp, #20]
 800d0da:	ed96 0a00 	vldr	s0, [r6]
 800d0de:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d0e0:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d0e4:	eeee fa03 	vfma.f32	s31, s28, s6
 800d0e8:	eead 6a03 	vfma.f32	s12, s26, s6
 800d0ec:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d0f0:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d0f4:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d0f8:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800ce94 <kalman_3gyro.constprop.0+0x3cc>
 800d0fc:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d100:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d104:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d108:	ed96 1a00 	vldr	s2, [r6]
 800d10c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d110:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d114:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d118:	ee6f faab 	vmul.f32	s31, s31, s23
 800d11c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d120:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d124:	eddc 0a00 	vldr	s1, [ip]
 800d128:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d12c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d130:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d134:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d138:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d13c:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d140:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d144:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d148:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d14c:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d150:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d154:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d158:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d15c:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d160:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d164:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d168:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d16c:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800ce98 <kalman_3gyro.constprop.0+0x3d0>
 800d170:	eef0 4ac8 	vabs.f32	s9, s16
 800d174:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17c:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d180:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d184:	eef1 caef 	vsqrt.f32	s25, s31
 800d188:	eef1 bae6 	vsqrt.f32	s23, s13
 800d18c:	ee67 daad 	vmul.f32	s27, s15, s27
 800d190:	eeb0 ca45 	vmov.f32	s24, s10
 800d194:	d517      	bpl.n	800d1c6 <kalman_3gyro.constprop.0+0x6fe>
 800d196:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d19a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a2:	f2c1 806f 	blt.w	800e284 <kalman_3gyro.constprop.0+0x17bc>
 800d1a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d1aa:	ee17 0a90 	vmov	r0, s15
 800d1ae:	f7f3 f96f 	bl	8000490 <__aeabi_f2d>
 800d1b2:	ec41 0b10 	vmov	d0, r0, r1
 800d1b6:	f008 fb3f 	bl	8015838 <floor>
 800d1ba:	ec51 0b10 	vmov	r0, r1, d0
 800d1be:	f7f3 fc6f 	bl	8000aa0 <__aeabi_d2f>
 800d1c2:	ee08 0a10 	vmov	s16, r0
 800d1c6:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800ce98 <kalman_3gyro.constprop.0+0x3d0>
 800d1ca:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d1ce:	eef0 6ace 	vabs.f32	s13, s28
 800d1d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1da:	d517      	bpl.n	800d20c <kalman_3gyro.constprop.0+0x744>
 800d1dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1e0:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e8:	f2c1 8040 	blt.w	800e26c <kalman_3gyro.constprop.0+0x17a4>
 800d1ec:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d1f0:	ee17 0a90 	vmov	r0, s15
 800d1f4:	f7f3 f94c 	bl	8000490 <__aeabi_f2d>
 800d1f8:	ec41 0b10 	vmov	d0, r0, r1
 800d1fc:	f008 fb1c 	bl	8015838 <floor>
 800d200:	ec51 0b10 	vmov	r0, r1, d0
 800d204:	f7f3 fc4c 	bl	8000aa0 <__aeabi_d2f>
 800d208:	ee0e 0a10 	vmov	s28, r0
 800d20c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800ce98 <kalman_3gyro.constprop.0+0x3d0>
 800d210:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d214:	eeb0 7aed 	vabs.f32	s14, s27
 800d218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d220:	d517      	bpl.n	800d252 <kalman_3gyro.constprop.0+0x78a>
 800d222:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d226:	eef4 dae7 	vcmpe.f32	s27, s15
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	f2c1 8011 	blt.w	800e254 <kalman_3gyro.constprop.0+0x178c>
 800d232:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d236:	ee17 0a90 	vmov	r0, s15
 800d23a:	f7f3 f929 	bl	8000490 <__aeabi_f2d>
 800d23e:	ec41 0b10 	vmov	d0, r0, r1
 800d242:	f008 faf9 	bl	8015838 <floor>
 800d246:	ec51 0b10 	vmov	r0, r1, d0
 800d24a:	f7f3 fc29 	bl	8000aa0 <__aeabi_d2f>
 800d24e:	ee0d 0a90 	vmov	s27, r0
 800d252:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d256:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d25a:	1e61      	subs	r1, r4, #1
 800d25c:	b249      	sxtb	r1, r1
 800d25e:	2900      	cmp	r1, #0
 800d260:	dd1a      	ble.n	800d298 <kalman_3gyro.constprop.0+0x7d0>
 800d262:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d266:	1ea0      	subs	r0, r4, #2
 800d268:	0089      	lsls	r1, r1, #2
 800d26a:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d26e:	b2c0      	uxtb	r0, r0
 800d270:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d274:	440a      	add	r2, r1
 800d276:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d27a:	445b      	add	r3, fp
 800d27c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d280:	6819      	ldr	r1, [r3, #0]
 800d282:	6858      	ldr	r0, [r3, #4]
 800d284:	60d9      	str	r1, [r3, #12]
 800d286:	6899      	ldr	r1, [r3, #8]
 800d288:	6118      	str	r0, [r3, #16]
 800d28a:	6159      	str	r1, [r3, #20]
 800d28c:	3b0c      	subs	r3, #12
 800d28e:	4293      	cmp	r3, r2
 800d290:	d1f6      	bne.n	800d280 <kalman_3gyro.constprop.0+0x7b8>
 800d292:	9b04      	ldr	r3, [sp, #16]
 800d294:	ed93 ba00 	vldr	s22, [r3]
 800d298:	ed88 8a00 	vstr	s16, [r8]
 800d29c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2a0:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d2a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d2a6:	ed83 ea00 	vstr	s28, [r3]
 800d2aa:	9b01      	ldr	r3, [sp, #4]
 800d2ac:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d2b0:	edc3 da00 	vstr	s27, [r3]
 800d2b4:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	429c      	cmp	r4, r3
 800d2be:	bf28      	it	cs
 800d2c0:	461c      	movcs	r4, r3
 800d2c2:	9b08      	ldr	r3, [sp, #32]
 800d2c4:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d2c8:	edd3 da03 	vldr	s27, [r3, #12]
 800d2cc:	ed93 ba04 	vldr	s22, [r3, #16]
 800d2d0:	edd3 6a05 	vldr	s13, [r3, #20]
 800d2d4:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d2d8:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d2dc:	eeb0 7aed 	vabs.f32	s14, s27
 800d2e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e8:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d2ec:	d517      	bpl.n	800d31e <kalman_3gyro.constprop.0+0x856>
 800d2ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2f2:	eef4 dae7 	vcmpe.f32	s27, s15
 800d2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fa:	f2c0 879f 	blt.w	800e23c <kalman_3gyro.constprop.0+0x1774>
 800d2fe:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d302:	ee17 0a90 	vmov	r0, s15
 800d306:	f7f3 f8c3 	bl	8000490 <__aeabi_f2d>
 800d30a:	ec41 0b10 	vmov	d0, r0, r1
 800d30e:	f008 fa93 	bl	8015838 <floor>
 800d312:	ec51 0b10 	vmov	r0, r1, d0
 800d316:	f7f3 fbc3 	bl	8000aa0 <__aeabi_d2f>
 800d31a:	ee0d 0a90 	vmov	s27, r0
 800d31e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d322:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d326:	eeb0 7acb 	vabs.f32	s14, s22
 800d32a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d332:	d517      	bpl.n	800d364 <kalman_3gyro.constprop.0+0x89c>
 800d334:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d338:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d340:	f2c0 8770 	blt.w	800e224 <kalman_3gyro.constprop.0+0x175c>
 800d344:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d348:	ee17 0a90 	vmov	r0, s15
 800d34c:	f7f3 f8a0 	bl	8000490 <__aeabi_f2d>
 800d350:	ec41 0b10 	vmov	d0, r0, r1
 800d354:	f008 fa70 	bl	8015838 <floor>
 800d358:	ec51 0b10 	vmov	r0, r1, d0
 800d35c:	f7f3 fba0 	bl	8000aa0 <__aeabi_d2f>
 800d360:	ee0b 0a10 	vmov	s22, r0
 800d364:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d368:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d36c:	eeb0 7ac8 	vabs.f32	s14, s16
 800d370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d378:	d517      	bpl.n	800d3aa <kalman_3gyro.constprop.0+0x8e2>
 800d37a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d37e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	f2c0 8741 	blt.w	800e20c <kalman_3gyro.constprop.0+0x1744>
 800d38a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d38e:	ee17 0a90 	vmov	r0, s15
 800d392:	f7f3 f87d 	bl	8000490 <__aeabi_f2d>
 800d396:	ec41 0b10 	vmov	d0, r0, r1
 800d39a:	f008 fa4d 	bl	8015838 <floor>
 800d39e:	ec51 0b10 	vmov	r0, r1, d0
 800d3a2:	f7f3 fb7d 	bl	8000aa0 <__aeabi_d2f>
 800d3a6:	ee08 0a10 	vmov	s16, r0
 800d3aa:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d3ae:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d3b2:	1e61      	subs	r1, r4, #1
 800d3b4:	b249      	sxtb	r1, r1
 800d3b6:	2900      	cmp	r1, #0
 800d3b8:	dd17      	ble.n	800d3ea <kalman_3gyro.constprop.0+0x922>
 800d3ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d3be:	1ea2      	subs	r2, r4, #2
 800d3c0:	0089      	lsls	r1, r1, #2
 800d3c2:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d3c6:	b2d2      	uxtb	r2, r2
 800d3c8:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d3cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3d0:	4401      	add	r1, r0
 800d3d2:	445b      	add	r3, fp
 800d3d4:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	6858      	ldr	r0, [r3, #4]
 800d3dc:	60da      	str	r2, [r3, #12]
 800d3de:	689a      	ldr	r2, [r3, #8]
 800d3e0:	6118      	str	r0, [r3, #16]
 800d3e2:	615a      	str	r2, [r3, #20]
 800d3e4:	3b0c      	subs	r3, #12
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	d1f6      	bne.n	800d3d8 <kalman_3gyro.constprop.0+0x910>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	edc7 da00 	vstr	s27, [r7]
 800d3f0:	ed83 ba00 	vstr	s22, [r3]
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d3fa:	ed83 8a00 	vstr	s16, [r3]
 800d3fe:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d402:	3301      	adds	r3, #1
 800d404:	b2db      	uxtb	r3, r3
 800d406:	429c      	cmp	r4, r3
 800d408:	bf28      	it	cs
 800d40a:	461c      	movcs	r4, r3
 800d40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d40e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d412:	ed93 7a00 	vldr	s14, [r3]
 800d416:	9b08      	ldr	r3, [sp, #32]
 800d418:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d41c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d420:	edd3 da06 	vldr	s27, [r3, #24]
 800d424:	ed93 ba07 	vldr	s22, [r3, #28]
 800d428:	edd3 6a08 	vldr	s13, [r3, #32]
 800d42c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d430:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d434:	eeb0 7aed 	vabs.f32	s14, s27
 800d438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d440:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d444:	d517      	bpl.n	800d476 <kalman_3gyro.constprop.0+0x9ae>
 800d446:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d44a:	eef4 dae7 	vcmpe.f32	s27, s15
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	f2c0 86cf 	blt.w	800e1f4 <kalman_3gyro.constprop.0+0x172c>
 800d456:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d45a:	ee17 0a90 	vmov	r0, s15
 800d45e:	f7f3 f817 	bl	8000490 <__aeabi_f2d>
 800d462:	ec41 0b10 	vmov	d0, r0, r1
 800d466:	f008 f9e7 	bl	8015838 <floor>
 800d46a:	ec51 0b10 	vmov	r0, r1, d0
 800d46e:	f7f3 fb17 	bl	8000aa0 <__aeabi_d2f>
 800d472:	ee0d 0a90 	vmov	s27, r0
 800d476:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d47a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d47e:	eeb0 7acb 	vabs.f32	s14, s22
 800d482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	d517      	bpl.n	800d4bc <kalman_3gyro.constprop.0+0x9f4>
 800d48c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d490:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d498:	f2c0 86a0 	blt.w	800e1dc <kalman_3gyro.constprop.0+0x1714>
 800d49c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d4a0:	ee17 0a90 	vmov	r0, s15
 800d4a4:	f7f2 fff4 	bl	8000490 <__aeabi_f2d>
 800d4a8:	ec41 0b10 	vmov	d0, r0, r1
 800d4ac:	f008 f9c4 	bl	8015838 <floor>
 800d4b0:	ec51 0b10 	vmov	r0, r1, d0
 800d4b4:	f7f3 faf4 	bl	8000aa0 <__aeabi_d2f>
 800d4b8:	ee0b 0a10 	vmov	s22, r0
 800d4bc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d544 <kalman_3gyro.constprop.0+0xa7c>
 800d4c0:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d4c4:	eeb0 7ac8 	vabs.f32	s14, s16
 800d4c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	d517      	bpl.n	800d502 <kalman_3gyro.constprop.0+0xa3a>
 800d4d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	f2c0 8671 	blt.w	800e1c4 <kalman_3gyro.constprop.0+0x16fc>
 800d4e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d4e6:	ee17 0a90 	vmov	r0, s15
 800d4ea:	f7f2 ffd1 	bl	8000490 <__aeabi_f2d>
 800d4ee:	ec41 0b10 	vmov	d0, r0, r1
 800d4f2:	f008 f9a1 	bl	8015838 <floor>
 800d4f6:	ec51 0b10 	vmov	r0, r1, d0
 800d4fa:	f7f3 fad1 	bl	8000aa0 <__aeabi_d2f>
 800d4fe:	ee08 0a10 	vmov	s16, r0
 800d502:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d506:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d50a:	1e63      	subs	r3, r4, #1
 800d50c:	b25b      	sxtb	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	dd1c      	ble.n	800d54c <kalman_3gyro.constprop.0+0xa84>
 800d512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d516:	1ea2      	subs	r2, r4, #2
 800d518:	0099      	lsls	r1, r3, #2
 800d51a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d51e:	b2d2      	uxtb	r2, r2
 800d520:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d524:	4408      	add	r0, r1
 800d526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d52a:	445b      	add	r3, fp
 800d52c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	6859      	ldr	r1, [r3, #4]
 800d534:	60da      	str	r2, [r3, #12]
 800d536:	689a      	ldr	r2, [r3, #8]
 800d538:	6119      	str	r1, [r3, #16]
 800d53a:	615a      	str	r2, [r3, #20]
 800d53c:	3b0c      	subs	r3, #12
 800d53e:	4283      	cmp	r3, r0
 800d540:	d1f6      	bne.n	800d530 <kalman_3gyro.constprop.0+0xa68>
 800d542:	e003      	b.n	800d54c <kalman_3gyro.constprop.0+0xa84>
 800d544:	4b000000 	.word	0x4b000000
 800d548:	00000000 	.word	0x00000000
 800d54c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d54e:	edc3 da00 	vstr	s27, [r3]
 800d552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d554:	ed83 ba00 	vstr	s22, [r3]
 800d558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d55a:	ed83 8a00 	vstr	s16, [r3]
 800d55e:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d562:	3301      	adds	r3, #1
 800d564:	b2db      	uxtb	r3, r3
 800d566:	429c      	cmp	r4, r3
 800d568:	bf28      	it	cs
 800d56a:	461c      	movcs	r4, r3
 800d56c:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d570:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d574:	aa54      	add	r2, sp, #336	; 0x150
 800d576:	a92d      	add	r1, sp, #180	; 0xb4
 800d578:	a830      	add	r0, sp, #192	; 0xc0
 800d57a:	461c      	mov	r4, r3
 800d57c:	9314      	str	r3, [sp, #80]	; 0x50
 800d57e:	f7fe fa27 	bl	800b9d0 <getRotationMatrix>
 800d582:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d586:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d58a:	6820      	ldr	r0, [r4, #0]
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	68a2      	ldr	r2, [r4, #8]
 800d590:	68e3      	ldr	r3, [r4, #12]
 800d592:	4635      	mov	r5, r6
 800d594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d596:	3410      	adds	r4, #16
 800d598:	42bc      	cmp	r4, r7
 800d59a:	462e      	mov	r6, r5
 800d59c:	d1f5      	bne.n	800d58a <kalman_3gyro.constprop.0+0xac2>
 800d59e:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d5a2:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d5a6:	6820      	ldr	r0, [r4, #0]
 800d5a8:	6028      	str	r0, [r5, #0]
 800d5aa:	eef0 7ae7 	vabs.f32	s15, s15
 800d5ae:	eeb0 7ac7 	vabs.f32	s14, s14
 800d5b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ba:	f140 85a4 	bpl.w	800e106 <kalman_3gyro.constprop.0+0x163e>
 800d5be:	2303      	movs	r3, #3
 800d5c0:	2706      	movs	r7, #6
 800d5c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d5c6:	2604      	movs	r6, #4
 800d5c8:	2400      	movs	r4, #0
 800d5ca:	eef0 7a47 	vmov.f32	s15, s14
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	46a2      	mov	sl, r4
 800d5d2:	2107      	movs	r1, #7
 800d5d4:	f04f 0c01 	mov.w	ip, #1
 800d5d8:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d5dc:	eeb0 7ac7 	vabs.f32	s14, s14
 800d5e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e8:	f340 85ae 	ble.w	800e148 <kalman_3gyro.constprop.0+0x1680>
 800d5ec:	2304      	movs	r3, #4
 800d5ee:	2007      	movs	r0, #7
 800d5f0:	2108      	movs	r1, #8
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	461c      	mov	r4, r3
 800d5f6:	9002      	str	r0, [sp, #8]
 800d5f8:	460a      	mov	r2, r1
 800d5fa:	2306      	movs	r3, #6
 800d5fc:	2003      	movs	r0, #3
 800d5fe:	2605      	movs	r6, #5
 800d600:	f04f 0800 	mov.w	r8, #0
 800d604:	f04f 0a01 	mov.w	sl, #1
 800d608:	f04f 0c02 	mov.w	ip, #2
 800d60c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d60e:	442c      	add	r4, r5
 800d610:	442a      	add	r2, r5
 800d612:	edd4 6a00 	vldr	s13, [r4]
 800d616:	ed92 7a00 	vldr	s14, [r2]
 800d61a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d61e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d622:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d626:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d62a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d62e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d632:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d636:	970c      	str	r7, [sp, #48]	; 0x30
 800d638:	9f01      	ldr	r7, [sp, #4]
 800d63a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d63e:	00b6      	lsls	r6, r6, #2
 800d640:	960a      	str	r6, [sp, #40]	; 0x28
 800d642:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d646:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d64a:	edc4 7a00 	vstr	s15, [r4]
 800d64e:	edd2 7a00 	vldr	s15, [r2]
 800d652:	ed99 7a00 	vldr	s14, [r9]
 800d656:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d65a:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d65e:	9204      	str	r2, [sp, #16]
 800d660:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d664:	9205      	str	r2, [sp, #20]
 800d666:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d66a:	9209      	str	r2, [sp, #36]	; 0x24
 800d66c:	00ba      	lsls	r2, r7, #2
 800d66e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d670:	9206      	str	r2, [sp, #24]
 800d672:	0080      	lsls	r0, r0, #2
 800d674:	9003      	str	r0, [sp, #12]
 800d676:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d67a:	0089      	lsls	r1, r1, #2
 800d67c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d67e:	edc9 6a00 	vstr	s13, [r9]
 800d682:	ed94 6a00 	vldr	s12, [r4]
 800d686:	ed97 7a00 	vldr	s14, [r7]
 800d68a:	edd5 7a00 	vldr	s15, [r5]
 800d68e:	9902      	ldr	r1, [sp, #8]
 800d690:	9a02      	ldr	r2, [sp, #8]
 800d692:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d696:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d69a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d69e:	0092      	lsls	r2, r2, #2
 800d6a0:	edc5 7a00 	vstr	s15, [r5]
 800d6a4:	ed97 7a00 	vldr	s14, [r7]
 800d6a8:	edde 7a00 	vldr	s15, [lr]
 800d6ac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	edce 7a00 	vstr	s15, [lr]
 800d6b6:	edd0 5a00 	vldr	s11, [r0]
 800d6ba:	ed91 7a00 	vldr	s14, [r1]
 800d6be:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d6c2:	eef0 7ae7 	vabs.f32	s15, s15
 800d6c6:	ed81 7a00 	vstr	s14, [r1]
 800d6ca:	ed90 6a00 	vldr	s12, [r0]
 800d6ce:	ed96 7a00 	vldr	s14, [r6]
 800d6d2:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d6d6:	ed86 7a00 	vstr	s14, [r6]
 800d6da:	ed95 7a00 	vldr	s14, [r5]
 800d6de:	eeb0 7ac7 	vabs.f32	s14, s14
 800d6e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ea:	dd10      	ble.n	800d70e <kalman_3gyro.constprop.0+0xc46>
 800d6ec:	4652      	mov	r2, sl
 800d6ee:	46c2      	mov	sl, r8
 800d6f0:	4690      	mov	r8, r2
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	9b01      	ldr	r3, [sp, #4]
 800d6f6:	9902      	ldr	r1, [sp, #8]
 800d6f8:	9803      	ldr	r0, [sp, #12]
 800d6fa:	9006      	str	r0, [sp, #24]
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	008b      	lsls	r3, r1, #2
 800d702:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d706:	9105      	str	r1, [sp, #20]
 800d708:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d70c:	9104      	str	r1, [sp, #16]
 800d70e:	9903      	ldr	r1, [sp, #12]
 800d710:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d714:	4401      	add	r1, r0
 800d716:	460c      	mov	r4, r1
 800d718:	9906      	ldr	r1, [sp, #24]
 800d71a:	ed94 7a00 	vldr	s14, [r4]
 800d71e:	4401      	add	r1, r0
 800d720:	edd1 7a00 	vldr	s15, [r1]
 800d724:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d728:	4608      	mov	r0, r1
 800d72a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d72e:	440a      	add	r2, r1
 800d730:	440b      	add	r3, r1
 800d732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d734:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d738:	4429      	add	r1, r5
 800d73a:	460d      	mov	r5, r1
 800d73c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d73e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d742:	4431      	add	r1, r6
 800d744:	468e      	mov	lr, r1
 800d746:	ed84 3a00 	vstr	s6, [r4]
 800d74a:	ed92 7a00 	vldr	s14, [r2]
 800d74e:	edd3 7a00 	vldr	s15, [r3]
 800d752:	9904      	ldr	r1, [sp, #16]
 800d754:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d758:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d75c:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d760:	440e      	add	r6, r1
 800d762:	1879      	adds	r1, r7, r1
 800d764:	edc3 7a00 	vstr	s15, [r3]
 800d768:	9101      	str	r1, [sp, #4]
 800d76a:	9b05      	ldr	r3, [sp, #20]
 800d76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d76e:	edd2 0a00 	vldr	s1, [r2]
 800d772:	ed95 1a00 	vldr	s2, [r5]
 800d776:	ed9e 2a00 	vldr	s4, [lr]
 800d77a:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d77e:	edd6 6a00 	vldr	s13, [r6]
 800d782:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d786:	1874      	adds	r4, r6, r1
 800d788:	18f7      	adds	r7, r6, r3
 800d78a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d78e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d792:	eb06 0903 	add.w	r9, r6, r3
 800d796:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d79a:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d79e:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d7a2:	4633      	mov	r3, r6
 800d7a4:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d7a8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d7ac:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d7b0:	448c      	add	ip, r1
 800d7b2:	9901      	ldr	r1, [sp, #4]
 800d7b4:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d7b8:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d7bc:	ed94 7a00 	vldr	s14, [r4]
 800d7c0:	ed93 6a00 	vldr	s12, [r3]
 800d7c4:	edd0 7a00 	vldr	s15, [r0]
 800d7c8:	ed99 8a00 	vldr	s16, [r9]
 800d7cc:	ed91 ba00 	vldr	s22, [r1]
 800d7d0:	ed97 4a00 	vldr	s8, [r7]
 800d7d4:	edd6 4a00 	vldr	s9, [r6]
 800d7d8:	eddc da00 	vldr	s27, [ip]
 800d7dc:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d7e0:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d7e4:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d7e8:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d7ec:	46a2      	mov	sl, r4
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d7f4:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d7f8:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d7fc:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d800:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d804:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d808:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d80c:	ed94 5a00 	vldr	s10, [r4]
 800d810:	edda 3a00 	vldr	s7, [sl]
 800d814:	edd2 5a00 	vldr	s11, [r2]
 800d818:	edd3 7a00 	vldr	s15, [r3]
 800d81c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d820:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d824:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d828:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d82c:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d830:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d834:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d838:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d83c:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d840:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d844:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d848:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d84c:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d850:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d854:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d858:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d85c:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d860:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d864:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d868:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d86c:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d870:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d874:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d878:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d87c:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d880:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d884:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d888:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d88c:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d890:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d898:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d89c:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d8a0:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d8a4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d8a8:	bfc8      	it	gt
 800d8aa:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d8ae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d8b2:	bfcc      	ite	gt
 800d8b4:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d8b8:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d548 <kalman_3gyro.constprop.0+0xa80>
 800d8bc:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c4:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d8c8:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d8cc:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d8d0:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d8d4:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d8d8:	f100 84e4 	bmi.w	800e2a4 <kalman_3gyro.constprop.0+0x17dc>
 800d8dc:	bfd8      	it	le
 800d8de:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d8e2:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d8e6:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d8ea:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d8ee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d8f2:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8fa:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d8fe:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d902:	bf84      	itt	hi
 800d904:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d908:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d90c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d910:	bf8c      	ite	hi
 800d912:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d916:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800dc98 <kalman_3gyro.constprop.0+0x11d0>
 800d91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d91e:	f100 84bd 	bmi.w	800e29c <kalman_3gyro.constprop.0+0x17d4>
 800d922:	bfd8      	it	le
 800d924:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d928:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d92c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d934:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d940:	bf84      	itt	hi
 800d942:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d946:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d94a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d94e:	bf8c      	ite	hi
 800d950:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d954:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800dc98 <kalman_3gyro.constprop.0+0x11d0>
 800d958:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d960:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d964:	f102 8399 	bmi.w	801009a <kalman_3gyro.constprop.0+0x35d2>
 800d968:	bfd8      	it	le
 800d96a:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d96e:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d972:	1e53      	subs	r3, r2, #1
 800d974:	b25b      	sxtb	r3, r3
 800d976:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d980:	dd1c      	ble.n	800d9bc <kalman_3gyro.constprop.0+0xef4>
 800d982:	3a02      	subs	r2, #2
 800d984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d988:	b2d2      	uxtb	r2, r2
 800d98a:	f1ab 000c 	sub.w	r0, fp, #12
 800d98e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d992:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d996:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d99a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d99e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d9a2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d9a6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d9aa:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d9ae:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d9b2:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d9b6:	3b0c      	subs	r3, #12
 800d9b8:	4283      	cmp	r3, r0
 800d9ba:	d1f0      	bne.n	800d99e <kalman_3gyro.constprop.0+0xed6>
 800d9bc:	eddd 6a07 	vldr	s13, [sp, #28]
 800d9c0:	4ab6      	ldr	r2, [pc, #728]	; (800dc9c <kalman_3gyro.constprop.0+0x11d4>)
 800d9c2:	4bb7      	ldr	r3, [pc, #732]	; (800dca0 <kalman_3gyro.constprop.0+0x11d8>)
 800d9c4:	ed92 8a00 	vldr	s16, [r2]
 800d9c8:	ed93 ba00 	vldr	s22, [r3]
 800d9cc:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d9d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d9d4:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d9d8:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d9dc:	f1c1 0101 	rsb	r1, r1, #1
 800d9e0:	910c      	str	r1, [sp, #48]	; 0x30
 800d9e2:	a92d      	add	r1, sp, #180	; 0xb4
 800d9e4:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d9e8:	9123      	str	r1, [sp, #140]	; 0x8c
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	9109      	str	r1, [sp, #36]	; 0x24
 800d9ee:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d9f2:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d9f6:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d9fa:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d9fe:	ee37 7a07 	vadd.f32	s14, s14, s14
 800da02:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800da06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800da0e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800da12:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800da16:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800da1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800da20:	3301      	adds	r3, #1
 800da22:	9309      	str	r3, [sp, #36]	; 0x24
 800da24:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800da28:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800da2c:	18e0      	adds	r0, r4, r3
 800da2e:	f803 0f01 	strb.w	r0, [r3, #1]!
 800da32:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800da36:	f841 0b04 	str.w	r0, [r1], #4
 800da3a:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800da3e:	4298      	cmp	r0, r3
 800da40:	f102 020c 	add.w	r2, r2, #12
 800da44:	d1f2      	bne.n	800da2c <kalman_3gyro.constprop.0+0xf64>
 800da46:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800da4a:	ed93 7a00 	vldr	s14, [r3]
 800da4e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800da52:	edd3 7a00 	vldr	s15, [r3]
 800da56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	bf84      	itt	hi
 800da60:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800da64:	f8a9 3000 	strhhi.w	r3, [r9]
 800da68:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800da6c:	ed93 7a00 	vldr	s14, [r3]
 800da70:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800da74:	edd3 7a00 	vldr	s15, [r3]
 800da78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	bf84      	itt	hi
 800da82:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800da86:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800da8a:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800da8e:	ed93 7a00 	vldr	s14, [r3]
 800da92:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800da96:	edd3 7a00 	vldr	s15, [r3]
 800da9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa2:	bf84      	itt	hi
 800daa4:	f240 5306 	movwhi	r3, #1286	; 0x506
 800daa8:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800daac:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800dab0:	ed93 7a00 	vldr	s14, [r3]
 800dab4:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800dab8:	edd3 7a00 	vldr	s15, [r3]
 800dabc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac4:	bf84      	itt	hi
 800dac6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800daca:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800dace:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800dad2:	ed93 7a00 	vldr	s14, [r3]
 800dad6:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800dada:	edd3 7a00 	vldr	s15, [r3]
 800dade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	bf84      	itt	hi
 800dae8:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800daec:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800daf0:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800daf4:	ed93 7a00 	vldr	s14, [r3]
 800daf8:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800dafc:	edd3 7a00 	vldr	s15, [r3]
 800db00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db08:	bf84      	itt	hi
 800db0a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800db0e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800db12:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800db16:	ed93 7a00 	vldr	s14, [r3]
 800db1a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800db1e:	edd3 7a00 	vldr	s15, [r3]
 800db22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2a:	bf84      	itt	hi
 800db2c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800db30:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800db34:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800db38:	ed93 7a00 	vldr	s14, [r3]
 800db3c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800db40:	edd3 7a00 	vldr	s15, [r3]
 800db44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4c:	bf84      	itt	hi
 800db4e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800db52:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800db56:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800db5a:	ed93 7a00 	vldr	s14, [r3]
 800db5e:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800db62:	edd3 7a00 	vldr	s15, [r3]
 800db66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6e:	bf84      	itt	hi
 800db70:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800db74:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800db78:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800db7c:	ed93 7a00 	vldr	s14, [r3]
 800db80:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800db84:	edd3 7a00 	vldr	s15, [r3]
 800db88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db90:	bf84      	itt	hi
 800db92:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800db96:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800db9a:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800db9e:	ed93 7a00 	vldr	s14, [r3]
 800dba2:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800dba6:	edd3 7a00 	vldr	s15, [r3]
 800dbaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb2:	bf84      	itt	hi
 800dbb4:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800dbb8:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800dbbc:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800dbc0:	ed93 7a00 	vldr	s14, [r3]
 800dbc4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800dbc8:	edd3 7a00 	vldr	s15, [r3]
 800dbcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd4:	bf84      	itt	hi
 800dbd6:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800dbda:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800dbde:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800dbe2:	ed93 7a00 	vldr	s14, [r3]
 800dbe6:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800dbea:	edd3 7a00 	vldr	s15, [r3]
 800dbee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf6:	bf84      	itt	hi
 800dbf8:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800dbfc:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800dc00:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800dc04:	ed93 7a00 	vldr	s14, [r3]
 800dc08:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800dc0c:	edd3 7a00 	vldr	s15, [r3]
 800dc10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc18:	bf84      	itt	hi
 800dc1a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800dc1e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800dc22:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800dc26:	ed93 7a00 	vldr	s14, [r3]
 800dc2a:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800dc2e:	edd3 7a00 	vldr	s15, [r3]
 800dc32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3a:	bf84      	itt	hi
 800dc3c:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800dc40:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800dc44:	221e      	movs	r2, #30
 800dc46:	2101      	movs	r1, #1
 800dc48:	4650      	mov	r0, sl
 800dc4a:	f009 fcbd 	bl	80175c8 <memset>
 800dc4e:	2304      	movs	r3, #4
 800dc50:	9307      	str	r3, [sp, #28]
 800dc52:	2302      	movs	r3, #2
 800dc54:	9305      	str	r3, [sp, #20]
 800dc56:	9b05      	ldr	r3, [sp, #20]
 800dc58:	9306      	str	r3, [sp, #24]
 800dc5a:	1c5f      	adds	r7, r3, #1
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	f04f 0b01 	mov.w	fp, #1
 800dc64:	9b05      	ldr	r3, [sp, #20]
 800dc66:	f8cd b004 	str.w	fp, [sp, #4]
 800dc6a:	445b      	add	r3, fp
 800dc6c:	2b1f      	cmp	r3, #31
 800dc6e:	bfa8      	it	ge
 800dc70:	231f      	movge	r3, #31
 800dc72:	465a      	mov	r2, fp
 800dc74:	eba3 0802 	sub.w	r8, r3, r2
 800dc78:	f1b8 0f00 	cmp.w	r8, #0
 800dc7c:	469b      	mov	fp, r3
 800dc7e:	f107 35ff 	add.w	r5, r7, #4294967295
 800dc82:	dd44      	ble.n	800dd0e <kalman_3gyro.constprop.0+0x1246>
 800dc84:	f10b 33ff 	add.w	r3, fp, #4294967295
 800dc88:	9302      	str	r3, [sp, #8]
 800dc8a:	f1ab 0302 	sub.w	r3, fp, #2
 800dc8e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800dc92:	4616      	mov	r6, r2
 800dc94:	2400      	movs	r4, #0
 800dc96:	e00f      	b.n	800dcb8 <kalman_3gyro.constprop.0+0x11f0>
 800dc98:	00000000 	.word	0x00000000
 800dc9c:	20001a64 	.word	0x20001a64
 800dca0:	20001a74 	.word	0x20001a74
 800dca4:	3f333333 	.word	0x3f333333
 800dca8:	3f4ccccd 	.word	0x3f4ccccd
 800dcac:	3f666666 	.word	0x3f666666
 800dcb0:	3ecccccc 	.word	0x3ecccccc
 800dcb4:	3dcccccd 	.word	0x3dcccccd
 800dcb8:	1e71      	subs	r1, r6, #1
 800dcba:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800dcbe:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800dcc2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dcc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dcca:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800dcce:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dcd2:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800dcd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcde:	f105 0c02 	add.w	ip, r5, #2
 800dce2:	f105 0801 	add.w	r8, r5, #1
 800dce6:	f240 81d3 	bls.w	800e090 <kalman_3gyro.constprop.0+0x15c8>
 800dcea:	45e3      	cmp	fp, ip
 800dcec:	f80a 0004 	strb.w	r0, [sl, r4]
 800dcf0:	f000 81bf 	beq.w	800e072 <kalman_3gyro.constprop.0+0x15aa>
 800dcf4:	4645      	mov	r5, r8
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	3401      	adds	r4, #1
 800dcfa:	42a3      	cmp	r3, r4
 800dcfc:	dcdc      	bgt.n	800dcb8 <kalman_3gyro.constprop.0+0x11f0>
 800dcfe:	4698      	mov	r8, r3
 800dd00:	9b01      	ldr	r3, [sp, #4]
 800dd02:	1e58      	subs	r0, r3, #1
 800dd04:	4448      	add	r0, r9
 800dd06:	4642      	mov	r2, r8
 800dd08:	4651      	mov	r1, sl
 800dd0a:	f009 fc4f 	bl	80175ac <memcpy>
 800dd0e:	9b06      	ldr	r3, [sp, #24]
 800dd10:	eb0b 0703 	add.w	r7, fp, r3
 800dd14:	2f1e      	cmp	r7, #30
 800dd16:	dda5      	ble.n	800dc64 <kalman_3gyro.constprop.0+0x119c>
 800dd18:	9b07      	ldr	r3, [sp, #28]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	9307      	str	r3, [sp, #28]
 800dd1e:	d19a      	bne.n	800dc56 <kalman_3gyro.constprop.0+0x118e>
 800dd20:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800dd24:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800dd28:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dd2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dd30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dd34:	ed52 7a01 	vldr	s15, [r2, #-4]
 800dd38:	ed13 7a01 	vldr	s14, [r3, #-4]
 800dd3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd44:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dd48:	460a      	mov	r2, r1
 800dd4a:	bf4c      	ite	mi
 800dd4c:	2201      	movmi	r2, #1
 800dd4e:	2200      	movpl	r2, #0
 800dd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd54:	bf4c      	ite	mi
 800dd56:	2301      	movmi	r3, #1
 800dd58:	2300      	movpl	r3, #0
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	f000 81b4 	beq.w	800e0c8 <kalman_3gyro.constprop.0+0x1600>
 800dd60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd6e:	ece3 7a01 	vstmia	r3!, {s15}
 800dd72:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd76:	3304      	adds	r3, #4
 800dd78:	930a      	str	r3, [sp, #40]	; 0x28
 800dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	f47f ae4c 	bne.w	800da1a <kalman_3gyro.constprop.0+0xf52>
 800dd82:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800dd86:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800dd8a:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800dd8e:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800dca4 <kalman_3gyro.constprop.0+0x11dc>
 800dd92:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800dd96:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800dca8 <kalman_3gyro.constprop.0+0x11e0>
 800dd9a:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800dd9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dda2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800dda6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ddaa:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800ddae:	eee6 7a06 	vfma.f32	s15, s12, s12
 800ddb2:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800ddb6:	eeb0 6a67 	vmov.f32	s12, s15
 800ddba:	edcd 7a03 	vstr	s15, [sp, #12]
 800ddbe:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800ddc2:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800ddc6:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800ddca:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800ddce:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800ddd2:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800ddd6:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800ddda:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ddde:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800dde2:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800dde6:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800ddea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ddee:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800ddf2:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ddf6:	ee25 7a07 	vmul.f32	s14, s10, s14
 800ddfa:	ed8d 5a02 	vstr	s10, [sp, #8]
 800ddfe:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800de02:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800de06:	2b00      	cmp	r3, #0
 800de08:	f040 81a4 	bne.w	800e154 <kalman_3gyro.constprop.0+0x168c>
 800de0c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800de10:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800de14:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800de18:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800de1c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800de20:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800de24:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800de28:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800de2c:	f8c8 3020 	str.w	r3, [r8, #32]
 800de30:	ed88 7a07 	vstr	s14, [r8, #28]
 800de34:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800de38:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800de3c:	ed93 7a00 	vldr	s14, [r3]
 800de40:	ed92 8a00 	vldr	s16, [r2]
 800de44:	eddb ea02 	vldr	s29, [fp, #8]
 800de48:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800de4c:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800de50:	ed92 5a00 	vldr	s10, [r2]
 800de54:	ee28 8a07 	vmul.f32	s16, s16, s14
 800de58:	ed93 7a00 	vldr	s14, [r3]
 800de5c:	eea5 8a07 	vfma.f32	s16, s10, s14
 800de60:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800de64:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800de68:	ed92 5a00 	vldr	s10, [r2]
 800de6c:	ed93 7a00 	vldr	s14, [r3]
 800de70:	eea5 8a07 	vfma.f32	s16, s10, s14
 800de74:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800de78:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800de7c:	ed92 5a00 	vldr	s10, [r2]
 800de80:	ed93 7a00 	vldr	s14, [r3]
 800de84:	eea5 8a07 	vfma.f32	s16, s10, s14
 800de88:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800de8c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800de90:	ed92 5a00 	vldr	s10, [r2]
 800de94:	ed93 7a00 	vldr	s14, [r3]
 800de98:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800de9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dea4:	f340 8232 	ble.w	800e30c <kalman_3gyro.constprop.0+0x1844>
 800dea8:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800deac:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800deb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb4:	f100 815e 	bmi.w	800e174 <kalman_3gyro.constprop.0+0x16ac>
 800deb8:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800debc:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800dec0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec8:	f142 84bd 	bpl.w	8010846 <kalman_3gyro.constprop.0+0x3d7e>
 800decc:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800ded0:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	f342 850a 	ble.w	80108f0 <kalman_3gyro.constprop.0+0x3e28>
 800dedc:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800dee0:	eef4 2ac8 	vcmpe.f32	s5, s16
 800dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee8:	f342 86c5 	ble.w	8010c76 <kalman_3gyro.constprop.0+0x41ae>
 800deec:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800def0:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800def4:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800def8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800defc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800df00:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800df04:	ee24 4a03 	vmul.f32	s8, s8, s6
 800df08:	eef4 4ac8 	vcmpe.f32	s9, s16
 800df0c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800df10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df14:	ee3e ea23 	vadd.f32	s28, s28, s7
 800df18:	f202 86c5 	bhi.w	8010ca6 <kalman_3gyro.constprop.0+0x41de>
 800df1c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800df20:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df28:	f342 86c5 	ble.w	8010cb6 <kalman_3gyro.constprop.0+0x41ee>
 800df2c:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800df30:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800df34:	ee38 3a64 	vsub.f32	s6, s16, s9
 800df38:	ee34 4a63 	vsub.f32	s8, s8, s7
 800df3c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800df40:	ee64 4a03 	vmul.f32	s9, s8, s6
 800df44:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800df48:	ee3e ea23 	vadd.f32	s28, s28, s7
 800df4c:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800df50:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df58:	f202 86c5 	bhi.w	8010ce6 <kalman_3gyro.constprop.0+0x421e>
 800df5c:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800df60:	eef4 4ac8 	vcmpe.f32	s9, s16
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	f343 8371 	ble.w	801164e <kalman_3gyro.constprop.0+0x4b86>
 800df6c:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800df70:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800df74:	ee38 3a47 	vsub.f32	s6, s16, s14
 800df78:	ee34 4a63 	vsub.f32	s8, s8, s7
 800df7c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800df80:	ee24 4a03 	vmul.f32	s8, s8, s6
 800df84:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800df88:	ee3e ea23 	vadd.f32	s28, s28, s7
 800df8c:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800df90:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800df94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df98:	f202 86c5 	bhi.w	8010d26 <kalman_3gyro.constprop.0+0x425e>
 800df9c:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800dfa0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa8:	f343 8359 	ble.w	801165e <kalman_3gyro.constprop.0+0x4b96>
 800dfac:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800dfb0:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800dfb4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dfb8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dfbc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dfc0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dfc4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dfc8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dfcc:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800dfd0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd8:	f2c2 86c5 	blt.w	8010d66 <kalman_3gyro.constprop.0+0x429e>
 800dfdc:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800dfe0:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800dfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe8:	f143 832d 	bpl.w	8011646 <kalman_3gyro.constprop.0+0x4b7e>
 800dfec:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800dff0:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800dff4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dff8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dffc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e000:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e004:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e008:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e00c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e010:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e018:	f2c2 86c5 	blt.w	8010da6 <kalman_3gyro.constprop.0+0x42de>
 800e01c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e020:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	f142 86c5 	bpl.w	8010db6 <kalman_3gyro.constprop.0+0x42ee>
 800e02c:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e030:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e034:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e038:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e03c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e040:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e044:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e048:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e04c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e050:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e054:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e058:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e05c:	e15a      	b.n	800e314 <kalman_3gyro.constprop.0+0x184c>
 800e05e:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800dcac <kalman_3gyro.constprop.0+0x11e4>
 800e062:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800dcb0 <kalman_3gyro.constprop.0+0x11e8>
 800e066:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800dcb4 <kalman_3gyro.constprop.0+0x11ec>
 800e06a:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e06e:	f7fe bedd 	b.w	800ce2c <kalman_3gyro.constprop.0+0x364>
 800e072:	1c60      	adds	r0, r4, #1
 800e074:	42be      	cmp	r6, r7
 800e076:	eba7 0206 	sub.w	r2, r7, r6
 800e07a:	4449      	add	r1, r9
 800e07c:	4450      	add	r0, sl
 800e07e:	f6bf ae39 	bge.w	800dcf4 <kalman_3gyro.constprop.0+0x122c>
 800e082:	443c      	add	r4, r7
 800e084:	1ba4      	subs	r4, r4, r6
 800e086:	f009 fa91 	bl	80175ac <memcpy>
 800e08a:	463e      	mov	r6, r7
 800e08c:	4645      	mov	r5, r8
 800e08e:	e632      	b.n	800dcf6 <kalman_3gyro.constprop.0+0x122e>
 800e090:	3601      	adds	r6, #1
 800e092:	42be      	cmp	r6, r7
 800e094:	f80a 2004 	strb.w	r2, [sl, r4]
 800e098:	f47f ae2d 	bne.w	800dcf6 <kalman_3gyro.constprop.0+0x122e>
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	f105 0801 	add.w	r8, r5, #1
 800e0a2:	1c60      	adds	r0, r4, #1
 800e0a4:	45c3      	cmp	fp, r8
 800e0a6:	eba3 0205 	sub.w	r2, r3, r5
 800e0aa:	eb09 0105 	add.w	r1, r9, r5
 800e0ae:	4450      	add	r0, sl
 800e0b0:	f77f ae21 	ble.w	800dcf6 <kalman_3gyro.constprop.0+0x122e>
 800e0b4:	f009 fa7a 	bl	80175ac <memcpy>
 800e0b8:	9b02      	ldr	r3, [sp, #8]
 800e0ba:	441c      	add	r4, r3
 800e0bc:	9b04      	ldr	r3, [sp, #16]
 800e0be:	1b5a      	subs	r2, r3, r5
 800e0c0:	1b64      	subs	r4, r4, r5
 800e0c2:	eb02 0508 	add.w	r5, r2, r8
 800e0c6:	e616      	b.n	800dcf6 <kalman_3gyro.constprop.0+0x122e>
 800e0c8:	eef4 7a48 	vcmp.f32	s15, s16
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	f43f ae46 	beq.w	800dd60 <kalman_3gyro.constprop.0+0x1298>
 800e0d4:	eef4 7a4b 	vcmp.f32	s15, s22
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	f43f ae40 	beq.w	800dd60 <kalman_3gyro.constprop.0+0x1298>
 800e0e0:	eeb4 7a48 	vcmp.f32	s14, s16
 800e0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e8:	f43f ae3a 	beq.w	800dd60 <kalman_3gyro.constprop.0+0x1298>
 800e0ec:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f4:	f43f ae34 	beq.w	800dd60 <kalman_3gyro.constprop.0+0x1298>
 800e0f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0fc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e100:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e104:	e632      	b.n	800dd6c <kalman_3gyro.constprop.0+0x12a4>
 800e106:	2304      	movs	r3, #4
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	461c      	mov	r4, r3
 800e10e:	2307      	movs	r3, #7
 800e110:	4694      	mov	ip, r2
 800e112:	2106      	movs	r1, #6
 800e114:	9302      	str	r3, [sp, #8]
 800e116:	2603      	movs	r6, #3
 800e118:	f04f 0a01 	mov.w	sl, #1
 800e11c:	f7ff ba5c 	b.w	800d5d8 <kalman_3gyro.constprop.0+0xb10>
 800e120:	9a08      	ldr	r2, [sp, #32]
 800e122:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e2ac <kalman_3gyro.constprop.0+0x17e4>
 800e126:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e2b0 <kalman_3gyro.constprop.0+0x17e8>
 800e12a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e2b4 <kalman_3gyro.constprop.0+0x17ec>
 800e12e:	4b62      	ldr	r3, [pc, #392]	; (800e2b8 <kalman_3gyro.constprop.0+0x17f0>)
 800e130:	edc2 7a00 	vstr	s15, [r2]
 800e134:	eeb0 4a65 	vmov.f32	s8, s11
 800e138:	eeb0 3a67 	vmov.f32	s6, s15
 800e13c:	eef0 4a45 	vmov.f32	s9, s10
 800e140:	6053      	str	r3, [r2, #4]
 800e142:	6093      	str	r3, [r2, #8]
 800e144:	f7fe bd3e 	b.w	800cbc4 <kalman_3gyro.constprop.0+0xfc>
 800e148:	2308      	movs	r3, #8
 800e14a:	2005      	movs	r0, #5
 800e14c:	f04f 0802 	mov.w	r8, #2
 800e150:	f7ff ba5c 	b.w	800d60c <kalman_3gyro.constprop.0+0xb44>
 800e154:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e158:	2300      	movs	r3, #0
 800e15a:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e15e:	ed88 7a07 	vstr	s14, [r8, #28]
 800e162:	ed88 7a08 	vstr	s14, [r8, #32]
 800e166:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e16a:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e16e:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e172:	e65f      	b.n	800de34 <kalman_3gyro.constprop.0+0x136c>
 800e174:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e178:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e180:	f342 83b2 	ble.w	80108e8 <kalman_3gyro.constprop.0+0x3e20>
 800e184:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18c:	f2c2 86e9 	blt.w	8010f62 <kalman_3gyro.constprop.0+0x449a>
 800e190:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e194:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19c:	f342 8712 	ble.w	8010fc4 <kalman_3gyro.constprop.0+0x44fc>
 800e1a0:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e1a4:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e1a8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e1b0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e1b4:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e1b8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e1bc:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e1c0:	f002 bed8 	b.w	8010f74 <kalman_3gyro.constprop.0+0x44ac>
 800e1c4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e1c8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	f342 84bd 	ble.w	8010b4e <kalman_3gyro.constprop.0+0x4086>
 800e1d4:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e1d8:	f7ff b993 	b.w	800d502 <kalman_3gyro.constprop.0+0xa3a>
 800e1dc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e1e0:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e8:	f342 849f 	ble.w	8010b2a <kalman_3gyro.constprop.0+0x4062>
 800e1ec:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e1f0:	f7ff b964 	b.w	800d4bc <kalman_3gyro.constprop.0+0x9f4>
 800e1f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e1f8:	eef4 dac7 	vcmpe.f32	s27, s14
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	f342 84b7 	ble.w	8010b72 <kalman_3gyro.constprop.0+0x40aa>
 800e204:	eddf da2d 	vldr	s27, [pc, #180]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e208:	f7ff b935 	b.w	800d476 <kalman_3gyro.constprop.0+0x9ae>
 800e20c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e210:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e218:	f342 8475 	ble.w	8010b06 <kalman_3gyro.constprop.0+0x403e>
 800e21c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e220:	f7ff b8c3 	b.w	800d3aa <kalman_3gyro.constprop.0+0x8e2>
 800e224:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e228:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e230:	f342 83a0 	ble.w	8010974 <kalman_3gyro.constprop.0+0x3eac>
 800e234:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e238:	f7ff b894 	b.w	800d364 <kalman_3gyro.constprop.0+0x89c>
 800e23c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e240:	eef4 dac7 	vcmpe.f32	s27, s14
 800e244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e248:	f342 8382 	ble.w	8010950 <kalman_3gyro.constprop.0+0x3e88>
 800e24c:	eddf da1b 	vldr	s27, [pc, #108]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e250:	f7ff b865 	b.w	800d31e <kalman_3gyro.constprop.0+0x856>
 800e254:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e258:	eef4 dac7 	vcmpe.f32	s27, s14
 800e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e260:	f342 8364 	ble.w	801092c <kalman_3gyro.constprop.0+0x3e64>
 800e264:	eddf da15 	vldr	s27, [pc, #84]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e268:	f7fe bff3 	b.w	800d252 <kalman_3gyro.constprop.0+0x78a>
 800e26c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e270:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	f342 8346 	ble.w	8010908 <kalman_3gyro.constprop.0+0x3e40>
 800e27c:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e280:	f7fe bfc4 	b.w	800d20c <kalman_3gyro.constprop.0+0x744>
 800e284:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e288:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e290:	f342 839e 	ble.w	80109d0 <kalman_3gyro.constprop.0+0x3f08>
 800e294:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e2bc <kalman_3gyro.constprop.0+0x17f4>
 800e298:	f7fe bf95 	b.w	800d1c6 <kalman_3gyro.constprop.0+0x6fe>
 800e29c:	eef1 3a63 	vneg.f32	s7, s7
 800e2a0:	f7ff bb42 	b.w	800d928 <kalman_3gyro.constprop.0+0xe60>
 800e2a4:	eef1 3a63 	vneg.f32	s7, s7
 800e2a8:	f7ff bb1b 	b.w	800d8e2 <kalman_3gyro.constprop.0+0xe1a>
 800e2ac:	00000000 	.word	0x00000000
 800e2b0:	3fb33333 	.word	0x3fb33333
 800e2b4:	bfb33333 	.word	0xbfb33333
 800e2b8:	3f333333 	.word	0x3f333333
 800e2bc:	80000000 	.word	0x80000000
 800e2c0:	3fb77778 	.word	0x3fb77778
 800e2c4:	3f99999a 	.word	0x3f99999a
 800e2c8:	3f4ccccd 	.word	0x3f4ccccd
 800e2cc:	42d40000 	.word	0x42d40000
 800e2d0:	46979000 	.word	0x46979000
 800e2d4:	4415c000 	.word	0x4415c000
 800e2d8:	3ba3d70a 	.word	0x3ba3d70a
 800e2dc:	3b449ba6 	.word	0x3b449ba6
 800e2e0:	3c75c28f 	.word	0x3c75c28f
 800e2e4:	3c23d70a 	.word	0x3c23d70a
 800e2e8:	3d4cccc0 	.word	0x3d4cccc0
 800e2ec:	43480000 	.word	0x43480000
 800e2f0:	3d4ccccd 	.word	0x3d4ccccd
 800e2f4:	3cf5c28f 	.word	0x3cf5c28f
 800e2f8:	3eb33334 	.word	0x3eb33334
 800e2fc:	3f933333 	.word	0x3f933333
 800e300:	4247ffff 	.word	0x4247ffff
 800e304:	3dcccccd 	.word	0x3dcccccd
 800e308:	3e4ccccd 	.word	0x3e4ccccd
 800e30c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e310:	eeb0 ba4e 	vmov.f32	s22, s28
 800e314:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e318:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e31c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e304 <kalman_3gyro.constprop.0+0x183c>
 800e320:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e324:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e328:	eef0 daed 	vabs.f32	s27, s27
 800e32c:	eeb0 5ac5 	vabs.f32	s10, s10
 800e330:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e334:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	f340 821c 	ble.w	800e778 <kalman_3gyro.constprop.0+0x1cb0>
 800e340:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e2c0 <kalman_3gyro.constprop.0+0x17f8>
 800e344:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34c:	f302 828b 	bgt.w	8010866 <kalman_3gyro.constprop.0+0x3d9e>
 800e350:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e354:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e358:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e35c:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e360:	eeb0 5a64 	vmov.f32	s10, s9
 800e364:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36c:	f89b 3000 	ldrb.w	r3, [fp]
 800e370:	bfb8      	it	lt
 800e372:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e376:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 81f9 	beq.w	800e772 <kalman_3gyro.constprop.0+0x1caa>
 800e380:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 81de 	beq.w	800e746 <kalman_3gyro.constprop.0+0x1c7e>
 800e38a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e38e:	2300      	movs	r3, #0
 800e390:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e394:	eeb0 6a61 	vmov.f32	s12, s3
 800e398:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e39c:	9908      	ldr	r1, [sp, #32]
 800e39e:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e3a2:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e3a6:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e3aa:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e3ae:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e3b2:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e3bc:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e3c0:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e3c4:	9233      	str	r2, [sp, #204]	; 0xcc
 800e3c6:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e3ca:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e3ce:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e3d2:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e3d6:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e3da:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e3de:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e3e2:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e3e6:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e3ea:	eeb0 3a42 	vmov.f32	s6, s4
 800e3ee:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e3f2:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e3f6:	eef0 aa46 	vmov.f32	s21, s12
 800e3fa:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e3fe:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e402:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e406:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e40a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e40e:	eef0 2a44 	vmov.f32	s5, s8
 800e412:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e416:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e41a:	eeb0 fa64 	vmov.f32	s30, s9
 800e41e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e422:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e426:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e42a:	eeb0 1a6a 	vmov.f32	s2, s21
 800e42e:	eef0 aa66 	vmov.f32	s21, s13
 800e432:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e436:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e43a:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e43e:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e442:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e446:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e44a:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e44e:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e452:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e456:	eef0 3a64 	vmov.f32	s7, s9
 800e45a:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e45e:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e462:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e466:	edd1 5a02 	vldr	s11, [r1, #8]
 800e46a:	ed91 5a05 	vldr	s10, [r1, #20]
 800e46e:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e472:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e476:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e47a:	edd1 1a01 	vldr	s3, [r1, #4]
 800e47e:	edd1 fa00 	vldr	s31, [r1]
 800e482:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e486:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e48a:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e48e:	edd1 5a03 	vldr	s11, [r1, #12]
 800e492:	edd1 1a04 	vldr	s3, [r1, #16]
 800e496:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e2c4 <kalman_3gyro.constprop.0+0x17fc>
 800e49a:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e49e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e4a2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e4a6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e4aa:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e4ae:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e4ba:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e4be:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e4c2:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e4c6:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e4ca:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e4ce:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e4d2:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e4d6:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e4da:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e4de:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e4e2:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e4e6:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e4ea:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e4ee:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e4f2:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e4f6:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e4fa:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e4fe:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e502:	d506      	bpl.n	800e512 <kalman_3gyro.constprop.0+0x1a4a>
 800e504:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e2c8 <kalman_3gyro.constprop.0+0x1800>
 800e508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e510:	dc01      	bgt.n	800e516 <kalman_3gyro.constprop.0+0x1a4e>
 800e512:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e516:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e51a:	eef0 7ae7 	vabs.f32	s15, s15
 800e51e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52a:	f340 8141 	ble.w	800e7b0 <kalman_3gyro.constprop.0+0x1ce8>
 800e52e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e532:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53a:	f142 8198 	bpl.w	801086e <kalman_3gyro.constprop.0+0x3da6>
 800e53e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e2d8 <kalman_3gyro.constprop.0+0x1810>
 800e542:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e546:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e2e4 <kalman_3gyro.constprop.0+0x181c>
 800e54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e552:	f102 8221 	bmi.w	8010998 <kalman_3gyro.constprop.0+0x3ed0>
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55a:	f142 8221 	bpl.w	80109a0 <kalman_3gyro.constprop.0+0x3ed8>
 800e55e:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e2e0 <kalman_3gyro.constprop.0+0x1818>
 800e562:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56a:	f282 84a4 	bge.w	8010eb6 <kalman_3gyro.constprop.0+0x43ee>
 800e56e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e572:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e2f4 <kalman_3gyro.constprop.0+0x182c>
 800e576:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	f2c2 84b0 	blt.w	8010ee2 <kalman_3gyro.constprop.0+0x441a>
 800e582:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e2f0 <kalman_3gyro.constprop.0+0x1828>
 800e586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58e:	f142 84b0 	bpl.w	8010ef2 <kalman_3gyro.constprop.0+0x442a>
 800e592:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e2f4 <kalman_3gyro.constprop.0+0x182c>
 800e596:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e300 <kalman_3gyro.constprop.0+0x1838>
 800e59a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e59e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e5a2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e5a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e5aa:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e5ae:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e304 <kalman_3gyro.constprop.0+0x183c>
 800e5b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	f2c2 84b0 	blt.w	8010f1e <kalman_3gyro.constprop.0+0x4456>
 800e5be:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e308 <kalman_3gyro.constprop.0+0x1840>
 800e5c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ca:	f142 84b0 	bpl.w	8010f2e <kalman_3gyro.constprop.0+0x4466>
 800e5ce:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e304 <kalman_3gyro.constprop.0+0x183c>
 800e5d2:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e2cc <kalman_3gyro.constprop.0+0x1804>
 800e5d6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e5da:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e5de:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e5e2:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e5e6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e5ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e5ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f6:	db0d      	blt.n	800e614 <kalman_3gyro.constprop.0+0x1b4c>
 800e5f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e5fc:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e2d0 <kalman_3gyro.constprop.0+0x1808>
 800e600:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e2d4 <kalman_3gyro.constprop.0+0x180c>
 800e604:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e608:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e60c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e610:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e618:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e61c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e620:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e624:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e2e0 <kalman_3gyro.constprop.0+0x1818>
 800e628:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e2d8 <kalman_3gyro.constprop.0+0x1810>
 800e62c:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e2e4 <kalman_3gyro.constprop.0+0x181c>
 800e630:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e2dc <kalman_3gyro.constprop.0+0x1814>
 800e634:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e640:	bfb8      	it	lt
 800e642:	eef0 4a46 	vmovlt.f32	s9, s12
 800e646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64a:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e64e:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e652:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e656:	f142 841f 	bpl.w	8010e98 <kalman_3gyro.constprop.0+0x43d0>
 800e65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65e:	f2c2 841f 	blt.w	8010ea0 <kalman_3gyro.constprop.0+0x43d8>
 800e662:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e2e0 <kalman_3gyro.constprop.0+0x1818>
 800e666:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66e:	f142 83ba 	bpl.w	8010de6 <kalman_3gyro.constprop.0+0x431e>
 800e672:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e2e4 <kalman_3gyro.constprop.0+0x181c>
 800e676:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e2e8 <kalman_3gyro.constprop.0+0x1820>
 800e67a:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e2ec <kalman_3gyro.constprop.0+0x1824>
 800e67e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e686:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e68a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e68e:	eeb0 ca66 	vmov.f32	s24, s13
 800e692:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e2f4 <kalman_3gyro.constprop.0+0x182c>
 800e696:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69e:	f2c2 83ba 	blt.w	8010e16 <kalman_3gyro.constprop.0+0x434e>
 800e6a2:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e2f0 <kalman_3gyro.constprop.0+0x1828>
 800e6a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ae:	f142 83ba 	bpl.w	8010e26 <kalman_3gyro.constprop.0+0x435e>
 800e6b2:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e2f4 <kalman_3gyro.constprop.0+0x182c>
 800e6b6:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e2f8 <kalman_3gyro.constprop.0+0x1830>
 800e6ba:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e300 <kalman_3gyro.constprop.0+0x1838>
 800e6be:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e2fc <kalman_3gyro.constprop.0+0x1834>
 800e6c2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e6c6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e6ca:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e6ce:	eeb0 ca66 	vmov.f32	s24, s13
 800e6d2:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e304 <kalman_3gyro.constprop.0+0x183c>
 800e6d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6de:	f2c2 83ba 	blt.w	8010e56 <kalman_3gyro.constprop.0+0x438e>
 800e6e2:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e308 <kalman_3gyro.constprop.0+0x1840>
 800e6e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ee:	f142 83ba 	bpl.w	8010e66 <kalman_3gyro.constprop.0+0x439e>
 800e6f2:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e780 <kalman_3gyro.constprop.0+0x1cb8>
 800e6f6:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e784 <kalman_3gyro.constprop.0+0x1cbc>
 800e6fa:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e6fe:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e702:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e706:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e70a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e70e:	eeb0 ca66 	vmov.f32	s24, s13
 800e712:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e716:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71e:	f2c2 80b0 	blt.w	8010882 <kalman_3gyro.constprop.0+0x3dba>
 800e722:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e726:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e72a:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e788 <kalman_3gyro.constprop.0+0x1cc0>
 800e72e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e78c <kalman_3gyro.constprop.0+0x1cc4>
 800e732:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e736:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e73a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e73e:	eeb0 ca66 	vmov.f32	s24, s13
 800e742:	f002 b89e 	b.w	8010882 <kalman_3gyro.constprop.0+0x3dba>
 800e746:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e74a:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e74e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e752:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e756:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e75a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e75e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e762:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e766:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76e:	f102 8246 	bmi.w	8010bfe <kalman_3gyro.constprop.0+0x4136>
 800e772:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e776:	e60b      	b.n	800e390 <kalman_3gyro.constprop.0+0x18c8>
 800e778:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e77c:	e5f2      	b.n	800e364 <kalman_3gyro.constprop.0+0x189c>
 800e77e:	bf00      	nop
 800e780:	3dcccccd 	.word	0x3dcccccd
 800e784:	410c0000 	.word	0x410c0000
 800e788:	42c80000 	.word	0x42c80000
 800e78c:	424a0000 	.word	0x424a0000
 800e790:	3c23d70a 	.word	0x3c23d70a
 800e794:	3b449ba6 	.word	0x3b449ba6
 800e798:	3fb33333 	.word	0x3fb33333
 800e79c:	3ecccccd 	.word	0x3ecccccd
 800e7a0:	3f8f5c29 	.word	0x3f8f5c29
 800e7a4:	3f59999a 	.word	0x3f59999a
 800e7a8:	3e4ccccd 	.word	0x3e4ccccd
 800e7ac:	3f99999a 	.word	0x3f99999a
 800e7b0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e7b4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e790 <kalman_3gyro.constprop.0+0x1cc8>
 800e7b8:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e794 <kalman_3gyro.constprop.0+0x1ccc>
 800e7bc:	eeb0 7a4c 	vmov.f32	s14, s24
 800e7c0:	eef0 4a4c 	vmov.f32	s9, s24
 800e7c4:	eddd 6a01 	vldr	s13, [sp, #4]
 800e7c8:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e7cc:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e7d0:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e7d4:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e7d8:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e7dc:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e7e0:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e7e4:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e7e8:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e7ec:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e7f0:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e7f4:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e7f8:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e7fc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e800:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e804:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e808:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e80c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e810:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e814:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e818:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e81c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e820:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e824:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e828:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e82c:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e830:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e834:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e838:	2a00      	cmp	r2, #0
 800e83a:	f001 8411 	beq.w	8010060 <kalman_3gyro.constprop.0+0x3598>
 800e83e:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e842:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e846:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e84a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e84e:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e852:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e856:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e85a:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e85e:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e862:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e866:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e86a:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e86e:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e872:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e876:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e87a:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e87e:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e882:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e886:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e88a:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e88e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e892:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e896:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e89a:	b159      	cbz	r1, 800e8b4 <kalman_3gyro.constprop.0+0x1dec>
 800e89c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a8:	dd04      	ble.n	800e8b4 <kalman_3gyro.constprop.0+0x1dec>
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e8b0:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e8b4:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8bc:	dd09      	ble.n	800e8d2 <kalman_3gyro.constprop.0+0x1e0a>
 800e8be:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e8c2:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ca:	db02      	blt.n	800e8d2 <kalman_3gyro.constprop.0+0x1e0a>
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f002 8001 	beq.w	80108d4 <kalman_3gyro.constprop.0+0x3e0c>
 800e8d2:	b132      	cbz	r2, 800e8e2 <kalman_3gyro.constprop.0+0x1e1a>
 800e8d4:	f240 1001 	movw	r0, #257	; 0x101
 800e8d8:	2301      	movs	r3, #1
 800e8da:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e8de:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e8e8:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e8ec:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e798 <kalman_3gyro.constprop.0+0x1cd0>
 800e8f0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	dc09      	bgt.n	800e90e <kalman_3gyro.constprop.0+0x1e46>
 800e8fa:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e79c <kalman_3gyro.constprop.0+0x1cd4>
 800e8fe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	d402      	bmi.n	800e90e <kalman_3gyro.constprop.0+0x1e46>
 800e908:	2a00      	cmp	r2, #0
 800e90a:	f042 80e4 	bne.w	8010ad6 <kalman_3gyro.constprop.0+0x400e>
 800e90e:	2300      	movs	r3, #0
 800e910:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e914:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e918:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e91c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e920:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e7a0 <kalman_3gyro.constprop.0+0x1cd8>
 800e924:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92c:	dc09      	bgt.n	800e942 <kalman_3gyro.constprop.0+0x1e7a>
 800e92e:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e7a4 <kalman_3gyro.constprop.0+0x1cdc>
 800e932:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93a:	d402      	bmi.n	800e942 <kalman_3gyro.constprop.0+0x1e7a>
 800e93c:	2900      	cmp	r1, #0
 800e93e:	f042 8097 	bne.w	8010a70 <kalman_3gyro.constprop.0+0x3fa8>
 800e942:	2300      	movs	r3, #0
 800e944:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e948:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e94c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e950:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e954:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e958:	eef4 dae7 	vcmpe.f32	s27, s15
 800e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e960:	f341 836b 	ble.w	801003a <kalman_3gyro.constprop.0+0x3572>
 800e964:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e968:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e96c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e974:	2300      	movs	r3, #0
 800e976:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e97e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e982:	eef4 dac7 	vcmpe.f32	s27, s14
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	bfc4      	itt	gt
 800e98c:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e990:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e994:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e998:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e99c:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e9a0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e9a4:	2b0e      	cmp	r3, #14
 800e9a6:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e9aa:	dc02      	bgt.n	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 800e9ac:	3305      	adds	r3, #5
 800e9ae:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e9b2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e9b6:	eef4 7acd 	vcmpe.f32	s15, s26
 800e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9be:	f340 82e9 	ble.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800e9c2:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e9c6:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ce:	f340 82e1 	ble.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800e9d2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e9d6:	eef4 7aec 	vcmpe.f32	s15, s25
 800e9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9de:	f340 82d9 	ble.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800e9e2:	9b08      	ldr	r3, [sp, #32]
 800e9e4:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e7a8 <kalman_3gyro.constprop.0+0x1ce0>
 800e9e8:	ed93 7a06 	vldr	s14, [r3, #24]
 800e9ec:	eef0 6ac7 	vabs.f32	s13, s14
 800e9f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f8:	f140 82cc 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800e9fc:	edd3 6a07 	vldr	s13, [r3, #28]
 800ea00:	eeb0 6ae6 	vabs.f32	s12, s13
 800ea04:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ea08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0c:	f140 82c2 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ea10:	ed93 6a08 	vldr	s12, [r3, #32]
 800ea14:	eef0 4ac6 	vabs.f32	s9, s12
 800ea18:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea20:	f140 82b8 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ea24:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e7ac <kalman_3gyro.constprop.0+0x1ce4>
 800ea28:	eef0 5ae5 	vabs.f32	s11, s11
 800ea2c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ea30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea34:	f140 82ae 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ea38:	eef0 1ae1 	vabs.f32	s3, s3
 800ea3c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ea40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea44:	f140 82a6 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ea48:	eeb0 5ac5 	vabs.f32	s10, s10
 800ea4c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800ea50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea54:	f140 829e 	bpl.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ea58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea5a:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800ea5e:	edd3 5a00 	vldr	s11, [r3]
 800ea62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea64:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ea66:	ed93 5a00 	vldr	s10, [r3]
 800ea6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ea6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 800ea70:	2a09      	cmp	r2, #9
 800ea72:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800ea76:	ed93 4a00 	vldr	s8, [r3]
 800ea7a:	edd4 3a00 	vldr	s7, [r4]
 800ea7e:	bf8c      	ite	hi
 800ea80:	230a      	movhi	r3, #10
 800ea82:	2305      	movls	r3, #5
 800ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea88:	bfb4      	ite	lt
 800ea8a:	eef0 7a45 	vmovlt.f32	s15, s10
 800ea8e:	eef0 7a65 	vmovge.f32	s15, s11
 800ea92:	bf8c      	ite	hi
 800ea94:	eef0 4a45 	vmovhi.f32	s9, s10
 800ea98:	eef0 4a65 	vmovls.f32	s9, s11
 800ea9c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa4:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eaa8:	bfb8      	it	lt
 800eaaa:	eef0 7a63 	vmovlt.f32	s15, s7
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	bf88      	it	hi
 800eab4:	eef0 4a63 	vmovhi.f32	s9, s7
 800eab8:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800eac4:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eac8:	edd1 5a00 	vldr	s11, [r1]
 800eacc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eace:	bfb8      	it	lt
 800ead0:	eef0 7a44 	vmovlt.f32	s15, s8
 800ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead8:	bf88      	it	hi
 800eada:	eef0 4a44 	vmovhi.f32	s9, s8
 800eade:	eef4 7ae5 	vcmpe.f32	s15, s11
 800eae2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaea:	eef4 4ae5 	vcmpe.f32	s9, s11
 800eaee:	bfb8      	it	lt
 800eaf0:	eef0 7a65 	vmovlt.f32	s15, s11
 800eaf4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafc:	bf88      	it	hi
 800eafe:	eef0 4a65 	vmovhi.f32	s9, s11
 800eb02:	2b05      	cmp	r3, #5
 800eb04:	ee35 5a25 	vadd.f32	s10, s10, s11
 800eb08:	edd1 5a00 	vldr	s11, [r1]
 800eb0c:	d065      	beq.n	800ebda <kalman_3gyro.constprop.0+0x2112>
 800eb0e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800eb12:	edd1 3a00 	vldr	s7, [r1]
 800eb16:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800eb1a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb1e:	ed91 4a00 	vldr	s8, [r1]
 800eb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb26:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb2a:	bfb8      	it	lt
 800eb2c:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb34:	bf88      	it	hi
 800eb36:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb3a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb3e:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb46:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb4a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb4e:	edd1 3a00 	vldr	s7, [r1]
 800eb52:	bfb8      	it	lt
 800eb54:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5c:	bf88      	it	hi
 800eb5e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb62:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb66:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800eb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb6e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb72:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb76:	ed91 4a00 	vldr	s8, [r1]
 800eb7a:	bfb8      	it	lt
 800eb7c:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb84:	bf88      	it	hi
 800eb86:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb8a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb92:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb96:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb9a:	bfb8      	it	lt
 800eb9c:	eef0 7a44 	vmovlt.f32	s15, s8
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	bf88      	it	hi
 800eba6:	eef0 4a44 	vmovhi.f32	s9, s8
 800ebaa:	2b0a      	cmp	r3, #10
 800ebac:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ebb0:	d113      	bne.n	800ebda <kalman_3gyro.constprop.0+0x2112>
 800ebb2:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ebb6:	ed91 4a00 	vldr	s8, [r1]
 800ebba:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ebbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ebc6:	bfb8      	it	lt
 800ebc8:	eef0 7a44 	vmovlt.f32	s15, s8
 800ebcc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	bf88      	it	hi
 800ebd6:	eef0 4a44 	vmovhi.f32	s9, s8
 800ebda:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ebde:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800ef7c <kalman_3gyro.constprop.0+0x24b4>
 800ebe2:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800ef80 <kalman_3gyro.constprop.0+0x24b8>
 800ebe6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ebea:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ebee:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ebf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf6:	f300 81cd 	bgt.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ebfa:	eef0 7ac5 	vabs.f32	s15, s10
 800ebfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec02:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800ef84 <kalman_3gyro.constprop.0+0x24bc>
 800ec06:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	f300 81c1 	bgt.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ec12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ec14:	ed91 5a00 	vldr	s10, [r1]
 800ec18:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec1a:	ed91 4a00 	vldr	s8, [r1]
 800ec1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ec20:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ec24:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800ec28:	ed90 3a00 	vldr	s6, [r0]
 800ec2c:	edd1 3a00 	vldr	s7, [r1]
 800ec30:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec36:	bfb4      	ite	lt
 800ec38:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec3c:	eef0 7a45 	vmovge.f32	s15, s10
 800ec40:	bf8c      	ite	hi
 800ec42:	eef0 4a44 	vmovhi.f32	s9, s8
 800ec46:	eef0 4a45 	vmovls.f32	s9, s10
 800ec4a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ec4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec52:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ec56:	bfb8      	it	lt
 800ec58:	eef0 7a43 	vmovlt.f32	s15, s6
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	bf88      	it	hi
 800ec62:	eef0 4a43 	vmovhi.f32	s9, s6
 800ec66:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ec6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ec72:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ec76:	ed91 4a00 	vldr	s8, [r1]
 800ec7a:	bfb8      	it	lt
 800ec7c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ec80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec84:	bf88      	it	hi
 800ec86:	eef0 4a63 	vmovhi.f32	s9, s7
 800ec8a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ec8e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec96:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ec9a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ec9e:	bfb8      	it	lt
 800eca0:	eef0 7a44 	vmovlt.f32	s15, s8
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	bf88      	it	hi
 800ecaa:	eef0 4a44 	vmovhi.f32	s9, s8
 800ecae:	2b05      	cmp	r3, #5
 800ecb0:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ecb4:	d065      	beq.n	800ed82 <kalman_3gyro.constprop.0+0x22ba>
 800ecb6:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800ecba:	edd1 3a00 	vldr	s7, [r1]
 800ecbe:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ecc2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecc6:	ed91 4a00 	vldr	s8, [r1]
 800ecca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecce:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ecd2:	bfb8      	it	lt
 800ecd4:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecdc:	bf88      	it	hi
 800ecde:	eef0 4a63 	vmovhi.f32	s9, s7
 800ece2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ece6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800ecea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecee:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ecf2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ecf6:	edd1 3a00 	vldr	s7, [r1]
 800ecfa:	bfb8      	it	lt
 800ecfc:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	bf88      	it	hi
 800ed06:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed0a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed0e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800ed12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed16:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed1a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed1e:	ed91 4a00 	vldr	s8, [r1]
 800ed22:	bfb8      	it	lt
 800ed24:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	bf88      	it	hi
 800ed2e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed32:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed3e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed42:	bfb8      	it	lt
 800ed44:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4c:	bf88      	it	hi
 800ed4e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed52:	2b0a      	cmp	r3, #10
 800ed54:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed58:	d113      	bne.n	800ed82 <kalman_3gyro.constprop.0+0x22ba>
 800ed5a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800ed5e:	ed91 4a00 	vldr	s8, [r1]
 800ed62:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed6e:	bfb8      	it	lt
 800ed70:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed74:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7c:	bf88      	it	hi
 800ed7e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed82:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ed86:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800ef7c <kalman_3gyro.constprop.0+0x24b4>
 800ed8a:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800ef80 <kalman_3gyro.constprop.0+0x24b8>
 800ed8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed92:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ed96:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ed9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9e:	f300 80f9 	bgt.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800eda2:	eef0 7ac5 	vabs.f32	s15, s10
 800eda6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edaa:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800ef84 <kalman_3gyro.constprop.0+0x24bc>
 800edae:	eef4 7ac5 	vcmpe.f32	s15, s10
 800edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb6:	f300 80ed 	bgt.w	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800edba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800edbc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800edbe:	edd1 4a00 	vldr	s9, [r1]
 800edc2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800edc4:	ed91 3a00 	vldr	s6, [r1]
 800edc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800edca:	eef4 4ac3 	vcmpe.f32	s9, s6
 800edce:	ed91 4a00 	vldr	s8, [r1]
 800edd2:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800edd6:	edd1 3a00 	vldr	s7, [r1]
 800edda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edde:	bfb4      	ite	lt
 800ede0:	eef0 7a43 	vmovlt.f32	s15, s6
 800ede4:	eef0 7a64 	vmovge.f32	s15, s9
 800ede8:	bf8c      	ite	hi
 800edea:	eeb0 5a43 	vmovhi.f32	s10, s6
 800edee:	eeb0 5a64 	vmovls.f32	s10, s9
 800edf2:	eef4 3ae7 	vcmpe.f32	s7, s15
 800edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfa:	eef4 3ac5 	vcmpe.f32	s7, s10
 800edfe:	bfa8      	it	ge
 800ee00:	eef0 7a63 	vmovge.f32	s15, s7
 800ee04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee08:	bf98      	it	ls
 800ee0a:	eeb0 5a63 	vmovls.f32	s10, s7
 800ee0e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee16:	ee34 3a83 	vadd.f32	s6, s9, s6
 800ee1a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800ee1e:	edd5 4a00 	vldr	s9, [r5]
 800ee22:	bfa8      	it	ge
 800ee24:	eef0 7a44 	vmovge.f32	s15, s8
 800ee28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2c:	bf98      	it	ls
 800ee2e:	eeb0 5a44 	vmovls.f32	s10, s8
 800ee32:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ee36:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ee3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ee42:	bfb8      	it	lt
 800ee44:	eef0 7a64 	vmovlt.f32	s15, s9
 800ee48:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ee4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee50:	bf98      	it	ls
 800ee52:	eeb0 5a64 	vmovls.f32	s10, s9
 800ee56:	2b05      	cmp	r3, #5
 800ee58:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ee5c:	d065      	beq.n	800ef2a <kalman_3gyro.constprop.0+0x2462>
 800ee5e:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800ee62:	ed95 4a00 	vldr	s8, [r5]
 800ee66:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800ee6a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee6e:	ed95 3a00 	vldr	s6, [r5]
 800ee72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee76:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ee7a:	bfb8      	it	lt
 800ee7c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee84:	bf88      	it	hi
 800ee86:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ee8a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ee8e:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800ee92:	edd5 3a00 	vldr	s7, [r5]
 800ee96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9a:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800ee9e:	bfb8      	it	lt
 800eea0:	eef0 7a43 	vmovlt.f32	s15, s6
 800eea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea8:	bf88      	it	hi
 800eeaa:	eeb0 5a43 	vmovhi.f32	s10, s6
 800eeae:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eeb2:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800eeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeba:	ee34 4a24 	vadd.f32	s8, s8, s9
 800eebe:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800eec2:	edd5 4a00 	vldr	s9, [r5]
 800eec6:	bfb8      	it	lt
 800eec8:	eef0 7a63 	vmovlt.f32	s15, s7
 800eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed0:	bf88      	it	hi
 800eed2:	eeb0 5a63 	vmovhi.f32	s10, s7
 800eed6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800eeda:	ee34 4a03 	vadd.f32	s8, s8, s6
 800eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee2:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800eee6:	bfb8      	it	lt
 800eee8:	eef0 7a64 	vmovlt.f32	s15, s9
 800eeec:	ee34 4a23 	vadd.f32	s8, s8, s7
 800eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef4:	bf88      	it	hi
 800eef6:	eeb0 5a64 	vmovhi.f32	s10, s9
 800eefa:	2b0a      	cmp	r3, #10
 800eefc:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ef00:	d113      	bne.n	800ef2a <kalman_3gyro.constprop.0+0x2462>
 800ef02:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800ef06:	ed93 4a00 	vldr	s8, [r3]
 800ef0a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef12:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ef16:	bfb8      	it	lt
 800ef18:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef1c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef24:	bf88      	it	hi
 800ef26:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ef2a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ef2e:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800ef7c <kalman_3gyro.constprop.0+0x24b4>
 800ef32:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ef80 <kalman_3gyro.constprop.0+0x24b8>
 800ef36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef3a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ef3e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	dc25      	bgt.n	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ef48:	eef0 7ae4 	vabs.f32	s15, s9
 800ef4c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ef50:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800ef84 <kalman_3gyro.constprop.0+0x24bc>
 800ef54:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef5c:	dc1a      	bgt.n	800ef94 <kalman_3gyro.constprop.0+0x24cc>
 800ef5e:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800ef62:	2d00      	cmp	r5, #0
 800ef64:	f000 80e0 	beq.w	800f128 <kalman_3gyro.constprop.0+0x2660>
 800ef68:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	f002 8439 	beq.w	80117e4 <kalman_3gyro.constprop.0+0x4d1c>
 800ef72:	2201      	movs	r2, #1
 800ef74:	462b      	mov	r3, r5
 800ef76:	9201      	str	r2, [sp, #4]
 800ef78:	e01c      	b.n	800efb4 <kalman_3gyro.constprop.0+0x24ec>
 800ef7a:	bf00      	nop
 800ef7c:	3be56041 	.word	0x3be56041
 800ef80:	3dcccccd 	.word	0x3dcccccd
 800ef84:	3e333333 	.word	0x3e333333
 800ef88:	3d088889 	.word	0x3d088889
 800ef8c:	42480000 	.word	0x42480000
 800ef90:	00000000 	.word	0x00000000
 800ef94:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800ef98:	2100      	movs	r1, #0
 800ef9a:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800ef9e:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 80c1 	beq.w	800f12a <kalman_3gyro.constprop.0+0x2662>
 800efa8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800efac:	2a01      	cmp	r2, #1
 800efae:	f001 8615 	beq.w	8010bdc <kalman_3gyro.constprop.0+0x4114>
 800efb2:	9101      	str	r1, [sp, #4]
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	f041 87d2 	bne.w	8010f5e <kalman_3gyro.constprop.0+0x4496>
 800efba:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800efbe:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800efc2:	f240 1301 	movw	r3, #257	; 0x101
 800efc6:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800efca:	2301      	movs	r3, #1
 800efcc:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800efd0:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800efd4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800efd8:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800efdc:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800efe0:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800efe4:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800efe8:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800efec:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800eff0:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800eff4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eff8:	eef4 7ac8 	vcmpe.f32	s15, s16
 800effc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f000:	f2c2 809a 	blt.w	8011138 <kalman_3gyro.constprop.0+0x4670>
 800f004:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f008:	2a00      	cmp	r2, #0
 800f00a:	f002 83db 	beq.w	80117c4 <kalman_3gyro.constprop.0+0x4cfc>
 800f00e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f012:	3301      	adds	r3, #1
 800f014:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f018:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f01c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f024:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f028:	f002 84da 	beq.w	80119e0 <kalman_3gyro.constprop.0+0x4f18>
 800f02c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f030:	f002 80d0 	beq.w	80111d4 <kalman_3gyro.constprop.0+0x470c>
 800f034:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f038:	2a00      	cmp	r2, #0
 800f03a:	f042 80d0 	bne.w	80111de <kalman_3gyro.constprop.0+0x4716>
 800f03e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f040:	a830      	add	r0, sp, #192	; 0xc0
 800f042:	f04f 31ff 	mov.w	r1, #4294967295
 800f046:	4613      	mov	r3, r2
 800f048:	edd2 7a00 	vldr	s15, [r2]
 800f04c:	3101      	adds	r1, #1
 800f04e:	330c      	adds	r3, #12
 800f050:	3204      	adds	r2, #4
 800f052:	461c      	mov	r4, r3
 800f054:	ed94 7a00 	vldr	s14, [r4]
 800f058:	330c      	adds	r3, #12
 800f05a:	4598      	cmp	r8, r3
 800f05c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f060:	d1f7      	bne.n	800f052 <kalman_3gyro.constprop.0+0x258a>
 800f062:	2902      	cmp	r1, #2
 800f064:	ece0 7a01 	vstmia	r0!, {s15}
 800f068:	f108 0804 	add.w	r8, r8, #4
 800f06c:	d1eb      	bne.n	800f046 <kalman_3gyro.constprop.0+0x257e>
 800f06e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ef88 <kalman_3gyro.constprop.0+0x24c0>
 800f072:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f076:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f07a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f07e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f080:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f084:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f088:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f08c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f090:	460a      	mov	r2, r1
 800f092:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f096:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f09a:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f09e:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f0a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0aa:	f103 030c 	add.w	r3, r3, #12
 800f0ae:	bf88      	it	hi
 800f0b0:	eef0 7a47 	vmovhi.f32	s15, s14
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d1f2      	bne.n	800f09e <kalman_3gyro.constprop.0+0x25d6>
 800f0b8:	1d1a      	adds	r2, r3, #4
 800f0ba:	4290      	cmp	r0, r2
 800f0bc:	ece4 7a01 	vstmia	r4!, {s15}
 800f0c0:	d1e9      	bne.n	800f096 <kalman_3gyro.constprop.0+0x25ce>
 800f0c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0c4:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f0c8:	edd3 7a00 	vldr	s15, [r3]
 800f0cc:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f0d0:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f0d4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f0d8:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f0dc:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f0e0:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f0e4:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f0e8:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f0ec:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f0f0:	b14b      	cbz	r3, 800f106 <kalman_3gyro.constprop.0+0x263e>
 800f0f2:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f0f6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f0fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f102:	f102 8553 	bmi.w	8011bac <kalman_3gyro.constprop.0+0x50e4>
 800f106:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f10a:	2a1e      	cmp	r2, #30
 800f10c:	f002 84dd 	beq.w	8011aca <kalman_3gyro.constprop.0+0x5002>
 800f110:	1c53      	adds	r3, r2, #1
 800f112:	2aff      	cmp	r2, #255	; 0xff
 800f114:	bf14      	ite	ne
 800f116:	b2db      	uxtbne	r3, r3
 800f118:	23ff      	moveq	r3, #255	; 0xff
 800f11a:	2200      	movs	r2, #0
 800f11c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f120:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f124:	9b01      	ldr	r3, [sp, #4]
 800f126:	e012      	b.n	800f14e <kalman_3gyro.constprop.0+0x2686>
 800f128:	2301      	movs	r3, #1
 800f12a:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f12e:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f132:	9181      	str	r1, [sp, #516]	; 0x204
 800f134:	9282      	str	r2, [sp, #520]	; 0x208
 800f136:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f13a:	9183      	str	r1, [sp, #524]	; 0x20c
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f142:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f146:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f14a:	f88b 2001 	strb.w	r2, [fp, #1]
 800f14e:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800ef8c <kalman_3gyro.constprop.0+0x24c4>
 800f152:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	f2c0 875f 	blt.w	801001c <kalman_3gyro.constprop.0+0x3554>
 800f15e:	2200      	movs	r2, #0
 800f160:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f164:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f168:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d125      	bne.n	800f1bc <kalman_3gyro.constprop.0+0x26f4>
 800f170:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f174:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f178:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f17c:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f180:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f184:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f188:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f18c:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f190:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f194:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f198:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f19c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f1a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f1a4:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f1a8:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f1ac:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f1b0:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f1b4:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f1b8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f1bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f1c0:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f1c4:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f1c8:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f1cc:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f1d0:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f1d4:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f1d8:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f1dc:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f1e0:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f1e4:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f1e8:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f1ec:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f1f0:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f1f4:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f1f8:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f1fc:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f200:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f204:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f208:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f212:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f216:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f21a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f21e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f222:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f226:	2500      	movs	r5, #0
 800f228:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f22c:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f230:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f234:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f238:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f23c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f240:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f244:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f248:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f24c:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f250:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f254:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f258:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f25c:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f260:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f264:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f268:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f26c:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f270:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f274:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f278:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f27c:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f280:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f284:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f288:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f28c:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f290:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f294:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800ef90 <kalman_3gyro.constprop.0+0x24c8>
 800f298:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f29c:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f2a0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f2a4:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f2a8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f2ac:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f2b0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f2b4:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f2b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f2bc:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f2c0:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f2c4:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f2c8:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f2cc:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f2d0:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f2d4:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f2d8:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f2dc:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f2e0:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f2e4:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f2e8:	e005      	b.n	800f2f6 <kalman_3gyro.constprop.0+0x282e>
 800f2ea:	3501      	adds	r5, #1
 800f2ec:	2d0c      	cmp	r5, #12
 800f2ee:	f104 0404 	add.w	r4, r4, #4
 800f2f2:	f000 84fe 	beq.w	800fcf2 <kalman_3gyro.constprop.0+0x322a>
 800f2f6:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0f5      	beq.n	800f2ea <kalman_3gyro.constprop.0+0x2822>
 800f2fe:	edd4 da00 	vldr	s27, [r4]
 800f302:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f306:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f30a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f30e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f312:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f316:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f31a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f31e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f322:	9b01      	ldr	r3, [sp, #4]
 800f324:	ed89 8a00 	vstr	s16, [r9]
 800f328:	ed89 8a01 	vstr	s16, [r9, #4]
 800f32c:	ed89 8a02 	vstr	s16, [r9, #8]
 800f330:	ed89 8a03 	vstr	s16, [r9, #12]
 800f334:	ed89 8a04 	vstr	s16, [r9, #16]
 800f338:	ed89 8a05 	vstr	s16, [r9, #20]
 800f33c:	ed89 8a06 	vstr	s16, [r9, #24]
 800f340:	ed89 8a07 	vstr	s16, [r9, #28]
 800f344:	ed89 8a08 	vstr	s16, [r9, #32]
 800f348:	464e      	mov	r6, r9
 800f34a:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f34e:	464a      	mov	r2, r9
 800f350:	ecb3 7a01 	vldmia	r3!, {s14}
 800f354:	ecf2 7a01 	vldmia	r2!, {s15}
 800f358:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f360:	d006      	beq.n	800f370 <kalman_3gyro.constprop.0+0x28a8>
 800f362:	eef5 da40 	vcmp.f32	s27, #0.0
 800f366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36a:	bf18      	it	ne
 800f36c:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f370:	ed93 7a08 	vldr	s14, [r3, #32]
 800f374:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37c:	d006      	beq.n	800f38c <kalman_3gyro.constprop.0+0x28c4>
 800f37e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f386:	bf18      	it	ne
 800f388:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f38c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f390:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f398:	d006      	beq.n	800f3a8 <kalman_3gyro.constprop.0+0x28e0>
 800f39a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a2:	bf18      	it	ne
 800f3a4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f3a8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f3ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b4:	d006      	beq.n	800f3c4 <kalman_3gyro.constprop.0+0x28fc>
 800f3b6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3be:	bf18      	it	ne
 800f3c0:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f3c4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f3c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d0:	d006      	beq.n	800f3e0 <kalman_3gyro.constprop.0+0x2918>
 800f3d2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3da:	bf18      	it	ne
 800f3dc:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f3e0:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f3e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ec:	d006      	beq.n	800f3fc <kalman_3gyro.constprop.0+0x2934>
 800f3ee:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	bf18      	it	ne
 800f3f8:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f3fc:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f400:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f408:	d006      	beq.n	800f418 <kalman_3gyro.constprop.0+0x2950>
 800f40a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	bf18      	it	ne
 800f414:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f418:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f41c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f424:	d006      	beq.n	800f434 <kalman_3gyro.constprop.0+0x296c>
 800f426:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42e:	bf18      	it	ne
 800f430:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f434:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f438:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	d006      	beq.n	800f450 <kalman_3gyro.constprop.0+0x2988>
 800f442:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44a:	bf18      	it	ne
 800f44c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f450:	428b      	cmp	r3, r1
 800f452:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f456:	f47f af7b 	bne.w	800f350 <kalman_3gyro.constprop.0+0x2888>
 800f45a:	eef5 da40 	vcmp.f32	s27, #0.0
 800f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f462:	edd9 8a00 	vldr	s17, [r9]
 800f466:	f040 8543 	bne.w	800fef0 <kalman_3gyro.constprop.0+0x3428>
 800f46a:	eef0 7a6d 	vmov.f32	s15, s27
 800f46e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	ed99 9a01 	vldr	s18, [r9, #4]
 800f47a:	d006      	beq.n	800f48a <kalman_3gyro.constprop.0+0x29c2>
 800f47c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f484:	bf18      	it	ne
 800f486:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f48a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f492:	edd9 aa02 	vldr	s21, [r9, #8]
 800f496:	d006      	beq.n	800f4a6 <kalman_3gyro.constprop.0+0x29de>
 800f498:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a0:	bf18      	it	ne
 800f4a2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f4a6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	edd9 ba03 	vldr	s23, [r9, #12]
 800f4b2:	d006      	beq.n	800f4c2 <kalman_3gyro.constprop.0+0x29fa>
 800f4b4:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4bc:	bf18      	it	ne
 800f4be:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f4c2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	edd9 ca04 	vldr	s25, [r9, #16]
 800f4ce:	d006      	beq.n	800f4de <kalman_3gyro.constprop.0+0x2a16>
 800f4d0:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d8:	bf18      	it	ne
 800f4da:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f4de:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e6:	ed99 ca05 	vldr	s24, [r9, #20]
 800f4ea:	d006      	beq.n	800f4fa <kalman_3gyro.constprop.0+0x2a32>
 800f4ec:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f4:	bf18      	it	ne
 800f4f6:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f4fa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f502:	ed99 da06 	vldr	s26, [r9, #24]
 800f506:	d006      	beq.n	800f516 <kalman_3gyro.constprop.0+0x2a4e>
 800f508:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	bf18      	it	ne
 800f512:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f516:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	ed99 aa07 	vldr	s20, [r9, #28]
 800f522:	d006      	beq.n	800f532 <kalman_3gyro.constprop.0+0x2a6a>
 800f524:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52c:	bf18      	it	ne
 800f52e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f532:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53a:	ed99 ba08 	vldr	s22, [r9, #32]
 800f53e:	d006      	beq.n	800f54e <kalman_3gyro.constprop.0+0x2a86>
 800f540:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	bf18      	it	ne
 800f54a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f54e:	ab87      	add	r3, sp, #540	; 0x21c
 800f550:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f554:	ed92 7a00 	vldr	s14, [r2]
 800f558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f55c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f560:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f564:	2d05      	cmp	r5, #5
 800f566:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f56a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f56e:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f572:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f576:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f57a:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f57e:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f582:	ee2d da27 	vmul.f32	s26, s26, s15
 800f586:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f58a:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f58e:	edc9 8a00 	vstr	s17, [r9]
 800f592:	ed89 9a01 	vstr	s18, [r9, #4]
 800f596:	edc9 aa02 	vstr	s21, [r9, #8]
 800f59a:	edc9 ba03 	vstr	s23, [r9, #12]
 800f59e:	edc9 ca04 	vstr	s25, [r9, #16]
 800f5a2:	ed89 ca05 	vstr	s24, [r9, #20]
 800f5a6:	ed89 da06 	vstr	s26, [r9, #24]
 800f5aa:	ed89 aa07 	vstr	s20, [r9, #28]
 800f5ae:	ed89 ba08 	vstr	s22, [r9, #32]
 800f5b2:	f340 8497 	ble.w	800fee4 <kalman_3gyro.constprop.0+0x341c>
 800f5b6:	eef5 da40 	vcmp.f32	s27, #0.0
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	f000 8510 	beq.w	800ffe2 <kalman_3gyro.constprop.0+0x351a>
 800f5c2:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f5c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ce:	d001      	beq.n	800f5d4 <kalman_3gyro.constprop.0+0x2b0c>
 800f5d0:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f5d4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5dc:	d008      	beq.n	800f5f0 <kalman_3gyro.constprop.0+0x2b28>
 800f5de:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f5e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	bf18      	it	ne
 800f5ec:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f5f0:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	d008      	beq.n	800f60c <kalman_3gyro.constprop.0+0x2b44>
 800f5fa:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f5fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f606:	bf18      	it	ne
 800f608:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f60c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	d008      	beq.n	800f628 <kalman_3gyro.constprop.0+0x2b60>
 800f616:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f61a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	bf18      	it	ne
 800f624:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f628:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f630:	d008      	beq.n	800f644 <kalman_3gyro.constprop.0+0x2b7c>
 800f632:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f636:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63e:	bf18      	it	ne
 800f640:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f644:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64c:	d008      	beq.n	800f660 <kalman_3gyro.constprop.0+0x2b98>
 800f64e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f652:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	bf18      	it	ne
 800f65c:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f660:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f668:	d008      	beq.n	800f67c <kalman_3gyro.constprop.0+0x2bb4>
 800f66a:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f66e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	bf18      	it	ne
 800f678:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f67c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f684:	d008      	beq.n	800f698 <kalman_3gyro.constprop.0+0x2bd0>
 800f686:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f68a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	bf18      	it	ne
 800f694:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f698:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	d008      	beq.n	800f6b4 <kalman_3gyro.constprop.0+0x2bec>
 800f6a2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f6a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ae:	bf18      	it	ne
 800f6b0:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f6b4:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f6b6:	4413      	add	r3, r2
 800f6b8:	edd3 9a00 	vldr	s19, [r3]
 800f6bc:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f6c0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f6cc:	edcd 5a04 	vstr	s11, [sp, #16]
 800f6d0:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f6d4:	edcd 6a02 	vstr	s13, [sp, #8]
 800f6d8:	f007 ff76 	bl	80175c8 <memset>
 800f6dc:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f6e0:	eddd 5a04 	vldr	s11, [sp, #16]
 800f6e4:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f6e8:	eddd 6a02 	vldr	s13, [sp, #8]
 800f6ec:	4651      	mov	r1, sl
 800f6ee:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f6f2:	4653      	mov	r3, sl
 800f6f4:	ecf6 7a01 	vldmia	r6!, {s15}
 800f6f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f700:	d062      	beq.n	800f7c8 <kalman_3gyro.constprop.0+0x2d00>
 800f702:	eef5 da40 	vcmp.f32	s27, #0.0
 800f706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70a:	d005      	beq.n	800f718 <kalman_3gyro.constprop.0+0x2c50>
 800f70c:	ed93 7a00 	vldr	s14, [r3]
 800f710:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f714:	ed83 7a00 	vstr	s14, [r3]
 800f718:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f720:	d005      	beq.n	800f72e <kalman_3gyro.constprop.0+0x2c66>
 800f722:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f726:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f72a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f72e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	d005      	beq.n	800f744 <kalman_3gyro.constprop.0+0x2c7c>
 800f738:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f73c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f740:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f744:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	d005      	beq.n	800f75a <kalman_3gyro.constprop.0+0x2c92>
 800f74e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f752:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f756:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f75a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f762:	d005      	beq.n	800f770 <kalman_3gyro.constprop.0+0x2ca8>
 800f764:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f768:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f76c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f770:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f778:	d005      	beq.n	800f786 <kalman_3gyro.constprop.0+0x2cbe>
 800f77a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f77e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f782:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f786:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	d005      	beq.n	800f79c <kalman_3gyro.constprop.0+0x2cd4>
 800f790:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f794:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f798:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f79c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a4:	d005      	beq.n	800f7b2 <kalman_3gyro.constprop.0+0x2cea>
 800f7a6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f7aa:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f7ae:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f7b2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ba:	d005      	beq.n	800f7c8 <kalman_3gyro.constprop.0+0x2d00>
 800f7bc:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f7c0:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f7c4:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f7c8:	4296      	cmp	r6, r2
 800f7ca:	f103 0304 	add.w	r3, r3, #4
 800f7ce:	d191      	bne.n	800f6f4 <kalman_3gyro.constprop.0+0x2c2c>
 800f7d0:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f7d4:	4656      	mov	r6, sl
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	2208      	movs	r2, #8
 800f7da:	2000      	movs	r0, #0
 800f7dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7e0:	e074      	b.n	800f8cc <kalman_3gyro.constprop.0+0x2e04>
 800f7e2:	edd6 7a00 	vldr	s15, [r6]
 800f7e6:	ed83 8a01 	vstr	s16, [r3, #4]
 800f7ea:	eef1 7a67 	vneg.f32	s15, s15
 800f7ee:	2801      	cmp	r0, #1
 800f7f0:	edc6 7a00 	vstr	s15, [r6]
 800f7f4:	f1a2 0c07 	sub.w	ip, r2, #7
 800f7f8:	f000 831e 	beq.w	800fe38 <kalman_3gyro.constprop.0+0x3370>
 800f7fc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f800:	eddc 7a00 	vldr	s15, [ip]
 800f804:	ed83 8a02 	vstr	s16, [r3, #8]
 800f808:	eef1 7a67 	vneg.f32	s15, s15
 800f80c:	2802      	cmp	r0, #2
 800f80e:	edcc 7a00 	vstr	s15, [ip]
 800f812:	f1a2 0c06 	sub.w	ip, r2, #6
 800f816:	f000 82f8 	beq.w	800fe0a <kalman_3gyro.constprop.0+0x3342>
 800f81a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f81e:	eddc 7a00 	vldr	s15, [ip]
 800f822:	ed83 8a03 	vstr	s16, [r3, #12]
 800f826:	eef1 7a67 	vneg.f32	s15, s15
 800f82a:	2803      	cmp	r0, #3
 800f82c:	edcc 7a00 	vstr	s15, [ip]
 800f830:	f1a2 0c05 	sub.w	ip, r2, #5
 800f834:	d170      	bne.n	800f918 <kalman_3gyro.constprop.0+0x2e50>
 800f836:	edd6 7a03 	vldr	s15, [r6, #12]
 800f83a:	ed83 8a04 	vstr	s16, [r3, #16]
 800f83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f842:	f1a2 0e04 	sub.w	lr, r2, #4
 800f846:	edc6 7a03 	vstr	s15, [r6, #12]
 800f84a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f84e:	edde 7a00 	vldr	s15, [lr]
 800f852:	ed83 8a05 	vstr	s16, [r3, #20]
 800f856:	eef1 7a67 	vneg.f32	s15, s15
 800f85a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f85e:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f862:	edce 7a00 	vstr	s15, [lr]
 800f866:	eddc 7a00 	vldr	s15, [ip]
 800f86a:	ed83 8a06 	vstr	s16, [r3, #24]
 800f86e:	eef1 7a67 	vneg.f32	s15, s15
 800f872:	edcc 7a00 	vstr	s15, [ip]
 800f876:	f1a2 0c02 	sub.w	ip, r2, #2
 800f87a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f87e:	eddc 7a00 	vldr	s15, [ip]
 800f882:	ed83 8a07 	vstr	s16, [r3, #28]
 800f886:	eef1 7a67 	vneg.f32	s15, s15
 800f88a:	2807      	cmp	r0, #7
 800f88c:	edcc 7a00 	vstr	s15, [ip]
 800f890:	f102 3cff 	add.w	ip, r2, #4294967295
 800f894:	f040 80a2 	bne.w	800f9dc <kalman_3gyro.constprop.0+0x2f14>
 800f898:	edd6 7a07 	vldr	s15, [r6, #28]
 800f89c:	ed83 8a08 	vstr	s16, [r3, #32]
 800f8a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8a4:	edc6 7a07 	vstr	s15, [r6, #28]
 800f8a8:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f8ac:	eddc 7a00 	vldr	s15, [ip]
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	eef1 7a67 	vneg.f32	s15, s15
 800f8b6:	2809      	cmp	r0, #9
 800f8b8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f8bc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f8c0:	f102 0209 	add.w	r2, r2, #9
 800f8c4:	edcc 7a00 	vstr	s15, [ip]
 800f8c8:	f000 809f 	beq.w	800fa0a <kalman_3gyro.constprop.0+0x2f42>
 800f8cc:	ed83 8a00 	vstr	s16, [r3]
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d186      	bne.n	800f7e2 <kalman_3gyro.constprop.0+0x2d1a>
 800f8d4:	edda 7a00 	vldr	s15, [sl]
 800f8d8:	ed83 8a01 	vstr	s16, [r3, #4]
 800f8dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8e0:	f1a2 0e07 	sub.w	lr, r2, #7
 800f8e4:	edc6 7a00 	vstr	s15, [r6]
 800f8e8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f8ec:	edde 7a00 	vldr	s15, [lr]
 800f8f0:	ed83 8a02 	vstr	s16, [r3, #8]
 800f8f4:	eef1 7a67 	vneg.f32	s15, s15
 800f8f8:	f1a2 0c06 	sub.w	ip, r2, #6
 800f8fc:	edce 7a00 	vstr	s15, [lr]
 800f900:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f904:	eddc 7a00 	vldr	s15, [ip]
 800f908:	ed83 8a03 	vstr	s16, [r3, #12]
 800f90c:	eef1 7a67 	vneg.f32	s15, s15
 800f910:	edcc 7a00 	vstr	s15, [ip]
 800f914:	f1a2 0c05 	sub.w	ip, r2, #5
 800f918:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f91c:	eddc 7a00 	vldr	s15, [ip]
 800f920:	ed83 8a04 	vstr	s16, [r3, #16]
 800f924:	eef1 7a67 	vneg.f32	s15, s15
 800f928:	2804      	cmp	r0, #4
 800f92a:	edcc 7a00 	vstr	s15, [ip]
 800f92e:	f1a2 0c04 	sub.w	ip, r2, #4
 800f932:	d031      	beq.n	800f998 <kalman_3gyro.constprop.0+0x2ed0>
 800f934:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f938:	eddc 7a00 	vldr	s15, [ip]
 800f93c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f940:	eef1 7a67 	vneg.f32	s15, s15
 800f944:	2805      	cmp	r0, #5
 800f946:	edcc 7a00 	vstr	s15, [ip]
 800f94a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f94e:	f000 8245 	beq.w	800fddc <kalman_3gyro.constprop.0+0x3314>
 800f952:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f956:	eddc 7a00 	vldr	s15, [ip]
 800f95a:	ed83 8a06 	vstr	s16, [r3, #24]
 800f95e:	eef1 7a67 	vneg.f32	s15, s15
 800f962:	2806      	cmp	r0, #6
 800f964:	edcc 7a00 	vstr	s15, [ip]
 800f968:	f1a2 0c02 	sub.w	ip, r2, #2
 800f96c:	d185      	bne.n	800f87a <kalman_3gyro.constprop.0+0x2db2>
 800f96e:	edd6 7a06 	vldr	s15, [r6, #24]
 800f972:	ed83 8a07 	vstr	s16, [r3, #28]
 800f976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f97a:	f102 3cff 	add.w	ip, r2, #4294967295
 800f97e:	edc6 7a06 	vstr	s15, [r6, #24]
 800f982:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f986:	eddc 7a00 	vldr	s15, [ip]
 800f98a:	ed83 8a08 	vstr	s16, [r3, #32]
 800f98e:	eef1 7a67 	vneg.f32	s15, s15
 800f992:	edcc 7a00 	vstr	s15, [ip]
 800f996:	e787      	b.n	800f8a8 <kalman_3gyro.constprop.0+0x2de0>
 800f998:	edd6 7a04 	vldr	s15, [r6, #16]
 800f99c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9a4:	f1a2 0e03 	sub.w	lr, r2, #3
 800f9a8:	edc6 7a04 	vstr	s15, [r6, #16]
 800f9ac:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f9b0:	edde 7a00 	vldr	s15, [lr]
 800f9b4:	ed83 8a06 	vstr	s16, [r3, #24]
 800f9b8:	eef1 7a67 	vneg.f32	s15, s15
 800f9bc:	f1a2 0c02 	sub.w	ip, r2, #2
 800f9c0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9c4:	edce 7a00 	vstr	s15, [lr]
 800f9c8:	eddc 7a00 	vldr	s15, [ip]
 800f9cc:	ed83 8a07 	vstr	s16, [r3, #28]
 800f9d0:	eef1 7a67 	vneg.f32	s15, s15
 800f9d4:	edcc 7a00 	vstr	s15, [ip]
 800f9d8:	f102 3cff 	add.w	ip, r2, #4294967295
 800f9dc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9e0:	eddc 7a00 	vldr	s15, [ip]
 800f9e4:	ed83 8a08 	vstr	s16, [r3, #32]
 800f9e8:	eef1 7a67 	vneg.f32	s15, s15
 800f9ec:	2808      	cmp	r0, #8
 800f9ee:	edcc 7a00 	vstr	s15, [ip]
 800f9f2:	f47f af59 	bne.w	800f8a8 <kalman_3gyro.constprop.0+0x2de0>
 800f9f6:	ed96 7a08 	vldr	s14, [r6, #32]
 800f9fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa02:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fa06:	edc2 7a00 	vstr	s15, [r2]
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fa10:	ecb1 3a01 	vldmia	r1!, {s6}
 800fa14:	edd1 3a08 	vldr	s7, [r1, #32]
 800fa18:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fa1c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fa20:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fa24:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fa28:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fa2c:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fa30:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fa34:	465a      	mov	r2, fp
 800fa36:	463b      	mov	r3, r7
 800fa38:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa40:	d00c      	beq.n	800fa5c <kalman_3gyro.constprop.0+0x2f94>
 800fa42:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fa46:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4e:	d005      	beq.n	800fa5c <kalman_3gyro.constprop.0+0x2f94>
 800fa50:	edd3 7a00 	vldr	s15, [r3]
 800fa54:	eee3 7a22 	vfma.f32	s15, s6, s5
 800fa58:	edc3 7a00 	vstr	s15, [r3]
 800fa5c:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa64:	d00c      	beq.n	800fa80 <kalman_3gyro.constprop.0+0x2fb8>
 800fa66:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800fa6a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa72:	d005      	beq.n	800fa80 <kalman_3gyro.constprop.0+0x2fb8>
 800fa74:	edd3 7a00 	vldr	s15, [r3]
 800fa78:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800fa7c:	edc3 7a00 	vstr	s15, [r3]
 800fa80:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fa84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa88:	d00c      	beq.n	800faa4 <kalman_3gyro.constprop.0+0x2fdc>
 800fa8a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fa8e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fa92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa96:	d005      	beq.n	800faa4 <kalman_3gyro.constprop.0+0x2fdc>
 800fa98:	edd3 7a00 	vldr	s15, [r3]
 800fa9c:	eee4 7a22 	vfma.f32	s15, s8, s5
 800faa0:	edc3 7a00 	vstr	s15, [r3]
 800faa4:	eef5 4a40 	vcmp.f32	s9, #0.0
 800faa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faac:	d00c      	beq.n	800fac8 <kalman_3gyro.constprop.0+0x3000>
 800faae:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fab2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faba:	d005      	beq.n	800fac8 <kalman_3gyro.constprop.0+0x3000>
 800fabc:	edd3 7a00 	vldr	s15, [r3]
 800fac0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fac4:	edc3 7a00 	vstr	s15, [r3]
 800fac8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800facc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad0:	d00c      	beq.n	800faec <kalman_3gyro.constprop.0+0x3024>
 800fad2:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fad6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fade:	d005      	beq.n	800faec <kalman_3gyro.constprop.0+0x3024>
 800fae0:	edd3 7a00 	vldr	s15, [r3]
 800fae4:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fae8:	edc3 7a00 	vstr	s15, [r3]
 800faec:	eef5 5a40 	vcmp.f32	s11, #0.0
 800faf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf4:	d00c      	beq.n	800fb10 <kalman_3gyro.constprop.0+0x3048>
 800faf6:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fafa:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb02:	d005      	beq.n	800fb10 <kalman_3gyro.constprop.0+0x3048>
 800fb04:	edd3 7a00 	vldr	s15, [r3]
 800fb08:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fb0c:	edc3 7a00 	vstr	s15, [r3]
 800fb10:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb18:	d00c      	beq.n	800fb34 <kalman_3gyro.constprop.0+0x306c>
 800fb1a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fb1e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb26:	d005      	beq.n	800fb34 <kalman_3gyro.constprop.0+0x306c>
 800fb28:	edd3 7a00 	vldr	s15, [r3]
 800fb2c:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fb30:	edc3 7a00 	vstr	s15, [r3]
 800fb34:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3c:	d00c      	beq.n	800fb58 <kalman_3gyro.constprop.0+0x3090>
 800fb3e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fb42:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4a:	d005      	beq.n	800fb58 <kalman_3gyro.constprop.0+0x3090>
 800fb4c:	edd3 7a00 	vldr	s15, [r3]
 800fb50:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fb54:	edc3 7a00 	vstr	s15, [r3]
 800fb58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb60:	d00c      	beq.n	800fb7c <kalman_3gyro.constprop.0+0x30b4>
 800fb62:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fb66:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6e:	d005      	beq.n	800fb7c <kalman_3gyro.constprop.0+0x30b4>
 800fb70:	edd3 7a00 	vldr	s15, [r3]
 800fb74:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fb78:	edc3 7a00 	vstr	s15, [r3]
 800fb7c:	3224      	adds	r2, #36	; 0x24
 800fb7e:	4296      	cmp	r6, r2
 800fb80:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fb84:	f47f af58 	bne.w	800fa38 <kalman_3gyro.constprop.0+0x2f70>
 800fb88:	3001      	adds	r0, #1
 800fb8a:	2809      	cmp	r0, #9
 800fb8c:	f107 0704 	add.w	r7, r7, #4
 800fb90:	f47f af3e 	bne.w	800fa10 <kalman_3gyro.constprop.0+0x2f48>
 800fb94:	9801      	ldr	r0, [sp, #4]
 800fb96:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fb9a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fb9e:	f007 fd05 	bl	80175ac <memcpy>
 800fba2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbaa:	f000 817c 	beq.w	800fea6 <kalman_3gyro.constprop.0+0x33de>
 800fbae:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb6:	f000 8176 	beq.w	800fea6 <kalman_3gyro.constprop.0+0x33de>
 800fbba:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc2:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fbc6:	f040 8212 	bne.w	800ffee <kalman_3gyro.constprop.0+0x3526>
 800fbca:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd2:	f000 8177 	beq.w	800fec4 <kalman_3gyro.constprop.0+0x33fc>
 800fbd6:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbde:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fbe2:	f040 81cb 	bne.w	800ff7c <kalman_3gyro.constprop.0+0x34b4>
 800fbe6:	eef0 ba47 	vmov.f32	s23, s14
 800fbea:	eef0 aa49 	vmov.f32	s21, s18
 800fbee:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	f000 8138 	beq.w	800fe6a <kalman_3gyro.constprop.0+0x33a2>
 800fbfa:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc02:	f000 824e 	beq.w	80100a2 <kalman_3gyro.constprop.0+0x35da>
 800fc06:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fc12:	eef0 7a48 	vmov.f32	s15, s16
 800fc16:	f040 81c5 	bne.w	800ffa4 <kalman_3gyro.constprop.0+0x34dc>
 800fc1a:	eeb0 ca47 	vmov.f32	s24, s14
 800fc1e:	eef0 ca67 	vmov.f32	s25, s15
 800fc22:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2a:	f000 8179 	beq.w	800ff20 <kalman_3gyro.constprop.0+0x3458>
 800fc2e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc36:	f000 8125 	beq.w	800fe84 <kalman_3gyro.constprop.0+0x33bc>
 800fc3a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc42:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fc46:	eef0 7a48 	vmov.f32	s15, s16
 800fc4a:	f040 81be 	bne.w	800ffca <kalman_3gyro.constprop.0+0x3502>
 800fc4e:	eeb0 aa47 	vmov.f32	s20, s14
 800fc52:	eeb0 da67 	vmov.f32	s26, s15
 800fc56:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5e:	f000 811f 	beq.w	800fea0 <kalman_3gyro.constprop.0+0x33d8>
 800fc62:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6a:	f000 821d 	beq.w	80100a8 <kalman_3gyro.constprop.0+0x35e0>
 800fc6e:	eef0 7a48 	vmov.f32	s15, s16
 800fc72:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fc76:	eef0 9a67 	vmov.f32	s19, s15
 800fc7a:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fc7e:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fc82:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fc86:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fc8a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fc8e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fc92:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fc96:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fc9a:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fc9e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fca2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fca6:	ee74 baab 	vadd.f32	s23, s9, s23
 800fcaa:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fcae:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fcb2:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fcb6:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fcba:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fcbe:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fcc2:	3501      	adds	r5, #1
 800fcc4:	2d0c      	cmp	r5, #12
 800fcc6:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fcca:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fcce:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fcd2:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fcd6:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fcda:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fcde:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800fce2:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800fce6:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fcea:	f104 0404 	add.w	r4, r4, #4
 800fcee:	f47f ab02 	bne.w	800f2f6 <kalman_3gyro.constprop.0+0x282e>
 800fcf2:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fcf6:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fcfa:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fcfe:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800fd02:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fd06:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fd0a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fd0e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd16:	f100 81b5 	bmi.w	8010084 <kalman_3gyro.constprop.0+0x35bc>
 800fd1a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800fd1e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 80100b0 <kalman_3gyro.constprop.0+0x35e8>
 800fd22:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800fd26:	ee67 4a86 	vmul.f32	s9, s15, s12
 800fd2a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800fd2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd32:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fd36:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800fd3a:	aa36      	add	r2, sp, #216	; 0xd8
 800fd3c:	edc3 4a00 	vstr	s9, [r3]
 800fd40:	edc3 5a01 	vstr	s11, [r3, #4]
 800fd44:	edc3 7a02 	vstr	s15, [r3, #8]
 800fd48:	ed83 5a03 	vstr	s10, [r3, #12]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	4611      	mov	r1, r2
 800fd50:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800fd54:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800fd58:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800fd5c:	f7fb fdbc 	bl	800b8d8 <qmult>
 800fd60:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800fd64:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800fd68:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800fd6c:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800fd70:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800fd74:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fd76:	ee66 7a06 	vmul.f32	s15, s12, s12
 800fd7a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800fd7e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fd82:	ae54      	add	r6, sp, #336	; 0x150
 800fd84:	af5c      	add	r7, sp, #368	; 0x170
 800fd86:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fd8a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fd8e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800fd92:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800fd96:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800fd9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800fd9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fda2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fda6:	edc3 5a00 	vstr	s11, [r3]
 800fdaa:	ed83 6a01 	vstr	s12, [r3, #4]
 800fdae:	edc3 6a02 	vstr	s13, [r3, #8]
 800fdb2:	ed83 7a03 	vstr	s14, [r3, #12]
 800fdb6:	4634      	mov	r4, r6
 800fdb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdba:	42bc      	cmp	r4, r7
 800fdbc:	6028      	str	r0, [r5, #0]
 800fdbe:	6069      	str	r1, [r5, #4]
 800fdc0:	60aa      	str	r2, [r5, #8]
 800fdc2:	60eb      	str	r3, [r5, #12]
 800fdc4:	4626      	mov	r6, r4
 800fdc6:	f105 0510 	add.w	r5, r5, #16
 800fdca:	d1f4      	bne.n	800fdb6 <kalman_3gyro.constprop.0+0x32ee>
 800fdcc:	6820      	ldr	r0, [r4, #0]
 800fdce:	6028      	str	r0, [r5, #0]
 800fdd0:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800fdd4:	ecbd 8b10 	vpop	{d8-d15}
 800fdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fddc:	edd6 7a05 	vldr	s15, [r6, #20]
 800fde0:	ed83 8a06 	vstr	s16, [r3, #24]
 800fde4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fde8:	f1a2 0e02 	sub.w	lr, r2, #2
 800fdec:	edc6 7a05 	vstr	s15, [r6, #20]
 800fdf0:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fdf4:	edde 7a00 	vldr	s15, [lr]
 800fdf8:	ed83 8a07 	vstr	s16, [r3, #28]
 800fdfc:	eef1 7a67 	vneg.f32	s15, s15
 800fe00:	f102 3cff 	add.w	ip, r2, #4294967295
 800fe04:	edce 7a00 	vstr	s15, [lr]
 800fe08:	e5bb      	b.n	800f982 <kalman_3gyro.constprop.0+0x2eba>
 800fe0a:	edd6 7a02 	vldr	s15, [r6, #8]
 800fe0e:	ed83 8a03 	vstr	s16, [r3, #12]
 800fe12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe16:	f1a2 0c05 	sub.w	ip, r2, #5
 800fe1a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fe1e:	edc6 7a02 	vstr	s15, [r6, #8]
 800fe22:	eddc 7a00 	vldr	s15, [ip]
 800fe26:	ed83 8a04 	vstr	s16, [r3, #16]
 800fe2a:	eef1 7a67 	vneg.f32	s15, s15
 800fe2e:	edcc 7a00 	vstr	s15, [ip]
 800fe32:	f1a2 0c04 	sub.w	ip, r2, #4
 800fe36:	e57d      	b.n	800f934 <kalman_3gyro.constprop.0+0x2e6c>
 800fe38:	edd6 7a01 	vldr	s15, [r6, #4]
 800fe3c:	ed83 8a02 	vstr	s16, [r3, #8]
 800fe40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe44:	f1a2 0c06 	sub.w	ip, r2, #6
 800fe48:	edc6 7a01 	vstr	s15, [r6, #4]
 800fe4c:	e558      	b.n	800f900 <kalman_3gyro.constprop.0+0x2e38>
 800fe4e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe56:	ee69 7aab 	vmul.f32	s15, s19, s23
 800fe5a:	eeb0 7a48 	vmov.f32	s14, s16
 800fe5e:	f040 8097 	bne.w	800ff90 <kalman_3gyro.constprop.0+0x34c8>
 800fe62:	eef0 ca67 	vmov.f32	s25, s15
 800fe66:	eef0 ba47 	vmov.f32	s23, s14
 800fe6a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fe6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe72:	f43f aed6 	beq.w	800fc22 <kalman_3gyro.constprop.0+0x315a>
 800fe76:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7e:	d142      	bne.n	800ff06 <kalman_3gyro.constprop.0+0x343e>
 800fe80:	eeb0 ca69 	vmov.f32	s24, s19
 800fe84:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fe88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8c:	f040 80ba 	bne.w	8010004 <kalman_3gyro.constprop.0+0x353c>
 800fe90:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe98:	eeb0 da4a 	vmov.f32	s26, s20
 800fe9c:	f47f aee1 	bne.w	800fc62 <kalman_3gyro.constprop.0+0x319a>
 800fea0:	eef0 9a4b 	vmov.f32	s19, s22
 800fea4:	e6e9      	b.n	800fc7a <kalman_3gyro.constprop.0+0x31b2>
 800fea6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800feaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feae:	d051      	beq.n	800ff54 <kalman_3gyro.constprop.0+0x348c>
 800feb0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	f040 8097 	bne.w	800ffea <kalman_3gyro.constprop.0+0x3522>
 800febc:	eef0 aa69 	vmov.f32	s21, s19
 800fec0:	eef0 8a69 	vmov.f32	s17, s19
 800fec4:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	f43f ae8f 	beq.w	800fbee <kalman_3gyro.constprop.0+0x3126>
 800fed0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed8:	d1b9      	bne.n	800fe4e <kalman_3gyro.constprop.0+0x3386>
 800feda:	eef0 ca69 	vmov.f32	s25, s19
 800fede:	eef0 ba69 	vmov.f32	s23, s19
 800fee2:	e7c2      	b.n	800fe6a <kalman_3gyro.constprop.0+0x33a2>
 800fee4:	aa7b      	add	r2, sp, #492	; 0x1ec
 800fee6:	4413      	add	r3, r2
 800fee8:	edd3 9a00 	vldr	s19, [r3]
 800feec:	f7ff bbe8 	b.w	800f6c0 <kalman_3gyro.constprop.0+0x2bf8>
 800fef0:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef8:	bf14      	ite	ne
 800fefa:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800fefe:	eef0 7a68 	vmoveq.f32	s15, s17
 800ff02:	f7ff bab4 	b.w	800f46e <kalman_3gyro.constprop.0+0x29a6>
 800ff06:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800ff12:	eeb0 7a48 	vmov.f32	s14, s16
 800ff16:	d14e      	bne.n	800ffb6 <kalman_3gyro.constprop.0+0x34ee>
 800ff18:	eeb0 da67 	vmov.f32	s26, s15
 800ff1c:	eeb0 ca47 	vmov.f32	s24, s14
 800ff20:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ff24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff28:	f43f ae95 	beq.w	800fc56 <kalman_3gyro.constprop.0+0x318e>
 800ff2c:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ff30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff34:	f000 84bd 	beq.w	80108b2 <kalman_3gyro.constprop.0+0x3dea>
 800ff38:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ff3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff40:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800ff44:	eeb0 7a48 	vmov.f32	s14, s16
 800ff48:	d148      	bne.n	800ffdc <kalman_3gyro.constprop.0+0x3514>
 800ff4a:	eef0 9a67 	vmov.f32	s19, s15
 800ff4e:	eeb0 aa47 	vmov.f32	s20, s14
 800ff52:	e692      	b.n	800fc7a <kalman_3gyro.constprop.0+0x31b2>
 800ff54:	eef5 aa40 	vcmp.f32	s21, #0.0
 800ff58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5c:	d05b      	beq.n	8010016 <kalman_3gyro.constprop.0+0x354e>
 800ff5e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ff62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff66:	d0a9      	beq.n	800febc <kalman_3gyro.constprop.0+0x33f4>
 800ff68:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ff6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff70:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800ff74:	eef0 8a49 	vmov.f32	s17, s18
 800ff78:	f43f ae35 	beq.w	800fbe6 <kalman_3gyro.constprop.0+0x311e>
 800ff7c:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	ee69 7aab 	vmul.f32	s15, s19, s23
 800ff88:	eef0 aa49 	vmov.f32	s21, s18
 800ff8c:	f43f af69 	beq.w	800fe62 <kalman_3gyro.constprop.0+0x339a>
 800ff90:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ff94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff98:	eef0 ba47 	vmov.f32	s23, s14
 800ff9c:	ee29 7aac 	vmul.f32	s14, s19, s25
 800ffa0:	f43f ae3b 	beq.w	800fc1a <kalman_3gyro.constprop.0+0x3152>
 800ffa4:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	eef0 ca67 	vmov.f32	s25, s15
 800ffb0:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800ffb4:	d0b0      	beq.n	800ff18 <kalman_3gyro.constprop.0+0x3450>
 800ffb6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ffba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffbe:	eeb0 ca47 	vmov.f32	s24, s14
 800ffc2:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800ffc6:	f43f ae42 	beq.w	800fc4e <kalman_3gyro.constprop.0+0x3186>
 800ffca:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ffce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd2:	eeb0 da67 	vmov.f32	s26, s15
 800ffd6:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800ffda:	d0b6      	beq.n	800ff4a <kalman_3gyro.constprop.0+0x3482>
 800ffdc:	eeb0 aa47 	vmov.f32	s20, s14
 800ffe0:	e647      	b.n	800fc72 <kalman_3gyro.constprop.0+0x31aa>
 800ffe2:	eef0 7a6d 	vmov.f32	s15, s27
 800ffe6:	f7ff baf5 	b.w	800f5d4 <kalman_3gyro.constprop.0+0x2b0c>
 800ffea:	eef0 8a48 	vmov.f32	s17, s16
 800ffee:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff6:	ee29 9a29 	vmul.f32	s18, s18, s19
 800fffa:	f47f adec 	bne.w	800fbd6 <kalman_3gyro.constprop.0+0x310e>
 800fffe:	eef0 aa49 	vmov.f32	s21, s18
 8010002:	e75f      	b.n	800fec4 <kalman_3gyro.constprop.0+0x33fc>
 8010004:	ed9f ba2a 	vldr	s22, [pc, #168]	; 80100b0 <kalman_3gyro.constprop.0+0x35e8>
 8010008:	eef0 9a48 	vmov.f32	s19, s16
 801000c:	eeb0 aa48 	vmov.f32	s20, s16
 8010010:	eeb0 da48 	vmov.f32	s26, s16
 8010014:	e631      	b.n	800fc7a <kalman_3gyro.constprop.0+0x31b2>
 8010016:	eef0 8a6a 	vmov.f32	s17, s21
 801001a:	e753      	b.n	800fec4 <kalman_3gyro.constprop.0+0x33fc>
 801001c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8010020:	2a31      	cmp	r2, #49	; 0x31
 8010022:	f63f a8a3 	bhi.w	800f16c <kalman_3gyro.constprop.0+0x26a4>
 8010026:	2100      	movs	r1, #0
 8010028:	3201      	adds	r2, #1
 801002a:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801002e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8010032:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8010036:	f7ff b899 	b.w	800f16c <kalman_3gyro.constprop.0+0x26a4>
 801003a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801003e:	2b00      	cmp	r3, #0
 8010040:	f340 8423 	ble.w	801088a <kalman_3gyro.constprop.0+0x3dc2>
 8010044:	3b01      	subs	r3, #1
 8010046:	2200      	movs	r2, #0
 8010048:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801004c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8010050:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8010054:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8010058:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 801005c:	f7fe bca9 	b.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 8010060:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8010064:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8010068:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 801006c:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8010070:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8010074:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8010078:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 801007c:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8010080:	f7fe bc18 	b.w	800e8b4 <kalman_3gyro.constprop.0+0x1dec>
 8010084:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010088:	eef0 4a46 	vmov.f32	s9, s12
 801008c:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8010090:	eef0 7a47 	vmov.f32	s15, s14
 8010094:	eef0 5a66 	vmov.f32	s11, s13
 8010098:	e64b      	b.n	800fd32 <kalman_3gyro.constprop.0+0x326a>
 801009a:	eeb1 7a47 	vneg.f32	s14, s14
 801009e:	f7fd bc66 	b.w	800d96e <kalman_3gyro.constprop.0+0xea6>
 80100a2:	eef0 ca69 	vmov.f32	s25, s19
 80100a6:	e6e0      	b.n	800fe6a <kalman_3gyro.constprop.0+0x33a2>
 80100a8:	eeb0 ba69 	vmov.f32	s22, s19
 80100ac:	e5e5      	b.n	800fc7a <kalman_3gyro.constprop.0+0x31b2>
 80100ae:	bf00      	nop
 80100b0:	00000000 	.word	0x00000000
 80100b4:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 80100b8:	49dc      	ldr	r1, [pc, #880]	; (801042c <kalman_3gyro.constprop.0+0x3964>)
 80100ba:	4bdd      	ldr	r3, [pc, #884]	; (8010430 <kalman_3gyro.constprop.0+0x3968>)
 80100bc:	4add      	ldr	r2, [pc, #884]	; (8010434 <kalman_3gyro.constprop.0+0x396c>)
 80100be:	2000      	movs	r0, #0
 80100c0:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 80100c4:	6029      	str	r1, [r5, #0]
 80100c6:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 80100ca:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 80100ce:	6002      	str	r2, [r0, #0]
 80100d0:	600b      	str	r3, [r1, #0]
 80100d2:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 80100d6:	9004      	str	r0, [sp, #16]
 80100d8:	9110      	str	r1, [sp, #64]	; 0x40
 80100da:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f000 80b4 	beq.w	801024c <kalman_3gyro.constprop.0+0x3784>
 80100e4:	240c      	movs	r4, #12
 80100e6:	eddf bad4 	vldr	s23, [pc, #848]	; 8010438 <kalman_3gyro.constprop.0+0x3970>
 80100ea:	ed9f bad4 	vldr	s22, [pc, #848]	; 801043c <kalman_3gyro.constprop.0+0x3974>
 80100ee:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010440 <kalman_3gyro.constprop.0+0x3978>
 80100f2:	ed9f aad4 	vldr	s20, [pc, #848]	; 8010444 <kalman_3gyro.constprop.0+0x397c>
 80100f6:	eddf aad4 	vldr	s21, [pc, #848]	; 8010448 <kalman_3gyro.constprop.0+0x3980>
 80100fa:	9f08      	ldr	r7, [sp, #32]
 80100fc:	fb14 8403 	smlabb	r4, r4, r3, r8
 8010100:	4646      	mov	r6, r8
 8010102:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010106:	e06b      	b.n	80101e0 <kalman_3gyro.constprop.0+0x3718>
 8010108:	eeb4 7aca 	vcmpe.f32	s14, s20
 801010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010110:	f300 815a 	bgt.w	80103c8 <kalman_3gyro.constprop.0+0x3900>
 8010114:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010118:	ee17 0a90 	vmov	r0, s15
 801011c:	f7f0 f9b8 	bl	8000490 <__aeabi_f2d>
 8010120:	ec41 0b10 	vmov	d0, r0, r1
 8010124:	f005 fb04 	bl	8015730 <ceil>
 8010128:	ec51 0b10 	vmov	r0, r1, d0
 801012c:	f7f0 fcb8 	bl	8000aa0 <__aeabi_d2f>
 8010130:	ee07 0a90 	vmov	s15, r0
 8010134:	edc6 7a00 	vstr	s15, [r6]
 8010138:	ed97 7a01 	vldr	s14, [r7, #4]
 801013c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010140:	eef0 6ae7 	vabs.f32	s13, s15
 8010144:	eef4 6acb 	vcmpe.f32	s13, s22
 8010148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014c:	d51b      	bpl.n	8010186 <kalman_3gyro.constprop.0+0x36be>
 801014e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010156:	f280 8120 	bge.w	801039a <kalman_3gyro.constprop.0+0x38d2>
 801015a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010162:	f300 812e 	bgt.w	80103c2 <kalman_3gyro.constprop.0+0x38fa>
 8010166:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801016a:	ee17 0a90 	vmov	r0, s15
 801016e:	f7f0 f98f 	bl	8000490 <__aeabi_f2d>
 8010172:	ec41 0b10 	vmov	d0, r0, r1
 8010176:	f005 fadb 	bl	8015730 <ceil>
 801017a:	ec51 0b10 	vmov	r0, r1, d0
 801017e:	f7f0 fc8f 	bl	8000aa0 <__aeabi_d2f>
 8010182:	ee07 0a90 	vmov	s15, r0
 8010186:	edc6 7a01 	vstr	s15, [r6, #4]
 801018a:	ed97 7a02 	vldr	s14, [r7, #8]
 801018e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010192:	eef0 6ae7 	vabs.f32	s13, s15
 8010196:	eef4 6acb 	vcmpe.f32	s13, s22
 801019a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019e:	d51a      	bpl.n	80101d6 <kalman_3gyro.constprop.0+0x370e>
 80101a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80101a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a8:	da3b      	bge.n	8010222 <kalman_3gyro.constprop.0+0x375a>
 80101aa:	eeb4 7aca 	vcmpe.f32	s14, s20
 80101ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b2:	f300 8103 	bgt.w	80103bc <kalman_3gyro.constprop.0+0x38f4>
 80101b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80101ba:	ee17 0a90 	vmov	r0, s15
 80101be:	f7f0 f967 	bl	8000490 <__aeabi_f2d>
 80101c2:	ec41 0b10 	vmov	d0, r0, r1
 80101c6:	f005 fab3 	bl	8015730 <ceil>
 80101ca:	ec51 0b10 	vmov	r0, r1, d0
 80101ce:	f7f0 fc67 	bl	8000aa0 <__aeabi_d2f>
 80101d2:	ee07 0a90 	vmov	s15, r0
 80101d6:	edc6 7a02 	vstr	s15, [r6, #8]
 80101da:	360c      	adds	r6, #12
 80101dc:	42b4      	cmp	r4, r6
 80101de:	d035      	beq.n	801024c <kalman_3gyro.constprop.0+0x3784>
 80101e0:	ed97 7a00 	vldr	s14, [r7]
 80101e4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80101e8:	eef0 6ae7 	vabs.f32	s13, s15
 80101ec:	eef4 6acb 	vcmpe.f32	s13, s22
 80101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f4:	d59e      	bpl.n	8010134 <kalman_3gyro.constprop.0+0x366c>
 80101f6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80101fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fe:	db83      	blt.n	8010108 <kalman_3gyro.constprop.0+0x3640>
 8010200:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010204:	ee17 0a90 	vmov	r0, s15
 8010208:	f7f0 f942 	bl	8000490 <__aeabi_f2d>
 801020c:	ec41 0b10 	vmov	d0, r0, r1
 8010210:	f005 fb12 	bl	8015838 <floor>
 8010214:	ec51 0b10 	vmov	r0, r1, d0
 8010218:	f7f0 fc42 	bl	8000aa0 <__aeabi_d2f>
 801021c:	ee07 0a90 	vmov	s15, r0
 8010220:	e788      	b.n	8010134 <kalman_3gyro.constprop.0+0x366c>
 8010222:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010226:	360c      	adds	r6, #12
 8010228:	ee17 0a90 	vmov	r0, s15
 801022c:	f7f0 f930 	bl	8000490 <__aeabi_f2d>
 8010230:	ec41 0b10 	vmov	d0, r0, r1
 8010234:	f005 fb00 	bl	8015838 <floor>
 8010238:	ec51 0b10 	vmov	r0, r1, d0
 801023c:	f7f0 fc30 	bl	8000aa0 <__aeabi_d2f>
 8010240:	ee07 0a90 	vmov	s15, r0
 8010244:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010248:	42b4      	cmp	r4, r6
 801024a:	d1c9      	bne.n	80101e0 <kalman_3gyro.constprop.0+0x3718>
 801024c:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8010250:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 80cf 	beq.w	80103f8 <kalman_3gyro.constprop.0+0x3930>
 801025a:	240c      	movs	r4, #12
 801025c:	eddf ba7b 	vldr	s23, [pc, #492]	; 801044c <kalman_3gyro.constprop.0+0x3984>
 8010260:	ed9f ba76 	vldr	s22, [pc, #472]	; 801043c <kalman_3gyro.constprop.0+0x3974>
 8010264:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8010450 <kalman_3gyro.constprop.0+0x3988>
 8010268:	ed9f aa7a 	vldr	s20, [pc, #488]	; 8010454 <kalman_3gyro.constprop.0+0x398c>
 801026c:	eddf aa76 	vldr	s21, [pc, #472]	; 8010448 <kalman_3gyro.constprop.0+0x3980>
 8010270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010274:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010278:	463e      	mov	r6, r7
 801027a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801027e:	e06b      	b.n	8010358 <kalman_3gyro.constprop.0+0x3890>
 8010280:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010288:	f300 81a2 	bgt.w	80105d0 <kalman_3gyro.constprop.0+0x3b08>
 801028c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010290:	ee17 0a90 	vmov	r0, s15
 8010294:	f7f0 f8fc 	bl	8000490 <__aeabi_f2d>
 8010298:	ec41 0b10 	vmov	d0, r0, r1
 801029c:	f005 fa48 	bl	8015730 <ceil>
 80102a0:	ec51 0b10 	vmov	r0, r1, d0
 80102a4:	f7f0 fbfc 	bl	8000aa0 <__aeabi_d2f>
 80102a8:	ee07 0a90 	vmov	s15, r0
 80102ac:	edc6 7a00 	vstr	s15, [r6]
 80102b0:	ed99 7a04 	vldr	s14, [r9, #16]
 80102b4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80102b8:	eef0 6ae7 	vabs.f32	s13, s15
 80102bc:	eef4 6acb 	vcmpe.f32	s13, s22
 80102c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c4:	d51b      	bpl.n	80102fe <kalman_3gyro.constprop.0+0x3836>
 80102c6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80102ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ce:	f280 8168 	bge.w	80105a2 <kalman_3gyro.constprop.0+0x3ada>
 80102d2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	f300 8176 	bgt.w	80105ca <kalman_3gyro.constprop.0+0x3b02>
 80102de:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102e2:	ee17 0a90 	vmov	r0, s15
 80102e6:	f7f0 f8d3 	bl	8000490 <__aeabi_f2d>
 80102ea:	ec41 0b10 	vmov	d0, r0, r1
 80102ee:	f005 fa1f 	bl	8015730 <ceil>
 80102f2:	ec51 0b10 	vmov	r0, r1, d0
 80102f6:	f7f0 fbd3 	bl	8000aa0 <__aeabi_d2f>
 80102fa:	ee07 0a90 	vmov	s15, r0
 80102fe:	edc6 7a01 	vstr	s15, [r6, #4]
 8010302:	ed99 7a05 	vldr	s14, [r9, #20]
 8010306:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801030a:	eef0 6ae7 	vabs.f32	s13, s15
 801030e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010316:	d51a      	bpl.n	801034e <kalman_3gyro.constprop.0+0x3886>
 8010318:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010320:	da55      	bge.n	80103ce <kalman_3gyro.constprop.0+0x3906>
 8010322:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032a:	f300 814b 	bgt.w	80105c4 <kalman_3gyro.constprop.0+0x3afc>
 801032e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010332:	ee17 0a90 	vmov	r0, s15
 8010336:	f7f0 f8ab 	bl	8000490 <__aeabi_f2d>
 801033a:	ec41 0b10 	vmov	d0, r0, r1
 801033e:	f005 f9f7 	bl	8015730 <ceil>
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	f7f0 fbab 	bl	8000aa0 <__aeabi_d2f>
 801034a:	ee07 0a90 	vmov	s15, r0
 801034e:	edc6 7a02 	vstr	s15, [r6, #8]
 8010352:	360c      	adds	r6, #12
 8010354:	42b4      	cmp	r4, r6
 8010356:	d04f      	beq.n	80103f8 <kalman_3gyro.constprop.0+0x3930>
 8010358:	ed99 7a03 	vldr	s14, [r9, #12]
 801035c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010360:	eef0 6ae7 	vabs.f32	s13, s15
 8010364:	eef4 6acb 	vcmpe.f32	s13, s22
 8010368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036c:	d59e      	bpl.n	80102ac <kalman_3gyro.constprop.0+0x37e4>
 801036e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010376:	db83      	blt.n	8010280 <kalman_3gyro.constprop.0+0x37b8>
 8010378:	ee77 7a89 	vadd.f32	s15, s15, s18
 801037c:	ee17 0a90 	vmov	r0, s15
 8010380:	f7f0 f886 	bl	8000490 <__aeabi_f2d>
 8010384:	ec41 0b10 	vmov	d0, r0, r1
 8010388:	f005 fa56 	bl	8015838 <floor>
 801038c:	ec51 0b10 	vmov	r0, r1, d0
 8010390:	f7f0 fb86 	bl	8000aa0 <__aeabi_d2f>
 8010394:	ee07 0a90 	vmov	s15, r0
 8010398:	e788      	b.n	80102ac <kalman_3gyro.constprop.0+0x37e4>
 801039a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801039e:	ee17 0a90 	vmov	r0, s15
 80103a2:	f7f0 f875 	bl	8000490 <__aeabi_f2d>
 80103a6:	ec41 0b10 	vmov	d0, r0, r1
 80103aa:	f005 fa45 	bl	8015838 <floor>
 80103ae:	ec51 0b10 	vmov	r0, r1, d0
 80103b2:	f7f0 fb75 	bl	8000aa0 <__aeabi_d2f>
 80103b6:	ee07 0a90 	vmov	s15, r0
 80103ba:	e6e4      	b.n	8010186 <kalman_3gyro.constprop.0+0x36be>
 80103bc:	eef0 7a6a 	vmov.f32	s15, s21
 80103c0:	e709      	b.n	80101d6 <kalman_3gyro.constprop.0+0x370e>
 80103c2:	eef0 7a6a 	vmov.f32	s15, s21
 80103c6:	e6de      	b.n	8010186 <kalman_3gyro.constprop.0+0x36be>
 80103c8:	eef0 7a6a 	vmov.f32	s15, s21
 80103cc:	e6b2      	b.n	8010134 <kalman_3gyro.constprop.0+0x366c>
 80103ce:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103d2:	360c      	adds	r6, #12
 80103d4:	ee17 0a90 	vmov	r0, s15
 80103d8:	f7f0 f85a 	bl	8000490 <__aeabi_f2d>
 80103dc:	ec41 0b10 	vmov	d0, r0, r1
 80103e0:	f005 fa2a 	bl	8015838 <floor>
 80103e4:	ec51 0b10 	vmov	r0, r1, d0
 80103e8:	f7f0 fb5a 	bl	8000aa0 <__aeabi_d2f>
 80103ec:	ee07 0a90 	vmov	s15, r0
 80103f0:	ed46 7a01 	vstr	s15, [r6, #-4]
 80103f4:	42b4      	cmp	r4, r6
 80103f6:	d1af      	bne.n	8010358 <kalman_3gyro.constprop.0+0x3890>
 80103f8:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f43c ac7e 	beq.w	800ccfe <kalman_3gyro.constprop.0+0x236>
 8010402:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 8010406:	240c      	movs	r4, #12
 8010408:	eddf ba13 	vldr	s23, [pc, #76]	; 8010458 <kalman_3gyro.constprop.0+0x3990>
 801040c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 801043c <kalman_3gyro.constprop.0+0x3974>
 8010410:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801045c <kalman_3gyro.constprop.0+0x3994>
 8010414:	ed9f aa12 	vldr	s20, [pc, #72]	; 8010460 <kalman_3gyro.constprop.0+0x3998>
 8010418:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010448 <kalman_3gyro.constprop.0+0x3980>
 801041c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010420:	960f      	str	r6, [sp, #60]	; 0x3c
 8010422:	fb14 6403 	smlabb	r4, r4, r3, r6
 8010426:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801042a:	e099      	b.n	8010560 <kalman_3gyro.constprop.0+0x3a98>
 801042c:	3a7001e0 	.word	0x3a7001e0
 8010430:	3a8c0118 	.word	0x3a8c0118
 8010434:	3a000100 	.word	0x3a000100
 8010438:	44888777 	.word	0x44888777
 801043c:	4b000000 	.word	0x4b000000
 8010440:	39f001e1 	.word	0x39f001e1
 8010444:	b9f001e1 	.word	0xb9f001e1
 8010448:	80000000 	.word	0x80000000
 801044c:	44fffe00 	.word	0x44fffe00
 8010450:	39800100 	.word	0x39800100
 8010454:	b9800100 	.word	0xb9800100
 8010458:	446a0ccd 	.word	0x446a0ccd
 801045c:	3a0c0118 	.word	0x3a0c0118
 8010460:	ba0c0118 	.word	0xba0c0118
 8010464:	bf666666 	.word	0xbf666666
 8010468:	3d072b02 	.word	0x3d072b02
 801046c:	3cb43958 	.word	0x3cb43958
 8010470:	3cf5c28f 	.word	0x3cf5c28f
 8010474:	3d75c28f 	.word	0x3d75c28f
 8010478:	3d23d70a 	.word	0x3d23d70a
 801047c:	3ca3d70a 	.word	0x3ca3d70a
 8010480:	3d4ccccd 	.word	0x3d4ccccd
 8010484:	3d8f5c29 	.word	0x3d8f5c29
 8010488:	eeb4 7aca 	vcmpe.f32	s14, s20
 801048c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010490:	f300 80c6 	bgt.w	8010620 <kalman_3gyro.constprop.0+0x3b58>
 8010494:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010498:	ee17 0a90 	vmov	r0, s15
 801049c:	f7ef fff8 	bl	8000490 <__aeabi_f2d>
 80104a0:	ec41 0b10 	vmov	d0, r0, r1
 80104a4:	f005 f944 	bl	8015730 <ceil>
 80104a8:	ec51 0b10 	vmov	r0, r1, d0
 80104ac:	f7f0 faf8 	bl	8000aa0 <__aeabi_d2f>
 80104b0:	ee07 0a90 	vmov	s15, r0
 80104b4:	edc6 7a00 	vstr	s15, [r6]
 80104b8:	ed99 7a07 	vldr	s14, [r9, #28]
 80104bc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80104c0:	eef0 6ae7 	vabs.f32	s13, s15
 80104c4:	eef4 6acb 	vcmpe.f32	s13, s22
 80104c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104cc:	d51b      	bpl.n	8010506 <kalman_3gyro.constprop.0+0x3a3e>
 80104ce:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80104d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d6:	f280 808f 	bge.w	80105f8 <kalman_3gyro.constprop.0+0x3b30>
 80104da:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e2:	f300 809a 	bgt.w	801061a <kalman_3gyro.constprop.0+0x3b52>
 80104e6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104ea:	ee17 0a90 	vmov	r0, s15
 80104ee:	f7ef ffcf 	bl	8000490 <__aeabi_f2d>
 80104f2:	ec41 0b10 	vmov	d0, r0, r1
 80104f6:	f005 f91b 	bl	8015730 <ceil>
 80104fa:	ec51 0b10 	vmov	r0, r1, d0
 80104fe:	f7f0 facf 	bl	8000aa0 <__aeabi_d2f>
 8010502:	ee07 0a90 	vmov	s15, r0
 8010506:	edc6 7a01 	vstr	s15, [r6, #4]
 801050a:	ed99 7a08 	vldr	s14, [r9, #32]
 801050e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010512:	eef0 6ae7 	vabs.f32	s13, s15
 8010516:	eef4 6acb 	vcmpe.f32	s13, s22
 801051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051e:	d519      	bpl.n	8010554 <kalman_3gyro.constprop.0+0x3a8c>
 8010520:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010528:	da55      	bge.n	80105d6 <kalman_3gyro.constprop.0+0x3b0e>
 801052a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010532:	dc78      	bgt.n	8010626 <kalman_3gyro.constprop.0+0x3b5e>
 8010534:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010538:	ee17 0a90 	vmov	r0, s15
 801053c:	f7ef ffa8 	bl	8000490 <__aeabi_f2d>
 8010540:	ec41 0b10 	vmov	d0, r0, r1
 8010544:	f005 f8f4 	bl	8015730 <ceil>
 8010548:	ec51 0b10 	vmov	r0, r1, d0
 801054c:	f7f0 faa8 	bl	8000aa0 <__aeabi_d2f>
 8010550:	ee07 0a90 	vmov	s15, r0
 8010554:	edc6 7a02 	vstr	s15, [r6, #8]
 8010558:	360c      	adds	r6, #12
 801055a:	42b4      	cmp	r4, r6
 801055c:	f43c abd2 	beq.w	800cd04 <kalman_3gyro.constprop.0+0x23c>
 8010560:	ed99 7a06 	vldr	s14, [r9, #24]
 8010564:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010568:	eef0 6ae7 	vabs.f32	s13, s15
 801056c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010574:	d59e      	bpl.n	80104b4 <kalman_3gyro.constprop.0+0x39ec>
 8010576:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057e:	db83      	blt.n	8010488 <kalman_3gyro.constprop.0+0x39c0>
 8010580:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010584:	ee17 0a90 	vmov	r0, s15
 8010588:	f7ef ff82 	bl	8000490 <__aeabi_f2d>
 801058c:	ec41 0b10 	vmov	d0, r0, r1
 8010590:	f005 f952 	bl	8015838 <floor>
 8010594:	ec51 0b10 	vmov	r0, r1, d0
 8010598:	f7f0 fa82 	bl	8000aa0 <__aeabi_d2f>
 801059c:	ee07 0a90 	vmov	s15, r0
 80105a0:	e788      	b.n	80104b4 <kalman_3gyro.constprop.0+0x39ec>
 80105a2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105a6:	ee17 0a90 	vmov	r0, s15
 80105aa:	f7ef ff71 	bl	8000490 <__aeabi_f2d>
 80105ae:	ec41 0b10 	vmov	d0, r0, r1
 80105b2:	f005 f941 	bl	8015838 <floor>
 80105b6:	ec51 0b10 	vmov	r0, r1, d0
 80105ba:	f7f0 fa71 	bl	8000aa0 <__aeabi_d2f>
 80105be:	ee07 0a90 	vmov	s15, r0
 80105c2:	e69c      	b.n	80102fe <kalman_3gyro.constprop.0+0x3836>
 80105c4:	eef0 7a6a 	vmov.f32	s15, s21
 80105c8:	e6c1      	b.n	801034e <kalman_3gyro.constprop.0+0x3886>
 80105ca:	eef0 7a6a 	vmov.f32	s15, s21
 80105ce:	e696      	b.n	80102fe <kalman_3gyro.constprop.0+0x3836>
 80105d0:	eef0 7a6a 	vmov.f32	s15, s21
 80105d4:	e66a      	b.n	80102ac <kalman_3gyro.constprop.0+0x37e4>
 80105d6:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105da:	ee17 0a90 	vmov	r0, s15
 80105de:	f7ef ff57 	bl	8000490 <__aeabi_f2d>
 80105e2:	ec41 0b10 	vmov	d0, r0, r1
 80105e6:	f005 f927 	bl	8015838 <floor>
 80105ea:	ec51 0b10 	vmov	r0, r1, d0
 80105ee:	f7f0 fa57 	bl	8000aa0 <__aeabi_d2f>
 80105f2:	ee07 0a90 	vmov	s15, r0
 80105f6:	e7ad      	b.n	8010554 <kalman_3gyro.constprop.0+0x3a8c>
 80105f8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105fc:	ee17 0a90 	vmov	r0, s15
 8010600:	f7ef ff46 	bl	8000490 <__aeabi_f2d>
 8010604:	ec41 0b10 	vmov	d0, r0, r1
 8010608:	f005 f916 	bl	8015838 <floor>
 801060c:	ec51 0b10 	vmov	r0, r1, d0
 8010610:	f7f0 fa46 	bl	8000aa0 <__aeabi_d2f>
 8010614:	ee07 0a90 	vmov	s15, r0
 8010618:	e775      	b.n	8010506 <kalman_3gyro.constprop.0+0x3a3e>
 801061a:	eef0 7a6a 	vmov.f32	s15, s21
 801061e:	e772      	b.n	8010506 <kalman_3gyro.constprop.0+0x3a3e>
 8010620:	eef0 7a6a 	vmov.f32	s15, s21
 8010624:	e746      	b.n	80104b4 <kalman_3gyro.constprop.0+0x39ec>
 8010626:	eef0 7a6a 	vmov.f32	s15, s21
 801062a:	e793      	b.n	8010554 <kalman_3gyro.constprop.0+0x3a8c>
 801062c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801062e:	7813      	ldrb	r3, [r2, #0]
 8010630:	ed92 7a03 	vldr	s14, [r2, #12]
 8010634:	edd2 6a01 	vldr	s13, [r2, #4]
 8010638:	edd2 7a02 	vldr	s15, [r2, #8]
 801063c:	2200      	movs	r2, #0
 801063e:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8010642:	2b00      	cmp	r3, #0
 8010644:	f040 813b 	bne.w	80108be <kalman_3gyro.constprop.0+0x3df6>
 8010648:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8010464 <kalman_3gyro.constprop.0+0x399c>
 801064c:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8010650:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8010654:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8010658:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 801065c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010660:	2100      	movs	r1, #0
 8010662:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010666:	f006 ffaf 	bl	80175c8 <memset>
 801066a:	eddb 7a02 	vldr	s15, [fp, #8]
 801066e:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8010468 <kalman_3gyro.constprop.0+0x39a0>
 8010672:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 801046c <kalman_3gyro.constprop.0+0x39a4>
 8010676:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010470 <kalman_3gyro.constprop.0+0x39a8>
 801067a:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 8010474 <kalman_3gyro.constprop.0+0x39ac>
 801067e:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010478 <kalman_3gyro.constprop.0+0x39b0>
 8010682:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 801047c <kalman_3gyro.constprop.0+0x39b4>
 8010686:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010480 <kalman_3gyro.constprop.0+0x39b8>
 801068a:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 8010484 <kalman_3gyro.constprop.0+0x39bc>
 801068e:	4bd9      	ldr	r3, [pc, #868]	; (80109f4 <kalman_3gyro.constprop.0+0x3f2c>)
 8010690:	49d9      	ldr	r1, [pc, #868]	; (80109f8 <kalman_3gyro.constprop.0+0x3f30>)
 8010692:	4dda      	ldr	r5, [pc, #872]	; (80109fc <kalman_3gyro.constprop.0+0x3f34>)
 8010694:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010a00 <kalman_3gyro.constprop.0+0x3f38>
 8010698:	48da      	ldr	r0, [pc, #872]	; (8010a04 <kalman_3gyro.constprop.0+0x3f3c>)
 801069a:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 801069e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80106a2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80106a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80106aa:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80106ae:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010a08 <kalman_3gyro.constprop.0+0x3f40>
 80106b2:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 80106b6:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80106ba:	ee67 3aa3 	vmul.f32	s7, s15, s7
 80106be:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 80106c2:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010a0c <kalman_3gyro.constprop.0+0x3f44>
 80106c6:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010a10 <kalman_3gyro.constprop.0+0x3f48>
 80106ca:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 80106ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80106d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80106d6:	ee27 5a85 	vmul.f32	s10, s15, s10
 80106da:	ee27 4a84 	vmul.f32	s8, s15, s8
 80106de:	ee27 6a86 	vmul.f32	s12, s15, s12
 80106e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80106e6:	2200      	movs	r2, #0
 80106e8:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 80106ec:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 80106f0:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 80106f4:	4cc7      	ldr	r4, [pc, #796]	; (8010a14 <kalman_3gyro.constprop.0+0x3f4c>)
 80106f6:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 80106fa:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 80106fe:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010a18 <kalman_3gyro.constprop.0+0x3f50>
 8010702:	49c6      	ldr	r1, [pc, #792]	; (8010a1c <kalman_3gyro.constprop.0+0x3f54>)
 8010704:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010708:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801070c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010a20 <kalman_3gyro.constprop.0+0x3f58>
 8010710:	4bc4      	ldr	r3, [pc, #784]	; (8010a24 <kalman_3gyro.constprop.0+0x3f5c>)
 8010712:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8010716:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 801071a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 801071e:	4ac2      	ldr	r2, [pc, #776]	; (8010a28 <kalman_3gyro.constprop.0+0x3f60>)
 8010720:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8010724:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010728:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 801072c:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010730:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010734:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010738:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801073c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010740:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010744:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010748:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801074c:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010750:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 8010754:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8010758:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 801075c:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8010760:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8010764:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010768:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 801076c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010770:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010774:	4cad      	ldr	r4, [pc, #692]	; (8010a2c <kalman_3gyro.constprop.0+0x3f64>)
 8010776:	48ae      	ldr	r0, [pc, #696]	; (8010a30 <kalman_3gyro.constprop.0+0x3f68>)
 8010778:	49ae      	ldr	r1, [pc, #696]	; (8010a34 <kalman_3gyro.constprop.0+0x3f6c>)
 801077a:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 801077e:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8010782:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8010786:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801078a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801078e:	ee27 6a83 	vmul.f32	s12, s15, s6
 8010792:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8010796:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 801079a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801079e:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80107a2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80107a6:	4aa4      	ldr	r2, [pc, #656]	; (8010a38 <kalman_3gyro.constprop.0+0x3f70>)
 80107a8:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80107ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107b0:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 80107b4:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 80107b8:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 80107bc:	4e9f      	ldr	r6, [pc, #636]	; (8010a3c <kalman_3gyro.constprop.0+0x3f74>)
 80107be:	4da0      	ldr	r5, [pc, #640]	; (8010a40 <kalman_3gyro.constprop.0+0x3f78>)
 80107c0:	49a0      	ldr	r1, [pc, #640]	; (8010a44 <kalman_3gyro.constprop.0+0x3f7c>)
 80107c2:	4aa1      	ldr	r2, [pc, #644]	; (8010a48 <kalman_3gyro.constprop.0+0x3f80>)
 80107c4:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 80107c8:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 80107cc:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80107d0:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 80107d4:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 80107d8:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 80107dc:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 80107e0:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 80107e4:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 80107e8:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 80107ec:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 80107f0:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 80107f4:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 80107f8:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 80107fc:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010800:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010804:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010808:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801080c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010810:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010814:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010818:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801081c:	b973      	cbnz	r3, 801083c <kalman_3gyro.constprop.0+0x3d74>
 801081e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010822:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010826:	6811      	ldr	r1, [r2, #0]
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 801082e:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010838:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 801083c:	2300      	movs	r3, #0
 801083e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010842:	f7fc ba4b 	b.w	800ccdc <kalman_3gyro.constprop.0+0x214>
 8010846:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801084a:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 801084e:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010852:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010856:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801085a:	f7fd bd5b 	b.w	800e314 <kalman_3gyro.constprop.0+0x184c>
 801085e:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010a4c <kalman_3gyro.constprop.0+0x3f84>
 8010862:	f7fc ba9e 	b.w	800cda2 <kalman_3gyro.constprop.0+0x2da>
 8010866:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 801086a:	f7fd bd7b 	b.w	800e364 <kalman_3gyro.constprop.0+0x189c>
 801086e:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010a50 <kalman_3gyro.constprop.0+0x3f88>
 8010872:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010a54 <kalman_3gyro.constprop.0+0x3f8c>
 8010876:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010a58 <kalman_3gyro.constprop.0+0x3f90>
 801087a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010a5c <kalman_3gyro.constprop.0+0x3f94>
 801087e:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010a60 <kalman_3gyro.constprop.0+0x3f98>
 8010882:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010886:	f7fd bf9d 	b.w	800e7c4 <kalman_3gyro.constprop.0+0x1cfc>
 801088a:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 801088e:	2a00      	cmp	r2, #0
 8010890:	f340 8181 	ble.w	8010b96 <kalman_3gyro.constprop.0+0x40ce>
 8010894:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010898:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801089c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	f340 8177 	ble.w	8010b96 <kalman_3gyro.constprop.0+0x40ce>
 80108a8:	3a01      	subs	r2, #1
 80108aa:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80108ae:	f7fe b880 	b.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 80108b2:	eeb0 aa69 	vmov.f32	s20, s19
 80108b6:	eeb0 ba69 	vmov.f32	s22, s19
 80108ba:	f7ff b9de 	b.w	800fc7a <kalman_3gyro.constprop.0+0x31b2>
 80108be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80108c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80108c6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80108ca:	eef1 6ae7 	vsqrt.f32	s13, s15
 80108ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108d2:	e6bb      	b.n	801064c <kalman_3gyro.constprop.0+0x3b84>
 80108d4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80108d8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80108dc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80108e0:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80108e4:	f7fe b802 	b.w	800e8ec <kalman_3gyro.constprop.0+0x1e24>
 80108e8:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 80108ec:	f7fd bae6 	b.w	800debc <kalman_3gyro.constprop.0+0x13f4>
 80108f0:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80108f4:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 80108f8:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80108fc:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010900:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010904:	f7fd bd06 	b.w	800e314 <kalman_3gyro.constprop.0+0x184c>
 8010908:	ee7e 7a67 	vsub.f32	s15, s28, s15
 801090c:	ee17 0a90 	vmov	r0, s15
 8010910:	f7ef fdbe 	bl	8000490 <__aeabi_f2d>
 8010914:	ec41 0b10 	vmov	d0, r0, r1
 8010918:	f004 ff0a 	bl	8015730 <ceil>
 801091c:	ec51 0b10 	vmov	r0, r1, d0
 8010920:	f7f0 f8be 	bl	8000aa0 <__aeabi_d2f>
 8010924:	ee0e 0a10 	vmov	s28, r0
 8010928:	f7fc bc70 	b.w	800d20c <kalman_3gyro.constprop.0+0x744>
 801092c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010930:	ee17 0a90 	vmov	r0, s15
 8010934:	f7ef fdac 	bl	8000490 <__aeabi_f2d>
 8010938:	ec41 0b10 	vmov	d0, r0, r1
 801093c:	f004 fef8 	bl	8015730 <ceil>
 8010940:	ec51 0b10 	vmov	r0, r1, d0
 8010944:	f7f0 f8ac 	bl	8000aa0 <__aeabi_d2f>
 8010948:	ee0d 0a90 	vmov	s27, r0
 801094c:	f7fc bc81 	b.w	800d252 <kalman_3gyro.constprop.0+0x78a>
 8010950:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010954:	ee17 0a90 	vmov	r0, s15
 8010958:	f7ef fd9a 	bl	8000490 <__aeabi_f2d>
 801095c:	ec41 0b10 	vmov	d0, r0, r1
 8010960:	f004 fee6 	bl	8015730 <ceil>
 8010964:	ec51 0b10 	vmov	r0, r1, d0
 8010968:	f7f0 f89a 	bl	8000aa0 <__aeabi_d2f>
 801096c:	ee0d 0a90 	vmov	s27, r0
 8010970:	f7fc bcd5 	b.w	800d31e <kalman_3gyro.constprop.0+0x856>
 8010974:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010978:	ee17 0a90 	vmov	r0, s15
 801097c:	f7ef fd88 	bl	8000490 <__aeabi_f2d>
 8010980:	ec41 0b10 	vmov	d0, r0, r1
 8010984:	f004 fed4 	bl	8015730 <ceil>
 8010988:	ec51 0b10 	vmov	r0, r1, d0
 801098c:	f7f0 f888 	bl	8000aa0 <__aeabi_d2f>
 8010990:	ee0b 0a10 	vmov	s22, r0
 8010994:	f7fc bce6 	b.w	800d364 <kalman_3gyro.constprop.0+0x89c>
 8010998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099c:	f6fd addf 	blt.w	800e55e <kalman_3gyro.constprop.0+0x1a96>
 80109a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010a58 <kalman_3gyro.constprop.0+0x3f90>
 80109a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ac:	f140 8283 	bpl.w	8010eb6 <kalman_3gyro.constprop.0+0x43ee>
 80109b0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010a64 <kalman_3gyro.constprop.0+0x3f9c>
 80109b4:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010a68 <kalman_3gyro.constprop.0+0x3fa0>
 80109b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010a6c <kalman_3gyro.constprop.0+0x3fa4>
 80109bc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80109c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109c4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80109c8:	eea6 7a86 	vfma.f32	s14, s13, s12
 80109cc:	f7fd bdd1 	b.w	800e572 <kalman_3gyro.constprop.0+0x1aaa>
 80109d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80109d4:	ee17 0a90 	vmov	r0, s15
 80109d8:	f7ef fd5a 	bl	8000490 <__aeabi_f2d>
 80109dc:	ec41 0b10 	vmov	d0, r0, r1
 80109e0:	f004 fea6 	bl	8015730 <ceil>
 80109e4:	ec51 0b10 	vmov	r0, r1, d0
 80109e8:	f7f0 f85a 	bl	8000aa0 <__aeabi_d2f>
 80109ec:	ee08 0a10 	vmov	s16, r0
 80109f0:	f7fc bbe9 	b.w	800d1c6 <kalman_3gyro.constprop.0+0x6fe>
 80109f4:	3eb33333 	.word	0x3eb33333
 80109f8:	3ee66666 	.word	0x3ee66666
 80109fc:	3f866666 	.word	0x3f866666
 8010a00:	3ecccccd 	.word	0x3ecccccd
 8010a04:	3f933333 	.word	0x3f933333
 8010a08:	3dcccccd 	.word	0x3dcccccd
 8010a0c:	3e4ccccd 	.word	0x3e4ccccd
 8010a10:	3e99999a 	.word	0x3e99999a
 8010a14:	3f8ccccd 	.word	0x3f8ccccd
 8010a18:	3f4ccccd 	.word	0x3f4ccccd
 8010a1c:	3ebd70a4 	.word	0x3ebd70a4
 8010a20:	3f666666 	.word	0x3f666666
 8010a24:	40a00000 	.word	0x40a00000
 8010a28:	3f99999a 	.word	0x3f99999a
 8010a2c:	3f19999a 	.word	0x3f19999a
 8010a30:	3fb9999a 	.word	0x3fb9999a
 8010a34:	3fe66666 	.word	0x3fe66666
 8010a38:	3f333333 	.word	0x3f333333
 8010a3c:	3fa66666 	.word	0x3fa66666
 8010a40:	3fcccccd 	.word	0x3fcccccd
 8010a44:	40200000 	.word	0x40200000
 8010a48:	40400000 	.word	0x40400000
 8010a4c:	bf666666 	.word	0xbf666666
 8010a50:	391d4951 	.word	0x391d4951
 8010a54:	383cbe62 	.word	0x383cbe62
 8010a58:	3c75c28f 	.word	0x3c75c28f
 8010a5c:	469c3e00 	.word	0x469c3e00
 8010a60:	43168000 	.word	0x43168000
 8010a64:	3c23d70a 	.word	0x3c23d70a
 8010a68:	3f19999a 	.word	0x3f19999a
 8010a6c:	43480000 	.word	0x43480000
 8010a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a74:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010a78:	eef0 7aca 	vabs.f32	s15, s20
 8010a7c:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010a80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a88:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010a8c:	bfb8      	it	lt
 8010a8e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010a9a:	f77d af5b 	ble.w	800e954 <kalman_3gyro.constprop.0+0x1e8c>
 8010a9e:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010aa2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010aa6:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aae:	f77d af51 	ble.w	800e954 <kalman_3gyro.constprop.0+0x1e8c>
 8010ab2:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010ab6:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010aba:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010abe:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010ac2:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010ac6:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010aca:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010ace:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010ad2:	f7fd bf3f 	b.w	800e954 <kalman_3gyro.constprop.0+0x1e8c>
 8010ad6:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010ada:	2a01      	cmp	r2, #1
 8010adc:	d002      	beq.n	8010ae4 <kalman_3gyro.constprop.0+0x401c>
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	f47d af1e 	bne.w	800e920 <kalman_3gyro.constprop.0+0x1e58>
 8010ae4:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010ae8:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af0:	bfa8      	it	ge
 8010af2:	eeb0 3a67 	vmovge.f32	s6, s15
 8010af6:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010afa:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010afe:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010b02:	f7fd bf0d 	b.w	800e920 <kalman_3gyro.constprop.0+0x1e58>
 8010b06:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010b0a:	ee17 0a90 	vmov	r0, s15
 8010b0e:	f7ef fcbf 	bl	8000490 <__aeabi_f2d>
 8010b12:	ec41 0b10 	vmov	d0, r0, r1
 8010b16:	f004 fe0b 	bl	8015730 <ceil>
 8010b1a:	ec51 0b10 	vmov	r0, r1, d0
 8010b1e:	f7ef ffbf 	bl	8000aa0 <__aeabi_d2f>
 8010b22:	ee08 0a10 	vmov	s16, r0
 8010b26:	f7fc bc40 	b.w	800d3aa <kalman_3gyro.constprop.0+0x8e2>
 8010b2a:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010b2e:	ee17 0a90 	vmov	r0, s15
 8010b32:	f7ef fcad 	bl	8000490 <__aeabi_f2d>
 8010b36:	ec41 0b10 	vmov	d0, r0, r1
 8010b3a:	f004 fdf9 	bl	8015730 <ceil>
 8010b3e:	ec51 0b10 	vmov	r0, r1, d0
 8010b42:	f7ef ffad 	bl	8000aa0 <__aeabi_d2f>
 8010b46:	ee0b 0a10 	vmov	s22, r0
 8010b4a:	f7fc bcb7 	b.w	800d4bc <kalman_3gyro.constprop.0+0x9f4>
 8010b4e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010b52:	ee17 0a90 	vmov	r0, s15
 8010b56:	f7ef fc9b 	bl	8000490 <__aeabi_f2d>
 8010b5a:	ec41 0b10 	vmov	d0, r0, r1
 8010b5e:	f004 fde7 	bl	8015730 <ceil>
 8010b62:	ec51 0b10 	vmov	r0, r1, d0
 8010b66:	f7ef ff9b 	bl	8000aa0 <__aeabi_d2f>
 8010b6a:	ee08 0a10 	vmov	s16, r0
 8010b6e:	f7fc bcc8 	b.w	800d502 <kalman_3gyro.constprop.0+0xa3a>
 8010b72:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010b76:	ee17 0a90 	vmov	r0, s15
 8010b7a:	f7ef fc89 	bl	8000490 <__aeabi_f2d>
 8010b7e:	ec41 0b10 	vmov	d0, r0, r1
 8010b82:	f004 fdd5 	bl	8015730 <ceil>
 8010b86:	ec51 0b10 	vmov	r0, r1, d0
 8010b8a:	f7ef ff89 	bl	8000aa0 <__aeabi_d2f>
 8010b8e:	ee0d 0a90 	vmov	s27, r0
 8010b92:	f7fc bc70 	b.w	800d476 <kalman_3gyro.constprop.0+0x9ae>
 8010b96:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010b9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ba2:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010baa:	f77d af02 	ble.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 8010bae:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bb6:	eef4 7aec 	vcmpe.f32	s15, s25
 8010bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bbe:	f77d aef8 	ble.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 8010bc2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010bca:	eef4 7acd 	vcmpe.f32	s15, s26
 8010bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd2:	f140 8711 	bpl.w	80119f8 <kalman_3gyro.constprop.0+0x4f30>
 8010bd6:	3303      	adds	r3, #3
 8010bd8:	f7ff ba35 	b.w	8010046 <kalman_3gyro.constprop.0+0x357e>
 8010bdc:	460b      	mov	r3, r1
 8010bde:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010be2:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010be6:	9181      	str	r1, [sp, #516]	; 0x204
 8010be8:	9282      	str	r2, [sp, #520]	; 0x208
 8010bea:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010bee:	9183      	str	r1, [sp, #524]	; 0x20c
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010bf6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010bfa:	f7fe baa8 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 8010bfe:	a936      	add	r1, sp, #216	; 0xd8
 8010c00:	a854      	add	r0, sp, #336	; 0x150
 8010c02:	f7fa ff85 	bl	800bb10 <b_dcm2q>
 8010c06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010c10:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010c14:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010c18:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010c1c:	f006 fcd4 	bl	80175c8 <memset>
 8010c20:	4bd8      	ldr	r3, [pc, #864]	; (8010f84 <kalman_3gyro.constprop.0+0x44bc>)
 8010c22:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010c26:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010c2a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010c2e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010c32:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010c36:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010c3a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010c3e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010c42:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010c46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010c48:	781a      	ldrb	r2, [r3, #0]
 8010c4a:	ee07 2a90 	vmov	s15, r2
 8010c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5a:	f040 84dc 	bne.w	8011616 <kalman_3gyro.constprop.0+0x4b4e>
 8010c5e:	eeb0 7a4c 	vmov.f32	s14, s24
 8010c62:	2300      	movs	r3, #0
 8010c64:	f88b 3000 	strb.w	r3, [fp]
 8010c68:	eddb ea02 	vldr	s29, [fp, #8]
 8010c6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010c70:	2301      	movs	r3, #1
 8010c72:	f7fd bb8d 	b.w	800e390 <kalman_3gyro.constprop.0+0x18c8>
 8010c76:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010c7a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	f340 85da 	ble.w	801183a <kalman_3gyro.constprop.0+0x4d72>
 8010c86:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010c8a:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010c8e:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010c92:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010c96:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010c9a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010c9e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010ca2:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010ca6:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010caa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb2:	f63d a94b 	bhi.w	800df4c <kalman_3gyro.constprop.0+0x1484>
 8010cb6:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010cba:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc2:	f340 84bc 	ble.w	801163e <kalman_3gyro.constprop.0+0x4b76>
 8010cc6:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010cca:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010cce:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010cd2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010cd6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010cda:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010cde:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010ce2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ce6:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010cea:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf2:	f63d a94b 	bhi.w	800df8c <kalman_3gyro.constprop.0+0x14c4>
 8010cf6:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010cfa:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d02:	f340 84a8 	ble.w	8011656 <kalman_3gyro.constprop.0+0x4b8e>
 8010d06:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010d0a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010d0e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d12:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d16:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d1a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d1e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d22:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d26:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010d2a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d32:	f63d a94b 	bhi.w	800dfcc <kalman_3gyro.constprop.0+0x1504>
 8010d36:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010d3a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d42:	f340 8490 	ble.w	8011666 <kalman_3gyro.constprop.0+0x4b9e>
 8010d46:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010d4a:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010d4e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d52:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d56:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010d5a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010d5e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010d62:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010d66:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010d6a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d72:	f6fd a94b 	blt.w	800e00c <kalman_3gyro.constprop.0+0x1544>
 8010d76:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010d7a:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d82:	f57d a94b 	bpl.w	800e01c <kalman_3gyro.constprop.0+0x1554>
 8010d86:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010d8a:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010d8e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010d92:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010d96:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010d9a:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010d9e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010da2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010da6:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010daa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db2:	f6fd a94b 	blt.w	800e04c <kalman_3gyro.constprop.0+0x1584>
 8010db6:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbe:	f57d a945 	bpl.w	800e04c <kalman_3gyro.constprop.0+0x1584>
 8010dc2:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010dc6:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010dca:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010dce:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010dd2:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010dd6:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010dda:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010dde:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010de2:	f7fd b933 	b.w	800e04c <kalman_3gyro.constprop.0+0x1584>
 8010de6:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010f88 <kalman_3gyro.constprop.0+0x44c0>
 8010dea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	f57d ac56 	bpl.w	800e6a2 <kalman_3gyro.constprop.0+0x1bda>
 8010df6:	eddf 3a65 	vldr	s7, [pc, #404]	; 8010f8c <kalman_3gyro.constprop.0+0x44c4>
 8010dfa:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010f90 <kalman_3gyro.constprop.0+0x44c8>
 8010dfe:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010f94 <kalman_3gyro.constprop.0+0x44cc>
 8010e02:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010f98 <kalman_3gyro.constprop.0+0x44d0>
 8010e06:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010e0a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e0e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010e12:	eeb0 ca66 	vmov.f32	s24, s13
 8010e16:	eddf 6a61 	vldr	s13, [pc, #388]	; 8010f9c <kalman_3gyro.constprop.0+0x44d4>
 8010e1a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	f6fd ac56 	blt.w	800e6d2 <kalman_3gyro.constprop.0+0x1c0a>
 8010e26:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010fa0 <kalman_3gyro.constprop.0+0x44d8>
 8010e2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	f57d ac56 	bpl.w	800e6e2 <kalman_3gyro.constprop.0+0x1c1a>
 8010e36:	eddf 3a59 	vldr	s7, [pc, #356]	; 8010f9c <kalman_3gyro.constprop.0+0x44d4>
 8010e3a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010e3e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010e42:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010e46:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8010e4a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010e4e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010e52:	eeb0 ca66 	vmov.f32	s24, s13
 8010e56:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010fa4 <kalman_3gyro.constprop.0+0x44dc>
 8010e5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e62:	f6fd ac56 	blt.w	800e712 <kalman_3gyro.constprop.0+0x1c4a>
 8010e66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010e6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	f57d ac56 	bpl.w	800e722 <kalman_3gyro.constprop.0+0x1c5a>
 8010e76:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010fa4 <kalman_3gyro.constprop.0+0x44dc>
 8010e7a:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010fa8 <kalman_3gyro.constprop.0+0x44e0>
 8010e7e:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8010fac <kalman_3gyro.constprop.0+0x44e4>
 8010e82:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010e86:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8010e8a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e8e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010e92:	eeb0 ca66 	vmov.f32	s24, s13
 8010e96:	e4f4      	b.n	8010882 <kalman_3gyro.constprop.0+0x3dba>
 8010e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9c:	f57d abe1 	bpl.w	800e662 <kalman_3gyro.constprop.0+0x1b9a>
 8010ea0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8010f8c <kalman_3gyro.constprop.0+0x44c4>
 8010ea4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eac:	da9b      	bge.n	8010de6 <kalman_3gyro.constprop.0+0x431e>
 8010eae:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010eb2:	f7fd bbee 	b.w	800e692 <kalman_3gyro.constprop.0+0x1bca>
 8010eb6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010f88 <kalman_3gyro.constprop.0+0x44c0>
 8010eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec2:	f57d ab5e 	bpl.w	800e582 <kalman_3gyro.constprop.0+0x1aba>
 8010ec6:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010f8c <kalman_3gyro.constprop.0+0x44c4>
 8010eca:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010fb0 <kalman_3gyro.constprop.0+0x44e8>
 8010ece:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010f94 <kalman_3gyro.constprop.0+0x44cc>
 8010ed2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010fb4 <kalman_3gyro.constprop.0+0x44ec>
 8010ed6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010eda:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010ede:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010ee2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8010f9c <kalman_3gyro.constprop.0+0x44d4>
 8010ee6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eee:	f6fd ab5e 	blt.w	800e5ae <kalman_3gyro.constprop.0+0x1ae6>
 8010ef2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010fa0 <kalman_3gyro.constprop.0+0x44d8>
 8010ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	f57d ab5e 	bpl.w	800e5be <kalman_3gyro.constprop.0+0x1af6>
 8010f02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010f9c <kalman_3gyro.constprop.0+0x44d4>
 8010f06:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010f0a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8010f0e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010f12:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010f16:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010f1a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f1e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010fa4 <kalman_3gyro.constprop.0+0x44dc>
 8010f22:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2a:	f6fd ab5e 	blt.w	800e5ea <kalman_3gyro.constprop.0+0x1b22>
 8010f2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3a:	f57d ab5d 	bpl.w	800e5f8 <kalman_3gyro.constprop.0+0x1b30>
 8010f3e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010fa4 <kalman_3gyro.constprop.0+0x44dc>
 8010f42:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010fb8 <kalman_3gyro.constprop.0+0x44f0>
 8010f46:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8010fac <kalman_3gyro.constprop.0+0x44e4>
 8010f4a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010fbc <kalman_3gyro.constprop.0+0x44f4>
 8010f4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010f52:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010f56:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f5a:	f7fd bb5b 	b.w	800e614 <kalman_3gyro.constprop.0+0x1b4c>
 8010f5e:	9b01      	ldr	r3, [sp, #4]
 8010f60:	e63d      	b.n	8010bde <kalman_3gyro.constprop.0+0x4116>
 8010f62:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8010f66:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	da2b      	bge.n	8010fc8 <kalman_3gyro.constprop.0+0x4500>
 8010f70:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010fc0 <kalman_3gyro.constprop.0+0x44f8>
 8010f74:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8010f78:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f80:	db3a      	blt.n	8010ff8 <kalman_3gyro.constprop.0+0x4530>
 8010f82:	e386      	b.n	8011692 <kalman_3gyro.constprop.0+0x4bca>
 8010f84:	40a00000 	.word	0x40a00000
 8010f88:	3cf5c28f 	.word	0x3cf5c28f
 8010f8c:	3c75c28f 	.word	0x3c75c28f
 8010f90:	3dccccd0 	.word	0x3dccccd0
 8010f94:	42855556 	.word	0x42855556
 8010f98:	3f866666 	.word	0x3f866666
 8010f9c:	3d4ccccd 	.word	0x3d4ccccd
 8010fa0:	3dcccccd 	.word	0x3dcccccd
 8010fa4:	3e4ccccd 	.word	0x3e4ccccd
 8010fa8:	42200000 	.word	0x42200000
 8010fac:	40555555 	.word	0x40555555
 8010fb0:	3ecccccc 	.word	0x3ecccccc
 8010fb4:	3fcccccd 	.word	0x3fcccccd
 8010fb8:	43f00000 	.word	0x43f00000
 8010fbc:	42ee0000 	.word	0x42ee0000
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	eeb0 7a64 	vmov.f32	s14, s9
 8010fc8:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8010fcc:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd4:	f140 8359 	bpl.w	801168a <kalman_3gyro.constprop.0+0x4bc2>
 8010fd8:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8010fdc:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010fe0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fe4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fe8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010fec:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ff0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010ff4:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010ff8:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8010ffc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011004:	f2c0 835d 	blt.w	80116c2 <kalman_3gyro.constprop.0+0x4bfa>
 8011008:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801100c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011014:	f140 8402 	bpl.w	801181c <kalman_3gyro.constprop.0+0x4d54>
 8011018:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801101c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8011020:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011024:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011028:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801102c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011030:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011034:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011038:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 801103c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011044:	f200 835d 	bhi.w	8011702 <kalman_3gyro.constprop.0+0x4c3a>
 8011048:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 801104c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011054:	f340 83e8 	ble.w	8011828 <kalman_3gyro.constprop.0+0x4d60>
 8011058:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 801105c:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8011060:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011064:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011068:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801106c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011070:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011074:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011078:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 801107c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011084:	f200 835d 	bhi.w	8011742 <kalman_3gyro.constprop.0+0x4c7a>
 8011088:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 801108c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011094:	f340 83b4 	ble.w	8011800 <kalman_3gyro.constprop.0+0x4d38>
 8011098:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 801109c:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 80110a0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80110a4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80110a8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80110ac:	ee64 4a03 	vmul.f32	s9, s8, s6
 80110b0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80110b4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80110b8:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 80110bc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80110c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c4:	f2c0 835c 	blt.w	8011780 <kalman_3gyro.constprop.0+0x4cb8>
 80110c8:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80110cc:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80110d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d4:	f140 835c 	bpl.w	8011790 <kalman_3gyro.constprop.0+0x4cc8>
 80110d8:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 80110dc:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80110e0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80110e4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80110e8:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80110ec:	ee24 7a03 	vmul.f32	s14, s8, s6
 80110f0:	ee87 ba24 	vdiv.f32	s22, s14, s9
 80110f4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80110f8:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80110fc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011104:	f6fc aeda 	blt.w	800debc <kalman_3gyro.constprop.0+0x13f4>
 8011108:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011110:	f57c aed4 	bpl.w	800debc <kalman_3gyro.constprop.0+0x13f4>
 8011114:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8011118:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801111c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8011120:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8011124:	ee35 7a47 	vsub.f32	s14, s10, s14
 8011128:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801112c:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011130:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011134:	f7fc bec2 	b.w	800debc <kalman_3gyro.constprop.0+0x13f4>
 8011138:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801113c:	eef4 7acd 	vcmpe.f32	s15, s26
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	dd2c      	ble.n	80111a0 <kalman_3gyro.constprop.0+0x46d8>
 8011146:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 801114a:	eef4 7aeb 	vcmpe.f32	s15, s23
 801114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011152:	dd25      	ble.n	80111a0 <kalman_3gyro.constprop.0+0x46d8>
 8011154:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011158:	eef4 7aec 	vcmpe.f32	s15, s25
 801115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011160:	dd1e      	ble.n	80111a0 <kalman_3gyro.constprop.0+0x46d8>
 8011162:	eddd 5a03 	vldr	s11, [sp, #12]
 8011166:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801116a:	eef4 5ae7 	vcmpe.f32	s11, s15
 801116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011172:	d515      	bpl.n	80111a0 <kalman_3gyro.constprop.0+0x46d8>
 8011174:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011178:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801117c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011188:	d50a      	bpl.n	80111a0 <kalman_3gyro.constprop.0+0x46d8>
 801118a:	2300      	movs	r3, #0
 801118c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011190:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011194:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011198:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801119c:	f7fd bf4c 	b.w	800f038 <kalman_3gyro.constprop.0+0x2570>
 80111a0:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 80111a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ac:	dd0b      	ble.n	80111c6 <kalman_3gyro.constprop.0+0x46fe>
 80111ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80111b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ba:	f100 843f 	bmi.w	8011a3c <kalman_3gyro.constprop.0+0x4f74>
 80111be:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80111c2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80111c6:	2300      	movs	r3, #0
 80111c8:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80111cc:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80111d0:	f7fd bf32 	b.w	800f038 <kalman_3gyro.constprop.0+0x2570>
 80111d4:	2301      	movs	r3, #1
 80111d6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80111da:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 80111de:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 80111e2:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 80111e6:	edd2 5a00 	vldr	s11, [r2]
 80111ea:	ed93 7a00 	vldr	s14, [r3]
 80111ee:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 80111f2:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 80111f6:	ed92 5a00 	vldr	s10, [r2]
 80111fa:	edd3 6a00 	vldr	s13, [r3]
 80111fe:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8011202:	ee67 4a07 	vmul.f32	s9, s14, s14
 8011206:	eea5 4a05 	vfma.f32	s8, s10, s10
 801120a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801120e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8011212:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8011216:	aa5d      	add	r2, sp, #372	; 0x174
 8011218:	a833      	add	r0, sp, #204	; 0xcc
 801121a:	ed91 6a00 	vldr	s12, [r1]
 801121e:	edd3 7a00 	vldr	s15, [r3]
 8011222:	eea6 4a06 	vfma.f32	s8, s12, s12
 8011226:	a92d      	add	r1, sp, #180	; 0xb4
 8011228:	ad5d      	add	r5, sp, #372	; 0x174
 801122a:	eee7 4aa7 	vfma.f32	s9, s15, s15
 801122e:	ac66      	add	r4, sp, #408	; 0x198
 8011230:	eef1 2ac4 	vsqrt.f32	s5, s8
 8011234:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011238:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801123c:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011240:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8011244:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011248:	ee27 7a24 	vmul.f32	s14, s14, s9
 801124c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011250:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011254:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011258:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801125c:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8011260:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8011264:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8011268:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 801126c:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011270:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8011274:	f7fa fbac 	bl	800b9d0 <getRotationMatrix>
 8011278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801127a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801127c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801127e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011280:	682e      	ldr	r6, [r5, #0]
 8011282:	6026      	str	r6, [r4, #0]
 8011284:	ad66      	add	r5, sp, #408	; 0x198
 8011286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011288:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 801128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011292:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8011296:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 801129a:	6026      	str	r6, [r4, #0]
 801129c:	eef0 7ae7 	vabs.f32	s15, s15
 80112a0:	eeb0 7ac7 	vabs.f32	s14, s14
 80112a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ac:	f100 81df 	bmi.w	801166e <kalman_3gyro.constprop.0+0x4ba6>
 80112b0:	2307      	movs	r3, #7
 80112b2:	f04f 0c04 	mov.w	ip, #4
 80112b6:	9305      	str	r3, [sp, #20]
 80112b8:	2300      	movs	r3, #0
 80112ba:	4662      	mov	r2, ip
 80112bc:	2003      	movs	r0, #3
 80112be:	2706      	movs	r7, #6
 80112c0:	f04f 0e01 	mov.w	lr, #1
 80112c4:	9304      	str	r3, [sp, #16]
 80112c6:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 80112ca:	eeb0 7ac7 	vabs.f32	s14, s14
 80112ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d6:	f340 8296 	ble.w	8011806 <kalman_3gyro.constprop.0+0x4d3e>
 80112da:	2306      	movs	r3, #6
 80112dc:	930a      	str	r3, [sp, #40]	; 0x28
 80112de:	2307      	movs	r3, #7
 80112e0:	9305      	str	r3, [sp, #20]
 80112e2:	2300      	movs	r3, #0
 80112e4:	2708      	movs	r7, #8
 80112e6:	f04f 0c04 	mov.w	ip, #4
 80112ea:	9302      	str	r3, [sp, #8]
 80112ec:	2302      	movs	r3, #2
 80112ee:	9707      	str	r7, [sp, #28]
 80112f0:	4662      	mov	r2, ip
 80112f2:	2005      	movs	r0, #5
 80112f4:	f04f 0e01 	mov.w	lr, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	ab66      	add	r3, sp, #408	; 0x198
 80112fc:	441a      	add	r2, r3
 80112fe:	9b07      	ldr	r3, [sp, #28]
 8011300:	edd2 6a00 	vldr	s13, [r2]
 8011304:	9a02      	ldr	r2, [sp, #8]
 8011306:	a966      	add	r1, sp, #408	; 0x198
 8011308:	440b      	add	r3, r1
 801130a:	ed93 7a00 	vldr	s14, [r3]
 801130e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011312:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011316:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801131a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801131e:	9a04      	ldr	r2, [sp, #16]
 8011320:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8011324:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801132c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011330:	0080      	lsls	r0, r0, #2
 8011332:	900e      	str	r0, [sp, #56]	; 0x38
 8011334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011336:	940d      	str	r4, [sp, #52]	; 0x34
 8011338:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801133c:	edc3 7a00 	vstr	s15, [r3]
 8011340:	ed96 7a00 	vldr	s14, [r6]
 8011344:	edd1 7a00 	vldr	s15, [r1]
 8011348:	930c      	str	r3, [sp, #48]	; 0x30
 801134a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801134e:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8011352:	0080      	lsls	r0, r0, #2
 8011354:	9006      	str	r0, [sp, #24]
 8011356:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 801135a:	00bf      	lsls	r7, r7, #2
 801135c:	9711      	str	r7, [sp, #68]	; 0x44
 801135e:	9f05      	ldr	r7, [sp, #20]
 8011360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011362:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8011366:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801136a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	9307      	str	r3, [sp, #28]
 8011372:	9b02      	ldr	r3, [sp, #8]
 8011374:	edc6 6a00 	vstr	s13, [r6]
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	930b      	str	r3, [sp, #44]	; 0x2c
 801137c:	9b04      	ldr	r3, [sp, #16]
 801137e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	9312      	str	r3, [sp, #72]	; 0x48
 8011384:	9b05      	ldr	r3, [sp, #20]
 8011386:	ed96 7a00 	vldr	s14, [r6]
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	9309      	str	r3, [sp, #36]	; 0x24
 801138e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011394:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011398:	ed93 6a00 	vldr	s12, [r3]
 801139c:	edd2 7a00 	vldr	s15, [r2]
 80113a0:	eee6 7a47 	vfms.f32	s15, s12, s14
 80113a4:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80113a8:	950a      	str	r5, [sp, #40]	; 0x28
 80113aa:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80113ae:	edc2 7a00 	vstr	s15, [r2]
 80113b2:	ed96 7a00 	vldr	s14, [r6]
 80113b6:	edd4 7a00 	vldr	s15, [r4]
 80113ba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80113be:	edc4 7a00 	vstr	s15, [r4]
 80113c2:	edd0 5a00 	vldr	s11, [r0]
 80113c6:	ed97 7a00 	vldr	s14, [r7]
 80113ca:	eea6 7a65 	vfms.f32	s14, s12, s11
 80113ce:	eef0 7ae7 	vabs.f32	s15, s15
 80113d2:	ed87 7a00 	vstr	s14, [r7]
 80113d6:	ed90 6a00 	vldr	s12, [r0]
 80113da:	ed91 7a00 	vldr	s14, [r1]
 80113de:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80113e2:	ed81 7a00 	vstr	s14, [r1]
 80113e6:	ed92 7a00 	vldr	s14, [r2]
 80113ea:	eeb0 7ac7 	vabs.f32	s14, s14
 80113ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	dd12      	ble.n	801141e <kalman_3gyro.constprop.0+0x4956>
 80113f8:	9a07      	ldr	r2, [sp, #28]
 80113fa:	9f05      	ldr	r7, [sp, #20]
 80113fc:	9806      	ldr	r0, [sp, #24]
 80113fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011400:	4673      	mov	r3, lr
 8011402:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011406:	9302      	str	r3, [sp, #8]
 8011408:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	9206      	str	r2, [sp, #24]
 8011410:	930b      	str	r3, [sp, #44]	; 0x2c
 8011412:	00ba      	lsls	r2, r7, #2
 8011414:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011418:	4605      	mov	r5, r0
 801141a:	9207      	str	r2, [sp, #28]
 801141c:	930a      	str	r3, [sp, #40]	; 0x28
 801141e:	9b06      	ldr	r3, [sp, #24]
 8011420:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011422:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011426:	4413      	add	r3, r2
 8011428:	461c      	mov	r4, r3
 801142a:	462b      	mov	r3, r5
 801142c:	4413      	add	r3, r2
 801142e:	ed94 7a00 	vldr	s14, [r4]
 8011432:	edd3 7a00 	vldr	s15, [r3]
 8011436:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801143a:	4618      	mov	r0, r3
 801143c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801143e:	4413      	add	r3, r2
 8011440:	461a      	mov	r2, r3
 8011442:	9b07      	ldr	r3, [sp, #28]
 8011444:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011448:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801144c:	440b      	add	r3, r1
 801144e:	4619      	mov	r1, r3
 8011450:	442e      	add	r6, r5
 8011452:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011454:	9607      	str	r6, [sp, #28]
 8011456:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011458:	ed84 2a00 	vstr	s4, [r4]
 801145c:	442b      	add	r3, r5
 801145e:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 8011462:	9306      	str	r3, [sp, #24]
 8011464:	19bb      	adds	r3, r7, r6
 8011466:	ed92 7a00 	vldr	s14, [r2]
 801146a:	edd1 7a00 	vldr	s15, [r1]
 801146e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011470:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011474:	edd3 3a00 	vldr	s7, [r3]
 8011478:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 801147c:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011480:	4423      	add	r3, r4
 8011482:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011486:	ed93 5a00 	vldr	s10, [r3]
 801148a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148c:	edc1 7a00 	vstr	s15, [r1]
 8011490:	462f      	mov	r7, r5
 8011492:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 8011496:	4629      	mov	r1, r5
 8011498:	eb05 0c03 	add.w	ip, r5, r3
 801149c:	9d04      	ldr	r5, [sp, #16]
 801149e:	ed92 1a00 	vldr	s2, [r2]
 80114a2:	4437      	add	r7, r6
 80114a4:	9705      	str	r7, [sp, #20]
 80114a6:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 80114aa:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80114ae:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80114b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80114b6:	4419      	add	r1, r3
 80114b8:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80114bc:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 80114c0:	191c      	adds	r4, r3, r4
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	9104      	str	r1, [sp, #16]
 80114c6:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 80114ca:	9409      	str	r4, [sp, #36]	; 0x24
 80114cc:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80114d0:	463d      	mov	r5, r7
 80114d2:	9904      	ldr	r1, [sp, #16]
 80114d4:	46b6      	mov	lr, r6
 80114d6:	4623      	mov	r3, r4
 80114d8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80114dc:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 80114e0:	edd0 7a00 	vldr	s15, [r0]
 80114e4:	9805      	ldr	r0, [sp, #20]
 80114e6:	ed91 0a00 	vldr	s0, [r1]
 80114ea:	ed90 8a00 	vldr	s16, [r0]
 80114ee:	eddc 4a00 	vldr	s9, [ip]
 80114f2:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 80114f6:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 80114fa:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80114fe:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8011502:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8011506:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 801150a:	a85d      	add	r0, sp, #372	; 0x174
 801150c:	a93e      	add	r1, sp, #248	; 0xf8
 801150e:	edd7 5a00 	vldr	s11, [r7]
 8011512:	ed96 6a00 	vldr	s12, [r6]
 8011516:	9a06      	ldr	r2, [sp, #24]
 8011518:	ed95 7a00 	vldr	s14, [r5]
 801151c:	edd4 6a00 	vldr	s13, [r4]
 8011520:	ed93 3a00 	vldr	s6, [r3]
 8011524:	edde 7a00 	vldr	s15, [lr]
 8011528:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801152a:	edd2 1a00 	vldr	s3, [r2]
 801152e:	9e07      	ldr	r6, [sp, #28]
 8011530:	eee8 3a45 	vfms.f32	s7, s16, s10
 8011534:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011538:	eea8 6a65 	vfms.f32	s12, s16, s11
 801153c:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011540:	eee0 6a65 	vfms.f32	s13, s0, s11
 8011544:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011548:	ed94 0a00 	vldr	s0, [r4]
 801154c:	eea2 3a67 	vfms.f32	s6, s4, s15
 8011550:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8011554:	eee2 6a46 	vfms.f32	s13, s4, s12
 8011558:	ee80 2a80 	vdiv.f32	s4, s1, s0
 801155c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8011560:	ee64 4a24 	vmul.f32	s9, s8, s9
 8011564:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011568:	eea1 6a66 	vfms.f32	s12, s2, s13
 801156c:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011570:	eee4 7a41 	vfms.f32	s15, s8, s2
 8011574:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011578:	eea4 5ae1 	vfms.f32	s10, s9, s3
 801157c:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011580:	ed96 3a00 	vldr	s6, [r6]
 8011584:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011588:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801158c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011590:	ee22 6a86 	vmul.f32	s12, s5, s12
 8011594:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8011598:	eea3 5ac3 	vfms.f32	s10, s7, s6
 801159c:	eee3 5a46 	vfms.f32	s11, s6, s12
 80115a0:	ee27 7a02 	vmul.f32	s14, s14, s4
 80115a4:	ee22 5a05 	vmul.f32	s10, s4, s10
 80115a8:	ee62 5a25 	vmul.f32	s11, s4, s11
 80115ac:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 80115b0:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 80115b4:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 80115b8:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 80115bc:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 80115c0:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 80115c4:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 80115c8:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 80115cc:	f7fa faa0 	bl	800bb10 <b_dcm2q>
 80115d0:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 80115d4:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80115d8:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80115dc:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 80115e0:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80115e4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80115e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80115ec:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80115f0:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 80115f4:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f43d ad20 	beq.w	800f03e <kalman_3gyro.constprop.0+0x2576>
 80115fe:	2200      	movs	r2, #0
 8011600:	9b01      	ldr	r3, [sp, #4]
 8011602:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011606:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801160a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801160e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011612:	f7fd bd9c 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 8011616:	edd3 7a02 	vldr	s15, [r3, #8]
 801161a:	ed93 7a01 	vldr	s14, [r3, #4]
 801161e:	edd3 6a03 	vldr	s13, [r3, #12]
 8011622:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011626:	eee7 7a07 	vfma.f32	s15, s14, s14
 801162a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801162e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8011632:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011636:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801163a:	f7ff bb12 	b.w	8010c62 <kalman_3gyro.constprop.0+0x419a>
 801163e:	eeb0 7a64 	vmov.f32	s14, s9
 8011642:	f7fc bc8b 	b.w	800df5c <kalman_3gyro.constprop.0+0x1494>
 8011646:	eeb0 7a64 	vmov.f32	s14, s9
 801164a:	f7ff bb94 	b.w	8010d76 <kalman_3gyro.constprop.0+0x42ae>
 801164e:	eeb0 7a64 	vmov.f32	s14, s9
 8011652:	f7ff bb50 	b.w	8010cf6 <kalman_3gyro.constprop.0+0x422e>
 8011656:	eeb0 7a64 	vmov.f32	s14, s9
 801165a:	f7fc bc9f 	b.w	800df9c <kalman_3gyro.constprop.0+0x14d4>
 801165e:	eeb0 7a64 	vmov.f32	s14, s9
 8011662:	f7ff bb68 	b.w	8010d36 <kalman_3gyro.constprop.0+0x426e>
 8011666:	eeb0 7a64 	vmov.f32	s14, s9
 801166a:	f7fc bcb7 	b.w	800dfdc <kalman_3gyro.constprop.0+0x1514>
 801166e:	2200      	movs	r2, #0
 8011670:	2004      	movs	r0, #4
 8011672:	2301      	movs	r3, #1
 8011674:	2406      	movs	r4, #6
 8011676:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801167a:	9007      	str	r0, [sp, #28]
 801167c:	eef0 7a47 	vmov.f32	s15, s14
 8011680:	4696      	mov	lr, r2
 8011682:	f04f 0c03 	mov.w	ip, #3
 8011686:	2707      	movs	r7, #7
 8011688:	e61d      	b.n	80112c6 <kalman_3gyro.constprop.0+0x47fe>
 801168a:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011a14 <kalman_3gyro.constprop.0+0x4f4c>
 801168e:	eeb0 7a64 	vmov.f32	s14, s9
 8011692:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 8011696:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169e:	f140 80b9 	bpl.w	8011814 <kalman_3gyro.constprop.0+0x4d4c>
 80116a2:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80116a6:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80116aa:	ee38 3a47 	vsub.f32	s6, s16, s14
 80116ae:	ee34 4a63 	vsub.f32	s8, s8, s7
 80116b2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80116b6:	ee64 4a03 	vmul.f32	s9, s8, s6
 80116ba:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80116be:	ee3b ba23 	vadd.f32	s22, s22, s7
 80116c2:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 80116c6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80116ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ce:	f6ff acb3 	blt.w	8011038 <kalman_3gyro.constprop.0+0x4570>
 80116d2:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 80116d6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116de:	f140 80a0 	bpl.w	8011822 <kalman_3gyro.constprop.0+0x4d5a>
 80116e2:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 80116e6:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 80116ea:	ee38 3a47 	vsub.f32	s6, s16, s14
 80116ee:	ee34 4a63 	vsub.f32	s8, s8, s7
 80116f2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80116f6:	ee64 4a03 	vmul.f32	s9, s8, s6
 80116fa:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80116fe:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011702:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011706:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170e:	f63f acb3 	bhi.w	8011078 <kalman_3gyro.constprop.0+0x45b0>
 8011712:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8011716:	eef4 4ac8 	vcmpe.f32	s9, s16
 801171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171e:	f340 8086 	ble.w	801182e <kalman_3gyro.constprop.0+0x4d66>
 8011722:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8011726:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 801172a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801172e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011732:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011736:	ee64 4a03 	vmul.f32	s9, s8, s6
 801173a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801173e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011742:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8011746:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174e:	f63f acb3 	bhi.w	80110b8 <kalman_3gyro.constprop.0+0x45f0>
 8011752:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8011756:	eef4 4ac8 	vcmpe.f32	s9, s16
 801175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175e:	dd69      	ble.n	8011834 <kalman_3gyro.constprop.0+0x4d6c>
 8011760:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8011764:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011768:	ee38 3a47 	vsub.f32	s6, s16, s14
 801176c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011770:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011774:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011778:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801177c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011780:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011784:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178c:	f63f acb4 	bhi.w	80110f8 <kalman_3gyro.constprop.0+0x4630>
 8011790:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8011794:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179c:	f77f acb4 	ble.w	8011108 <kalman_3gyro.constprop.0+0x4640>
 80117a0:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80117a4:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80117a8:	ee78 3a64 	vsub.f32	s7, s16, s9
 80117ac:	ee35 5a44 	vsub.f32	s10, s10, s8
 80117b0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80117b4:	ee25 5a23 	vmul.f32	s10, s10, s7
 80117b8:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80117bc:	ee3b ba04 	vadd.f32	s22, s22, s8
 80117c0:	f7fc bb7c 	b.w	800debc <kalman_3gyro.constprop.0+0x13f4>
 80117c4:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80117c8:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011a18 <kalman_3gyro.constprop.0+0x4f50>
 80117cc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011a1c <kalman_3gyro.constprop.0+0x4f54>
 80117d0:	3301      	adds	r3, #1
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	2b31      	cmp	r3, #49	; 0x31
 80117d6:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80117da:	bf98      	it	ls
 80117dc:	eef0 7a47 	vmovls.f32	s15, s14
 80117e0:	f7fd bc1c 	b.w	800f01c <kalman_3gyro.constprop.0+0x2554>
 80117e4:	2a0a      	cmp	r2, #10
 80117e6:	d02c      	beq.n	8011842 <kalman_3gyro.constprop.0+0x4d7a>
 80117e8:	2100      	movs	r1, #0
 80117ea:	3201      	adds	r2, #1
 80117ec:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80117f0:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80117f4:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80117f8:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 80117fc:	f7fd bca7 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 8011800:	eeb0 7a64 	vmov.f32	s14, s9
 8011804:	e7a5      	b.n	8011752 <kalman_3gyro.constprop.0+0x4c8a>
 8011806:	2305      	movs	r3, #5
 8011808:	2108      	movs	r1, #8
 801180a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801180e:	2302      	movs	r3, #2
 8011810:	9302      	str	r3, [sp, #8]
 8011812:	e572      	b.n	80112fa <kalman_3gyro.constprop.0+0x4832>
 8011814:	eeb0 7a64 	vmov.f32	s14, s9
 8011818:	f7ff bbf6 	b.w	8011008 <kalman_3gyro.constprop.0+0x4540>
 801181c:	eeb0 7a64 	vmov.f32	s14, s9
 8011820:	e757      	b.n	80116d2 <kalman_3gyro.constprop.0+0x4c0a>
 8011822:	eeb0 7a64 	vmov.f32	s14, s9
 8011826:	e40f      	b.n	8011048 <kalman_3gyro.constprop.0+0x4580>
 8011828:	eeb0 7a64 	vmov.f32	s14, s9
 801182c:	e771      	b.n	8011712 <kalman_3gyro.constprop.0+0x4c4a>
 801182e:	eeb0 7a64 	vmov.f32	s14, s9
 8011832:	e429      	b.n	8011088 <kalman_3gyro.constprop.0+0x45c0>
 8011834:	eeb0 7a64 	vmov.f32	s14, s9
 8011838:	e446      	b.n	80110c8 <kalman_3gyro.constprop.0+0x4600>
 801183a:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011a14 <kalman_3gyro.constprop.0+0x4f4c>
 801183e:	f7fc bb6d 	b.w	800df1c <kalman_3gyro.constprop.0+0x1454>
 8011842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011844:	ed94 3a00 	vldr	s6, [r4]
 8011848:	edd2 5a00 	vldr	s11, [r2]
 801184c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801184e:	edd0 3a00 	vldr	s7, [r0]
 8011852:	ed92 1a00 	vldr	s2, [r2]
 8011856:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011858:	ed91 4a00 	vldr	s8, [r1]
 801185c:	edd2 4a00 	vldr	s9, [r2]
 8011860:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011862:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011866:	ed92 2a00 	vldr	s4, [r2]
 801186a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801186c:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011870:	edd2 7a00 	vldr	s15, [r2]
 8011874:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011876:	edd2 2a00 	vldr	s5, [r2]
 801187a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801187c:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011880:	edd2 1a00 	vldr	s3, [r2]
 8011884:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011886:	ee74 4a82 	vadd.f32	s9, s9, s4
 801188a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801188e:	ed92 3a00 	vldr	s6, [r2]
 8011892:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011894:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011898:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801189c:	edd2 3a00 	vldr	s7, [r2]
 80118a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80118a6:	ed92 4a00 	vldr	s8, [r2]
 80118aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118ac:	ee74 4a83 	vadd.f32	s9, s9, s6
 80118b0:	ed92 2a00 	vldr	s4, [r2]
 80118b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80118b6:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 80118ba:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80118be:	edd2 2a00 	vldr	s5, [r2]
 80118c2:	ed91 3a00 	vldr	s6, [r1]
 80118c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80118ca:	ee74 4a82 	vadd.f32	s9, s9, s4
 80118ce:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 80118d2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80118d6:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 80118da:	ed90 4a00 	vldr	s8, [r0]
 80118de:	edd2 3a00 	vldr	s7, [r2]
 80118e2:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 80118e6:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80118ea:	ed91 2a00 	vldr	s4, [r1]
 80118ee:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80118f2:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80118f6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80118fa:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 80118fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011902:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011906:	ed90 4a00 	vldr	s8, [r0]
 801190a:	edd2 2a00 	vldr	s5, [r2]
 801190e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011912:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011916:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 801191a:	edd1 3a00 	vldr	s7, [r1]
 801191e:	ed90 3a00 	vldr	s6, [r0]
 8011922:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011926:	ee75 5a84 	vadd.f32	s11, s11, s8
 801192a:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 801192e:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011932:	ed92 4a00 	vldr	s8, [r2]
 8011936:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801193a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801193e:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011942:	edd0 3a00 	vldr	s7, [r0]
 8011946:	edd4 2a00 	vldr	s5, [r4]
 801194a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801194e:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011952:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011956:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 801195a:	ed91 3a00 	vldr	s6, [r1]
 801195e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011962:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011966:	ed92 4a00 	vldr	s8, [r2]
 801196a:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 801196e:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011972:	edd4 3a00 	vldr	s7, [r4]
 8011976:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 801197a:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801197e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011982:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011986:	ed91 4a00 	vldr	s8, [r1]
 801198a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801198e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011992:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011996:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 801199a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801199e:	edc1 4a00 	vstr	s9, [r1]
 80119a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80119a6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80119aa:	edc1 5a00 	vstr	s11, [r1]
 80119ae:	f240 1501 	movw	r5, #257	; 0x101
 80119b2:	3201      	adds	r2, #1
 80119b4:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 80119b8:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 80119bc:	edc1 7a00 	vstr	s15, [r1]
 80119c0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80119c4:	2800      	cmp	r0, #0
 80119c6:	f43d abc2 	beq.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 80119ca:	2200      	movs	r2, #0
 80119cc:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 80119d0:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 80119d4:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 80119d8:	f88b 2001 	strb.w	r2, [fp, #1]
 80119dc:	f7fd bbb7 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 80119e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80119e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80119e8:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80119ec:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80119f0:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80119f4:	f7fd bb20 	b.w	800f038 <kalman_3gyro.constprop.0+0x2570>
 80119f8:	2a00      	cmp	r2, #0
 80119fa:	f340 80c1 	ble.w	8011b80 <kalman_3gyro.constprop.0+0x50b8>
 80119fe:	2300      	movs	r3, #0
 8011a00:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011a04:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011a08:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011a0c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011a10:	f7fc bfcf 	b.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 8011a14:	00000000 	.word	0x00000000
 8011a18:	3e4cccce 	.word	0x3e4cccce
 8011a1c:	3eaaaaab 	.word	0x3eaaaaab
 8011a20:	3e999998 	.word	0x3e999998
 8011a24:	3f99999a 	.word	0x3f99999a
 8011a28:	3dccccd0 	.word	0x3dccccd0
 8011a2c:	3f8ccccd 	.word	0x3f8ccccd
 8011a30:	3e4ccccd 	.word	0x3e4ccccd
 8011a34:	3d088889 	.word	0x3d088889
 8011a38:	3d0d3dcb 	.word	0x3d0d3dcb
 8011a3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	d55b      	bpl.n	8011b02 <kalman_3gyro.constprop.0+0x503a>
 8011a4a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011a28 <kalman_3gyro.constprop.0+0x4f60>
 8011a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011a56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011a5a:	eef0 5a66 	vmov.f32	s11, s13
 8011a5e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011a62:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6a:	eeb0 7a65 	vmov.f32	s14, s11
 8011a6e:	db5b      	blt.n	8011b28 <kalman_3gyro.constprop.0+0x5060>
 8011a70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7c:	d55b      	bpl.n	8011b36 <kalman_3gyro.constprop.0+0x506e>
 8011a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a82:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011a86:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011a20 <kalman_3gyro.constprop.0+0x4f58>
 8011a8a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011a24 <kalman_3gyro.constprop.0+0x4f5c>
 8011a8e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011a92:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011a96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	db5b      	blt.n	8011b58 <kalman_3gyro.constprop.0+0x5090>
 8011aa0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aac:	d55b      	bpl.n	8011b66 <kalman_3gyro.constprop.0+0x509e>
 8011aae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ab6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011aba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011abe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011ac2:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011ac6:	f7ff bb7e 	b.w	80111c6 <kalman_3gyro.constprop.0+0x46fe>
 8011aca:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011ace:	2b27      	cmp	r3, #39	; 0x27
 8011ad0:	f200 80c3 	bhi.w	8011c5a <kalman_3gyro.constprop.0+0x5192>
 8011ad4:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011ad8:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011adc:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011ae0:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011aec:	bf14      	ite	ne
 8011aee:	b29b      	uxthne	r3, r3
 8011af0:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011af4:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011af8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011afc:	9b01      	ldr	r3, [sp, #4]
 8011afe:	f7fd bb26 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 8011b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0e:	d5af      	bpl.n	8011a70 <kalman_3gyro.constprop.0+0x4fa8>
 8011b10:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011b14:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011a28 <kalman_3gyro.constprop.0+0x4f60>
 8011b18:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011a2c <kalman_3gyro.constprop.0+0x4f64>
 8011b1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011b20:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011b24:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011b28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	dbad      	blt.n	8011a92 <kalman_3gyro.constprop.0+0x4fca>
 8011b36:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b42:	d5ad      	bpl.n	8011aa0 <kalman_3gyro.constprop.0+0x4fd8>
 8011b44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011b48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011b4c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011b50:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011b54:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011b58:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011b5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b64:	dbad      	blt.n	8011ac2 <kalman_3gyro.constprop.0+0x4ffa>
 8011b66:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b6e:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011a30 <kalman_3gyro.constprop.0+0x4f68>
 8011b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011b76:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011b7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011b7e:	e7a0      	b.n	8011ac2 <kalman_3gyro.constprop.0+0x4ffa>
 8011b80:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011b84:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011b88:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011b8c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011b90:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011b94:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011b98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011b9c:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011ba0:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011ba4:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011ba8:	f7fc bf03 	b.w	800e9b2 <kalman_3gyro.constprop.0+0x1eea>
 8011bac:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011a34 <kalman_3gyro.constprop.0+0x4f6c>
 8011bb0:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011a38 <kalman_3gyro.constprop.0+0x4f70>
 8011bb4:	ac33      	add	r4, sp, #204	; 0xcc
 8011bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bba:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011bbe:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011bc2:	eef0 7a66 	vmov.f32	s15, s13
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	461a      	mov	r2, r3
 8011bca:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011bce:	320c      	adds	r2, #12
 8011bd0:	428a      	cmp	r2, r1
 8011bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bd6:	d1f8      	bne.n	8011bca <kalman_3gyro.constprop.0+0x5102>
 8011bd8:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011bdc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011be0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011be4:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011be8:	330c      	adds	r3, #12
 8011bea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011bee:	428b      	cmp	r3, r1
 8011bf0:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011bf4:	d1f6      	bne.n	8011be4 <kalman_3gyro.constprop.0+0x511c>
 8011bf6:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011bfa:	2802      	cmp	r0, #2
 8011bfc:	f103 0104 	add.w	r1, r3, #4
 8011c00:	ece4 6a01 	vstmia	r4!, {s13}
 8011c04:	d1d9      	bne.n	8011bba <kalman_3gyro.constprop.0+0x50f2>
 8011c06:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011c0a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011c0e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011c12:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011c16:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011c1a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c22:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c2a:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011c2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c36:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011c3a:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011c3e:	f57d aa62 	bpl.w	800f106 <kalman_3gyro.constprop.0+0x263e>
 8011c42:	2200      	movs	r2, #0
 8011c44:	9b01      	ldr	r3, [sp, #4]
 8011c46:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011c4a:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011c4e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011c52:	f88b 2001 	strb.w	r2, [fp, #1]
 8011c56:	f7fd ba7a 	b.w	800f14e <kalman_3gyro.constprop.0+0x2686>
 8011c5a:	9b08      	ldr	r3, [sp, #32]
 8011c5c:	6999      	ldr	r1, [r3, #24]
 8011c5e:	69da      	ldr	r2, [r3, #28]
 8011c60:	6a1b      	ldr	r3, [r3, #32]
 8011c62:	9181      	str	r1, [sp, #516]	; 0x204
 8011c64:	9282      	str	r2, [sp, #520]	; 0x208
 8011c66:	9383      	str	r3, [sp, #524]	; 0x20c
 8011c68:	e73a      	b.n	8011ae0 <kalman_3gyro.constprop.0+0x5018>
 8011c6a:	bf00      	nop
 8011c6c:	0000      	movs	r0, r0
	...

08011c70 <iNemoEngine_API_Update>:
 8011c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c74:	ed2d 8b0c 	vpush	{d8-d13}
 8011c78:	4604      	mov	r4, r0
 8011c7a:	b0c1      	sub	sp, #260	; 0x104
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	4617      	mov	r7, r2
 8011c80:	eeb0 8a40 	vmov.f32	s16, s0
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 8253 	beq.w	8012130 <iNemoEngine_API_Update+0x4c0>
 8011c8a:	461e      	mov	r6, r3
 8011c8c:	463b      	mov	r3, r7
 8011c8e:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011c92:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011c96:	6859      	ldr	r1, [r3, #4]
 8011c98:	689a      	ldr	r2, [r3, #8]
 8011c9a:	ab33      	add	r3, sp, #204	; 0xcc
 8011c9c:	c307      	stmia	r3!, {r0, r1, r2}
 8011c9e:	6879      	ldr	r1, [r7, #4]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	6838      	ldr	r0, [r7, #0]
 8011ca4:	ab30      	add	r3, sp, #192	; 0xc0
 8011ca6:	c307      	stmia	r3!, {r0, r1, r2}
 8011ca8:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011cac:	6879      	ldr	r1, [r7, #4]
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	ab36      	add	r3, sp, #216	; 0xd8
 8011cb2:	c307      	stmia	r3!, {r0, r1, r2}
 8011cb4:	f1bc 0f00 	cmp.w	ip, #0
 8011cb8:	d005      	beq.n	8011cc6 <iNemoEngine_API_Update+0x56>
 8011cba:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011cbe:	7923      	ldrb	r3, [r4, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	f080 829b 	bcs.w	80121fc <iNemoEngine_API_Update+0x58c>
 8011cc6:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011cca:	f10d 0a14 	add.w	sl, sp, #20
 8011cce:	2300      	movs	r3, #0
 8011cd0:	4649      	mov	r1, r9
 8011cd2:	4650      	mov	r0, sl
 8011cd4:	aa33      	add	r2, sp, #204	; 0xcc
 8011cd6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011cda:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011cde:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011ce2:	f7f9 fb63 	bl	800b3ac <rotVect>
 8011ce6:	aa36      	add	r2, sp, #216	; 0xd8
 8011ce8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011cec:	a808      	add	r0, sp, #32
 8011cee:	f7f9 fb5d 	bl	800b3ac <rotVect>
 8011cf2:	aa30      	add	r2, sp, #192	; 0xc0
 8011cf4:	4640      	mov	r0, r8
 8011cf6:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011cfa:	f7f9 fb57 	bl	800b3ac <rotVect>
 8011cfe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011d02:	b923      	cbnz	r3, 8011d0e <iNemoEngine_API_Update+0x9e>
 8011d04:	4b8c      	ldr	r3, [pc, #560]	; (8011f38 <iNemoEngine_API_Update+0x2c8>)
 8011d06:	930c      	str	r3, [sp, #48]	; 0x30
 8011d08:	2200      	movs	r2, #0
 8011d0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8011d0e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011d12:	2f09      	cmp	r7, #9
 8011d14:	d851      	bhi.n	8011dba <iNemoEngine_API_Update+0x14a>
 8011d16:	ed9d ba06 	vldr	s22, [sp, #24]
 8011d1a:	eddd ba05 	vldr	s23, [sp, #20]
 8011d1e:	eddd aa07 	vldr	s21, [sp, #28]
 8011d22:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011d26:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011d2a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011d2e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011d32:	ee17 0a90 	vmov	r0, s15
 8011d36:	f7ee fbab 	bl	8000490 <__aeabi_f2d>
 8011d3a:	ec41 0b10 	vmov	d0, r0, r1
 8011d3e:	f003 fecd 	bl	8015adc <sqrt>
 8011d42:	ec51 0b10 	vmov	r0, r1, d0
 8011d46:	f7ee feab 	bl	8000aa0 <__aeabi_d2f>
 8011d4a:	ee07 0a90 	vmov	s15, r0
 8011d4e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011d52:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011d56:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011d5a:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011d5e:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011d62:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011d66:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011d6a:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011d6e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011d72:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011d76:	ee17 0a90 	vmov	r0, s15
 8011d7a:	edcd ba05 	vstr	s23, [sp, #20]
 8011d7e:	ed8d ba06 	vstr	s22, [sp, #24]
 8011d82:	edcd aa07 	vstr	s21, [sp, #28]
 8011d86:	f7ee fb83 	bl	8000490 <__aeabi_f2d>
 8011d8a:	ec41 0b10 	vmov	d0, r0, r1
 8011d8e:	f003 fea5 	bl	8015adc <sqrt>
 8011d92:	ec51 0b10 	vmov	r0, r1, d0
 8011d96:	f7ee fe83 	bl	8000aa0 <__aeabi_d2f>
 8011d9a:	ee07 0a90 	vmov	s15, r0
 8011d9e:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011da2:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011da6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011daa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011dae:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011db2:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011db6:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011dba:	7923      	ldrb	r3, [r4, #4]
 8011dbc:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	f080 80dd 	bcs.w	8011f80 <iNemoEngine_API_Update+0x310>
 8011dc6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011dca:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011dce:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011dd2:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011dd6:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011dda:	3701      	adds	r7, #1
 8011ddc:	aa33      	add	r2, sp, #204	; 0xcc
 8011dde:	4649      	mov	r1, r9
 8011de0:	4640      	mov	r0, r8
 8011de2:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011de6:	9303      	str	r3, [sp, #12]
 8011de8:	f7f9 fae0 	bl	800b3ac <rotVect>
 8011dec:	9b03      	ldr	r3, [sp, #12]
 8011dee:	f8db 1000 	ldr.w	r1, [fp]
 8011df2:	6818      	ldr	r0, [r3, #0]
 8011df4:	f8da 2000 	ldr.w	r2, [sl]
 8011df8:	6833      	ldr	r3, [r6, #0]
 8011dfa:	61ab      	str	r3, [r5, #24]
 8011dfc:	60e8      	str	r0, [r5, #12]
 8011dfe:	6129      	str	r1, [r5, #16]
 8011e00:	616a      	str	r2, [r5, #20]
 8011e02:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011e0c:	4641      	mov	r1, r8
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	462a      	mov	r2, r5
 8011e12:	f105 031c 	add.w	r3, r5, #28
 8011e16:	f105 000c 	add.w	r0, r5, #12
 8011e1a:	f7fa fd85 	bl	800c928 <output_update>
 8011e1e:	ed95 8a00 	vldr	s16, [r5]
 8011e22:	edd5 9a01 	vldr	s19, [r5, #4]
 8011e26:	eeb0 0a48 	vmov.f32	s0, s16
 8011e2a:	f003 fdeb 	bl	8015a04 <sinf>
 8011e2e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011f3c <iNemoEngine_API_Update+0x2cc>
 8011e32:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011f40 <iNemoEngine_API_Update+0x2d0>
 8011e36:	ee60 8a00 	vmul.f32	s17, s0, s0
 8011e3a:	eef0 6ae9 	vabs.f32	s13, s19
 8011e3e:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011e42:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4a:	eef0 8a67 	vmov.f32	s17, s15
 8011e4e:	d56e      	bpl.n	8011f2e <iNemoEngine_API_Update+0x2be>
 8011e50:	eeb0 0a69 	vmov.f32	s0, s19
 8011e54:	f003 fe18 	bl	8015a88 <tanf>
 8011e58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011e5c:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011e60:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011e64:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011f44 <iNemoEngine_API_Update+0x2d4>
 8011e68:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011f58 <iNemoEngine_API_Update+0x2e8>
 8011e6c:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8011e70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011e74:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7c:	bf88      	it	hi
 8011e7e:	eef0 7a66 	vmovhi.f32	s15, s13
 8011e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8a:	bfb8      	it	lt
 8011e8c:	eef0 7a47 	vmovlt.f32	s15, s14
 8011e90:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011e94:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011e98:	4c2b      	ldr	r4, [pc, #172]	; (8011f48 <iNemoEngine_API_Update+0x2d8>)
 8011e9a:	bba3      	cbnz	r3, 8011f06 <iNemoEngine_API_Update+0x296>
 8011e9c:	6820      	ldr	r0, [r4, #0]
 8011e9e:	edd5 0a08 	vldr	s1, [r5, #32]
 8011ea2:	ed95 0a07 	vldr	s0, [r5, #28]
 8011ea6:	edd5 9a03 	vldr	s19, [r5, #12]
 8011eaa:	ed95 aa04 	vldr	s20, [r5, #16]
 8011eae:	ed95 9a05 	vldr	s18, [r5, #20]
 8011eb2:	edd5 8a06 	vldr	s17, [r5, #24]
 8011eb6:	f7f9 fb4b 	bl	800b550 <findDirection>
 8011eba:	6020      	str	r0, [r4, #0]
 8011ebc:	2805      	cmp	r0, #5
 8011ebe:	f200 833d 	bhi.w	801253c <iNemoEngine_API_Update+0x8cc>
 8011ec2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011ec6:	000a      	.short	0x000a
 8011ec8:	00060137 	.word	0x00060137
 8011ecc:	00060169 	.word	0x00060169
 8011ed0:	000a      	.short	0x000a
 8011ed2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011f4c <iNemoEngine_API_Update+0x2dc>
 8011ed6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011eda:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011f7c <iNemoEngine_API_Update+0x30c>
 8011ede:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee6:	bfa8      	it	ge
 8011ee8:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8011eec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef4:	f100 8111 	bmi.w	801211a <iNemoEngine_API_Update+0x4aa>
 8011ef8:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011efc:	b041      	add	sp, #260	; 0x104
 8011efe:	ecbd 8b0c 	vpop	{d8-d13}
 8011f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f06:	ed95 9a05 	vldr	s18, [r5, #20]
 8011f0a:	6820      	ldr	r0, [r4, #0]
 8011f0c:	edd5 0a07 	vldr	s1, [r5, #28]
 8011f10:	ed95 0a08 	vldr	s0, [r5, #32]
 8011f14:	edd5 9a04 	vldr	s19, [r5, #16]
 8011f18:	ed95 aa03 	vldr	s20, [r5, #12]
 8011f1c:	edd5 8a06 	vldr	s17, [r5, #24]
 8011f20:	eeb1 1a41 	vneg.f32	s2, s2
 8011f24:	eeb1 9a49 	vneg.f32	s18, s18
 8011f28:	f7f9 fb12 	bl	800b550 <findDirection>
 8011f2c:	e7c5      	b.n	8011eba <iNemoEngine_API_Update+0x24a>
 8011f2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011f50 <iNemoEngine_API_Update+0x2e0>
 8011f32:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8011f36:	e793      	b.n	8011e60 <iNemoEngine_API_Update+0x1f0>
 8011f38:	3f333333 	.word	0x3f333333
 8011f3c:	00000000 	.word	0x00000000
 8011f40:	3fbc430e 	.word	0x3fbc430e
 8011f44:	40490fdb 	.word	0x40490fdb
 8011f48:	20000188 	.word	0x20000188
 8011f4c:	43340000 	.word	0x43340000
 8011f50:	42c6ab07 	.word	0x42c6ab07
 8011f54:	3c03126f 	.word	0x3c03126f
 8011f58:	3c8efa35 	.word	0x3c8efa35
 8011f5c:	3e4ccccd 	.word	0x3e4ccccd
 8011f60:	3fb50481 	.word	0x3fb50481
 8011f64:	3ed93dd9 	.word	0x3ed93dd9
 8011f68:	3b656042 	.word	0x3b656042
 8011f6c:	42c80000 	.word	0x42c80000
 8011f70:	3a83126f 	.word	0x3a83126f
 8011f74:	3d4ccccd 	.word	0x3d4ccccd
 8011f78:	3f333333 	.word	0x3f333333
 8011f7c:	43b40000 	.word	0x43b40000
 8011f80:	ee07 3a90 	vmov	s15, r3
 8011f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f88:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8011f54 <iNemoEngine_API_Update+0x2e4>
 8011f8c:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8011f58 <iNemoEngine_API_Update+0x2e8>
 8011f90:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8011f68 <iNemoEngine_API_Update+0x2f8>
 8011f94:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8011f64 <iNemoEngine_API_Update+0x2f4>
 8011f98:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8011f60 <iNemoEngine_API_Update+0x2f0>
 8011f9c:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8011f5c <iNemoEngine_API_Update+0x2ec>
 8011fa0:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011fa4:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011fa8:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8011fac:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011fb0:	2700      	movs	r7, #0
 8011fb2:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011fb6:	f04f 0c00 	mov.w	ip, #0
 8011fba:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8011fbe:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011fc2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011fc6:	edd3 5a00 	vldr	s11, [r3]
 8011fca:	f8c3 c000 	str.w	ip, [r3]
 8011fce:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011fd2:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011fd6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011fda:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011fde:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011fe2:	edd7 4a00 	vldr	s9, [r7]
 8011fe6:	f8c7 c000 	str.w	ip, [r7]
 8011fea:	ed93 5a00 	vldr	s10, [r3]
 8011fee:	f8c3 c000 	str.w	ip, [r3]
 8011ff2:	7963      	ldrb	r3, [r4, #5]
 8011ff4:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011ff8:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011ffc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8012000:	2b01      	cmp	r3, #1
 8012002:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8012006:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801200a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801200e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012012:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8012016:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 801201a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801201e:	f000 812e 	beq.w	801227e <iNemoEngine_API_Update+0x60e>
 8012022:	2b02      	cmp	r3, #2
 8012024:	f000 8122 	beq.w	801226c <iNemoEngine_API_Update+0x5fc>
 8012028:	2b00      	cmp	r3, #0
 801202a:	f000 80ef 	beq.w	801220c <iNemoEngine_API_Update+0x59c>
 801202e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012032:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8011f6c <iNemoEngine_API_Update+0x2fc>
 8012036:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8011f70 <iNemoEngine_API_Update+0x300>
 801203a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801203e:	ee60 0a85 	vmul.f32	s1, s1, s10
 8012042:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012046:	8863      	ldrh	r3, [r4, #2]
 8012048:	1e5a      	subs	r2, r3, #1
 801204a:	2a12      	cmp	r2, #18
 801204c:	f200 80e7 	bhi.w	801221e <iNemoEngine_API_Update+0x5ae>
 8012050:	3301      	adds	r3, #1
 8012052:	b21a      	sxth	r2, r3
 8012054:	b29b      	uxth	r3, r3
 8012056:	2b03      	cmp	r3, #3
 8012058:	8062      	strh	r2, [r4, #2]
 801205a:	f240 8115 	bls.w	8012288 <iNemoEngine_API_Update+0x618>
 801205e:	ee05 2a90 	vmov	s11, r2
 8012062:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8011f74 <iNemoEngine_API_Update+0x304>
 8012066:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801206a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801206e:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8012072:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8012076:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 801207a:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8011f78 <iNemoEngine_API_Update+0x308>
 801207e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8012082:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012086:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801208a:	ee26 6a25 	vmul.f32	s12, s12, s11
 801208e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012092:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8012096:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801209a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801209e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80120a2:	aa1a      	add	r2, sp, #104	; 0x68
 80120a4:	af16      	add	r7, sp, #88	; 0x58
 80120a6:	e9cd 7200 	strd	r7, r2, [sp]
 80120aa:	ab12      	add	r3, sp, #72	; 0x48
 80120ac:	aa1e      	add	r2, sp, #120	; 0x78
 80120ae:	4641      	mov	r1, r8
 80120b0:	4620      	mov	r0, r4
 80120b2:	f7fa fd09 	bl	800cac8 <kalman_3gyro.constprop.0>
 80120b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80120b8:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 80120bc:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 80120c0:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 80120c4:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 80120c8:	f8c7 a000 	str.w	sl, [r7]
 80120cc:	f604 1744 	addw	r7, r4, #2372	; 0x944
 80120d0:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80120d4:	f8c7 e000 	str.w	lr, [r7]
 80120d8:	f604 1748 	addw	r7, r4, #2376	; 0x948
 80120dc:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 80120e0:	f8c7 c000 	str.w	ip, [r7]
 80120e4:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 80120e8:	6030      	str	r0, [r6, #0]
 80120ea:	60f3      	str	r3, [r6, #12]
 80120ec:	6071      	str	r1, [r6, #4]
 80120ee:	60b2      	str	r2, [r6, #8]
 80120f0:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 80120f4:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80120f8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80120fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80120fe:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8012102:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8012106:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801210a:	edc3 7a00 	vstr	s15, [r3]
 801210e:	f8cb e000 	str.w	lr, [fp]
 8012112:	f8ca c000 	str.w	ip, [sl]
 8012116:	6030      	str	r0, [r6, #0]
 8012118:	e65f      	b.n	8011dda <iNemoEngine_API_Update+0x16a>
 801211a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8011f7c <iNemoEngine_API_Update+0x30c>
 801211e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012122:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8012126:	b041      	add	sp, #260	; 0x104
 8012128:	ecbd 8b0c 	vpop	{d8-d13}
 801212c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012130:	ae0e      	add	r6, sp, #56	; 0x38
 8012132:	e5ab      	b.n	8011c8c <iNemoEngine_API_Update+0x1c>
 8012134:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012138:	ee69 8a28 	vmul.f32	s17, s18, s17
 801213c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012140:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012144:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012148:	eee9 7a49 	vfms.f32	s15, s18, s18
 801214c:	ee17 0a90 	vmov	r0, s15
 8012150:	f7ee f99e 	bl	8000490 <__aeabi_f2d>
 8012154:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	ee17 0a90 	vmov	r0, s15
 8012160:	ec43 2b18 	vmov	d8, r2, r3
 8012164:	f7ee f994 	bl	8000490 <__aeabi_f2d>
 8012168:	eeb0 1a48 	vmov.f32	s2, s16
 801216c:	eef0 1a68 	vmov.f32	s3, s17
 8012170:	ec41 0b10 	vmov	d0, r0, r1
 8012174:	f003 fcb0 	bl	8015ad8 <atan2>
 8012178:	a3f3      	add	r3, pc, #972	; (adr r3, 8012548 <iNemoEngine_API_Update+0x8d8>)
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	ec51 0b10 	vmov	r0, r1, d0
 8012182:	f7ee f9dd 	bl	8000540 <__aeabi_dmul>
 8012186:	4bf2      	ldr	r3, [pc, #968]	; (8012550 <iNemoEngine_API_Update+0x8e0>)
 8012188:	2200      	movs	r2, #0
 801218a:	f7ee f821 	bl	80001d0 <__aeabi_dsub>
 801218e:	f7ee fc87 	bl	8000aa0 <__aeabi_d2f>
 8012192:	ee08 0a10 	vmov	s16, r0
 8012196:	e6a0      	b.n	8011eda <iNemoEngine_API_Update+0x26a>
 8012198:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801219c:	ee69 8a28 	vmul.f32	s17, s18, s17
 80121a0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80121a4:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80121a8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80121ac:	eee9 7a49 	vfms.f32	s15, s18, s18
 80121b0:	ee17 0a90 	vmov	r0, s15
 80121b4:	f7ee f96c 	bl	8000490 <__aeabi_f2d>
 80121b8:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80121bc:	4602      	mov	r2, r0
 80121be:	460b      	mov	r3, r1
 80121c0:	ee17 0a90 	vmov	r0, s15
 80121c4:	ec43 2b18 	vmov	d8, r2, r3
 80121c8:	f7ee f962 	bl	8000490 <__aeabi_f2d>
 80121cc:	eeb0 1a48 	vmov.f32	s2, s16
 80121d0:	eef0 1a68 	vmov.f32	s3, s17
 80121d4:	ec41 0b10 	vmov	d0, r0, r1
 80121d8:	f003 fc7e 	bl	8015ad8 <atan2>
 80121dc:	a3da      	add	r3, pc, #872	; (adr r3, 8012548 <iNemoEngine_API_Update+0x8d8>)
 80121de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e2:	ec51 0b10 	vmov	r0, r1, d0
 80121e6:	f7ee f9ab 	bl	8000540 <__aeabi_dmul>
 80121ea:	4bd9      	ldr	r3, [pc, #868]	; (8012550 <iNemoEngine_API_Update+0x8e0>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	f7ed fff1 	bl	80001d4 <__adddf3>
 80121f2:	f7ee fc55 	bl	8000aa0 <__aeabi_d2f>
 80121f6:	ee08 0a10 	vmov	s16, r0
 80121fa:	e66e      	b.n	8011eda <iNemoEngine_API_Update+0x26a>
 80121fc:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012200:	2b00      	cmp	r3, #0
 8012202:	dd44      	ble.n	801228e <iNemoEngine_API_Update+0x61e>
 8012204:	3b01      	subs	r3, #1
 8012206:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801220a:	e55c      	b.n	8011cc6 <iNemoEngine_API_Update+0x56>
 801220c:	8863      	ldrh	r3, [r4, #2]
 801220e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8012554 <iNemoEngine_API_Update+0x8e4>
 8012212:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8012558 <iNemoEngine_API_Update+0x8e8>
 8012216:	1e5a      	subs	r2, r3, #1
 8012218:	2a12      	cmp	r2, #18
 801221a:	f67f af19 	bls.w	8012050 <iNemoEngine_API_Update+0x3e0>
 801221e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8012222:	eddf 2ace 	vldr	s5, [pc, #824]	; 801255c <iNemoEngine_API_Update+0x8ec>
 8012226:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 801222a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801222e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8012232:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8012236:	eec3 4a84 	vdiv.f32	s9, s7, s8
 801223a:	2300      	movs	r3, #0
 801223c:	8063      	strh	r3, [r4, #2]
 801223e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8012242:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8012246:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8012560 <iNemoEngine_API_Update+0x8f0>
 801224a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 801224e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8012252:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012256:	ee27 7a03 	vmul.f32	s14, s14, s6
 801225a:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 801225e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8012262:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8012266:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801226a:	e71a      	b.n	80120a2 <iNemoEngine_API_Update+0x432>
 801226c:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012270:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012274:	edd4 0a05 	vldr	s1, [r4, #20]
 8012278:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8012564 <iNemoEngine_API_Update+0x8f4>
 801227c:	e6e3      	b.n	8012046 <iNemoEngine_API_Update+0x3d6>
 801227e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012282:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8012568 <iNemoEngine_API_Update+0x8f8>
 8012286:	e6de      	b.n	8012046 <iNemoEngine_API_Update+0x3d6>
 8012288:	eddf 5ab8 	vldr	s11, [pc, #736]	; 801256c <iNemoEngine_API_Update+0x8fc>
 801228c:	e6ef      	b.n	801206e <iNemoEngine_API_Update+0x3fe>
 801228e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8012292:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8012296:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 801229a:	ed97 5a00 	vldr	s10, [r7]
 801229e:	ed92 da00 	vldr	s26, [r2]
 80122a2:	ed93 6a00 	vldr	s12, [r3]
 80122a6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8012554 <iNemoEngine_API_Update+0x8e4>
 80122aa:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 80122ae:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 80122b2:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 80122b6:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 80122ba:	ed91 3a00 	vldr	s6, [r1]
 80122be:	ed92 1a00 	vldr	s2, [r2]
 80122c2:	ed97 7a00 	vldr	s14, [r7]
 80122c6:	edd3 3a00 	vldr	s7, [r3]
 80122ca:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80122ce:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 80122d2:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 80122d6:	ed91 ba00 	vldr	s22, [r1]
 80122da:	edd0 6a00 	vldr	s13, [r0]
 80122de:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 80122e2:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 80122e6:	edd1 aa00 	vldr	s21, [r1]
 80122ea:	ed92 2a00 	vldr	s4, [r2]
 80122ee:	ee96 7a04 	vfnms.f32	s14, s12, s8
 80122f2:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80122f6:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 80122fa:	eed1 3a04 	vfnms.f32	s7, s2, s8
 80122fe:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8012302:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8012306:	edd0 7a00 	vldr	s15, [r0]
 801230a:	edd2 1a00 	vldr	s3, [r2]
 801230e:	ed93 ca00 	vldr	s24, [r3]
 8012312:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8012316:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 801231a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 801231e:	ed91 5a00 	vldr	s10, [r1]
 8012322:	edd0 5a00 	vldr	s11, [r0]
 8012326:	edd7 9a00 	vldr	s19, [r7]
 801232a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 801232e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8012332:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8012336:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 801233a:	edd0 2a00 	vldr	s5, [r0]
 801233e:	edd3 0a00 	vldr	s1, [r3]
 8012342:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8012346:	ee37 7a27 	vadd.f32	s14, s14, s15
 801234a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801234e:	edd7 7a00 	vldr	s15, [r7]
 8012352:	edd0 5a00 	vldr	s11, [r0]
 8012356:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 801235a:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 801235e:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 8012362:	ed93 6a00 	vldr	s12, [r3]
 8012366:	edda ba00 	vldr	s23, [sl]
 801236a:	ed99 5a00 	vldr	s10, [r9]
 801236e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8012372:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8012376:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 801237a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 801237e:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8012382:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8012386:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 801238a:	eddc 4a00 	vldr	s9, [ip]
 801238e:	edd3 7a00 	vldr	s15, [r3]
 8012392:	ed98 1a00 	vldr	s2, [r8]
 8012396:	edde 8a00 	vldr	s17, [lr]
 801239a:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 801239e:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80123a2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80123a6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80123aa:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80123ae:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 80123b2:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 80123b6:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 80123ba:	ed9c aa00 	vldr	s20, [ip]
 80123be:	eeed 6a03 	vfma.f32	s13, s26, s6
 80123c2:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 80123c6:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 80123ca:	ed92 da00 	vldr	s26, [r2]
 80123ce:	eeab 7a03 	vfma.f32	s14, s22, s6
 80123d2:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 80123d6:	ed91 ba00 	vldr	s22, [r1]
 80123da:	eef0 ca61 	vmov.f32	s25, s3
 80123de:	eddb 1a00 	vldr	s3, [fp]
 80123e2:	edd3 ba00 	vldr	s23, [r3]
 80123e6:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 80123ea:	eedb 7a84 	vfnms.f32	s15, s23, s8
 80123ee:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80123f2:	1c53      	adds	r3, r2, #1
 80123f4:	eeea 3a83 	vfma.f32	s7, s21, s6
 80123f8:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 80123fc:	edd8 aa00 	vldr	s21, [r8]
 8012400:	eee6 1a03 	vfma.f32	s3, s12, s6
 8012404:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8012408:	ed9e 6a00 	vldr	s12, [lr]
 801240c:	edd7 aa00 	vldr	s21, [r7]
 8012410:	eee6 7a03 	vfma.f32	s15, s12, s6
 8012414:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8012418:	ed9c 6a00 	vldr	s12, [ip]
 801241c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8012420:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8012424:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8012428:	ee2a 4a00 	vmul.f32	s8, s20, s0
 801242c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8012430:	ee62 2a80 	vmul.f32	s5, s5, s0
 8012434:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012438:	ed90 0a00 	vldr	s0, [r0]
 801243c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012440:	ee36 6a00 	vadd.f32	s12, s12, s0
 8012444:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012448:	ed91 0a00 	vldr	s0, [r1]
 801244c:	ee35 5a28 	vadd.f32	s10, s10, s17
 8012450:	ee66 6a82 	vmul.f32	s13, s13, s4
 8012454:	ee22 7a87 	vmul.f32	s14, s5, s14
 8012458:	ee64 5a25 	vmul.f32	s11, s8, s11
 801245c:	eee0 4a83 	vfma.f32	s9, s1, s6
 8012460:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8012464:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8012468:	eea1 5a03 	vfma.f32	s10, s2, s6
 801246c:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012470:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012474:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012478:	ee27 7a07 	vmul.f32	s14, s14, s14
 801247c:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012480:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012484:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012488:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801248c:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8012490:	ee24 6a06 	vmul.f32	s12, s8, s12
 8012494:	ee62 4a24 	vmul.f32	s9, s4, s9
 8012498:	ee22 5a85 	vmul.f32	s10, s5, s10
 801249c:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80124a0:	eea5 7a05 	vfma.f32	s14, s10, s10
 80124a4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80124a8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80124ac:	eef1 6ac7 	vsqrt.f32	s13, s14
 80124b0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80124b4:	ee07 3a90 	vmov	s15, r3
 80124b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80124c0:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 80124c4:	b21b      	sxth	r3, r3
 80124c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80124ca:	ee07 2a90 	vmov	s15, r2
 80124ce:	ed90 4a00 	vldr	s8, [r0]
 80124d2:	edd1 4a00 	vldr	s9, [r1]
 80124d6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80124da:	edd7 7a00 	vldr	s15, [r7]
 80124de:	eee5 6a84 	vfma.f32	s13, s11, s8
 80124e2:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80124e6:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80124ea:	ee66 7a05 	vmul.f32	s15, s12, s10
 80124ee:	ee66 6a85 	vmul.f32	s13, s13, s10
 80124f2:	ee27 7a05 	vmul.f32	s14, s14, s10
 80124f6:	edc7 7a00 	vstr	s15, [r7]
 80124fa:	edc0 6a00 	vstr	s13, [r0]
 80124fe:	ed81 7a00 	vstr	s14, [r1]
 8012502:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8012506:	f47f abde 	bne.w	8011cc6 <iNemoEngine_API_Update+0x56>
 801250a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801250e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012512:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012516:	ee67 7a86 	vmul.f32	s15, s15, s12
 801251a:	2300      	movs	r3, #0
 801251c:	2200      	movs	r2, #0
 801251e:	edc4 6a07 	vstr	s13, [r4, #28]
 8012522:	ed84 7a08 	vstr	s14, [r4, #32]
 8012526:	edc4 7a06 	vstr	s15, [r4, #24]
 801252a:	603b      	str	r3, [r7, #0]
 801252c:	6003      	str	r3, [r0, #0]
 801252e:	600b      	str	r3, [r1, #0]
 8012530:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8012534:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012538:	f7ff bbc5 	b.w	8011cc6 <iNemoEngine_API_Update+0x56>
 801253c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012570 <iNemoEngine_API_Update+0x900>
 8012540:	e4da      	b.n	8011ef8 <iNemoEngine_API_Update+0x288>
 8012542:	bf00      	nop
 8012544:	f3af 8000 	nop.w
 8012548:	20000000 	.word	0x20000000
 801254c:	404ca5dc 	.word	0x404ca5dc
 8012550:	40568000 	.word	0x40568000
 8012554:	3dcccccd 	.word	0x3dcccccd
 8012558:	3a83126f 	.word	0x3a83126f
 801255c:	358637bd 	.word	0x358637bd
 8012560:	3f333333 	.word	0x3f333333
 8012564:	3727c5ac 	.word	0x3727c5ac
 8012568:	3ac49ba6 	.word	0x3ac49ba6
 801256c:	3e4ccccd 	.word	0x3e4ccccd
 8012570:	00000000 	.word	0x00000000

08012574 <MEMS_getSensorData_I16>:
 8012574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012578:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 801257c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012580:	68c5      	ldr	r5, [r0, #12]
 8012582:	4596      	cmp	lr, r2
 8012584:	fa1f f882 	uxth.w	r8, r2
 8012588:	d94d      	bls.n	8012626 <MEMS_getSensorData_I16+0xb2>
 801258a:	f10e 33ff 	add.w	r3, lr, #4294967295
 801258e:	fb04 5313 	mls	r3, r4, r3, r5
 8012592:	ebae 0c02 	sub.w	ip, lr, r2
 8012596:	f8a1 8004 	strh.w	r8, [r1, #4]
 801259a:	600b      	str	r3, [r1, #0]
 801259c:	fa5f fc8c 	uxtb.w	ip, ip
 80125a0:	4647      	mov	r7, r8
 80125a2:	f1b8 0f00 	cmp.w	r8, #0
 80125a6:	d017      	beq.n	80125d8 <MEMS_getSensorData_I16+0x64>
 80125a8:	688e      	ldr	r6, [r1, #8]
 80125aa:	6905      	ldr	r5, [r0, #16]
 80125ac:	2300      	movs	r3, #0
 80125ae:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 80125b2:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 80125b6:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80125ba:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 80125be:	f8d4 9002 	ldr.w	r9, [r4, #2]
 80125c2:	f8c1 9002 	str.w	r9, [r1, #2]
 80125c6:	3301      	adds	r3, #1
 80125c8:	88e4      	ldrh	r4, [r4, #6]
 80125ca:	80cc      	strh	r4, [r1, #6]
 80125cc:	b2d9      	uxtb	r1, r3
 80125ce:	42b9      	cmp	r1, r7
 80125d0:	460b      	mov	r3, r1
 80125d2:	d3ec      	bcc.n	80125ae <MEMS_getSensorData_I16+0x3a>
 80125d4:	45c6      	cmp	lr, r8
 80125d6:	d934      	bls.n	8012642 <MEMS_getSensorData_I16+0xce>
 80125d8:	ebae 0308 	sub.w	r3, lr, r8
 80125dc:	b29b      	uxth	r3, r3
 80125de:	8103      	strh	r3, [r0, #8]
 80125e0:	f1bc 0f00 	cmp.w	ip, #0
 80125e4:	d01d      	beq.n	8012622 <MEMS_getSensorData_I16+0xae>
 80125e6:	6903      	ldr	r3, [r0, #16]
 80125e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80125ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80125f0:	f103 000a 	add.w	r0, r3, #10
 80125f4:	fa5f fc8c 	uxtb.w	ip, ip
 80125f8:	3202      	adds	r2, #2
 80125fa:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80125fe:	3302      	adds	r3, #2
 8012600:	2400      	movs	r4, #0
 8012602:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012606:	f803 1c02 	strb.w	r1, [r3, #-2]
 801260a:	6811      	ldr	r1, [r2, #0]
 801260c:	6019      	str	r1, [r3, #0]
 801260e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012612:	8099      	strh	r1, [r3, #4]
 8012614:	3308      	adds	r3, #8
 8012616:	4283      	cmp	r3, r0
 8012618:	f802 4c02 	strb.w	r4, [r2, #-2]
 801261c:	f102 0208 	add.w	r2, r2, #8
 8012620:	d1ef      	bne.n	8012602 <MEMS_getSensorData_I16+0x8e>
 8012622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012626:	f10e 33ff 	add.w	r3, lr, #4294967295
 801262a:	fb04 5313 	mls	r3, r4, r3, r5
 801262e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012632:	600b      	str	r3, [r1, #0]
 8012634:	f1be 0f00 	cmp.w	lr, #0
 8012638:	d005      	beq.n	8012646 <MEMS_getSensorData_I16+0xd2>
 801263a:	4677      	mov	r7, lr
 801263c:	f04f 0c00 	mov.w	ip, #0
 8012640:	e7b2      	b.n	80125a8 <MEMS_getSensorData_I16+0x34>
 8012642:	2300      	movs	r3, #0
 8012644:	e7cb      	b.n	80125de <MEMS_getSensorData_I16+0x6a>
 8012646:	f8a0 e008 	strh.w	lr, [r0, #8]
 801264a:	e7ea      	b.n	8012622 <MEMS_getSensorData_I16+0xae>

0801264c <MEMS_SolveLinearEq>:
 801264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012650:	ed2d 8b0c 	vpush	{d8-d13}
 8012654:	4617      	mov	r7, r2
 8012656:	2400      	movs	r4, #0
 8012658:	b0a9      	sub	sp, #164	; 0xa4
 801265a:	2200      	movs	r2, #0
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	460d      	mov	r5, r1
 8012660:	2240      	movs	r2, #64	; 0x40
 8012662:	4621      	mov	r1, r4
 8012664:	4680      	mov	r8, r0
 8012666:	603c      	str	r4, [r7, #0]
 8012668:	607c      	str	r4, [r7, #4]
 801266a:	60bc      	str	r4, [r7, #8]
 801266c:	60fc      	str	r4, [r7, #12]
 801266e:	a808      	add	r0, sp, #32
 8012670:	461e      	mov	r6, r3
 8012672:	eeb0 8a40 	vmov.f32	s16, s0
 8012676:	e9cd 4400 	strd	r4, r4, [sp]
 801267a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801267e:	f004 ffa3 	bl	80175c8 <memset>
 8012682:	4621      	mov	r1, r4
 8012684:	a818      	add	r0, sp, #96	; 0x60
 8012686:	2240      	movs	r2, #64	; 0x40
 8012688:	f004 ff9e 	bl	80175c8 <memset>
 801268c:	edd5 2a03 	vldr	s5, [r5, #12]
 8012690:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012a24 <MEMS_SolveLinearEq+0x3d8>
 8012694:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269c:	d47e      	bmi.n	801279c <MEMS_SolveLinearEq+0x150>
 801269e:	f898 1000 	ldrb.w	r1, [r8]
 80126a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80126a6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80126aa:	4291      	cmp	r1, r2
 80126ac:	d07c      	beq.n	80127a8 <MEMS_SolveLinearEq+0x15c>
 80126ae:	3301      	adds	r3, #1
 80126b0:	1a58      	subs	r0, r3, r1
 80126b2:	fb90 f3f2 	sdiv	r3, r0, r2
 80126b6:	fb02 0313 	mls	r3, r2, r3, r0
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	bfb8      	it	lt
 80126be:	189b      	addlt	r3, r3, r2
 80126c0:	b21b      	sxth	r3, r3
 80126c2:	2900      	cmp	r1, #0
 80126c4:	f000 81d6 	beq.w	8012a74 <MEMS_SolveLinearEq+0x428>
 80126c8:	3901      	subs	r1, #1
 80126ca:	b2c9      	uxtb	r1, r1
 80126cc:	3101      	adds	r1, #1
 80126ce:	edd5 3a00 	vldr	s7, [r5]
 80126d2:	ed95 4a01 	vldr	s8, [r5, #4]
 80126d6:	edd5 4a02 	vldr	s9, [r5, #8]
 80126da:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80126de:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012a28 <MEMS_SolveLinearEq+0x3dc>
 80126e2:	4419      	add	r1, r3
 80126e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80126e8:	fb93 f4f2 	sdiv	r4, r3, r2
 80126ec:	fb02 3414 	mls	r4, r2, r4, r3
 80126f0:	b2e4      	uxtb	r4, r4
 80126f2:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80126f6:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 80126fa:	ee07 0a90 	vmov	s15, r0
 80126fe:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012706:	ee06 0a10 	vmov	s12, r0
 801270a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801270e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8012712:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012716:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801271a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801271e:	ee07 0a10 	vmov	s14, r0
 8012722:	ee36 5a63 	vsub.f32	s10, s12, s7
 8012726:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801272a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801272e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8012732:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012736:	ee33 6ac6 	vsub.f32	s12, s7, s12
 801273a:	ee74 aac7 	vsub.f32	s21, s9, s14
 801273e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012742:	ee74 7a67 	vsub.f32	s15, s8, s15
 8012746:	eee7 6a07 	vfma.f32	s13, s14, s14
 801274a:	eef4 6ac2 	vcmpe.f32	s13, s4
 801274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012752:	d531      	bpl.n	80127b8 <MEMS_SolveLinearEq+0x16c>
 8012754:	3301      	adds	r3, #1
 8012756:	4299      	cmp	r1, r3
 8012758:	d1c6      	bne.n	80126e8 <MEMS_SolveLinearEq+0x9c>
 801275a:	eef0 7a65 	vmov.f32	s15, s11
 801275e:	2101      	movs	r1, #1
 8012760:	4608      	mov	r0, r1
 8012762:	2200      	movs	r2, #0
 8012764:	e006      	b.n	8012774 <MEMS_SolveLinearEq+0x128>
 8012766:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801276a:	ac28      	add	r4, sp, #160	; 0xa0
 801276c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012770:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8012774:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012778:	3001      	adds	r0, #1
 801277a:	ac28      	add	r4, sp, #160	; 0xa0
 801277c:	b2c0      	uxtb	r0, r0
 801277e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012782:	2804      	cmp	r0, #4
 8012784:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012788:	4613      	mov	r3, r2
 801278a:	d1ec      	bne.n	8012766 <MEMS_SolveLinearEq+0x11a>
 801278c:	1c48      	adds	r0, r1, #1
 801278e:	b2c0      	uxtb	r0, r0
 8012790:	2804      	cmp	r0, #4
 8012792:	d076      	beq.n	8012882 <MEMS_SolveLinearEq+0x236>
 8012794:	460b      	mov	r3, r1
 8012796:	460a      	mov	r2, r1
 8012798:	4601      	mov	r1, r0
 801279a:	e7e4      	b.n	8012766 <MEMS_SolveLinearEq+0x11a>
 801279c:	2000      	movs	r0, #0
 801279e:	b029      	add	sp, #164	; 0xa4
 80127a0:	ecbd 8b0c 	vpop	{d8-d13}
 80127a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	fb92 f3f1 	sdiv	r3, r2, r1
 80127ae:	fb01 2313 	mls	r3, r1, r3, r2
 80127b2:	b21b      	sxth	r3, r3
 80127b4:	460a      	mov	r2, r1
 80127b6:	e784      	b.n	80126c2 <MEMS_SolveLinearEq+0x76>
 80127b8:	eef1 cae6 	vsqrt.f32	s25, s13
 80127bc:	3301      	adds	r3, #1
 80127be:	428b      	cmp	r3, r1
 80127c0:	ed9d ca00 	vldr	s24, [sp]
 80127c4:	eddd ba08 	vldr	s23, [sp, #32]
 80127c8:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 80127cc:	ed9d aa01 	vldr	s20, [sp, #4]
 80127d0:	eddd 9a02 	vldr	s19, [sp, #8]
 80127d4:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 80127d8:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 80127dc:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 80127e0:	ed9d 0a03 	vldr	s0, [sp, #12]
 80127e4:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80127e8:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 80127ec:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 80127f0:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 80127f4:	eec1 6aac 	vdiv.f32	s13, s3, s25
 80127f8:	ee3d da21 	vadd.f32	s26, s26, s3
 80127fc:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012804:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012808:	ee72 aaec 	vsub.f32	s21, s5, s25
 801280c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012810:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012814:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012818:	eeaa ca87 	vfma.f32	s24, s21, s14
 801281c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012820:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012824:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012828:	eea7 9aa7 	vfma.f32	s18, s15, s15
 801282c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012830:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012834:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012838:	ee30 6a06 	vadd.f32	s12, s0, s12
 801283c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012840:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012844:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012848:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801284c:	ed8d ca00 	vstr	s24, [sp]
 8012850:	edcd ba08 	vstr	s23, [sp, #32]
 8012854:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8012858:	ed8d aa01 	vstr	s20, [sp, #4]
 801285c:	edcd 9a02 	vstr	s19, [sp, #8]
 8012860:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012864:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012868:	ed8d 6a03 	vstr	s12, [sp, #12]
 801286c:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012870:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012874:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012878:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 801287c:	f47f af34 	bne.w	80126e8 <MEMS_SolveLinearEq+0x9c>
 8012880:	e76b      	b.n	801275a <MEMS_SolveLinearEq+0x10e>
 8012882:	2240      	movs	r2, #64	; 0x40
 8012884:	2100      	movs	r1, #0
 8012886:	a818      	add	r0, sp, #96	; 0x60
 8012888:	f004 fe9e 	bl	80175c8 <memset>
 801288c:	ab08      	add	r3, sp, #32
 801288e:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012a2c <MEMS_SolveLinearEq+0x3e0>
 8012892:	4618      	mov	r0, r3
 8012894:	aa18      	add	r2, sp, #96	; 0x60
 8012896:	2100      	movs	r1, #0
 8012898:	b24c      	sxtb	r4, r1
 801289a:	2900      	cmp	r1, #0
 801289c:	f000 80b5 	beq.w	8012a0a <MEMS_SolveLinearEq+0x3be>
 80128a0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80128a4:	eeb0 7ae7 	vabs.f32	s14, s15
 80128a8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80128ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b0:	f53f af74 	bmi.w	801279c <MEMS_SolveLinearEq+0x150>
 80128b4:	ed93 7a00 	vldr	s14, [r3]
 80128b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80128bc:	2c01      	cmp	r4, #1
 80128be:	edc2 6a00 	vstr	s13, [r2]
 80128c2:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80128c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80128ca:	f000 80b5 	beq.w	8012a38 <MEMS_SolveLinearEq+0x3ec>
 80128ce:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 80128d2:	eeb0 7ac6 	vabs.f32	s14, s12
 80128d6:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80128da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128de:	f53f af5d 	bmi.w	801279c <MEMS_SolveLinearEq+0x150>
 80128e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80128e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80128ea:	2c02      	cmp	r4, #2
 80128ec:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80128f0:	edc2 7a01 	vstr	s15, [r2, #4]
 80128f4:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 80128f8:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 80128fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012900:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012904:	f000 80a7 	beq.w	8012a56 <MEMS_SolveLinearEq+0x40a>
 8012908:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 801290c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012910:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012918:	f53f af40 	bmi.w	801279c <MEMS_SolveLinearEq+0x150>
 801291c:	edd3 5a02 	vldr	s11, [r3, #8]
 8012920:	ed90 6a00 	vldr	s12, [r0]
 8012924:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012928:	eec7 5a24 	vdiv.f32	s11, s14, s9
 801292c:	edc2 5a02 	vstr	s11, [r2, #8]
 8012930:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012934:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012938:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801293c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012940:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012944:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012948:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	f77f af24 	ble.w	801279c <MEMS_SolveLinearEq+0x150>
 8012954:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012958:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801295c:	ed82 7a03 	vstr	s14, [r2, #12]
 8012960:	3101      	adds	r1, #1
 8012962:	2904      	cmp	r1, #4
 8012964:	f103 0310 	add.w	r3, r3, #16
 8012968:	f102 0210 	add.w	r2, r2, #16
 801296c:	f100 0014 	add.w	r0, r0, #20
 8012970:	d192      	bne.n	8012898 <MEMS_SolveLinearEq+0x24c>
 8012972:	466a      	mov	r2, sp
 8012974:	4639      	mov	r1, r7
 8012976:	a818      	add	r0, sp, #96	; 0x60
 8012978:	f7f9 f9f2 	bl	800bd60 <llEvaluate.constprop.0>
 801297c:	4b2c      	ldr	r3, [pc, #176]	; (8012a30 <MEMS_SolveLinearEq+0x3e4>)
 801297e:	6033      	str	r3, [r6, #0]
 8012980:	f10d 0910 	add.w	r9, sp, #16
 8012984:	46e8      	mov	r8, sp
 8012986:	f10d 0b0c 	add.w	fp, sp, #12
 801298a:	2400      	movs	r4, #0
 801298c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012990:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012994:	e9cd 4400 	strd	r4, r4, [sp]
 8012998:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801299c:	466a      	mov	r2, sp
 801299e:	f848 ab04 	str.w	sl, [r8], #4
 80129a2:	a904      	add	r1, sp, #16
 80129a4:	a818      	add	r0, sp, #96	; 0x60
 80129a6:	f7f9 f9db 	bl	800bd60 <llEvaluate.constprop.0>
 80129aa:	ecf9 7a01 	vldmia	r9!, {s15}
 80129ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b6:	dd23      	ble.n	8012a00 <MEMS_SolveLinearEq+0x3b4>
 80129b8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80129bc:	edd6 7a00 	vldr	s15, [r6]
 80129c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c8:	bfb8      	it	lt
 80129ca:	eef0 7a47 	vmovlt.f32	s15, s14
 80129ce:	45c3      	cmp	fp, r8
 80129d0:	edc6 7a00 	vstr	s15, [r6]
 80129d4:	d1de      	bne.n	8012994 <MEMS_SolveLinearEq+0x348>
 80129d6:	edd5 7a03 	vldr	s15, [r5, #12]
 80129da:	ed97 7a03 	vldr	s14, [r7, #12]
 80129de:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80129e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129e6:	2001      	movs	r0, #1
 80129e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f0:	bf48      	it	mi
 80129f2:	edc7 7a03 	vstrmi	s15, [r7, #12]
 80129f6:	b029      	add	sp, #164	; 0xa4
 80129f8:	ecbd 8b0c 	vpop	{d8-d13}
 80129fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a00:	45c3      	cmp	fp, r8
 8012a02:	ed86 0a00 	vstr	s0, [r6]
 8012a06:	d1c5      	bne.n	8012994 <MEMS_SolveLinearEq+0x348>
 8012a08:	e7e5      	b.n	80129d6 <MEMS_SolveLinearEq+0x38a>
 8012a0a:	edd0 7a00 	vldr	s15, [r0]
 8012a0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a16:	f77f aec1 	ble.w	801279c <MEMS_SolveLinearEq+0x150>
 8012a1a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012a1e:	ed82 7a00 	vstr	s14, [r2]
 8012a22:	e79d      	b.n	8012960 <MEMS_SolveLinearEq+0x314>
 8012a24:	3dcccccd 	.word	0x3dcccccd
 8012a28:	2b8cbccb 	.word	0x2b8cbccb
 8012a2c:	358637bd 	.word	0x358637bd
 8012a30:	3dcccccd 	.word	0x3dcccccd
 8012a34:	00000000 	.word	0x00000000
 8012a38:	ed90 7a00 	vldr	s14, [r0]
 8012a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a44:	f77f aeaa 	ble.w	801279c <MEMS_SolveLinearEq+0x150>
 8012a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a4c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012a50:	ed82 7a01 	vstr	s14, [r2, #4]
 8012a54:	e784      	b.n	8012960 <MEMS_SolveLinearEq+0x314>
 8012a56:	edd0 7a00 	vldr	s15, [r0]
 8012a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a62:	f77f ae9b 	ble.w	801279c <MEMS_SolveLinearEq+0x150>
 8012a66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a6a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012a6e:	ed82 7a02 	vstr	s14, [r2, #8]
 8012a72:	e775      	b.n	8012960 <MEMS_SolveLinearEq+0x314>
 8012a74:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012a34 <MEMS_SolveLinearEq+0x3e8>
 8012a78:	e671      	b.n	801275e <MEMS_SolveLinearEq+0x112>
 8012a7a:	bf00      	nop

08012a7c <MEMS_EIG3>:
 8012a7c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012a80:	ed90 7a01 	vldr	s14, [r0, #4]
 8012a84:	edd0 4a04 	vldr	s9, [r0, #16]
 8012a88:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012bd8 <MEMS_EIG3+0x15c>
 8012a8c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012a90:	b510      	push	{r4, lr}
 8012a92:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a96:	460c      	mov	r4, r1
 8012a98:	ed2d 8b04 	vpush	{d8-d9}
 8012a9c:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012aa0:	b08a      	sub	sp, #40	; 0x28
 8012aa2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aaa:	d509      	bpl.n	8012ac0 <MEMS_EIG3+0x44>
 8012aac:	6803      	ldr	r3, [r0, #0]
 8012aae:	600b      	str	r3, [r1, #0]
 8012ab0:	68c3      	ldr	r3, [r0, #12]
 8012ab2:	604b      	str	r3, [r1, #4]
 8012ab4:	6943      	ldr	r3, [r0, #20]
 8012ab6:	608b      	str	r3, [r1, #8]
 8012ab8:	b00a      	add	sp, #40	; 0x28
 8012aba:	ecbd 8b04 	vpop	{d8-d9}
 8012abe:	bd10      	pop	{r4, pc}
 8012ac0:	ed90 4a00 	vldr	s8, [r0]
 8012ac4:	edd0 5a03 	vldr	s11, [r0, #12]
 8012ac8:	edd0 2a05 	vldr	s5, [r0, #20]
 8012acc:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012bdc <MEMS_EIG3+0x160>
 8012ad0:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012be0 <MEMS_EIG3+0x164>
 8012ad4:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012ad8:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012adc:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012ae0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012ae4:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012ae8:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012aec:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012af0:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012af4:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012af8:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012afc:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012b00:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012b04:	eef0 7a45 	vmov.f32	s15, s10
 8012b08:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012b0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012b10:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012b14:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012b18:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012b1c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012b20:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012b24:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012b28:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012b2c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012b30:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012b34:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012b38:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012b3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b40:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012b44:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012b48:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012b4c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012b50:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012b54:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	d909      	bls.n	8012b72 <MEMS_EIG3+0xf6>
 8012b5e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	db22      	blt.n	8012bae <MEMS_EIG3+0x132>
 8012b68:	eeb0 9a40 	vmov.f32	s18, s0
 8012b6c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012be4 <MEMS_EIG3+0x168>
 8012b70:	e003      	b.n	8012b7a <MEMS_EIG3+0xfe>
 8012b72:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012be8 <MEMS_EIG3+0x16c>
 8012b76:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012b7a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012b7e:	eef0 7a48 	vmov.f32	s15, s16
 8012b82:	eeb0 7a48 	vmov.f32	s14, s16
 8012b86:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012b8a:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012b8e:	edc4 7a00 	vstr	s15, [r4]
 8012b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b96:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012b9a:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012b9e:	ed84 7a02 	vstr	s14, [r4, #8]
 8012ba2:	edc4 7a01 	vstr	s15, [r4, #4]
 8012ba6:	b00a      	add	sp, #40	; 0x28
 8012ba8:	ecbd 8b04 	vpop	{d8-d9}
 8012bac:	bd10      	pop	{r4, pc}
 8012bae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012bb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bb6:	f002 ffc5 	bl	8015b44 <acosf>
 8012bba:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012bbe:	eeb0 0a69 	vmov.f32	s0, s19
 8012bc2:	f002 feb9 	bl	8015938 <cosf>
 8012bc6:	eeb0 9a40 	vmov.f32	s18, s0
 8012bca:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012bec <MEMS_EIG3+0x170>
 8012bce:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012bd2:	f002 feb1 	bl	8015938 <cosf>
 8012bd6:	e7d0      	b.n	8012b7a <MEMS_EIG3+0xfe>
 8012bd8:	358637bd 	.word	0x358637bd
 8012bdc:	3eaaaaab 	.word	0x3eaaaaab
 8012be0:	3e2aaaab 	.word	0x3e2aaaab
 8012be4:	bf000001 	.word	0xbf000001
 8012be8:	3effffff 	.word	0x3effffff
 8012bec:	40060a92 	.word	0x40060a92

08012bf0 <MEMS_runMagCal>:
 8012bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf4:	ed2d 8b0a 	vpush	{d8-d12}
 8012bf8:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012bfc:	2282      	movs	r2, #130	; 0x82
 8012bfe:	ab36      	add	r3, sp, #216	; 0xd8
 8012c00:	460c      	mov	r4, r1
 8012c02:	9105      	str	r1, [sp, #20]
 8012c04:	4683      	mov	fp, r0
 8012c06:	4608      	mov	r0, r1
 8012c08:	a917      	add	r1, sp, #92	; 0x5c
 8012c0a:	9319      	str	r3, [sp, #100]	; 0x64
 8012c0c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012c10:	f7ff fcb0 	bl	8012574 <MEMS_getSensorData_I16>
 8012c14:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012c18:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012c1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c20:	f108 31ff 	add.w	r1, r8, #4294967295
 8012c24:	9106      	str	r1, [sp, #24]
 8012c26:	fb01 2103 	mla	r1, r1, r3, r2
 8012c2a:	9108      	str	r1, [sp, #32]
 8012c2c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012c30:	f1b8 0f00 	cmp.w	r8, #0
 8012c34:	f000 8417 	beq.w	8013466 <MEMS_runMagCal+0x876>
 8012c38:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c40:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012c44:	fb02 f203 	mul.w	r2, r2, r3
 8012c48:	31a0      	adds	r1, #160	; 0xa0
 8012c4a:	4291      	cmp	r1, r2
 8012c4c:	f080 8411 	bcs.w	8013472 <MEMS_runMagCal+0x882>
 8012c50:	3b00      	subs	r3, #0
 8012c52:	bf18      	it	ne
 8012c54:	2301      	movne	r3, #1
 8012c56:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012c60:	f8cb 200c 	str.w	r2, [fp, #12]
 8012c64:	2300      	movs	r3, #0
 8012c66:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012c6a:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012c6e:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012c72:	22ff      	movs	r2, #255	; 0xff
 8012c74:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012c78:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012c7c:	4cd5      	ldr	r4, [pc, #852]	; (8012fd4 <MEMS_runMagCal+0x3e4>)
 8012c7e:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012fe0 <MEMS_runMagCal+0x3f0>
 8012c82:	9b05      	ldr	r3, [sp, #20]
 8012c84:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012c88:	edd3 5a01 	vldr	s11, [r3, #4]
 8012c8c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012c90:	4652      	mov	r2, sl
 8012c92:	2a03      	cmp	r2, #3
 8012c94:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012c98:	bf28      	it	cs
 8012c9a:	2203      	movcs	r2, #3
 8012c9c:	2100      	movs	r1, #0
 8012c9e:	9207      	str	r2, [sp, #28]
 8012ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ca4:	464b      	mov	r3, r9
 8012ca6:	9402      	str	r4, [sp, #8]
 8012ca8:	4627      	mov	r7, r4
 8012caa:	9503      	str	r5, [sp, #12]
 8012cac:	462e      	mov	r6, r5
 8012cae:	460a      	mov	r2, r1
 8012cb0:	9404      	str	r4, [sp, #16]
 8012cb2:	7818      	ldrb	r0, [r3, #0]
 8012cb4:	3201      	adds	r2, #1
 8012cb6:	b292      	uxth	r2, r2
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d04b      	beq.n	8012d54 <MEMS_runMagCal+0x164>
 8012cbc:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012cc0:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012cc4:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012cc8:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012ccc:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012cd0:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012cd4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012cd8:	9c02      	ldr	r4, [sp, #8]
 8012cda:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012cde:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012ce2:	ee07 ea90 	vmov	s15, lr
 8012ce6:	ee07 ca10 	vmov	s14, ip
 8012cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012cf2:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012cf6:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012cfa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012cfe:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012d02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012d06:	4574      	cmp	r4, lr
 8012d08:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012d0c:	bfb8      	it	lt
 8012d0e:	4674      	movlt	r4, lr
 8012d10:	9402      	str	r4, [sp, #8]
 8012d12:	ee07 0a10 	vmov	s14, r0
 8012d16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d1a:	9c03      	ldr	r4, [sp, #12]
 8012d1c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012d20:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012d24:	4574      	cmp	r4, lr
 8012d26:	bfa8      	it	ge
 8012d28:	4674      	movge	r4, lr
 8012d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d2e:	4567      	cmp	r7, ip
 8012d30:	9403      	str	r4, [sp, #12]
 8012d32:	9c04      	ldr	r4, [sp, #16]
 8012d34:	bfb8      	it	lt
 8012d36:	4667      	movlt	r7, ip
 8012d38:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012d3c:	4566      	cmp	r6, ip
 8012d3e:	bfa8      	it	ge
 8012d40:	4666      	movge	r6, ip
 8012d42:	4284      	cmp	r4, r0
 8012d44:	bfb8      	it	lt
 8012d46:	4604      	movlt	r4, r0
 8012d48:	3101      	adds	r1, #1
 8012d4a:	4285      	cmp	r5, r0
 8012d4c:	b249      	sxtb	r1, r1
 8012d4e:	9404      	str	r4, [sp, #16]
 8012d50:	bfa8      	it	ge
 8012d52:	4605      	movge	r5, r0
 8012d54:	9807      	ldr	r0, [sp, #28]
 8012d56:	4282      	cmp	r2, r0
 8012d58:	f103 0308 	add.w	r3, r3, #8
 8012d5c:	d9a9      	bls.n	8012cb2 <MEMS_runMagCal+0xc2>
 8012d5e:	4590      	cmp	r8, r2
 8012d60:	9c04      	ldr	r4, [sp, #16]
 8012d62:	f240 8767 	bls.w	8013c34 <MEMS_runMagCal+0x1044>
 8012d66:	ebaa 0a02 	sub.w	sl, sl, r2
 8012d6a:	fa12 fa8a 	uxtah	sl, r2, sl
 8012d6e:	f109 0308 	add.w	r3, r9, #8
 8012d72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d76:	9307      	str	r3, [sp, #28]
 8012d78:	2300      	movs	r3, #0
 8012d7a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012d7e:	9304      	str	r3, [sp, #16]
 8012d80:	7813      	ldrb	r3, [r2, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f000 8096 	beq.w	8012eb4 <MEMS_runMagCal+0x2c4>
 8012d88:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012d8c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012d90:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012d94:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012d98:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012d9c:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012da0:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012da4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012da8:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012dac:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012db0:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012db4:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012db8:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012dbc:	ebae 0808 	sub.w	r8, lr, r8
 8012dc0:	eba0 000a 	sub.w	r0, r0, sl
 8012dc4:	ee07 ca10 	vmov	s14, ip
 8012dc8:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012dcc:	ee07 0a90 	vmov	s15, r0
 8012dd0:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012dd4:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012dd8:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012ddc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012de0:	eba3 030a 	sub.w	r3, r3, sl
 8012de4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dec:	ee06 ea90 	vmov	s13, lr
 8012df0:	ebac 0909 	sub.w	r9, ip, r9
 8012df4:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012df8:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012dfc:	eef0 7ae7 	vabs.f32	s15, s15
 8012e00:	ee06 9a90 	vmov	s13, r9
 8012e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e10:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012e14:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012e18:	eef0 6ae6 	vabs.f32	s13, s13
 8012e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e20:	eba0 0808 	sub.w	r8, r0, r8
 8012e24:	ee06 0a90 	vmov	s13, r0
 8012e28:	eba3 0309 	sub.w	r3, r3, r9
 8012e2c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012e30:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012e34:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012e38:	9b02      	ldr	r3, [sp, #8]
 8012e3a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8012e3e:	4577      	cmp	r7, lr
 8012e40:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012e44:	ee06 8a90 	vmov	s13, r8
 8012e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e4c:	bfb8      	it	lt
 8012e4e:	4677      	movlt	r7, lr
 8012e50:	4576      	cmp	r6, lr
 8012e52:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012e56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e5a:	bfa8      	it	ge
 8012e5c:	4676      	movge	r6, lr
 8012e5e:	4563      	cmp	r3, ip
 8012e60:	bfb8      	it	lt
 8012e62:	4663      	movlt	r3, ip
 8012e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e68:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012e6c:	9302      	str	r3, [sp, #8]
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	eef0 6ae6 	vabs.f32	s13, s13
 8012e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012e78:	4563      	cmp	r3, ip
 8012e7a:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012e7e:	bfa8      	it	ge
 8012e80:	4663      	movge	r3, ip
 8012e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e86:	4284      	cmp	r4, r0
 8012e88:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012e8c:	bfb8      	it	lt
 8012e8e:	4604      	movlt	r4, r0
 8012e90:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012e94:	4285      	cmp	r5, r0
 8012e96:	bfa8      	it	ge
 8012e98:	4605      	movge	r5, r0
 8012e9a:	9303      	str	r3, [sp, #12]
 8012e9c:	ee17 0a90 	vmov	r0, s15
 8012ea0:	9b04      	ldr	r3, [sp, #16]
 8012ea2:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012ea6:	4283      	cmp	r3, r0
 8012ea8:	f101 0101 	add.w	r1, r1, #1
 8012eac:	bf38      	it	cc
 8012eae:	4603      	movcc	r3, r0
 8012eb0:	b249      	sxtb	r1, r1
 8012eb2:	9304      	str	r3, [sp, #16]
 8012eb4:	9b07      	ldr	r3, [sp, #28]
 8012eb6:	3208      	adds	r2, #8
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	f47f af61 	bne.w	8012d80 <MEMS_runMagCal+0x190>
 8012ebe:	2900      	cmp	r1, #0
 8012ec0:	f000 86b6 	beq.w	8013c30 <MEMS_runMagCal+0x1040>
 8012ec4:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012ec8:	f280 82df 	bge.w	801348a <MEMS_runMagCal+0x89a>
 8012ecc:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012ed0:	f2c0 82db 	blt.w	801348a <MEMS_runMagCal+0x89a>
 8012ed4:	9b02      	ldr	r3, [sp, #8]
 8012ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012eda:	f280 82d6 	bge.w	801348a <MEMS_runMagCal+0x89a>
 8012ede:	9a03      	ldr	r2, [sp, #12]
 8012ee0:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012ee4:	f2c0 82d1 	blt.w	801348a <MEMS_runMagCal+0x89a>
 8012ee8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8012eec:	f280 82cd 	bge.w	801348a <MEMS_runMagCal+0x89a>
 8012ef0:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012ef4:	f2c0 82c9 	blt.w	801348a <MEMS_runMagCal+0x89a>
 8012ef8:	ee07 1a90 	vmov	s15, r1
 8012efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012f04:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012f08:	1bbe      	subs	r6, r7, r6
 8012f0a:	1a9f      	subs	r7, r3, r2
 8012f0c:	42be      	cmp	r6, r7
 8012f0e:	4633      	mov	r3, r6
 8012f10:	eba4 0405 	sub.w	r4, r4, r5
 8012f14:	bfb8      	it	lt
 8012f16:	463b      	movlt	r3, r7
 8012f18:	42a3      	cmp	r3, r4
 8012f1a:	bfb8      	it	lt
 8012f1c:	4623      	movlt	r3, r4
 8012f1e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8012f22:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012f26:	ee07 3a10 	vmov	s14, r3
 8012f2a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012fd8 <MEMS_runMagCal+0x3e8>
 8012f2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f36:	ee25 0a80 	vmul.f32	s0, s11, s0
 8012f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f42:	f100 82a2 	bmi.w	801348a <MEMS_runMagCal+0x89a>
 8012f46:	eddd 7a04 	vldr	s15, [sp, #16]
 8012f4a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8012fdc <MEMS_runMagCal+0x3ec>
 8012f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f52:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012f56:	eef4 5ac6 	vcmpe.f32	s11, s12
 8012f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5e:	f300 8294 	bgt.w	801348a <MEMS_runMagCal+0x89a>
 8012f62:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012f66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012f6a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f72:	f301 81f8 	bgt.w	8014366 <MEMS_runMagCal+0x1776>
 8012f76:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f86:	f340 8552 	ble.w	8013a2e <MEMS_runMagCal+0xe3e>
 8012f8a:	ee07 6a90 	vmov	s15, r6
 8012f8e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9e:	f340 8546 	ble.w	8013a2e <MEMS_runMagCal+0xe3e>
 8012fa2:	ee07 7a90 	vmov	s15, r7
 8012fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012faa:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb2:	f140 853c 	bpl.w	8013a2e <MEMS_runMagCal+0xe3e>
 8012fb6:	ee07 4a90 	vmov	s15, r4
 8012fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc8:	9303      	str	r3, [sp, #12]
 8012fca:	bf48      	it	mi
 8012fcc:	2301      	movmi	r3, #1
 8012fce:	9307      	str	r3, [sp, #28]
 8012fd0:	f000 bd30 	b.w	8013a34 <MEMS_runMagCal+0xe44>
 8012fd4:	ffff8000 	.word	0xffff8000
 8012fd8:	43020000 	.word	0x43020000
 8012fdc:	447a0000 	.word	0x447a0000
 8012fe0:	00000000 	.word	0x00000000
 8012fe4:	41f00001 	.word	0x41f00001
 8012fe8:	400ccccd 	.word	0x400ccccd
 8012fec:	3dcccccd 	.word	0x3dcccccd
 8012ff0:	423c0000 	.word	0x423c0000
 8012ff4:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012fe0 <MEMS_runMagCal+0x3f0>
 8012ff8:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012fe4 <MEMS_runMagCal+0x3f4>
 8012ffc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013000:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013008:	dc10      	bgt.n	801302c <MEMS_runMagCal+0x43c>
 801300a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012fe8 <MEMS_runMagCal+0x3f8>
 801300e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013016:	dc09      	bgt.n	801302c <MEMS_runMagCal+0x43c>
 8013018:	ed94 9a03 	vldr	s18, [r4, #12]
 801301c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8012fec <MEMS_runMagCal+0x3fc>
 8013020:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013028:	f201 8527 	bhi.w	8014a7a <MEMS_runMagCal+0x1e8a>
 801302c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012ff0 <MEMS_runMagCal+0x400>
 8013030:	edd4 6a03 	vldr	s13, [r4, #12]
 8013034:	ed94 5a00 	vldr	s10, [r4]
 8013038:	edd4 5a01 	vldr	s11, [r4, #4]
 801303c:	ed94 6a02 	vldr	s12, [r4, #8]
 8013040:	edc4 7a06 	vstr	s15, [r4, #24]
 8013044:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013048:	ad2e      	add	r5, sp, #184	; 0xb8
 801304a:	2300      	movs	r3, #0
 801304c:	e9c5 3300 	strd	r3, r3, [r5]
 8013050:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8013054:	60ab      	str	r3, [r5, #8]
 8013056:	61ab      	str	r3, [r5, #24]
 8013058:	4be7      	ldr	r3, [pc, #924]	; (80133f8 <MEMS_runMagCal+0x808>)
 801305a:	9311      	str	r3, [sp, #68]	; 0x44
 801305c:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8013060:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8013064:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8013068:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801306c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013070:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8013074:	eef0 6a67 	vmov.f32	s13, s15
 8013078:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801307c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013080:	ee39 9a46 	vsub.f32	s18, s18, s12
 8013084:	eddf 6add 	vldr	s13, [pc, #884]	; 80133fc <MEMS_runMagCal+0x80c>
 8013088:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013400 <MEMS_runMagCal+0x810>
 801308c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013090:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013094:	eef0 6ae6 	vabs.f32	s13, s13
 8013098:	ee77 7a67 	vsub.f32	s15, s14, s15
 801309c:	eef4 6ac6 	vcmpe.f32	s13, s12
 80130a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a4:	eef0 7ae7 	vabs.f32	s15, s15
 80130a8:	f101 84dd 	bmi.w	8014a66 <MEMS_runMagCal+0x1e76>
 80130ac:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8013404 <MEMS_runMagCal+0x814>
 80130b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b8:	f281 8438 	bge.w	801492c <MEMS_runMagCal+0x1d3c>
 80130bc:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8013408 <MEMS_runMagCal+0x818>
 80130c0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80130c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c8:	f101 8430 	bmi.w	801492c <MEMS_runMagCal+0x1d3c>
 80130cc:	f002 fc74 	bl	80159b8 <roundf>
 80130d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80130d4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80130d8:	ee17 3a90 	vmov	r3, s15
 80130dc:	eeb0 0a69 	vmov.f32	s0, s19
 80130e0:	f8a9 3000 	strh.w	r3, [r9]
 80130e4:	f002 fc68 	bl	80159b8 <roundf>
 80130e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80130ec:	eeb0 0a4a 	vmov.f32	s0, s20
 80130f0:	ee17 3a90 	vmov	r3, s15
 80130f4:	f8a9 3002 	strh.w	r3, [r9, #2]
 80130f8:	f002 fc5e 	bl	80159b8 <roundf>
 80130fc:	eddd 7a08 	vldr	s15, [sp, #32]
 8013100:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8013104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013108:	ee16 3a90 	vmov	r3, s13
 801310c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801340c <MEMS_runMagCal+0x81c>
 8013110:	f8a9 3004 	strh.w	r3, [r9, #4]
 8013114:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013118:	f002 fc4e 	bl	80159b8 <roundf>
 801311c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013120:	ae0f      	add	r6, sp, #60	; 0x3c
 8013122:	ed8b 0a01 	vstr	s0, [fp, #4]
 8013126:	ab10      	add	r3, sp, #64	; 0x40
 8013128:	ee1c 0a10 	vmov	r0, s24
 801312c:	eeb0 0a48 	vmov.f32	s0, s16
 8013130:	4649      	mov	r1, r9
 8013132:	9600      	str	r6, [sp, #0]
 8013134:	aa2d      	add	r2, sp, #180	; 0xb4
 8013136:	f7f8 ff33 	bl	800bfa0 <getMagStats.constprop.0>
 801313a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801313e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8013410 <MEMS_runMagCal+0x820>
 8013142:	461f      	mov	r7, r3
 8013144:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	ee07 3a90 	vmov	s15, r3
 801314e:	ee07 0a10 	vmov	s14, r0
 8013152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801315a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013166:	dc0f      	bgt.n	8013188 <MEMS_runMagCal+0x598>
 8013168:	ed96 7a00 	vldr	s14, [r6]
 801316c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	bfc3      	ittte	gt
 801317a:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 801317e:	fab3 f383 	clzgt	r3, r3
 8013182:	095b      	lsrgt	r3, r3, #5
 8013184:	2301      	movle	r3, #1
 8013186:	9303      	str	r3, [sp, #12]
 8013188:	ed96 0a00 	vldr	s0, [r6]
 801318c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013190:	9620      	str	r6, [sp, #128]	; 0x80
 8013192:	ee28 0a80 	vmul.f32	s0, s17, s0
 8013196:	ee80 0a09 	vdiv.f32	s0, s0, s18
 801319a:	f002 fc0d 	bl	80159b8 <roundf>
 801319e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80131a2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80131a6:	ee17 3a10 	vmov	r3, s14
 80131aa:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80131ae:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80131b2:	f002 fc01 	bl	80159b8 <roundf>
 80131b6:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8013414 <MEMS_runMagCal+0x824>
 80131ba:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80131be:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80131c2:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 80131c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80131ca:	f8d9 0000 	ldr.w	r0, [r9]
 80131ce:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 80131d2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80131da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80131de:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80131e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80131e6:	ee16 2a90 	vmov	r2, s13
 80131ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131ee:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 80131f2:	f1b8 0f01 	cmp.w	r8, #1
 80131f6:	fa1f fc82 	uxth.w	ip, r2
 80131fa:	bf08      	it	eq
 80131fc:	23ff      	moveq	r3, #255	; 0xff
 80131fe:	ee17 2a10 	vmov	r2, s14
 8013202:	ee17 1a90 	vmov	r1, s15
 8013206:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801320a:	ee16 0a10 	vmov	r0, s12
 801320e:	bf08      	it	eq
 8013210:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 801321a:	b292      	uxth	r2, r2
 801321c:	b289      	uxth	r1, r1
 801321e:	2000      	movs	r0, #0
 8013220:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8013224:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013228:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801322c:	f88b 0000 	strb.w	r0, [fp]
 8013230:	2b00      	cmp	r3, #0
 8013232:	f000 8118 	beq.w	8013466 <MEMS_runMagCal+0x876>
 8013236:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801323a:	f88b 0001 	strb.w	r0, [fp, #1]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f041 80fd 	bne.w	801443e <MEMS_runMagCal+0x184e>
 8013244:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013248:	ad0e      	add	r5, sp, #56	; 0x38
 801324a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 801324e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013252:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8013256:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 801325a:	f8cb 6008 	str.w	r6, [fp, #8]
 801325e:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8013262:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8013266:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013418 <MEMS_runMagCal+0x828>
 801326a:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 801326e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013272:	fb00 f404 	mul.w	r4, r0, r4
 8013276:	ee05 4a90 	vmov	s11, r4
 801327a:	fb00 f406 	mul.w	r4, r0, r6
 801327e:	fb00 f00e 	mul.w	r0, r0, lr
 8013282:	ee06 0a10 	vmov	s12, r0
 8013286:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 801328a:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 801328e:	ee03 0a90 	vmov	s7, r0
 8013292:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8013296:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 801329a:	ee05 4a10 	vmov	s10, r4
 801329e:	ee04 0a10 	vmov	s8, r0
 80132a2:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 80132a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80132aa:	ee04 0a90 	vmov	s9, r0
 80132ae:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80132b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80132b6:	f8dc 0000 	ldr.w	r0, [ip]
 80132ba:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 80132be:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80132c2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80132c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80132ca:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80132ce:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80132d2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80132d6:	2001      	movs	r0, #1
 80132d8:	24ff      	movs	r4, #255	; 0xff
 80132da:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 80132de:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 80132e2:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80132e6:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 80132ea:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 80132ee:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 80132f2:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 80132f6:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 80132fa:	f88b 4012 	strb.w	r4, [fp, #18]
 80132fe:	2f00      	cmp	r7, #0
 8013300:	f001 82c8 	beq.w	8014894 <MEMS_runMagCal+0x1ca4>
 8013304:	9b05      	ldr	r3, [sp, #20]
 8013306:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8013424 <MEMS_runMagCal+0x834>
 801330a:	ed93 0a01 	vldr	s0, [r3, #4]
 801330e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8013312:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013316:	2200      	movs	r2, #0
 8013318:	ee20 3a03 	vmul.f32	s6, s0, s6
 801331c:	f04f 34ff 	mov.w	r4, #4294967295
 8013320:	4616      	mov	r6, r2
 8013322:	fb96 f3f0 	sdiv	r3, r6, r0
 8013326:	fb00 6313 	mls	r3, r0, r3, r6
 801332a:	b2db      	uxtb	r3, r3
 801332c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013330:	1c66      	adds	r6, r4, #1
 8013332:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013336:	ee07 4a90 	vmov	s15, r4
 801333a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801333e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013342:	ee06 4a90 	vmov	s13, r4
 8013346:	fb96 f4f1 	sdiv	r4, r6, r1
 801334a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801334e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013352:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013356:	ee07 3a10 	vmov	s14, r3
 801335a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801335e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013362:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013366:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801336a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801336e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013372:	fb01 6414 	mls	r4, r1, r4, r6
 8013376:	b264      	sxtb	r4, r4
 8013378:	ee37 7a64 	vsub.f32	s14, s14, s9
 801337c:	3201      	adds	r2, #1
 801337e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013382:	b212      	sxth	r2, r2
 8013384:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013388:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801338c:	42ba      	cmp	r2, r7
 801338e:	4616      	mov	r6, r2
 8013390:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013394:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801339c:	ee17 ca90 	vmov	ip, s15
 80133a0:	f8a3 c014 	strh.w	ip, [r3, #20]
 80133a4:	dbbd      	blt.n	8013322 <MEMS_runMagCal+0x732>
 80133a6:	f88b 4012 	strb.w	r4, [fp, #18]
 80133aa:	428f      	cmp	r7, r1
 80133ac:	bf28      	it	cs
 80133ae:	460f      	movcs	r7, r1
 80133b0:	f88b 7010 	strb.w	r7, [fp, #16]
 80133b4:	ee1c 0a10 	vmov	r0, s24
 80133b8:	9500      	str	r5, [sp, #0]
 80133ba:	4642      	mov	r2, r8
 80133bc:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80133c0:	ab0d      	add	r3, sp, #52	; 0x34
 80133c2:	f7f8 fded 	bl	800bfa0 <getMagStats.constprop.0>
 80133c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801341c <MEMS_runMagCal+0x82c>
 80133ca:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80133ce:	edd5 6a00 	vldr	s13, [r5]
 80133d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80133da:	eef0 7ae7 	vabs.f32	s15, s15
 80133de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e6:	d525      	bpl.n	8013434 <MEMS_runMagCal+0x844>
 80133e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80133ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f0:	f101 8257 	bmi.w	80148a2 <MEMS_runMagCal+0x1cb2>
 80133f4:	e01e      	b.n	8013434 <MEMS_runMagCal+0x844>
 80133f6:	bf00      	nop
 80133f8:	41f00001 	.word	0x41f00001
 80133fc:	3f8ccccd 	.word	0x3f8ccccd
 8013400:	3f266666 	.word	0x3f266666
 8013404:	3eb33333 	.word	0x3eb33333
 8013408:	3f19999a 	.word	0x3f19999a
 801340c:	3a83126f 	.word	0x3a83126f
 8013410:	3c23d70a 	.word	0x3c23d70a
 8013414:	447a0000 	.word	0x447a0000
 8013418:	358637bd 	.word	0x358637bd
 801341c:	423c0000 	.word	0x423c0000
 8013420:	4423d666 	.word	0x4423d666
 8013424:	42c80000 	.word	0x42c80000
 8013428:	427c0000 	.word	0x427c0000
 801342c:	3f666666 	.word	0x3f666666
 8013430:	3eaaaaab 	.word	0x3eaaaaab
 8013434:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013438:	eef4 7ac7 	vcmpe.f32	s15, s14
 801343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013440:	d507      	bpl.n	8013452 <MEMS_runMagCal+0x862>
 8013442:	eef4 6a47 	vcmp.f32	s13, s14
 8013446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344a:	9b03      	ldr	r3, [sp, #12]
 801344c:	bf48      	it	mi
 801344e:	2302      	movmi	r3, #2
 8013450:	9303      	str	r3, [sp, #12]
 8013452:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013456:	9a03      	ldr	r2, [sp, #12]
 8013458:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 801345c:	2bc8      	cmp	r3, #200	; 0xc8
 801345e:	d902      	bls.n	8013466 <MEMS_runMagCal+0x876>
 8013460:	2302      	movs	r3, #2
 8013462:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8013466:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 801346a:	ecbd 8b0a 	vpop	{d8-d12}
 801346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013472:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8013476:	4291      	cmp	r1, r2
 8013478:	f4ff abea 	bcc.w	8012c50 <MEMS_runMagCal+0x60>
 801347c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013480:	2b00      	cmp	r3, #0
 8013482:	f47f abf9 	bne.w	8012c78 <MEMS_runMagCal+0x88>
 8013486:	f7ff bbed 	b.w	8012c64 <MEMS_runMagCal+0x74>
 801348a:	2702      	movs	r7, #2
 801348c:	2300      	movs	r3, #0
 801348e:	9307      	str	r3, [sp, #28]
 8013490:	9303      	str	r3, [sp, #12]
 8013492:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8013420 <MEMS_runMagCal+0x830>
 8013496:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349e:	f140 8260 	bpl.w	8013962 <MEMS_runMagCal+0xd72>
 80134a2:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8013424 <MEMS_runMagCal+0x834>
 80134a6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80134aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80134ae:	2b01      	cmp	r3, #1
 80134b0:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80134b4:	d911      	bls.n	80134da <MEMS_runMagCal+0x8ea>
 80134b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80134ba:	ee17 3a90 	vmov	r3, s15
 80134be:	b29b      	uxth	r3, r3
 80134c0:	2bc7      	cmp	r3, #199	; 0xc7
 80134c2:	f201 8359 	bhi.w	8014b78 <MEMS_runMagCal+0x1f88>
 80134c6:	2300      	movs	r3, #0
 80134c8:	22ff      	movs	r2, #255	; 0xff
 80134ca:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80134ce:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80134d2:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 80134d6:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80134da:	2f00      	cmp	r7, #0
 80134dc:	f040 824d 	bne.w	801397a <MEMS_runMagCal+0xd8a>
 80134e0:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f2c0 839e 	blt.w	8013c26 <MEMS_runMagCal+0x1036>
 80134ea:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80134ee:	1c5a      	adds	r2, r3, #1
 80134f0:	fbb2 f3f6 	udiv	r3, r2, r6
 80134f4:	fb06 2313 	mls	r3, r6, r3, r2
 80134f8:	b25b      	sxtb	r3, r3
 80134fa:	461d      	mov	r5, r3
 80134fc:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013500:	f88b 3012 	strb.w	r3, [fp, #18]
 8013504:	3401      	adds	r4, #1
 8013506:	42b4      	cmp	r4, r6
 8013508:	bfa8      	it	ge
 801350a:	4634      	movge	r4, r6
 801350c:	fa5f f884 	uxtb.w	r8, r4
 8013510:	f88b 8010 	strb.w	r8, [fp, #16]
 8013514:	f002 fa50 	bl	80159b8 <roundf>
 8013518:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801351c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8013520:	ee10 2a10 	vmov	r2, s0
 8013524:	829a      	strh	r2, [r3, #20]
 8013526:	2f00      	cmp	r7, #0
 8013528:	f040 8227 	bne.w	801397a <MEMS_runMagCal+0xd8a>
 801352c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013530:	b122      	cbz	r2, 801353c <MEMS_runMagCal+0x94c>
 8013532:	9908      	ldr	r1, [sp, #32]
 8013534:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013538:	4299      	cmp	r1, r3
 801353a:	d394      	bcc.n	8013466 <MEMS_runMagCal+0x876>
 801353c:	9b03      	ldr	r3, [sp, #12]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d091      	beq.n	8013466 <MEMS_runMagCal+0x876>
 8013542:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8013546:	1ebb      	subs	r3, r7, #2
 8013548:	2b01      	cmp	r3, #1
 801354a:	f240 8232 	bls.w	80139b2 <MEMS_runMagCal+0xdc2>
 801354e:	9b05      	ldr	r3, [sp, #20]
 8013550:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8013428 <MEMS_runMagCal+0x838>
 8013554:	ed93 8a01 	vldr	s16, [r3, #4]
 8013558:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801355c:	9a06      	ldr	r2, [sp, #24]
 801355e:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 8013562:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013568:	eec7 8a08 	vdiv.f32	s17, s14, s16
 801356c:	fb02 1404 	mla	r4, r2, r4, r1
 8013570:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013574:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013578:	3310      	adds	r3, #16
 801357a:	42a3      	cmp	r3, r4
 801357c:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013580:	ee28 9a89 	vmul.f32	s18, s17, s18
 8013584:	ee0c 2a10 	vmov	s24, r2
 8013588:	ee69 7a27 	vmul.f32	s15, s18, s15
 801358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013590:	ee17 2a90 	vmov	r2, s15
 8013594:	fa1f f982 	uxth.w	r9, r2
 8013598:	f080 81fe 	bcs.w	8013998 <MEMS_runMagCal+0xda8>
 801359c:	f242 3328 	movw	r3, #9000	; 0x2328
 80135a0:	429c      	cmp	r4, r3
 80135a2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80135a6:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 80135aa:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 80135ae:	bf1a      	itte	ne
 80135b0:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 80135b4:	3c28      	subne	r4, #40	; 0x28
 80135b6:	2400      	moveq	r4, #0
 80135b8:	42a8      	cmp	r0, r5
 80135ba:	f102 0201 	add.w	r2, r2, #1
 80135be:	f000 8727 	beq.w	8014410 <MEMS_runMagCal+0x1820>
 80135c2:	1a12      	subs	r2, r2, r0
 80135c4:	fb92 f1f5 	sdiv	r1, r2, r5
 80135c8:	fb05 2211 	mls	r2, r5, r1, r2
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	bfb8      	it	lt
 80135d0:	1952      	addlt	r2, r2, r5
 80135d2:	b211      	sxth	r1, r2
 80135d4:	b358      	cbz	r0, 801362e <MEMS_runMagCal+0xa3e>
 80135d6:	3801      	subs	r0, #1
 80135d8:	b280      	uxth	r0, r0
 80135da:	3001      	adds	r0, #1
 80135dc:	1b36      	subs	r6, r6, r4
 80135de:	9f03      	ldr	r7, [sp, #12]
 80135e0:	b2b6      	uxth	r6, r6
 80135e2:	4408      	add	r0, r1
 80135e4:	e002      	b.n	80135ec <MEMS_runMagCal+0x9fc>
 80135e6:	3101      	adds	r1, #1
 80135e8:	4281      	cmp	r1, r0
 80135ea:	d01b      	beq.n	8013624 <MEMS_runMagCal+0xa34>
 80135ec:	fb91 f3f5 	sdiv	r3, r1, r5
 80135f0:	fb05 1313 	mls	r3, r5, r3, r1
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80135fa:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80135fe:	4432      	add	r2, r6
 8013600:	b212      	sxth	r2, r2
 8013602:	2a00      	cmp	r2, #0
 8013604:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013608:	daed      	bge.n	80135e6 <MEMS_runMagCal+0x9f6>
 801360a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801360e:	1e5a      	subs	r2, r3, #1
 8013610:	2b00      	cmp	r3, #0
 8013612:	f000 8306 	beq.w	8013c22 <MEMS_runMagCal+0x1032>
 8013616:	3101      	adds	r1, #1
 8013618:	4281      	cmp	r1, r0
 801361a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801361e:	f04f 0701 	mov.w	r7, #1
 8013622:	d1e3      	bne.n	80135ec <MEMS_runMagCal+0x9fc>
 8013624:	2f01      	cmp	r7, #1
 8013626:	f001 80ea 	beq.w	80147fe <MEMS_runMagCal+0x1c0e>
 801362a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801362e:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8013632:	2800      	cmp	r0, #0
 8013634:	f000 81b6 	beq.w	80139a4 <MEMS_runMagCal+0xdb4>
 8013638:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801363c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801363e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013642:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8013646:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801364a:	3308      	adds	r3, #8
 801364c:	441c      	add	r4, r3
 801364e:	42a2      	cmp	r2, r4
 8013650:	f200 86e6 	bhi.w	8014420 <MEMS_runMagCal+0x1830>
 8013654:	9b07      	ldr	r3, [sp, #28]
 8013656:	b923      	cbnz	r3, 8013662 <MEMS_runMagCal+0xa72>
 8013658:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801365c:	2b0a      	cmp	r3, #10
 801365e:	f240 81a5 	bls.w	80139ac <MEMS_runMagCal+0xdbc>
 8013662:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013666:	9302      	str	r3, [sp, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f000 819f 	beq.w	80139ac <MEMS_runMagCal+0xdbc>
 801366e:	ee29 aa09 	vmul.f32	s20, s18, s18
 8013672:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 801342c <MEMS_runMagCal+0x83c>
 8013676:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8013430 <MEMS_runMagCal+0x840>
 801367a:	9b03      	ldr	r3, [sp, #12]
 801367c:	9309      	str	r3, [sp, #36]	; 0x24
 801367e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013686:	2100      	movs	r1, #0
 8013688:	ee2a aa26 	vmul.f32	s20, s20, s13
 801368c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8013690:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013694:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013698:	468a      	mov	sl, r1
 801369a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801369c:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80136a0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f000 80e2 	beq.w	801386e <MEMS_runMagCal+0xc7e>
 80136aa:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80136ae:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80136b2:	ee07 4a90 	vmov	s15, r4
 80136b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136ba:	eef0 7ae7 	vabs.f32	s15, s15
 80136be:	eef4 7ae8 	vcmpe.f32	s15, s17
 80136c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c6:	f100 820b 	bmi.w	8013ae0 <MEMS_runMagCal+0xef0>
 80136ca:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80136ce:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80136d2:	2f00      	cmp	r7, #0
 80136d4:	f000 8223 	beq.w	8013b1e <MEMS_runMagCal+0xf2e>
 80136d8:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 80136dc:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 80136e0:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 80136e4:	1b52      	subs	r2, r2, r5
 80136e6:	fb02 f102 	mul.w	r1, r2, r2
 80136ea:	1b02      	subs	r2, r0, r4
 80136ec:	fb02 1202 	mla	r2, r2, r2, r1
 80136f0:	1b9b      	subs	r3, r3, r6
 80136f2:	fb03 2303 	mla	r3, r3, r3, r2
 80136f6:	ee07 3a90 	vmov	s15, r3
 80136fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136fe:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013706:	f300 80b2 	bgt.w	801386e <MEMS_runMagCal+0xc7e>
 801370a:	fb94 f3f9 	sdiv	r3, r4, r9
 801370e:	fb09 4313 	mls	r3, r9, r3, r4
 8013712:	2b00      	cmp	r3, #0
 8013714:	bfb8      	it	lt
 8013716:	444b      	addlt	r3, r9
 8013718:	b21b      	sxth	r3, r3
 801371a:	ee00 3a10 	vmov	s0, r3
 801371e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013722:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013726:	f002 f947 	bl	80159b8 <roundf>
 801372a:	fb95 f3f9 	sdiv	r3, r5, r9
 801372e:	fb09 5313 	mls	r3, r9, r3, r5
 8013732:	2b00      	cmp	r3, #0
 8013734:	bfb8      	it	lt
 8013736:	444b      	addlt	r3, r9
 8013738:	b21b      	sxth	r3, r3
 801373a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801373e:	ee00 3a10 	vmov	s0, r3
 8013742:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013746:	edcd 7a04 	vstr	s15, [sp, #16]
 801374a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801374e:	f002 f933 	bl	80159b8 <roundf>
 8013752:	fb96 f3f9 	sdiv	r3, r6, r9
 8013756:	fb09 6313 	mls	r3, r9, r3, r6
 801375a:	2b00      	cmp	r3, #0
 801375c:	bfb8      	it	lt
 801375e:	444b      	addlt	r3, r9
 8013760:	b21b      	sxth	r3, r3
 8013762:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013766:	ee00 3a10 	vmov	s0, r3
 801376a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801376e:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8013772:	edcd 7a04 	vstr	s15, [sp, #16]
 8013776:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801377a:	9204      	str	r2, [sp, #16]
 801377c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013780:	f002 f91a 	bl	80159b8 <roundf>
 8013784:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013788:	f1b8 0f1f 	cmp.w	r8, #31
 801378c:	edcd 7a06 	vstr	s15, [sp, #24]
 8013790:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013794:	9106      	str	r1, [sp, #24]
 8013796:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 801379a:	f240 823d 	bls.w	8013c18 <MEMS_runMagCal+0x1028>
 801379e:	f1a8 0220 	sub.w	r2, r8, #32
 80137a2:	2101      	movs	r1, #1
 80137a4:	fa01 f202 	lsl.w	r2, r1, r2
 80137a8:	401a      	ands	r2, r3
 80137aa:	9804      	ldr	r0, [sp, #16]
 80137ac:	281f      	cmp	r0, #31
 80137ae:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 80137b2:	f240 821f 	bls.w	8013bf4 <MEMS_runMagCal+0x1004>
 80137b6:	f1a0 0120 	sub.w	r1, r0, #32
 80137ba:	2001      	movs	r0, #1
 80137bc:	fa00 f101 	lsl.w	r1, r0, r1
 80137c0:	ea01 0c03 	and.w	ip, r1, r3
 80137c4:	9906      	ldr	r1, [sp, #24]
 80137c6:	291f      	cmp	r1, #31
 80137c8:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 80137cc:	f240 821e 	bls.w	8013c0c <MEMS_runMagCal+0x101c>
 80137d0:	f1a1 0020 	sub.w	r0, r1, #32
 80137d4:	2101      	movs	r1, #1
 80137d6:	fa01 f000 	lsl.w	r0, r1, r0
 80137da:	4003      	ands	r3, r0
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f040 812b 	bne.w	8013a38 <MEMS_runMagCal+0xe48>
 80137e2:	ea52 030c 	orrs.w	r3, r2, ip
 80137e6:	f040 812c 	bne.w	8013a42 <MEMS_runMagCal+0xe52>
 80137ea:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80137ee:	930a      	str	r3, [sp, #40]	; 0x28
 80137f0:	461a      	mov	r2, r3
 80137f2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80137f6:	3301      	adds	r3, #1
 80137f8:	4694      	mov	ip, r2
 80137fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80137fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137fe:	fb92 f3fc 	sdiv	r3, r2, ip
 8013802:	3701      	adds	r7, #1
 8013804:	4567      	cmp	r7, ip
 8013806:	bfa8      	it	ge
 8013808:	4667      	movge	r7, ip
 801380a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801380e:	b2ff      	uxtb	r7, r7
 8013810:	fa4f fc8c 	sxtb.w	ip, ip
 8013814:	9905      	ldr	r1, [sp, #20]
 8013816:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801381a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801381e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013824:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013828:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 801382c:	1a9b      	subs	r3, r3, r2
 801382e:	fb01 330a 	mla	r3, r1, sl, r3
 8013832:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013838:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 801383c:	429f      	cmp	r7, r3
 801383e:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013842:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013846:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801384a:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801384e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013852:	f000 8758 	beq.w	8014706 <MEMS_runMagCal+0x1b16>
 8013856:	9b06      	ldr	r3, [sp, #24]
 8013858:	9a04      	ldr	r2, [sp, #16]
 801385a:	ee1c 0a10 	vmov	r0, s24
 801385e:	4641      	mov	r1, r8
 8013860:	f7f8 f874 	bl	800b94c <MEMS_setMagIndexToOne>
 8013864:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013868:	9302      	str	r3, [sp, #8]
 801386a:	2301      	movs	r3, #1
 801386c:	9309      	str	r3, [sp, #36]	; 0x24
 801386e:	9b02      	ldr	r3, [sp, #8]
 8013870:	f10a 0a01 	add.w	sl, sl, #1
 8013874:	fa0f fa8a 	sxth.w	sl, sl
 8013878:	459a      	cmp	sl, r3
 801387a:	4651      	mov	r1, sl
 801387c:	f6ff af0d 	blt.w	801369a <MEMS_runMagCal+0xaaa>
 8013880:	f89b 3000 	ldrb.w	r3, [fp]
 8013884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013886:	431a      	orrs	r2, r3
 8013888:	b2d3      	uxtb	r3, r2
 801388a:	f88b 3000 	strb.w	r3, [fp]
 801388e:	2b00      	cmp	r3, #0
 8013890:	f43f ade9 	beq.w	8013466 <MEMS_runMagCal+0x876>
 8013894:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013898:	9306      	str	r3, [sp, #24]
 801389a:	2b19      	cmp	r3, #25
 801389c:	f67f ade3 	bls.w	8013466 <MEMS_runMagCal+0x876>
 80138a0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80138a4:	9309      	str	r3, [sp, #36]	; 0x24
 80138a6:	b123      	cbz	r3, 80138b2 <MEMS_runMagCal+0xcc2>
 80138a8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f040 8583 	bne.w	80143b8 <MEMS_runMagCal+0x17c8>
 80138b2:	9b07      	ldr	r3, [sp, #28]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f040 872f 	bne.w	8014718 <MEMS_runMagCal+0x1b28>
 80138ba:	9b05      	ldr	r3, [sp, #20]
 80138bc:	9903      	ldr	r1, [sp, #12]
 80138be:	ed93 8a01 	vldr	s16, [r3, #4]
 80138c2:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 80138c6:	9302      	str	r3, [sp, #8]
 80138c8:	2600      	movs	r6, #0
 80138ca:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 80138ce:	9304      	str	r3, [sp, #16]
 80138d0:	f04f 0a01 	mov.w	sl, #1
 80138d4:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 80138d8:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 80138dc:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 80138e0:	9624      	str	r6, [sp, #144]	; 0x90
 80138e2:	4657      	mov	r7, sl
 80138e4:	460b      	mov	r3, r1
 80138e6:	460c      	mov	r4, r1
 80138e8:	e013      	b.n	8013912 <MEMS_runMagCal+0xd22>
 80138ea:	f1b9 0f00 	cmp.w	r9, #0
 80138ee:	bf18      	it	ne
 80138f0:	3101      	addne	r1, #1
 80138f2:	2d00      	cmp	r5, #0
 80138f4:	bf18      	it	ne
 80138f6:	3401      	addne	r4, #1
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	bf18      	it	ne
 80138fc:	3301      	addne	r3, #1
 80138fe:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013902:	b2c9      	uxtb	r1, r1
 8013904:	b2e4      	uxtb	r4, r4
 8013906:	b2db      	uxtb	r3, r3
 8013908:	f000 81a2 	beq.w	8013c50 <MEMS_runMagCal+0x1060>
 801390c:	3601      	adds	r6, #1
 801390e:	fa5f fa8c 	uxtb.w	sl, ip
 8013912:	9804      	ldr	r0, [sp, #16]
 8013914:	f1a6 0220 	sub.w	r2, r6, #32
 8013918:	fa07 f202 	lsl.w	r2, r7, r2
 801391c:	ea02 0500 	and.w	r5, r2, r0
 8013920:	9802      	ldr	r0, [sp, #8]
 8013922:	2e1f      	cmp	r6, #31
 8013924:	ea08 0902 	and.w	r9, r8, r2
 8013928:	f10a 0c01 	add.w	ip, sl, #1
 801392c:	ea02 0200 	and.w	r2, r2, r0
 8013930:	fa07 f006 	lsl.w	r0, r7, r6
 8013934:	d8d9      	bhi.n	80138ea <MEMS_runMagCal+0xcfa>
 8013936:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 801393a:	ea00 0902 	and.w	r9, r0, r2
 801393e:	4005      	ands	r5, r0
 8013940:	ea0e 0000 	and.w	r0, lr, r0
 8013944:	f1b9 0f00 	cmp.w	r9, #0
 8013948:	bf18      	it	ne
 801394a:	3401      	addne	r4, #1
 801394c:	2d00      	cmp	r5, #0
 801394e:	bf0c      	ite	eq
 8013950:	461d      	moveq	r5, r3
 8013952:	1c5d      	addne	r5, r3, #1
 8013954:	2800      	cmp	r0, #0
 8013956:	bf18      	it	ne
 8013958:	3101      	addne	r1, #1
 801395a:	b2e4      	uxtb	r4, r4
 801395c:	b2eb      	uxtb	r3, r5
 801395e:	b2c9      	uxtb	r1, r1
 8013960:	e7d4      	b.n	801390c <MEMS_runMagCal+0xd1c>
 8013962:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013966:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013c3c <MEMS_runMagCal+0x104c>
 801396a:	2b01      	cmp	r3, #1
 801396c:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013970:	f63f ada9 	bhi.w	80134c6 <MEMS_runMagCal+0x8d6>
 8013974:	2f00      	cmp	r7, #0
 8013976:	f43f adb3 	beq.w	80134e0 <MEMS_runMagCal+0x8f0>
 801397a:	9908      	ldr	r1, [sp, #32]
 801397c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	23ff      	movs	r3, #255	; 0xff
 8013984:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013988:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801398c:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013990:	ecbd 8b0a 	vpop	{d8-d12}
 8013994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013998:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801399c:	4634      	mov	r4, r6
 801399e:	2800      	cmp	r0, #0
 80139a0:	f47f ae4a 	bne.w	8013638 <MEMS_runMagCal+0xa48>
 80139a4:	9b07      	ldr	r3, [sp, #28]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f47f ae5b 	bne.w	8013662 <MEMS_runMagCal+0xa72>
 80139ac:	9b03      	ldr	r3, [sp, #12]
 80139ae:	9309      	str	r3, [sp, #36]	; 0x24
 80139b0:	e766      	b.n	8013880 <MEMS_runMagCal+0xc90>
 80139b2:	45b0      	cmp	r8, r6
 80139b4:	f000 86b9 	beq.w	801472a <MEMS_runMagCal+0x1b3a>
 80139b8:	2f03      	cmp	r7, #3
 80139ba:	f47f adc8 	bne.w	801354e <MEMS_runMagCal+0x95e>
 80139be:	ee07 2a90 	vmov	s15, r2
 80139c2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013c40 <MEMS_runMagCal+0x1050>
 80139c6:	ed9b 7a01 	vldr	s14, [fp, #4]
 80139ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80139d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80139da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139de:	f77f adb6 	ble.w	801354e <MEMS_runMagCal+0x95e>
 80139e2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f43f adb1 	beq.w	801354e <MEMS_runMagCal+0x95e>
 80139ec:	eddd 7a08 	vldr	s15, [sp, #32]
 80139f0:	330a      	adds	r3, #10
 80139f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80139f6:	ee07 3a90 	vmov	s15, r3
 80139fa:	ee67 6a26 	vmul.f32	s13, s14, s13
 80139fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a02:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0a:	f77f ada0 	ble.w	801354e <MEMS_runMagCal+0x95e>
 8013a0e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f47f ad9b 	bne.w	801354e <MEMS_runMagCal+0x95e>
 8013a18:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	f43f ad22 	beq.w	8013466 <MEMS_runMagCal+0x876>
 8013a22:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013a26:	2bff      	cmp	r3, #255	; 0xff
 8013a28:	f47f ad1d 	bne.w	8013466 <MEMS_runMagCal+0x876>
 8013a2c:	e58f      	b.n	801354e <MEMS_runMagCal+0x95e>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	9307      	str	r3, [sp, #28]
 8013a32:	9303      	str	r3, [sp, #12]
 8013a34:	2700      	movs	r7, #0
 8013a36:	e52c      	b.n	8013492 <MEMS_runMagCal+0x8a2>
 8013a38:	b11a      	cbz	r2, 8013a42 <MEMS_runMagCal+0xe52>
 8013a3a:	f1bc 0f00 	cmp.w	ip, #0
 8013a3e:	f47f af16 	bne.w	801386e <MEMS_runMagCal+0xc7e>
 8013a42:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013a46:	930a      	str	r3, [sp, #40]	; 0x28
 8013a48:	461a      	mov	r2, r3
 8013a4a:	4297      	cmp	r7, r2
 8013a4c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013a50:	f000 848f 	beq.w	8014372 <MEMS_runMagCal+0x1782>
 8013a54:	3301      	adds	r3, #1
 8013a56:	4611      	mov	r1, r2
 8013a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a5a:	1bdb      	subs	r3, r3, r7
 8013a5c:	fb93 f2f2 	sdiv	r2, r3, r2
 8013a60:	fb01 3212 	mls	r2, r1, r2, r3
 8013a64:	2a00      	cmp	r2, #0
 8013a66:	bfbc      	itt	lt
 8013a68:	460b      	movlt	r3, r1
 8013a6a:	18d2      	addlt	r2, r2, r3
 8013a6c:	468c      	mov	ip, r1
 8013a6e:	b212      	sxth	r2, r2
 8013a70:	f107 3eff 	add.w	lr, r7, #4294967295
 8013a74:	fa5f fe8e 	uxtb.w	lr, lr
 8013a78:	f10e 0e01 	add.w	lr, lr, #1
 8013a7c:	4496      	add	lr, r2
 8013a7e:	e002      	b.n	8013a86 <MEMS_runMagCal+0xe96>
 8013a80:	4572      	cmp	r2, lr
 8013a82:	f43f aebb 	beq.w	80137fc <MEMS_runMagCal+0xc0c>
 8013a86:	fb92 f3fc 	sdiv	r3, r2, ip
 8013a8a:	fb0c 2313 	mls	r3, ip, r3, r2
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013a94:	3201      	adds	r2, #1
 8013a96:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013a9a:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013a9e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013aa2:	1a20      	subs	r0, r4, r0
 8013aa4:	1a69      	subs	r1, r5, r1
 8013aa6:	ee07 0a90 	vmov	s15, r0
 8013aaa:	ee06 1a90 	vmov	s13, r1
 8013aae:	1af3      	subs	r3, r6, r3
 8013ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ab4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ab8:	ee07 3a10 	vmov	s14, r3
 8013abc:	eef0 7ae7 	vabs.f32	s15, s15
 8013ac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ac4:	eef0 6ae6 	vabs.f32	s13, s13
 8013ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013acc:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ad4:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013adc:	ddd0      	ble.n	8013a80 <MEMS_runMagCal+0xe90>
 8013ade:	e6c6      	b.n	801386e <MEMS_runMagCal+0xc7e>
 8013ae0:	ee07 5a90 	vmov	s15, r5
 8013ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ae8:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013aec:	eef0 7ae7 	vabs.f32	s15, s15
 8013af0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af8:	f77f ade9 	ble.w	80136ce <MEMS_runMagCal+0xade>
 8013afc:	ee07 6a90 	vmov	s15, r6
 8013b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b04:	eef0 7ae7 	vabs.f32	s15, s15
 8013b08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	f73f aead 	bgt.w	801386e <MEMS_runMagCal+0xc7e>
 8013b14:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013b18:	2f00      	cmp	r7, #0
 8013b1a:	f47f addd 	bne.w	80136d8 <MEMS_runMagCal+0xae8>
 8013b1e:	fb94 f2f9 	sdiv	r2, r4, r9
 8013b22:	f04f 0301 	mov.w	r3, #1
 8013b26:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013b30:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b36:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013b3a:	fb09 4212 	mls	r2, r9, r2, r4
 8013b3e:	2a00      	cmp	r2, #0
 8013b40:	fb01 3300 	mla	r3, r1, r0, r3
 8013b44:	bfb8      	it	lt
 8013b46:	444a      	addlt	r2, r9
 8013b48:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013b4c:	b213      	sxth	r3, r2
 8013b4e:	ee00 3a10 	vmov	s0, r3
 8013b52:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013b56:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013b5a:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013b5e:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013b62:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013b66:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013b6a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b6e:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013b72:	f001 ff21 	bl	80159b8 <roundf>
 8013b76:	fb95 f3f9 	sdiv	r3, r5, r9
 8013b7a:	fb09 5513 	mls	r5, r9, r3, r5
 8013b7e:	2d00      	cmp	r5, #0
 8013b80:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013b84:	bfb8      	it	lt
 8013b86:	444d      	addlt	r5, r9
 8013b88:	b22d      	sxth	r5, r5
 8013b8a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013b8e:	ee07 5a90 	vmov	s15, r5
 8013b92:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013b96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013b9a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b9e:	f001 ff0b 	bl	80159b8 <roundf>
 8013ba2:	fb96 f3f9 	sdiv	r3, r6, r9
 8013ba6:	fb09 6613 	mls	r6, r9, r3, r6
 8013baa:	2e00      	cmp	r6, #0
 8013bac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bb0:	bfb8      	it	lt
 8013bb2:	444e      	addlt	r6, r9
 8013bb4:	b236      	sxth	r6, r6
 8013bb6:	edcd 7a02 	vstr	s15, [sp, #8]
 8013bba:	ee07 6a90 	vmov	s15, r6
 8013bbe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013bc2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013bc6:	9204      	str	r2, [sp, #16]
 8013bc8:	2301      	movs	r3, #1
 8013bca:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013bce:	9309      	str	r3, [sp, #36]	; 0x24
 8013bd0:	f001 fef2 	bl	80159b8 <roundf>
 8013bd4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bd8:	9a04      	ldr	r2, [sp, #16]
 8013bda:	edcd 7a02 	vstr	s15, [sp, #8]
 8013bde:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013be2:	ee1c 0a10 	vmov	r0, s24
 8013be6:	4621      	mov	r1, r4
 8013be8:	f7f7 feb0 	bl	800b94c <MEMS_setMagIndexToOne>
 8013bec:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013bf0:	9302      	str	r3, [sp, #8]
 8013bf2:	e63c      	b.n	801386e <MEMS_runMagCal+0xc7e>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2001      	movs	r0, #1
 8013bf8:	fa00 f303 	lsl.w	r3, r0, r3
 8013bfc:	ea01 0c03 	and.w	ip, r1, r3
 8013c00:	9906      	ldr	r1, [sp, #24]
 8013c02:	291f      	cmp	r1, #31
 8013c04:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013c08:	f63f ade2 	bhi.w	80137d0 <MEMS_runMagCal+0xbe0>
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	2101      	movs	r1, #1
 8013c10:	fa01 f303 	lsl.w	r3, r1, r3
 8013c14:	4003      	ands	r3, r0
 8013c16:	e5e1      	b.n	80137dc <MEMS_runMagCal+0xbec>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	fa03 f308 	lsl.w	r3, r3, r8
 8013c1e:	401a      	ands	r2, r3
 8013c20:	e5c3      	b.n	80137aa <MEMS_runMagCal+0xbba>
 8013c22:	2701      	movs	r7, #1
 8013c24:	e4df      	b.n	80135e6 <MEMS_runMagCal+0x9f6>
 8013c26:	2500      	movs	r5, #0
 8013c28:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	e465      	b.n	80134fc <MEMS_runMagCal+0x90c>
 8013c30:	460f      	mov	r7, r1
 8013c32:	e42b      	b.n	801348c <MEMS_runMagCal+0x89c>
 8013c34:	2300      	movs	r3, #0
 8013c36:	9304      	str	r3, [sp, #16]
 8013c38:	f7ff b941 	b.w	8012ebe <MEMS_runMagCal+0x2ce>
 8013c3c:	477fff00 	.word	0x477fff00
 8013c40:	3a83126f 	.word	0x3a83126f
 8013c44:	42340000 	.word	0x42340000
 8013c48:	3faccccd 	.word	0x3faccccd
 8013c4c:	00000000 	.word	0x00000000
 8013c50:	2905      	cmp	r1, #5
 8013c52:	f240 8383 	bls.w	801435c <MEMS_runMagCal+0x176c>
 8013c56:	2c05      	cmp	r4, #5
 8013c58:	f240 8380 	bls.w	801435c <MEMS_runMagCal+0x176c>
 8013c5c:	2b05      	cmp	r3, #5
 8013c5e:	f240 837d 	bls.w	801435c <MEMS_runMagCal+0x176c>
 8013c62:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013c66:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013c6a:	9302      	str	r3, [sp, #8]
 8013c6c:	9b06      	ldr	r3, [sp, #24]
 8013c6e:	4553      	cmp	r3, sl
 8013c70:	f000 85f1 	beq.w	8014856 <MEMS_runMagCal+0x1c66>
 8013c74:	461a      	mov	r2, r3
 8013c76:	9b02      	ldr	r3, [sp, #8]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	9304      	str	r3, [sp, #16]
 8013c7c:	1a9b      	subs	r3, r3, r2
 8013c7e:	fb93 f2fa 	sdiv	r2, r3, sl
 8013c82:	fb0a 3212 	mls	r2, sl, r2, r3
 8013c86:	2a00      	cmp	r2, #0
 8013c88:	bfb8      	it	lt
 8013c8a:	4452      	addlt	r2, sl
 8013c8c:	46d1      	mov	r9, sl
 8013c8e:	b212      	sxth	r2, r2
 8013c90:	9906      	ldr	r1, [sp, #24]
 8013c92:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013c96:	f101 38ff 	add.w	r8, r1, #4294967295
 8013c9a:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013c9e:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013ca2:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013ca6:	fa5f f888 	uxtb.w	r8, r8
 8013caa:	f108 0801 	add.w	r8, r8, #1
 8013cae:	468e      	mov	lr, r1
 8013cb0:	463e      	mov	r6, r7
 8013cb2:	46ac      	mov	ip, r5
 8013cb4:	4490      	add	r8, r2
 8013cb6:	fb92 f3f9 	sdiv	r3, r2, r9
 8013cba:	fb09 2313 	mls	r3, r9, r3, r2
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013cc4:	3201      	adds	r2, #1
 8013cc6:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013cca:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013cce:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013cd2:	42a1      	cmp	r1, r4
 8013cd4:	bfb8      	it	lt
 8013cd6:	4621      	movlt	r1, r4
 8013cd8:	45a6      	cmp	lr, r4
 8013cda:	bfa8      	it	ge
 8013cdc:	46a6      	movge	lr, r4
 8013cde:	4285      	cmp	r5, r0
 8013ce0:	bfb8      	it	lt
 8013ce2:	4605      	movlt	r5, r0
 8013ce4:	4584      	cmp	ip, r0
 8013ce6:	bfa8      	it	ge
 8013ce8:	4684      	movge	ip, r0
 8013cea:	429f      	cmp	r7, r3
 8013cec:	bfb8      	it	lt
 8013cee:	461f      	movlt	r7, r3
 8013cf0:	429e      	cmp	r6, r3
 8013cf2:	bfa8      	it	ge
 8013cf4:	461e      	movge	r6, r3
 8013cf6:	4542      	cmp	r2, r8
 8013cf8:	d1dd      	bne.n	8013cb6 <MEMS_runMagCal+0x10c6>
 8013cfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013cfe:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013d02:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013d06:	eba1 010e 	sub.w	r1, r1, lr
 8013d0a:	eba5 050c 	sub.w	r5, r5, ip
 8013d0e:	1bbe      	subs	r6, r7, r6
 8013d10:	b209      	sxth	r1, r1
 8013d12:	b22d      	sxth	r5, r5
 8013d14:	b236      	sxth	r6, r6
 8013d16:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013c44 <MEMS_runMagCal+0x1054>
 8013d1a:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f040 8593 	bne.w	801484a <MEMS_runMagCal+0x1c5a>
 8013d24:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013d28:	fab3 f883 	clz	r8, r3
 8013d2c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013d30:	ee06 1a90 	vmov	s13, r1
 8013d34:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d40:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d48:	f300 8562 	bgt.w	8014810 <MEMS_runMagCal+0x1c20>
 8013d4c:	ee06 5a10 	vmov	s12, r5
 8013d50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013d54:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5c:	f100 8558 	bmi.w	8014810 <MEMS_runMagCal+0x1c20>
 8013d60:	ee05 6a90 	vmov	s11, r6
 8013d64:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013d68:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d70:	f100 854e 	bmi.w	8014810 <MEMS_runMagCal+0x1c20>
 8013d74:	428d      	cmp	r5, r1
 8013d76:	462b      	mov	r3, r5
 8013d78:	bfb8      	it	lt
 8013d7a:	460b      	movlt	r3, r1
 8013d7c:	42b3      	cmp	r3, r6
 8013d7e:	461a      	mov	r2, r3
 8013d80:	bfb8      	it	lt
 8013d82:	4632      	movlt	r2, r6
 8013d84:	428e      	cmp	r6, r1
 8013d86:	4633      	mov	r3, r6
 8013d88:	bfa8      	it	ge
 8013d8a:	460b      	movge	r3, r1
 8013d8c:	42ab      	cmp	r3, r5
 8013d8e:	bfa8      	it	ge
 8013d90:	462b      	movge	r3, r5
 8013d92:	428a      	cmp	r2, r1
 8013d94:	9202      	str	r2, [sp, #8]
 8013d96:	f340 8588 	ble.w	80148aa <MEMS_runMagCal+0x1cba>
 8013d9a:	4299      	cmp	r1, r3
 8013d9c:	bfb8      	it	lt
 8013d9e:	4619      	movlt	r1, r3
 8013da0:	42aa      	cmp	r2, r5
 8013da2:	dd02      	ble.n	8013daa <MEMS_runMagCal+0x11ba>
 8013da4:	42ab      	cmp	r3, r5
 8013da6:	bfb8      	it	lt
 8013da8:	4629      	movlt	r1, r5
 8013daa:	9a02      	ldr	r2, [sp, #8]
 8013dac:	4296      	cmp	r6, r2
 8013dae:	da02      	bge.n	8013db6 <MEMS_runMagCal+0x11c6>
 8013db0:	429e      	cmp	r6, r3
 8013db2:	bfc8      	it	gt
 8013db4:	4631      	movgt	r1, r6
 8013db6:	f1b8 0f00 	cmp.w	r8, #0
 8013dba:	f000 8299 	beq.w	80142f0 <MEMS_runMagCal+0x1700>
 8013dbe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc6:	dc0d      	bgt.n	8013de4 <MEMS_runMagCal+0x11f4>
 8013dc8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	dc08      	bgt.n	8013de4 <MEMS_runMagCal+0x11f4>
 8013dd2:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dda:	bfcc      	ite	gt
 8013ddc:	f04f 0801 	movgt.w	r8, #1
 8013de0:	f04f 0800 	movle.w	r8, #0
 8013de4:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013c48 <MEMS_runMagCal+0x1058>
 8013de8:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013df0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013df4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfc:	f2c0 8558 	blt.w	80148b0 <MEMS_runMagCal+0x1cc0>
 8013e00:	ee07 1a90 	vmov	s15, r1
 8013e04:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013e08:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e10:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	f2c0 854a 	blt.w	80148b0 <MEMS_runMagCal+0x1cc0>
 8013e1c:	9a02      	ldr	r2, [sp, #8]
 8013e1e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013e22:	f280 8545 	bge.w	80148b0 <MEMS_runMagCal+0x1cc0>
 8013e26:	ee07 3a90 	vmov	s15, r3
 8013e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e2e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013e32:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3e:	f140 8537 	bpl.w	80148b0 <MEMS_runMagCal+0x1cc0>
 8013e42:	9b06      	ldr	r3, [sp, #24]
 8013e44:	4553      	cmp	r3, sl
 8013e46:	f000 8569 	beq.w	801491c <MEMS_runMagCal+0x1d2c>
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	9b04      	ldr	r3, [sp, #16]
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	fb93 f7f9 	sdiv	r7, r3, r9
 8013e54:	fb09 3717 	mls	r7, r9, r7, r3
 8013e58:	2f00      	cmp	r7, #0
 8013e5a:	bfb8      	it	lt
 8013e5c:	4457      	addlt	r7, sl
 8013e5e:	b23f      	sxth	r7, r7
 8013e60:	9b03      	ldr	r3, [sp, #12]
 8013e62:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013e66:	b27f      	sxtb	r7, r7
 8013e68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	f1c7 0e01 	rsb	lr, r7, #1
 8013e72:	469c      	mov	ip, r3
 8013e74:	463b      	mov	r3, r7
 8013e76:	fb93 f1f9 	sdiv	r1, r3, r9
 8013e7a:	fb09 3111 	mls	r1, r9, r1, r3
 8013e7e:	b24a      	sxtb	r2, r1
 8013e80:	2a00      	cmp	r2, #0
 8013e82:	f107 0701 	add.w	r7, r7, #1
 8013e86:	bfb8      	it	lt
 8013e88:	eb0a 0201 	addlt.w	r2, sl, r1
 8013e8c:	fb97 f3f9 	sdiv	r3, r7, r9
 8013e90:	fb09 7313 	mls	r3, r9, r3, r7
 8013e94:	bfb8      	it	lt
 8013e96:	b252      	sxtblt	r2, r2
 8013e98:	b25b      	sxtb	r3, r3
 8013e9a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e9e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013ea2:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013ea6:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8013eaa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013eae:	1a45      	subs	r5, r0, r1
 8013eb0:	bf48      	it	mi
 8013eb2:	1a09      	submi	r1, r1, r0
 8013eb4:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013eb8:	bf4c      	ite	mi
 8013eba:	b20d      	sxthmi	r5, r1
 8013ebc:	b22d      	sxthpl	r5, r5
 8013ebe:	1a21      	subs	r1, r4, r0
 8013ec0:	bf48      	it	mi
 8013ec2:	1b01      	submi	r1, r0, r4
 8013ec4:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013ec8:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8013ecc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013ed0:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013ed4:	1a9b      	subs	r3, r3, r2
 8013ed6:	1a26      	subs	r6, r4, r0
 8013ed8:	b21b      	sxth	r3, r3
 8013eda:	bf48      	it	mi
 8013edc:	1b06      	submi	r6, r0, r4
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	b209      	sxth	r1, r1
 8013ee2:	b236      	sxth	r6, r6
 8013ee4:	dd20      	ble.n	8013f28 <MEMS_runMagCal+0x1338>
 8013ee6:	4429      	add	r1, r5
 8013ee8:	440e      	add	r6, r1
 8013eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013eee:	fb02 f606 	mul.w	r6, r2, r6
 8013ef2:	ee07 6a90 	vmov	s15, r6
 8013ef6:	ee07 3a10 	vmov	s14, r3
 8013efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013efe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f02:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013f06:	f10c 0c01 	add.w	ip, ip, #1
 8013f0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013f0e:	fa5f fc8c 	uxtb.w	ip, ip
 8013f12:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013f16:	ee17 3a90 	vmov	r3, s15
 8013f1a:	b21b      	sxth	r3, r3
 8013f1c:	2b96      	cmp	r3, #150	; 0x96
 8013f1e:	dd03      	ble.n	8013f28 <MEMS_runMagCal+0x1338>
 8013f20:	9b04      	ldr	r3, [sp, #16]
 8013f22:	3301      	adds	r3, #1
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	9304      	str	r3, [sp, #16]
 8013f28:	eb0e 0307 	add.w	r3, lr, r7
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	4598      	cmp	r8, r3
 8013f30:	d8a0      	bhi.n	8013e74 <MEMS_runMagCal+0x1284>
 8013f32:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8013f36:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013f3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f3e:	4563      	cmp	r3, ip
 8013f40:	f340 820c 	ble.w	801435c <MEMS_runMagCal+0x176c>
 8013f44:	9b07      	ldr	r3, [sp, #28]
 8013f46:	b92b      	cbnz	r3, 8013f54 <MEMS_runMagCal+0x1364>
 8013f48:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013f4c:	3b02      	subs	r3, #2
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	f240 851e 	bls.w	8014990 <MEMS_runMagCal+0x1da0>
 8013f54:	ac25      	add	r4, sp, #148	; 0x94
 8013f56:	2220      	movs	r2, #32
 8013f58:	4620      	mov	r0, r4
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	f003 fb34 	bl	80175c8 <memset>
 8013f60:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8013f64:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013f68:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	4286      	cmp	r6, r0
 8013f70:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8013f74:	921f      	str	r2, [sp, #124]	; 0x7c
 8013f76:	f103 0301 	add.w	r3, r3, #1
 8013f7a:	f000 8501 	beq.w	8014980 <MEMS_runMagCal+0x1d90>
 8013f7e:	1b9b      	subs	r3, r3, r6
 8013f80:	fb93 f2f0 	sdiv	r2, r3, r0
 8013f84:	fb00 3312 	mls	r3, r0, r2, r3
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	bfb8      	it	lt
 8013f8c:	181b      	addlt	r3, r3, r0
 8013f8e:	b21a      	sxth	r2, r3
 8013f90:	2e00      	cmp	r6, #0
 8013f92:	f000 854c 	beq.w	8014a2e <MEMS_runMagCal+0x1e3e>
 8013f96:	1e77      	subs	r7, r6, #1
 8013f98:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013c4c <MEMS_runMagCal+0x105c>
 8013f9c:	b2fd      	uxtb	r5, r7
 8013f9e:	3501      	adds	r5, #1
 8013fa0:	eeb0 5a65 	vmov.f32	s10, s11
 8013fa4:	eef0 4a65 	vmov.f32	s9, s11
 8013fa8:	4415      	add	r5, r2
 8013faa:	4611      	mov	r1, r2
 8013fac:	fb91 f3f0 	sdiv	r3, r1, r0
 8013fb0:	fb00 1313 	mls	r3, r0, r3, r1
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013fba:	3101      	adds	r1, #1
 8013fbc:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013fc0:	ee06 ca90 	vmov	s13, ip
 8013fc4:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013fc8:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013fcc:	ee07 ca10 	vmov	s14, ip
 8013fd0:	ee07 3a90 	vmov	s15, r3
 8013fd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013fd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fe0:	42a9      	cmp	r1, r5
 8013fe2:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013fe6:	ee35 5a07 	vadd.f32	s10, s10, s14
 8013fea:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013fee:	d1dd      	bne.n	8013fac <MEMS_runMagCal+0x13bc>
 8013ff0:	ee07 6a90 	vmov	s15, r6
 8013ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ffc:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8014000:	b2f9      	uxtb	r1, r7
 8014002:	3101      	adds	r1, #1
 8014004:	4411      	add	r1, r2
 8014006:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 80143b4 <MEMS_runMagCal+0x17c4>
 801400a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801400e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014012:	ee29 aa85 	vmul.f32	s20, s19, s10
 8014016:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801401a:	eef0 4a46 	vmov.f32	s9, s12
 801401e:	eeb0 4a46 	vmov.f32	s8, s12
 8014022:	eef0 3a46 	vmov.f32	s7, s12
 8014026:	eeb0 3a46 	vmov.f32	s6, s12
 801402a:	eef0 2a46 	vmov.f32	s5, s12
 801402e:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8014032:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8014036:	fb92 f3f0 	sdiv	r3, r2, r0
 801403a:	fb00 2313 	mls	r3, r0, r3, r2
 801403e:	b2db      	uxtb	r3, r3
 8014040:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014044:	3201      	adds	r2, #1
 8014046:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 801404a:	ee06 5a90 	vmov	s13, r5
 801404e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8014052:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8014056:	ee07 5a10 	vmov	s14, r5
 801405a:	ee07 3a90 	vmov	s15, r3
 801405e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014062:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801406a:	ee76 6ac9 	vsub.f32	s13, s13, s18
 801406e:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8014072:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8014076:	4291      	cmp	r1, r2
 8014078:	eee6 2aa6 	vfma.f32	s5, s13, s13
 801407c:	eea6 3a87 	vfma.f32	s6, s13, s14
 8014080:	eea7 4a07 	vfma.f32	s8, s14, s14
 8014084:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8014088:	eee7 4a27 	vfma.f32	s9, s14, s15
 801408c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8014090:	d1d1      	bne.n	8014036 <MEMS_runMagCal+0x1446>
 8014092:	edc4 2a00 	vstr	s5, [r4]
 8014096:	ed84 3a01 	vstr	s6, [r4, #4]
 801409a:	edc4 3a02 	vstr	s7, [r4, #8]
 801409e:	ed84 4a03 	vstr	s8, [r4, #12]
 80140a2:	edc4 4a04 	vstr	s9, [r4, #16]
 80140a6:	ed84 6a05 	vstr	s12, [r4, #20]
 80140aa:	a91a      	add	r1, sp, #104	; 0x68
 80140ac:	4620      	mov	r0, r4
 80140ae:	f7fe fce5 	bl	8012a7c <MEMS_EIG3>
 80140b2:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 80140b6:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 80140ba:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 80140be:	eef0 5ae4 	vabs.f32	s11, s9
 80140c2:	eef0 6ac6 	vabs.f32	s13, s12
 80140c6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80140ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ce:	bf8c      	ite	hi
 80140d0:	eef0 7a65 	vmovhi.f32	s15, s11
 80140d4:	eef0 7a66 	vmovls.f32	s15, s13
 80140d8:	eeb0 7ac5 	vabs.f32	s14, s10
 80140dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80140e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e4:	eef4 6ae5 	vcmpe.f32	s13, s11
 80140e8:	bf88      	it	hi
 80140ea:	eef0 7a47 	vmovhi.f32	s15, s14
 80140ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f2:	bfb8      	it	lt
 80140f4:	eef0 6a65 	vmovlt.f32	s13, s11
 80140f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80140fc:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8014100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014104:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8014108:	bfb8      	it	lt
 801410a:	eeb0 7a66 	vmovlt.f32	s14, s13
 801410e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014116:	f300 8420 	bgt.w	801495a <MEMS_runMagCal+0x1d6a>
 801411a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 801411e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014122:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412e:	dd02      	ble.n	8014136 <MEMS_runMagCal+0x1546>
 8014130:	2b22      	cmp	r3, #34	; 0x22
 8014132:	f240 8412 	bls.w	801495a <MEMS_runMagCal+0x1d6a>
 8014136:	ee76 7a24 	vadd.f32	s15, s12, s9
 801413a:	ee07 3a10 	vmov	s14, r3
 801413e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014142:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014146:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014388 <MEMS_runMagCal+0x1798>
 801414a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801414e:	eef1 7ac6 	vsqrt.f32	s15, s12
 8014152:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014156:	eef4 7ae6 	vcmpe.f32	s15, s13
 801415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801415e:	f300 83fc 	bgt.w	801495a <MEMS_runMagCal+0x1d6a>
 8014162:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8014166:	eef4 7ac7 	vcmpe.f32	s15, s14
 801416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416e:	f100 83f4 	bmi.w	801495a <MEMS_runMagCal+0x1d6a>
 8014172:	eddf 7a86 	vldr	s15, [pc, #536]	; 801438c <MEMS_runMagCal+0x179c>
 8014176:	ee87 7a88 	vdiv.f32	s14, s15, s16
 801417a:	2300      	movs	r3, #0
 801417c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8014180:	932c      	str	r3, [sp, #176]	; 0xb0
 8014182:	eddd 7a02 	vldr	s15, [sp, #8]
 8014186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801418a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	d408      	bmi.n	80141a6 <MEMS_runMagCal+0x15b6>
 8014194:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014198:	ee17 3a10 	vmov	r3, s14
 801419c:	b21b      	sxth	r3, r3
 801419e:	ee07 3a90 	vmov	s15, r3
 80141a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141a6:	eddf 6a81 	vldr	s13, [pc, #516]	; 80143ac <MEMS_runMagCal+0x17bc>
 80141aa:	ee86 7a88 	vdiv.f32	s14, s13, s16
 80141ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b6:	dc08      	bgt.n	80141ca <MEMS_runMagCal+0x15da>
 80141b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80141bc:	ee17 3a10 	vmov	r3, s14
 80141c0:	b21b      	sxth	r3, r3
 80141c2:	ee07 3a90 	vmov	s15, r3
 80141c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141ca:	ee27 7a88 	vmul.f32	s14, s15, s16
 80141ce:	eddf 7a70 	vldr	s15, [pc, #448]	; 8014390 <MEMS_runMagCal+0x17a0>
 80141d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	f340 8424 	ble.w	8014a26 <MEMS_runMagCal+0x1e36>
 80141de:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8014394 <MEMS_runMagCal+0x17a4>
 80141e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ea:	f140 841c 	bpl.w	8014a26 <MEMS_runMagCal+0x1e36>
 80141ee:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8014398 <MEMS_runMagCal+0x17a8>
 80141f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80141f6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80141fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80141fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014202:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80143ac <MEMS_runMagCal+0x17bc>
 8014206:	eddf ba6b 	vldr	s23, [pc, #428]	; 80143b4 <MEMS_runMagCal+0x17c4>
 801420a:	ed9f ba64 	vldr	s22, [pc, #400]	; 801439c <MEMS_runMagCal+0x17ac>
 801420e:	eddf aa64 	vldr	s21, [pc, #400]	; 80143a0 <MEMS_runMagCal+0x17b0>
 8014212:	9d03      	ldr	r5, [sp, #12]
 8014214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014218:	ee68 4a09 	vmul.f32	s9, s16, s18
 801421c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8014220:	ee68 9a29 	vmul.f32	s19, s16, s19
 8014224:	edc4 4a00 	vstr	s9, [r4]
 8014228:	ed84 aa01 	vstr	s20, [r4, #4]
 801422c:	edc4 9a02 	vstr	s19, [r4, #8]
 8014230:	edc4 7a03 	vstr	s15, [r4, #12]
 8014234:	edc4 7a06 	vstr	s15, [r4, #24]
 8014238:	ab11      	add	r3, sp, #68	; 0x44
 801423a:	ee1c 0a10 	vmov	r0, s24
 801423e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014240:	eeb0 0a48 	vmov.f32	s0, s16
 8014244:	4621      	mov	r1, r4
 8014246:	f7fe fa01 	bl	801264c <MEMS_SolveLinearEq>
 801424a:	1c6b      	adds	r3, r5, #1
 801424c:	2800      	cmp	r0, #0
 801424e:	f43e aed1 	beq.w	8012ff4 <MEMS_runMagCal+0x404>
 8014252:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8014256:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 801425a:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 801425e:	edd4 4a00 	vldr	s9, [r4]
 8014262:	ed94 5a01 	vldr	s10, [r4, #4]
 8014266:	edd4 5a02 	vldr	s11, [r4, #8]
 801426a:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 801426e:	ed94 6a03 	vldr	s12, [r4, #12]
 8014272:	eef0 6ae3 	vabs.f32	s13, s7
 8014276:	eef0 7ac3 	vabs.f32	s15, s6
 801427a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	bfb8      	it	lt
 8014284:	eef0 7a66 	vmovlt.f32	s15, s13
 8014288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014290:	bfb8      	it	lt
 8014292:	eef0 7a6b 	vmovlt.f32	s15, s23
 8014296:	eef0 6ac4 	vabs.f32	s13, s8
 801429a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a2:	bfb8      	it	lt
 80142a4:	eef0 6a67 	vmovlt.f32	s13, s15
 80142a8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80142ac:	ee35 5a23 	vadd.f32	s10, s10, s7
 80142b0:	ee75 5a84 	vadd.f32	s11, s11, s8
 80142b4:	ee36 6a07 	vadd.f32	s12, s12, s14
 80142b8:	eef4 6acb 	vcmpe.f32	s13, s22
 80142bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c0:	edc4 4a00 	vstr	s9, [r4]
 80142c4:	ed84 5a01 	vstr	s10, [r4, #4]
 80142c8:	edc4 5a02 	vstr	s11, [r4, #8]
 80142cc:	ed84 6a03 	vstr	s12, [r4, #12]
 80142d0:	eef0 7ac7 	vabs.f32	s15, s14
 80142d4:	d507      	bpl.n	80142e6 <MEMS_runMagCal+0x16f6>
 80142d6:	eef4 7aea 	vcmpe.f32	s15, s21
 80142da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142de:	d502      	bpl.n	80142e6 <MEMS_runMagCal+0x16f6>
 80142e0:	2d01      	cmp	r5, #1
 80142e2:	f63e ae8b 	bhi.w	8012ffc <MEMS_runMagCal+0x40c>
 80142e6:	b2dd      	uxtb	r5, r3
 80142e8:	2d05      	cmp	r5, #5
 80142ea:	d1a5      	bne.n	8014238 <MEMS_runMagCal+0x1648>
 80142ec:	f7fe be86 	b.w	8012ffc <MEMS_runMagCal+0x40c>
 80142f0:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 80142f4:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 80142f8:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 80142fc:	ed9f 4a29 	vldr	s8, [pc, #164]	; 80143a4 <MEMS_runMagCal+0x17b4>
 8014300:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014304:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8014308:	ee77 7a85 	vadd.f32	s15, s15, s10
 801430c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014310:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014314:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431c:	bf88      	it	hi
 801431e:	eef0 7a64 	vmovhi.f32	s15, s9
 8014322:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432a:	bfb8      	it	lt
 801432c:	eef0 7a45 	vmovlt.f32	s15, s10
 8014330:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014334:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	dc0e      	bgt.n	801435c <MEMS_runMagCal+0x176c>
 801433e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014342:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434a:	dc07      	bgt.n	801435c <MEMS_runMagCal+0x176c>
 801434c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014358:	f77f ad73 	ble.w	8013e42 <MEMS_runMagCal+0x1252>
 801435c:	2300      	movs	r3, #0
 801435e:	f88b 3000 	strb.w	r3, [fp]
 8014362:	f7ff b880 	b.w	8013466 <MEMS_runMagCal+0x876>
 8014366:	2300      	movs	r3, #0
 8014368:	9307      	str	r3, [sp, #28]
 801436a:	2301      	movs	r3, #1
 801436c:	9303      	str	r3, [sp, #12]
 801436e:	f7ff bb61 	b.w	8013a34 <MEMS_runMagCal+0xe44>
 8014372:	3301      	adds	r3, #1
 8014374:	fb93 f2f7 	sdiv	r2, r3, r7
 8014378:	fb07 3212 	mls	r2, r7, r2, r3
 801437c:	930b      	str	r3, [sp, #44]	; 0x2c
 801437e:	b212      	sxth	r2, r2
 8014380:	46bc      	mov	ip, r7
 8014382:	f7ff bb75 	b.w	8013a70 <MEMS_runMagCal+0xe80>
 8014386:	bf00      	nop
 8014388:	42960000 	.word	0x42960000
 801438c:	430d0000 	.word	0x430d0000
 8014390:	41966667 	.word	0x41966667
 8014394:	433c0000 	.word	0x433c0000
 8014398:	3c2e4c41 	.word	0x3c2e4c41
 801439c:	3e99999a 	.word	0x3e99999a
 80143a0:	3f666666 	.word	0x3f666666
 80143a4:	3eaaaaab 	.word	0x3eaaaaab
 80143a8:	358637bd 	.word	0x358637bd
 80143ac:	423c0000 	.word	0x423c0000
 80143b0:	3a83126f 	.word	0x3a83126f
 80143b4:	00000000 	.word	0x00000000
 80143b8:	eddd 7a08 	vldr	s15, [sp, #32]
 80143bc:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 80143b0 <MEMS_runMagCal+0x17c0>
 80143c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143c4:	ee07 3a10 	vmov	s14, r3
 80143c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80143cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80143d0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80143d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80143d8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80143dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e0:	f63f aa67 	bhi.w	80138b2 <MEMS_runMagCal+0xcc2>
 80143e4:	9b07      	ldr	r3, [sp, #28]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f43f a83d 	beq.w	8013466 <MEMS_runMagCal+0x876>
 80143ec:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80143f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80143f4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80143f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014404:	bf4c      	ite	mi
 8014406:	2301      	movmi	r3, #1
 8014408:	2300      	movpl	r3, #0
 801440a:	9307      	str	r3, [sp, #28]
 801440c:	f7ff ba55 	b.w	80138ba <MEMS_runMagCal+0xcca>
 8014410:	fb92 f1f0 	sdiv	r1, r2, r0
 8014414:	fb00 2211 	mls	r2, r0, r1, r2
 8014418:	b211      	sxth	r1, r2
 801441a:	4605      	mov	r5, r0
 801441c:	f7ff b8da 	b.w	80135d4 <MEMS_runMagCal+0x9e4>
 8014420:	2200      	movs	r2, #0
 8014422:	23ff      	movs	r3, #255	; 0xff
 8014424:	ee1c 0a10 	vmov	r0, s24
 8014428:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801442c:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8014430:	eeb0 0a49 	vmov.f32	s0, s18
 8014434:	4649      	mov	r1, r9
 8014436:	f7f7 fd11 	bl	800be5c <MEMS_updateMagBufferIndex>
 801443a:	f7ff b90b 	b.w	8013654 <MEMS_runMagCal+0xa64>
 801443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014442:	fb03 f60c 	mul.w	r6, r3, ip
 8014446:	fb03 f202 	mul.w	r2, r3, r2
 801444a:	fb03 f301 	mul.w	r3, r3, r1
 801444e:	ee06 6a90 	vmov	s13, r6
 8014452:	ee07 2a10 	vmov	s14, r2
 8014456:	ee07 3a90 	vmov	s15, r3
 801445a:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80143a8 <MEMS_runMagCal+0x17b8>
 801445e:	9e05      	ldr	r6, [sp, #20]
 8014460:	9400      	str	r4, [sp, #0]
 8014462:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801446a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801446e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014472:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014476:	ee67 7a86 	vmul.f32	s15, s15, s12
 801447a:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 801447e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8014482:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8014486:	e9c5 0005 	strd	r0, r0, [r5, #20]
 801448a:	6028      	str	r0, [r5, #0]
 801448c:	ed96 0a01 	vldr	s0, [r6, #4]
 8014490:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8014494:	4642      	mov	r2, r8
 8014496:	ab0d      	add	r3, sp, #52	; 0x34
 8014498:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 801449c:	ad0e      	add	r5, sp, #56	; 0x38
 801449e:	ee1c 0a10 	vmov	r0, s24
 80144a2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80144a6:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80144aa:	f7f7 fd79 	bl	800bfa0 <getMagStats.constprop.0>
 80144ae:	9500      	str	r5, [sp, #0]
 80144b0:	ed96 0a01 	vldr	s0, [r6, #4]
 80144b4:	ee1c 0a10 	vmov	r0, s24
 80144b8:	aa2d      	add	r2, sp, #180	; 0xb4
 80144ba:	ab0d      	add	r3, sp, #52	; 0x34
 80144bc:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80144c0:	f7f7 fd6e 	bl	800bfa0 <getMagStats.constprop.0>
 80144c4:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80143ac <MEMS_runMagCal+0x17bc>
 80144c8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80144cc:	ed95 7a00 	vldr	s14, [r5]
 80144d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80144d4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80144d8:	eef0 7ae7 	vabs.f32	s15, s15
 80144dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	d505      	bpl.n	80144f2 <MEMS_runMagCal+0x1902>
 80144e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80144ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ee:	f100 81fa 	bmi.w	80148e6 <MEMS_runMagCal+0x1cf6>
 80144f2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80144f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80144fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fe:	f140 81a8 	bpl.w	8014852 <MEMS_runMagCal+0x1c62>
 8014502:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450a:	9b03      	ldr	r3, [sp, #12]
 801450c:	bfb8      	it	lt
 801450e:	2302      	movlt	r3, #2
 8014510:	edd4 6a00 	vldr	s13, [r4]
 8014514:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801451c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014524:	f57e af9f 	bpl.w	8013466 <MEMS_runMagCal+0x876>
 8014528:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 801452c:	429a      	cmp	r2, r3
 801452e:	f63e af9a 	bhi.w	8013466 <MEMS_runMagCal+0x876>
 8014532:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014536:	ee67 7a27 	vmul.f32	s15, s14, s15
 801453a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014542:	d40e      	bmi.n	8014562 <MEMS_runMagCal+0x1972>
 8014544:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014548:	eef4 6ae7 	vcmpe.f32	s13, s15
 801454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014550:	f140 80d4 	bpl.w	80146fc <MEMS_runMagCal+0x1b0c>
 8014554:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8014558:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801455c:	429a      	cmp	r2, r3
 801455e:	f080 80cd 	bcs.w	80146fc <MEMS_runMagCal+0x1b0c>
 8014562:	9b05      	ldr	r3, [sp, #20]
 8014564:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8014568:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 801456c:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014570:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8014574:	edd3 5a01 	vldr	s11, [r3, #4]
 8014578:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 801457c:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014580:	1b8b      	subs	r3, r1, r6
 8014582:	eba0 0c07 	sub.w	ip, r0, r7
 8014586:	2b00      	cmp	r3, #0
 8014588:	bfb8      	it	lt
 801458a:	425b      	neglt	r3, r3
 801458c:	f1bc 0f00 	cmp.w	ip, #0
 8014590:	bfb8      	it	lt
 8014592:	f1cc 0c00 	rsblt	ip, ip, #0
 8014596:	4563      	cmp	r3, ip
 8014598:	bfb8      	it	lt
 801459a:	4663      	movlt	r3, ip
 801459c:	eba2 0c04 	sub.w	ip, r2, r4
 80145a0:	f1bc 0f00 	cmp.w	ip, #0
 80145a4:	b21b      	sxth	r3, r3
 80145a6:	bfb8      	it	lt
 80145a8:	f1cc 0c00 	rsblt	ip, ip, #0
 80145ac:	4563      	cmp	r3, ip
 80145ae:	bfb8      	it	lt
 80145b0:	4663      	movlt	r3, ip
 80145b2:	b21b      	sxth	r3, r3
 80145b4:	ee07 3a90 	vmov	s15, r3
 80145b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145bc:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80145c0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80145c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	f140 8096 	bpl.w	80146fc <MEMS_runMagCal+0x1b0c>
 80145d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80145d4:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80145d8:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80145dc:	ee04 3a90 	vmov	s9, r3
 80145e0:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 80145e4:	ee05 3a10 	vmov	s10, r3
 80145e8:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 80145ec:	ee07 0a90 	vmov	s15, r0
 80145f0:	ee05 3a90 	vmov	s11, r3
 80145f4:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80145f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80145fc:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014600:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014604:	ee06 3a10 	vmov	s12, r3
 8014608:	ee03 7a90 	vmov	s7, r7
 801460c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8014610:	ee07 1a90 	vmov	s15, r1
 8014614:	ee00 3a90 	vmov	s1, r3
 8014618:	ee66 6a84 	vmul.f32	s13, s13, s8
 801461c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014620:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014624:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801462c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014630:	ee03 6a90 	vmov	s7, r6
 8014634:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014638:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801463c:	ee07 2a90 	vmov	s15, r2
 8014640:	ee01 3a10 	vmov	s2, r3
 8014644:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014648:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801464c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8014650:	eee2 4a20 	vfma.f32	s9, s4, s1
 8014654:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014658:	ee01 3a90 	vmov	s3, r3
 801465c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014660:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8014664:	eea2 7a03 	vfma.f32	s14, s4, s6
 8014668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801466c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014670:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014674:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014678:	ee03 4a90 	vmov	s7, r4
 801467c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014680:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014684:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014688:	ee26 6a04 	vmul.f32	s12, s12, s8
 801468c:	ee16 2a90 	vmov	r2, s13
 8014690:	ee04 3a10 	vmov	s8, r3
 8014694:	eea2 5a01 	vfma.f32	s10, s4, s2
 8014698:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 801469c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80146a0:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80146a4:	eee2 7a23 	vfma.f32	s15, s4, s7
 80146a8:	ee14 2a90 	vmov	r2, s9
 80146ac:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80146b0:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80146b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80146b8:	eee2 5a21 	vfma.f32	s11, s4, s3
 80146bc:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80146c0:	eea2 6a04 	vfma.f32	s12, s4, s8
 80146c4:	ee17 2a10 	vmov	r2, s14
 80146c8:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80146cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146d0:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 80146d4:	ee15 2a10 	vmov	r2, s10
 80146d8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80146dc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80146e0:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80146e4:	ee17 2a90 	vmov	r2, s15
 80146e8:	ee16 3a10 	vmov	r3, s12
 80146ec:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 80146f0:	ee15 2a90 	vmov	r2, s11
 80146f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80146f8:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 80146fc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80146fe:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014702:	f7fe bda2 	b.w	801324a <MEMS_runMagCal+0x65a>
 8014706:	ee1c 0a10 	vmov	r0, s24
 801470a:	eeb0 0a49 	vmov.f32	s0, s18
 801470e:	4649      	mov	r1, r9
 8014710:	f7f7 fba4 	bl	800be5c <MEMS_updateMagBufferIndex>
 8014714:	f7ff b89f 	b.w	8013856 <MEMS_runMagCal+0xc66>
 8014718:	eddd 7a08 	vldr	s15, [sp, #32]
 801471c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 80143b0 <MEMS_runMagCal+0x17c0>
 8014720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014728:	e660      	b.n	80143ec <MEMS_runMagCal+0x17fc>
 801472a:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 80143b4 <MEMS_runMagCal+0x17c4>
 801472e:	1c6b      	adds	r3, r5, #1
 8014730:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014734:	ad0e      	add	r5, sp, #56	; 0x38
 8014736:	fb93 f1f6 	sdiv	r1, r3, r6
 801473a:	fa1f fc86 	uxth.w	ip, r6
 801473e:	fb06 3311 	mls	r3, r6, r1, r3
 8014742:	edc5 6a00 	vstr	s13, [r5]
 8014746:	2e00      	cmp	r6, #0
 8014748:	f000 80e1 	beq.w	801490e <MEMS_runMagCal+0x1d1e>
 801474c:	b29b      	uxth	r3, r3
 801474e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014752:	1c58      	adds	r0, r3, #1
 8014754:	eeb0 6a66 	vmov.f32	s12, s13
 8014758:	fa10 fc8c 	uxtah	ip, r0, ip
 801475c:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8014760:	4619      	mov	r1, r3
 8014762:	e000      	b.n	8014766 <MEMS_runMagCal+0x1b76>
 8014764:	3001      	adds	r0, #1
 8014766:	fbb1 f3f6 	udiv	r3, r1, r6
 801476a:	fb06 1313 	mls	r3, r6, r3, r1
 801476e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8014772:	8a99      	ldrh	r1, [r3, #20]
 8014774:	4571      	cmp	r1, lr
 8014776:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 801477a:	f1a3 031c 	sub.w	r3, r3, #28
 801477e:	bf98      	it	ls
 8014780:	ebae 0301 	subls.w	r3, lr, r1
 8014784:	b29b      	uxth	r3, r3
 8014786:	fb03 f303 	mul.w	r3, r3, r3
 801478a:	ee07 1a10 	vmov	s14, r1
 801478e:	ee07 3a90 	vmov	s15, r3
 8014792:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801479a:	4584      	cmp	ip, r0
 801479c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80147a0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80147a4:	4601      	mov	r1, r0
 80147a6:	d1dd      	bne.n	8014764 <MEMS_runMagCal+0x1b74>
 80147a8:	ee07 4a90 	vmov	s15, r4
 80147ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147b0:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014b4c <MEMS_runMagCal+0x1f5c>
 80147b4:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014b50 <MEMS_runMagCal+0x1f60>
 80147b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80147bc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80147c0:	eef1 7ac7 	vsqrt.f32	s15, s14
 80147c4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80147c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80147cc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80147d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80147d8:	edc5 7a00 	vstr	s15, [r5]
 80147dc:	dd47      	ble.n	801486e <MEMS_runMagCal+0x1c7e>
 80147de:	eddf 7add 	vldr	s15, [pc, #884]	; 8014b54 <MEMS_runMagCal+0x1f64>
 80147e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147e6:	2302      	movs	r3, #2
 80147e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ec:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80147f0:	f77e aead 	ble.w	801354e <MEMS_runMagCal+0x95e>
 80147f4:	2301      	movs	r3, #1
 80147f6:	f88b 3001 	strb.w	r3, [fp, #1]
 80147fa:	f7fe bea8 	b.w	801354e <MEMS_runMagCal+0x95e>
 80147fe:	ee1c 0a10 	vmov	r0, s24
 8014802:	eeb0 0a49 	vmov.f32	s0, s18
 8014806:	4649      	mov	r1, r9
 8014808:	f7f7 fb28 	bl	800be5c <MEMS_updateMagBufferIndex>
 801480c:	f7fe bf0d 	b.w	801362a <MEMS_runMagCal+0xa3a>
 8014810:	9b02      	ldr	r3, [sp, #8]
 8014812:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014816:	f8db 100c 	ldr.w	r1, [fp, #12]
 801481a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801481e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014822:	4413      	add	r3, r2
 8014824:	4299      	cmp	r1, r3
 8014826:	f4bf ad99 	bcs.w	801435c <MEMS_runMagCal+0x176c>
 801482a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801482c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014830:	fb03 f301 	mul.w	r3, r3, r1
 8014834:	3364      	adds	r3, #100	; 0x64
 8014836:	4293      	cmp	r3, r2
 8014838:	bf38      	it	cc
 801483a:	4613      	movcc	r3, r2
 801483c:	2200      	movs	r2, #0
 801483e:	f8cb 300c 	str.w	r3, [fp, #12]
 8014842:	f88b 2000 	strb.w	r2, [fp]
 8014846:	f7fe be0e 	b.w	8013466 <MEMS_runMagCal+0x876>
 801484a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801484e:	f7ff ba6f 	b.w	8013d30 <MEMS_runMagCal+0x1140>
 8014852:	9b03      	ldr	r3, [sp, #12]
 8014854:	e65c      	b.n	8014510 <MEMS_runMagCal+0x1920>
 8014856:	4619      	mov	r1, r3
 8014858:	9b02      	ldr	r3, [sp, #8]
 801485a:	3301      	adds	r3, #1
 801485c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014860:	fb01 3212 	mls	r2, r1, r2, r3
 8014864:	9304      	str	r3, [sp, #16]
 8014866:	b212      	sxth	r2, r2
 8014868:	4689      	mov	r9, r1
 801486a:	f7ff ba11 	b.w	8013c90 <MEMS_runMagCal+0x10a0>
 801486e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014b58 <MEMS_runMagCal+0x1f68>
 8014872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487a:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014b54 <MEMS_runMagCal+0x1f64>
 801487e:	d434      	bmi.n	80148ea <MEMS_runMagCal+0x1cfa>
 8014880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014888:	bfc4      	itt	gt
 801488a:	2301      	movgt	r3, #1
 801488c:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014890:	f7ff b892 	b.w	80139b8 <MEMS_runMagCal+0xdc8>
 8014894:	9b05      	ldr	r3, [sp, #20]
 8014896:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801489a:	ed93 0a01 	vldr	s0, [r3, #4]
 801489e:	f7fe bd84 	b.w	80133aa <MEMS_runMagCal+0x7ba>
 80148a2:	2303      	movs	r3, #3
 80148a4:	9303      	str	r3, [sp, #12]
 80148a6:	f7fe bdd4 	b.w	8013452 <MEMS_runMagCal+0x862>
 80148aa:	4619      	mov	r1, r3
 80148ac:	f7ff ba78 	b.w	8013da0 <MEMS_runMagCal+0x11b0>
 80148b0:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80148b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80148b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80148bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c0:	f73f ad4c 	bgt.w	801435c <MEMS_runMagCal+0x176c>
 80148c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80148c8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	f73f ad44 	bgt.w	801435c <MEMS_runMagCal+0x176c>
 80148d4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80148d8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80148dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e0:	f77f aaaf 	ble.w	8013e42 <MEMS_runMagCal+0x1252>
 80148e4:	e53a      	b.n	801435c <MEMS_runMagCal+0x176c>
 80148e6:	2303      	movs	r3, #3
 80148e8:	e612      	b.n	8014510 <MEMS_runMagCal+0x1920>
 80148ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148ee:	2300      	movs	r3, #0
 80148f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f4:	f88b 3001 	strb.w	r3, [fp, #1]
 80148f8:	f04f 0103 	mov.w	r1, #3
 80148fc:	bfc8      	it	gt
 80148fe:	2301      	movgt	r3, #1
 8014900:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014904:	bfc8      	it	gt
 8014906:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801490a:	f7ff b858 	b.w	80139be <MEMS_runMagCal+0xdce>
 801490e:	2303      	movs	r3, #3
 8014910:	f88b c001 	strb.w	ip, [fp, #1]
 8014914:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014918:	f7ff b851 	b.w	80139be <MEMS_runMagCal+0xdce>
 801491c:	9b04      	ldr	r3, [sp, #16]
 801491e:	fb93 f7f9 	sdiv	r7, r3, r9
 8014922:	fb09 3717 	mls	r7, r9, r7, r3
 8014926:	b23f      	sxth	r7, r7
 8014928:	f7ff ba9a 	b.w	8013e60 <MEMS_runMagCal+0x1270>
 801492c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014b5c <MEMS_runMagCal+0x1f6c>
 8014930:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014934:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014938:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801493c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014940:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014944:	ee17 2a90 	vmov	r2, s15
 8014948:	b291      	uxth	r1, r2
 801494a:	b113      	cbz	r3, 8014952 <MEMS_runMagCal+0x1d62>
 801494c:	3b01      	subs	r3, #1
 801494e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014952:	ee1c 0a10 	vmov	r0, s24
 8014956:	f7f7 fa81 	bl	800be5c <MEMS_updateMagBufferIndex>
 801495a:	eddd 7a08 	vldr	s15, [sp, #32]
 801495e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014962:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014b60 <MEMS_runMagCal+0x1f70>
 8014966:	ee20 0a27 	vmul.f32	s0, s0, s15
 801496a:	f001 f825 	bl	80159b8 <roundf>
 801496e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014972:	2300      	movs	r3, #0
 8014974:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014978:	f88b 3000 	strb.w	r3, [fp]
 801497c:	f7fe bd73 	b.w	8013466 <MEMS_runMagCal+0x876>
 8014980:	fb93 f2f6 	sdiv	r2, r3, r6
 8014984:	fb06 3312 	mls	r3, r6, r2, r3
 8014988:	b21a      	sxth	r2, r3
 801498a:	4630      	mov	r0, r6
 801498c:	f7ff bb00 	b.w	8013f90 <MEMS_runMagCal+0x13a0>
 8014990:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014994:	f001 f810 	bl	80159b8 <roundf>
 8014998:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801499c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80149a0:	ee17 3a90 	vmov	r3, s15
 80149a4:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 80149a8:	f8a9 3000 	strh.w	r3, [r9]
 80149ac:	f001 f804 	bl	80159b8 <roundf>
 80149b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80149b4:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 80149b8:	ee17 3a90 	vmov	r3, s15
 80149bc:	f8a9 3002 	strh.w	r3, [r9, #2]
 80149c0:	f000 fffa 	bl	80159b8 <roundf>
 80149c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80149c8:	ac0f      	add	r4, sp, #60	; 0x3c
 80149ca:	ee17 5a90 	vmov	r5, s15
 80149ce:	9400      	str	r4, [sp, #0]
 80149d0:	ee1c 0a10 	vmov	r0, s24
 80149d4:	4649      	mov	r1, r9
 80149d6:	ab10      	add	r3, sp, #64	; 0x40
 80149d8:	eeb0 0a48 	vmov.f32	s0, s16
 80149dc:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 80149e0:	f8a9 5004 	strh.w	r5, [r9, #4]
 80149e4:	f7f7 fadc 	bl	800bfa0 <getMagStats.constprop.0>
 80149e8:	ed94 7a00 	vldr	s14, [r4]
 80149ec:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014b64 <MEMS_runMagCal+0x1f74>
 80149f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f8:	d50e      	bpl.n	8014a18 <MEMS_runMagCal+0x1e28>
 80149fa:	b968      	cbnz	r0, 8014a18 <MEMS_runMagCal+0x1e28>
 80149fc:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014a00:	b32b      	cbz	r3, 8014a4e <MEMS_runMagCal+0x1e5e>
 8014a02:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014a06:	ee07 3a90 	vmov	s15, r3
 8014a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a0e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a16:	dc1a      	bgt.n	8014a4e <MEMS_runMagCal+0x1e5e>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	f8c9 3000 	str.w	r3, [r9]
 8014a1e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014a22:	f7ff ba97 	b.w	8013f54 <MEMS_runMagCal+0x1364>
 8014a26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a2a:	f7ff bbea 	b.w	8014202 <MEMS_runMagCal+0x1612>
 8014a2e:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014b68 <MEMS_runMagCal+0x1f78>
 8014a32:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014a36:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014a3a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014a3e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014a42:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014a46:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014a4a:	f7ff bb2e 	b.w	80140aa <MEMS_runMagCal+0x14ba>
 8014a4e:	eddd 7a08 	vldr	s15, [sp, #32]
 8014a52:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014a56:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014b60 <MEMS_runMagCal+0x1f70>
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a60:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014a64:	e781      	b.n	801496a <MEMS_runMagCal+0x1d7a>
 8014a66:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014b6c <MEMS_runMagCal+0x1f7c>
 8014a6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a72:	f77e ab1b 	ble.w	80130ac <MEMS_runMagCal+0x4bc>
 8014a76:	f7fe bb21 	b.w	80130bc <MEMS_runMagCal+0x4cc>
 8014a7a:	2224      	movs	r2, #36	; 0x24
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	a82d      	add	r0, sp, #180	; 0xb4
 8014a80:	f002 fda2 	bl	80175c8 <memset>
 8014a84:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014b70 <MEMS_runMagCal+0x1f80>
 8014a88:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014a8c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014a90:	4627      	mov	r7, r4
 8014a92:	ae2d      	add	r6, sp, #180	; 0xb4
 8014a94:	2500      	movs	r5, #0
 8014a96:	3501      	adds	r5, #1
 8014a98:	ecb7 0a01 	vldmia	r7!, {s0}
 8014a9c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014aa0:	f000 ff8a 	bl	80159b8 <roundf>
 8014aa4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014aa8:	4633      	mov	r3, r6
 8014aaa:	edc3 9a00 	vstr	s19, [r3]
 8014aae:	ee10 3a10 	vmov	r3, s0
 8014ab2:	2d03      	cmp	r5, #3
 8014ab4:	f829 3b02 	strh.w	r3, [r9], #2
 8014ab8:	f106 0610 	add.w	r6, r6, #16
 8014abc:	d1eb      	bne.n	8014a96 <MEMS_runMagCal+0x1ea6>
 8014abe:	ad12      	add	r5, sp, #72	; 0x48
 8014ac0:	9500      	str	r5, [sp, #0]
 8014ac2:	ab2b      	add	r3, sp, #172	; 0xac
 8014ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8014ac8:	ee1c 0a10 	vmov	r0, s24
 8014acc:	a915      	add	r1, sp, #84	; 0x54
 8014ace:	aa2d      	add	r2, sp, #180	; 0xb4
 8014ad0:	f7f7 fa66 	bl	800bfa0 <getMagStats.constprop.0>
 8014ad4:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014b70 <MEMS_runMagCal+0x1f80>
 8014ad8:	ed94 4a03 	vldr	s8, [r4, #12]
 8014adc:	edd5 7a00 	vldr	s15, [r5]
 8014ae0:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014ae4:	edd4 6a06 	vldr	s13, [r4, #24]
 8014ae8:	edd4 4a00 	vldr	s9, [r4]
 8014aec:	ed94 5a01 	vldr	s10, [r4, #4]
 8014af0:	edd4 5a02 	vldr	s11, [r4, #8]
 8014af4:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014af8:	ad2e      	add	r5, sp, #184	; 0xb8
 8014afa:	2300      	movs	r3, #0
 8014afc:	e9c5 3300 	strd	r3, r3, [r5]
 8014b00:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014b04:	60ab      	str	r3, [r5, #8]
 8014b06:	61ab      	str	r3, [r5, #24]
 8014b08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014b0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b14:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014b18:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014b1c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014b20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014b24:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014b28:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014b2c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014b30:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014b34:	d405      	bmi.n	8014b42 <MEMS_runMagCal+0x1f52>
 8014b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b3e:	f57e aa9b 	bpl.w	8013078 <MEMS_runMagCal+0x488>
 8014b42:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014b74 <MEMS_runMagCal+0x1f84>
 8014b46:	f7fe ba9d 	b.w	8013084 <MEMS_runMagCal+0x494>
 8014b4a:	bf00      	nop
 8014b4c:	3c23d70a 	.word	0x3c23d70a
 8014b50:	4b095440 	.word	0x4b095440
 8014b54:	481c4000 	.word	0x481c4000
 8014b58:	471c4000 	.word	0x471c4000
 8014b5c:	433d0000 	.word	0x433d0000
 8014b60:	3a83126f 	.word	0x3a83126f
 8014b64:	3ff4cccd 	.word	0x3ff4cccd
 8014b68:	7f800000 	.word	0x7f800000
 8014b6c:	3ee66666 	.word	0x3ee66666
 8014b70:	423c0000 	.word	0x423c0000
 8014b74:	00000000 	.word	0x00000000
 8014b78:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	f67e acac 	bls.w	80134da <MEMS_runMagCal+0x8ea>
 8014b82:	f7fe bca0 	b.w	80134c6 <MEMS_runMagCal+0x8d6>
 8014b86:	bf00      	nop

08014b88 <MotionFX_GetStateSize>:
 8014b88:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014b8c:	4770      	bx	lr
 8014b8e:	bf00      	nop

08014b90 <MotionFX_initialize>:
 8014b90:	4a3b      	ldr	r2, [pc, #236]	; (8014c80 <MotionFX_initialize+0xf0>)
 8014b92:	493c      	ldr	r1, [pc, #240]	; (8014c84 <MotionFX_initialize+0xf4>)
 8014b94:	6813      	ldr	r3, [r2, #0]
 8014b96:	f023 0301 	bic.w	r3, r3, #1
 8014b9a:	b530      	push	{r4, r5, lr}
 8014b9c:	6013      	str	r3, [r2, #0]
 8014b9e:	680b      	ldr	r3, [r1, #0]
 8014ba0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014ba4:	4013      	ands	r3, r2
 8014ba6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014baa:	42ab      	cmp	r3, r5
 8014bac:	b085      	sub	sp, #20
 8014bae:	4604      	mov	r4, r0
 8014bb0:	d013      	beq.n	8014bda <MotionFX_initialize+0x4a>
 8014bb2:	680b      	ldr	r3, [r1, #0]
 8014bb4:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014bb8:	4013      	ands	r3, r2
 8014bba:	428b      	cmp	r3, r1
 8014bbc:	d00d      	beq.n	8014bda <MotionFX_initialize+0x4a>
 8014bbe:	4b32      	ldr	r3, [pc, #200]	; (8014c88 <MotionFX_initialize+0xf8>)
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	601a      	str	r2, [r3, #0]
 8014bc4:	681a      	ldr	r2, [r3, #0]
 8014bc6:	2a00      	cmp	r2, #0
 8014bc8:	d1fc      	bne.n	8014bc4 <MotionFX_initialize+0x34>
 8014bca:	4b30      	ldr	r3, [pc, #192]	; (8014c8c <MotionFX_initialize+0xfc>)
 8014bcc:	4a30      	ldr	r2, [pc, #192]	; (8014c90 <MotionFX_initialize+0x100>)
 8014bce:	601a      	str	r2, [r3, #0]
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	4b30      	ldr	r3, [pc, #192]	; (8014c94 <MotionFX_initialize+0x104>)
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d01f      	beq.n	8014c18 <MotionFX_initialize+0x88>
 8014bd8:	e7fe      	b.n	8014bd8 <MotionFX_initialize+0x48>
 8014bda:	4b2f      	ldr	r3, [pc, #188]	; (8014c98 <MotionFX_initialize+0x108>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1ed      	bne.n	8014bbe <MotionFX_initialize+0x2e>
 8014be2:	4a2e      	ldr	r2, [pc, #184]	; (8014c9c <MotionFX_initialize+0x10c>)
 8014be4:	6813      	ldr	r3, [r2, #0]
 8014be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014bea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014bee:	d006      	beq.n	8014bfe <MotionFX_initialize+0x6e>
 8014bf0:	6813      	ldr	r3, [r2, #0]
 8014bf2:	f240 4283 	movw	r2, #1155	; 0x483
 8014bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d1df      	bne.n	8014bbe <MotionFX_initialize+0x2e>
 8014bfe:	4b28      	ldr	r3, [pc, #160]	; (8014ca0 <MotionFX_initialize+0x110>)
 8014c00:	2201      	movs	r2, #1
 8014c02:	601a      	str	r2, [r3, #0]
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	2a00      	cmp	r2, #0
 8014c08:	d1fc      	bne.n	8014c04 <MotionFX_initialize+0x74>
 8014c0a:	4b26      	ldr	r3, [pc, #152]	; (8014ca4 <MotionFX_initialize+0x114>)
 8014c0c:	4a20      	ldr	r2, [pc, #128]	; (8014c90 <MotionFX_initialize+0x100>)
 8014c0e:	601a      	str	r2, [r3, #0]
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	4b20      	ldr	r3, [pc, #128]	; (8014c94 <MotionFX_initialize+0x104>)
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d1df      	bne.n	8014bd8 <MotionFX_initialize+0x48>
 8014c18:	4b23      	ldr	r3, [pc, #140]	; (8014ca8 <MotionFX_initialize+0x118>)
 8014c1a:	4a24      	ldr	r2, [pc, #144]	; (8014cac <MotionFX_initialize+0x11c>)
 8014c1c:	9301      	str	r3, [sp, #4]
 8014c1e:	2501      	movs	r5, #1
 8014c20:	4620      	mov	r0, r4
 8014c22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c26:	7115      	strb	r5, [r2, #4]
 8014c28:	f7f7 faa0 	bl	800c16c <MFX_emptyAttitude>
 8014c2c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014c30:	a901      	add	r1, sp, #4
 8014c32:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014c36:	f7f6 fdc3 	bl	800b7c0 <updateOrientation>
 8014c3a:	a903      	add	r1, sp, #12
 8014c3c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014c40:	f7f6 fdbe 	bl	800b7c0 <updateOrientation>
 8014c44:	a902      	add	r1, sp, #8
 8014c46:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014c4a:	f7f6 fdb9 	bl	800b7c0 <updateOrientation>
 8014c4e:	4818      	ldr	r0, [pc, #96]	; (8014cb0 <MotionFX_initialize+0x120>)
 8014c50:	4918      	ldr	r1, [pc, #96]	; (8014cb4 <MotionFX_initialize+0x124>)
 8014c52:	4a19      	ldr	r2, [pc, #100]	; (8014cb8 <MotionFX_initialize+0x128>)
 8014c54:	4b19      	ldr	r3, [pc, #100]	; (8014cbc <MotionFX_initialize+0x12c>)
 8014c56:	7365      	strb	r5, [r4, #13]
 8014c58:	4d19      	ldr	r5, [pc, #100]	; (8014cc0 <MotionFX_initialize+0x130>)
 8014c5a:	62a0      	str	r0, [r4, #40]	; 0x28
 8014c5c:	6361      	str	r1, [r4, #52]	; 0x34
 8014c5e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014c62:	2100      	movs	r1, #0
 8014c64:	61a2      	str	r2, [r4, #24]
 8014c66:	61e3      	str	r3, [r4, #28]
 8014c68:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014c6c:	f240 1301 	movw	r3, #257	; 0x101
 8014c70:	6225      	str	r5, [r4, #32]
 8014c72:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014c74:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014c78:	80a2      	strh	r2, [r4, #4]
 8014c7a:	81e3      	strh	r3, [r4, #14]
 8014c7c:	b005      	add	sp, #20
 8014c7e:	bd30      	pop	{r4, r5, pc}
 8014c80:	e0002000 	.word	0xe0002000
 8014c84:	e000ed00 	.word	0xe000ed00
 8014c88:	40023008 	.word	0x40023008
 8014c8c:	40023000 	.word	0x40023000
 8014c90:	f407a5c2 	.word	0xf407a5c2
 8014c94:	b5e8b5cd 	.word	0xb5e8b5cd
 8014c98:	e0042000 	.word	0xe0042000
 8014c9c:	5c001000 	.word	0x5c001000
 8014ca0:	58024c08 	.word	0x58024c08
 8014ca4:	58024c00 	.word	0x58024c00
 8014ca8:	00756e65 	.word	0x00756e65
 8014cac:	20000188 	.word	0x20000188
 8014cb0:	3f666666 	.word	0x3f666666
 8014cb4:	3f2ac083 	.word	0x3f2ac083
 8014cb8:	3a51b717 	.word	0x3a51b717
 8014cbc:	3a378034 	.word	0x3a378034
 8014cc0:	3b378034 	.word	0x3b378034

08014cc4 <MotionFX_setKnobs>:
 8014cc4:	4b23      	ldr	r3, [pc, #140]	; (8014d54 <MotionFX_setKnobs+0x90>)
 8014cc6:	791b      	ldrb	r3, [r3, #4]
 8014cc8:	b903      	cbnz	r3, 8014ccc <MotionFX_setKnobs+0x8>
 8014cca:	4770      	bx	lr
 8014ccc:	2900      	cmp	r1, #0
 8014cce:	d0fc      	beq.n	8014cca <MotionFX_setKnobs+0x6>
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	684a      	ldr	r2, [r1, #4]
 8014cd6:	6808      	ldr	r0, [r1, #0]
 8014cd8:	688b      	ldr	r3, [r1, #8]
 8014cda:	6363      	str	r3, [r4, #52]	; 0x34
 8014cdc:	62a0      	str	r0, [r4, #40]	; 0x28
 8014cde:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014ce0:	7b0b      	ldrb	r3, [r1, #12]
 8014ce2:	7163      	strb	r3, [r4, #5]
 8014ce4:	6908      	ldr	r0, [r1, #16]
 8014ce6:	694a      	ldr	r2, [r1, #20]
 8014ce8:	698b      	ldr	r3, [r1, #24]
 8014cea:	6223      	str	r3, [r4, #32]
 8014cec:	61e2      	str	r2, [r4, #28]
 8014cee:	61a0      	str	r0, [r4, #24]
 8014cf0:	7f0b      	ldrb	r3, [r1, #28]
 8014cf2:	7123      	strb	r3, [r4, #4]
 8014cf4:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014cf8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014cfc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014cfe:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014d02:	460a      	mov	r2, r1
 8014d04:	460b      	mov	r3, r1
 8014d06:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014d0a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014d0e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014d12:	7889      	ldrb	r1, [r1, #2]
 8014d14:	7892      	ldrb	r2, [r2, #2]
 8014d16:	789b      	ldrb	r3, [r3, #2]
 8014d18:	b084      	sub	sp, #16
 8014d1a:	f88d 1006 	strb.w	r1, [sp, #6]
 8014d1e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014d22:	a901      	add	r1, sp, #4
 8014d24:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014d28:	f88d 200a 	strb.w	r2, [sp, #10]
 8014d2c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014d30:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014d34:	f88d 300e 	strb.w	r3, [sp, #14]
 8014d38:	f7f6 fd42 	bl	800b7c0 <updateOrientation>
 8014d3c:	a903      	add	r1, sp, #12
 8014d3e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014d42:	f7f6 fd3d 	bl	800b7c0 <updateOrientation>
 8014d46:	a902      	add	r1, sp, #8
 8014d48:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014d4c:	f7f6 fd38 	bl	800b7c0 <updateOrientation>
 8014d50:	b004      	add	sp, #16
 8014d52:	bd70      	pop	{r4, r5, r6, pc}
 8014d54:	20000188 	.word	0x20000188

08014d58 <MotionFX_getKnobs>:
 8014d58:	4b1c      	ldr	r3, [pc, #112]	; (8014dcc <MotionFX_getKnobs+0x74>)
 8014d5a:	791b      	ldrb	r3, [r3, #4]
 8014d5c:	b903      	cbnz	r3, 8014d60 <MotionFX_getKnobs+0x8>
 8014d5e:	4770      	bx	lr
 8014d60:	460a      	mov	r2, r1
 8014d62:	2900      	cmp	r1, #0
 8014d64:	d0fb      	beq.n	8014d5e <MotionFX_getKnobs+0x6>
 8014d66:	b510      	push	{r4, lr}
 8014d68:	4604      	mov	r4, r0
 8014d6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d70:	6093      	str	r3, [r2, #8]
 8014d72:	6010      	str	r0, [r2, #0]
 8014d74:	6051      	str	r1, [r2, #4]
 8014d76:	7963      	ldrb	r3, [r4, #5]
 8014d78:	7313      	strb	r3, [r2, #12]
 8014d7a:	69a0      	ldr	r0, [r4, #24]
 8014d7c:	69e1      	ldr	r1, [r4, #28]
 8014d7e:	6a23      	ldr	r3, [r4, #32]
 8014d80:	6193      	str	r3, [r2, #24]
 8014d82:	6110      	str	r0, [r2, #16]
 8014d84:	6151      	str	r1, [r2, #20]
 8014d86:	7923      	ldrb	r3, [r4, #4]
 8014d88:	7713      	strb	r3, [r2, #28]
 8014d8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014d8e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014d92:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014d98:	f102 011d 	add.w	r1, r2, #29
 8014d9c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014da0:	f7f6 fb66 	bl	800b470 <findAxis>
 8014da4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014da8:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014dac:	f7f6 fb60 	bl	800b470 <findAxis>
 8014db0:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014db4:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014db8:	f7f6 fb5a 	bl	800b470 <findAxis>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	f882 3020 	strb.w	r3, [r2, #32]
 8014dc2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014dc6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014dca:	bd10      	pop	{r4, pc}
 8014dcc:	20000188 	.word	0x20000188

08014dd0 <MotionFX_enable_6X>:
 8014dd0:	4b0e      	ldr	r3, [pc, #56]	; (8014e0c <MotionFX_enable_6X+0x3c>)
 8014dd2:	791b      	ldrb	r3, [r3, #4]
 8014dd4:	b903      	cbnz	r3, 8014dd8 <MotionFX_enable_6X+0x8>
 8014dd6:	4770      	bx	lr
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	d0fc      	beq.n	8014dd6 <MotionFX_enable_6X+0x6>
 8014ddc:	b530      	push	{r4, r5, lr}
 8014dde:	1d05      	adds	r5, r0, #4
 8014de0:	b099      	sub	sp, #100	; 0x64
 8014de2:	4604      	mov	r4, r0
 8014de4:	4629      	mov	r1, r5
 8014de6:	225c      	movs	r2, #92	; 0x5c
 8014de8:	a801      	add	r0, sp, #4
 8014dea:	f002 fbdf 	bl	80175ac <memcpy>
 8014dee:	4620      	mov	r0, r4
 8014df0:	f7f7 f9bc 	bl	800c16c <MFX_emptyAttitude>
 8014df4:	a901      	add	r1, sp, #4
 8014df6:	4628      	mov	r0, r5
 8014df8:	225c      	movs	r2, #92	; 0x5c
 8014dfa:	f002 fbd7 	bl	80175ac <memcpy>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014e04:	7363      	strb	r3, [r4, #13]
 8014e06:	b019      	add	sp, #100	; 0x64
 8014e08:	bd30      	pop	{r4, r5, pc}
 8014e0a:	bf00      	nop
 8014e0c:	20000188 	.word	0x20000188

08014e10 <MotionFX_enable_9X>:
 8014e10:	4b0e      	ldr	r3, [pc, #56]	; (8014e4c <MotionFX_enable_9X+0x3c>)
 8014e12:	791b      	ldrb	r3, [r3, #4]
 8014e14:	b903      	cbnz	r3, 8014e18 <MotionFX_enable_9X+0x8>
 8014e16:	4770      	bx	lr
 8014e18:	2900      	cmp	r1, #0
 8014e1a:	d0fc      	beq.n	8014e16 <MotionFX_enable_9X+0x6>
 8014e1c:	b530      	push	{r4, r5, lr}
 8014e1e:	1d05      	adds	r5, r0, #4
 8014e20:	b099      	sub	sp, #100	; 0x64
 8014e22:	4604      	mov	r4, r0
 8014e24:	4629      	mov	r1, r5
 8014e26:	225c      	movs	r2, #92	; 0x5c
 8014e28:	a801      	add	r0, sp, #4
 8014e2a:	f002 fbbf 	bl	80175ac <memcpy>
 8014e2e:	4620      	mov	r0, r4
 8014e30:	f7f7 f99c 	bl	800c16c <MFX_emptyAttitude>
 8014e34:	a901      	add	r1, sp, #4
 8014e36:	4628      	mov	r0, r5
 8014e38:	225c      	movs	r2, #92	; 0x5c
 8014e3a:	f002 fbb7 	bl	80175ac <memcpy>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014e44:	7363      	strb	r3, [r4, #13]
 8014e46:	b019      	add	sp, #100	; 0x64
 8014e48:	bd30      	pop	{r4, r5, pc}
 8014e4a:	bf00      	nop
 8014e4c:	20000188 	.word	0x20000188

08014e50 <MotionFX_update>:
 8014e50:	b470      	push	{r4, r5, r6}
 8014e52:	4c06      	ldr	r4, [pc, #24]	; (8014e6c <MotionFX_update+0x1c>)
 8014e54:	9e03      	ldr	r6, [sp, #12]
 8014e56:	7925      	ldrb	r5, [r4, #4]
 8014e58:	b90d      	cbnz	r5, 8014e5e <MotionFX_update+0xe>
 8014e5a:	bc70      	pop	{r4, r5, r6}
 8014e5c:	4770      	bx	lr
 8014e5e:	461c      	mov	r4, r3
 8014e60:	ed94 0a00 	vldr	s0, [r4]
 8014e64:	4633      	mov	r3, r6
 8014e66:	bc70      	pop	{r4, r5, r6}
 8014e68:	f7fc bf02 	b.w	8011c70 <iNemoEngine_API_Update>
 8014e6c:	20000188 	.word	0x20000188

08014e70 <MotionFX_propagate>:
 8014e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e74:	ed2d 8b06 	vpush	{d8-d10}
 8014e78:	4ca3      	ldr	r4, [pc, #652]	; (8015108 <MotionFX_propagate+0x298>)
 8014e7a:	7927      	ldrb	r7, [r4, #4]
 8014e7c:	b0a0      	sub	sp, #128	; 0x80
 8014e7e:	b927      	cbnz	r7, 8014e8a <MotionFX_propagate+0x1a>
 8014e80:	b020      	add	sp, #128	; 0x80
 8014e82:	ecbd 8b06 	vpop	{d8-d10}
 8014e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e8a:	4616      	mov	r6, r2
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014e92:	edd3 9a00 	vldr	s19, [r3]
 8014e96:	460d      	mov	r5, r1
 8014e98:	6851      	ldr	r1, [r2, #4]
 8014e9a:	6892      	ldr	r2, [r2, #8]
 8014e9c:	ab13      	add	r3, sp, #76	; 0x4c
 8014e9e:	c307      	stmia	r3!, {r0, r1, r2}
 8014ea0:	6830      	ldr	r0, [r6, #0]
 8014ea2:	6871      	ldr	r1, [r6, #4]
 8014ea4:	68b2      	ldr	r2, [r6, #8]
 8014ea6:	ab10      	add	r3, sp, #64	; 0x40
 8014ea8:	c307      	stmia	r3!, {r0, r1, r2}
 8014eaa:	4637      	mov	r7, r6
 8014eac:	ab16      	add	r3, sp, #88	; 0x58
 8014eae:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014eb2:	6879      	ldr	r1, [r7, #4]
 8014eb4:	68ba      	ldr	r2, [r7, #8]
 8014eb6:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8014eba:	c307      	stmia	r3!, {r0, r1, r2}
 8014ebc:	aa13      	add	r2, sp, #76	; 0x4c
 8014ebe:	4651      	mov	r1, sl
 8014ec0:	a803      	add	r0, sp, #12
 8014ec2:	f7f6 fa73 	bl	800b3ac <rotVect>
 8014ec6:	aa16      	add	r2, sp, #88	; 0x58
 8014ec8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014ecc:	a806      	add	r0, sp, #24
 8014ece:	f7f6 fa6d 	bl	800b3ac <rotVect>
 8014ed2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014ed6:	2b09      	cmp	r3, #9
 8014ed8:	d829      	bhi.n	8014f2e <MotionFX_propagate+0xbe>
 8014eda:	eddd 8a04 	vldr	s17, [sp, #16]
 8014ede:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014ee2:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014ee6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014eea:	eee9 7a09 	vfma.f32	s15, s18, s18
 8014eee:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014ef2:	ee17 0a90 	vmov	r0, s15
 8014ef6:	f7eb facb 	bl	8000490 <__aeabi_f2d>
 8014efa:	ec41 0b10 	vmov	d0, r0, r1
 8014efe:	f000 fded 	bl	8015adc <sqrt>
 8014f02:	ec51 0b10 	vmov	r0, r1, d0
 8014f06:	f7eb fdcb 	bl	8000aa0 <__aeabi_d2f>
 8014f0a:	ee07 0a90 	vmov	s15, r0
 8014f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f12:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014f16:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014f1a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014f1e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f22:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014f26:	edcd 8a04 	vstr	s17, [sp, #16]
 8014f2a:	ed8d 8a05 	vstr	s16, [sp, #20]
 8014f2e:	7923      	ldrb	r3, [r4, #4]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f000 80d3 	beq.w	80150dc <MotionFX_propagate+0x26c>
 8014f36:	ee07 3a90 	vmov	s15, r3
 8014f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f46:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8014f4a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8014f4e:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8014f52:	edd2 7a00 	vldr	s15, [r2]
 8014f56:	eddd 8a06 	vldr	s17, [sp, #24]
 8014f5a:	ed9d 6a07 	vldr	s12, [sp, #28]
 8014f5e:	ed9d 8a08 	vldr	s16, [sp, #32]
 8014f62:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801510c <MotionFX_propagate+0x29c>
 8014f66:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8015110 <MotionFX_propagate+0x2a0>
 8014f6a:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8014f6e:	ee26 9a07 	vmul.f32	s18, s12, s14
 8014f72:	edc2 7a00 	vstr	s15, [r2]
 8014f76:	edd3 7a00 	vldr	s15, [r3]
 8014f7a:	ed8d 9a07 	vstr	s18, [sp, #28]
 8014f7e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014f82:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014f86:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014f8a:	edc3 7a00 	vstr	s15, [r3]
 8014f8e:	edd2 7a00 	vldr	s15, [r2]
 8014f92:	edcd 8a06 	vstr	s17, [sp, #24]
 8014f96:	eee6 7a88 	vfma.f32	s15, s13, s16
 8014f9a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8014f9e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014fa2:	edc2 7a00 	vstr	s15, [r2]
 8014fa6:	edd3 7a00 	vldr	s15, [r3]
 8014faa:	ed8d 8a08 	vstr	s16, [sp, #32]
 8014fae:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014fb2:	ed93 7a00 	vldr	s14, [r3]
 8014fb6:	ee39 9a67 	vsub.f32	s18, s18, s15
 8014fba:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8014fbe:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014fc2:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014fc6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014fca:	ed93 7a00 	vldr	s14, [r3]
 8014fce:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014fd2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014fd6:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014fda:	ee29 0a80 	vmul.f32	s0, s19, s0
 8014fde:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe6:	dd7e      	ble.n	80150e6 <MotionFX_propagate+0x276>
 8014fe8:	eeb1 aae7 	vsqrt.f32	s20, s15
 8014fec:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014ff0:	eeb0 0a69 	vmov.f32	s0, s19
 8014ff4:	f000 fd06 	bl	8015a04 <sinf>
 8014ff8:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8014ffc:	eeb0 0a69 	vmov.f32	s0, s19
 8015000:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015004:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015008:	ee28 8a27 	vmul.f32	s16, s16, s15
 801500c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8015010:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8015014:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015018:	f000 fc8e 	bl	8015938 <cosf>
 801501c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8015020:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8015024:	a809      	add	r0, sp, #36	; 0x24
 8015026:	4632      	mov	r2, r6
 8015028:	4631      	mov	r1, r6
 801502a:	f7f6 fc55 	bl	800b8d8 <qmult>
 801502e:	edd8 7a00 	vldr	s15, [r8]
 8015032:	ed96 7a00 	vldr	s14, [r6]
 8015036:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801503a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 801503e:	edd9 6a00 	vldr	s13, [r9]
 8015042:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015046:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 801504a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801504e:	3301      	adds	r3, #1
 8015050:	aa13      	add	r2, sp, #76	; 0x4c
 8015052:	edd7 6a00 	vldr	s13, [r7]
 8015056:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801505a:	4651      	mov	r1, sl
 801505c:	a809      	add	r0, sp, #36	; 0x24
 801505e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015062:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015066:	eef1 6ae7 	vsqrt.f32	s13, s15
 801506a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801506e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015072:	ed86 7a00 	vstr	s14, [r6]
 8015076:	ed99 7a00 	vldr	s14, [r9]
 801507a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801507e:	ed89 7a00 	vstr	s14, [r9]
 8015082:	ed98 7a00 	vldr	s14, [r8]
 8015086:	ee27 7a27 	vmul.f32	s14, s14, s15
 801508a:	ed88 7a00 	vstr	s14, [r8]
 801508e:	ed97 7a00 	vldr	s14, [r7]
 8015092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015096:	edc7 7a00 	vstr	s15, [r7]
 801509a:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801509e:	f7f6 f985 	bl	800b3ac <rotVect>
 80150a2:	f8d9 0000 	ldr.w	r0, [r9]
 80150a6:	f8d8 1000 	ldr.w	r1, [r8]
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	6833      	ldr	r3, [r6, #0]
 80150ae:	60eb      	str	r3, [r5, #12]
 80150b0:	6128      	str	r0, [r5, #16]
 80150b2:	6169      	str	r1, [r5, #20]
 80150b4:	61aa      	str	r2, [r5, #24]
 80150b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80150ba:	9301      	str	r3, [sp, #4]
 80150bc:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	a909      	add	r1, sp, #36	; 0x24
 80150c4:	f105 031c 	add.w	r3, r5, #28
 80150c8:	462a      	mov	r2, r5
 80150ca:	f105 000c 	add.w	r0, r5, #12
 80150ce:	f7f7 fc2b 	bl	800c928 <output_update>
 80150d2:	b020      	add	sp, #128	; 0x80
 80150d4:	ecbd 8b06 	vpop	{d8-d10}
 80150d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150dc:	2301      	movs	r3, #1
 80150de:	7123      	strb	r3, [r4, #4]
 80150e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150e4:	e72f      	b.n	8014f46 <MotionFX_propagate+0xd6>
 80150e6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80150ea:	ee29 9a00 	vmul.f32	s18, s18, s0
 80150ee:	ee28 8a00 	vmul.f32	s16, s16, s0
 80150f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80150f6:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80150fa:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80150fe:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015102:	930c      	str	r3, [sp, #48]	; 0x30
 8015104:	e78c      	b.n	8015020 <MotionFX_propagate+0x1b0>
 8015106:	bf00      	nop
 8015108:	20000188 	.word	0x20000188
 801510c:	3c8efa35 	.word	0x3c8efa35
 8015110:	38d1b718 	.word	0x38d1b718

08015114 <MotionFX_MagCal_init>:
 8015114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015116:	4c44      	ldr	r4, [pc, #272]	; (8015228 <MotionFX_MagCal_init+0x114>)
 8015118:	7923      	ldrb	r3, [r4, #4]
 801511a:	b903      	cbnz	r3, 801511e <MotionFX_MagCal_init+0xa>
 801511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801511e:	1e43      	subs	r3, r0, #1
 8015120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015124:	4605      	mov	r5, r0
 8015126:	d2f9      	bcs.n	801511c <MotionFX_MagCal_init+0x8>
 8015128:	2900      	cmp	r1, #0
 801512a:	d139      	bne.n	80151a0 <MotionFX_MagCal_init+0x8c>
 801512c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8015130:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015134:	4a3d      	ldr	r2, [pc, #244]	; (801522c <MotionFX_MagCal_init+0x118>)
 8015136:	1b5b      	subs	r3, r3, r5
 8015138:	ee07 3a90 	vmov	s15, r3
 801513c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015140:	23c8      	movs	r3, #200	; 0xc8
 8015142:	eef0 7ae7 	vabs.f32	s15, s15
 8015146:	fb93 f3f5 	sdiv	r3, r3, r5
 801514a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b0f      	cmp	r3, #15
 8015152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015156:	bf28      	it	cs
 8015158:	230f      	movcs	r3, #15
 801515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801515e:	6015      	str	r5, [r2, #0]
 8015160:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8015164:	b22d      	sxth	r5, r5
 8015166:	dc0e      	bgt.n	8015186 <MotionFX_MagCal_init+0x72>
 8015168:	edd4 7a03 	vldr	s15, [r4, #12]
 801516c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015230 <MotionFX_MagCal_init+0x11c>
 8015170:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8015234 <MotionFX_MagCal_init+0x120>
 8015174:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015178:	eef0 7ae7 	vabs.f32	s15, s15
 801517c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015184:	dd08      	ble.n	8015198 <MotionFX_MagCal_init+0x84>
 8015186:	2300      	movs	r3, #0
 8015188:	492b      	ldr	r1, [pc, #172]	; (8015238 <MotionFX_MagCal_init+0x124>)
 801518a:	8165      	strh	r5, [r4, #10]
 801518c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015190:	60e1      	str	r1, [r4, #12]
 8015192:	8223      	strh	r3, [r4, #16]
 8015194:	6163      	str	r3, [r4, #20]
 8015196:	8122      	strh	r2, [r4, #8]
 8015198:	2300      	movs	r3, #0
 801519a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151a0:	2600      	movs	r6, #0
 80151a2:	4826      	ldr	r0, [pc, #152]	; (801523c <MotionFX_MagCal_init+0x128>)
 80151a4:	61a0      	str	r0, [r4, #24]
 80151a6:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 80151aa:	4631      	mov	r1, r6
 80151ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80151b0:	6122      	str	r2, [r4, #16]
 80151b2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80151b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80151ba:	6166      	str	r6, [r4, #20]
 80151bc:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80151c0:	6566      	str	r6, [r4, #84]	; 0x54
 80151c2:	83a6      	strh	r6, [r4, #28]
 80151c4:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80151c8:	f002 f9fe 	bl	80175c8 <memset>
 80151cc:	23ff      	movs	r3, #255	; 0xff
 80151ce:	225f      	movs	r2, #95	; 0x5f
 80151d0:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80151d4:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80151d8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80151dc:	2200      	movs	r2, #0
 80151de:	2300      	movs	r3, #0
 80151e0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80151e4:	f44f 7780 	mov.w	r7, #256	; 0x100
 80151e8:	4631      	mov	r1, r6
 80151ea:	62a6      	str	r6, [r4, #40]	; 0x28
 80151ec:	2230      	movs	r2, #48	; 0x30
 80151ee:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 80151f2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80151f6:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80151fa:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80151fc:	f002 f9e4 	bl	80175c8 <memset>
 8015200:	f1a5 030a 	sub.w	r3, r5, #10
 8015204:	b29b      	uxth	r3, r3
 8015206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801520a:	2b32      	cmp	r3, #50	; 0x32
 801520c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8015210:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8015214:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8015218:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801521c:	d888      	bhi.n	8015130 <MotionFX_MagCal_init+0x1c>
 801521e:	2301      	movs	r3, #1
 8015220:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8015224:	e784      	b.n	8015130 <MotionFX_MagCal_init+0x1c>
 8015226:	bf00      	nop
 8015228:	20000188 	.word	0x20000188
 801522c:	20000000 	.word	0x20000000
 8015230:	3dcccccd 	.word	0x3dcccccd
 8015234:	3c23d70a 	.word	0x3c23d70a
 8015238:	3dcccccd 	.word	0x3dcccccd
 801523c:	20001654 	.word	0x20001654

08015240 <MotionFX_MagCal_run>:
 8015240:	4a3e      	ldr	r2, [pc, #248]	; (801533c <MotionFX_MagCal_run+0xfc>)
 8015242:	7913      	ldrb	r3, [r2, #4]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d077      	beq.n	8015338 <MotionFX_MagCal_run+0xf8>
 8015248:	ed90 7a00 	vldr	s14, [r0]
 801524c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015340 <MotionFX_MagCal_run+0x100>
 8015250:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015258:	bfb4      	ite	lt
 801525a:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801525e:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015262:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015268:	ed90 7a01 	vldr	s14, [r0, #4]
 801526c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015340 <MotionFX_MagCal_run+0x100>
 8015270:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8015274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015278:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015280:	ee17 1a90 	vmov	r1, s15
 8015284:	bfb4      	ite	lt
 8015286:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801528a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801528e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015292:	ed90 7a02 	vldr	s14, [r0, #8]
 8015296:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015340 <MotionFX_MagCal_run+0x100>
 801529a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801529e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80152a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a6:	ee17 4a90 	vmov	r4, s15
 80152aa:	bfac      	ite	ge
 80152ac:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80152b0:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80152b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80152b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152bc:	ee17 7a90 	vmov	r7, s15
 80152c0:	b383      	cbz	r3, 8015324 <MotionFX_MagCal_run+0xe4>
 80152c2:	4820      	ldr	r0, [pc, #128]	; (8015344 <MotionFX_MagCal_run+0x104>)
 80152c4:	6805      	ldr	r5, [r0, #0]
 80152c6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80152ca:	fb15 f503 	smulbb	r5, r5, r3
 80152ce:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 80152d2:	00dd      	lsls	r5, r3, #3
 80152d4:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 80152d8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015348 <MotionFX_MagCal_run+0x108>
 80152dc:	42b1      	cmp	r1, r6
 80152de:	bfa8      	it	ge
 80152e0:	4631      	movge	r1, r6
 80152e2:	42b7      	cmp	r7, r6
 80152e4:	bfa8      	it	ge
 80152e6:	4637      	movge	r7, r6
 80152e8:	4561      	cmp	r1, ip
 80152ea:	4608      	mov	r0, r1
 80152ec:	bfb8      	it	lt
 80152ee:	4660      	movlt	r0, ip
 80152f0:	4564      	cmp	r4, ip
 80152f2:	db1f      	blt.n	8015334 <MotionFX_MagCal_run+0xf4>
 80152f4:	42b4      	cmp	r4, r6
 80152f6:	bfa8      	it	ge
 80152f8:	4634      	movge	r4, r6
 80152fa:	b224      	sxth	r4, r4
 80152fc:	4e12      	ldr	r6, [pc, #72]	; (8015348 <MotionFX_MagCal_run+0x108>)
 80152fe:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8015302:	3301      	adds	r3, #1
 8015304:	4415      	add	r5, r2
 8015306:	b2db      	uxtb	r3, r3
 8015308:	42b7      	cmp	r7, r6
 801530a:	bfb8      	it	lt
 801530c:	4637      	movlt	r7, r6
 801530e:	428b      	cmp	r3, r1
 8015310:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8015314:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8015318:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 801531c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8015320:	d014      	beq.n	801534c <MotionFX_MagCal_run+0x10c>
 8015322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015324:	68c0      	ldr	r0, [r0, #12]
 8015326:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 801532a:	2001      	movs	r0, #1
 801532c:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8015330:	461d      	mov	r5, r3
 8015332:	e7cf      	b.n	80152d4 <MotionFX_MagCal_run+0x94>
 8015334:	4634      	mov	r4, r6
 8015336:	e7e1      	b.n	80152fc <MotionFX_MagCal_run+0xbc>
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	20000188 	.word	0x20000188
 8015340:	43fa0000 	.word	0x43fa0000
 8015344:	20000000 	.word	0x20000000
 8015348:	ffff8002 	.word	0xffff8002
 801534c:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8015350:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8015354:	2000      	movs	r0, #0
 8015356:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 801535a:	2b00      	cmp	r3, #0
 801535c:	f000 8159 	beq.w	8015612 <MotionFX_MagCal_run+0x3d2>
 8015360:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 8015364:	8a57      	ldrh	r7, [r2, #18]
 8015366:	8a13      	ldrh	r3, [r2, #16]
 8015368:	2900      	cmp	r1, #0
 801536a:	f000 8150 	beq.w	801560e <MotionFX_MagCal_run+0x3ce>
 801536e:	2f00      	cmp	r7, #0
 8015370:	f000 814d 	beq.w	801560e <MotionFX_MagCal_run+0x3ce>
 8015374:	42bb      	cmp	r3, r7
 8015376:	bf28      	it	cs
 8015378:	463b      	movcs	r3, r7
 801537a:	3301      	adds	r3, #1
 801537c:	b29b      	uxth	r3, r3
 801537e:	42bb      	cmp	r3, r7
 8015380:	bf28      	it	cs
 8015382:	463b      	movcs	r3, r7
 8015384:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015388:	191d      	adds	r5, r3, r4
 801538a:	f04f 0c01 	mov.w	ip, #1
 801538e:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8015392:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8015396:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 801539a:	f8c5 e002 	str.w	lr, [r5, #2]
 801539e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80153a2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80153a6:	4561      	cmp	r1, ip
 80153a8:	f000 812a 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 80153ac:	4463      	add	r3, ip
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	42bb      	cmp	r3, r7
 80153b2:	bf28      	it	cs
 80153b4:	463b      	movcs	r3, r7
 80153b6:	eb03 0e04 	add.w	lr, r3, r4
 80153ba:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80153be:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80153c2:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 80153c6:	f8c5 e002 	str.w	lr, [r5, #2]
 80153ca:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 80153ce:	f8a5 e006 	strh.w	lr, [r5, #6]
 80153d2:	2902      	cmp	r1, #2
 80153d4:	f000 8114 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 80153d8:	4463      	add	r3, ip
 80153da:	b29b      	uxth	r3, r3
 80153dc:	42bb      	cmp	r3, r7
 80153de:	bf28      	it	cs
 80153e0:	463b      	movcs	r3, r7
 80153e2:	eb03 0e04 	add.w	lr, r3, r4
 80153e6:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80153ea:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80153ee:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 80153f2:	f8c5 e002 	str.w	lr, [r5, #2]
 80153f6:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 80153fa:	f8a5 e006 	strh.w	lr, [r5, #6]
 80153fe:	2903      	cmp	r1, #3
 8015400:	f000 80fe 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 8015404:	4463      	add	r3, ip
 8015406:	b29b      	uxth	r3, r3
 8015408:	42bb      	cmp	r3, r7
 801540a:	bf28      	it	cs
 801540c:	463b      	movcs	r3, r7
 801540e:	eb03 0e04 	add.w	lr, r3, r4
 8015412:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015416:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801541a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 801541e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015422:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8015426:	f8a5 e006 	strh.w	lr, [r5, #6]
 801542a:	2904      	cmp	r1, #4
 801542c:	f000 80e8 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 8015430:	4463      	add	r3, ip
 8015432:	b29b      	uxth	r3, r3
 8015434:	42bb      	cmp	r3, r7
 8015436:	bf28      	it	cs
 8015438:	463b      	movcs	r3, r7
 801543a:	eb03 0e04 	add.w	lr, r3, r4
 801543e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015442:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015446:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801544a:	f8c5 e002 	str.w	lr, [r5, #2]
 801544e:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8015452:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015456:	2905      	cmp	r1, #5
 8015458:	f000 80d2 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 801545c:	4463      	add	r3, ip
 801545e:	b29b      	uxth	r3, r3
 8015460:	42bb      	cmp	r3, r7
 8015462:	bf28      	it	cs
 8015464:	463b      	movcs	r3, r7
 8015466:	441c      	add	r4, r3
 8015468:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 801546c:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015470:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8015474:	f8c5 4002 	str.w	r4, [r5, #2]
 8015478:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 801547c:	80ec      	strh	r4, [r5, #6]
 801547e:	2906      	cmp	r1, #6
 8015480:	f000 80be 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 8015484:	4463      	add	r3, ip
 8015486:	b29b      	uxth	r3, r3
 8015488:	42bb      	cmp	r3, r7
 801548a:	bf28      	it	cs
 801548c:	463b      	movcs	r3, r7
 801548e:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015492:	eb03 0c04 	add.w	ip, r3, r4
 8015496:	2501      	movs	r5, #1
 8015498:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 801549c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80154a0:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 80154a4:	f8cc e002 	str.w	lr, [ip, #2]
 80154a8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80154ac:	f8ac e006 	strh.w	lr, [ip, #6]
 80154b0:	2907      	cmp	r1, #7
 80154b2:	f000 80a5 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 80154b6:	442b      	add	r3, r5
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	42bb      	cmp	r3, r7
 80154bc:	bf28      	it	cs
 80154be:	463b      	movcs	r3, r7
 80154c0:	eb03 0e04 	add.w	lr, r3, r4
 80154c4:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80154c8:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80154cc:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 80154d0:	f8cc e002 	str.w	lr, [ip, #2]
 80154d4:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80154d8:	f8ac e006 	strh.w	lr, [ip, #6]
 80154dc:	2908      	cmp	r1, #8
 80154de:	f000 808f 	beq.w	8015600 <MotionFX_MagCal_run+0x3c0>
 80154e2:	442b      	add	r3, r5
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	42bb      	cmp	r3, r7
 80154e8:	bf28      	it	cs
 80154ea:	463b      	movcs	r3, r7
 80154ec:	eb03 0e04 	add.w	lr, r3, r4
 80154f0:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80154f4:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80154f8:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 80154fc:	f8cc e002 	str.w	lr, [ip, #2]
 8015500:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8015504:	f8ac e006 	strh.w	lr, [ip, #6]
 8015508:	2909      	cmp	r1, #9
 801550a:	d079      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 801550c:	442b      	add	r3, r5
 801550e:	b29b      	uxth	r3, r3
 8015510:	42bb      	cmp	r3, r7
 8015512:	bf28      	it	cs
 8015514:	463b      	movcs	r3, r7
 8015516:	eb03 0e04 	add.w	lr, r3, r4
 801551a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801551e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015522:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8015526:	f8cc e002 	str.w	lr, [ip, #2]
 801552a:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 801552e:	f8ac e006 	strh.w	lr, [ip, #6]
 8015532:	290a      	cmp	r1, #10
 8015534:	d064      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 8015536:	442b      	add	r3, r5
 8015538:	b29b      	uxth	r3, r3
 801553a:	42bb      	cmp	r3, r7
 801553c:	bf28      	it	cs
 801553e:	463b      	movcs	r3, r7
 8015540:	eb03 0e04 	add.w	lr, r3, r4
 8015544:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015548:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801554c:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8015550:	f8cc e002 	str.w	lr, [ip, #2]
 8015554:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8015558:	f8ac e006 	strh.w	lr, [ip, #6]
 801555c:	290b      	cmp	r1, #11
 801555e:	d04f      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 8015560:	442b      	add	r3, r5
 8015562:	b29b      	uxth	r3, r3
 8015564:	42bb      	cmp	r3, r7
 8015566:	bf28      	it	cs
 8015568:	463b      	movcs	r3, r7
 801556a:	eb03 0e04 	add.w	lr, r3, r4
 801556e:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015572:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015576:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 801557a:	f8cc e002 	str.w	lr, [ip, #2]
 801557e:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8015582:	f8ac e006 	strh.w	lr, [ip, #6]
 8015586:	290c      	cmp	r1, #12
 8015588:	d03a      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 801558a:	442b      	add	r3, r5
 801558c:	b29b      	uxth	r3, r3
 801558e:	42bb      	cmp	r3, r7
 8015590:	bf28      	it	cs
 8015592:	463b      	movcs	r3, r7
 8015594:	eb03 0e04 	add.w	lr, r3, r4
 8015598:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801559c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80155a0:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 80155a4:	f8cc e002 	str.w	lr, [ip, #2]
 80155a8:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80155ac:	f8ac e006 	strh.w	lr, [ip, #6]
 80155b0:	290d      	cmp	r1, #13
 80155b2:	d025      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 80155b4:	442b      	add	r3, r5
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	42bb      	cmp	r3, r7
 80155ba:	bf28      	it	cs
 80155bc:	463b      	movcs	r3, r7
 80155be:	eb03 0e04 	add.w	lr, r3, r4
 80155c2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80155c6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80155ca:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 80155ce:	f8cc e002 	str.w	lr, [ip, #2]
 80155d2:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 80155d6:	f8ac e006 	strh.w	lr, [ip, #6]
 80155da:	290e      	cmp	r1, #14
 80155dc:	d010      	beq.n	8015600 <MotionFX_MagCal_run+0x3c0>
 80155de:	442b      	add	r3, r5
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	42bb      	cmp	r3, r7
 80155e4:	bf28      	it	cs
 80155e6:	463b      	movcs	r3, r7
 80155e8:	441c      	add	r4, r3
 80155ea:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 80155ee:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 80155f2:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 80155f6:	f8c7 0002 	str.w	r0, [r7, #2]
 80155fa:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 80155fe:	80f8      	strh	r0, [r7, #6]
 8015600:	3901      	subs	r1, #1
 8015602:	b2c9      	uxtb	r1, r1
 8015604:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015608:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801560c:	4434      	add	r4, r6
 801560e:	8213      	strh	r3, [r2, #16]
 8015610:	6154      	str	r4, [r2, #20]
 8015612:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8015616:	2b00      	cmp	r3, #0
 8015618:	f43f ae83 	beq.w	8015322 <MotionFX_MagCal_run+0xe2>
 801561c:	8a11      	ldrh	r1, [r2, #16]
 801561e:	8a53      	ldrh	r3, [r2, #18]
 8015620:	428b      	cmp	r3, r1
 8015622:	d022      	beq.n	801566a <MotionFX_MagCal_run+0x42a>
 8015624:	b341      	cbz	r1, 8015678 <MotionFX_MagCal_run+0x438>
 8015626:	6953      	ldr	r3, [r2, #20]
 8015628:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801562c:	3301      	adds	r3, #1
 801562e:	4403      	add	r3, r0
 8015630:	1c58      	adds	r0, r3, #1
 8015632:	d021      	beq.n	8015678 <MotionFX_MagCal_run+0x438>
 8015634:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015638:	3410      	adds	r4, #16
 801563a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801563c:	42a0      	cmp	r0, r4
 801563e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8015642:	bf84      	itt	hi
 8015644:	6553      	strhi	r3, [r2, #84]	; 0x54
 8015646:	4618      	movhi	r0, r3
 8015648:	4420      	add	r0, r4
 801564a:	4283      	cmp	r3, r0
 801564c:	f4ff ae69 	bcc.w	8015322 <MotionFX_MagCal_run+0xe2>
 8015650:	b131      	cbz	r1, 8015660 <MotionFX_MagCal_run+0x420>
 8015652:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8015656:	6952      	ldr	r2, [r2, #20]
 8015658:	3901      	subs	r1, #1
 801565a:	fb00 2111 	mls	r1, r0, r1, r2
 801565e:	b289      	uxth	r1, r1
 8015660:	1a5b      	subs	r3, r3, r1
 8015662:	b21b      	sxth	r3, r3
 8015664:	42a3      	cmp	r3, r4
 8015666:	f6ff ae5c 	blt.w	8015322 <MotionFX_MagCal_run+0xe2>
 801566a:	4905      	ldr	r1, [pc, #20]	; (8015680 <MotionFX_MagCal_run+0x440>)
 801566c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015670:	f101 0014 	add.w	r0, r1, #20
 8015674:	f7fd babc 	b.w	8012bf0 <MEMS_runMagCal>
 8015678:	f242 7410 	movw	r4, #10000	; 0x2710
 801567c:	2300      	movs	r3, #0
 801567e:	e7dc      	b.n	801563a <MotionFX_MagCal_run+0x3fa>
 8015680:	20000190 	.word	0x20000190

08015684 <MotionFX_MagCal_getParams>:
 8015684:	b4f0      	push	{r4, r5, r6, r7}
 8015686:	4f1b      	ldr	r7, [pc, #108]	; (80156f4 <MotionFX_MagCal_getParams+0x70>)
 8015688:	793b      	ldrb	r3, [r7, #4]
 801568a:	b08e      	sub	sp, #56	; 0x38
 801568c:	b373      	cbz	r3, 80156ec <MotionFX_MagCal_getParams+0x68>
 801568e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8015692:	4606      	mov	r6, r0
 8015694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015696:	ac01      	add	r4, sp, #4
 8015698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801569a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801569c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801569e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156a0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80156a4:	eddd 6a02 	vldr	s13, [sp, #8]
 80156a8:	eddd 7a04 	vldr	s15, [sp, #16]
 80156ac:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80156f8 <MotionFX_MagCal_getParams+0x74>
 80156b0:	682d      	ldr	r5, [r5, #0]
 80156b2:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 80156b6:	7337      	strb	r7, [r6, #12]
 80156b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80156bc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80156c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80156ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80156ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80156d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80156da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80156de:	6025      	str	r5, [r4, #0]
 80156e0:	edc6 6a00 	vstr	s13, [r6]
 80156e4:	ed86 7a01 	vstr	s14, [r6, #4]
 80156e8:	edc6 7a02 	vstr	s15, [r6, #8]
 80156ec:	b00e      	add	sp, #56	; 0x38
 80156ee:	bcf0      	pop	{r4, r5, r6, r7}
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	20000188 	.word	0x20000188
 80156f8:	3b03126f 	.word	0x3b03126f

080156fc <_Znwj>:
 80156fc:	2801      	cmp	r0, #1
 80156fe:	bf38      	it	cc
 8015700:	2001      	movcc	r0, #1
 8015702:	b510      	push	{r4, lr}
 8015704:	4604      	mov	r4, r0
 8015706:	4620      	mov	r0, r4
 8015708:	f001 ff48 	bl	801759c <malloc>
 801570c:	b930      	cbnz	r0, 801571c <_Znwj+0x20>
 801570e:	f000 f807 	bl	8015720 <_ZSt15get_new_handlerv>
 8015712:	b908      	cbnz	r0, 8015718 <_Znwj+0x1c>
 8015714:	f001 ff10 	bl	8017538 <abort>
 8015718:	4780      	blx	r0
 801571a:	e7f4      	b.n	8015706 <_Znwj+0xa>
 801571c:	bd10      	pop	{r4, pc}
	...

08015720 <_ZSt15get_new_handlerv>:
 8015720:	4b02      	ldr	r3, [pc, #8]	; (801572c <_ZSt15get_new_handlerv+0xc>)
 8015722:	6818      	ldr	r0, [r3, #0]
 8015724:	f3bf 8f5b 	dmb	ish
 8015728:	4770      	bx	lr
 801572a:	bf00      	nop
 801572c:	20001278 	.word	0x20001278

08015730 <ceil>:
 8015730:	ec51 0b10 	vmov	r0, r1, d0
 8015734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015738:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801573c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015740:	2e13      	cmp	r6, #19
 8015742:	ee10 5a10 	vmov	r5, s0
 8015746:	ee10 8a10 	vmov	r8, s0
 801574a:	460c      	mov	r4, r1
 801574c:	dc30      	bgt.n	80157b0 <ceil+0x80>
 801574e:	2e00      	cmp	r6, #0
 8015750:	da12      	bge.n	8015778 <ceil+0x48>
 8015752:	a335      	add	r3, pc, #212	; (adr r3, 8015828 <ceil+0xf8>)
 8015754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015758:	f7ea fd3c 	bl	80001d4 <__adddf3>
 801575c:	2200      	movs	r2, #0
 801575e:	2300      	movs	r3, #0
 8015760:	f7eb f97e 	bl	8000a60 <__aeabi_dcmpgt>
 8015764:	b128      	cbz	r0, 8015772 <ceil+0x42>
 8015766:	2c00      	cmp	r4, #0
 8015768:	db55      	blt.n	8015816 <ceil+0xe6>
 801576a:	432c      	orrs	r4, r5
 801576c:	d057      	beq.n	801581e <ceil+0xee>
 801576e:	4c30      	ldr	r4, [pc, #192]	; (8015830 <ceil+0x100>)
 8015770:	2500      	movs	r5, #0
 8015772:	4621      	mov	r1, r4
 8015774:	4628      	mov	r0, r5
 8015776:	e025      	b.n	80157c4 <ceil+0x94>
 8015778:	4f2e      	ldr	r7, [pc, #184]	; (8015834 <ceil+0x104>)
 801577a:	4137      	asrs	r7, r6
 801577c:	ea01 0307 	and.w	r3, r1, r7
 8015780:	4303      	orrs	r3, r0
 8015782:	d01f      	beq.n	80157c4 <ceil+0x94>
 8015784:	a328      	add	r3, pc, #160	; (adr r3, 8015828 <ceil+0xf8>)
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	f7ea fd23 	bl	80001d4 <__adddf3>
 801578e:	2200      	movs	r2, #0
 8015790:	2300      	movs	r3, #0
 8015792:	f7eb f965 	bl	8000a60 <__aeabi_dcmpgt>
 8015796:	2800      	cmp	r0, #0
 8015798:	d0eb      	beq.n	8015772 <ceil+0x42>
 801579a:	2c00      	cmp	r4, #0
 801579c:	bfc2      	ittt	gt
 801579e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80157a2:	fa43 f606 	asrgt.w	r6, r3, r6
 80157a6:	19a4      	addgt	r4, r4, r6
 80157a8:	ea24 0407 	bic.w	r4, r4, r7
 80157ac:	2500      	movs	r5, #0
 80157ae:	e7e0      	b.n	8015772 <ceil+0x42>
 80157b0:	2e33      	cmp	r6, #51	; 0x33
 80157b2:	dd0b      	ble.n	80157cc <ceil+0x9c>
 80157b4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80157b8:	d104      	bne.n	80157c4 <ceil+0x94>
 80157ba:	ee10 2a10 	vmov	r2, s0
 80157be:	460b      	mov	r3, r1
 80157c0:	f7ea fd08 	bl	80001d4 <__adddf3>
 80157c4:	ec41 0b10 	vmov	d0, r0, r1
 80157c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157cc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80157d0:	f04f 33ff 	mov.w	r3, #4294967295
 80157d4:	fa23 f707 	lsr.w	r7, r3, r7
 80157d8:	4207      	tst	r7, r0
 80157da:	d0f3      	beq.n	80157c4 <ceil+0x94>
 80157dc:	a312      	add	r3, pc, #72	; (adr r3, 8015828 <ceil+0xf8>)
 80157de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e2:	f7ea fcf7 	bl	80001d4 <__adddf3>
 80157e6:	2200      	movs	r2, #0
 80157e8:	2300      	movs	r3, #0
 80157ea:	f7eb f939 	bl	8000a60 <__aeabi_dcmpgt>
 80157ee:	2800      	cmp	r0, #0
 80157f0:	d0bf      	beq.n	8015772 <ceil+0x42>
 80157f2:	2c00      	cmp	r4, #0
 80157f4:	dd02      	ble.n	80157fc <ceil+0xcc>
 80157f6:	2e14      	cmp	r6, #20
 80157f8:	d103      	bne.n	8015802 <ceil+0xd2>
 80157fa:	3401      	adds	r4, #1
 80157fc:	ea25 0507 	bic.w	r5, r5, r7
 8015800:	e7b7      	b.n	8015772 <ceil+0x42>
 8015802:	2301      	movs	r3, #1
 8015804:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015808:	fa03 f606 	lsl.w	r6, r3, r6
 801580c:	4435      	add	r5, r6
 801580e:	4545      	cmp	r5, r8
 8015810:	bf38      	it	cc
 8015812:	18e4      	addcc	r4, r4, r3
 8015814:	e7f2      	b.n	80157fc <ceil+0xcc>
 8015816:	2500      	movs	r5, #0
 8015818:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801581c:	e7a9      	b.n	8015772 <ceil+0x42>
 801581e:	4625      	mov	r5, r4
 8015820:	e7a7      	b.n	8015772 <ceil+0x42>
 8015822:	bf00      	nop
 8015824:	f3af 8000 	nop.w
 8015828:	8800759c 	.word	0x8800759c
 801582c:	7e37e43c 	.word	0x7e37e43c
 8015830:	3ff00000 	.word	0x3ff00000
 8015834:	000fffff 	.word	0x000fffff

08015838 <floor>:
 8015838:	ec51 0b10 	vmov	r0, r1, d0
 801583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015840:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015844:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015848:	2e13      	cmp	r6, #19
 801584a:	ee10 5a10 	vmov	r5, s0
 801584e:	ee10 8a10 	vmov	r8, s0
 8015852:	460c      	mov	r4, r1
 8015854:	dc32      	bgt.n	80158bc <floor+0x84>
 8015856:	2e00      	cmp	r6, #0
 8015858:	da14      	bge.n	8015884 <floor+0x4c>
 801585a:	a333      	add	r3, pc, #204	; (adr r3, 8015928 <floor+0xf0>)
 801585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015860:	f7ea fcb8 	bl	80001d4 <__adddf3>
 8015864:	2200      	movs	r2, #0
 8015866:	2300      	movs	r3, #0
 8015868:	f7eb f8fa 	bl	8000a60 <__aeabi_dcmpgt>
 801586c:	b138      	cbz	r0, 801587e <floor+0x46>
 801586e:	2c00      	cmp	r4, #0
 8015870:	da57      	bge.n	8015922 <floor+0xea>
 8015872:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015876:	431d      	orrs	r5, r3
 8015878:	d001      	beq.n	801587e <floor+0x46>
 801587a:	4c2d      	ldr	r4, [pc, #180]	; (8015930 <floor+0xf8>)
 801587c:	2500      	movs	r5, #0
 801587e:	4621      	mov	r1, r4
 8015880:	4628      	mov	r0, r5
 8015882:	e025      	b.n	80158d0 <floor+0x98>
 8015884:	4f2b      	ldr	r7, [pc, #172]	; (8015934 <floor+0xfc>)
 8015886:	4137      	asrs	r7, r6
 8015888:	ea01 0307 	and.w	r3, r1, r7
 801588c:	4303      	orrs	r3, r0
 801588e:	d01f      	beq.n	80158d0 <floor+0x98>
 8015890:	a325      	add	r3, pc, #148	; (adr r3, 8015928 <floor+0xf0>)
 8015892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015896:	f7ea fc9d 	bl	80001d4 <__adddf3>
 801589a:	2200      	movs	r2, #0
 801589c:	2300      	movs	r3, #0
 801589e:	f7eb f8df 	bl	8000a60 <__aeabi_dcmpgt>
 80158a2:	2800      	cmp	r0, #0
 80158a4:	d0eb      	beq.n	801587e <floor+0x46>
 80158a6:	2c00      	cmp	r4, #0
 80158a8:	bfbe      	ittt	lt
 80158aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80158ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80158b2:	19a4      	addlt	r4, r4, r6
 80158b4:	ea24 0407 	bic.w	r4, r4, r7
 80158b8:	2500      	movs	r5, #0
 80158ba:	e7e0      	b.n	801587e <floor+0x46>
 80158bc:	2e33      	cmp	r6, #51	; 0x33
 80158be:	dd0b      	ble.n	80158d8 <floor+0xa0>
 80158c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158c4:	d104      	bne.n	80158d0 <floor+0x98>
 80158c6:	ee10 2a10 	vmov	r2, s0
 80158ca:	460b      	mov	r3, r1
 80158cc:	f7ea fc82 	bl	80001d4 <__adddf3>
 80158d0:	ec41 0b10 	vmov	d0, r0, r1
 80158d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80158dc:	f04f 33ff 	mov.w	r3, #4294967295
 80158e0:	fa23 f707 	lsr.w	r7, r3, r7
 80158e4:	4207      	tst	r7, r0
 80158e6:	d0f3      	beq.n	80158d0 <floor+0x98>
 80158e8:	a30f      	add	r3, pc, #60	; (adr r3, 8015928 <floor+0xf0>)
 80158ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ee:	f7ea fc71 	bl	80001d4 <__adddf3>
 80158f2:	2200      	movs	r2, #0
 80158f4:	2300      	movs	r3, #0
 80158f6:	f7eb f8b3 	bl	8000a60 <__aeabi_dcmpgt>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d0bf      	beq.n	801587e <floor+0x46>
 80158fe:	2c00      	cmp	r4, #0
 8015900:	da02      	bge.n	8015908 <floor+0xd0>
 8015902:	2e14      	cmp	r6, #20
 8015904:	d103      	bne.n	801590e <floor+0xd6>
 8015906:	3401      	adds	r4, #1
 8015908:	ea25 0507 	bic.w	r5, r5, r7
 801590c:	e7b7      	b.n	801587e <floor+0x46>
 801590e:	2301      	movs	r3, #1
 8015910:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015914:	fa03 f606 	lsl.w	r6, r3, r6
 8015918:	4435      	add	r5, r6
 801591a:	4545      	cmp	r5, r8
 801591c:	bf38      	it	cc
 801591e:	18e4      	addcc	r4, r4, r3
 8015920:	e7f2      	b.n	8015908 <floor+0xd0>
 8015922:	2500      	movs	r5, #0
 8015924:	462c      	mov	r4, r5
 8015926:	e7aa      	b.n	801587e <floor+0x46>
 8015928:	8800759c 	.word	0x8800759c
 801592c:	7e37e43c 	.word	0x7e37e43c
 8015930:	bff00000 	.word	0xbff00000
 8015934:	000fffff 	.word	0x000fffff

08015938 <cosf>:
 8015938:	ee10 3a10 	vmov	r3, s0
 801593c:	b507      	push	{r0, r1, r2, lr}
 801593e:	4a1c      	ldr	r2, [pc, #112]	; (80159b0 <cosf+0x78>)
 8015940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015944:	4293      	cmp	r3, r2
 8015946:	dc04      	bgt.n	8015952 <cosf+0x1a>
 8015948:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80159b4 <cosf+0x7c>
 801594c:	f000 fe9e 	bl	801668c <__kernel_cosf>
 8015950:	e004      	b.n	801595c <cosf+0x24>
 8015952:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015956:	db04      	blt.n	8015962 <cosf+0x2a>
 8015958:	ee30 0a40 	vsub.f32	s0, s0, s0
 801595c:	b003      	add	sp, #12
 801595e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015962:	4668      	mov	r0, sp
 8015964:	f000 fd52 	bl	801640c <__ieee754_rem_pio2f>
 8015968:	f000 0003 	and.w	r0, r0, #3
 801596c:	2801      	cmp	r0, #1
 801596e:	d007      	beq.n	8015980 <cosf+0x48>
 8015970:	2802      	cmp	r0, #2
 8015972:	d00e      	beq.n	8015992 <cosf+0x5a>
 8015974:	b9a0      	cbnz	r0, 80159a0 <cosf+0x68>
 8015976:	eddd 0a01 	vldr	s1, [sp, #4]
 801597a:	ed9d 0a00 	vldr	s0, [sp]
 801597e:	e7e5      	b.n	801594c <cosf+0x14>
 8015980:	eddd 0a01 	vldr	s1, [sp, #4]
 8015984:	ed9d 0a00 	vldr	s0, [sp]
 8015988:	f001 f96a 	bl	8016c60 <__kernel_sinf>
 801598c:	eeb1 0a40 	vneg.f32	s0, s0
 8015990:	e7e4      	b.n	801595c <cosf+0x24>
 8015992:	eddd 0a01 	vldr	s1, [sp, #4]
 8015996:	ed9d 0a00 	vldr	s0, [sp]
 801599a:	f000 fe77 	bl	801668c <__kernel_cosf>
 801599e:	e7f5      	b.n	801598c <cosf+0x54>
 80159a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80159a4:	ed9d 0a00 	vldr	s0, [sp]
 80159a8:	2001      	movs	r0, #1
 80159aa:	f001 f959 	bl	8016c60 <__kernel_sinf>
 80159ae:	e7d5      	b.n	801595c <cosf+0x24>
 80159b0:	3f490fd8 	.word	0x3f490fd8
 80159b4:	00000000 	.word	0x00000000

080159b8 <roundf>:
 80159b8:	ee10 0a10 	vmov	r0, s0
 80159bc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80159c0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80159c4:	2a16      	cmp	r2, #22
 80159c6:	dc15      	bgt.n	80159f4 <roundf+0x3c>
 80159c8:	2a00      	cmp	r2, #0
 80159ca:	da08      	bge.n	80159de <roundf+0x26>
 80159cc:	3201      	adds	r2, #1
 80159ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80159d2:	d101      	bne.n	80159d8 <roundf+0x20>
 80159d4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80159d8:	ee00 3a10 	vmov	s0, r3
 80159dc:	4770      	bx	lr
 80159de:	4908      	ldr	r1, [pc, #32]	; (8015a00 <roundf+0x48>)
 80159e0:	4111      	asrs	r1, r2
 80159e2:	4208      	tst	r0, r1
 80159e4:	d0fa      	beq.n	80159dc <roundf+0x24>
 80159e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80159ea:	4113      	asrs	r3, r2
 80159ec:	4403      	add	r3, r0
 80159ee:	ea23 0301 	bic.w	r3, r3, r1
 80159f2:	e7f1      	b.n	80159d8 <roundf+0x20>
 80159f4:	2a80      	cmp	r2, #128	; 0x80
 80159f6:	d1f1      	bne.n	80159dc <roundf+0x24>
 80159f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80159fc:	4770      	bx	lr
 80159fe:	bf00      	nop
 8015a00:	007fffff 	.word	0x007fffff

08015a04 <sinf>:
 8015a04:	ee10 3a10 	vmov	r3, s0
 8015a08:	b507      	push	{r0, r1, r2, lr}
 8015a0a:	4a1d      	ldr	r2, [pc, #116]	; (8015a80 <sinf+0x7c>)
 8015a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a10:	4293      	cmp	r3, r2
 8015a12:	dc05      	bgt.n	8015a20 <sinf+0x1c>
 8015a14:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015a84 <sinf+0x80>
 8015a18:	2000      	movs	r0, #0
 8015a1a:	f001 f921 	bl	8016c60 <__kernel_sinf>
 8015a1e:	e004      	b.n	8015a2a <sinf+0x26>
 8015a20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015a24:	db04      	blt.n	8015a30 <sinf+0x2c>
 8015a26:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015a2a:	b003      	add	sp, #12
 8015a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a30:	4668      	mov	r0, sp
 8015a32:	f000 fceb 	bl	801640c <__ieee754_rem_pio2f>
 8015a36:	f000 0003 	and.w	r0, r0, #3
 8015a3a:	2801      	cmp	r0, #1
 8015a3c:	d008      	beq.n	8015a50 <sinf+0x4c>
 8015a3e:	2802      	cmp	r0, #2
 8015a40:	d00d      	beq.n	8015a5e <sinf+0x5a>
 8015a42:	b9b0      	cbnz	r0, 8015a72 <sinf+0x6e>
 8015a44:	eddd 0a01 	vldr	s1, [sp, #4]
 8015a48:	ed9d 0a00 	vldr	s0, [sp]
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	e7e4      	b.n	8015a1a <sinf+0x16>
 8015a50:	eddd 0a01 	vldr	s1, [sp, #4]
 8015a54:	ed9d 0a00 	vldr	s0, [sp]
 8015a58:	f000 fe18 	bl	801668c <__kernel_cosf>
 8015a5c:	e7e5      	b.n	8015a2a <sinf+0x26>
 8015a5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015a62:	ed9d 0a00 	vldr	s0, [sp]
 8015a66:	2001      	movs	r0, #1
 8015a68:	f001 f8fa 	bl	8016c60 <__kernel_sinf>
 8015a6c:	eeb1 0a40 	vneg.f32	s0, s0
 8015a70:	e7db      	b.n	8015a2a <sinf+0x26>
 8015a72:	eddd 0a01 	vldr	s1, [sp, #4]
 8015a76:	ed9d 0a00 	vldr	s0, [sp]
 8015a7a:	f000 fe07 	bl	801668c <__kernel_cosf>
 8015a7e:	e7f5      	b.n	8015a6c <sinf+0x68>
 8015a80:	3f490fd8 	.word	0x3f490fd8
 8015a84:	00000000 	.word	0x00000000

08015a88 <tanf>:
 8015a88:	ee10 3a10 	vmov	r3, s0
 8015a8c:	b507      	push	{r0, r1, r2, lr}
 8015a8e:	4a10      	ldr	r2, [pc, #64]	; (8015ad0 <tanf+0x48>)
 8015a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a94:	4293      	cmp	r3, r2
 8015a96:	dc05      	bgt.n	8015aa4 <tanf+0x1c>
 8015a98:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015ad4 <tanf+0x4c>
 8015a9c:	2001      	movs	r0, #1
 8015a9e:	f001 f927 	bl	8016cf0 <__kernel_tanf>
 8015aa2:	e004      	b.n	8015aae <tanf+0x26>
 8015aa4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015aa8:	db04      	blt.n	8015ab4 <tanf+0x2c>
 8015aaa:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015aae:	b003      	add	sp, #12
 8015ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ab4:	4668      	mov	r0, sp
 8015ab6:	f000 fca9 	bl	801640c <__ieee754_rem_pio2f>
 8015aba:	0040      	lsls	r0, r0, #1
 8015abc:	f000 0002 	and.w	r0, r0, #2
 8015ac0:	eddd 0a01 	vldr	s1, [sp, #4]
 8015ac4:	ed9d 0a00 	vldr	s0, [sp]
 8015ac8:	f1c0 0001 	rsb	r0, r0, #1
 8015acc:	e7e7      	b.n	8015a9e <tanf+0x16>
 8015ace:	bf00      	nop
 8015ad0:	3f490fda 	.word	0x3f490fda
 8015ad4:	00000000 	.word	0x00000000

08015ad8 <atan2>:
 8015ad8:	f000 b89a 	b.w	8015c10 <__ieee754_atan2>

08015adc <sqrt>:
 8015adc:	b538      	push	{r3, r4, r5, lr}
 8015ade:	ed2d 8b02 	vpush	{d8}
 8015ae2:	ec55 4b10 	vmov	r4, r5, d0
 8015ae6:	f000 f95d 	bl	8015da4 <__ieee754_sqrt>
 8015aea:	4b15      	ldr	r3, [pc, #84]	; (8015b40 <sqrt+0x64>)
 8015aec:	eeb0 8a40 	vmov.f32	s16, s0
 8015af0:	eef0 8a60 	vmov.f32	s17, s1
 8015af4:	f993 3000 	ldrsb.w	r3, [r3]
 8015af8:	3301      	adds	r3, #1
 8015afa:	d019      	beq.n	8015b30 <sqrt+0x54>
 8015afc:	4622      	mov	r2, r4
 8015afe:	462b      	mov	r3, r5
 8015b00:	4620      	mov	r0, r4
 8015b02:	4629      	mov	r1, r5
 8015b04:	f7ea ffb6 	bl	8000a74 <__aeabi_dcmpun>
 8015b08:	b990      	cbnz	r0, 8015b30 <sqrt+0x54>
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	4620      	mov	r0, r4
 8015b10:	4629      	mov	r1, r5
 8015b12:	f7ea ff87 	bl	8000a24 <__aeabi_dcmplt>
 8015b16:	b158      	cbz	r0, 8015b30 <sqrt+0x54>
 8015b18:	f001 fd16 	bl	8017548 <__errno>
 8015b1c:	2321      	movs	r3, #33	; 0x21
 8015b1e:	6003      	str	r3, [r0, #0]
 8015b20:	2200      	movs	r2, #0
 8015b22:	2300      	movs	r3, #0
 8015b24:	4610      	mov	r0, r2
 8015b26:	4619      	mov	r1, r3
 8015b28:	f7ea fe34 	bl	8000794 <__aeabi_ddiv>
 8015b2c:	ec41 0b18 	vmov	d8, r0, r1
 8015b30:	eeb0 0a48 	vmov.f32	s0, s16
 8015b34:	eef0 0a68 	vmov.f32	s1, s17
 8015b38:	ecbd 8b02 	vpop	{d8}
 8015b3c:	bd38      	pop	{r3, r4, r5, pc}
 8015b3e:	bf00      	nop
 8015b40:	20000101 	.word	0x20000101

08015b44 <acosf>:
 8015b44:	b508      	push	{r3, lr}
 8015b46:	ed2d 8b02 	vpush	{d8}
 8015b4a:	eeb0 8a40 	vmov.f32	s16, s0
 8015b4e:	f000 f9dd 	bl	8015f0c <__ieee754_acosf>
 8015b52:	4b13      	ldr	r3, [pc, #76]	; (8015ba0 <acosf+0x5c>)
 8015b54:	f993 3000 	ldrsb.w	r3, [r3]
 8015b58:	3301      	adds	r3, #1
 8015b5a:	eef0 8a40 	vmov.f32	s17, s0
 8015b5e:	d01a      	beq.n	8015b96 <acosf+0x52>
 8015b60:	eeb4 8a48 	vcmp.f32	s16, s16
 8015b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b68:	d615      	bvs.n	8015b96 <acosf+0x52>
 8015b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b6e:	f001 fc21 	bl	80173b4 <fabsf>
 8015b72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b7e:	dd0a      	ble.n	8015b96 <acosf+0x52>
 8015b80:	f001 fce2 	bl	8017548 <__errno>
 8015b84:	ecbd 8b02 	vpop	{d8}
 8015b88:	2321      	movs	r3, #33	; 0x21
 8015b8a:	6003      	str	r3, [r0, #0]
 8015b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015b90:	4804      	ldr	r0, [pc, #16]	; (8015ba4 <acosf+0x60>)
 8015b92:	f001 bc59 	b.w	8017448 <nanf>
 8015b96:	eeb0 0a68 	vmov.f32	s0, s17
 8015b9a:	ecbd 8b02 	vpop	{d8}
 8015b9e:	bd08      	pop	{r3, pc}
 8015ba0:	20000101 	.word	0x20000101
 8015ba4:	08017844 	.word	0x08017844

08015ba8 <asinf>:
 8015ba8:	b508      	push	{r3, lr}
 8015baa:	ed2d 8b02 	vpush	{d8}
 8015bae:	eeb0 8a40 	vmov.f32	s16, s0
 8015bb2:	f000 faa5 	bl	8016100 <__ieee754_asinf>
 8015bb6:	4b13      	ldr	r3, [pc, #76]	; (8015c04 <asinf+0x5c>)
 8015bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	eef0 8a40 	vmov.f32	s17, s0
 8015bc2:	d01a      	beq.n	8015bfa <asinf+0x52>
 8015bc4:	eeb4 8a48 	vcmp.f32	s16, s16
 8015bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bcc:	d615      	bvs.n	8015bfa <asinf+0x52>
 8015bce:	eeb0 0a48 	vmov.f32	s0, s16
 8015bd2:	f001 fbef 	bl	80173b4 <fabsf>
 8015bd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015bda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be2:	dd0a      	ble.n	8015bfa <asinf+0x52>
 8015be4:	f001 fcb0 	bl	8017548 <__errno>
 8015be8:	ecbd 8b02 	vpop	{d8}
 8015bec:	2321      	movs	r3, #33	; 0x21
 8015bee:	6003      	str	r3, [r0, #0]
 8015bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015bf4:	4804      	ldr	r0, [pc, #16]	; (8015c08 <asinf+0x60>)
 8015bf6:	f001 bc27 	b.w	8017448 <nanf>
 8015bfa:	eeb0 0a68 	vmov.f32	s0, s17
 8015bfe:	ecbd 8b02 	vpop	{d8}
 8015c02:	bd08      	pop	{r3, pc}
 8015c04:	20000101 	.word	0x20000101
 8015c08:	08017844 	.word	0x08017844

08015c0c <atan2f>:
 8015c0c:	f000 bb5e 	b.w	80162cc <__ieee754_atan2f>

08015c10 <__ieee754_atan2>:
 8015c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c14:	ec57 6b11 	vmov	r6, r7, d1
 8015c18:	4273      	negs	r3, r6
 8015c1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015da0 <__ieee754_atan2+0x190>
 8015c1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015c22:	4333      	orrs	r3, r6
 8015c24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015c28:	4573      	cmp	r3, lr
 8015c2a:	ec51 0b10 	vmov	r0, r1, d0
 8015c2e:	ee11 8a10 	vmov	r8, s2
 8015c32:	d80a      	bhi.n	8015c4a <__ieee754_atan2+0x3a>
 8015c34:	4244      	negs	r4, r0
 8015c36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015c3a:	4304      	orrs	r4, r0
 8015c3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015c40:	4574      	cmp	r4, lr
 8015c42:	ee10 9a10 	vmov	r9, s0
 8015c46:	468c      	mov	ip, r1
 8015c48:	d907      	bls.n	8015c5a <__ieee754_atan2+0x4a>
 8015c4a:	4632      	mov	r2, r6
 8015c4c:	463b      	mov	r3, r7
 8015c4e:	f7ea fac1 	bl	80001d4 <__adddf3>
 8015c52:	ec41 0b10 	vmov	d0, r0, r1
 8015c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015c5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015c62:	4334      	orrs	r4, r6
 8015c64:	d103      	bne.n	8015c6e <__ieee754_atan2+0x5e>
 8015c66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c6a:	f001 b925 	b.w	8016eb8 <atan>
 8015c6e:	17bc      	asrs	r4, r7, #30
 8015c70:	f004 0402 	and.w	r4, r4, #2
 8015c74:	ea53 0909 	orrs.w	r9, r3, r9
 8015c78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015c7c:	d107      	bne.n	8015c8e <__ieee754_atan2+0x7e>
 8015c7e:	2c02      	cmp	r4, #2
 8015c80:	d060      	beq.n	8015d44 <__ieee754_atan2+0x134>
 8015c82:	2c03      	cmp	r4, #3
 8015c84:	d1e5      	bne.n	8015c52 <__ieee754_atan2+0x42>
 8015c86:	a142      	add	r1, pc, #264	; (adr r1, 8015d90 <__ieee754_atan2+0x180>)
 8015c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c8c:	e7e1      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015c8e:	ea52 0808 	orrs.w	r8, r2, r8
 8015c92:	d106      	bne.n	8015ca2 <__ieee754_atan2+0x92>
 8015c94:	f1bc 0f00 	cmp.w	ip, #0
 8015c98:	da5f      	bge.n	8015d5a <__ieee754_atan2+0x14a>
 8015c9a:	a13f      	add	r1, pc, #252	; (adr r1, 8015d98 <__ieee754_atan2+0x188>)
 8015c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ca0:	e7d7      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015ca2:	4572      	cmp	r2, lr
 8015ca4:	d10f      	bne.n	8015cc6 <__ieee754_atan2+0xb6>
 8015ca6:	4293      	cmp	r3, r2
 8015ca8:	f104 34ff 	add.w	r4, r4, #4294967295
 8015cac:	d107      	bne.n	8015cbe <__ieee754_atan2+0xae>
 8015cae:	2c02      	cmp	r4, #2
 8015cb0:	d84c      	bhi.n	8015d4c <__ieee754_atan2+0x13c>
 8015cb2:	4b35      	ldr	r3, [pc, #212]	; (8015d88 <__ieee754_atan2+0x178>)
 8015cb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015cb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015cbc:	e7c9      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015cbe:	2c02      	cmp	r4, #2
 8015cc0:	d848      	bhi.n	8015d54 <__ieee754_atan2+0x144>
 8015cc2:	4b32      	ldr	r3, [pc, #200]	; (8015d8c <__ieee754_atan2+0x17c>)
 8015cc4:	e7f6      	b.n	8015cb4 <__ieee754_atan2+0xa4>
 8015cc6:	4573      	cmp	r3, lr
 8015cc8:	d0e4      	beq.n	8015c94 <__ieee754_atan2+0x84>
 8015cca:	1a9b      	subs	r3, r3, r2
 8015ccc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015cd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015cd4:	da1e      	bge.n	8015d14 <__ieee754_atan2+0x104>
 8015cd6:	2f00      	cmp	r7, #0
 8015cd8:	da01      	bge.n	8015cde <__ieee754_atan2+0xce>
 8015cda:	323c      	adds	r2, #60	; 0x3c
 8015cdc:	db1e      	blt.n	8015d1c <__ieee754_atan2+0x10c>
 8015cde:	4632      	mov	r2, r6
 8015ce0:	463b      	mov	r3, r7
 8015ce2:	f7ea fd57 	bl	8000794 <__aeabi_ddiv>
 8015ce6:	ec41 0b10 	vmov	d0, r0, r1
 8015cea:	f001 fa85 	bl	80171f8 <fabs>
 8015cee:	f001 f8e3 	bl	8016eb8 <atan>
 8015cf2:	ec51 0b10 	vmov	r0, r1, d0
 8015cf6:	2c01      	cmp	r4, #1
 8015cf8:	d013      	beq.n	8015d22 <__ieee754_atan2+0x112>
 8015cfa:	2c02      	cmp	r4, #2
 8015cfc:	d015      	beq.n	8015d2a <__ieee754_atan2+0x11a>
 8015cfe:	2c00      	cmp	r4, #0
 8015d00:	d0a7      	beq.n	8015c52 <__ieee754_atan2+0x42>
 8015d02:	a319      	add	r3, pc, #100	; (adr r3, 8015d68 <__ieee754_atan2+0x158>)
 8015d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d08:	f7ea fa62 	bl	80001d0 <__aeabi_dsub>
 8015d0c:	a318      	add	r3, pc, #96	; (adr r3, 8015d70 <__ieee754_atan2+0x160>)
 8015d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d12:	e014      	b.n	8015d3e <__ieee754_atan2+0x12e>
 8015d14:	a118      	add	r1, pc, #96	; (adr r1, 8015d78 <__ieee754_atan2+0x168>)
 8015d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d1a:	e7ec      	b.n	8015cf6 <__ieee754_atan2+0xe6>
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	2100      	movs	r1, #0
 8015d20:	e7e9      	b.n	8015cf6 <__ieee754_atan2+0xe6>
 8015d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d26:	4619      	mov	r1, r3
 8015d28:	e793      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d2a:	a30f      	add	r3, pc, #60	; (adr r3, 8015d68 <__ieee754_atan2+0x158>)
 8015d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d30:	f7ea fa4e 	bl	80001d0 <__aeabi_dsub>
 8015d34:	4602      	mov	r2, r0
 8015d36:	460b      	mov	r3, r1
 8015d38:	a10d      	add	r1, pc, #52	; (adr r1, 8015d70 <__ieee754_atan2+0x160>)
 8015d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d3e:	f7ea fa47 	bl	80001d0 <__aeabi_dsub>
 8015d42:	e786      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d44:	a10a      	add	r1, pc, #40	; (adr r1, 8015d70 <__ieee754_atan2+0x160>)
 8015d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d4a:	e782      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d4c:	a10c      	add	r1, pc, #48	; (adr r1, 8015d80 <__ieee754_atan2+0x170>)
 8015d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d52:	e77e      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d54:	2000      	movs	r0, #0
 8015d56:	2100      	movs	r1, #0
 8015d58:	e77b      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d5a:	a107      	add	r1, pc, #28	; (adr r1, 8015d78 <__ieee754_atan2+0x168>)
 8015d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d60:	e777      	b.n	8015c52 <__ieee754_atan2+0x42>
 8015d62:	bf00      	nop
 8015d64:	f3af 8000 	nop.w
 8015d68:	33145c07 	.word	0x33145c07
 8015d6c:	3ca1a626 	.word	0x3ca1a626
 8015d70:	54442d18 	.word	0x54442d18
 8015d74:	400921fb 	.word	0x400921fb
 8015d78:	54442d18 	.word	0x54442d18
 8015d7c:	3ff921fb 	.word	0x3ff921fb
 8015d80:	54442d18 	.word	0x54442d18
 8015d84:	3fe921fb 	.word	0x3fe921fb
 8015d88:	08017848 	.word	0x08017848
 8015d8c:	08017860 	.word	0x08017860
 8015d90:	54442d18 	.word	0x54442d18
 8015d94:	c00921fb 	.word	0xc00921fb
 8015d98:	54442d18 	.word	0x54442d18
 8015d9c:	bff921fb 	.word	0xbff921fb
 8015da0:	7ff00000 	.word	0x7ff00000

08015da4 <__ieee754_sqrt>:
 8015da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da8:	ec55 4b10 	vmov	r4, r5, d0
 8015dac:	4e56      	ldr	r6, [pc, #344]	; (8015f08 <__ieee754_sqrt+0x164>)
 8015dae:	43ae      	bics	r6, r5
 8015db0:	ee10 0a10 	vmov	r0, s0
 8015db4:	ee10 3a10 	vmov	r3, s0
 8015db8:	4629      	mov	r1, r5
 8015dba:	462a      	mov	r2, r5
 8015dbc:	d110      	bne.n	8015de0 <__ieee754_sqrt+0x3c>
 8015dbe:	ee10 2a10 	vmov	r2, s0
 8015dc2:	462b      	mov	r3, r5
 8015dc4:	f7ea fbbc 	bl	8000540 <__aeabi_dmul>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	460b      	mov	r3, r1
 8015dcc:	4620      	mov	r0, r4
 8015dce:	4629      	mov	r1, r5
 8015dd0:	f7ea fa00 	bl	80001d4 <__adddf3>
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	460d      	mov	r5, r1
 8015dd8:	ec45 4b10 	vmov	d0, r4, r5
 8015ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de0:	2d00      	cmp	r5, #0
 8015de2:	dc10      	bgt.n	8015e06 <__ieee754_sqrt+0x62>
 8015de4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015de8:	4330      	orrs	r0, r6
 8015dea:	d0f5      	beq.n	8015dd8 <__ieee754_sqrt+0x34>
 8015dec:	b15d      	cbz	r5, 8015e06 <__ieee754_sqrt+0x62>
 8015dee:	ee10 2a10 	vmov	r2, s0
 8015df2:	462b      	mov	r3, r5
 8015df4:	ee10 0a10 	vmov	r0, s0
 8015df8:	f7ea f9ea 	bl	80001d0 <__aeabi_dsub>
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	460b      	mov	r3, r1
 8015e00:	f7ea fcc8 	bl	8000794 <__aeabi_ddiv>
 8015e04:	e7e6      	b.n	8015dd4 <__ieee754_sqrt+0x30>
 8015e06:	1509      	asrs	r1, r1, #20
 8015e08:	d076      	beq.n	8015ef8 <__ieee754_sqrt+0x154>
 8015e0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015e0e:	07ce      	lsls	r6, r1, #31
 8015e10:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015e14:	bf5e      	ittt	pl
 8015e16:	0fda      	lsrpl	r2, r3, #31
 8015e18:	005b      	lslpl	r3, r3, #1
 8015e1a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015e1e:	0fda      	lsrs	r2, r3, #31
 8015e20:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015e24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015e28:	2000      	movs	r0, #0
 8015e2a:	106d      	asrs	r5, r5, #1
 8015e2c:	005b      	lsls	r3, r3, #1
 8015e2e:	f04f 0e16 	mov.w	lr, #22
 8015e32:	4684      	mov	ip, r0
 8015e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015e38:	eb0c 0401 	add.w	r4, ip, r1
 8015e3c:	4294      	cmp	r4, r2
 8015e3e:	bfde      	ittt	le
 8015e40:	1b12      	suble	r2, r2, r4
 8015e42:	eb04 0c01 	addle.w	ip, r4, r1
 8015e46:	1840      	addle	r0, r0, r1
 8015e48:	0052      	lsls	r2, r2, #1
 8015e4a:	f1be 0e01 	subs.w	lr, lr, #1
 8015e4e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015e52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015e56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015e5a:	d1ed      	bne.n	8015e38 <__ieee754_sqrt+0x94>
 8015e5c:	4671      	mov	r1, lr
 8015e5e:	2720      	movs	r7, #32
 8015e60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015e64:	4562      	cmp	r2, ip
 8015e66:	eb04 060e 	add.w	r6, r4, lr
 8015e6a:	dc02      	bgt.n	8015e72 <__ieee754_sqrt+0xce>
 8015e6c:	d113      	bne.n	8015e96 <__ieee754_sqrt+0xf2>
 8015e6e:	429e      	cmp	r6, r3
 8015e70:	d811      	bhi.n	8015e96 <__ieee754_sqrt+0xf2>
 8015e72:	2e00      	cmp	r6, #0
 8015e74:	eb06 0e04 	add.w	lr, r6, r4
 8015e78:	da43      	bge.n	8015f02 <__ieee754_sqrt+0x15e>
 8015e7a:	f1be 0f00 	cmp.w	lr, #0
 8015e7e:	db40      	blt.n	8015f02 <__ieee754_sqrt+0x15e>
 8015e80:	f10c 0801 	add.w	r8, ip, #1
 8015e84:	eba2 020c 	sub.w	r2, r2, ip
 8015e88:	429e      	cmp	r6, r3
 8015e8a:	bf88      	it	hi
 8015e8c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015e90:	1b9b      	subs	r3, r3, r6
 8015e92:	4421      	add	r1, r4
 8015e94:	46c4      	mov	ip, r8
 8015e96:	0052      	lsls	r2, r2, #1
 8015e98:	3f01      	subs	r7, #1
 8015e9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015e9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015ea2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015ea6:	d1dd      	bne.n	8015e64 <__ieee754_sqrt+0xc0>
 8015ea8:	4313      	orrs	r3, r2
 8015eaa:	d006      	beq.n	8015eba <__ieee754_sqrt+0x116>
 8015eac:	1c4c      	adds	r4, r1, #1
 8015eae:	bf13      	iteet	ne
 8015eb0:	3101      	addne	r1, #1
 8015eb2:	3001      	addeq	r0, #1
 8015eb4:	4639      	moveq	r1, r7
 8015eb6:	f021 0101 	bicne.w	r1, r1, #1
 8015eba:	1043      	asrs	r3, r0, #1
 8015ebc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015ec0:	0849      	lsrs	r1, r1, #1
 8015ec2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015ec6:	07c2      	lsls	r2, r0, #31
 8015ec8:	bf48      	it	mi
 8015eca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015ece:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015ed2:	460c      	mov	r4, r1
 8015ed4:	463d      	mov	r5, r7
 8015ed6:	e77f      	b.n	8015dd8 <__ieee754_sqrt+0x34>
 8015ed8:	0ada      	lsrs	r2, r3, #11
 8015eda:	3815      	subs	r0, #21
 8015edc:	055b      	lsls	r3, r3, #21
 8015ede:	2a00      	cmp	r2, #0
 8015ee0:	d0fa      	beq.n	8015ed8 <__ieee754_sqrt+0x134>
 8015ee2:	02d7      	lsls	r7, r2, #11
 8015ee4:	d50a      	bpl.n	8015efc <__ieee754_sqrt+0x158>
 8015ee6:	f1c1 0420 	rsb	r4, r1, #32
 8015eea:	fa23 f404 	lsr.w	r4, r3, r4
 8015eee:	1e4d      	subs	r5, r1, #1
 8015ef0:	408b      	lsls	r3, r1
 8015ef2:	4322      	orrs	r2, r4
 8015ef4:	1b41      	subs	r1, r0, r5
 8015ef6:	e788      	b.n	8015e0a <__ieee754_sqrt+0x66>
 8015ef8:	4608      	mov	r0, r1
 8015efa:	e7f0      	b.n	8015ede <__ieee754_sqrt+0x13a>
 8015efc:	0052      	lsls	r2, r2, #1
 8015efe:	3101      	adds	r1, #1
 8015f00:	e7ef      	b.n	8015ee2 <__ieee754_sqrt+0x13e>
 8015f02:	46e0      	mov	r8, ip
 8015f04:	e7be      	b.n	8015e84 <__ieee754_sqrt+0xe0>
 8015f06:	bf00      	nop
 8015f08:	7ff00000 	.word	0x7ff00000

08015f0c <__ieee754_acosf>:
 8015f0c:	b508      	push	{r3, lr}
 8015f0e:	ee10 3a10 	vmov	r3, s0
 8015f12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015f16:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015f1a:	ed2d 8b0c 	vpush	{d8-d13}
 8015f1e:	d10a      	bne.n	8015f36 <__ieee754_acosf+0x2a>
 8015f20:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80160bc <__ieee754_acosf+0x1b0>
 8015f24:	ed9f 8a66 	vldr	s16, [pc, #408]	; 80160c0 <__ieee754_acosf+0x1b4>
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	bfd8      	it	le
 8015f2c:	eeb0 0a48 	vmovle.f32	s0, s16
 8015f30:	ecbd 8b0c 	vpop	{d8-d13}
 8015f34:	bd08      	pop	{r3, pc}
 8015f36:	dd04      	ble.n	8015f42 <__ieee754_acosf+0x36>
 8015f38:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015f3c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015f40:	e7f6      	b.n	8015f30 <__ieee754_acosf+0x24>
 8015f42:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8015f46:	da3e      	bge.n	8015fc6 <__ieee754_acosf+0xba>
 8015f48:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8015f4c:	f340 80b3 	ble.w	80160b6 <__ieee754_acosf+0x1aa>
 8015f50:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015f54:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80160c4 <__ieee754_acosf+0x1b8>
 8015f58:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80160c8 <__ieee754_acosf+0x1bc>
 8015f5c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80160cc <__ieee754_acosf+0x1c0>
 8015f60:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80160d0 <__ieee754_acosf+0x1c4>
 8015f64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015f68:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80160d4 <__ieee754_acosf+0x1c8>
 8015f6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015f70:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80160d8 <__ieee754_acosf+0x1cc>
 8015f74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f78:	eddf 6a58 	vldr	s13, [pc, #352]	; 80160dc <__ieee754_acosf+0x1d0>
 8015f7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015f80:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80160e0 <__ieee754_acosf+0x1d4>
 8015f84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f88:	eddf 6a56 	vldr	s13, [pc, #344]	; 80160e4 <__ieee754_acosf+0x1d8>
 8015f8c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015f90:	eddf 6a55 	vldr	s13, [pc, #340]	; 80160e8 <__ieee754_acosf+0x1dc>
 8015f94:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015f98:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80160ec <__ieee754_acosf+0x1e0>
 8015f9c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015fa4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fac:	eef0 7a66 	vmov.f32	s15, s13
 8015fb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015fb4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80160f0 <__ieee754_acosf+0x1e4>
 8015fb8:	eea0 8a66 	vfms.f32	s16, s0, s13
 8015fbc:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015fc0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015fc4:	e7b4      	b.n	8015f30 <__ieee754_acosf+0x24>
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	eddf da3e 	vldr	s27, [pc, #248]	; 80160c4 <__ieee754_acosf+0x1b8>
 8015fcc:	eddf ca3e 	vldr	s25, [pc, #248]	; 80160c8 <__ieee754_acosf+0x1bc>
 8015fd0:	ed9f ca40 	vldr	s24, [pc, #256]	; 80160d4 <__ieee754_acosf+0x1c8>
 8015fd4:	eddf ba40 	vldr	s23, [pc, #256]	; 80160d8 <__ieee754_acosf+0x1cc>
 8015fd8:	ed9f ba40 	vldr	s22, [pc, #256]	; 80160dc <__ieee754_acosf+0x1d0>
 8015fdc:	eddf 8a40 	vldr	s17, [pc, #256]	; 80160e0 <__ieee754_acosf+0x1d4>
 8015fe0:	ed9f da40 	vldr	s26, [pc, #256]	; 80160e4 <__ieee754_acosf+0x1d8>
 8015fe4:	eddf aa39 	vldr	s21, [pc, #228]	; 80160cc <__ieee754_acosf+0x1c0>
 8015fe8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80160e8 <__ieee754_acosf+0x1dc>
 8015fec:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80160ec <__ieee754_acosf+0x1e0>
 8015ff0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015ff4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015ff8:	da28      	bge.n	801604c <__ieee754_acosf+0x140>
 8015ffa:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015ffe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016002:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8016006:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801600a:	eeac ca80 	vfma.f32	s24, s25, s0
 801600e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016012:	eeec ba00 	vfma.f32	s23, s24, s0
 8016016:	eeea 9a00 	vfma.f32	s19, s20, s0
 801601a:	eeab ba80 	vfma.f32	s22, s23, s0
 801601e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8016022:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8016026:	ee68 8a80 	vmul.f32	s17, s17, s0
 801602a:	f000 fb2b 	bl	8016684 <__ieee754_sqrtf>
 801602e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8016032:	eddf 7a30 	vldr	s15, [pc, #192]	; 80160f4 <__ieee754_acosf+0x1e8>
 8016036:	eee0 7a07 	vfma.f32	s15, s0, s14
 801603a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801603e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016042:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80160f8 <__ieee754_acosf+0x1ec>
 8016046:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801604a:	e771      	b.n	8015f30 <__ieee754_acosf+0x24>
 801604c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016050:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016054:	eeb0 0a48 	vmov.f32	s0, s16
 8016058:	f000 fb14 	bl	8016684 <__ieee754_sqrtf>
 801605c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016060:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8016064:	eeac ca88 	vfma.f32	s24, s25, s16
 8016068:	eeaa aa88 	vfma.f32	s20, s21, s16
 801606c:	eeec ba08 	vfma.f32	s23, s24, s16
 8016070:	ee10 3a10 	vmov	r3, s0
 8016074:	eeab ba88 	vfma.f32	s22, s23, s16
 8016078:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801607c:	f023 030f 	bic.w	r3, r3, #15
 8016080:	eeea 9a08 	vfma.f32	s19, s20, s16
 8016084:	ee07 3a90 	vmov	s15, r3
 8016088:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801608c:	eeb0 6a48 	vmov.f32	s12, s16
 8016090:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016094:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016098:	ee70 6a27 	vadd.f32	s13, s0, s15
 801609c:	ee68 8a88 	vmul.f32	s17, s17, s16
 80160a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80160a4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80160a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80160ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80160b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80160b4:	e73c      	b.n	8015f30 <__ieee754_acosf+0x24>
 80160b6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80160fc <__ieee754_acosf+0x1f0>
 80160ba:	e739      	b.n	8015f30 <__ieee754_acosf+0x24>
 80160bc:	00000000 	.word	0x00000000
 80160c0:	40490fdb 	.word	0x40490fdb
 80160c4:	3811ef08 	.word	0x3811ef08
 80160c8:	3a4f7f04 	.word	0x3a4f7f04
 80160cc:	bf303361 	.word	0xbf303361
 80160d0:	33a22168 	.word	0x33a22168
 80160d4:	bd241146 	.word	0xbd241146
 80160d8:	3e4e0aa8 	.word	0x3e4e0aa8
 80160dc:	bea6b090 	.word	0xbea6b090
 80160e0:	3e2aaaab 	.word	0x3e2aaaab
 80160e4:	3d9dc62e 	.word	0x3d9dc62e
 80160e8:	4001572d 	.word	0x4001572d
 80160ec:	c019d139 	.word	0xc019d139
 80160f0:	3fc90fda 	.word	0x3fc90fda
 80160f4:	b3a22168 	.word	0xb3a22168
 80160f8:	40490fda 	.word	0x40490fda
 80160fc:	3fc90fdb 	.word	0x3fc90fdb

08016100 <__ieee754_asinf>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	ee10 5a10 	vmov	r5, s0
 8016106:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801610a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801610e:	ed2d 8b04 	vpush	{d8-d9}
 8016112:	d10c      	bne.n	801612e <__ieee754_asinf+0x2e>
 8016114:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801628c <__ieee754_asinf+0x18c>
 8016118:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016290 <__ieee754_asinf+0x190>
 801611c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016120:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016124:	eeb0 0a67 	vmov.f32	s0, s15
 8016128:	ecbd 8b04 	vpop	{d8-d9}
 801612c:	bd38      	pop	{r3, r4, r5, pc}
 801612e:	dd04      	ble.n	801613a <__ieee754_asinf+0x3a>
 8016130:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016134:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016138:	e7f6      	b.n	8016128 <__ieee754_asinf+0x28>
 801613a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801613e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016142:	da0b      	bge.n	801615c <__ieee754_asinf+0x5c>
 8016144:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016148:	da52      	bge.n	80161f0 <__ieee754_asinf+0xf0>
 801614a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016294 <__ieee754_asinf+0x194>
 801614e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016152:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801615a:	dce5      	bgt.n	8016128 <__ieee754_asinf+0x28>
 801615c:	f001 f92a 	bl	80173b4 <fabsf>
 8016160:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016164:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016168:	ee20 8a08 	vmul.f32	s16, s0, s16
 801616c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016298 <__ieee754_asinf+0x198>
 8016170:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801629c <__ieee754_asinf+0x19c>
 8016174:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80162a0 <__ieee754_asinf+0x1a0>
 8016178:	eea8 7a27 	vfma.f32	s14, s16, s15
 801617c:	eddf 7a49 	vldr	s15, [pc, #292]	; 80162a4 <__ieee754_asinf+0x1a4>
 8016180:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016184:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80162a8 <__ieee754_asinf+0x1a8>
 8016188:	eea7 7a88 	vfma.f32	s14, s15, s16
 801618c:	eddf 7a47 	vldr	s15, [pc, #284]	; 80162ac <__ieee754_asinf+0x1ac>
 8016190:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016194:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80162b0 <__ieee754_asinf+0x1b0>
 8016198:	eea7 9a88 	vfma.f32	s18, s15, s16
 801619c:	eddf 7a45 	vldr	s15, [pc, #276]	; 80162b4 <__ieee754_asinf+0x1b4>
 80161a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80161a4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80162b8 <__ieee754_asinf+0x1b8>
 80161a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80161ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 80162bc <__ieee754_asinf+0x1bc>
 80161b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80161b4:	eeb0 0a48 	vmov.f32	s0, s16
 80161b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80161bc:	f000 fa62 	bl	8016684 <__ieee754_sqrtf>
 80161c0:	4b3f      	ldr	r3, [pc, #252]	; (80162c0 <__ieee754_asinf+0x1c0>)
 80161c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80161c6:	429c      	cmp	r4, r3
 80161c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80161cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161d0:	dd3d      	ble.n	801624e <__ieee754_asinf+0x14e>
 80161d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80161d6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80162c4 <__ieee754_asinf+0x1c4>
 80161da:	eee0 7a26 	vfma.f32	s15, s0, s13
 80161de:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016290 <__ieee754_asinf+0x190>
 80161e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80161e6:	2d00      	cmp	r5, #0
 80161e8:	bfd8      	it	le
 80161ea:	eeb1 0a40 	vnegle.f32	s0, s0
 80161ee:	e79b      	b.n	8016128 <__ieee754_asinf+0x28>
 80161f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80161f4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016298 <__ieee754_asinf+0x198>
 80161f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801629c <__ieee754_asinf+0x19c>
 80161fc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80162b0 <__ieee754_asinf+0x1b0>
 8016200:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016204:	eddf 6a27 	vldr	s13, [pc, #156]	; 80162a4 <__ieee754_asinf+0x1a4>
 8016208:	eee7 6a27 	vfma.f32	s13, s14, s15
 801620c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80162a8 <__ieee754_asinf+0x1a8>
 8016210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016214:	eddf 6a25 	vldr	s13, [pc, #148]	; 80162ac <__ieee754_asinf+0x1ac>
 8016218:	eee7 6a27 	vfma.f32	s13, s14, s15
 801621c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80162a0 <__ieee754_asinf+0x1a0>
 8016220:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016224:	eddf 6a23 	vldr	s13, [pc, #140]	; 80162b4 <__ieee754_asinf+0x1b4>
 8016228:	eee7 6a86 	vfma.f32	s13, s15, s12
 801622c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80162b8 <__ieee754_asinf+0x1b8>
 8016230:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016234:	eddf 6a21 	vldr	s13, [pc, #132]	; 80162bc <__ieee754_asinf+0x1bc>
 8016238:	eee6 6a27 	vfma.f32	s13, s12, s15
 801623c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016240:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016244:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016248:	eea0 0a27 	vfma.f32	s0, s0, s15
 801624c:	e76c      	b.n	8016128 <__ieee754_asinf+0x28>
 801624e:	ee10 3a10 	vmov	r3, s0
 8016252:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016256:	f023 030f 	bic.w	r3, r3, #15
 801625a:	ee07 3a10 	vmov	s14, r3
 801625e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8016262:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016266:	ee30 0a00 	vadd.f32	s0, s0, s0
 801626a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801626e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801628c <__ieee754_asinf+0x18c>
 8016272:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016276:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801627a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80162c8 <__ieee754_asinf+0x1c8>
 801627e:	eeb0 6a40 	vmov.f32	s12, s0
 8016282:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016286:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801628a:	e7aa      	b.n	80161e2 <__ieee754_asinf+0xe2>
 801628c:	b33bbd2e 	.word	0xb33bbd2e
 8016290:	3fc90fdb 	.word	0x3fc90fdb
 8016294:	7149f2ca 	.word	0x7149f2ca
 8016298:	3811ef08 	.word	0x3811ef08
 801629c:	3a4f7f04 	.word	0x3a4f7f04
 80162a0:	3e2aaaab 	.word	0x3e2aaaab
 80162a4:	bd241146 	.word	0xbd241146
 80162a8:	3e4e0aa8 	.word	0x3e4e0aa8
 80162ac:	bea6b090 	.word	0xbea6b090
 80162b0:	3d9dc62e 	.word	0x3d9dc62e
 80162b4:	bf303361 	.word	0xbf303361
 80162b8:	4001572d 	.word	0x4001572d
 80162bc:	c019d139 	.word	0xc019d139
 80162c0:	3f799999 	.word	0x3f799999
 80162c4:	333bbd2e 	.word	0x333bbd2e
 80162c8:	3f490fdb 	.word	0x3f490fdb

080162cc <__ieee754_atan2f>:
 80162cc:	ee10 2a90 	vmov	r2, s1
 80162d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80162d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80162d8:	b510      	push	{r4, lr}
 80162da:	eef0 7a40 	vmov.f32	s15, s0
 80162de:	dc06      	bgt.n	80162ee <__ieee754_atan2f+0x22>
 80162e0:	ee10 0a10 	vmov	r0, s0
 80162e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80162e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80162ec:	dd04      	ble.n	80162f8 <__ieee754_atan2f+0x2c>
 80162ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80162f2:	eeb0 0a67 	vmov.f32	s0, s15
 80162f6:	bd10      	pop	{r4, pc}
 80162f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80162fc:	d103      	bne.n	8016306 <__ieee754_atan2f+0x3a>
 80162fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016302:	f000 bf83 	b.w	801720c <atanf>
 8016306:	1794      	asrs	r4, r2, #30
 8016308:	f004 0402 	and.w	r4, r4, #2
 801630c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016310:	b943      	cbnz	r3, 8016324 <__ieee754_atan2f+0x58>
 8016312:	2c02      	cmp	r4, #2
 8016314:	d05e      	beq.n	80163d4 <__ieee754_atan2f+0x108>
 8016316:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80163e8 <__ieee754_atan2f+0x11c>
 801631a:	2c03      	cmp	r4, #3
 801631c:	bf08      	it	eq
 801631e:	eef0 7a47 	vmoveq.f32	s15, s14
 8016322:	e7e6      	b.n	80162f2 <__ieee754_atan2f+0x26>
 8016324:	b941      	cbnz	r1, 8016338 <__ieee754_atan2f+0x6c>
 8016326:	eddf 7a31 	vldr	s15, [pc, #196]	; 80163ec <__ieee754_atan2f+0x120>
 801632a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80163f0 <__ieee754_atan2f+0x124>
 801632e:	2800      	cmp	r0, #0
 8016330:	bfb8      	it	lt
 8016332:	eef0 7a40 	vmovlt.f32	s15, s0
 8016336:	e7dc      	b.n	80162f2 <__ieee754_atan2f+0x26>
 8016338:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801633c:	d110      	bne.n	8016360 <__ieee754_atan2f+0x94>
 801633e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016342:	f104 34ff 	add.w	r4, r4, #4294967295
 8016346:	d107      	bne.n	8016358 <__ieee754_atan2f+0x8c>
 8016348:	2c02      	cmp	r4, #2
 801634a:	d846      	bhi.n	80163da <__ieee754_atan2f+0x10e>
 801634c:	4b29      	ldr	r3, [pc, #164]	; (80163f4 <__ieee754_atan2f+0x128>)
 801634e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016352:	edd4 7a00 	vldr	s15, [r4]
 8016356:	e7cc      	b.n	80162f2 <__ieee754_atan2f+0x26>
 8016358:	2c02      	cmp	r4, #2
 801635a:	d841      	bhi.n	80163e0 <__ieee754_atan2f+0x114>
 801635c:	4b26      	ldr	r3, [pc, #152]	; (80163f8 <__ieee754_atan2f+0x12c>)
 801635e:	e7f6      	b.n	801634e <__ieee754_atan2f+0x82>
 8016360:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016364:	d0df      	beq.n	8016326 <__ieee754_atan2f+0x5a>
 8016366:	1a5b      	subs	r3, r3, r1
 8016368:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801636c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016370:	da1a      	bge.n	80163a8 <__ieee754_atan2f+0xdc>
 8016372:	2a00      	cmp	r2, #0
 8016374:	da01      	bge.n	801637a <__ieee754_atan2f+0xae>
 8016376:	313c      	adds	r1, #60	; 0x3c
 8016378:	db19      	blt.n	80163ae <__ieee754_atan2f+0xe2>
 801637a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801637e:	f001 f819 	bl	80173b4 <fabsf>
 8016382:	f000 ff43 	bl	801720c <atanf>
 8016386:	eef0 7a40 	vmov.f32	s15, s0
 801638a:	2c01      	cmp	r4, #1
 801638c:	d012      	beq.n	80163b4 <__ieee754_atan2f+0xe8>
 801638e:	2c02      	cmp	r4, #2
 8016390:	d017      	beq.n	80163c2 <__ieee754_atan2f+0xf6>
 8016392:	2c00      	cmp	r4, #0
 8016394:	d0ad      	beq.n	80162f2 <__ieee754_atan2f+0x26>
 8016396:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80163fc <__ieee754_atan2f+0x130>
 801639a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801639e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016400 <__ieee754_atan2f+0x134>
 80163a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80163a6:	e7a4      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163a8:	eddf 7a10 	vldr	s15, [pc, #64]	; 80163ec <__ieee754_atan2f+0x120>
 80163ac:	e7ed      	b.n	801638a <__ieee754_atan2f+0xbe>
 80163ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016404 <__ieee754_atan2f+0x138>
 80163b2:	e7ea      	b.n	801638a <__ieee754_atan2f+0xbe>
 80163b4:	ee17 3a90 	vmov	r3, s15
 80163b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80163bc:	ee07 3a90 	vmov	s15, r3
 80163c0:	e797      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163c2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80163fc <__ieee754_atan2f+0x130>
 80163c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80163ca:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016400 <__ieee754_atan2f+0x134>
 80163ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80163d2:	e78e      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163d4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016400 <__ieee754_atan2f+0x134>
 80163d8:	e78b      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163da:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016408 <__ieee754_atan2f+0x13c>
 80163de:	e788      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016404 <__ieee754_atan2f+0x138>
 80163e4:	e785      	b.n	80162f2 <__ieee754_atan2f+0x26>
 80163e6:	bf00      	nop
 80163e8:	c0490fdb 	.word	0xc0490fdb
 80163ec:	3fc90fdb 	.word	0x3fc90fdb
 80163f0:	bfc90fdb 	.word	0xbfc90fdb
 80163f4:	08017878 	.word	0x08017878
 80163f8:	08017884 	.word	0x08017884
 80163fc:	33bbbd2e 	.word	0x33bbbd2e
 8016400:	40490fdb 	.word	0x40490fdb
 8016404:	00000000 	.word	0x00000000
 8016408:	3f490fdb 	.word	0x3f490fdb

0801640c <__ieee754_rem_pio2f>:
 801640c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801640e:	ee10 6a10 	vmov	r6, s0
 8016412:	4b8e      	ldr	r3, [pc, #568]	; (801664c <__ieee754_rem_pio2f+0x240>)
 8016414:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016418:	429d      	cmp	r5, r3
 801641a:	b087      	sub	sp, #28
 801641c:	eef0 7a40 	vmov.f32	s15, s0
 8016420:	4604      	mov	r4, r0
 8016422:	dc05      	bgt.n	8016430 <__ieee754_rem_pio2f+0x24>
 8016424:	2300      	movs	r3, #0
 8016426:	ed80 0a00 	vstr	s0, [r0]
 801642a:	6043      	str	r3, [r0, #4]
 801642c:	2000      	movs	r0, #0
 801642e:	e01a      	b.n	8016466 <__ieee754_rem_pio2f+0x5a>
 8016430:	4b87      	ldr	r3, [pc, #540]	; (8016650 <__ieee754_rem_pio2f+0x244>)
 8016432:	429d      	cmp	r5, r3
 8016434:	dc46      	bgt.n	80164c4 <__ieee754_rem_pio2f+0xb8>
 8016436:	2e00      	cmp	r6, #0
 8016438:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016654 <__ieee754_rem_pio2f+0x248>
 801643c:	4b86      	ldr	r3, [pc, #536]	; (8016658 <__ieee754_rem_pio2f+0x24c>)
 801643e:	f025 050f 	bic.w	r5, r5, #15
 8016442:	dd1f      	ble.n	8016484 <__ieee754_rem_pio2f+0x78>
 8016444:	429d      	cmp	r5, r3
 8016446:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801644a:	d00e      	beq.n	801646a <__ieee754_rem_pio2f+0x5e>
 801644c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801665c <__ieee754_rem_pio2f+0x250>
 8016450:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016454:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016458:	ed80 0a00 	vstr	s0, [r0]
 801645c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016460:	2001      	movs	r0, #1
 8016462:	edc4 7a01 	vstr	s15, [r4, #4]
 8016466:	b007      	add	sp, #28
 8016468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016660 <__ieee754_rem_pio2f+0x254>
 801646e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016664 <__ieee754_rem_pio2f+0x258>
 8016472:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016476:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801647a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801647e:	edc0 6a00 	vstr	s13, [r0]
 8016482:	e7eb      	b.n	801645c <__ieee754_rem_pio2f+0x50>
 8016484:	429d      	cmp	r5, r3
 8016486:	ee77 7a80 	vadd.f32	s15, s15, s0
 801648a:	d00e      	beq.n	80164aa <__ieee754_rem_pio2f+0x9e>
 801648c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801665c <__ieee754_rem_pio2f+0x250>
 8016490:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016494:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016498:	ed80 0a00 	vstr	s0, [r0]
 801649c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164a0:	f04f 30ff 	mov.w	r0, #4294967295
 80164a4:	edc4 7a01 	vstr	s15, [r4, #4]
 80164a8:	e7dd      	b.n	8016466 <__ieee754_rem_pio2f+0x5a>
 80164aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016660 <__ieee754_rem_pio2f+0x254>
 80164ae:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8016664 <__ieee754_rem_pio2f+0x258>
 80164b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80164b6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80164ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80164be:	edc0 6a00 	vstr	s13, [r0]
 80164c2:	e7eb      	b.n	801649c <__ieee754_rem_pio2f+0x90>
 80164c4:	4b68      	ldr	r3, [pc, #416]	; (8016668 <__ieee754_rem_pio2f+0x25c>)
 80164c6:	429d      	cmp	r5, r3
 80164c8:	dc72      	bgt.n	80165b0 <__ieee754_rem_pio2f+0x1a4>
 80164ca:	f000 ff73 	bl	80173b4 <fabsf>
 80164ce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801666c <__ieee754_rem_pio2f+0x260>
 80164d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80164d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80164da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80164de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80164e2:	ee17 0a90 	vmov	r0, s15
 80164e6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016654 <__ieee754_rem_pio2f+0x248>
 80164ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 80164ee:	281f      	cmp	r0, #31
 80164f0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801665c <__ieee754_rem_pio2f+0x250>
 80164f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164f8:	eeb1 6a47 	vneg.f32	s12, s14
 80164fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016500:	ee16 2a90 	vmov	r2, s13
 8016504:	dc1c      	bgt.n	8016540 <__ieee754_rem_pio2f+0x134>
 8016506:	495a      	ldr	r1, [pc, #360]	; (8016670 <__ieee754_rem_pio2f+0x264>)
 8016508:	1e47      	subs	r7, r0, #1
 801650a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801650e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016512:	428b      	cmp	r3, r1
 8016514:	d014      	beq.n	8016540 <__ieee754_rem_pio2f+0x134>
 8016516:	6022      	str	r2, [r4, #0]
 8016518:	ed94 7a00 	vldr	s14, [r4]
 801651c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016520:	2e00      	cmp	r6, #0
 8016522:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016526:	ed84 0a01 	vstr	s0, [r4, #4]
 801652a:	da9c      	bge.n	8016466 <__ieee754_rem_pio2f+0x5a>
 801652c:	eeb1 7a47 	vneg.f32	s14, s14
 8016530:	eeb1 0a40 	vneg.f32	s0, s0
 8016534:	ed84 7a00 	vstr	s14, [r4]
 8016538:	ed84 0a01 	vstr	s0, [r4, #4]
 801653c:	4240      	negs	r0, r0
 801653e:	e792      	b.n	8016466 <__ieee754_rem_pio2f+0x5a>
 8016540:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016544:	15eb      	asrs	r3, r5, #23
 8016546:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801654a:	2d08      	cmp	r5, #8
 801654c:	dde3      	ble.n	8016516 <__ieee754_rem_pio2f+0x10a>
 801654e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016660 <__ieee754_rem_pio2f+0x254>
 8016552:	eef0 6a40 	vmov.f32	s13, s0
 8016556:	eee6 6a27 	vfma.f32	s13, s12, s15
 801655a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801655e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016562:	eddf 7a40 	vldr	s15, [pc, #256]	; 8016664 <__ieee754_rem_pio2f+0x258>
 8016566:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801656a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801656e:	eef0 7a40 	vmov.f32	s15, s0
 8016572:	ee15 2a90 	vmov	r2, s11
 8016576:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801657a:	1a5b      	subs	r3, r3, r1
 801657c:	2b19      	cmp	r3, #25
 801657e:	dc04      	bgt.n	801658a <__ieee754_rem_pio2f+0x17e>
 8016580:	edc4 5a00 	vstr	s11, [r4]
 8016584:	eeb0 0a66 	vmov.f32	s0, s13
 8016588:	e7c6      	b.n	8016518 <__ieee754_rem_pio2f+0x10c>
 801658a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016674 <__ieee754_rem_pio2f+0x268>
 801658e:	eeb0 0a66 	vmov.f32	s0, s13
 8016592:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016596:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801659a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016678 <__ieee754_rem_pio2f+0x26c>
 801659e:	eee6 7a25 	vfma.f32	s15, s12, s11
 80165a2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80165a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80165aa:	ed84 7a00 	vstr	s14, [r4]
 80165ae:	e7b3      	b.n	8016518 <__ieee754_rem_pio2f+0x10c>
 80165b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80165b4:	db06      	blt.n	80165c4 <__ieee754_rem_pio2f+0x1b8>
 80165b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80165ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80165be:	edc0 7a00 	vstr	s15, [r0]
 80165c2:	e733      	b.n	801642c <__ieee754_rem_pio2f+0x20>
 80165c4:	15ea      	asrs	r2, r5, #23
 80165c6:	3a86      	subs	r2, #134	; 0x86
 80165c8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80165cc:	ee07 3a90 	vmov	s15, r3
 80165d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80165d4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801667c <__ieee754_rem_pio2f+0x270>
 80165d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165e0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80165e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80165e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80165ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165f4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80165f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80165fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016604:	edcd 7a05 	vstr	s15, [sp, #20]
 8016608:	d11e      	bne.n	8016648 <__ieee754_rem_pio2f+0x23c>
 801660a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801660e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016612:	bf14      	ite	ne
 8016614:	2302      	movne	r3, #2
 8016616:	2301      	moveq	r3, #1
 8016618:	4919      	ldr	r1, [pc, #100]	; (8016680 <__ieee754_rem_pio2f+0x274>)
 801661a:	9101      	str	r1, [sp, #4]
 801661c:	2102      	movs	r1, #2
 801661e:	9100      	str	r1, [sp, #0]
 8016620:	a803      	add	r0, sp, #12
 8016622:	4621      	mov	r1, r4
 8016624:	f000 f892 	bl	801674c <__kernel_rem_pio2f>
 8016628:	2e00      	cmp	r6, #0
 801662a:	f6bf af1c 	bge.w	8016466 <__ieee754_rem_pio2f+0x5a>
 801662e:	edd4 7a00 	vldr	s15, [r4]
 8016632:	eef1 7a67 	vneg.f32	s15, s15
 8016636:	edc4 7a00 	vstr	s15, [r4]
 801663a:	edd4 7a01 	vldr	s15, [r4, #4]
 801663e:	eef1 7a67 	vneg.f32	s15, s15
 8016642:	edc4 7a01 	vstr	s15, [r4, #4]
 8016646:	e779      	b.n	801653c <__ieee754_rem_pio2f+0x130>
 8016648:	2303      	movs	r3, #3
 801664a:	e7e5      	b.n	8016618 <__ieee754_rem_pio2f+0x20c>
 801664c:	3f490fd8 	.word	0x3f490fd8
 8016650:	4016cbe3 	.word	0x4016cbe3
 8016654:	3fc90f80 	.word	0x3fc90f80
 8016658:	3fc90fd0 	.word	0x3fc90fd0
 801665c:	37354443 	.word	0x37354443
 8016660:	37354400 	.word	0x37354400
 8016664:	2e85a308 	.word	0x2e85a308
 8016668:	43490f80 	.word	0x43490f80
 801666c:	3f22f984 	.word	0x3f22f984
 8016670:	08017890 	.word	0x08017890
 8016674:	2e85a300 	.word	0x2e85a300
 8016678:	248d3132 	.word	0x248d3132
 801667c:	43800000 	.word	0x43800000
 8016680:	08017910 	.word	0x08017910

08016684 <__ieee754_sqrtf>:
 8016684:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016688:	4770      	bx	lr
	...

0801668c <__kernel_cosf>:
 801668c:	ee10 3a10 	vmov	r3, s0
 8016690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016694:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016698:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801669c:	da05      	bge.n	80166aa <__kernel_cosf+0x1e>
 801669e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80166a2:	ee17 2a90 	vmov	r2, s15
 80166a6:	2a00      	cmp	r2, #0
 80166a8:	d03d      	beq.n	8016726 <__kernel_cosf+0x9a>
 80166aa:	ee60 5a00 	vmul.f32	s11, s0, s0
 80166ae:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801672c <__kernel_cosf+0xa0>
 80166b2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016730 <__kernel_cosf+0xa4>
 80166b6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016734 <__kernel_cosf+0xa8>
 80166ba:	4a1f      	ldr	r2, [pc, #124]	; (8016738 <__kernel_cosf+0xac>)
 80166bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80166c0:	4293      	cmp	r3, r2
 80166c2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801673c <__kernel_cosf+0xb0>
 80166c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80166ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016740 <__kernel_cosf+0xb4>
 80166ce:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80166d2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016744 <__kernel_cosf+0xb8>
 80166d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80166da:	eeb0 7a66 	vmov.f32	s14, s13
 80166de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80166e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80166e6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80166ea:	ee67 6a25 	vmul.f32	s13, s14, s11
 80166ee:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80166f2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80166f6:	dc04      	bgt.n	8016702 <__kernel_cosf+0x76>
 80166f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80166fc:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016700:	4770      	bx	lr
 8016702:	4a11      	ldr	r2, [pc, #68]	; (8016748 <__kernel_cosf+0xbc>)
 8016704:	4293      	cmp	r3, r2
 8016706:	bfda      	itte	le
 8016708:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801670c:	ee06 3a90 	vmovle	s13, r3
 8016710:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016714:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016718:	ee36 0a66 	vsub.f32	s0, s12, s13
 801671c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016720:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016724:	4770      	bx	lr
 8016726:	eeb0 0a46 	vmov.f32	s0, s12
 801672a:	4770      	bx	lr
 801672c:	ad47d74e 	.word	0xad47d74e
 8016730:	310f74f6 	.word	0x310f74f6
 8016734:	3d2aaaab 	.word	0x3d2aaaab
 8016738:	3e999999 	.word	0x3e999999
 801673c:	b493f27c 	.word	0xb493f27c
 8016740:	37d00d01 	.word	0x37d00d01
 8016744:	bab60b61 	.word	0xbab60b61
 8016748:	3f480000 	.word	0x3f480000

0801674c <__kernel_rem_pio2f>:
 801674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016750:	ed2d 8b04 	vpush	{d8-d9}
 8016754:	b0d7      	sub	sp, #348	; 0x15c
 8016756:	4616      	mov	r6, r2
 8016758:	4698      	mov	r8, r3
 801675a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801675c:	4bbb      	ldr	r3, [pc, #748]	; (8016a4c <__kernel_rem_pio2f+0x300>)
 801675e:	9001      	str	r0, [sp, #4]
 8016760:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016764:	1d33      	adds	r3, r6, #4
 8016766:	460d      	mov	r5, r1
 8016768:	f108 39ff 	add.w	r9, r8, #4294967295
 801676c:	db29      	blt.n	80167c2 <__kernel_rem_pio2f+0x76>
 801676e:	1ef1      	subs	r1, r6, #3
 8016770:	bf48      	it	mi
 8016772:	1d31      	addmi	r1, r6, #4
 8016774:	10c9      	asrs	r1, r1, #3
 8016776:	1c4c      	adds	r4, r1, #1
 8016778:	00e3      	lsls	r3, r4, #3
 801677a:	9302      	str	r3, [sp, #8]
 801677c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801677e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016a5c <__kernel_rem_pio2f+0x310>
 8016782:	eba1 0009 	sub.w	r0, r1, r9
 8016786:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801678a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801678e:	eb07 0c09 	add.w	ip, r7, r9
 8016792:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016796:	2300      	movs	r3, #0
 8016798:	4563      	cmp	r3, ip
 801679a:	dd14      	ble.n	80167c6 <__kernel_rem_pio2f+0x7a>
 801679c:	ab1a      	add	r3, sp, #104	; 0x68
 801679e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80167a2:	46cc      	mov	ip, r9
 80167a4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80167a8:	f1c8 0b01 	rsb	fp, r8, #1
 80167ac:	eb0b 020c 	add.w	r2, fp, ip
 80167b0:	4297      	cmp	r7, r2
 80167b2:	db27      	blt.n	8016804 <__kernel_rem_pio2f+0xb8>
 80167b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80167b8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016a5c <__kernel_rem_pio2f+0x310>
 80167bc:	4618      	mov	r0, r3
 80167be:	2200      	movs	r2, #0
 80167c0:	e016      	b.n	80167f0 <__kernel_rem_pio2f+0xa4>
 80167c2:	2100      	movs	r1, #0
 80167c4:	e7d7      	b.n	8016776 <__kernel_rem_pio2f+0x2a>
 80167c6:	42d8      	cmn	r0, r3
 80167c8:	bf5d      	ittte	pl
 80167ca:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80167ce:	ee07 2a90 	vmovpl	s15, r2
 80167d2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80167d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80167da:	ecea 7a01 	vstmia	sl!, {s15}
 80167de:	3301      	adds	r3, #1
 80167e0:	e7da      	b.n	8016798 <__kernel_rem_pio2f+0x4c>
 80167e2:	ecfe 6a01 	vldmia	lr!, {s13}
 80167e6:	ed90 7a00 	vldr	s14, [r0]
 80167ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80167ee:	3201      	adds	r2, #1
 80167f0:	454a      	cmp	r2, r9
 80167f2:	f1a0 0004 	sub.w	r0, r0, #4
 80167f6:	ddf4      	ble.n	80167e2 <__kernel_rem_pio2f+0x96>
 80167f8:	ecea 7a01 	vstmia	sl!, {s15}
 80167fc:	3304      	adds	r3, #4
 80167fe:	f10c 0c01 	add.w	ip, ip, #1
 8016802:	e7d3      	b.n	80167ac <__kernel_rem_pio2f+0x60>
 8016804:	ab06      	add	r3, sp, #24
 8016806:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801680a:	9304      	str	r3, [sp, #16]
 801680c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801680e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016a58 <__kernel_rem_pio2f+0x30c>
 8016812:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016a54 <__kernel_rem_pio2f+0x308>
 8016816:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801681a:	9303      	str	r3, [sp, #12]
 801681c:	46ba      	mov	sl, r7
 801681e:	ab56      	add	r3, sp, #344	; 0x158
 8016820:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016824:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016828:	ab06      	add	r3, sp, #24
 801682a:	4618      	mov	r0, r3
 801682c:	4652      	mov	r2, sl
 801682e:	2a00      	cmp	r2, #0
 8016830:	dc51      	bgt.n	80168d6 <__kernel_rem_pio2f+0x18a>
 8016832:	4620      	mov	r0, r4
 8016834:	9305      	str	r3, [sp, #20]
 8016836:	f000 fe0d 	bl	8017454 <scalbnf>
 801683a:	eeb0 8a40 	vmov.f32	s16, s0
 801683e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016842:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016846:	f000 fdbd 	bl	80173c4 <floorf>
 801684a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801684e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016852:	2c00      	cmp	r4, #0
 8016854:	9b05      	ldr	r3, [sp, #20]
 8016856:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801685a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801685e:	edcd 7a00 	vstr	s15, [sp]
 8016862:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016866:	dd4b      	ble.n	8016900 <__kernel_rem_pio2f+0x1b4>
 8016868:	f10a 3cff 	add.w	ip, sl, #4294967295
 801686c:	aa06      	add	r2, sp, #24
 801686e:	f1c4 0e08 	rsb	lr, r4, #8
 8016872:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016876:	ee17 1a90 	vmov	r1, s15
 801687a:	fa42 f00e 	asr.w	r0, r2, lr
 801687e:	4401      	add	r1, r0
 8016880:	9100      	str	r1, [sp, #0]
 8016882:	fa00 f00e 	lsl.w	r0, r0, lr
 8016886:	a906      	add	r1, sp, #24
 8016888:	1a12      	subs	r2, r2, r0
 801688a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801688e:	f1c4 0007 	rsb	r0, r4, #7
 8016892:	fa42 fb00 	asr.w	fp, r2, r0
 8016896:	f1bb 0f00 	cmp.w	fp, #0
 801689a:	dd43      	ble.n	8016924 <__kernel_rem_pio2f+0x1d8>
 801689c:	9a00      	ldr	r2, [sp, #0]
 801689e:	f04f 0e00 	mov.w	lr, #0
 80168a2:	3201      	adds	r2, #1
 80168a4:	9200      	str	r2, [sp, #0]
 80168a6:	4670      	mov	r0, lr
 80168a8:	45f2      	cmp	sl, lr
 80168aa:	dc6c      	bgt.n	8016986 <__kernel_rem_pio2f+0x23a>
 80168ac:	2c00      	cmp	r4, #0
 80168ae:	dd04      	ble.n	80168ba <__kernel_rem_pio2f+0x16e>
 80168b0:	2c01      	cmp	r4, #1
 80168b2:	d079      	beq.n	80169a8 <__kernel_rem_pio2f+0x25c>
 80168b4:	2c02      	cmp	r4, #2
 80168b6:	f000 8082 	beq.w	80169be <__kernel_rem_pio2f+0x272>
 80168ba:	f1bb 0f02 	cmp.w	fp, #2
 80168be:	d131      	bne.n	8016924 <__kernel_rem_pio2f+0x1d8>
 80168c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168c4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80168c8:	b360      	cbz	r0, 8016924 <__kernel_rem_pio2f+0x1d8>
 80168ca:	4620      	mov	r0, r4
 80168cc:	f000 fdc2 	bl	8017454 <scalbnf>
 80168d0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80168d4:	e026      	b.n	8016924 <__kernel_rem_pio2f+0x1d8>
 80168d6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80168da:	3a01      	subs	r2, #1
 80168dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168e0:	a942      	add	r1, sp, #264	; 0x108
 80168e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168e6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80168ea:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80168ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80168f2:	eca0 0a01 	vstmia	r0!, {s0}
 80168f6:	ed9c 0a00 	vldr	s0, [ip]
 80168fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80168fe:	e796      	b.n	801682e <__kernel_rem_pio2f+0xe2>
 8016900:	d107      	bne.n	8016912 <__kernel_rem_pio2f+0x1c6>
 8016902:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016906:	a906      	add	r1, sp, #24
 8016908:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801690c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016910:	e7c1      	b.n	8016896 <__kernel_rem_pio2f+0x14a>
 8016912:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016916:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691e:	da2f      	bge.n	8016980 <__kernel_rem_pio2f+0x234>
 8016920:	f04f 0b00 	mov.w	fp, #0
 8016924:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801692c:	f040 8098 	bne.w	8016a60 <__kernel_rem_pio2f+0x314>
 8016930:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016934:	469c      	mov	ip, r3
 8016936:	2200      	movs	r2, #0
 8016938:	45bc      	cmp	ip, r7
 801693a:	da48      	bge.n	80169ce <__kernel_rem_pio2f+0x282>
 801693c:	2a00      	cmp	r2, #0
 801693e:	d05f      	beq.n	8016a00 <__kernel_rem_pio2f+0x2b4>
 8016940:	aa06      	add	r2, sp, #24
 8016942:	3c08      	subs	r4, #8
 8016944:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016948:	2900      	cmp	r1, #0
 801694a:	d07d      	beq.n	8016a48 <__kernel_rem_pio2f+0x2fc>
 801694c:	4620      	mov	r0, r4
 801694e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016952:	9301      	str	r3, [sp, #4]
 8016954:	f000 fd7e 	bl	8017454 <scalbnf>
 8016958:	9b01      	ldr	r3, [sp, #4]
 801695a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016a58 <__kernel_rem_pio2f+0x30c>
 801695e:	4619      	mov	r1, r3
 8016960:	2900      	cmp	r1, #0
 8016962:	f280 80af 	bge.w	8016ac4 <__kernel_rem_pio2f+0x378>
 8016966:	4618      	mov	r0, r3
 8016968:	2400      	movs	r4, #0
 801696a:	2800      	cmp	r0, #0
 801696c:	f2c0 80d0 	blt.w	8016b10 <__kernel_rem_pio2f+0x3c4>
 8016970:	a942      	add	r1, sp, #264	; 0x108
 8016972:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016976:	4a36      	ldr	r2, [pc, #216]	; (8016a50 <__kernel_rem_pio2f+0x304>)
 8016978:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016a5c <__kernel_rem_pio2f+0x310>
 801697c:	2100      	movs	r1, #0
 801697e:	e0bb      	b.n	8016af8 <__kernel_rem_pio2f+0x3ac>
 8016980:	f04f 0b02 	mov.w	fp, #2
 8016984:	e78a      	b.n	801689c <__kernel_rem_pio2f+0x150>
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	b948      	cbnz	r0, 801699e <__kernel_rem_pio2f+0x252>
 801698a:	b11a      	cbz	r2, 8016994 <__kernel_rem_pio2f+0x248>
 801698c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016990:	601a      	str	r2, [r3, #0]
 8016992:	2201      	movs	r2, #1
 8016994:	f10e 0e01 	add.w	lr, lr, #1
 8016998:	3304      	adds	r3, #4
 801699a:	4610      	mov	r0, r2
 801699c:	e784      	b.n	80168a8 <__kernel_rem_pio2f+0x15c>
 801699e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80169a2:	601a      	str	r2, [r3, #0]
 80169a4:	4602      	mov	r2, r0
 80169a6:	e7f5      	b.n	8016994 <__kernel_rem_pio2f+0x248>
 80169a8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80169ac:	ab06      	add	r3, sp, #24
 80169ae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80169b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169b6:	aa06      	add	r2, sp, #24
 80169b8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80169bc:	e77d      	b.n	80168ba <__kernel_rem_pio2f+0x16e>
 80169be:	f10a 3cff 	add.w	ip, sl, #4294967295
 80169c2:	ab06      	add	r3, sp, #24
 80169c4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80169c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80169cc:	e7f3      	b.n	80169b6 <__kernel_rem_pio2f+0x26a>
 80169ce:	a906      	add	r1, sp, #24
 80169d0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80169d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80169d8:	4302      	orrs	r2, r0
 80169da:	e7ad      	b.n	8016938 <__kernel_rem_pio2f+0x1ec>
 80169dc:	3001      	adds	r0, #1
 80169de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80169e2:	2a00      	cmp	r2, #0
 80169e4:	d0fa      	beq.n	80169dc <__kernel_rem_pio2f+0x290>
 80169e6:	a91a      	add	r1, sp, #104	; 0x68
 80169e8:	eb0a 0208 	add.w	r2, sl, r8
 80169ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80169f0:	f10a 0301 	add.w	r3, sl, #1
 80169f4:	eb0a 0100 	add.w	r1, sl, r0
 80169f8:	4299      	cmp	r1, r3
 80169fa:	da04      	bge.n	8016a06 <__kernel_rem_pio2f+0x2ba>
 80169fc:	468a      	mov	sl, r1
 80169fe:	e70e      	b.n	801681e <__kernel_rem_pio2f+0xd2>
 8016a00:	9b04      	ldr	r3, [sp, #16]
 8016a02:	2001      	movs	r0, #1
 8016a04:	e7eb      	b.n	80169de <__kernel_rem_pio2f+0x292>
 8016a06:	9803      	ldr	r0, [sp, #12]
 8016a08:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016a0c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016a10:	9000      	str	r0, [sp, #0]
 8016a12:	ee07 0a90 	vmov	s15, r0
 8016a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	ece2 7a01 	vstmia	r2!, {s15}
 8016a20:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016a5c <__kernel_rem_pio2f+0x310>
 8016a24:	4696      	mov	lr, r2
 8016a26:	4548      	cmp	r0, r9
 8016a28:	dd06      	ble.n	8016a38 <__kernel_rem_pio2f+0x2ec>
 8016a2a:	a842      	add	r0, sp, #264	; 0x108
 8016a2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016a30:	edc0 7a00 	vstr	s15, [r0]
 8016a34:	3301      	adds	r3, #1
 8016a36:	e7df      	b.n	80169f8 <__kernel_rem_pio2f+0x2ac>
 8016a38:	ecfc 6a01 	vldmia	ip!, {s13}
 8016a3c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016a40:	3001      	adds	r0, #1
 8016a42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016a46:	e7ee      	b.n	8016a26 <__kernel_rem_pio2f+0x2da>
 8016a48:	3b01      	subs	r3, #1
 8016a4a:	e779      	b.n	8016940 <__kernel_rem_pio2f+0x1f4>
 8016a4c:	08017c54 	.word	0x08017c54
 8016a50:	08017c28 	.word	0x08017c28
 8016a54:	43800000 	.word	0x43800000
 8016a58:	3b800000 	.word	0x3b800000
 8016a5c:	00000000 	.word	0x00000000
 8016a60:	9b02      	ldr	r3, [sp, #8]
 8016a62:	eeb0 0a48 	vmov.f32	s0, s16
 8016a66:	1b98      	subs	r0, r3, r6
 8016a68:	f000 fcf4 	bl	8017454 <scalbnf>
 8016a6c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016a54 <__kernel_rem_pio2f+0x308>
 8016a70:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a78:	db1b      	blt.n	8016ab2 <__kernel_rem_pio2f+0x366>
 8016a7a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016a58 <__kernel_rem_pio2f+0x30c>
 8016a7e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016a82:	aa06      	add	r2, sp, #24
 8016a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a88:	a906      	add	r1, sp, #24
 8016a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a8e:	3408      	adds	r4, #8
 8016a90:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a9c:	ee10 3a10 	vmov	r3, s0
 8016aa0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016aa4:	ee17 2a90 	vmov	r2, s15
 8016aa8:	f10a 0301 	add.w	r3, sl, #1
 8016aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016ab0:	e74c      	b.n	801694c <__kernel_rem_pio2f+0x200>
 8016ab2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016ab6:	aa06      	add	r2, sp, #24
 8016ab8:	ee10 3a10 	vmov	r3, s0
 8016abc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016ac0:	4653      	mov	r3, sl
 8016ac2:	e743      	b.n	801694c <__kernel_rem_pio2f+0x200>
 8016ac4:	aa42      	add	r2, sp, #264	; 0x108
 8016ac6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016aca:	aa06      	add	r2, sp, #24
 8016acc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016ad0:	9201      	str	r2, [sp, #4]
 8016ad2:	ee07 2a90 	vmov	s15, r2
 8016ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ada:	3901      	subs	r1, #1
 8016adc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016ae0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016ae4:	edc0 7a00 	vstr	s15, [r0]
 8016ae8:	e73a      	b.n	8016960 <__kernel_rem_pio2f+0x214>
 8016aea:	ecf2 6a01 	vldmia	r2!, {s13}
 8016aee:	ecb6 7a01 	vldmia	r6!, {s14}
 8016af2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016af6:	3101      	adds	r1, #1
 8016af8:	42b9      	cmp	r1, r7
 8016afa:	dc01      	bgt.n	8016b00 <__kernel_rem_pio2f+0x3b4>
 8016afc:	428c      	cmp	r4, r1
 8016afe:	daf4      	bge.n	8016aea <__kernel_rem_pio2f+0x39e>
 8016b00:	aa56      	add	r2, sp, #344	; 0x158
 8016b02:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016b06:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016b0a:	3801      	subs	r0, #1
 8016b0c:	3401      	adds	r4, #1
 8016b0e:	e72c      	b.n	801696a <__kernel_rem_pio2f+0x21e>
 8016b10:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016b12:	2a02      	cmp	r2, #2
 8016b14:	dc0a      	bgt.n	8016b2c <__kernel_rem_pio2f+0x3e0>
 8016b16:	2a00      	cmp	r2, #0
 8016b18:	dc61      	bgt.n	8016bde <__kernel_rem_pio2f+0x492>
 8016b1a:	d03c      	beq.n	8016b96 <__kernel_rem_pio2f+0x44a>
 8016b1c:	9b00      	ldr	r3, [sp, #0]
 8016b1e:	f003 0007 	and.w	r0, r3, #7
 8016b22:	b057      	add	sp, #348	; 0x15c
 8016b24:	ecbd 8b04 	vpop	{d8-d9}
 8016b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016b2e:	2a03      	cmp	r2, #3
 8016b30:	d1f4      	bne.n	8016b1c <__kernel_rem_pio2f+0x3d0>
 8016b32:	aa2e      	add	r2, sp, #184	; 0xb8
 8016b34:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016b38:	4608      	mov	r0, r1
 8016b3a:	461c      	mov	r4, r3
 8016b3c:	2c00      	cmp	r4, #0
 8016b3e:	f1a0 0004 	sub.w	r0, r0, #4
 8016b42:	dc59      	bgt.n	8016bf8 <__kernel_rem_pio2f+0x4ac>
 8016b44:	4618      	mov	r0, r3
 8016b46:	2801      	cmp	r0, #1
 8016b48:	f1a1 0104 	sub.w	r1, r1, #4
 8016b4c:	dc64      	bgt.n	8016c18 <__kernel_rem_pio2f+0x4cc>
 8016b4e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016a5c <__kernel_rem_pio2f+0x310>
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	dc70      	bgt.n	8016c38 <__kernel_rem_pio2f+0x4ec>
 8016b56:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016b5a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016b5e:	f1bb 0f00 	cmp.w	fp, #0
 8016b62:	d172      	bne.n	8016c4a <__kernel_rem_pio2f+0x4fe>
 8016b64:	edc5 6a00 	vstr	s13, [r5]
 8016b68:	ed85 7a01 	vstr	s14, [r5, #4]
 8016b6c:	edc5 7a02 	vstr	s15, [r5, #8]
 8016b70:	e7d4      	b.n	8016b1c <__kernel_rem_pio2f+0x3d0>
 8016b72:	aa2e      	add	r2, sp, #184	; 0xb8
 8016b74:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016b78:	ed91 7a00 	vldr	s14, [r1]
 8016b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b80:	3b01      	subs	r3, #1
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	daf5      	bge.n	8016b72 <__kernel_rem_pio2f+0x426>
 8016b86:	f1bb 0f00 	cmp.w	fp, #0
 8016b8a:	d001      	beq.n	8016b90 <__kernel_rem_pio2f+0x444>
 8016b8c:	eef1 7a67 	vneg.f32	s15, s15
 8016b90:	edc5 7a00 	vstr	s15, [r5]
 8016b94:	e7c2      	b.n	8016b1c <__kernel_rem_pio2f+0x3d0>
 8016b96:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016a5c <__kernel_rem_pio2f+0x310>
 8016b9a:	e7f2      	b.n	8016b82 <__kernel_rem_pio2f+0x436>
 8016b9c:	aa2e      	add	r2, sp, #184	; 0xb8
 8016b9e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016ba2:	edd0 7a00 	vldr	s15, [r0]
 8016ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016baa:	3901      	subs	r1, #1
 8016bac:	2900      	cmp	r1, #0
 8016bae:	daf5      	bge.n	8016b9c <__kernel_rem_pio2f+0x450>
 8016bb0:	f1bb 0f00 	cmp.w	fp, #0
 8016bb4:	d017      	beq.n	8016be6 <__kernel_rem_pio2f+0x49a>
 8016bb6:	eef1 7a47 	vneg.f32	s15, s14
 8016bba:	edc5 7a00 	vstr	s15, [r5]
 8016bbe:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016bc6:	a82f      	add	r0, sp, #188	; 0xbc
 8016bc8:	2101      	movs	r1, #1
 8016bca:	428b      	cmp	r3, r1
 8016bcc:	da0e      	bge.n	8016bec <__kernel_rem_pio2f+0x4a0>
 8016bce:	f1bb 0f00 	cmp.w	fp, #0
 8016bd2:	d001      	beq.n	8016bd8 <__kernel_rem_pio2f+0x48c>
 8016bd4:	eef1 7a67 	vneg.f32	s15, s15
 8016bd8:	edc5 7a01 	vstr	s15, [r5, #4]
 8016bdc:	e79e      	b.n	8016b1c <__kernel_rem_pio2f+0x3d0>
 8016bde:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016a5c <__kernel_rem_pio2f+0x310>
 8016be2:	4619      	mov	r1, r3
 8016be4:	e7e2      	b.n	8016bac <__kernel_rem_pio2f+0x460>
 8016be6:	eef0 7a47 	vmov.f32	s15, s14
 8016bea:	e7e6      	b.n	8016bba <__kernel_rem_pio2f+0x46e>
 8016bec:	ecb0 7a01 	vldmia	r0!, {s14}
 8016bf0:	3101      	adds	r1, #1
 8016bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bf6:	e7e8      	b.n	8016bca <__kernel_rem_pio2f+0x47e>
 8016bf8:	edd0 7a00 	vldr	s15, [r0]
 8016bfc:	edd0 6a01 	vldr	s13, [r0, #4]
 8016c00:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016c04:	3c01      	subs	r4, #1
 8016c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c0a:	ed80 7a00 	vstr	s14, [r0]
 8016c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c12:	edc0 7a01 	vstr	s15, [r0, #4]
 8016c16:	e791      	b.n	8016b3c <__kernel_rem_pio2f+0x3f0>
 8016c18:	edd1 7a00 	vldr	s15, [r1]
 8016c1c:	edd1 6a01 	vldr	s13, [r1, #4]
 8016c20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016c24:	3801      	subs	r0, #1
 8016c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c2a:	ed81 7a00 	vstr	s14, [r1]
 8016c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c32:	edc1 7a01 	vstr	s15, [r1, #4]
 8016c36:	e786      	b.n	8016b46 <__kernel_rem_pio2f+0x3fa>
 8016c38:	aa2e      	add	r2, sp, #184	; 0xb8
 8016c3a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016c3e:	ed91 7a00 	vldr	s14, [r1]
 8016c42:	3b01      	subs	r3, #1
 8016c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c48:	e783      	b.n	8016b52 <__kernel_rem_pio2f+0x406>
 8016c4a:	eef1 6a66 	vneg.f32	s13, s13
 8016c4e:	eeb1 7a47 	vneg.f32	s14, s14
 8016c52:	edc5 6a00 	vstr	s13, [r5]
 8016c56:	ed85 7a01 	vstr	s14, [r5, #4]
 8016c5a:	eef1 7a67 	vneg.f32	s15, s15
 8016c5e:	e785      	b.n	8016b6c <__kernel_rem_pio2f+0x420>

08016c60 <__kernel_sinf>:
 8016c60:	ee10 3a10 	vmov	r3, s0
 8016c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016c6c:	da04      	bge.n	8016c78 <__kernel_sinf+0x18>
 8016c6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016c72:	ee17 3a90 	vmov	r3, s15
 8016c76:	b35b      	cbz	r3, 8016cd0 <__kernel_sinf+0x70>
 8016c78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016c7c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016cd4 <__kernel_sinf+0x74>
 8016c80:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016cd8 <__kernel_sinf+0x78>
 8016c84:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016c88:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016cdc <__kernel_sinf+0x7c>
 8016c8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016c90:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016ce0 <__kernel_sinf+0x80>
 8016c94:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016c98:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016ce4 <__kernel_sinf+0x84>
 8016c9c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016ca0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016ca4:	b930      	cbnz	r0, 8016cb4 <__kernel_sinf+0x54>
 8016ca6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016ce8 <__kernel_sinf+0x88>
 8016caa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016cae:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016cb2:	4770      	bx	lr
 8016cb4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016cb8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016cbc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016cc0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016cc4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016cec <__kernel_sinf+0x8c>
 8016cc8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016ccc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	2f2ec9d3 	.word	0x2f2ec9d3
 8016cd8:	b2d72f34 	.word	0xb2d72f34
 8016cdc:	3638ef1b 	.word	0x3638ef1b
 8016ce0:	b9500d01 	.word	0xb9500d01
 8016ce4:	3c088889 	.word	0x3c088889
 8016ce8:	be2aaaab 	.word	0xbe2aaaab
 8016cec:	3e2aaaab 	.word	0x3e2aaaab

08016cf0 <__kernel_tanf>:
 8016cf0:	b508      	push	{r3, lr}
 8016cf2:	ee10 3a10 	vmov	r3, s0
 8016cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016cfa:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016cfe:	eef0 7a40 	vmov.f32	s15, s0
 8016d02:	da17      	bge.n	8016d34 <__kernel_tanf+0x44>
 8016d04:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016d08:	ee17 1a10 	vmov	r1, s14
 8016d0c:	bb41      	cbnz	r1, 8016d60 <__kernel_tanf+0x70>
 8016d0e:	1c43      	adds	r3, r0, #1
 8016d10:	4313      	orrs	r3, r2
 8016d12:	d108      	bne.n	8016d26 <__kernel_tanf+0x36>
 8016d14:	f000 fb4e 	bl	80173b4 <fabsf>
 8016d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d20:	eeb0 0a67 	vmov.f32	s0, s15
 8016d24:	bd08      	pop	{r3, pc}
 8016d26:	2801      	cmp	r0, #1
 8016d28:	d0fa      	beq.n	8016d20 <__kernel_tanf+0x30>
 8016d2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016d2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d32:	e7f5      	b.n	8016d20 <__kernel_tanf+0x30>
 8016d34:	494d      	ldr	r1, [pc, #308]	; (8016e6c <__kernel_tanf+0x17c>)
 8016d36:	428a      	cmp	r2, r1
 8016d38:	db12      	blt.n	8016d60 <__kernel_tanf+0x70>
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	bfb8      	it	lt
 8016d3e:	eef1 7a40 	vneglt.f32	s15, s0
 8016d42:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016e70 <__kernel_tanf+0x180>
 8016d46:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016d4a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016e74 <__kernel_tanf+0x184>
 8016d4e:	bfb8      	it	lt
 8016d50:	eef1 0a60 	vneglt.f32	s1, s1
 8016d54:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016d58:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016d5c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016e78 <__kernel_tanf+0x188>
 8016d60:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016e7c <__kernel_tanf+0x18c>
 8016d64:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016e80 <__kernel_tanf+0x190>
 8016d68:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016e84 <__kernel_tanf+0x194>
 8016d6c:	493f      	ldr	r1, [pc, #252]	; (8016e6c <__kernel_tanf+0x17c>)
 8016d6e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016d72:	428a      	cmp	r2, r1
 8016d74:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016d78:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016d7c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016e88 <__kernel_tanf+0x198>
 8016d80:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016d84:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8016e8c <__kernel_tanf+0x19c>
 8016d88:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d8c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016e90 <__kernel_tanf+0x1a0>
 8016d90:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016d94:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016e94 <__kernel_tanf+0x1a4>
 8016d98:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016e98 <__kernel_tanf+0x1a8>
 8016da0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016da4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016e9c <__kernel_tanf+0x1ac>
 8016da8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016dac:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016ea0 <__kernel_tanf+0x1b0>
 8016db0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016db4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016ea4 <__kernel_tanf+0x1b4>
 8016db8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016dbc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016ea8 <__kernel_tanf+0x1b8>
 8016dc0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016dc4:	eeb0 7a65 	vmov.f32	s14, s11
 8016dc8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016dcc:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016dd0:	eeb0 7a46 	vmov.f32	s14, s12
 8016dd4:	eeb0 6a60 	vmov.f32	s12, s1
 8016dd8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016ddc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016eac <__kernel_tanf+0x1bc>
 8016de0:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016de4:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016de8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016dec:	db1d      	blt.n	8016e2a <__kernel_tanf+0x13a>
 8016dee:	ee06 0a90 	vmov	s13, r0
 8016df2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016df6:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016dfa:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016dfe:	179b      	asrs	r3, r3, #30
 8016e00:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016e04:	f003 0302 	and.w	r3, r3, #2
 8016e08:	f1c3 0301 	rsb	r3, r3, #1
 8016e0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016e10:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016e14:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016e18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016e1c:	ee07 3a90 	vmov	s15, r3
 8016e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e24:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016e28:	e77a      	b.n	8016d20 <__kernel_tanf+0x30>
 8016e2a:	2801      	cmp	r0, #1
 8016e2c:	d01b      	beq.n	8016e66 <__kernel_tanf+0x176>
 8016e2e:	4b20      	ldr	r3, [pc, #128]	; (8016eb0 <__kernel_tanf+0x1c0>)
 8016e30:	ee17 2a10 	vmov	r2, s14
 8016e34:	401a      	ands	r2, r3
 8016e36:	ee06 2a10 	vmov	s12, r2
 8016e3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016e3e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016e42:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016e4e:	ee16 2a90 	vmov	r2, s13
 8016e52:	4013      	ands	r3, r2
 8016e54:	ee07 3a90 	vmov	s15, r3
 8016e58:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016e5c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016e60:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016e64:	e75c      	b.n	8016d20 <__kernel_tanf+0x30>
 8016e66:	eef0 7a47 	vmov.f32	s15, s14
 8016e6a:	e759      	b.n	8016d20 <__kernel_tanf+0x30>
 8016e6c:	3f2ca140 	.word	0x3f2ca140
 8016e70:	3f490fda 	.word	0x3f490fda
 8016e74:	33222168 	.word	0x33222168
 8016e78:	00000000 	.word	0x00000000
 8016e7c:	b79bae5f 	.word	0xb79bae5f
 8016e80:	38a3f445 	.word	0x38a3f445
 8016e84:	37d95384 	.word	0x37d95384
 8016e88:	3a1a26c8 	.word	0x3a1a26c8
 8016e8c:	3b6b6916 	.word	0x3b6b6916
 8016e90:	3cb327a4 	.word	0x3cb327a4
 8016e94:	3e088889 	.word	0x3e088889
 8016e98:	3895c07a 	.word	0x3895c07a
 8016e9c:	398137b9 	.word	0x398137b9
 8016ea0:	3abede48 	.word	0x3abede48
 8016ea4:	3c11371f 	.word	0x3c11371f
 8016ea8:	3d5d0dd1 	.word	0x3d5d0dd1
 8016eac:	3eaaaaab 	.word	0x3eaaaaab
 8016eb0:	fffff000 	.word	0xfffff000
 8016eb4:	00000000 	.word	0x00000000

08016eb8 <atan>:
 8016eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	ec55 4b10 	vmov	r4, r5, d0
 8016ec0:	4bc3      	ldr	r3, [pc, #780]	; (80171d0 <atan+0x318>)
 8016ec2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016ec6:	429e      	cmp	r6, r3
 8016ec8:	46ab      	mov	fp, r5
 8016eca:	dd18      	ble.n	8016efe <atan+0x46>
 8016ecc:	4bc1      	ldr	r3, [pc, #772]	; (80171d4 <atan+0x31c>)
 8016ece:	429e      	cmp	r6, r3
 8016ed0:	dc01      	bgt.n	8016ed6 <atan+0x1e>
 8016ed2:	d109      	bne.n	8016ee8 <atan+0x30>
 8016ed4:	b144      	cbz	r4, 8016ee8 <atan+0x30>
 8016ed6:	4622      	mov	r2, r4
 8016ed8:	462b      	mov	r3, r5
 8016eda:	4620      	mov	r0, r4
 8016edc:	4629      	mov	r1, r5
 8016ede:	f7e9 f979 	bl	80001d4 <__adddf3>
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	460d      	mov	r5, r1
 8016ee6:	e006      	b.n	8016ef6 <atan+0x3e>
 8016ee8:	f1bb 0f00 	cmp.w	fp, #0
 8016eec:	f300 8131 	bgt.w	8017152 <atan+0x29a>
 8016ef0:	a59b      	add	r5, pc, #620	; (adr r5, 8017160 <atan+0x2a8>)
 8016ef2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016ef6:	ec45 4b10 	vmov	d0, r4, r5
 8016efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efe:	4bb6      	ldr	r3, [pc, #728]	; (80171d8 <atan+0x320>)
 8016f00:	429e      	cmp	r6, r3
 8016f02:	dc14      	bgt.n	8016f2e <atan+0x76>
 8016f04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016f08:	429e      	cmp	r6, r3
 8016f0a:	dc0d      	bgt.n	8016f28 <atan+0x70>
 8016f0c:	a396      	add	r3, pc, #600	; (adr r3, 8017168 <atan+0x2b0>)
 8016f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f12:	ee10 0a10 	vmov	r0, s0
 8016f16:	4629      	mov	r1, r5
 8016f18:	f7e9 f95c 	bl	80001d4 <__adddf3>
 8016f1c:	4baf      	ldr	r3, [pc, #700]	; (80171dc <atan+0x324>)
 8016f1e:	2200      	movs	r2, #0
 8016f20:	f7e9 fd9e 	bl	8000a60 <__aeabi_dcmpgt>
 8016f24:	2800      	cmp	r0, #0
 8016f26:	d1e6      	bne.n	8016ef6 <atan+0x3e>
 8016f28:	f04f 3aff 	mov.w	sl, #4294967295
 8016f2c:	e02b      	b.n	8016f86 <atan+0xce>
 8016f2e:	f000 f963 	bl	80171f8 <fabs>
 8016f32:	4bab      	ldr	r3, [pc, #684]	; (80171e0 <atan+0x328>)
 8016f34:	429e      	cmp	r6, r3
 8016f36:	ec55 4b10 	vmov	r4, r5, d0
 8016f3a:	f300 80bf 	bgt.w	80170bc <atan+0x204>
 8016f3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016f42:	429e      	cmp	r6, r3
 8016f44:	f300 80a0 	bgt.w	8017088 <atan+0x1d0>
 8016f48:	ee10 2a10 	vmov	r2, s0
 8016f4c:	ee10 0a10 	vmov	r0, s0
 8016f50:	462b      	mov	r3, r5
 8016f52:	4629      	mov	r1, r5
 8016f54:	f7e9 f93e 	bl	80001d4 <__adddf3>
 8016f58:	4ba0      	ldr	r3, [pc, #640]	; (80171dc <atan+0x324>)
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	f7e9 f938 	bl	80001d0 <__aeabi_dsub>
 8016f60:	2200      	movs	r2, #0
 8016f62:	4606      	mov	r6, r0
 8016f64:	460f      	mov	r7, r1
 8016f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	4629      	mov	r1, r5
 8016f6e:	f7e9 f931 	bl	80001d4 <__adddf3>
 8016f72:	4602      	mov	r2, r0
 8016f74:	460b      	mov	r3, r1
 8016f76:	4630      	mov	r0, r6
 8016f78:	4639      	mov	r1, r7
 8016f7a:	f7e9 fc0b 	bl	8000794 <__aeabi_ddiv>
 8016f7e:	f04f 0a00 	mov.w	sl, #0
 8016f82:	4604      	mov	r4, r0
 8016f84:	460d      	mov	r5, r1
 8016f86:	4622      	mov	r2, r4
 8016f88:	462b      	mov	r3, r5
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	4629      	mov	r1, r5
 8016f8e:	f7e9 fad7 	bl	8000540 <__aeabi_dmul>
 8016f92:	4602      	mov	r2, r0
 8016f94:	460b      	mov	r3, r1
 8016f96:	4680      	mov	r8, r0
 8016f98:	4689      	mov	r9, r1
 8016f9a:	f7e9 fad1 	bl	8000540 <__aeabi_dmul>
 8016f9e:	a374      	add	r3, pc, #464	; (adr r3, 8017170 <atan+0x2b8>)
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	4606      	mov	r6, r0
 8016fa6:	460f      	mov	r7, r1
 8016fa8:	f7e9 faca 	bl	8000540 <__aeabi_dmul>
 8016fac:	a372      	add	r3, pc, #456	; (adr r3, 8017178 <atan+0x2c0>)
 8016fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb2:	f7e9 f90f 	bl	80001d4 <__adddf3>
 8016fb6:	4632      	mov	r2, r6
 8016fb8:	463b      	mov	r3, r7
 8016fba:	f7e9 fac1 	bl	8000540 <__aeabi_dmul>
 8016fbe:	a370      	add	r3, pc, #448	; (adr r3, 8017180 <atan+0x2c8>)
 8016fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc4:	f7e9 f906 	bl	80001d4 <__adddf3>
 8016fc8:	4632      	mov	r2, r6
 8016fca:	463b      	mov	r3, r7
 8016fcc:	f7e9 fab8 	bl	8000540 <__aeabi_dmul>
 8016fd0:	a36d      	add	r3, pc, #436	; (adr r3, 8017188 <atan+0x2d0>)
 8016fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd6:	f7e9 f8fd 	bl	80001d4 <__adddf3>
 8016fda:	4632      	mov	r2, r6
 8016fdc:	463b      	mov	r3, r7
 8016fde:	f7e9 faaf 	bl	8000540 <__aeabi_dmul>
 8016fe2:	a36b      	add	r3, pc, #428	; (adr r3, 8017190 <atan+0x2d8>)
 8016fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe8:	f7e9 f8f4 	bl	80001d4 <__adddf3>
 8016fec:	4632      	mov	r2, r6
 8016fee:	463b      	mov	r3, r7
 8016ff0:	f7e9 faa6 	bl	8000540 <__aeabi_dmul>
 8016ff4:	a368      	add	r3, pc, #416	; (adr r3, 8017198 <atan+0x2e0>)
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	f7e9 f8eb 	bl	80001d4 <__adddf3>
 8016ffe:	4642      	mov	r2, r8
 8017000:	464b      	mov	r3, r9
 8017002:	f7e9 fa9d 	bl	8000540 <__aeabi_dmul>
 8017006:	a366      	add	r3, pc, #408	; (adr r3, 80171a0 <atan+0x2e8>)
 8017008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700c:	4680      	mov	r8, r0
 801700e:	4689      	mov	r9, r1
 8017010:	4630      	mov	r0, r6
 8017012:	4639      	mov	r1, r7
 8017014:	f7e9 fa94 	bl	8000540 <__aeabi_dmul>
 8017018:	a363      	add	r3, pc, #396	; (adr r3, 80171a8 <atan+0x2f0>)
 801701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701e:	f7e9 f8d7 	bl	80001d0 <__aeabi_dsub>
 8017022:	4632      	mov	r2, r6
 8017024:	463b      	mov	r3, r7
 8017026:	f7e9 fa8b 	bl	8000540 <__aeabi_dmul>
 801702a:	a361      	add	r3, pc, #388	; (adr r3, 80171b0 <atan+0x2f8>)
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	f7e9 f8ce 	bl	80001d0 <__aeabi_dsub>
 8017034:	4632      	mov	r2, r6
 8017036:	463b      	mov	r3, r7
 8017038:	f7e9 fa82 	bl	8000540 <__aeabi_dmul>
 801703c:	a35e      	add	r3, pc, #376	; (adr r3, 80171b8 <atan+0x300>)
 801703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017042:	f7e9 f8c5 	bl	80001d0 <__aeabi_dsub>
 8017046:	4632      	mov	r2, r6
 8017048:	463b      	mov	r3, r7
 801704a:	f7e9 fa79 	bl	8000540 <__aeabi_dmul>
 801704e:	a35c      	add	r3, pc, #368	; (adr r3, 80171c0 <atan+0x308>)
 8017050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017054:	f7e9 f8bc 	bl	80001d0 <__aeabi_dsub>
 8017058:	4632      	mov	r2, r6
 801705a:	463b      	mov	r3, r7
 801705c:	f7e9 fa70 	bl	8000540 <__aeabi_dmul>
 8017060:	4602      	mov	r2, r0
 8017062:	460b      	mov	r3, r1
 8017064:	4640      	mov	r0, r8
 8017066:	4649      	mov	r1, r9
 8017068:	f7e9 f8b4 	bl	80001d4 <__adddf3>
 801706c:	4622      	mov	r2, r4
 801706e:	462b      	mov	r3, r5
 8017070:	f7e9 fa66 	bl	8000540 <__aeabi_dmul>
 8017074:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017078:	4602      	mov	r2, r0
 801707a:	460b      	mov	r3, r1
 801707c:	d14b      	bne.n	8017116 <atan+0x25e>
 801707e:	4620      	mov	r0, r4
 8017080:	4629      	mov	r1, r5
 8017082:	f7e9 f8a5 	bl	80001d0 <__aeabi_dsub>
 8017086:	e72c      	b.n	8016ee2 <atan+0x2a>
 8017088:	ee10 0a10 	vmov	r0, s0
 801708c:	4b53      	ldr	r3, [pc, #332]	; (80171dc <atan+0x324>)
 801708e:	2200      	movs	r2, #0
 8017090:	4629      	mov	r1, r5
 8017092:	f7e9 f89d 	bl	80001d0 <__aeabi_dsub>
 8017096:	4b51      	ldr	r3, [pc, #324]	; (80171dc <atan+0x324>)
 8017098:	4606      	mov	r6, r0
 801709a:	460f      	mov	r7, r1
 801709c:	2200      	movs	r2, #0
 801709e:	4620      	mov	r0, r4
 80170a0:	4629      	mov	r1, r5
 80170a2:	f7e9 f897 	bl	80001d4 <__adddf3>
 80170a6:	4602      	mov	r2, r0
 80170a8:	460b      	mov	r3, r1
 80170aa:	4630      	mov	r0, r6
 80170ac:	4639      	mov	r1, r7
 80170ae:	f7e9 fb71 	bl	8000794 <__aeabi_ddiv>
 80170b2:	f04f 0a01 	mov.w	sl, #1
 80170b6:	4604      	mov	r4, r0
 80170b8:	460d      	mov	r5, r1
 80170ba:	e764      	b.n	8016f86 <atan+0xce>
 80170bc:	4b49      	ldr	r3, [pc, #292]	; (80171e4 <atan+0x32c>)
 80170be:	429e      	cmp	r6, r3
 80170c0:	da1d      	bge.n	80170fe <atan+0x246>
 80170c2:	ee10 0a10 	vmov	r0, s0
 80170c6:	4b48      	ldr	r3, [pc, #288]	; (80171e8 <atan+0x330>)
 80170c8:	2200      	movs	r2, #0
 80170ca:	4629      	mov	r1, r5
 80170cc:	f7e9 f880 	bl	80001d0 <__aeabi_dsub>
 80170d0:	4b45      	ldr	r3, [pc, #276]	; (80171e8 <atan+0x330>)
 80170d2:	4606      	mov	r6, r0
 80170d4:	460f      	mov	r7, r1
 80170d6:	2200      	movs	r2, #0
 80170d8:	4620      	mov	r0, r4
 80170da:	4629      	mov	r1, r5
 80170dc:	f7e9 fa30 	bl	8000540 <__aeabi_dmul>
 80170e0:	4b3e      	ldr	r3, [pc, #248]	; (80171dc <atan+0x324>)
 80170e2:	2200      	movs	r2, #0
 80170e4:	f7e9 f876 	bl	80001d4 <__adddf3>
 80170e8:	4602      	mov	r2, r0
 80170ea:	460b      	mov	r3, r1
 80170ec:	4630      	mov	r0, r6
 80170ee:	4639      	mov	r1, r7
 80170f0:	f7e9 fb50 	bl	8000794 <__aeabi_ddiv>
 80170f4:	f04f 0a02 	mov.w	sl, #2
 80170f8:	4604      	mov	r4, r0
 80170fa:	460d      	mov	r5, r1
 80170fc:	e743      	b.n	8016f86 <atan+0xce>
 80170fe:	462b      	mov	r3, r5
 8017100:	ee10 2a10 	vmov	r2, s0
 8017104:	4939      	ldr	r1, [pc, #228]	; (80171ec <atan+0x334>)
 8017106:	2000      	movs	r0, #0
 8017108:	f7e9 fb44 	bl	8000794 <__aeabi_ddiv>
 801710c:	f04f 0a03 	mov.w	sl, #3
 8017110:	4604      	mov	r4, r0
 8017112:	460d      	mov	r5, r1
 8017114:	e737      	b.n	8016f86 <atan+0xce>
 8017116:	4b36      	ldr	r3, [pc, #216]	; (80171f0 <atan+0x338>)
 8017118:	4e36      	ldr	r6, [pc, #216]	; (80171f4 <atan+0x33c>)
 801711a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801711e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8017122:	e9da 2300 	ldrd	r2, r3, [sl]
 8017126:	f7e9 f853 	bl	80001d0 <__aeabi_dsub>
 801712a:	4622      	mov	r2, r4
 801712c:	462b      	mov	r3, r5
 801712e:	f7e9 f84f 	bl	80001d0 <__aeabi_dsub>
 8017132:	4602      	mov	r2, r0
 8017134:	460b      	mov	r3, r1
 8017136:	e9d6 0100 	ldrd	r0, r1, [r6]
 801713a:	f7e9 f849 	bl	80001d0 <__aeabi_dsub>
 801713e:	f1bb 0f00 	cmp.w	fp, #0
 8017142:	4604      	mov	r4, r0
 8017144:	460d      	mov	r5, r1
 8017146:	f6bf aed6 	bge.w	8016ef6 <atan+0x3e>
 801714a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801714e:	461d      	mov	r5, r3
 8017150:	e6d1      	b.n	8016ef6 <atan+0x3e>
 8017152:	a51d      	add	r5, pc, #116	; (adr r5, 80171c8 <atan+0x310>)
 8017154:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017158:	e6cd      	b.n	8016ef6 <atan+0x3e>
 801715a:	bf00      	nop
 801715c:	f3af 8000 	nop.w
 8017160:	54442d18 	.word	0x54442d18
 8017164:	bff921fb 	.word	0xbff921fb
 8017168:	8800759c 	.word	0x8800759c
 801716c:	7e37e43c 	.word	0x7e37e43c
 8017170:	e322da11 	.word	0xe322da11
 8017174:	3f90ad3a 	.word	0x3f90ad3a
 8017178:	24760deb 	.word	0x24760deb
 801717c:	3fa97b4b 	.word	0x3fa97b4b
 8017180:	a0d03d51 	.word	0xa0d03d51
 8017184:	3fb10d66 	.word	0x3fb10d66
 8017188:	c54c206e 	.word	0xc54c206e
 801718c:	3fb745cd 	.word	0x3fb745cd
 8017190:	920083ff 	.word	0x920083ff
 8017194:	3fc24924 	.word	0x3fc24924
 8017198:	5555550d 	.word	0x5555550d
 801719c:	3fd55555 	.word	0x3fd55555
 80171a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80171a4:	bfa2b444 	.word	0xbfa2b444
 80171a8:	52defd9a 	.word	0x52defd9a
 80171ac:	3fadde2d 	.word	0x3fadde2d
 80171b0:	af749a6d 	.word	0xaf749a6d
 80171b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80171b8:	fe231671 	.word	0xfe231671
 80171bc:	3fbc71c6 	.word	0x3fbc71c6
 80171c0:	9998ebc4 	.word	0x9998ebc4
 80171c4:	3fc99999 	.word	0x3fc99999
 80171c8:	54442d18 	.word	0x54442d18
 80171cc:	3ff921fb 	.word	0x3ff921fb
 80171d0:	440fffff 	.word	0x440fffff
 80171d4:	7ff00000 	.word	0x7ff00000
 80171d8:	3fdbffff 	.word	0x3fdbffff
 80171dc:	3ff00000 	.word	0x3ff00000
 80171e0:	3ff2ffff 	.word	0x3ff2ffff
 80171e4:	40038000 	.word	0x40038000
 80171e8:	3ff80000 	.word	0x3ff80000
 80171ec:	bff00000 	.word	0xbff00000
 80171f0:	08017c80 	.word	0x08017c80
 80171f4:	08017c60 	.word	0x08017c60

080171f8 <fabs>:
 80171f8:	ec51 0b10 	vmov	r0, r1, d0
 80171fc:	ee10 2a10 	vmov	r2, s0
 8017200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017204:	ec43 2b10 	vmov	d0, r2, r3
 8017208:	4770      	bx	lr
	...

0801720c <atanf>:
 801720c:	b538      	push	{r3, r4, r5, lr}
 801720e:	ee10 5a10 	vmov	r5, s0
 8017212:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017216:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801721a:	eef0 7a40 	vmov.f32	s15, s0
 801721e:	db10      	blt.n	8017242 <atanf+0x36>
 8017220:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017224:	dd04      	ble.n	8017230 <atanf+0x24>
 8017226:	ee70 7a00 	vadd.f32	s15, s0, s0
 801722a:	eeb0 0a67 	vmov.f32	s0, s15
 801722e:	bd38      	pop	{r3, r4, r5, pc}
 8017230:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017368 <atanf+0x15c>
 8017234:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801736c <atanf+0x160>
 8017238:	2d00      	cmp	r5, #0
 801723a:	bfd8      	it	le
 801723c:	eef0 7a40 	vmovle.f32	s15, s0
 8017240:	e7f3      	b.n	801722a <atanf+0x1e>
 8017242:	4b4b      	ldr	r3, [pc, #300]	; (8017370 <atanf+0x164>)
 8017244:	429c      	cmp	r4, r3
 8017246:	dc10      	bgt.n	801726a <atanf+0x5e>
 8017248:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801724c:	da0a      	bge.n	8017264 <atanf+0x58>
 801724e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017374 <atanf+0x168>
 8017252:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801725a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017262:	dce2      	bgt.n	801722a <atanf+0x1e>
 8017264:	f04f 33ff 	mov.w	r3, #4294967295
 8017268:	e013      	b.n	8017292 <atanf+0x86>
 801726a:	f000 f8a3 	bl	80173b4 <fabsf>
 801726e:	4b42      	ldr	r3, [pc, #264]	; (8017378 <atanf+0x16c>)
 8017270:	429c      	cmp	r4, r3
 8017272:	dc4f      	bgt.n	8017314 <atanf+0x108>
 8017274:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017278:	429c      	cmp	r4, r3
 801727a:	dc41      	bgt.n	8017300 <atanf+0xf4>
 801727c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017280:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017284:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017288:	2300      	movs	r3, #0
 801728a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801728e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017298:	eddf 5a38 	vldr	s11, [pc, #224]	; 801737c <atanf+0x170>
 801729c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017380 <atanf+0x174>
 80172a0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017384 <atanf+0x178>
 80172a4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017388 <atanf+0x17c>
 80172a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80172ac:	eea7 6a25 	vfma.f32	s12, s14, s11
 80172b0:	eddf 5a36 	vldr	s11, [pc, #216]	; 801738c <atanf+0x180>
 80172b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80172b8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017390 <atanf+0x184>
 80172bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80172c0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8017394 <atanf+0x188>
 80172c4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80172c8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017398 <atanf+0x18c>
 80172cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80172d0:	eddf 5a32 	vldr	s11, [pc, #200]	; 801739c <atanf+0x190>
 80172d4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80172d8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80173a0 <atanf+0x194>
 80172dc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80172e0:	eddf 5a30 	vldr	s11, [pc, #192]	; 80173a4 <atanf+0x198>
 80172e4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80172e8:	eea5 0a87 	vfma.f32	s0, s11, s14
 80172ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 80172f0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80172f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80172f8:	d121      	bne.n	801733e <atanf+0x132>
 80172fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80172fe:	e794      	b.n	801722a <atanf+0x1e>
 8017300:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017304:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017308:	ee30 0a27 	vadd.f32	s0, s0, s15
 801730c:	2301      	movs	r3, #1
 801730e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017312:	e7be      	b.n	8017292 <atanf+0x86>
 8017314:	4b24      	ldr	r3, [pc, #144]	; (80173a8 <atanf+0x19c>)
 8017316:	429c      	cmp	r4, r3
 8017318:	dc0b      	bgt.n	8017332 <atanf+0x126>
 801731a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801731e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017322:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017326:	2302      	movs	r3, #2
 8017328:	ee70 6a67 	vsub.f32	s13, s0, s15
 801732c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017330:	e7af      	b.n	8017292 <atanf+0x86>
 8017332:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017336:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801733a:	2303      	movs	r3, #3
 801733c:	e7a9      	b.n	8017292 <atanf+0x86>
 801733e:	4a1b      	ldr	r2, [pc, #108]	; (80173ac <atanf+0x1a0>)
 8017340:	491b      	ldr	r1, [pc, #108]	; (80173b0 <atanf+0x1a4>)
 8017342:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017346:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801734a:	ed93 7a00 	vldr	s14, [r3]
 801734e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017352:	2d00      	cmp	r5, #0
 8017354:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017358:	ed92 0a00 	vldr	s0, [r2]
 801735c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017360:	bfb8      	it	lt
 8017362:	eef1 7a67 	vneglt.f32	s15, s15
 8017366:	e760      	b.n	801722a <atanf+0x1e>
 8017368:	3fc90fdb 	.word	0x3fc90fdb
 801736c:	bfc90fdb 	.word	0xbfc90fdb
 8017370:	3edfffff 	.word	0x3edfffff
 8017374:	7149f2ca 	.word	0x7149f2ca
 8017378:	3f97ffff 	.word	0x3f97ffff
 801737c:	3c8569d7 	.word	0x3c8569d7
 8017380:	3d4bda59 	.word	0x3d4bda59
 8017384:	bd15a221 	.word	0xbd15a221
 8017388:	be4ccccd 	.word	0xbe4ccccd
 801738c:	3d886b35 	.word	0x3d886b35
 8017390:	3dba2e6e 	.word	0x3dba2e6e
 8017394:	3e124925 	.word	0x3e124925
 8017398:	3eaaaaab 	.word	0x3eaaaaab
 801739c:	bd6ef16b 	.word	0xbd6ef16b
 80173a0:	bd9d8795 	.word	0xbd9d8795
 80173a4:	bde38e38 	.word	0xbde38e38
 80173a8:	401bffff 	.word	0x401bffff
 80173ac:	08017ca0 	.word	0x08017ca0
 80173b0:	08017cb0 	.word	0x08017cb0

080173b4 <fabsf>:
 80173b4:	ee10 3a10 	vmov	r3, s0
 80173b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173bc:	ee00 3a10 	vmov	s0, r3
 80173c0:	4770      	bx	lr
	...

080173c4 <floorf>:
 80173c4:	ee10 3a10 	vmov	r3, s0
 80173c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80173cc:	3a7f      	subs	r2, #127	; 0x7f
 80173ce:	2a16      	cmp	r2, #22
 80173d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80173d4:	dc2a      	bgt.n	801742c <floorf+0x68>
 80173d6:	2a00      	cmp	r2, #0
 80173d8:	da11      	bge.n	80173fe <floorf+0x3a>
 80173da:	eddf 7a18 	vldr	s15, [pc, #96]	; 801743c <floorf+0x78>
 80173de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80173e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80173e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ea:	dd05      	ble.n	80173f8 <floorf+0x34>
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	da23      	bge.n	8017438 <floorf+0x74>
 80173f0:	4a13      	ldr	r2, [pc, #76]	; (8017440 <floorf+0x7c>)
 80173f2:	2900      	cmp	r1, #0
 80173f4:	bf18      	it	ne
 80173f6:	4613      	movne	r3, r2
 80173f8:	ee00 3a10 	vmov	s0, r3
 80173fc:	4770      	bx	lr
 80173fe:	4911      	ldr	r1, [pc, #68]	; (8017444 <floorf+0x80>)
 8017400:	4111      	asrs	r1, r2
 8017402:	420b      	tst	r3, r1
 8017404:	d0fa      	beq.n	80173fc <floorf+0x38>
 8017406:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801743c <floorf+0x78>
 801740a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801740e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017416:	ddef      	ble.n	80173f8 <floorf+0x34>
 8017418:	2b00      	cmp	r3, #0
 801741a:	bfbe      	ittt	lt
 801741c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017420:	fa40 f202 	asrlt.w	r2, r0, r2
 8017424:	189b      	addlt	r3, r3, r2
 8017426:	ea23 0301 	bic.w	r3, r3, r1
 801742a:	e7e5      	b.n	80173f8 <floorf+0x34>
 801742c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017430:	d3e4      	bcc.n	80173fc <floorf+0x38>
 8017432:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017436:	4770      	bx	lr
 8017438:	2300      	movs	r3, #0
 801743a:	e7dd      	b.n	80173f8 <floorf+0x34>
 801743c:	7149f2ca 	.word	0x7149f2ca
 8017440:	bf800000 	.word	0xbf800000
 8017444:	007fffff 	.word	0x007fffff

08017448 <nanf>:
 8017448:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017450 <nanf+0x8>
 801744c:	4770      	bx	lr
 801744e:	bf00      	nop
 8017450:	7fc00000 	.word	0x7fc00000

08017454 <scalbnf>:
 8017454:	ee10 3a10 	vmov	r3, s0
 8017458:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801745c:	d025      	beq.n	80174aa <scalbnf+0x56>
 801745e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017462:	d302      	bcc.n	801746a <scalbnf+0x16>
 8017464:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017468:	4770      	bx	lr
 801746a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801746e:	d122      	bne.n	80174b6 <scalbnf+0x62>
 8017470:	4b2a      	ldr	r3, [pc, #168]	; (801751c <scalbnf+0xc8>)
 8017472:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017520 <scalbnf+0xcc>
 8017476:	4298      	cmp	r0, r3
 8017478:	ee20 0a27 	vmul.f32	s0, s0, s15
 801747c:	db16      	blt.n	80174ac <scalbnf+0x58>
 801747e:	ee10 3a10 	vmov	r3, s0
 8017482:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017486:	3a19      	subs	r2, #25
 8017488:	4402      	add	r2, r0
 801748a:	2afe      	cmp	r2, #254	; 0xfe
 801748c:	dd15      	ble.n	80174ba <scalbnf+0x66>
 801748e:	ee10 3a10 	vmov	r3, s0
 8017492:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017524 <scalbnf+0xd0>
 8017496:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017528 <scalbnf+0xd4>
 801749a:	2b00      	cmp	r3, #0
 801749c:	eeb0 7a67 	vmov.f32	s14, s15
 80174a0:	bfb8      	it	lt
 80174a2:	eef0 7a66 	vmovlt.f32	s15, s13
 80174a6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80174aa:	4770      	bx	lr
 80174ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801752c <scalbnf+0xd8>
 80174b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80174b4:	4770      	bx	lr
 80174b6:	0dd2      	lsrs	r2, r2, #23
 80174b8:	e7e6      	b.n	8017488 <scalbnf+0x34>
 80174ba:	2a00      	cmp	r2, #0
 80174bc:	dd06      	ble.n	80174cc <scalbnf+0x78>
 80174be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80174c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80174c6:	ee00 3a10 	vmov	s0, r3
 80174ca:	4770      	bx	lr
 80174cc:	f112 0f16 	cmn.w	r2, #22
 80174d0:	da1a      	bge.n	8017508 <scalbnf+0xb4>
 80174d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80174d6:	4298      	cmp	r0, r3
 80174d8:	ee10 3a10 	vmov	r3, s0
 80174dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80174e0:	dd0a      	ble.n	80174f8 <scalbnf+0xa4>
 80174e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017524 <scalbnf+0xd0>
 80174e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017528 <scalbnf+0xd4>
 80174ea:	eef0 7a40 	vmov.f32	s15, s0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	bf18      	it	ne
 80174f2:	eeb0 0a47 	vmovne.f32	s0, s14
 80174f6:	e7db      	b.n	80174b0 <scalbnf+0x5c>
 80174f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801752c <scalbnf+0xd8>
 80174fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017530 <scalbnf+0xdc>
 8017500:	eef0 7a40 	vmov.f32	s15, s0
 8017504:	2b00      	cmp	r3, #0
 8017506:	e7f3      	b.n	80174f0 <scalbnf+0x9c>
 8017508:	3219      	adds	r2, #25
 801750a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801750e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017512:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017534 <scalbnf+0xe0>
 8017516:	ee07 3a10 	vmov	s14, r3
 801751a:	e7c4      	b.n	80174a6 <scalbnf+0x52>
 801751c:	ffff3cb0 	.word	0xffff3cb0
 8017520:	4c000000 	.word	0x4c000000
 8017524:	7149f2ca 	.word	0x7149f2ca
 8017528:	f149f2ca 	.word	0xf149f2ca
 801752c:	0da24260 	.word	0x0da24260
 8017530:	8da24260 	.word	0x8da24260
 8017534:	33000000 	.word	0x33000000

08017538 <abort>:
 8017538:	b508      	push	{r3, lr}
 801753a:	2006      	movs	r0, #6
 801753c:	f000 f8de 	bl	80176fc <raise>
 8017540:	2001      	movs	r0, #1
 8017542:	f7eb f9ad 	bl	80028a0 <_exit>
	...

08017548 <__errno>:
 8017548:	4b01      	ldr	r3, [pc, #4]	; (8017550 <__errno+0x8>)
 801754a:	6818      	ldr	r0, [r3, #0]
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	20000104 	.word	0x20000104

08017554 <__libc_init_array>:
 8017554:	b570      	push	{r4, r5, r6, lr}
 8017556:	4d0d      	ldr	r5, [pc, #52]	; (801758c <__libc_init_array+0x38>)
 8017558:	4c0d      	ldr	r4, [pc, #52]	; (8017590 <__libc_init_array+0x3c>)
 801755a:	1b64      	subs	r4, r4, r5
 801755c:	10a4      	asrs	r4, r4, #2
 801755e:	2600      	movs	r6, #0
 8017560:	42a6      	cmp	r6, r4
 8017562:	d109      	bne.n	8017578 <__libc_init_array+0x24>
 8017564:	4d0b      	ldr	r5, [pc, #44]	; (8017594 <__libc_init_array+0x40>)
 8017566:	4c0c      	ldr	r4, [pc, #48]	; (8017598 <__libc_init_array+0x44>)
 8017568:	f000 f8f2 	bl	8017750 <_init>
 801756c:	1b64      	subs	r4, r4, r5
 801756e:	10a4      	asrs	r4, r4, #2
 8017570:	2600      	movs	r6, #0
 8017572:	42a6      	cmp	r6, r4
 8017574:	d105      	bne.n	8017582 <__libc_init_array+0x2e>
 8017576:	bd70      	pop	{r4, r5, r6, pc}
 8017578:	f855 3b04 	ldr.w	r3, [r5], #4
 801757c:	4798      	blx	r3
 801757e:	3601      	adds	r6, #1
 8017580:	e7ee      	b.n	8017560 <__libc_init_array+0xc>
 8017582:	f855 3b04 	ldr.w	r3, [r5], #4
 8017586:	4798      	blx	r3
 8017588:	3601      	adds	r6, #1
 801758a:	e7f2      	b.n	8017572 <__libc_init_array+0x1e>
 801758c:	08017cc8 	.word	0x08017cc8
 8017590:	08017cc8 	.word	0x08017cc8
 8017594:	08017cc8 	.word	0x08017cc8
 8017598:	08017ccc 	.word	0x08017ccc

0801759c <malloc>:
 801759c:	4b02      	ldr	r3, [pc, #8]	; (80175a8 <malloc+0xc>)
 801759e:	4601      	mov	r1, r0
 80175a0:	6818      	ldr	r0, [r3, #0]
 80175a2:	f000 b819 	b.w	80175d8 <_malloc_r>
 80175a6:	bf00      	nop
 80175a8:	20000104 	.word	0x20000104

080175ac <memcpy>:
 80175ac:	440a      	add	r2, r1
 80175ae:	4291      	cmp	r1, r2
 80175b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80175b4:	d100      	bne.n	80175b8 <memcpy+0xc>
 80175b6:	4770      	bx	lr
 80175b8:	b510      	push	{r4, lr}
 80175ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80175c2:	4291      	cmp	r1, r2
 80175c4:	d1f9      	bne.n	80175ba <memcpy+0xe>
 80175c6:	bd10      	pop	{r4, pc}

080175c8 <memset>:
 80175c8:	4402      	add	r2, r0
 80175ca:	4603      	mov	r3, r0
 80175cc:	4293      	cmp	r3, r2
 80175ce:	d100      	bne.n	80175d2 <memset+0xa>
 80175d0:	4770      	bx	lr
 80175d2:	f803 1b01 	strb.w	r1, [r3], #1
 80175d6:	e7f9      	b.n	80175cc <memset+0x4>

080175d8 <_malloc_r>:
 80175d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175da:	1ccd      	adds	r5, r1, #3
 80175dc:	f025 0503 	bic.w	r5, r5, #3
 80175e0:	3508      	adds	r5, #8
 80175e2:	2d0c      	cmp	r5, #12
 80175e4:	bf38      	it	cc
 80175e6:	250c      	movcc	r5, #12
 80175e8:	2d00      	cmp	r5, #0
 80175ea:	4606      	mov	r6, r0
 80175ec:	db01      	blt.n	80175f2 <_malloc_r+0x1a>
 80175ee:	42a9      	cmp	r1, r5
 80175f0:	d903      	bls.n	80175fa <_malloc_r+0x22>
 80175f2:	230c      	movs	r3, #12
 80175f4:	6033      	str	r3, [r6, #0]
 80175f6:	2000      	movs	r0, #0
 80175f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175fa:	f000 f89b 	bl	8017734 <__malloc_lock>
 80175fe:	4921      	ldr	r1, [pc, #132]	; (8017684 <_malloc_r+0xac>)
 8017600:	680a      	ldr	r2, [r1, #0]
 8017602:	4614      	mov	r4, r2
 8017604:	b99c      	cbnz	r4, 801762e <_malloc_r+0x56>
 8017606:	4f20      	ldr	r7, [pc, #128]	; (8017688 <_malloc_r+0xb0>)
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	b923      	cbnz	r3, 8017616 <_malloc_r+0x3e>
 801760c:	4621      	mov	r1, r4
 801760e:	4630      	mov	r0, r6
 8017610:	f000 f83c 	bl	801768c <_sbrk_r>
 8017614:	6038      	str	r0, [r7, #0]
 8017616:	4629      	mov	r1, r5
 8017618:	4630      	mov	r0, r6
 801761a:	f000 f837 	bl	801768c <_sbrk_r>
 801761e:	1c43      	adds	r3, r0, #1
 8017620:	d123      	bne.n	801766a <_malloc_r+0x92>
 8017622:	230c      	movs	r3, #12
 8017624:	6033      	str	r3, [r6, #0]
 8017626:	4630      	mov	r0, r6
 8017628:	f000 f88a 	bl	8017740 <__malloc_unlock>
 801762c:	e7e3      	b.n	80175f6 <_malloc_r+0x1e>
 801762e:	6823      	ldr	r3, [r4, #0]
 8017630:	1b5b      	subs	r3, r3, r5
 8017632:	d417      	bmi.n	8017664 <_malloc_r+0x8c>
 8017634:	2b0b      	cmp	r3, #11
 8017636:	d903      	bls.n	8017640 <_malloc_r+0x68>
 8017638:	6023      	str	r3, [r4, #0]
 801763a:	441c      	add	r4, r3
 801763c:	6025      	str	r5, [r4, #0]
 801763e:	e004      	b.n	801764a <_malloc_r+0x72>
 8017640:	6863      	ldr	r3, [r4, #4]
 8017642:	42a2      	cmp	r2, r4
 8017644:	bf0c      	ite	eq
 8017646:	600b      	streq	r3, [r1, #0]
 8017648:	6053      	strne	r3, [r2, #4]
 801764a:	4630      	mov	r0, r6
 801764c:	f000 f878 	bl	8017740 <__malloc_unlock>
 8017650:	f104 000b 	add.w	r0, r4, #11
 8017654:	1d23      	adds	r3, r4, #4
 8017656:	f020 0007 	bic.w	r0, r0, #7
 801765a:	1ac2      	subs	r2, r0, r3
 801765c:	d0cc      	beq.n	80175f8 <_malloc_r+0x20>
 801765e:	1a1b      	subs	r3, r3, r0
 8017660:	50a3      	str	r3, [r4, r2]
 8017662:	e7c9      	b.n	80175f8 <_malloc_r+0x20>
 8017664:	4622      	mov	r2, r4
 8017666:	6864      	ldr	r4, [r4, #4]
 8017668:	e7cc      	b.n	8017604 <_malloc_r+0x2c>
 801766a:	1cc4      	adds	r4, r0, #3
 801766c:	f024 0403 	bic.w	r4, r4, #3
 8017670:	42a0      	cmp	r0, r4
 8017672:	d0e3      	beq.n	801763c <_malloc_r+0x64>
 8017674:	1a21      	subs	r1, r4, r0
 8017676:	4630      	mov	r0, r6
 8017678:	f000 f808 	bl	801768c <_sbrk_r>
 801767c:	3001      	adds	r0, #1
 801767e:	d1dd      	bne.n	801763c <_malloc_r+0x64>
 8017680:	e7cf      	b.n	8017622 <_malloc_r+0x4a>
 8017682:	bf00      	nop
 8017684:	2000127c 	.word	0x2000127c
 8017688:	20001280 	.word	0x20001280

0801768c <_sbrk_r>:
 801768c:	b538      	push	{r3, r4, r5, lr}
 801768e:	4d06      	ldr	r5, [pc, #24]	; (80176a8 <_sbrk_r+0x1c>)
 8017690:	2300      	movs	r3, #0
 8017692:	4604      	mov	r4, r0
 8017694:	4608      	mov	r0, r1
 8017696:	602b      	str	r3, [r5, #0]
 8017698:	f7eb f90c 	bl	80028b4 <_sbrk>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d102      	bne.n	80176a6 <_sbrk_r+0x1a>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	b103      	cbz	r3, 80176a6 <_sbrk_r+0x1a>
 80176a4:	6023      	str	r3, [r4, #0]
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	20001a78 	.word	0x20001a78

080176ac <_raise_r>:
 80176ac:	291f      	cmp	r1, #31
 80176ae:	b538      	push	{r3, r4, r5, lr}
 80176b0:	4604      	mov	r4, r0
 80176b2:	460d      	mov	r5, r1
 80176b4:	d904      	bls.n	80176c0 <_raise_r+0x14>
 80176b6:	2316      	movs	r3, #22
 80176b8:	6003      	str	r3, [r0, #0]
 80176ba:	f04f 30ff 	mov.w	r0, #4294967295
 80176be:	bd38      	pop	{r3, r4, r5, pc}
 80176c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80176c2:	b112      	cbz	r2, 80176ca <_raise_r+0x1e>
 80176c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80176c8:	b94b      	cbnz	r3, 80176de <_raise_r+0x32>
 80176ca:	4620      	mov	r0, r4
 80176cc:	f000 f830 	bl	8017730 <_getpid_r>
 80176d0:	462a      	mov	r2, r5
 80176d2:	4601      	mov	r1, r0
 80176d4:	4620      	mov	r0, r4
 80176d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176da:	f000 b817 	b.w	801770c <_kill_r>
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d00a      	beq.n	80176f8 <_raise_r+0x4c>
 80176e2:	1c59      	adds	r1, r3, #1
 80176e4:	d103      	bne.n	80176ee <_raise_r+0x42>
 80176e6:	2316      	movs	r3, #22
 80176e8:	6003      	str	r3, [r0, #0]
 80176ea:	2001      	movs	r0, #1
 80176ec:	e7e7      	b.n	80176be <_raise_r+0x12>
 80176ee:	2400      	movs	r4, #0
 80176f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80176f4:	4628      	mov	r0, r5
 80176f6:	4798      	blx	r3
 80176f8:	2000      	movs	r0, #0
 80176fa:	e7e0      	b.n	80176be <_raise_r+0x12>

080176fc <raise>:
 80176fc:	4b02      	ldr	r3, [pc, #8]	; (8017708 <raise+0xc>)
 80176fe:	4601      	mov	r1, r0
 8017700:	6818      	ldr	r0, [r3, #0]
 8017702:	f7ff bfd3 	b.w	80176ac <_raise_r>
 8017706:	bf00      	nop
 8017708:	20000104 	.word	0x20000104

0801770c <_kill_r>:
 801770c:	b538      	push	{r3, r4, r5, lr}
 801770e:	4d07      	ldr	r5, [pc, #28]	; (801772c <_kill_r+0x20>)
 8017710:	2300      	movs	r3, #0
 8017712:	4604      	mov	r4, r0
 8017714:	4608      	mov	r0, r1
 8017716:	4611      	mov	r1, r2
 8017718:	602b      	str	r3, [r5, #0]
 801771a:	f7eb f8b1 	bl	8002880 <_kill>
 801771e:	1c43      	adds	r3, r0, #1
 8017720:	d102      	bne.n	8017728 <_kill_r+0x1c>
 8017722:	682b      	ldr	r3, [r5, #0]
 8017724:	b103      	cbz	r3, 8017728 <_kill_r+0x1c>
 8017726:	6023      	str	r3, [r4, #0]
 8017728:	bd38      	pop	{r3, r4, r5, pc}
 801772a:	bf00      	nop
 801772c:	20001a78 	.word	0x20001a78

08017730 <_getpid_r>:
 8017730:	f7eb b89e 	b.w	8002870 <_getpid>

08017734 <__malloc_lock>:
 8017734:	4801      	ldr	r0, [pc, #4]	; (801773c <__malloc_lock+0x8>)
 8017736:	f000 b809 	b.w	801774c <__retarget_lock_acquire_recursive>
 801773a:	bf00      	nop
 801773c:	20001a80 	.word	0x20001a80

08017740 <__malloc_unlock>:
 8017740:	4801      	ldr	r0, [pc, #4]	; (8017748 <__malloc_unlock+0x8>)
 8017742:	f000 b804 	b.w	801774e <__retarget_lock_release_recursive>
 8017746:	bf00      	nop
 8017748:	20001a80 	.word	0x20001a80

0801774c <__retarget_lock_acquire_recursive>:
 801774c:	4770      	bx	lr

0801774e <__retarget_lock_release_recursive>:
 801774e:	4770      	bx	lr

08017750 <_init>:
 8017750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017752:	bf00      	nop
 8017754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017756:	bc08      	pop	{r3}
 8017758:	469e      	mov	lr, r3
 801775a:	4770      	bx	lr

0801775c <_fini>:
 801775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775e:	bf00      	nop
 8017760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017762:	bc08      	pop	{r3}
 8017764:	469e      	mov	lr, r3
 8017766:	4770      	bx	lr
