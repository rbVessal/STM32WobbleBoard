
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e80  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08017008  08017008  00027008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017560  08017560  00030154  2**0
                  CONTENTS
  4 .ARM          00000008  08017560  08017560  00027560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017568  08017568  00030154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017568  08017568  00027568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801756c  0801756c  0002756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08017570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018f8  20000158  080176c4  00030158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a50  080176c4  00031a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e058  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f59  00000000  00000000  0007e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c20  00000000  00000000  00084138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029e0  00000000  00000000  00086d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030c4f  00000000  00000000  00089738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b88a  00000000  00000000  000ba387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f69c  00000000  00000000  000e5c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f52ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5e8  00000000  00000000  001f5300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08016ff0 	.word	0x08016ff0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	08016ff0 	.word	0x08016ff0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	// TODO Auto-generated constructor stub

}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 fdd5 	bl	8005a40 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 8000e96:	f001 fa59 	bl	800234c <MX_TIM3_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fb51 	bl	8001544 <_ZN14WobbleBoardApp10TIM_ConfigEm>

	InitInertialSensors();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f856 	bl	8000f54 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ea8:	f000 fe0e 	bl	8001ac8 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f000 feb2 	bl	8001c16 <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f014 f834 	bl	8014f24 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000ebc:	7e3b      	ldrb	r3, [r7, #24]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d132      	bne.n	8000f28 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ece:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000ed2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 2a90 	vmov	r2, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8000ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efa:	ee17 2a90 	vmov	r2, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f06:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fa75 	bl	8001418 <_ZN14WobbleBoardApp8DWT_InitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8000f2e:	f000 fb7b 	bl	8001628 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Enable9AxisMotionFusion();
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 faf6 	bl	800152c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>

	StartDataStreaming();
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fadb 	bl	80014fc <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	43fa0000 	.word	0x43fa0000

08000f54 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 8000f5c:	f000 fc4c 	bl	80017f8 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f60:	f000 fc52 	bl	8001808 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 8000f64:	f000 fc58 	bl	8001818 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f68:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000f80 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 8000f6c:	f000 fc9b 	bl	80018a6 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f000 fca7 	bl	80018c4 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	42c80000 	.word	0x42c80000

08000f84 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d017      	beq.n	8000fd8 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f000 fe1f 	bl	8001c16 <MotionFX_manager_MagCal_start>
	}

	if(__HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <_ZN14WobbleBoardApp7ProcessEv+0xf8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <_ZN14WobbleBoardApp7ProcessEv+0x72>
	{
		SensorReadRequest = 1;
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if (SensorReadRequest == 1U)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d030      	beq.n	8001070 <_ZN14WobbleBoardApp7ProcessEv+0xec>
	{
		SensorReadRequest = 0;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Acquire data from enabled sensors and fill Msg stream */
		Accelero_Sensor_Handler(&msg_dat);
 8001018:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4611      	mov	r1, r2
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f000 f82d 	bl	8001080 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>
		Gyro_Sensor_Handler(&msg_dat);
 8001026:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4611      	mov	r1, r2
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f000 f84e 	bl	80010d0 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>
		Magneto_Sensor_Handler(&msg_dat);
 8001034:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4611      	mov	r1, r2
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f000 f871 	bl	8001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>

		/* Sensor Fusion specific part */
		FX_Data_Handler(&msg_dat);
 8001042:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4611      	mov	r1, r2
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f000 f91e 	bl	800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>

		/* Send data stream */
		Init_Streaming_Header(&msg_dat);
 8001050:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4611      	mov	r1, r2
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f000 fa35 	bl	80014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>
		// Message length is taken from last index of msg data
		// in FX_Data Handler and add 4 to that
		msg_dat.Len = STREAMING_MSG_LENGTH;
 800105e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001062:	226b      	movs	r2, #107	; 0x6b
 8001064:	601a      	str	r2, [r3, #0]

		UART_SendMsg(&msg_dat);
 8001066:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fac0 	bl	80015f0 <UART_SendMsg>
	}
}
 8001070:	bf00      	nop
 8001072:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200014f0 	.word	0x200014f0

08001080 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>:
    SensorReadRequest = 1;
  }
}

void WobbleBoardApp::Accelero_Sensor_Handler(TMsg* Msg)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3310      	adds	r3, #16
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fbe2 	bl	8001858 <BSP_SENSOR_ACC_GetAxes>

	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	1dd8      	adds	r0, r3, #7
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2204      	movs	r2, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	f000 fee3 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f103 000b 	add.w	r0, r3, #11
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 feda 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f103 000f 	add.w	r0, r3, #15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2204      	movs	r2, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	f000 fed1 	bl	8001e6a <Serialize_s32>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Gyro_Sensor_Handler(TMsg* Msg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	331c      	adds	r3, #28
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fbc7 	bl	8001872 <BSP_SENSOR_GYR_GetAxes>

	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f103 0013 	add.w	r0, r3, #19
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	f000 feba 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f103 0017 	add.w	r0, r3, #23
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	f000 feb1 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f103 001b 	add.w	r0, r3, #27
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	f000 fea8 	bl	8001e6a <Serialize_s32>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Magneto_Sensor_Handler(TMsg* Msg)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3328      	adds	r3, #40	; 0x28
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fbaa 	bl	800188c <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d16d      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	f103 020a 	add.w	r2, r3, #10
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd27 	bl	8001bf8 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80011aa:	7e3b      	ldrb	r3, [r7, #24]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d135      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
		{
			MagCalStatus = 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80011b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 80011c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 2a90 	vmov	r2, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80011d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 80011e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 2a90 	vmov	r2, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 80011f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001202:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 2a90 	vmov	r2, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 fd09 	bl	8001c2e <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30

	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f103 001f 	add.w	r0, r3, #31
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	f000 fe09 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f103 0023 	add.w	r0, r3, #35	; 0x23
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	f000 fe00 	bl	8001e6a <Serialize_s32>
	Serialize_s32(&Msg->Data[35], MagValue.z, 4);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f103 0027 	add.w	r0, r3, #39	; 0x27
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	2204      	movs	r2, #4
 8001276:	4619      	mov	r1, r3
 8001278:	f000 fdf7 	bl	8001e6a <Serialize_s32>
}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	3b03126f 	.word	0x3b03126f
 8001288:	43fa0000 	.word	0x43fa0000

0800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>:

void WobbleBoardApp::FX_Data_Handler(TMsg* Msg)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09e      	sub	sp, #120	; 0x78
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	uint32_t elapsed_time_us = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 800129a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800129e:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWT_Start();
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f864 	bl	800144c <_ZN14WobbleBoardApp9DWT_StartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8001384:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001414 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x188>
 8001388:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800138a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800138c:	f000 fbf4 	bl	8001b78 <MotionFX_manager_run>
	elapsed_time_us = DWT_Stop();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f871 	bl	8001478 <_ZN14WobbleBoardApp8DWT_StopEv>
 8001396:	6778      	str	r0, [r7, #116]	; 0x74

	(void)memcpy(&Msg->Data[39], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 800139e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a0:	330c      	adds	r3, #12
 80013a2:	2210      	movs	r2, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	f015 fd51 	bl	8016e4c <memcpy>
	(void)memcpy(&Msg->Data[55], (void *)pdata_out->rotation, 3U * sizeof(float));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	333b      	adds	r3, #59	; 0x3b
 80013ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013b0:	220c      	movs	r2, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f015 fd4a 	bl	8016e4c <memcpy>
	(void)memcpy(&Msg->Data[71], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f103 004b 	add.w	r0, r3, #75	; 0x4b
 80013be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c0:	331c      	adds	r3, #28
 80013c2:	220c      	movs	r2, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	f015 fd41 	bl	8016e4c <memcpy>
	(void)memcpy(&Msg->Data[83], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	3328      	adds	r3, #40	; 0x28
 80013d4:	220c      	movs	r2, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	f015 fd38 	bl	8016e4c <memcpy>

	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3363      	adds	r3, #99	; 0x63
 80013e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013e2:	3234      	adds	r2, #52	; 0x34
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3367      	adds	r3, #103	; 0x67
 80013ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ee:	3238      	adds	r2, #56	; 0x38
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]

	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	336b      	adds	r3, #107	; 0x6b
 80013f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013fa:	2204      	movs	r2, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd34 	bl	8001e6a <Serialize_s32>
}
 8001402:	bf00      	nop
 8001404:	3778      	adds	r7, #120	; 0x78
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	3a83126f 	.word	0x3a83126f
 8001410:	3b03126f 	.word	0x3b03126f
 8001414:	3c23d70a 	.word	0x3c23d70a

08001418 <_ZN14WobbleBoardApp8DWT_InitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWT_Init()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000edf0 	.word	0xe000edf0
 8001448:	e0001000 	.word	0xe0001000

0800144c <_ZN14WobbleBoardApp9DWT_StartEv>:

void WobbleBoardApp::DWT_Start()
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e0001000 	.word	0xe0001000

08001478 <_ZN14WobbleBoardApp8DWT_StopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWT_Stop()
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <_ZN14WobbleBoardApp8DWT_StopEv+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <_ZN14WobbleBoardApp8DWT_StopEv+0x4c>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e0001000 	.word	0xe0001000
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>:

void WobbleBoardApp::Init_Streaming_Header(TMsg* Msg)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2232      	movs	r2, #50	; 0x32
 80014e2:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2208      	movs	r2, #8
 80014e8:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2203      	movs	r2, #3
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 8001504:	f000 f990 	bl	8001828 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 8001508:	f000 f996 	bl	8001838 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 800150c:	f000 f99c 	bl	8001848 <BSP_SENSOR_MAG_Enable>

	HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x2c>)
 8001512:	f007 fec3 	bl	800929c <HAL_TIM_Base_Start_IT>

	DataLoggerActive = 1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200014f0 	.word	0x200014f0

0800152c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:
	MotionFX_manager_stop_9X();
	MotionFX_manager_start_6X();
}

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001534:	f000 fb4c 	bl	8001bd0 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001538:	f000 fb54 	bl	8001be4 <MotionFX_manager_start_9X>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN14WobbleBoardApp10TIM_ConfigEm>:

void WobbleBoardApp::TIM_Config(uint32_t Freq)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800154e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x70>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x74>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	09db      	lsrs	r3, r3, #7
 8001560:	3b01      	subs	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001564:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001592:	f007 fe2b 	bl	80091ec <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZN14WobbleBoardApp10TIM_ConfigEm+0x66>
  {
    Error_Handler();
 80015a6:	f000 fa89 	bl	8001abc <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	10624dd3 	.word	0x10624dd3
 80015bc:	200014f0 	.word	0x200014f0

080015c0 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d102      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200014f0 	.word	0x200014f0
 80015ec:	200005c1 	.word	0x200005c1

080015f0 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fc0c 	bl	8001e16 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <UART_SendMsg+0x30>)
 8001602:	f000 fbda 	bl	8001dba <ByteStuffCopy>
 8001606:	4603      	mov	r3, r0
 8001608:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800160a:	89fa      	ldrh	r2, [r7, #14]
 800160c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001610:	4903      	ldr	r1, [pc, #12]	; (8001620 <UART_SendMsg+0x30>)
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <UART_SendMsg+0x34>)
 8001614:	f008 faf4 	bl	8009c00 <HAL_UART_Transmit>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200005c4 	.word	0x200005c4
 8001624:	20001590 	.word	0x20001590

08001628 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <UART_StartReceiveMsg+0x2c>)
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <UART_StartReceiveMsg+0x30>)
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <UART_StartReceiveMsg+0x2c>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <UART_StartReceiveMsg+0x2c>)
 800163e:	2200      	movs	r2, #0
 8001640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <UART_StartReceiveMsg+0x30>)
 800164a:	4802      	ldr	r0, [pc, #8]	; (8001654 <UART_StartReceiveMsg+0x2c>)
 800164c:	f008 fb6c 	bl	8009d28 <HAL_UART_Receive_DMA>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20001590 	.word	0x20001590
 8001658:	20001254 	.word	0x20001254

0800165c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_CRC_Init+0x3c>)
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <MX_CRC_Init+0x40>)
 8001664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_CRC_Init+0x3c>)
 8001668:	2200      	movs	r2, #0
 800166a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_CRC_Init+0x3c>)
 800166e:	2200      	movs	r2, #0
 8001670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_CRC_Init+0x3c>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <MX_CRC_Init+0x3c>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_CRC_Init+0x3c>)
 8001680:	2201      	movs	r2, #1
 8001682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_CRC_Init+0x3c>)
 8001686:	f004 fc47 	bl	8005f18 <HAL_CRC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001690:	f000 fa14 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000145c 	.word	0x2000145c
 800169c:	40023000 	.word	0x40023000

080016a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_CRC_MspInit+0x38>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10b      	bne.n	80016ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_CRC_MspInit+0x3c>)
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_CRC_MspInit+0x3c>)
 80016b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016bc:	6493      	str	r3, [r2, #72]	; 0x48
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_CRC_MspInit+0x3c>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023000 	.word	0x40023000
 80016dc:	40021000 	.word	0x40021000

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_DMA_Init+0x38>)
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <MX_DMA_Init+0x38>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6493      	str	r3, [r2, #72]	; 0x48
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_DMA_Init+0x38>)
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f004 fbd1 	bl	8005eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f004 fbea 	bl	8005ee2 <HAL_NVIC_EnableIRQ>

}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0xd4>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_GPIO_Init+0xd4>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_GPIO_Init+0xd4>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f005 f93d 	bl	8006a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <MX_GPIO_Init+0xd8>)
 80017b6:	f004 fe91 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ba:	2320      	movs	r3, #32
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f004 fe82 	bl	80064dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f004 fb64 	bl	8005eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f004 fb7d 	bl	8005ee2 <HAL_NVIC_EnableIRQ>

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800

080017f8 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80017fc:	2102      	movs	r1, #2
 80017fe:	2000      	movs	r0, #0
 8001800:	f003 fd0e 	bl	8005220 <IKS01A2_MOTION_SENSOR_Init>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800180c:	2101      	movs	r1, #1
 800180e:	2000      	movs	r0, #0
 8001810:	f003 fd06 	bl	8005220 <IKS01A2_MOTION_SENSOR_Init>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800181c:	2104      	movs	r1, #4
 800181e:	2002      	movs	r0, #2
 8001820:	f003 fcfe 	bl	8005220 <IKS01A2_MOTION_SENSOR_Init>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 800182c:	2102      	movs	r1, #2
 800182e:	2000      	movs	r0, #0
 8001830:	f003 fdf2 	bl	8005418 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800183c:	2101      	movs	r1, #1
 800183e:	2000      	movs	r0, #0
 8001840:	f003 fdea 	bl	8005418 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800184c:	2104      	movs	r1, #4
 800184e:	2002      	movs	r0, #2
 8001850:	f003 fde2 	bl	8005418 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	2102      	movs	r1, #2
 8001864:	2000      	movs	r0, #0
 8001866:	f003 fe19 	bl	800549c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	2101      	movs	r1, #1
 800187e:	2000      	movs	r0, #0
 8001880:	f003 fe0c 	bl	800549c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	2104      	movs	r1, #4
 8001898:	2002      	movs	r0, #2
 800189a:	f003 fdff 	bl	800549c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 80018b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80018b4:	2102      	movs	r1, #2
 80018b6:	2000      	movs	r0, #0
 80018b8:	f003 fe34 	bl	8005524 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	2102      	movs	r1, #2
 80018d0:	2000      	movs	r0, #0
 80018d2:	f003 fe6d 	bl	80055b0 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	226e      	movs	r2, #110	; 0x6e
 80018ea:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3301      	adds	r3, #1
 80018f0:	2277      	movs	r2, #119	; 0x77
 80018f2:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3302      	adds	r3, #2
 80018f8:	2275      	movs	r2, #117	; 0x75
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	226e      	movs	r2, #110	; 0x6e
 8001914:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	2277      	movs	r2, #119	; 0x77
 800191c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3302      	adds	r3, #2
 8001922:	2275      	movs	r2, #117	; 0x75
 8001924:	701a      	strb	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	226e      	movs	r2, #110	; 0x6e
 800193e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3301      	adds	r3, #1
 8001944:	2265      	movs	r2, #101	; 0x65
 8001946:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3302      	adds	r3, #2
 800194c:	2275      	movs	r2, #117	; 0x75
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f004 f94b 	bl	8005bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f818 	bl	800199a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f7ff fed7 	bl	800171c <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f7ff feb7 	bl	80016e0 <MX_DMA_Init>
  MX_CRC_Init();
 8001972:	f7ff fe73 	bl	800165c <MX_CRC_Init>
  MX_RTC_Init();
 8001976:	f000 f967 	bl	8001c48 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  WobbleBoardApp* wobbleBoard = new WobbleBoardApp();
 800197a:	2044      	movs	r0, #68	; 0x44
 800197c:	f013 fb0e 	bl	8014f9c <_Znwj>
 8001980:	4603      	mov	r3, r0
 8001982:	461c      	mov	r4, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff fa57 	bl	8000e38 <_ZN14WobbleBoardAppC1Ev>
 800198a:	607c      	str	r4, [r7, #4]
  wobbleBoard->Init();
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fa7b 	bl	8000e88 <_ZN14WobbleBoardApp4InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MX_MEMS_Process();
	  wobbleBoard->Process();
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff faf6 	bl	8000f84 <_ZN14WobbleBoardApp7ProcessEv>
 8001998:	e7fb      	b.n	8001992 <main+0x36>

0800199a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b096      	sub	sp, #88	; 0x58
 800199e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2244      	movs	r2, #68	; 0x44
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f015 fa5d 	bl	8016e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019c0:	f005 fec0 	bl	8007744 <HAL_PWREx_ControlVoltageScaling>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80019d4:	f000 f872 	bl	8001abc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019d8:	230a      	movs	r3, #10
 80019da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e2:	2310      	movs	r3, #16
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ee:	2302      	movs	r3, #2
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019f6:	230a      	movs	r3, #10
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019fa:	2307      	movs	r3, #7
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f005 fef0 	bl	80077f0 <HAL_RCC_OscConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001a20:	f000 f84c 	bl	8001abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f006 fabd 	bl	8007fbc <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001a52:	f000 f833 	bl	8001abc <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3758      	adds	r7, #88	; 0x58
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a70:	d115      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a74:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_EXTI_Callback+0x34>
		{
			iIsUserCalibrationLEDOn = 1;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a90:	60fb      	str	r3, [r7, #12]
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_EXTI_Callback+0x3e>
			iIsUserCalibrationLEDOn = 0;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a9c:	60fb      	str	r3, [r7, #12]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	08017008 	.word	0x08017008
 8001ab0:	200007c4 	.word	0x200007c4
 8001ab4:	0801700c 	.word	0x0801700c
 8001ab8:	0801702c 	.word	0x0801702c

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>
	...

08001ac8 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001acc:	f012 fcac 	bl	8014428 <MotionFX_GetStateSize>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001ad6:	d901      	bls.n	8001adc <MotionFX_manager_init+0x14>
    Error_Handler();
 8001ad8:	f7ff fff0 	bl	8001abc <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001adc:	4821      	ldr	r0, [pc, #132]	; (8001b64 <MotionFX_manager_init+0x9c>)
 8001ade:	f012 fca7 	bl	8014430 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481e      	ldr	r0, [pc, #120]	; (8001b64 <MotionFX_manager_init+0x9c>)
 8001aea:	f012 fd85 	bl	80145f8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	331d      	adds	r3, #29
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fef2 	bl	80018de <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3321      	adds	r3, #33	; 0x21
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff01 	bl	8001908 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3325      	adds	r3, #37	; 0x25
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff10 	bl	8001932 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MotionFX_manager_init+0xa4>)
 8001b18:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <MotionFX_manager_init+0xa8>)
 8001b20:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MotionFX_manager_init+0xac>)
 8001b28:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MotionFX_manager_init+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MotionFX_manager_init+0x9c>)
 8001b4c:	f012 fd0a 	bl	8014564 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001b50:	2100      	movs	r1, #0
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MotionFX_manager_init+0x9c>)
 8001b54:	f012 fd8c 	bl	8014670 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4802      	ldr	r0, [pc, #8]	; (8001b64 <MotionFX_manager_init+0x9c>)
 8001b5c:	f012 fda8 	bl	80146b0 <MotionFX_enable_9X>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200007fc 	.word	0x200007fc
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	3ac88a48 	.word	0x3ac88a48
 8001b70:	3b83126f 	.word	0x3b83126f
 8001b74:	3b449ba6 	.word	0x3b449ba6

08001b78 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MotionFX_manager_run+0x4c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MotionFX_manager_run+0x50>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d10e      	bne.n	8001bb0 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MotionFX_manager_run+0x54>)
 8001b9a:	f012 fdb9 	bl	8014710 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	9200      	str	r2, [sp, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <MotionFX_manager_run+0x54>)
 8001baa:	f012 fda1 	bl	80146f0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8001bae:	e004      	b.n	8001bba <MotionFX_manager_run+0x42>
    discardedCount++;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <MotionFX_manager_run+0x4c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <MotionFX_manager_run+0x4c>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200007f8 	.word	0x200007f8
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	200007fc 	.word	0x200007fc

08001bd0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4802      	ldr	r0, [pc, #8]	; (8001be0 <MotionFX_manager_stop_6X+0x10>)
 8001bd8:	f012 fd4a 	bl	8014670 <MotionFX_enable_6X>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200007fc 	.word	0x200007fc

08001be4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8001be8:	2101      	movs	r1, #1
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <MotionFX_manager_start_9X+0x10>)
 8001bec:	f012 fd60 	bl	80146b0 <MotionFX_enable_9X>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200007fc 	.word	0x200007fc

08001bf8 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f012 ff6c 	bl	8014ae0 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f013 f98b 	bl	8014f24 <MotionFX_MagCal_getParams>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f012 fec7 	bl	80149b4 <MotionFX_MagCal_init>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f012 febb 	bl	80149b4 <MotionFX_MagCal_init>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c62:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c6e:	227f      	movs	r2, #127	; 0x7f
 8001c70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c74:	22ff      	movs	r2, #255	; 0xff
 8001c76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c90:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001c92:	f007 f855 	bl	8008d40 <HAL_RTC_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f7ff ff0e 	bl	8001abc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480f      	ldr	r0, [pc, #60]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001cbc:	f007 f8bb 	bl	8008e36 <HAL_RTC_SetTime>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001cc6:	f7ff fef9 	bl	8001abc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_RTC_Init+0xb0>)
 8001ce2:	f007 f945 	bl	8008f70 <HAL_RTC_SetDate>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001cec:	f7ff fee6 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20001480 	.word	0x20001480
 8001cfc:	40002800 	.word	0x40002800

08001d00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a4      	sub	sp, #144	; 0x90
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	2288      	movs	r2, #136	; 0x88
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f015 f8a9 	bl	8016e68 <memset>
  if(rtcHandle->Instance==RTC)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_RTC_MspInit+0x5c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d118      	bne.n	8001d52 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4618      	mov	r0, r3
 8001d34:	f006 fb48 	bl	80083c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d3e:	f7ff febd 	bl	8001abc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RTC_MspInit+0x60>)
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_RTC_MspInit+0x60>)
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3790      	adds	r7, #144	; 0x90
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40002800 	.word	0x40002800
 8001d60:	40021000 	.word	0x40021000

08001d64 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2bf0      	cmp	r3, #240	; 0xf0
 8001d78:	d002      	beq.n	8001d80 <ByteStuffCopyByte+0x1c>
 8001d7a:	2bf1      	cmp	r3, #241	; 0xf1
 8001d7c:	d008      	beq.n	8001d90 <ByteStuffCopyByte+0x2c>
 8001d7e:	e00f      	b.n	8001da0 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	22f1      	movs	r2, #241	; 0xf1
 8001d84:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	22f2      	movs	r2, #242	; 0xf2
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e00d      	b.n	8001dac <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	22f1      	movs	r2, #241	; 0xf1
 8001d94:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	22f1      	movs	r2, #241	; 0xf1
 8001d9c:	701a      	strb	r2, [r3, #0]
      break;
 8001d9e:	e005      	b.n	8001dac <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
      break;
 8001daa:	bf00      	nop
  }

  return ret;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e011      	b.n	8001df2 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	18d0      	adds	r0, r2, r3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3304      	adds	r3, #4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff ffc0 	bl	8001d64 <ByteStuffCopyByte>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3e8      	bcc.n	8001dce <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	22f0      	movs	r2, #240	; 0xf0
 8001e04:	701a      	strb	r2, [r3, #0]
  count++;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
  return count;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e00a      	b.n	8001e3e <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3ef      	bcc.n	8001e28 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00f      	b.n	8001e9c <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3eb      	bcc.n	8001e7c <Serialize_s32+0x12>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f003 feb4 	bl	8005cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <DMA1_Channel6_IRQHandler+0x10>)
 8001f56:	f004 f9e1 	bl	800631c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20001548 	.word	0x20001548

08001f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM3_IRQHandler+0x10>)
 8001f6a:	f007 fa07 	bl	800937c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200014f0 	.word	0x200014f0

08001f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8001f7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f80:	f004 fd62 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <BSP_I2C1_Init+0x70>)
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <BSP_I2C1_Init+0x74>)
 8001f96:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <BSP_I2C1_Init+0x78>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4918      	ldr	r1, [pc, #96]	; (8002000 <BSP_I2C1_Init+0x78>)
 8001fa0:	600a      	str	r2, [r1, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d122      	bne.n	8001fec <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001fa6:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <BSP_I2C1_Init+0x70>)
 8001fa8:	f005 f866 	bl	8007078 <HAL_I2C_GetState>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11c      	bne.n	8001fec <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001fb2:	4811      	ldr	r0, [pc, #68]	; (8001ff8 <BSP_I2C1_Init+0x70>)
 8001fb4:	f000 f8fe 	bl	80021b4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <BSP_I2C1_Init+0x70>)
 8001fc0:	f000 f8b4 	bl	800212c <MX_I2C1_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fca:	f06f 0307 	mvn.w	r3, #7
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e00c      	b.n	8001fec <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <BSP_I2C1_Init+0x70>)
 8001fd6:	f005 fb0f 	bl	80075f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fe0:	f06f 0307 	mvn.w	r3, #7
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	e001      	b.n	8001fec <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200014a4 	.word	0x200014a4
 8001ffc:	40005400 	.word	0x40005400
 8002000:	2000117c 	.word	0x2000117c

08002004 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <BSP_I2C1_DeInit+0x48>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d014      	beq.n	8002040 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <BSP_I2C1_DeInit+0x48>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <BSP_I2C1_DeInit+0x48>)
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <BSP_I2C1_DeInit+0x48>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <BSP_I2C1_DeInit+0x4c>)
 800202a:	f000 f909 	bl	8002240 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800202e:	4808      	ldr	r0, [pc, #32]	; (8002050 <BSP_I2C1_DeInit+0x4c>)
 8002030:	f004 fdb1 	bl	8006b96 <HAL_I2C_DeInit>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800203a:	f06f 0307 	mvn.w	r3, #7
 800203e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000117c 	.word	0x2000117c
 8002050:	200014a4 	.word	0x200014a4

08002054 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af04      	add	r7, sp, #16
 800205a:	60ba      	str	r2, [r7, #8]
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	81fb      	strh	r3, [r7, #14]
 8002062:	460b      	mov	r3, r1
 8002064:	81bb      	strh	r3, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800206e:	89ba      	ldrh	r2, [r7, #12]
 8002070:	89f9      	ldrh	r1, [r7, #14]
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <BSP_I2C1_WriteReg+0x60>)
 8002084:	f004 fdca 	bl	8006c1c <HAL_I2C_Mem_Write>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800208e:	4809      	ldr	r0, [pc, #36]	; (80020b4 <BSP_I2C1_WriteReg+0x60>)
 8002090:	f005 f800 	bl	8007094 <HAL_I2C_GetError>
 8002094:	4603      	mov	r3, r0
 8002096:	2b04      	cmp	r3, #4
 8002098:	d103      	bne.n	80020a2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800209a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e002      	b.n	80020a8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020a2:	f06f 0303 	mvn.w	r3, #3
 80020a6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80020a8:	697b      	ldr	r3, [r7, #20]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200014a4 	.word	0x200014a4

080020b8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60ba      	str	r2, [r7, #8]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	81fb      	strh	r3, [r7, #14]
 80020c6:	460b      	mov	r3, r1
 80020c8:	81bb      	strh	r3, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020d2:	89ba      	ldrh	r2, [r7, #12]
 80020d4:	89f9      	ldrh	r1, [r7, #14]
 80020d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2301      	movs	r3, #1
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <BSP_I2C1_ReadReg+0x60>)
 80020e8:	f004 feac 	bl	8006e44 <HAL_I2C_Mem_Read>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80020f2:	4809      	ldr	r0, [pc, #36]	; (8002118 <BSP_I2C1_ReadReg+0x60>)
 80020f4:	f004 ffce 	bl	8007094 <HAL_I2C_GetError>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d103      	bne.n	8002106 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e002      	b.n	800210c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002106:	f06f 0303 	mvn.w	r3, #3
 800210a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800210c:	697b      	ldr	r3, [r7, #20]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200014a4 	.word	0x200014a4

0800211c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002120:	f003 fddc 	bl	8005cdc <HAL_GetTick>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <MX_I2C1_Init+0x80>)
 800213c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <MX_I2C1_Init+0x84>)
 8002142:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f004 fc82 	bl	8006a78 <HAL_I2C_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f005 fa39 	bl	80075f8 <HAL_I2CEx_ConfigAnalogFilter>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 fa7b 	bl	800768e <HAL_I2CEx_ConfigDigitalFilter>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005400 	.word	0x40005400
 80021b0:	10909cec 	.word	0x10909cec

080021b4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <I2C1_MspInit+0x84>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <I2C1_MspInit+0x84>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <I2C1_MspInit+0x84>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80021d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021da:	2312      	movs	r3, #18
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80021e6:	2304      	movs	r3, #4
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4812      	ldr	r0, [pc, #72]	; (800223c <I2C1_MspInit+0x88>)
 80021f2:	f004 f973 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80021f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fc:	2312      	movs	r3, #18
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002208:	2304      	movs	r3, #4
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	480a      	ldr	r0, [pc, #40]	; (800223c <I2C1_MspInit+0x88>)
 8002214:	f004 f962 	bl	80064dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <I2C1_MspInit+0x84>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <I2C1_MspInit+0x84>)
 800221e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <I2C1_MspInit+0x84>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	48000400 	.word	0x48000400

08002240 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <I2C1_MspDeInit+0x30>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	4a08      	ldr	r2, [pc, #32]	; (8002270 <I2C1_MspDeInit+0x30>)
 800224e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002252:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <I2C1_MspDeInit+0x34>)
 800225a:	f004 fae9 	bl	8006830 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800225e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002262:	4804      	ldr	r0, [pc, #16]	; (8002274 <I2C1_MspDeInit+0x34>)
 8002264:	f004 fae4 	bl	8006830 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	48000400 	.word	0x48000400

08002278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_kill>:

int _kill(int pid, int sig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002292:	f014 fda9 	bl	8016de8 <__errno>
 8002296:	4603      	mov	r3, r0
 8002298:	2216      	movs	r2, #22
 800229a:	601a      	str	r2, [r3, #0]
	return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_exit>:

void _exit (int status)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffe7 	bl	8002288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ba:	e7fe      	b.n	80022ba <_exit+0x12>

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f014 fd7c 	bl	8016de8 <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20018000 	.word	0x20018000
 800231c:	00000400 	.word	0x00000400
 8002320:	20001180 	.word	0x20001180
 8002324:	20001a50 	.word	0x20001a50

08002328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_TIM3_Init+0x94>)
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <MX_TIM3_Init+0x98>)
 800236e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_TIM3_Init+0x94>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <MX_TIM3_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002390:	4813      	ldr	r0, [pc, #76]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002392:	f006 ff2b 	bl	80091ec <HAL_TIM_Base_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800239c:	f7ff fb8e 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <MX_TIM3_Init+0x94>)
 80023ae:	f007 f904 	bl	80095ba <HAL_TIM_ConfigClockSource>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023b8:	f7ff fb80 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_TIM3_Init+0x94>)
 80023ca:	f007 fb1b 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023d4:	f7ff fb72 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200014f0 	.word	0x200014f0
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_TIM_Base_MspInit+0x44>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d113      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201d      	movs	r0, #29
 8002418:	f003 fd47 	bl	8005eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800241c:	201d      	movs	r0, #29
 800241e:	f003 fd60 	bl	8005ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40000400 	.word	0x40000400
 8002430:	40021000 	.word	0x40021000

08002434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002438:	f7ff ff76 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <LoopForever+0x6>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	; (8002474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <LoopForever+0xe>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	; (8002480 <LoopForever+0x16>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f014 fcc7 	bl	8016df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002466:	f7ff fa79 	bl	800195c <main>

0800246a <LoopForever>:

LoopForever:
    b LoopForever
 800246a:	e7fe      	b.n	800246a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800246c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002478:	08017570 	.word	0x08017570
  ldr r2, =_sbss
 800247c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002480:	20001a50 	.word	0x20001a50

08002484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC1_2_IRQHandler>
	...

08002488 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e04d      	b.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	7b1a      	ldrb	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a1b      	ldr	r2, [pc, #108]	; (800254c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80024e0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80024e6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e020      	b.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4798      	blx	r3
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e016      	b.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d112      	bne.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002524:	2301      	movs	r3, #1
 8002526:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	461a      	mov	r2, r3
 800252c:	2123      	movs	r1, #35	; 0x23
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fb55 	bl	8002bde <LSM303AGR_ACC_Write_Reg>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e000      	b.n	8002542 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	080033ed 	.word	0x080033ed
 8002550:	0800344f 	.word	0x0800344f

08002554 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	331c      	adds	r3, #28
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f001 f94a 	bl	80037fc <lsm303agr_xl_block_data_update_set>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e02c      	b.n	80025ce <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	331c      	adds	r3, #28
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f001 faed 	bl	8003b5a <lsm303agr_xl_fifo_mode_set>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	e020      	b.n	80025ce <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	331c      	adds	r3, #28
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f84e 	bl	800363c <lsm303agr_xl_data_rate_set>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e010      	b.n	80025ce <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	331c      	adds	r3, #28
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f8c4 	bl	8003740 <lsm303agr_xl_full_scale_set>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e004      	b.n	80025ce <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f87c 	bl	80026dc <LSM303AGR_ACC_Disable>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e008      	b.n	8002602 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	331c      	adds	r3, #28
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fa55 	bl	8003aca <lsm303agr_xl_device_id_get>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e000      	b.n	800262e <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2210      	movs	r2, #16
 8002664:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002678:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	43c80000 	.word	0x43c80000

08002694 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e014      	b.n	80026d4 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 021c 	add.w	r2, r3, #28
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 ffbf 	bl	800363c <lsm303agr_xl_data_rate_set>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	e004      	b.n	80026d4 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e01f      	b.n	8002732 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f103 021c 	add.w	r2, r3, #28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	332a      	adds	r3, #42	; 0x2a
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f000 ffc2 	bl	8003688 <lsm303agr_xl_data_rate_get>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e010      	b.n	8002732 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	331c      	adds	r3, #28
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f000 ff90 	bl	800363c <lsm303agr_xl_data_rate_set>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e004      	b.n	8002732 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	331c      	adds	r3, #28
 800274c:	f107 020b 	add.w	r2, r7, #11
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ff3e 	bl	80035d4 <lsm303agr_xl_operating_mode_get>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e031      	b.n	80027c8 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d01a      	beq.n	80027a0 <LSM303AGR_ACC_GetSensitivity+0x66>
 800276a:	2b02      	cmp	r3, #2
 800276c:	dc22      	bgt.n	80027b4 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00a      	beq.n	800278c <LSM303AGR_ACC_GetSensitivity+0x52>
 8002776:	e01d      	b.n	80027b4 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fca8 	bl	80030d0 <LSM303AGR_ACC_GetSensitivityHR>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01a      	beq.n	80027bc <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e01d      	b.n	80027c8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800278c:	6839      	ldr	r1, [r7, #0]
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fce4 	bl	800315c <LSM303AGR_ACC_GetSensitivityNM>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	e013      	b.n	80027c8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fd20 	bl	80031e8 <LSM303AGR_ACC_GetSensitivityLP>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	60fb      	str	r3, [r7, #12]
      break;
 80027ba:	e004      	b.n	80027c6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027bc:	bf00      	nop
 80027be:	e002      	b.n	80027c6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027c4:	bf00      	nop
  }

  return ret;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	331c      	adds	r3, #28
 80027e2:	f107 020b 	add.w	r2, r7, #11
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fef3 	bl	80035d4 <lsm303agr_xl_operating_mode_get>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e09d      	b.n	8002936 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	331c      	adds	r3, #28
 80027fe:	f107 020a 	add.w	r2, r7, #10
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f000 ff3f 	bl	8003688 <lsm303agr_xl_data_rate_get>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	e08f      	b.n	8002936 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002816:	7afb      	ldrb	r3, [r7, #11]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d147      	bne.n	80028ac <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	2b09      	cmp	r3, #9
 8002820:	d840      	bhi.n	80028a4 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002851 	.word	0x08002851
 800282c:	0800285b 	.word	0x0800285b
 8002830:	08002865 	.word	0x08002865
 8002834:	0800286d 	.word	0x0800286d
 8002838:	08002875 	.word	0x08002875
 800283c:	0800287d 	.word	0x0800287d
 8002840:	08002885 	.word	0x08002885
 8002844:	0800288d 	.word	0x0800288d
 8002848:	08002895 	.word	0x08002895
 800284c:	0800289d 	.word	0x0800289d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
        break;
 8002858:	e06c      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002860:	601a      	str	r2, [r3, #0]
        break;
 8002862:	e067      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a36      	ldr	r2, [pc, #216]	; (8002940 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002868:	601a      	str	r2, [r3, #0]
        break;
 800286a:	e063      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4a35      	ldr	r2, [pc, #212]	; (8002944 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002870:	601a      	str	r2, [r3, #0]
        break;
 8002872:	e05f      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002878:	601a      	str	r2, [r3, #0]
        break;
 800287a:	e05b      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002880:	601a      	str	r2, [r3, #0]
        break;
 8002882:	e057      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002888:	601a      	str	r2, [r3, #0]
        break;
 800288a:	e053      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4a31      	ldr	r2, [pc, #196]	; (8002954 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002890:	601a      	str	r2, [r3, #0]
        break;
 8002892:	e04f      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4a30      	ldr	r2, [pc, #192]	; (8002958 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002898:	601a      	str	r2, [r3, #0]
        break;
 800289a:	e04b      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4a2f      	ldr	r2, [pc, #188]	; (800295c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80028a0:	601a      	str	r2, [r3, #0]
        break;
 80028a2:	e047      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	60fb      	str	r3, [r7, #12]
        break;
 80028aa:	e043      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80028ac:	7abb      	ldrb	r3, [r7, #10]
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d83c      	bhi.n	800292c <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	080028eb 	.word	0x080028eb
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080028fd 	.word	0x080028fd
 80028c8:	08002905 	.word	0x08002905
 80028cc:	0800290d 	.word	0x0800290d
 80028d0:	08002915 	.word	0x08002915
 80028d4:	0800291d 	.word	0x0800291d
 80028d8:	0800292d 	.word	0x0800292d
 80028dc:	08002925 	.word	0x08002925
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
        break;
 80028e8:	e024      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028f0:	601a      	str	r2, [r3, #0]
        break;
 80028f2:	e01f      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80028f8:	601a      	str	r2, [r3, #0]
        break;
 80028fa:	e01b      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002900:	601a      	str	r2, [r3, #0]
        break;
 8002902:	e017      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002908:	601a      	str	r2, [r3, #0]
        break;
 800290a:	e013      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002910:	601a      	str	r2, [r3, #0]
        break;
 8002912:	e00f      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002918:	601a      	str	r2, [r3, #0]
        break;
 800291a:	e00b      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002920:	601a      	str	r2, [r3, #0]
        break;
 8002922:	e007      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002928:	601a      	str	r2, [r3, #0]
        break;
 800292a:	e003      	b.n	8002934 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	60fb      	str	r3, [r7, #12]
        break;
 8002932:	bf00      	nop
    }
  }

  return ret;
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	41200000 	.word	0x41200000
 8002944:	41c80000 	.word	0x41c80000
 8002948:	42480000 	.word	0x42480000
 800294c:	42c80000 	.word	0x42c80000
 8002950:	43480000 	.word	0x43480000
 8002954:	43c80000 	.word	0x43c80000
 8002958:	44ca8000 	.word	0x44ca8000
 800295c:	45a80000 	.word	0x45a80000
 8002960:	44a80000 	.word	0x44a80000

08002964 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002976:	2b01      	cmp	r3, #1
 8002978:	d106      	bne.n	8002988 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800297a:	ed97 0a00 	vldr	s0, [r7]
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fc78 	bl	8003274 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002984:	4603      	mov	r3, r0
 8002986:	e005      	b.n	8002994 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002988:	ed97 0a00 	vldr	s0, [r7]
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fcd3 	bl	8003338 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002992:	4603      	mov	r3, r0
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	331c      	adds	r3, #28
 80029ae:	f107 020b 	add.w	r2, r7, #11
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fee9 	bl	800378c <lsm303agr_xl_full_scale_get>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	e023      	b.n	8002a0e <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80029c6:	7afb      	ldrb	r3, [r7, #11]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d81b      	bhi.n	8002a04 <LSM303AGR_ACC_GetFullScale+0x68>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <LSM303AGR_ACC_GetFullScale+0x38>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029ed 	.word	0x080029ed
 80029dc:	080029f5 	.word	0x080029f5
 80029e0:	080029fd 	.word	0x080029fd
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
      break;
 80029ea:	e00f      	b.n	8002a0c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	601a      	str	r2, [r3, #0]
      break;
 80029f2:	e00b      	b.n	8002a0c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2208      	movs	r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
      break;
 80029fa:	e007      	b.n	8002a0c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	601a      	str	r2, [r3, #0]
      break;
 8002a02:	e003      	b.n	8002a0c <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	60fb      	str	r3, [r7, #12]
      break;
 8002a0a:	bf00      	nop
  }

  return ret;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	dd0b      	ble.n	8002a40 <LSM303AGR_ACC_SetFullScale+0x28>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	dd06      	ble.n	8002a3c <LSM303AGR_ACC_SetFullScale+0x24>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	dc01      	bgt.n	8002a38 <LSM303AGR_ACC_SetFullScale+0x20>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e004      	b.n	8002a42 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e002      	b.n	8002a42 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a40:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002a42:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	331c      	adds	r3, #28
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fe77 	bl	8003740 <lsm303agr_xl_full_scale_set>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	e000      	b.n	8002a60 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	331c      	adds	r3, #28
 8002a7e:	f107 020f 	add.w	r2, r7, #15
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fda5 	bl	80035d4 <lsm303agr_xl_operating_mode_get>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	e04a      	b.n	8002b2c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d00c      	beq.n	8002ab6 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	dc0e      	bgt.n	8002abe <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d003      	beq.n	8002ab0 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002aa8:	e009      	b.n	8002abe <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002aaa:	2310      	movs	r3, #16
 8002aac:	83fb      	strh	r3, [r7, #30]
      break;
 8002aae:	e00a      	b.n	8002ac6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002ab0:	2340      	movs	r3, #64	; 0x40
 8002ab2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ab4:	e007      	b.n	8002ac6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aba:	83fb      	strh	r3, [r7, #30]
      break;
 8002abc:	e003      	b.n	8002ac6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	61bb      	str	r3, [r7, #24]
      break;
 8002ac4:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d101      	bne.n	8002ad2 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	e02c      	b.n	8002b2c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	331c      	adds	r3, #28
 8002ad6:	f107 0210 	add.w	r2, r7, #16
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 feb3 	bl	8003848 <lsm303agr_acceleration_raw_get>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e01e      	b.n	8002b2c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002aee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002b02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b10:	b21a      	sxth	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002b16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	809a      	strh	r2, [r3, #4]

  return ret;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff8c 	bl	8002a68 <LSM303AGR_ACC_GetAxesRaw>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e03c      	b.n	8002bd6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fde9 	bl	800273a <LSM303AGR_ACC_GetSensitivity>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e030      	b.n	8002bd6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002b74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b8c:	ee17 2a90 	vmov	r2, s15
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002b94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bac:	ee17 2a90 	vmov	r2, s15
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002bb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bcc:	ee17 2a90 	vmov	r2, s15
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
 8002bea:	4613      	mov	r3, r2
 8002bec:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f103 001c 	add.w	r0, r3, #28
 8002bf4:	1cba      	adds	r2, r7, #2
 8002bf6:	78f9      	ldrb	r1, [r7, #3]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f000 fcd3 	bl	80035a4 <lsm303agr_write_reg>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e000      	b.n	8002c0c <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e04b      	b.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7b1a      	ldrb	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002c6c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002c72:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e01e      	b.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4798      	blx	r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e014      	b.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	331c      	adds	r3, #28
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 ff75 	bl	8003ba6 <lsm303agr_mag_i2c_interface_set>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e000      	b.n	8002cca <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	080034b1 	.word	0x080034b1
 8002cd8:	08003513 	.word	0x08003513

08002cdc <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	331c      	adds	r3, #28
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fe7c 	bl	80039e8 <lsm303agr_mag_block_data_update_set>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e028      	b.n	8002d4e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	331c      	adds	r3, #28
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fdeb 	bl	80038de <lsm303agr_mag_operating_mode_set>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	e01c      	b.n	8002d4e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	331c      	adds	r3, #28
 8002d18:	2103      	movs	r1, #3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fe05 	bl	800392a <lsm303agr_mag_data_rate_set>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e010      	b.n	8002d4e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	331c      	adds	r3, #28
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 feeb 	bl	8003b0e <lsm303agr_mag_self_test_set>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e004      	b.n	8002d4e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f874 	bl	8002e4c <LSM303AGR_MAG_Disable>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	e004      	b.n	8002d7a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	331c      	adds	r3, #28
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 feaa 	bl	8003aec <lsm303agr_mag_device_id_get>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	e000      	b.n	8002da6 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2232      	movs	r2, #50	; 0x32
 8002de2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002df8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	42c80000 	.word	0x42c80000

08002e0c <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e010      	b.n	8002e44 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	331c      	adds	r3, #28
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fd58 	bl	80038de <lsm303agr_mag_operating_mode_set>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	e004      	b.n	8002e44 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e010      	b.n	8002e84 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	331c      	adds	r3, #28
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd38 	bl	80038de <lsm303agr_mag_operating_mode_set>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
 8002e78:	e004      	b.n	8002e84 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002e9c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	331c      	adds	r3, #28
 8002ebe:	f107 020b 	add.w	r2, r7, #11
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fd57 	bl	8003978 <lsm303agr_mag_data_rate_get>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	e023      	b.n	8002f1e <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d81b      	bhi.n	8002f14 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002efd 	.word	0x08002efd
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002f0d 	.word	0x08002f0d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002ef8:	601a      	str	r2, [r3, #0]
      break;
 8002efa:	e00f      	b.n	8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002f00:	601a      	str	r2, [r3, #0]
      break;
 8002f02:	e00b      	b.n	8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002f08:	601a      	str	r2, [r3, #0]
      break;
 8002f0a:	e007      	b.n	8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002f10:	601a      	str	r2, [r3, #0]
      break;
 8002f12:	e003      	b.n	8002f1c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	60fb      	str	r3, [r7, #12]
      break;
 8002f1a:	bf00      	nop
  }

  return ret;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	41200000 	.word	0x41200000
 8002f2c:	41a00000 	.word	0x41a00000
 8002f30:	42480000 	.word	0x42480000
 8002f34:	42c80000 	.word	0x42c80000

08002f38 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002f44:	edd7 7a00 	vldr	s15, [r7]
 8002f48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	d801      	bhi.n	8002f5a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002f56:	2300      	movs	r3, #0
 8002f58:	e016      	b.n	8002f88 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f5a:	edd7 7a00 	vldr	s15, [r7]
 8002f5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d801      	bhi.n	8002f70 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00b      	b.n	8002f88 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f70:	edd7 7a00 	vldr	s15, [r7]
 8002f74:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002fb0 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d801      	bhi.n	8002f86 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e000      	b.n	8002f88 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f86:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002f88:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	331c      	adds	r3, #28
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fcc9 	bl	800392a <lsm303agr_mag_data_rate_set>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e000      	b.n	8002fa6 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	42480000 	.word	0x42480000

08002fb4 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2232      	movs	r2, #50	; 0x32
 8002fc2:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	f107 0208 	add.w	r2, r7, #8
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fd18 	bl	8003a34 <lsm303agr_magnetic_raw_get>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e00c      	b.n	800302a <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003010:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003018:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003020:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	331c      	adds	r3, #28
 8003040:	f107 0210 	add.w	r2, r7, #16
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fcf4 	bl	8003a34 <lsm303agr_magnetic_raw_get>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e036      	b.n	80030c6 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff14 	bl	8002e8c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003064:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003070:	edd7 7a03 	vldr	s15, [r7, #12]
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307c:	ee17 2a90 	vmov	r2, s15
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003090:	edd7 7a03 	vldr	s15, [r7, #12]
 8003094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309c:	ee17 2a90 	vmov	r2, s15
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80030a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030bc:	ee17 2a90 	vmov	r2, s15
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	331c      	adds	r3, #28
 80030e2:	f107 020b 	add.w	r2, r7, #11
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fb4f 	bl	800378c <lsm303agr_xl_full_scale_get>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e023      	b.n	8003142 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d81b      	bhi.n	8003138 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003119 	.word	0x08003119
 800310c:	08003121 	.word	0x08003121
 8003110:	08003129 	.word	0x08003129
 8003114:	08003131 	.word	0x08003131
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 800311c:	601a      	str	r2, [r3, #0]
      break;
 800311e:	e00f      	b.n	8003140 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003124:	601a      	str	r2, [r3, #0]
      break;
 8003126:	e00b      	b.n	8003140 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 800312c:	601a      	str	r2, [r3, #0]
      break;
 800312e:	e007      	b.n	8003140 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003134:	601a      	str	r2, [r3, #0]
      break;
 8003136:	e003      	b.n	8003140 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
 800313c:	60fb      	str	r3, [r7, #12]
      break;
 800313e:	bf00      	nop
  }

  return ret;
 8003140:	68fb      	ldr	r3, [r7, #12]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	3f7ae148 	.word	0x3f7ae148
 8003150:	3ff9999a 	.word	0x3ff9999a
 8003154:	4079999a 	.word	0x4079999a
 8003158:	413b851f 	.word	0x413b851f

0800315c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	331c      	adds	r3, #28
 800316e:	f107 020b 	add.w	r2, r7, #11
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fb09 	bl	800378c <lsm303agr_xl_full_scale_get>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	e023      	b.n	80031ce <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d81b      	bhi.n	80031c4 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031ad 	.word	0x080031ad
 800319c:	080031b5 	.word	0x080031b5
 80031a0:	080031bd 	.word	0x080031bd
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80031a8:	601a      	str	r2, [r3, #0]
      break;
 80031aa:	e00f      	b.n	80031cc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80031b0:	601a      	str	r2, [r3, #0]
      break;
 80031b2:	e00b      	b.n	80031cc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80031b8:	601a      	str	r2, [r3, #0]
      break;
 80031ba:	e007      	b.n	80031cc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80031c0:	601a      	str	r2, [r3, #0]
      break;
 80031c2:	e003      	b.n	80031cc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	60fb      	str	r3, [r7, #12]
      break;
 80031ca:	bf00      	nop
  }

  return ret;
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	4079999a 	.word	0x4079999a
 80031dc:	40fa3d71 	.word	0x40fa3d71
 80031e0:	417a147b 	.word	0x417a147b
 80031e4:	423b999a 	.word	0x423b999a

080031e8 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	331c      	adds	r3, #28
 80031fa:	f107 020b 	add.w	r2, r7, #11
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fac3 	bl	800378c <lsm303agr_xl_full_scale_get>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e023      	b.n	800325a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d81b      	bhi.n	8003250 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003231 	.word	0x08003231
 8003224:	08003239 	.word	0x08003239
 8003228:	08003241 	.word	0x08003241
 800322c:	08003249 	.word	0x08003249
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003234:	601a      	str	r2, [r3, #0]
      break;
 8003236:	e00f      	b.n	8003258 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 800323c:	601a      	str	r2, [r3, #0]
      break;
 800323e:	e00b      	b.n	8003258 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003244:	601a      	str	r2, [r3, #0]
      break;
 8003246:	e007      	b.n	8003258 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800324c:	601a      	str	r2, [r3, #0]
      break;
 800324e:	e003      	b.n	8003258 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	60fb      	str	r3, [r7, #12]
      break;
 8003256:	bf00      	nop
  }

  return ret;
 8003258:	68fb      	ldr	r3, [r7, #12]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	417a147b 	.word	0x417a147b
 8003268:	41fa147b 	.word	0x41fa147b
 800326c:	427a147b 	.word	0x427a147b
 8003270:	433b947b 	.word	0x433b947b

08003274 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003280:	edd7 7a00 	vldr	s15, [r7]
 8003284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	d801      	bhi.n	8003296 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003292:	2301      	movs	r3, #1
 8003294:	e037      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003296:	edd7 7a00 	vldr	s15, [r7]
 800329a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800329e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d801      	bhi.n	80032ac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e02c      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032ac:	edd7 7a00 	vldr	s15, [r7]
 80032b0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80032b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	d801      	bhi.n	80032c2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80032be:	2303      	movs	r3, #3
 80032c0:	e021      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032c2:	edd7 7a00 	vldr	s15, [r7]
 80032c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800332c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	d801      	bhi.n	80032d8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e016      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032d8:	edd7 7a00 	vldr	s15, [r7]
 80032dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003330 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d801      	bhi.n	80032ee <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e00b      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032ee:	edd7 7a00 	vldr	s15, [r7]
 80032f2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003334 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d801      	bhi.n	8003304 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003300:	2306      	movs	r3, #6
 8003302:	e000      	b.n	8003306 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003304:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003306:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	331c      	adds	r3, #28
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f993 	bl	800363c <lsm303agr_xl_data_rate_set>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	e000      	b.n	8003324 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	42480000 	.word	0x42480000
 8003330:	42c80000 	.word	0x42c80000
 8003334:	43480000 	.word	0x43480000

08003338 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003344:	edd7 7a00 	vldr	s15, [r7]
 8003348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800334c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d801      	bhi.n	800335a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003356:	2301      	movs	r3, #1
 8003358:	e037      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800335a:	edd7 7a00 	vldr	s15, [r7]
 800335e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d801      	bhi.n	8003370 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800336c:	2302      	movs	r3, #2
 800336e:	e02c      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003370:	edd7 7a00 	vldr	s15, [r7]
 8003374:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d801      	bhi.n	8003386 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003382:	2303      	movs	r3, #3
 8003384:	e021      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003386:	edd7 7a00 	vldr	s15, [r7]
 800338a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80033e0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	d801      	bhi.n	800339c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003398:	2304      	movs	r3, #4
 800339a:	e016      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800339c:	edd7 7a00 	vldr	s15, [r7]
 80033a0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80033e4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80033a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	d801      	bhi.n	80033b2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80033ae:	2305      	movs	r3, #5
 80033b0:	e00b      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033b2:	edd7 7a00 	vldr	s15, [r7]
 80033b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80033e8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80033ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	d801      	bhi.n	80033c8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80033c4:	2306      	movs	r3, #6
 80033c6:	e000      	b.n	80033ca <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033c8:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	42480000 	.word	0x42480000
 80033e4:	42c80000 	.word	0x42c80000
 80033e8:	43480000 	.word	0x43480000

080033ec <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	72fb      	strb	r3, [r7, #11]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	695c      	ldr	r4, [r3, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	7b1b      	ldrb	r3, [r3, #12]
 8003414:	b298      	uxth	r0, r3
 8003416:	7afb      	ldrb	r3, [r7, #11]
 8003418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800341c:	b2db      	uxtb	r3, r3
 800341e:	b299      	uxth	r1, r3
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	47a0      	blx	r4
 8003426:	4603      	mov	r3, r0
 8003428:	e00d      	b.n	8003446 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	695c      	ldr	r4, [r3, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	7b1b      	ldrb	r3, [r3, #12]
 8003432:	b298      	uxth	r0, r3
 8003434:	7afb      	ldrb	r3, [r7, #11]
 8003436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b299      	uxth	r1, r3
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	47a0      	blx	r4
 8003444:	4603      	mov	r3, r0
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}

0800344e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800344e:	b590      	push	{r4, r7, lr}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	461a      	mov	r2, r3
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
 800345e:	4613      	mov	r3, r2
 8003460:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	691c      	ldr	r4, [r3, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	7b1b      	ldrb	r3, [r3, #12]
 8003476:	b298      	uxth	r0, r3
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800347e:	b2db      	uxtb	r3, r3
 8003480:	b299      	uxth	r1, r3
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	47a0      	blx	r4
 8003488:	4603      	mov	r3, r0
 800348a:	e00d      	b.n	80034a8 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	691c      	ldr	r4, [r3, #16]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	7b1b      	ldrb	r3, [r3, #12]
 8003494:	b298      	uxth	r0, r3
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b299      	uxth	r1, r3
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	47a0      	blx	r4
 80034a6:	4603      	mov	r3, r0
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}

080034b0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	461a      	mov	r2, r3
 80034bc:	460b      	mov	r3, r1
 80034be:	72fb      	strb	r3, [r7, #11]
 80034c0:	4613      	mov	r3, r2
 80034c2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10e      	bne.n	80034ee <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	695c      	ldr	r4, [r3, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	7b1b      	ldrb	r3, [r3, #12]
 80034d8:	b298      	uxth	r0, r3
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	b299      	uxth	r1, r3
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	47a0      	blx	r4
 80034ea:	4603      	mov	r3, r0
 80034ec:	e00d      	b.n	800350a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	695c      	ldr	r4, [r3, #20]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	7b1b      	ldrb	r3, [r3, #12]
 80034f6:	b298      	uxth	r0, r3
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b299      	uxth	r1, r3
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	47a0      	blx	r4
 8003508:	4603      	mov	r3, r0
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003512:	b590      	push	{r4, r7, lr}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	461a      	mov	r2, r3
 800351e:	460b      	mov	r3, r1
 8003520:	72fb      	strb	r3, [r7, #11]
 8003522:	4613      	mov	r3, r2
 8003524:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	691c      	ldr	r4, [r3, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	7b1b      	ldrb	r3, [r3, #12]
 800353a:	b298      	uxth	r0, r3
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003542:	b2db      	uxtb	r3, r3
 8003544:	b299      	uxth	r1, r3
 8003546:	893b      	ldrh	r3, [r7, #8]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	47a0      	blx	r4
 800354c:	4603      	mov	r3, r0
 800354e:	e00d      	b.n	800356c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	691c      	ldr	r4, [r3, #16]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	7b1b      	ldrb	r3, [r3, #12]
 8003558:	b298      	uxth	r0, r3
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	b2db      	uxtb	r3, r3
 8003562:	b299      	uxth	r1, r3
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	47a0      	blx	r4
 800356a:	4603      	mov	r3, r0
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	460b      	mov	r3, r1
 8003582:	72fb      	strb	r3, [r7, #11]
 8003584:	4613      	mov	r3, r2
 8003586:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685c      	ldr	r4, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	7af9      	ldrb	r1, [r7, #11]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	47a0      	blx	r4
 8003598:	6178      	str	r0, [r7, #20]
  return ret;
 800359a:	697b      	ldr	r3, [r7, #20]
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	460b      	mov	r3, r1
 80035b2:	72fb      	strb	r3, [r7, #11]
 80035b4:	4613      	mov	r3, r2
 80035b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681c      	ldr	r4, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6898      	ldr	r0, [r3, #8]
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	7af9      	ldrb	r1, [r7, #11]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	47a0      	blx	r4
 80035c8:	6178      	str	r0, [r7, #20]
  return ret;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80035de:	f107 020c 	add.w	r2, r7, #12
 80035e2:	2301      	movs	r3, #1
 80035e4:	2120      	movs	r1, #32
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffc4 	bl	8003574 <lsm303agr_read_reg>
 80035ec:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035f4:	f107 0210 	add.w	r2, r7, #16
 80035f8:	2301      	movs	r3, #1
 80035fa:	2123      	movs	r1, #35	; 0x23
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ffb9 	bl	8003574 <lsm303agr_read_reg>
 8003602:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003604:	7b3b      	ldrb	r3, [r7, #12]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e00c      	b.n	8003632 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003618:	7c3b      	ldrb	r3, [r7, #16]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e002      	b.n	8003632 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003632:	697b      	ldr	r3, [r7, #20]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003648:	f107 0208 	add.w	r2, r7, #8
 800364c:	2301      	movs	r3, #1
 800364e:	2120      	movs	r1, #32
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff8f 	bl	8003574 <lsm303agr_read_reg>
 8003656:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	7a3b      	ldrb	r3, [r7, #8]
 8003668:	f362 1307 	bfi	r3, r2, #4, #4
 800366c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800366e:	f107 0208 	add.w	r2, r7, #8
 8003672:	2301      	movs	r3, #1
 8003674:	2120      	movs	r1, #32
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff94 	bl	80035a4 <lsm303agr_write_reg>
 800367c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003692:	f107 0208 	add.w	r2, r7, #8
 8003696:	2301      	movs	r3, #1
 8003698:	2120      	movs	r1, #32
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ff6a 	bl	8003574 <lsm303agr_read_reg>
 80036a0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80036a2:	7a3b      	ldrb	r3, [r7, #8]
 80036a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d83e      	bhi.n	800372c <lsm303agr_xl_data_rate_get+0xa4>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <lsm303agr_xl_data_rate_get+0x2c>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036dd 	.word	0x080036dd
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080036fd 	.word	0x080036fd
 80036c8:	08003705 	.word	0x08003705
 80036cc:	0800370d 	.word	0x0800370d
 80036d0:	08003715 	.word	0x08003715
 80036d4:	0800371d 	.word	0x0800371d
 80036d8:	08003725 	.word	0x08003725
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
      break;
 80036e2:	e027      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
      break;
 80036ea:	e023      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	701a      	strb	r2, [r3, #0]
      break;
 80036f2:	e01f      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2203      	movs	r2, #3
 80036f8:	701a      	strb	r2, [r3, #0]
      break;
 80036fa:	e01b      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
      break;
 8003702:	e017      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2205      	movs	r2, #5
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e013      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2206      	movs	r2, #6
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	e00f      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2207      	movs	r2, #7
 8003718:	701a      	strb	r2, [r3, #0]
      break;
 800371a:	e00b      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2208      	movs	r2, #8
 8003720:	701a      	strb	r2, [r3, #0]
      break;
 8003722:	e007      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2209      	movs	r2, #9
 8003728:	701a      	strb	r2, [r3, #0]
      break;
 800372a:	e003      	b.n	8003734 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	bf00      	nop
  }

  return ret;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop

08003740 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	2301      	movs	r3, #1
 8003752:	2123      	movs	r1, #35	; 0x23
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff0d 	bl	8003574 <lsm303agr_read_reg>
 800375a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	b2da      	uxtb	r2, r3
 800376a:	7a3b      	ldrb	r3, [r7, #8]
 800376c:	f362 1305 	bfi	r3, r2, #4, #2
 8003770:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003772:	f107 0208 	add.w	r2, r7, #8
 8003776:	2301      	movs	r3, #1
 8003778:	2123      	movs	r1, #35	; 0x23
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff12 	bl	80035a4 <lsm303agr_write_reg>
 8003780:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003796:	f107 0208 	add.w	r2, r7, #8
 800379a:	2301      	movs	r3, #1
 800379c:	2123      	movs	r1, #35	; 0x23
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fee8 	bl	8003574 <lsm303agr_read_reg>
 80037a4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 80037a6:	7a3b      	ldrb	r3, [r7, #8]
 80037a8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d81a      	bhi.n	80037e8 <lsm303agr_xl_full_scale_get+0x5c>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <lsm303agr_xl_full_scale_get+0x2c>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037d1 	.word	0x080037d1
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037e1 	.word	0x080037e1
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
      break;
 80037ce:	e00f      	b.n	80037f0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	e00b      	b.n	80037f0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
      break;
 80037de:	e007      	b.n	80037f0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2203      	movs	r2, #3
 80037e4:	701a      	strb	r2, [r3, #0]
      break;
 80037e6:	e003      	b.n	80037f0 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
      break;
 80037ee:	bf00      	nop
  }

  return ret;
 80037f0:	68fb      	ldr	r3, [r7, #12]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop

080037fc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003808:	f107 0208 	add.w	r2, r7, #8
 800380c:	2301      	movs	r3, #1
 800380e:	2123      	movs	r1, #35	; 0x23
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff feaf 	bl	8003574 <lsm303agr_read_reg>
 8003816:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	7a3b      	ldrb	r3, [r7, #8]
 8003828:	f362 13c7 	bfi	r3, r2, #7, #1
 800382c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800382e:	f107 0208 	add.w	r2, r7, #8
 8003832:	2301      	movs	r3, #1
 8003834:	2123      	movs	r1, #35	; 0x23
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff feb4 	bl	80035a4 <lsm303agr_write_reg>
 800383c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003852:	f107 020c 	add.w	r2, r7, #12
 8003856:	2306      	movs	r3, #6
 8003858:	2128      	movs	r1, #40	; 0x28
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fe8a 	bl	8003574 <lsm303agr_read_reg>
 8003860:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	b21a      	sxth	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003870:	b29b      	uxth	r3, r3
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	b29a      	uxth	r2, r3
 8003876:	7b3b      	ldrb	r3, [r7, #12]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4413      	add	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	b21a      	sxth	r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3302      	adds	r3, #2
 800388a:	b212      	sxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	3302      	adds	r3, #2
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	b29b      	uxth	r3, r3
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	b29a      	uxth	r2, r3
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	3302      	adds	r3, #2
 80038a8:	b212      	sxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80038ac:	7c7a      	ldrb	r2, [r7, #17]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	3304      	adds	r3, #4
 80038b2:	b212      	sxth	r2, r2
 80038b4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	3304      	adds	r3, #4
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	7c3b      	ldrb	r3, [r7, #16]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	3304      	adds	r3, #4
 80038d0:	b212      	sxth	r2, r2
 80038d2:	801a      	strh	r2, [r3, #0]
  return ret;
 80038d4:	697b      	ldr	r3, [r7, #20]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80038ea:	f107 0208 	add.w	r2, r7, #8
 80038ee:	2301      	movs	r3, #1
 80038f0:	2160      	movs	r1, #96	; 0x60
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fe3e 	bl	8003574 <lsm303agr_read_reg>
 80038f8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	b2da      	uxtb	r2, r3
 8003908:	7a3b      	ldrb	r3, [r7, #8]
 800390a:	f362 0301 	bfi	r3, r2, #0, #2
 800390e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003910:	f107 0208 	add.w	r2, r7, #8
 8003914:	2301      	movs	r3, #1
 8003916:	2160      	movs	r1, #96	; 0x60
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe43 	bl	80035a4 <lsm303agr_write_reg>
 800391e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003920:	68fb      	ldr	r3, [r7, #12]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003936:	f107 0208 	add.w	r2, r7, #8
 800393a:	2301      	movs	r3, #1
 800393c:	2160      	movs	r1, #96	; 0x60
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fe18 	bl	8003574 <lsm303agr_read_reg>
 8003944:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10f      	bne.n	800396c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	7a3b      	ldrb	r3, [r7, #8]
 8003956:	f362 0383 	bfi	r3, r2, #2, #2
 800395a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800395c:	f107 0208 	add.w	r2, r7, #8
 8003960:	2301      	movs	r3, #1
 8003962:	2160      	movs	r1, #96	; 0x60
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe1d 	bl	80035a4 <lsm303agr_write_reg>
 800396a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003982:	f107 0208 	add.w	r2, r7, #8
 8003986:	2301      	movs	r3, #1
 8003988:	2160      	movs	r1, #96	; 0x60
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fdf2 	bl	8003574 <lsm303agr_read_reg>
 8003990:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003992:	7a3b      	ldrb	r3, [r7, #8]
 8003994:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b03      	cmp	r3, #3
 800399c:	d81a      	bhi.n	80039d4 <lsm303agr_mag_data_rate_get+0x5c>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <lsm303agr_mag_data_rate_get+0x2c>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039bd 	.word	0x080039bd
 80039ac:	080039c5 	.word	0x080039c5
 80039b0:	080039cd 	.word	0x080039cd
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
      break;
 80039ba:	e00f      	b.n	80039dc <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
      break;
 80039c2:	e00b      	b.n	80039dc <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
      break;
 80039ca:	e007      	b.n	80039dc <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2203      	movs	r2, #3
 80039d0:	701a      	strb	r2, [r3, #0]
      break;
 80039d2:	e003      	b.n	80039dc <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
      break;
 80039da:	bf00      	nop
  }

  return ret;
 80039dc:	68fb      	ldr	r3, [r7, #12]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop

080039e8 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80039f4:	f107 0208 	add.w	r2, r7, #8
 80039f8:	2301      	movs	r3, #1
 80039fa:	2162      	movs	r1, #98	; 0x62
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fdb9 	bl	8003574 <lsm303agr_read_reg>
 8003a02:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	7a3b      	ldrb	r3, [r7, #8]
 8003a14:	f362 1304 	bfi	r3, r2, #4, #1
 8003a18:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003a1a:	f107 0208 	add.w	r2, r7, #8
 8003a1e:	2301      	movs	r3, #1
 8003a20:	2162      	movs	r1, #98	; 0x62
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fdbe 	bl	80035a4 <lsm303agr_write_reg>
 8003a28:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003a3e:	f107 020c 	add.w	r2, r7, #12
 8003a42:	2306      	movs	r3, #6
 8003a44:	2168      	movs	r1, #104	; 0x68
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fd94 	bl	8003574 <lsm303agr_read_reg>
 8003a4c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003a4e:	7b7b      	ldrb	r3, [r7, #13]
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	7b3b      	ldrb	r3, [r7, #12]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	3302      	adds	r3, #2
 8003a76:	b212      	sxth	r2, r2
 8003a78:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3302      	adds	r3, #2
 8003a94:	b212      	sxth	r2, r2
 8003a96:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a98:	7c7a      	ldrb	r2, [r7, #17]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	b212      	sxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	7c3b      	ldrb	r3, [r7, #16]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	3304      	adds	r3, #4
 8003abc:	b212      	sxth	r2, r2
 8003abe:	801a      	strh	r2, [r3, #0]
  return ret;
 8003ac0:	697b      	ldr	r3, [r7, #20]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	210f      	movs	r1, #15
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fd4a 	bl	8003574 <lsm303agr_read_reg>
 8003ae0:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003af6:	2301      	movs	r3, #1
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	214f      	movs	r1, #79	; 0x4f
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fd39 	bl	8003574 <lsm303agr_read_reg>
 8003b02:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b1a:	f107 0208 	add.w	r2, r7, #8
 8003b1e:	2301      	movs	r3, #1
 8003b20:	2162      	movs	r1, #98	; 0x62
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fd26 	bl	8003574 <lsm303agr_read_reg>
 8003b28:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10f      	bne.n	8003b50 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	7a3b      	ldrb	r3, [r7, #8]
 8003b3a:	f362 0341 	bfi	r3, r2, #1, #1
 8003b3e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b40:	f107 0208 	add.w	r2, r7, #8
 8003b44:	2301      	movs	r3, #1
 8003b46:	2162      	movs	r1, #98	; 0x62
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fd2b 	bl	80035a4 <lsm303agr_write_reg>
 8003b4e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003b50:	68fb      	ldr	r3, [r7, #12]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003b66:	f107 0208 	add.w	r2, r7, #8
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	212e      	movs	r1, #46	; 0x2e
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fd00 	bl	8003574 <lsm303agr_read_reg>
 8003b74:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10f      	bne.n	8003b9c <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	7a3b      	ldrb	r3, [r7, #8]
 8003b86:	f362 1387 	bfi	r3, r2, #6, #2
 8003b8a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003b8c:	f107 0208 	add.w	r2, r7, #8
 8003b90:	2301      	movs	r3, #1
 8003b92:	212e      	movs	r1, #46	; 0x2e
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fd05 	bl	80035a4 <lsm303agr_write_reg>
 8003b9a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003bb2:	f107 0208 	add.w	r2, r7, #8
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	2162      	movs	r1, #98	; 0x62
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fcda 	bl	8003574 <lsm303agr_read_reg>
 8003bc0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10f      	bne.n	8003be8 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	7a3b      	ldrb	r3, [r7, #8]
 8003bd2:	f362 1345 	bfi	r3, r2, #5, #1
 8003bd6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003bd8:	f107 0208 	add.w	r2, r7, #8
 8003bdc:	2301      	movs	r3, #1
 8003bde:	2162      	movs	r1, #98	; 0x62
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fcdf 	bl	80035a4 <lsm303agr_write_reg>
 8003be6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003be8:	68fb      	ldr	r3, [r7, #12]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e04d      	b.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	7b1a      	ldrb	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <LSM6DSL_RegisterBusIO+0xc4>)
 8003c4c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <LSM6DSL_RegisterBusIO+0xc8>)
 8003c52:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e020      	b.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4798      	blx	r3
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e016      	b.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d112      	bne.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10d      	bne.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003c90:	230c      	movs	r3, #12
 8003c92:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	461a      	mov	r2, r3
 8003c98:	2112      	movs	r1, #18
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fd2d 	bl	80046fa <LSM6DSL_Write_Reg>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08004b69 	.word	0x08004b69
 8003cbc:	08004b9f 	.word	0x08004b9f

08003cc0 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	331c      	adds	r3, #28
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa59 	bl	8005186 <lsm6dsl_auto_increment_set>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	e054      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	331c      	adds	r3, #28
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f980 	bl	8004fec <lsm6dsl_block_data_update_set>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e048      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	331c      	adds	r3, #28
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 fa67 	bl	80051d2 <lsm6dsl_fifo_mode_set>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e03c      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2204      	movs	r2, #4
 8003d14:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	331c      	adds	r3, #28
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ffe6 	bl	8004cf0 <lsm6dsl_xl_data_rate_set>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e02c      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	331c      	adds	r3, #28
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 ff7c 	bl	8004c34 <lsm6dsl_xl_full_scale_set>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	e020      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	331c      	adds	r3, #28
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f8c0 	bl	8004edc <lsm6dsl_gy_data_rate_set>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	e010      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	331c      	adds	r3, #28
 8003d6c:	2106      	movs	r1, #6
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f84c 	bl	8004e0c <lsm6dsl_gy_full_scale_set>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	e004      	b.n	8003d8a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f888 	bl	8003eb0 <LSM6DSL_ACC_Disable>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e015      	b.n	8003dd8 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa9a 	bl	80042e6 <LSM6DSL_GYRO_Disable>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbc:	e00c      	b.n	8003dd8 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	331c      	adds	r3, #28
 8003dee:	6839      	ldr	r1, [r7, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f9b7 	bl	8005164 <lsm6dsl_device_id_get>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003e00:	e000      	b.n	8003e04 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e34:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <LSM6DSL_GetCapabilities+0x58>)
 8003e46:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <LSM6DSL_GetCapabilities+0x58>)
 8003e4c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	45d02000 	.word	0x45d02000

08003e68 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e014      	b.n	8003ea8 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f103 021c 	add.w	r2, r3, #28
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 ff2f 	bl	8004cf0 <lsm6dsl_xl_data_rate_set>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e004      	b.n	8003ea8 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e01f      	b.n	8003f06 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f103 021c 	add.w	r2, r3, #28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	332b      	adds	r3, #43	; 0x2b
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 ff32 	bl	8004d3c <lsm6dsl_xl_data_rate_get>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e010      	b.n	8003f06 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	331c      	adds	r3, #28
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 ff00 	bl	8004cf0 <lsm6dsl_xl_data_rate_set>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e004      	b.n	8003f06 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	331c      	adds	r3, #28
 8003f22:	f107 020b 	add.w	r2, r7, #11
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fea9 	bl	8004c80 <lsm6dsl_xl_full_scale_get>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e023      	b.n	8003f82 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d81b      	bhi.n	8003f78 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f69 	.word	0x08003f69
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003f5c:	601a      	str	r2, [r3, #0]
      break;
 8003f5e:	e00f      	b.n	8003f80 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003f64:	601a      	str	r2, [r3, #0]
      break;
 8003f66:	e00b      	b.n	8003f80 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003f6c:	601a      	str	r2, [r3, #0]
      break;
 8003f6e:	e007      	b.n	8003f80 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003f74:	601a      	str	r2, [r3, #0]
      break;
 8003f76:	e003      	b.n	8003f80 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	60fb      	str	r3, [r7, #12]
      break;
 8003f7e:	bf00      	nop
  }

  return ret;
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	3d79db23 	.word	0x3d79db23
 8003f90:	3df9db23 	.word	0x3df9db23
 8003f94:	3e79db23 	.word	0x3e79db23
 8003f98:	3ef9db23 	.word	0x3ef9db23

08003f9c <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	331c      	adds	r3, #28
 8003fae:	f107 020b 	add.w	r2, r7, #11
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fec1 	bl	8004d3c <lsm6dsl_xl_data_rate_get>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e054      	b.n	8004070 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	2b0b      	cmp	r3, #11
 8003fca:	d84c      	bhi.n	8004066 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004017 	.word	0x08004017
 8003fdc:	0800401f 	.word	0x0800401f
 8003fe0:	08004027 	.word	0x08004027
 8003fe4:	0800402f 	.word	0x0800402f
 8003fe8:	08004037 	.word	0x08004037
 8003fec:	0800403f 	.word	0x0800403f
 8003ff0:	08004047 	.word	0x08004047
 8003ff4:	0800404f 	.word	0x0800404f
 8003ff8:	08004057 	.word	0x08004057
 8003ffc:	0800405f 	.word	0x0800405f
 8004000:	0800400f 	.word	0x0800400f
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
      break;
 800400c:	e02f      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004012:	601a      	str	r2, [r3, #0]
      break;
 8004014:	e02b      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800401a:	601a      	str	r2, [r3, #0]
      break;
 800401c:	e027      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	4a17      	ldr	r2, [pc, #92]	; (8004080 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004022:	601a      	str	r2, [r3, #0]
      break;
 8004024:	e023      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4a16      	ldr	r2, [pc, #88]	; (8004084 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800402a:	601a      	str	r2, [r3, #0]
      break;
 800402c:	e01f      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004032:	601a      	str	r2, [r3, #0]
      break;
 8004034:	e01b      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800403a:	601a      	str	r2, [r3, #0]
      break;
 800403c:	e017      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004042:	601a      	str	r2, [r3, #0]
      break;
 8004044:	e013      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4a12      	ldr	r2, [pc, #72]	; (8004094 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800404a:	601a      	str	r2, [r3, #0]
      break;
 800404c:	e00f      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4a11      	ldr	r2, [pc, #68]	; (8004098 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004052:	601a      	str	r2, [r3, #0]
      break;
 8004054:	e00b      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800405a:	601a      	str	r2, [r3, #0]
      break;
 800405c:	e007      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004062:	601a      	str	r2, [r3, #0]
      break;
 8004064:	e003      	b.n	800406e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	60fb      	str	r3, [r7, #12]
      break;
 800406c:	bf00      	nop
  }

  return ret;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	3fcccccd 	.word	0x3fcccccd
 800407c:	41480000 	.word	0x41480000
 8004080:	41d00000 	.word	0x41d00000
 8004084:	42500000 	.word	0x42500000
 8004088:	42d00000 	.word	0x42d00000
 800408c:	43500000 	.word	0x43500000
 8004090:	43d00000 	.word	0x43d00000
 8004094:	44504000 	.word	0x44504000
 8004098:	44cf8000 	.word	0x44cf8000
 800409c:	45502000 	.word	0x45502000
 80040a0:	45d02000 	.word	0x45d02000

080040a4 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d106      	bne.n	80040c8 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80040ba:	ed97 0a00 	vldr	s0, [r7]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb36 	bl	8004730 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	e005      	b.n	80040d4 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80040c8:	ed97 0a00 	vldr	s0, [r7]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fbbb 	bl	8004848 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80040d2:	4603      	mov	r3, r0
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	331c      	adds	r3, #28
 80040ee:	f107 020b 	add.w	r2, r7, #11
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fdc3 	bl	8004c80 <lsm6dsl_xl_full_scale_get>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	e023      	b.n	800414e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d81b      	bhi.n	8004144 <LSM6DSL_ACC_GetFullScale+0x68>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <LSM6DSL_ACC_GetFullScale+0x38>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004125 	.word	0x08004125
 8004118:	0800413d 	.word	0x0800413d
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004135 	.word	0x08004135
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2202      	movs	r2, #2
 8004128:	601a      	str	r2, [r3, #0]
      break;
 800412a:	e00f      	b.n	800414c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2204      	movs	r2, #4
 8004130:	601a      	str	r2, [r3, #0]
      break;
 8004132:	e00b      	b.n	800414c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2208      	movs	r2, #8
 8004138:	601a      	str	r2, [r3, #0]
      break;
 800413a:	e007      	b.n	800414c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2210      	movs	r2, #16
 8004140:	601a      	str	r2, [r3, #0]
      break;
 8004142:	e003      	b.n	800414c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	60fb      	str	r3, [r7, #12]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	dd0b      	ble.n	8004180 <LSM6DSL_ACC_SetFullScale+0x28>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b04      	cmp	r3, #4
 800416c:	dd06      	ble.n	800417c <LSM6DSL_ACC_SetFullScale+0x24>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	dc01      	bgt.n	8004178 <LSM6DSL_ACC_SetFullScale+0x20>
 8004174:	2303      	movs	r3, #3
 8004176:	e004      	b.n	8004182 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004178:	2301      	movs	r3, #1
 800417a:	e002      	b.n	8004182 <LSM6DSL_ACC_SetFullScale+0x2a>
 800417c:	2302      	movs	r3, #2
 800417e:	e000      	b.n	8004182 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004180:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004182:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	331c      	adds	r3, #28
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd51 	bl	8004c34 <lsm6dsl_xl_full_scale_set>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	e000      	b.n	80041a0 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	331c      	adds	r3, #28
 80041b6:	f107 0208 	add.w	r2, r7, #8
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ff86 	bl	80050ce <lsm6dsl_acceleration_raw_get>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e00c      	b.n	80041e8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	331c      	adds	r3, #28
 8004204:	f107 0210 	add.w	r2, r7, #16
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff5f 	bl	80050ce <lsm6dsl_acceleration_raw_get>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	e03c      	b.n	8004296 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800421c:	f107 030c 	add.w	r3, r7, #12
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe74 	bl	8003f10 <LSM6DSL_ACC_GetSensitivity>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295
 8004232:	e030      	b.n	8004296 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004234:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004240:	edd7 7a03 	vldr	s15, [r7, #12]
 8004244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424c:	ee17 2a90 	vmov	r2, s15
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004254:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004260:	edd7 7a03 	vldr	s15, [r7, #12]
 8004264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426c:	ee17 2a90 	vmov	r2, s15
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004274:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004280:	edd7 7a03 	vldr	s15, [r7, #12]
 8004284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800428c:	ee17 2a90 	vmov	r2, s15
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e014      	b.n	80042de <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 021c 	add.w	r2, r3, #28
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fe0a 	bl	8004edc <lsm6dsl_gy_data_rate_set>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e004      	b.n	80042de <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e01f      	b.n	800433c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f103 021c 	add.w	r2, r3, #28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	332c      	adds	r3, #44	; 0x2c
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 fe0d 	bl	8004f28 <lsm6dsl_gy_data_rate_get>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	e010      	b.n	800433c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	331c      	adds	r3, #28
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fddb 	bl	8004edc <lsm6dsl_gy_data_rate_set>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e004      	b.n	800433c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	331c      	adds	r3, #28
 8004356:	f107 020b 	add.w	r2, r7, #11
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd7b 	bl	8004e58 <lsm6dsl_gy_full_scale_get>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	e02d      	b.n	80043ca <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d825      	bhi.n	80043c0 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043a1 	.word	0x080043a1
 8004380:	08004399 	.word	0x08004399
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043b9 	.word	0x080043b9
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800439c:	601a      	str	r2, [r3, #0]
      break;
 800439e:	e013      	b.n	80043c8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80043a4:	601a      	str	r2, [r3, #0]
      break;
 80043a6:	e00f      	b.n	80043c8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80043ac:	601a      	str	r2, [r3, #0]
      break;
 80043ae:	e00b      	b.n	80043c8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80043b4:	601a      	str	r2, [r3, #0]
      break;
 80043b6:	e007      	b.n	80043c8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80043bc:	601a      	str	r2, [r3, #0]
      break;
 80043be:	e003      	b.n	80043c8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	60fb      	str	r3, [r7, #12]
      break;
 80043c6:	bf00      	nop
  }

  return ret;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	408c0000 	.word	0x408c0000
 80043d8:	410c0000 	.word	0x410c0000
 80043dc:	418c0000 	.word	0x418c0000
 80043e0:	420c0000 	.word	0x420c0000
 80043e4:	428c0000 	.word	0x428c0000

080043e8 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	331c      	adds	r3, #28
 80043fa:	f107 020b 	add.w	r2, r7, #11
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd91 	bl	8004f28 <lsm6dsl_gy_data_rate_get>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
 8004410:	e04e      	b.n	80044b0 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	2b0a      	cmp	r3, #10
 8004416:	d846      	bhi.n	80044a6 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	0800444d 	.word	0x0800444d
 8004424:	08004457 	.word	0x08004457
 8004428:	0800445f 	.word	0x0800445f
 800442c:	08004467 	.word	0x08004467
 8004430:	0800446f 	.word	0x0800446f
 8004434:	08004477 	.word	0x08004477
 8004438:	0800447f 	.word	0x0800447f
 800443c:	08004487 	.word	0x08004487
 8004440:	0800448f 	.word	0x0800448f
 8004444:	08004497 	.word	0x08004497
 8004448:	0800449f 	.word	0x0800449f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	e02b      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800445a:	601a      	str	r2, [r3, #0]
      break;
 800445c:	e027      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	4a16      	ldr	r2, [pc, #88]	; (80044bc <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e023      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800446a:	601a      	str	r2, [r3, #0]
      break;
 800446c:	e01f      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004472:	601a      	str	r2, [r3, #0]
      break;
 8004474:	e01b      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800447a:	601a      	str	r2, [r3, #0]
      break;
 800447c:	e017      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004482:	601a      	str	r2, [r3, #0]
      break;
 8004484:	e013      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800448a:	601a      	str	r2, [r3, #0]
      break;
 800448c:	e00f      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e00b      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e007      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80044a2:	601a      	str	r2, [r3, #0]
      break;
 80044a4:	e003      	b.n	80044ae <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	60fb      	str	r3, [r7, #12]
      break;
 80044ac:	bf00      	nop
  }

  return ret;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	41480000 	.word	0x41480000
 80044bc:	41d00000 	.word	0x41d00000
 80044c0:	42500000 	.word	0x42500000
 80044c4:	42d00000 	.word	0x42d00000
 80044c8:	43500000 	.word	0x43500000
 80044cc:	43d00000 	.word	0x43d00000
 80044d0:	44504000 	.word	0x44504000
 80044d4:	44cf8000 	.word	0x44cf8000
 80044d8:	45502000 	.word	0x45502000
 80044dc:	45d02000 	.word	0x45d02000

080044e0 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d106      	bne.n	8004504 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80044f6:	ed97 0a00 	vldr	s0, [r7]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fa26 	bl	800494c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004500:	4603      	mov	r3, r0
 8004502:	e005      	b.n	8004510 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004504:	ed97 0a00 	vldr	s0, [r7]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 faab 	bl	8004a64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800450e:	4603      	mov	r3, r0
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	331c      	adds	r3, #28
 800452a:	f107 020b 	add.w	r2, r7, #11
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fc91 	bl	8004e58 <lsm6dsl_gy_full_scale_get>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	e030      	b.n	80045a4 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d828      	bhi.n	800459a <LSM6DSL_GYRO_GetFullScale+0x82>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004575 	.word	0x08004575
 8004554:	0800456d 	.word	0x0800456d
 8004558:	0800457d 	.word	0x0800457d
 800455c:	0800459b 	.word	0x0800459b
 8004560:	08004587 	.word	0x08004587
 8004564:	0800459b 	.word	0x0800459b
 8004568:	08004591 	.word	0x08004591
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	227d      	movs	r2, #125	; 0x7d
 8004570:	601a      	str	r2, [r3, #0]
      break;
 8004572:	e016      	b.n	80045a2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	22fa      	movs	r2, #250	; 0xfa
 8004578:	601a      	str	r2, [r3, #0]
      break;
 800457a:	e012      	b.n	80045a2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004582:	601a      	str	r2, [r3, #0]
      break;
 8004584:	e00d      	b.n	80045a2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800458c:	601a      	str	r2, [r3, #0]
      break;
 800458e:	e008      	b.n	80045a2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004596:	601a      	str	r2, [r3, #0]
      break;
 8004598:	e003      	b.n	80045a2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	60fb      	str	r3, [r7, #12]
      break;
 80045a0:	bf00      	nop
  }

  return ret;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b7d      	cmp	r3, #125	; 0x7d
 80045ba:	dd12      	ble.n	80045e2 <LSM6DSL_GYRO_SetFullScale+0x36>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2bfa      	cmp	r3, #250	; 0xfa
 80045c0:	dd0d      	ble.n	80045de <LSM6DSL_GYRO_SetFullScale+0x32>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045c8:	dd07      	ble.n	80045da <LSM6DSL_GYRO_SetFullScale+0x2e>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d0:	dc01      	bgt.n	80045d6 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80045d2:	2304      	movs	r3, #4
 80045d4:	e006      	b.n	80045e4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045d6:	2306      	movs	r3, #6
 80045d8:	e004      	b.n	80045e4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045da:	2302      	movs	r3, #2
 80045dc:	e002      	b.n	80045e4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045e2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80045e4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	331c      	adds	r3, #28
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fc0c 	bl	8004e0c <lsm6dsl_gy_full_scale_set>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	e000      	b.n	8004602 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	331c      	adds	r3, #28
 8004618:	f107 0208 	add.w	r2, r7, #8
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd0a 	bl	8005038 <lsm6dsl_angular_rate_raw_get>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e00c      	b.n	800464a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004630:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004638:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004640:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	331c      	adds	r3, #28
 8004660:	f107 0210 	add.w	r2, r7, #16
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fce6 	bl	8005038 <lsm6dsl_angular_rate_raw_get>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	e03c      	b.n	80046f2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe60 	bl	8004344 <LSM6DSL_GYRO_GetSensitivity>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	e030      	b.n	80046f2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004690:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800469c:	edd7 7a03 	vldr	s15, [r7, #12]
 80046a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a8:	ee17 2a90 	vmov	r2, s15
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80046b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80046c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046c8:	ee17 2a90 	vmov	r2, s15
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80046d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e8:	ee17 2a90 	vmov	r2, s15
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	70fb      	strb	r3, [r7, #3]
 8004706:	4613      	mov	r3, r2
 8004708:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f103 001c 	add.w	r0, r3, #28
 8004710:	1cba      	adds	r2, r7, #2
 8004712:	78f9      	ldrb	r1, [r7, #3]
 8004714:	2301      	movs	r3, #1
 8004716:	f000 fa75 	bl	8004c04 <lsm6dsl_write_reg>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	e000      	b.n	8004728 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800473c:	edd7 7a00 	vldr	s15, [r7]
 8004740:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d801      	bhi.n	8004752 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800474e:	2301      	movs	r3, #1
 8004750:	e058      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004752:	edd7 7a00 	vldr	s15, [r7]
 8004756:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800475a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	d801      	bhi.n	8004768 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004764:	2302      	movs	r3, #2
 8004766:	e04d      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004768:	edd7 7a00 	vldr	s15, [r7]
 800476c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800482c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	d801      	bhi.n	800477e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800477a:	2303      	movs	r3, #3
 800477c:	e042      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800477e:	edd7 7a00 	vldr	s15, [r7]
 8004782:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004830 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	d801      	bhi.n	8004794 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004790:	2304      	movs	r3, #4
 8004792:	e037      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004794:	edd7 7a00 	vldr	s15, [r7]
 8004798:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800479c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	d801      	bhi.n	80047aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80047a6:	2305      	movs	r3, #5
 80047a8:	e02c      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047aa:	edd7 7a00 	vldr	s15, [r7]
 80047ae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004838 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80047b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	d801      	bhi.n	80047c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80047bc:	2306      	movs	r3, #6
 80047be:	e021      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047c0:	edd7 7a00 	vldr	s15, [r7]
 80047c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800483c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80047c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d0:	d801      	bhi.n	80047d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e016      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047d6:	edd7 7a00 	vldr	s15, [r7]
 80047da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004840 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80047de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	d801      	bhi.n	80047ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80047e8:	2308      	movs	r3, #8
 80047ea:	e00b      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047ec:	edd7 7a00 	vldr	s15, [r7]
 80047f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004844 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80047f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d801      	bhi.n	8004802 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80047fe:	2309      	movs	r3, #9
 8004800:	e000      	b.n	8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004802:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004804:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	331c      	adds	r3, #28
 800480a:	7bfa      	ldrb	r2, [r7, #15]
 800480c:	4611      	mov	r1, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa6e 	bl	8004cf0 <lsm6dsl_xl_data_rate_set>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	e000      	b.n	8004822 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	42500000 	.word	0x42500000
 8004830:	42d00000 	.word	0x42d00000
 8004834:	43500000 	.word	0x43500000
 8004838:	43d00000 	.word	0x43d00000
 800483c:	44504000 	.word	0x44504000
 8004840:	44cf8000 	.word	0x44cf8000
 8004844:	45502000 	.word	0x45502000

08004848 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004854:	edd7 7a00 	vldr	s15, [r7]
 8004858:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800485c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	d801      	bhi.n	800486a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004866:	2301      	movs	r3, #1
 8004868:	e058      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800486a:	edd7 7a00 	vldr	s15, [r7]
 800486e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	d801      	bhi.n	8004880 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800487c:	2302      	movs	r3, #2
 800487e:	e04d      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004880:	edd7 7a00 	vldr	s15, [r7]
 8004884:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004930 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004890:	d801      	bhi.n	8004896 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004892:	2303      	movs	r3, #3
 8004894:	e042      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004896:	edd7 7a00 	vldr	s15, [r7]
 800489a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004934 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800489e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	d801      	bhi.n	80048ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80048a8:	2304      	movs	r3, #4
 80048aa:	e037      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048ac:	edd7 7a00 	vldr	s15, [r7]
 80048b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004938 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80048b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048bc:	d801      	bhi.n	80048c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80048be:	2305      	movs	r3, #5
 80048c0:	e02c      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048c2:	edd7 7a00 	vldr	s15, [r7]
 80048c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800493c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80048ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	d801      	bhi.n	80048d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80048d4:	2306      	movs	r3, #6
 80048d6:	e021      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048d8:	edd7 7a00 	vldr	s15, [r7]
 80048dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004940 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80048e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e8:	d801      	bhi.n	80048ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e016      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048ee:	edd7 7a00 	vldr	s15, [r7]
 80048f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004944 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80048f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	d801      	bhi.n	8004904 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004900:	2308      	movs	r3, #8
 8004902:	e00b      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004904:	edd7 7a00 	vldr	s15, [r7]
 8004908:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004948 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800490c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	d801      	bhi.n	800491a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004916:	2309      	movs	r3, #9
 8004918:	e000      	b.n	800491c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800491a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	42500000 	.word	0x42500000
 8004934:	42d00000 	.word	0x42d00000
 8004938:	43500000 	.word	0x43500000
 800493c:	43d00000 	.word	0x43d00000
 8004940:	44504000 	.word	0x44504000
 8004944:	44cf8000 	.word	0x44cf8000
 8004948:	45502000 	.word	0x45502000

0800494c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004958:	edd7 7a00 	vldr	s15, [r7]
 800495c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	d801      	bhi.n	800496e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800496a:	2301      	movs	r3, #1
 800496c:	e058      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800496e:	edd7 7a00 	vldr	s15, [r7]
 8004972:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497e:	d801      	bhi.n	8004984 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004980:	2302      	movs	r3, #2
 8004982:	e04d      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004984:	edd7 7a00 	vldr	s15, [r7]
 8004988:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004a48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800498c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	d801      	bhi.n	800499a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004996:	2303      	movs	r3, #3
 8004998:	e042      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800499a:	edd7 7a00 	vldr	s15, [r7]
 800499e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004a4c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80049a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d801      	bhi.n	80049b0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80049ac:	2304      	movs	r3, #4
 80049ae:	e037      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049b0:	edd7 7a00 	vldr	s15, [r7]
 80049b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80049b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	d801      	bhi.n	80049c6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e02c      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049c6:	edd7 7a00 	vldr	s15, [r7]
 80049ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004a54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80049ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d6:	d801      	bhi.n	80049dc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80049d8:	2306      	movs	r3, #6
 80049da:	e021      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049dc:	edd7 7a00 	vldr	s15, [r7]
 80049e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80049e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ec:	d801      	bhi.n	80049f2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80049ee:	2307      	movs	r3, #7
 80049f0:	e016      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049f2:	edd7 7a00 	vldr	s15, [r7]
 80049f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004a5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80049fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a02:	d801      	bhi.n	8004a08 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004a04:	2308      	movs	r3, #8
 8004a06:	e00b      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a08:	edd7 7a00 	vldr	s15, [r7]
 8004a0c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	d801      	bhi.n	8004a1e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	e000      	b.n	8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a1e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004a20:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	331c      	adds	r3, #28
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fa56 	bl	8004edc <lsm6dsl_gy_data_rate_set>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e000      	b.n	8004a3e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	42500000 	.word	0x42500000
 8004a4c:	42d00000 	.word	0x42d00000
 8004a50:	43500000 	.word	0x43500000
 8004a54:	43d00000 	.word	0x43d00000
 8004a58:	44504000 	.word	0x44504000
 8004a5c:	44cf8000 	.word	0x44cf8000
 8004a60:	45502000 	.word	0x45502000

08004a64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004a70:	edd7 7a00 	vldr	s15, [r7]
 8004a74:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d801      	bhi.n	8004a86 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e058      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a86:	edd7 7a00 	vldr	s15, [r7]
 8004a8a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	d801      	bhi.n	8004a9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e04d      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a9c:	edd7 7a00 	vldr	s15, [r7]
 8004aa0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004b4c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	d801      	bhi.n	8004ab2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e042      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ab2:	edd7 7a00 	vldr	s15, [r7]
 8004ab6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	d801      	bhi.n	8004ac8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	e037      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ac8:	edd7 7a00 	vldr	s15, [r7]
 8004acc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b54 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad8:	d801      	bhi.n	8004ade <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004ada:	2305      	movs	r3, #5
 8004adc:	e02c      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ade:	edd7 7a00 	vldr	s15, [r7]
 8004ae2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	d801      	bhi.n	8004af4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004af0:	2306      	movs	r3, #6
 8004af2:	e021      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004af4:	edd7 7a00 	vldr	s15, [r7]
 8004af8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004b5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d801      	bhi.n	8004b0a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004b06:	2307      	movs	r3, #7
 8004b08:	e016      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b0a:	edd7 7a00 	vldr	s15, [r7]
 8004b0e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	d801      	bhi.n	8004b20 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	e00b      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b20:	edd7 7a00 	vldr	s15, [r7]
 8004b24:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d801      	bhi.n	8004b36 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004b32:	2309      	movs	r3, #9
 8004b34:	e000      	b.n	8004b38 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b36:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	42500000 	.word	0x42500000
 8004b50:	42d00000 	.word	0x42d00000
 8004b54:	43500000 	.word	0x43500000
 8004b58:	43d00000 	.word	0x43d00000
 8004b5c:	44504000 	.word	0x44504000
 8004b60:	44cf8000 	.word	0x44cf8000
 8004b64:	45502000 	.word	0x45502000

08004b68 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	461a      	mov	r2, r3
 8004b74:	460b      	mov	r3, r1
 8004b76:	72fb      	strb	r3, [r7, #11]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	695c      	ldr	r4, [r3, #20]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	7b1b      	ldrb	r3, [r3, #12]
 8004b88:	b298      	uxth	r0, r3
 8004b8a:	7afb      	ldrb	r3, [r7, #11]
 8004b8c:	b299      	uxth	r1, r3
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	47a0      	blx	r4
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd90      	pop	{r4, r7, pc}

08004b9e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b9e:	b590      	push	{r4, r7, lr}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	460b      	mov	r3, r1
 8004bac:	72fb      	strb	r3, [r7, #11]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	691c      	ldr	r4, [r3, #16]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	7b1b      	ldrb	r3, [r3, #12]
 8004bbe:	b298      	uxth	r0, r3
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	b299      	uxth	r1, r3
 8004bc4:	893b      	ldrh	r3, [r7, #8]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	47a0      	blx	r4
 8004bca:	4603      	mov	r3, r0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	72fb      	strb	r3, [r7, #11]
 8004be4:	4613      	mov	r3, r2
 8004be6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685c      	ldr	r4, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6898      	ldr	r0, [r3, #8]
 8004bf0:	893b      	ldrh	r3, [r7, #8]
 8004bf2:	7af9      	ldrb	r1, [r7, #11]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	47a0      	blx	r4
 8004bf8:	6178      	str	r0, [r7, #20]
  return ret;
 8004bfa:	697b      	ldr	r3, [r7, #20]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}

08004c04 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	460b      	mov	r3, r1
 8004c12:	72fb      	strb	r3, [r7, #11]
 8004c14:	4613      	mov	r3, r2
 8004c16:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681c      	ldr	r4, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6898      	ldr	r0, [r3, #8]
 8004c20:	893b      	ldrh	r3, [r7, #8]
 8004c22:	7af9      	ldrb	r1, [r7, #11]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	47a0      	blx	r4
 8004c28:	6178      	str	r0, [r7, #20]
  return ret;
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}

08004c34 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c40:	f107 0208 	add.w	r2, r7, #8
 8004c44:	2301      	movs	r3, #1
 8004c46:	2110      	movs	r1, #16
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ffc3 	bl	8004bd4 <lsm6dsl_read_reg>
 8004c4e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	7a3b      	ldrb	r3, [r7, #8]
 8004c60:	f362 0383 	bfi	r3, r2, #2, #2
 8004c64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ffc8 	bl	8004c04 <lsm6dsl_write_reg>
 8004c74:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c8a:	f107 0208 	add.w	r2, r7, #8
 8004c8e:	2301      	movs	r3, #1
 8004c90:	2110      	movs	r1, #16
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ff9e 	bl	8004bd4 <lsm6dsl_read_reg>
 8004c98:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004c9a:	7a3b      	ldrb	r3, [r7, #8]
 8004c9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d81a      	bhi.n	8004cdc <lsm6dsl_xl_full_scale_get+0x5c>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <lsm6dsl_xl_full_scale_get+0x2c>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004cc5 	.word	0x08004cc5
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cd5 	.word	0x08004cd5
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
      break;
 8004cc2:	e00f      	b.n	8004ce4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
      break;
 8004cca:	e00b      	b.n	8004ce4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
      break;
 8004cd2:	e007      	b.n	8004ce4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e003      	b.n	8004ce4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	701a      	strb	r2, [r3, #0]
      break;
 8004ce2:	bf00      	nop
  }

  return ret;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop

08004cf0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	2301      	movs	r3, #1
 8004d02:	2110      	movs	r1, #16
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff65 	bl	8004bd4 <lsm6dsl_read_reg>
 8004d0a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	7a3b      	ldrb	r3, [r7, #8]
 8004d1c:	f362 1307 	bfi	r3, r2, #4, #4
 8004d20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	2301      	movs	r3, #1
 8004d28:	2110      	movs	r1, #16
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff6a 	bl	8004c04 <lsm6dsl_write_reg>
 8004d30:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d46:	f107 0208 	add.w	r2, r7, #8
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff40 	bl	8004bd4 <lsm6dsl_read_reg>
 8004d54:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004d56:	7a3b      	ldrb	r3, [r7, #8]
 8004d58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b0b      	cmp	r3, #11
 8004d60:	d84a      	bhi.n	8004df8 <lsm6dsl_xl_data_rate_get+0xbc>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d99 	.word	0x08004d99
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004db1 	.word	0x08004db1
 8004d78:	08004db9 	.word	0x08004db9
 8004d7c:	08004dc1 	.word	0x08004dc1
 8004d80:	08004dc9 	.word	0x08004dc9
 8004d84:	08004dd1 	.word	0x08004dd1
 8004d88:	08004dd9 	.word	0x08004dd9
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004df1 	.word	0x08004df1
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	e02f      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
      break;
 8004da6:	e02b      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2202      	movs	r2, #2
 8004dac:	701a      	strb	r2, [r3, #0]
      break;
 8004dae:	e027      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2203      	movs	r2, #3
 8004db4:	701a      	strb	r2, [r3, #0]
      break;
 8004db6:	e023      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e01f      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2205      	movs	r2, #5
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e01b      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2206      	movs	r2, #6
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e017      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2207      	movs	r2, #7
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e013      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e00f      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2209      	movs	r2, #9
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	e00b      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	220a      	movs	r2, #10
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e007      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	220b      	movs	r2, #11
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e003      	b.n	8004e00 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	220c      	movs	r2, #12
 8004dfc:	701a      	strb	r2, [r3, #0]
      break;
 8004dfe:	bf00      	nop
  }

  return ret;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e18:	f107 0208 	add.w	r2, r7, #8
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	2111      	movs	r1, #17
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fed7 	bl	8004bd4 <lsm6dsl_read_reg>
 8004e26:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	7a3b      	ldrb	r3, [r7, #8]
 8004e38:	f362 0343 	bfi	r3, r2, #1, #3
 8004e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e3e:	f107 0208 	add.w	r2, r7, #8
 8004e42:	2301      	movs	r3, #1
 8004e44:	2111      	movs	r1, #17
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fedc 	bl	8004c04 <lsm6dsl_write_reg>
 8004e4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	2301      	movs	r3, #1
 8004e68:	2111      	movs	r1, #17
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff feb2 	bl	8004bd4 <lsm6dsl_read_reg>
 8004e70:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004e72:	7a3b      	ldrb	r3, [r7, #8]
 8004e74:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d824      	bhi.n	8004ec8 <lsm6dsl_gy_full_scale_get+0x70>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004ec9 	.word	0x08004ec9
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ec9 	.word	0x08004ec9
 8004e9c:	08004ec1 	.word	0x08004ec1
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
      break;
 8004ea6:	e013      	b.n	8004ed0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e00f      	b.n	8004ed0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	701a      	strb	r2, [r3, #0]
      break;
 8004eb6:	e00b      	b.n	8004ed0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	701a      	strb	r2, [r3, #0]
      break;
 8004ebe:	e007      	b.n	8004ed0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2206      	movs	r2, #6
 8004ec4:	701a      	strb	r2, [r3, #0]
      break;
 8004ec6:	e003      	b.n	8004ed0 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2207      	movs	r2, #7
 8004ecc:	701a      	strb	r2, [r3, #0]
      break;
 8004ece:	bf00      	nop
  }

  return ret;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop

08004edc <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ee8:	f107 0208 	add.w	r2, r7, #8
 8004eec:	2301      	movs	r3, #1
 8004eee:	2111      	movs	r1, #17
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fe6f 	bl	8004bd4 <lsm6dsl_read_reg>
 8004ef6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	7a3b      	ldrb	r3, [r7, #8]
 8004f08:	f362 1307 	bfi	r3, r2, #4, #4
 8004f0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f0e:	f107 0208 	add.w	r2, r7, #8
 8004f12:	2301      	movs	r3, #1
 8004f14:	2111      	movs	r1, #17
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fe74 	bl	8004c04 <lsm6dsl_write_reg>
 8004f1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f32:	f107 0208 	add.w	r2, r7, #8
 8004f36:	2301      	movs	r3, #1
 8004f38:	2111      	movs	r1, #17
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fe4a 	bl	8004bd4 <lsm6dsl_read_reg>
 8004f40:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8004f42:	7a3b      	ldrb	r3, [r7, #8]
 8004f44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	d844      	bhi.n	8004fd8 <lsm6dsl_gy_data_rate_get+0xb0>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08004f99 	.word	0x08004f99
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fc1 	.word	0x08004fc1
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	08004fd1 	.word	0x08004fd1
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
      break;
 8004f86:	e02b      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
      break;
 8004f8e:	e027      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e023      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	701a      	strb	r2, [r3, #0]
      break;
 8004f9e:	e01f      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	701a      	strb	r2, [r3, #0]
      break;
 8004fa6:	e01b      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2205      	movs	r2, #5
 8004fac:	701a      	strb	r2, [r3, #0]
      break;
 8004fae:	e017      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2206      	movs	r2, #6
 8004fb4:	701a      	strb	r2, [r3, #0]
      break;
 8004fb6:	e013      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2207      	movs	r2, #7
 8004fbc:	701a      	strb	r2, [r3, #0]
      break;
 8004fbe:	e00f      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	701a      	strb	r2, [r3, #0]
      break;
 8004fc6:	e00b      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2209      	movs	r2, #9
 8004fcc:	701a      	strb	r2, [r3, #0]
      break;
 8004fce:	e007      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	220a      	movs	r2, #10
 8004fd4:	701a      	strb	r2, [r3, #0]
      break;
 8004fd6:	e003      	b.n	8004fe0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	220b      	movs	r2, #11
 8004fdc:	701a      	strb	r2, [r3, #0]
      break;
 8004fde:	bf00      	nop
  }

  return ret;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop

08004fec <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004ff8:	f107 0208 	add.w	r2, r7, #8
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2112      	movs	r1, #18
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fde7 	bl	8004bd4 <lsm6dsl_read_reg>
 8005006:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	7a3b      	ldrb	r3, [r7, #8]
 8005018:	f362 1386 	bfi	r3, r2, #6, #1
 800501c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800501e:	f107 0208 	add.w	r2, r7, #8
 8005022:	2301      	movs	r3, #1
 8005024:	2112      	movs	r1, #18
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fdec 	bl	8004c04 <lsm6dsl_write_reg>
 800502c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005042:	f107 020c 	add.w	r2, r7, #12
 8005046:	2306      	movs	r3, #6
 8005048:	2122      	movs	r1, #34	; 0x22
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fdc2 	bl	8004bd4 <lsm6dsl_read_reg>
 8005050:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	b21a      	sxth	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005060:	b29b      	uxth	r3, r3
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	b29a      	uxth	r2, r3
 8005066:	7b3b      	ldrb	r3, [r7, #12]
 8005068:	b29b      	uxth	r3, r3
 800506a:	4413      	add	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	b21a      	sxth	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	3302      	adds	r3, #2
 800507a:	b212      	sxth	r2, r2
 800507c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	3302      	adds	r3, #2
 8005082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005086:	b29b      	uxth	r3, r3
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	b29a      	uxth	r2, r3
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	b29b      	uxth	r3, r3
 8005090:	4413      	add	r3, r2
 8005092:	b29a      	uxth	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	3302      	adds	r3, #2
 8005098:	b212      	sxth	r2, r2
 800509a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800509c:	7c7a      	ldrb	r2, [r7, #17]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3304      	adds	r3, #4
 80050a2:	b212      	sxth	r2, r2
 80050a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3304      	adds	r3, #4
 80050aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	7c3b      	ldrb	r3, [r7, #16]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4413      	add	r3, r2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	3304      	adds	r3, #4
 80050c0:	b212      	sxth	r2, r2
 80050c2:	801a      	strh	r2, [r3, #0]
  return ret;
 80050c4:	697b      	ldr	r3, [r7, #20]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80050d8:	f107 020c 	add.w	r2, r7, #12
 80050dc:	2306      	movs	r3, #6
 80050de:	2128      	movs	r1, #40	; 0x28
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fd77 	bl	8004bd4 <lsm6dsl_read_reg>
 80050e6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050e8:	7b7b      	ldrb	r3, [r7, #13]
 80050ea:	b21a      	sxth	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	7b3b      	ldrb	r3, [r7, #12]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	4413      	add	r3, r2
 8005102:	b29b      	uxth	r3, r3
 8005104:	b21a      	sxth	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800510a:	7bfa      	ldrb	r2, [r7, #15]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	3302      	adds	r3, #2
 8005110:	b212      	sxth	r2, r2
 8005112:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	3302      	adds	r3, #2
 8005118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800511c:	b29b      	uxth	r3, r3
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	b29a      	uxth	r2, r3
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	b29b      	uxth	r3, r3
 8005126:	4413      	add	r3, r2
 8005128:	b29a      	uxth	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3302      	adds	r3, #2
 800512e:	b212      	sxth	r2, r2
 8005130:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005132:	7c7a      	ldrb	r2, [r7, #17]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	b212      	sxth	r2, r2
 800513a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3304      	adds	r3, #4
 8005140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005144:	b29b      	uxth	r3, r3
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	b29a      	uxth	r2, r3
 800514a:	7c3b      	ldrb	r3, [r7, #16]
 800514c:	b29b      	uxth	r3, r3
 800514e:	4413      	add	r3, r2
 8005150:	b29a      	uxth	r2, r3
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3304      	adds	r3, #4
 8005156:	b212      	sxth	r2, r2
 8005158:	801a      	strh	r2, [r3, #0]
  return ret;
 800515a:	697b      	ldr	r3, [r7, #20]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800516e:	2301      	movs	r3, #1
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	210f      	movs	r1, #15
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fd2d 	bl	8004bd4 <lsm6dsl_read_reg>
 800517a:	60f8      	str	r0, [r7, #12]
  return ret;
 800517c:	68fb      	ldr	r3, [r7, #12]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005192:	f107 0208 	add.w	r2, r7, #8
 8005196:	2301      	movs	r3, #1
 8005198:	2112      	movs	r1, #18
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fd1a 	bl	8004bd4 <lsm6dsl_read_reg>
 80051a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	7a3b      	ldrb	r3, [r7, #8]
 80051b2:	f362 0382 	bfi	r3, r2, #2, #1
 80051b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80051b8:	f107 0208 	add.w	r2, r7, #8
 80051bc:	2301      	movs	r3, #1
 80051be:	2112      	movs	r1, #18
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fd1f 	bl	8004c04 <lsm6dsl_write_reg>
 80051c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051c8:	68fb      	ldr	r3, [r7, #12]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80051de:	f107 0208 	add.w	r2, r7, #8
 80051e2:	2301      	movs	r3, #1
 80051e4:	210a      	movs	r1, #10
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fcf4 	bl	8004bd4 <lsm6dsl_read_reg>
 80051ec:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10f      	bne.n	8005214 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	7a3b      	ldrb	r3, [r7, #8]
 80051fe:	f362 0302 	bfi	r3, r2, #0, #3
 8005202:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005204:	f107 0208 	add.w	r2, r7, #8
 8005208:	2301      	movs	r3, #1
 800520a:	210a      	movs	r1, #10
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fcf9 	bl	8004c04 <lsm6dsl_write_reg>
 8005212:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	; 0x38
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800522e:	2301      	movs	r3, #1
 8005230:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d06e      	beq.n	800531a <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	f200 809d 	bhi.w	800537e <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d032      	beq.n	80052b6 <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005250:	e095      	b.n	800537e <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f000 f9f0 	bl	8005638 <LSM6DSL_0_Probe>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e0cc      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005264:	4a68      	ldr	r2, [pc, #416]	; (8005408 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4967      	ldr	r1, [pc, #412]	; (800540c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005276:	f107 010c 	add.w	r1, r7, #12
 800527a:	4610      	mov	r0, r2
 800527c:	4798      	blx	r3
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005284:	f06f 0306 	mvn.w	r3, #6
 8005288:	e0b9      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800528a:	7b3b      	ldrb	r3, [r7, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d103      	bne.n	8005298 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005298:	7b7b      	ldrb	r3, [r7, #13]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d103      	bne.n	80052a6 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d16c      	bne.n	8005386 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80052b4:	e067      	b.n	8005386 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80052b6:	6838      	ldr	r0, [r7, #0]
 80052b8:	f000 fa7a 	bl	80057b0 <LSM303AGR_ACC_0_Probe>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e09a      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80052c8:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	494e      	ldr	r1, [pc, #312]	; (800540c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80052da:	f107 010c 	add.w	r1, r7, #12
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80052e8:	f06f 0306 	mvn.w	r3, #6
 80052ec:	e087      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80052ee:	7b3b      	ldrb	r3, [r7, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d103      	bne.n	80052fc <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80052fc:	7b7b      	ldrb	r3, [r7, #13]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d103      	bne.n	800530a <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800530a:	7bbb      	ldrb	r3, [r7, #14]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d13c      	bne.n	800538a <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005318:	e037      	b.n	800538a <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800531a:	6838      	ldr	r0, [r7, #0]
 800531c:	f000 faec 	bl	80058f8 <LSM303AGR_MAG_0_Probe>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	e068      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800532c:	4a36      	ldr	r2, [pc, #216]	; (8005408 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4935      	ldr	r1, [pc, #212]	; (800540c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800533e:	f107 010c 	add.w	r1, r7, #12
 8005342:	4610      	mov	r0, r2
 8005344:	4798      	blx	r3
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800534c:	f06f 0306 	mvn.w	r3, #6
 8005350:	e055      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005352:	7b3b      	ldrb	r3, [r7, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d103      	bne.n	8005360 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005360:	7b7b      	ldrb	r3, [r7, #13]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d103      	bne.n	800536e <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800536e:	7bbb      	ldrb	r3, [r7, #14]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10c      	bne.n	800538e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800537c:	e007      	b.n	800538e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800537e:	f06f 0301 	mvn.w	r3, #1
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005384:	e004      	b.n	8005390 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800538e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	e031      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539e:	e02a      	b.n	80053f6 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	4013      	ands	r3, r2
 80053a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d11e      	bne.n	80053ea <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 80053ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	4013      	ands	r3, r2
 80053b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d118      	bne.n	80053ea <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80053b8:	4a15      	ldr	r2, [pc, #84]	; (8005410 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053c0:	4814      	ldr	r0, [pc, #80]	; (8005414 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	4413      	add	r3, r2
 80053ca:	440b      	add	r3, r1
 80053cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	490e      	ldr	r1, [pc, #56]	; (800540c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053da:	4610      	mov	r0, r2
 80053dc:	4798      	blx	r3
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80053e4:	f06f 0304 	mvn.w	r3, #4
 80053e8:	e009      	b.n	80053fe <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	3301      	adds	r3, #1
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d9d1      	bls.n	80053a0 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3738      	adds	r7, #56	; 0x38
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200011a8 	.word	0x200011a8
 800540c:	2000153c 	.word	0x2000153c
 8005410:	200000d0 	.word	0x200000d0
 8005414:	20001184 	.word	0x20001184

08005418 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d903      	bls.n	8005430 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005428:	f06f 0301 	mvn.w	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e028      	b.n	8005482 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4013      	ands	r3, r2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d11c      	bne.n	800547c <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800544a:	4812      	ldr	r0, [pc, #72]	; (8005494 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4413      	add	r3, r2
 8005454:	440b      	add	r3, r1
 8005456:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800546e:	f06f 0304 	mvn.w	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e005      	b.n	8005482 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e002      	b.n	8005482 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800547c:	f06f 0301 	mvn.w	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	200011b4 	.word	0x200011b4
 8005490:	200000d0 	.word	0x200000d0
 8005494:	20001184 	.word	0x20001184
 8005498:	2000153c 	.word	0x2000153c

0800549c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d903      	bls.n	80054b6 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054ae:	f06f 0301 	mvn.w	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e029      	b.n	800550a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d11d      	bne.n	8005504 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054d0:	4812      	ldr	r0, [pc, #72]	; (800551c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	440b      	add	r3, r1
 80054dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	490f      	ldr	r1, [pc, #60]	; (8005520 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054f6:	f06f 0304 	mvn.w	r3, #4
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e005      	b.n	800550a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e002      	b.n	800550a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005504:	f06f 0301 	mvn.w	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200011b4 	.word	0x200011b4
 8005518:	200000d0 	.word	0x200000d0
 800551c:	20001184 	.word	0x20001184
 8005520:	2000153c 	.word	0x2000153c

08005524 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d903      	bls.n	8005540 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005538:	f06f 0301 	mvn.w	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02a      	b.n	8005596 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d11e      	bne.n	8005590 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005552:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800555a:	4813      	ldr	r0, [pc, #76]	; (80055a8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	440b      	add	r3, r1
 8005566:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	490f      	ldr	r1, [pc, #60]	; (80055ac <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005574:	ed97 0a01 	vldr	s0, [r7, #4]
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005582:	f06f 0304 	mvn.w	r3, #4
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e005      	b.n	8005596 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e002      	b.n	8005596 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005590:	f06f 0301 	mvn.w	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005596:	697b      	ldr	r3, [r7, #20]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	200011b4 	.word	0x200011b4
 80055a4:	200000d0 	.word	0x200000d0
 80055a8:	20001184 	.word	0x20001184
 80055ac:	2000153c 	.word	0x2000153c

080055b0 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d903      	bls.n	80055ca <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055c2:	f06f 0301 	mvn.w	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e029      	b.n	800561e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d11d      	bne.n	8005618 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055e4:	4812      	ldr	r0, [pc, #72]	; (8005630 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4413      	add	r3, r2
 80055ee:	440b      	add	r3, r1
 80055f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	490f      	ldr	r1, [pc, #60]	; (8005634 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800560a:	f06f 0304 	mvn.w	r3, #4
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e005      	b.n	800561e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e002      	b.n	800561e <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005618:	f06f 0301 	mvn.w	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800561e:	697b      	ldr	r3, [r7, #20]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200011b4 	.word	0x200011b4
 800562c:	200000d0 	.word	0x200000d0
 8005630:	20001184 	.word	0x20001184
 8005634:	2000153c 	.word	0x2000153c

08005638 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b092      	sub	sp, #72	; 0x48
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005640:	2300      	movs	r3, #0
 8005642:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005644:	2300      	movs	r3, #0
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005648:	23d7      	movs	r3, #215	; 0xd7
 800564a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <LSM6DSL_0_Probe+0x140>)
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <LSM6DSL_0_Probe+0x144>)
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <LSM6DSL_0_Probe+0x148>)
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800565a:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <LSM6DSL_0_Probe+0x14c>)
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <LSM6DSL_0_Probe+0x150>)
 8005660:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005666:	4619      	mov	r1, r3
 8005668:	4848      	ldr	r0, [pc, #288]	; (800578c <LSM6DSL_0_Probe+0x154>)
 800566a:	f7fe fac3 	bl	8003bf4 <LSM6DSL_RegisterBusIO>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005674:	f06f 0306 	mvn.w	r3, #6
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
 800567a:	e077      	b.n	800576c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800567c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005680:	4619      	mov	r1, r3
 8005682:	4842      	ldr	r0, [pc, #264]	; (800578c <LSM6DSL_0_Probe+0x154>)
 8005684:	f7fe fbac 	bl	8003de0 <LSM6DSL_ReadID>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800568e:	f06f 0306 	mvn.w	r3, #6
 8005692:	647b      	str	r3, [r7, #68]	; 0x44
 8005694:	e06a      	b.n	800576c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800569a:	2b6a      	cmp	r3, #106	; 0x6a
 800569c:	d003      	beq.n	80056a6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800569e:	f06f 0306 	mvn.w	r3, #6
 80056a2:	647b      	str	r3, [r7, #68]	; 0x44
 80056a4:	e062      	b.n	800576c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	4837      	ldr	r0, [pc, #220]	; (800578c <LSM6DSL_0_Probe+0x154>)
 80056ae:	f7fe fbad 	bl	8003e0c <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80056b2:	7a7b      	ldrb	r3, [r7, #9]
 80056b4:	461a      	mov	r2, r3
 80056b6:	7a3b      	ldrb	r3, [r7, #8]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	431a      	orrs	r2, r3
 80056bc:	7abb      	ldrb	r3, [r7, #10]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4313      	orrs	r3, r2
 80056c2:	4a33      	ldr	r2, [pc, #204]	; (8005790 <LSM6DSL_0_Probe+0x158>)
 80056c4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 80056c6:	4b33      	ldr	r3, [pc, #204]	; (8005794 <LSM6DSL_0_Probe+0x15c>)
 80056c8:	4a30      	ldr	r2, [pc, #192]	; (800578c <LSM6DSL_0_Probe+0x154>)
 80056ca:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 80056cc:	4b32      	ldr	r3, [pc, #200]	; (8005798 <LSM6DSL_0_Probe+0x160>)
 80056ce:	4a33      	ldr	r2, [pc, #204]	; (800579c <LSM6DSL_0_Probe+0x164>)
 80056d0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80056d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d11d      	bne.n	8005714 <LSM6DSL_0_Probe+0xdc>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <LSM6DSL_0_Probe+0xdc>
 80056e2:	7a7b      	ldrb	r3, [r7, #9]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d115      	bne.n	8005714 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80056e8:	4b2d      	ldr	r3, [pc, #180]	; (80057a0 <LSM6DSL_0_Probe+0x168>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a2d      	ldr	r2, [pc, #180]	; (80057a4 <LSM6DSL_0_Probe+0x16c>)
 80056ee:	492e      	ldr	r1, [pc, #184]	; (80057a8 <LSM6DSL_0_Probe+0x170>)
 80056f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <LSM6DSL_0_Probe+0x160>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a26      	ldr	r2, [pc, #152]	; (8005794 <LSM6DSL_0_Probe+0x15c>)
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	4610      	mov	r0, r2
 8005700:	4798      	blx	r3
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005708:	f06f 0304 	mvn.w	r3, #4
 800570c:	647b      	str	r3, [r7, #68]	; 0x44
 800570e:	e001      	b.n	8005714 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005710:	2300      	movs	r3, #0
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	2b00      	cmp	r3, #0
 8005718:	d11d      	bne.n	8005756 <LSM6DSL_0_Probe+0x11e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d018      	beq.n	8005756 <LSM6DSL_0_Probe+0x11e>
 8005724:	7a3b      	ldrb	r3, [r7, #8]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d115      	bne.n	8005756 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <LSM6DSL_0_Probe+0x168>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <LSM6DSL_0_Probe+0x16c>)
 8005730:	491e      	ldr	r1, [pc, #120]	; (80057ac <LSM6DSL_0_Probe+0x174>)
 8005732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <LSM6DSL_0_Probe+0x160>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <LSM6DSL_0_Probe+0x15c>)
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800574a:	f06f 0304 	mvn.w	r3, #4
 800574e:	647b      	str	r3, [r7, #68]	; 0x44
 8005750:	e001      	b.n	8005756 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005758:	2b00      	cmp	r3, #0
 800575a:	d107      	bne.n	800576c <LSM6DSL_0_Probe+0x134>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005766:	f06f 0304 	mvn.w	r3, #4
 800576a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800576e:	4618      	mov	r0, r3
 8005770:	3748      	adds	r7, #72	; 0x48
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	08001f89 	.word	0x08001f89
 800577c:	08002005 	.word	0x08002005
 8005780:	080020b9 	.word	0x080020b9
 8005784:	08002055 	.word	0x08002055
 8005788:	0800211d 	.word	0x0800211d
 800578c:	200011c0 	.word	0x200011c0
 8005790:	200011b4 	.word	0x200011b4
 8005794:	2000153c 	.word	0x2000153c
 8005798:	200011a8 	.word	0x200011a8
 800579c:	20000078 	.word	0x20000078
 80057a0:	200000d0 	.word	0x200000d0
 80057a4:	20001184 	.word	0x20001184
 80057a8:	200000ac 	.word	0x200000ac
 80057ac:	20000088 	.word	0x20000088

080057b0 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b092      	sub	sp, #72	; 0x48
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80057bc:	2300      	movs	r3, #0
 80057be:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 80057c0:	2333      	movs	r3, #51	; 0x33
 80057c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057c6:	4b3f      	ldr	r3, [pc, #252]	; (80058c4 <LSM303AGR_ACC_0_Probe+0x114>)
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057ca:	4b3f      	ldr	r3, [pc, #252]	; (80058c8 <LSM303AGR_ACC_0_Probe+0x118>)
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057ce:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <LSM303AGR_ACC_0_Probe+0x11c>)
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057d2:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <LSM303AGR_ACC_0_Probe+0x120>)
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <LSM303AGR_ACC_0_Probe+0x124>)
 80057d8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 80057da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057de:	4619      	mov	r1, r3
 80057e0:	483d      	ldr	r0, [pc, #244]	; (80058d8 <LSM303AGR_ACC_0_Probe+0x128>)
 80057e2:	f7fc fe51 	bl	8002488 <LSM303AGR_ACC_RegisterBusIO>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057ec:	f06f 0306 	mvn.w	r3, #6
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
 80057f2:	e062      	b.n	80058ba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 80057f4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80057f8:	4619      	mov	r1, r3
 80057fa:	4837      	ldr	r0, [pc, #220]	; (80058d8 <LSM303AGR_ACC_0_Probe+0x128>)
 80057fc:	f7fc ff05 	bl	800260a <LSM303AGR_ACC_ReadID>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005806:	f06f 0306 	mvn.w	r3, #6
 800580a:	647b      	str	r3, [r7, #68]	; 0x44
 800580c:	e055      	b.n	80058ba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800580e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005812:	2b33      	cmp	r3, #51	; 0x33
 8005814:	d003      	beq.n	800581e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005816:	f06f 0306 	mvn.w	r3, #6
 800581a:	647b      	str	r3, [r7, #68]	; 0x44
 800581c:	e04d      	b.n	80058ba <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4619      	mov	r1, r3
 8005824:	482c      	ldr	r0, [pc, #176]	; (80058d8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005826:	f7fc ff07 	bl	8002638 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800582a:	7a7b      	ldrb	r3, [r7, #9]
 800582c:	461a      	mov	r2, r3
 800582e:	7a3b      	ldrb	r3, [r7, #8]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005834:	7abb      	ldrb	r3, [r7, #10]
 8005836:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005838:	4313      	orrs	r3, r2
 800583a:	4a28      	ldr	r2, [pc, #160]	; (80058dc <LSM303AGR_ACC_0_Probe+0x12c>)
 800583c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800583e:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005840:	4a25      	ldr	r2, [pc, #148]	; (80058d8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005842:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005844:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005846:	4a28      	ldr	r2, [pc, #160]	; (80058e8 <LSM303AGR_ACC_0_Probe+0x138>)
 8005848:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800584a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11e      	bne.n	800588e <LSM303AGR_ACC_0_Probe+0xde>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d019      	beq.n	800588e <LSM303AGR_ACC_0_Probe+0xde>
 800585a:	7a3b      	ldrb	r3, [r7, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d116      	bne.n	800588e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <LSM303AGR_ACC_0_Probe+0x13c>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <LSM303AGR_ACC_0_Probe+0x140>)
 8005866:	3303      	adds	r3, #3
 8005868:	4922      	ldr	r1, [pc, #136]	; (80058f4 <LSM303AGR_ACC_0_Probe+0x144>)
 800586a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005882:	f06f 0304 	mvn.w	r3, #4
 8005886:	647b      	str	r3, [r7, #68]	; 0x44
 8005888:	e001      	b.n	800588e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800588a:	2300      	movs	r3, #0
 800588c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800588e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <LSM303AGR_ACC_0_Probe+0xf4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800589e:	f06f 0304 	mvn.w	r3, #4
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80058a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d107      	bne.n	80058ba <LSM303AGR_ACC_0_Probe+0x10a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058b4:	f06f 0304 	mvn.w	r3, #4
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80058ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3748      	adds	r7, #72	; 0x48
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	08001f89 	.word	0x08001f89
 80058c8:	08002005 	.word	0x08002005
 80058cc:	080020b9 	.word	0x080020b9
 80058d0:	08002055 	.word	0x08002055
 80058d4:	0800211d 	.word	0x0800211d
 80058d8:	200011f0 	.word	0x200011f0
 80058dc:	200011b4 	.word	0x200011b4
 80058e0:	2000153c 	.word	0x2000153c
 80058e4:	200011a8 	.word	0x200011a8
 80058e8:	20000010 	.word	0x20000010
 80058ec:	200000d0 	.word	0x200000d0
 80058f0:	20001184 	.word	0x20001184
 80058f4:	20000020 	.word	0x20000020

080058f8 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b092      	sub	sp, #72	; 0x48
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005900:	2300      	movs	r3, #0
 8005902:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005904:	2300      	movs	r3, #0
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005908:	233d      	movs	r3, #61	; 0x3d
 800590a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800590e:	4b3f      	ldr	r3, [pc, #252]	; (8005a0c <LSM303AGR_MAG_0_Probe+0x114>)
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005912:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <LSM303AGR_MAG_0_Probe+0x118>)
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800591a:	4b3f      	ldr	r3, [pc, #252]	; (8005a18 <LSM303AGR_MAG_0_Probe+0x120>)
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <LSM303AGR_MAG_0_Probe+0x124>)
 8005920:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005926:	4619      	mov	r1, r3
 8005928:	483d      	ldr	r0, [pc, #244]	; (8005a20 <LSM303AGR_MAG_0_Probe+0x128>)
 800592a:	f7fd f973 	bl	8002c14 <LSM303AGR_MAG_RegisterBusIO>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005934:	f06f 0306 	mvn.w	r3, #6
 8005938:	647b      	str	r3, [r7, #68]	; 0x44
 800593a:	e062      	b.n	8005a02 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800593c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005940:	4619      	mov	r1, r3
 8005942:	4837      	ldr	r0, [pc, #220]	; (8005a20 <LSM303AGR_MAG_0_Probe+0x128>)
 8005944:	f7fd fa1d 	bl	8002d82 <LSM303AGR_MAG_ReadID>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800594e:	f06f 0306 	mvn.w	r3, #6
 8005952:	647b      	str	r3, [r7, #68]	; 0x44
 8005954:	e055      	b.n	8005a02 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d003      	beq.n	8005966 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800595e:	f06f 0306 	mvn.w	r3, #6
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
 8005964:	e04d      	b.n	8005a02 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005966:	f107 0308 	add.w	r3, r7, #8
 800596a:	4619      	mov	r1, r3
 800596c:	482c      	ldr	r0, [pc, #176]	; (8005a20 <LSM303AGR_MAG_0_Probe+0x128>)
 800596e:	f7fd fa1f 	bl	8002db0 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005972:	7a7b      	ldrb	r3, [r7, #9]
 8005974:	461a      	mov	r2, r3
 8005976:	7a3b      	ldrb	r3, [r7, #8]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800597c:	7abb      	ldrb	r3, [r7, #10]
 800597e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005980:	4313      	orrs	r3, r2
 8005982:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005984:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005986:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <LSM303AGR_MAG_0_Probe+0x130>)
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <LSM303AGR_MAG_0_Probe+0x128>)
 800598a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800598c:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <LSM303AGR_MAG_0_Probe+0x134>)
 800598e:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <LSM303AGR_MAG_0_Probe+0x138>)
 8005990:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11e      	bne.n	80059d6 <LSM303AGR_MAG_0_Probe+0xde>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d019      	beq.n	80059d6 <LSM303AGR_MAG_0_Probe+0xde>
 80059a2:	7abb      	ldrb	r3, [r7, #10]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d116      	bne.n	80059d6 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80059a8:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <LSM303AGR_MAG_0_Probe+0x13c>)
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <LSM303AGR_MAG_0_Probe+0x140>)
 80059ae:	3306      	adds	r3, #6
 80059b0:	4922      	ldr	r1, [pc, #136]	; (8005a3c <LSM303AGR_MAG_0_Probe+0x144>)
 80059b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 80059b6:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <LSM303AGR_MAG_0_Probe+0x134>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <LSM303AGR_MAG_0_Probe+0x130>)
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059ca:	f06f 0304 	mvn.w	r3, #4
 80059ce:	647b      	str	r3, [r7, #68]	; 0x44
 80059d0:	e001      	b.n	80059d6 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80059d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <LSM303AGR_MAG_0_Probe+0xf4>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059e6:	f06f 0304 	mvn.w	r3, #4
 80059ea:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80059ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d107      	bne.n	8005a02 <LSM303AGR_MAG_0_Probe+0x10a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059fc:	f06f 0304 	mvn.w	r3, #4
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3748      	adds	r7, #72	; 0x48
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	08001f89 	.word	0x08001f89
 8005a10:	08002005 	.word	0x08002005
 8005a14:	080020b9 	.word	0x080020b9
 8005a18:	08002055 	.word	0x08002055
 8005a1c:	0800211d 	.word	0x0800211d
 8005a20:	2000121c 	.word	0x2000121c
 8005a24:	200011b4 	.word	0x200011b4
 8005a28:	2000153c 	.word	0x2000153c
 8005a2c:	200011a8 	.word	0x200011a8
 8005a30:	20000044 	.word	0x20000044
 8005a34:	200000d0 	.word	0x200000d0
 8005a38:	20001184 	.word	0x20001184
 8005a3c:	20000054 	.word	0x20000054

08005a40 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d903      	bls.n	8005a5c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a54:	f06f 0301 	mvn.w	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e025      	b.n	8005aa8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	79fa      	ldrb	r2, [r7, #7]
 8005a60:	4914      	ldr	r1, [pc, #80]	; (8005ab4 <BSP_COM_Init+0x74>)
 8005a62:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a66:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <BSP_COM_Init+0x78>)
 8005a68:	4613      	mov	r3, r2
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4403      	add	r3, r0
 8005a72:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005a74:	79fa      	ldrb	r2, [r7, #7]
 8005a76:	4613      	mov	r3, r2
 8005a78:	015b      	lsls	r3, r3, #5
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <BSP_COM_Init+0x78>)
 8005a80:	4413      	add	r3, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f84e 	bl	8005b24 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005a88:	79fa      	ldrb	r2, [r7, #7]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	015b      	lsls	r3, r3, #5
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <BSP_COM_Init+0x78>)
 8005a94:	4413      	add	r3, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f810 	bl	8005abc <MX_USART2_UART_Init>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005aa2:	f06f 0303 	mvn.w	r3, #3
 8005aa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200000e4 	.word	0x200000e4
 8005ab8:	20001590 	.word	0x20001590

08005abc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <MX_USART2_UART_Init+0x64>)
 8005acc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005ad4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	220c      	movs	r2, #12
 8005aec:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f004 f822 	bl	8009b50 <HAL_UART_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40004400 	.word	0x40004400

08005b24 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b2c:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b36:	6593      	str	r3, [r2, #88]	; 0x58
 8005b38:	4b2d      	ldr	r3, [pc, #180]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b44:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <USART2_MspInit+0xcc>)
 8005b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b60:	2302      	movs	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005b6c:	2307      	movs	r3, #7
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	4619      	mov	r1, r3
 8005b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b7a:	f000 fcaf 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005b7e:	2308      	movs	r3, #8
 8005b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b82:	2302      	movs	r3, #2
 8005b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005b8e:	2307      	movs	r3, #7
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4619      	mov	r1, r3
 8005b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b9c:	f000 fc9e 	bl	80064dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <USART2_MspInit+0xd4>)
 8005ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005ba8:	2202      	movs	r2, #2
 8005baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bba:	2280      	movs	r2, #128	; 0x80
 8005bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005bca:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bcc:	2220      	movs	r2, #32
 8005bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8005bd6:	4807      	ldr	r0, [pc, #28]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005bd8:	f000 fa88 	bl	80060ec <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005be0:	671a      	str	r2, [r3, #112]	; 0x70
 8005be2:	4a04      	ldr	r2, [pc, #16]	; (8005bf4 <USART2_MspInit+0xd0>)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005be8:	bf00      	nop
 8005bea:	3728      	adds	r7, #40	; 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	20001548 	.word	0x20001548
 8005bf8:	4002006c 	.word	0x4002006c

08005bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_Init+0x3c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a0b      	ldr	r2, [pc, #44]	; (8005c38 <HAL_Init+0x3c>)
 8005c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c12:	2003      	movs	r0, #3
 8005c14:	f000 f93e 	bl	8005e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f000 f80f 	bl	8005c3c <HAL_InitTick>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	71fb      	strb	r3, [r7, #7]
 8005c28:	e001      	b.n	8005c2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c2a:	f7fc f943 	bl	8001eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40022000 	.word	0x40022000

08005c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <HAL_InitTick+0x6c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d023      	beq.n	8005c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <HAL_InitTick+0x70>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <HAL_InitTick+0x6c>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f949 	bl	8005efe <HAL_SYSTICK_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10f      	bne.n	8005c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b0f      	cmp	r3, #15
 8005c76:	d809      	bhi.n	8005c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c78:	2200      	movs	r2, #0
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	f000 f913 	bl	8005eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c84:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <HAL_InitTick+0x74>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e007      	b.n	8005c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	e004      	b.n	8005c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
 8005c96:	e001      	b.n	8005c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200000ec 	.word	0x200000ec
 8005cac:	2000000c 	.word	0x2000000c
 8005cb0:	200000e8 	.word	0x200000e8

08005cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_IncTick+0x20>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_IncTick+0x24>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <HAL_IncTick+0x24>)
 8005cc6:	6013      	str	r3, [r2, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	200000ec 	.word	0x200000ec
 8005cd8:	20001614 	.word	0x20001614

08005cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return uwTick;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <HAL_GetTick+0x14>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20001614 	.word	0x20001614

08005cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <__NVIC_SetPriorityGrouping+0x44>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d26:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <__NVIC_SetPriorityGrouping+0x44>)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	60d3      	str	r3, [r2, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <__NVIC_GetPriorityGrouping+0x18>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	f003 0307 	and.w	r3, r3, #7
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db0b      	blt.n	8005d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	f003 021f 	and.w	r2, r3, #31
 8005d70:	4907      	ldr	r1, [pc, #28]	; (8005d90 <__NVIC_EnableIRQ+0x38>)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2001      	movs	r0, #1
 8005d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000e100 	.word	0xe000e100

08005d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	db0a      	blt.n	8005dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	490c      	ldr	r1, [pc, #48]	; (8005de0 <__NVIC_SetPriority+0x4c>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	440b      	add	r3, r1
 8005db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dbc:	e00a      	b.n	8005dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4908      	ldr	r1, [pc, #32]	; (8005de4 <__NVIC_SetPriority+0x50>)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	3b04      	subs	r3, #4
 8005dcc:	0112      	lsls	r2, r2, #4
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	761a      	strb	r2, [r3, #24]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000e100 	.word	0xe000e100
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f1c3 0307 	rsb	r3, r3, #7
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf28      	it	cs
 8005e06:	2304      	movcs	r3, #4
 8005e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d902      	bls.n	8005e18 <NVIC_EncodePriority+0x30>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3b03      	subs	r3, #3
 8005e16:	e000      	b.n	8005e1a <NVIC_EncodePriority+0x32>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43da      	mvns	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e30:	f04f 31ff 	mov.w	r1, #4294967295
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	43d9      	mvns	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e40:	4313      	orrs	r3, r2
         );
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e60:	d301      	bcc.n	8005e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e62:	2301      	movs	r3, #1
 8005e64:	e00f      	b.n	8005e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e66:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <SysTick_Config+0x40>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e6e:	210f      	movs	r1, #15
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	f7ff ff8e 	bl	8005d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e78:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <SysTick_Config+0x40>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <SysTick_Config+0x40>)
 8005e80:	2207      	movs	r2, #7
 8005e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000e010 	.word	0xe000e010

08005e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ff29 	bl	8005cf4 <__NVIC_SetPriorityGrouping>
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ebc:	f7ff ff3e 	bl	8005d3c <__NVIC_GetPriorityGrouping>
 8005ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	6978      	ldr	r0, [r7, #20]
 8005ec8:	f7ff ff8e 	bl	8005de8 <NVIC_EncodePriority>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff ff5d 	bl	8005d94 <__NVIC_SetPriority>
}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	4603      	mov	r3, r0
 8005eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ff31 	bl	8005d58 <__NVIC_EnableIRQ>
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff ffa2 	bl	8005e50 <SysTick_Config>
 8005f0c:	4603      	mov	r3, r0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e054      	b.n	8005fd4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7f5b      	ldrb	r3, [r3, #29]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fbb0 	bl	80016a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	791b      	ldrb	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <HAL_CRC_Init+0xc4>)
 8005f54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0218 	bic.w	r2, r2, #24
 8005f64:	609a      	str	r2, [r3, #8]
 8005f66:	e00c      	b.n	8005f82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6899      	ldr	r1, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f834 	bl	8005fe0 <HAL_CRCEx_Polynomial_Set>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e028      	b.n	8005fd4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	795b      	ldrb	r3, [r3, #5]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	611a      	str	r2, [r3, #16]
 8005f94:	e004      	b.n	8005fa0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6912      	ldr	r2, [r2, #16]
 8005f9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	04c11db7 	.word	0x04c11db7

08005fe0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005ff0:	231f      	movs	r3, #31
 8005ff2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ff4:	bf00      	nop
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	613a      	str	r2, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <HAL_CRCEx_Polynomial_Set+0x34>
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_CRCEx_Polynomial_Set+0x16>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b18      	cmp	r3, #24
 8006018:	d846      	bhi.n	80060a8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <HAL_CRCEx_Polynomial_Set+0x40>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	080060af 	.word	0x080060af
 8006024:	080060a9 	.word	0x080060a9
 8006028:	080060a9 	.word	0x080060a9
 800602c:	080060a9 	.word	0x080060a9
 8006030:	080060a9 	.word	0x080060a9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	0800609d 	.word	0x0800609d
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	08006091 	.word	0x08006091
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060a9 	.word	0x080060a9
 8006080:	08006085 	.word	0x08006085
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d913      	bls.n	80060b2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800608e:	e010      	b.n	80060b2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b07      	cmp	r3, #7
 8006094:	d90f      	bls.n	80060b6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800609a:	e00c      	b.n	80060b6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d90b      	bls.n	80060ba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80060a6:	e008      	b.n	80060ba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	e006      	b.n	80060bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80060ba:	bf00      	nop
  }
  if (status == HAL_OK)
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 0118 	bic.w	r1, r3, #24
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e098      	b.n	8006230 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	4b4d      	ldr	r3, [pc, #308]	; (800623c <HAL_DMA_Init+0x150>)
 8006106:	429a      	cmp	r2, r3
 8006108:	d80f      	bhi.n	800612a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <HAL_DMA_Init+0x154>)
 8006112:	4413      	add	r3, r2
 8006114:	4a4b      	ldr	r2, [pc, #300]	; (8006244 <HAL_DMA_Init+0x158>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	091b      	lsrs	r3, r3, #4
 800611c:	009a      	lsls	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a48      	ldr	r2, [pc, #288]	; (8006248 <HAL_DMA_Init+0x15c>)
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
 8006128:	e00e      	b.n	8006148 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_DMA_Init+0x160>)
 8006132:	4413      	add	r3, r2
 8006134:	4a43      	ldr	r2, [pc, #268]	; (8006244 <HAL_DMA_Init+0x158>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	009a      	lsls	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a42      	ldr	r2, [pc, #264]	; (8006250 <HAL_DMA_Init+0x164>)
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800616c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061a2:	d039      	beq.n	8006218 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <HAL_DMA_Init+0x15c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d11a      	bne.n	80061e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061ae:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_DMA_Init+0x168>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f003 031c 	and.w	r3, r3, #28
 80061ba:	210f      	movs	r1, #15
 80061bc:	fa01 f303 	lsl.w	r3, r1, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	4924      	ldr	r1, [pc, #144]	; (8006254 <HAL_DMA_Init+0x168>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061c8:	4b22      	ldr	r3, [pc, #136]	; (8006254 <HAL_DMA_Init+0x168>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	f003 031c 	and.w	r3, r3, #28
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	491d      	ldr	r1, [pc, #116]	; (8006254 <HAL_DMA_Init+0x168>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	600b      	str	r3, [r1, #0]
 80061e2:	e019      	b.n	8006218 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <HAL_DMA_Init+0x16c>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	f003 031c 	and.w	r3, r3, #28
 80061f0:	210f      	movs	r1, #15
 80061f2:	fa01 f303 	lsl.w	r3, r1, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	4917      	ldr	r1, [pc, #92]	; (8006258 <HAL_DMA_Init+0x16c>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <HAL_DMA_Init+0x16c>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	f003 031c 	and.w	r3, r3, #28
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	4911      	ldr	r1, [pc, #68]	; (8006258 <HAL_DMA_Init+0x16c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40020407 	.word	0x40020407
 8006240:	bffdfff8 	.word	0xbffdfff8
 8006244:	cccccccd 	.word	0xcccccccd
 8006248:	40020000 	.word	0x40020000
 800624c:	bffdfbf8 	.word	0xbffdfbf8
 8006250:	40020400 	.word	0x40020400
 8006254:	400200a8 	.word	0x400200a8
 8006258:	400204a8 	.word	0x400204a8

0800625c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_DMA_Start_IT+0x20>
 8006278:	2302      	movs	r3, #2
 800627a:	e04b      	b.n	8006314 <HAL_DMA_Start_IT+0xb8>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d13a      	bne.n	8006306 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f8e0 	bl	800647a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 020e 	orr.w	r2, r2, #14
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e00f      	b.n	80062f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0204 	bic.w	r2, r2, #4
 80062e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 020a 	orr.w	r2, r2, #10
 80062f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e005      	b.n	8006312 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800630e:	2302      	movs	r3, #2
 8006310:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	f003 031c 	and.w	r3, r3, #28
 800633c:	2204      	movs	r2, #4
 800633e:	409a      	lsls	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4013      	ands	r3, r2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d026      	beq.n	8006396 <HAL_DMA_IRQHandler+0x7a>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d021      	beq.n	8006396 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0204 	bic.w	r2, r2, #4
 800636e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006374:	f003 021c 	and.w	r2, r3, #28
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2104      	movs	r1, #4
 800637e:	fa01 f202 	lsl.w	r2, r1, r2
 8006382:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d071      	beq.n	8006470 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006394:	e06c      	b.n	8006470 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f003 031c 	and.w	r3, r3, #28
 800639e:	2202      	movs	r2, #2
 80063a0:	409a      	lsls	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d02e      	beq.n	8006408 <HAL_DMA_IRQHandler+0xec>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d029      	beq.n	8006408 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 020a 	bic.w	r2, r2, #10
 80063d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f003 021c 	and.w	r2, r3, #28
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2102      	movs	r1, #2
 80063e8:	fa01 f202 	lsl.w	r2, r1, r2
 80063ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d038      	beq.n	8006470 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006406:	e033      	b.n	8006470 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640c:	f003 031c 	and.w	r3, r3, #28
 8006410:	2208      	movs	r2, #8
 8006412:	409a      	lsls	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02a      	beq.n	8006472 <HAL_DMA_IRQHandler+0x156>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d025      	beq.n	8006472 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 020e 	bic.w	r2, r2, #14
 8006434:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f003 021c 	and.w	r2, r3, #28
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2101      	movs	r1, #1
 8006444:	fa01 f202 	lsl.w	r2, r1, r2
 8006448:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006470:	bf00      	nop
 8006472:	bf00      	nop
}
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648c:	f003 021c 	and.w	r2, r3, #28
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f202 	lsl.w	r2, r1, r2
 800649a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d108      	bne.n	80064be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064bc:	e007      	b.n	80064ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064ea:	e17f      	b.n	80067ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2101      	movs	r1, #1
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8171 	beq.w	80067e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d005      	beq.n	800651c <HAL_GPIO_Init+0x40>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d130      	bne.n	800657e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4013      	ands	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006552:	2201      	movs	r2, #1
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43db      	mvns	r3, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4013      	ands	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	f003 0201 	and.w	r2, r3, #1
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b03      	cmp	r3, #3
 8006588:	d118      	bne.n	80065bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006590:	2201      	movs	r2, #1
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	08db      	lsrs	r3, r3, #3
 80065a6:	f003 0201 	and.w	r2, r3, #1
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d017      	beq.n	80065f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	2203      	movs	r2, #3
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	43db      	mvns	r3, r3
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4013      	ands	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d123      	bne.n	800664c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	08da      	lsrs	r2, r3, #3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3208      	adds	r2, #8
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	220f      	movs	r2, #15
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	43db      	mvns	r3, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4013      	ands	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	08da      	lsrs	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3208      	adds	r2, #8
 8006646:	6939      	ldr	r1, [r7, #16]
 8006648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	2203      	movs	r2, #3
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4013      	ands	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 0203 	and.w	r2, r3, #3
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80ac 	beq.w	80067e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800668e:	4b5f      	ldr	r3, [pc, #380]	; (800680c <HAL_GPIO_Init+0x330>)
 8006690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006692:	4a5e      	ldr	r2, [pc, #376]	; (800680c <HAL_GPIO_Init+0x330>)
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	6613      	str	r3, [r2, #96]	; 0x60
 800669a:	4b5c      	ldr	r3, [pc, #368]	; (800680c <HAL_GPIO_Init+0x330>)
 800669c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066a6:	4a5a      	ldr	r2, [pc, #360]	; (8006810 <HAL_GPIO_Init+0x334>)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	089b      	lsrs	r3, r3, #2
 80066ac:	3302      	adds	r3, #2
 80066ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	220f      	movs	r2, #15
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4013      	ands	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066d0:	d025      	beq.n	800671e <HAL_GPIO_Init+0x242>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4f      	ldr	r2, [pc, #316]	; (8006814 <HAL_GPIO_Init+0x338>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01f      	beq.n	800671a <HAL_GPIO_Init+0x23e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a4e      	ldr	r2, [pc, #312]	; (8006818 <HAL_GPIO_Init+0x33c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d019      	beq.n	8006716 <HAL_GPIO_Init+0x23a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a4d      	ldr	r2, [pc, #308]	; (800681c <HAL_GPIO_Init+0x340>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_GPIO_Init+0x236>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a4c      	ldr	r2, [pc, #304]	; (8006820 <HAL_GPIO_Init+0x344>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00d      	beq.n	800670e <HAL_GPIO_Init+0x232>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a4b      	ldr	r2, [pc, #300]	; (8006824 <HAL_GPIO_Init+0x348>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <HAL_GPIO_Init+0x22e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <HAL_GPIO_Init+0x34c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d101      	bne.n	8006706 <HAL_GPIO_Init+0x22a>
 8006702:	2306      	movs	r3, #6
 8006704:	e00c      	b.n	8006720 <HAL_GPIO_Init+0x244>
 8006706:	2307      	movs	r3, #7
 8006708:	e00a      	b.n	8006720 <HAL_GPIO_Init+0x244>
 800670a:	2305      	movs	r3, #5
 800670c:	e008      	b.n	8006720 <HAL_GPIO_Init+0x244>
 800670e:	2304      	movs	r3, #4
 8006710:	e006      	b.n	8006720 <HAL_GPIO_Init+0x244>
 8006712:	2303      	movs	r3, #3
 8006714:	e004      	b.n	8006720 <HAL_GPIO_Init+0x244>
 8006716:	2302      	movs	r3, #2
 8006718:	e002      	b.n	8006720 <HAL_GPIO_Init+0x244>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <HAL_GPIO_Init+0x244>
 800671e:	2300      	movs	r3, #0
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	f002 0203 	and.w	r2, r2, #3
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	4093      	lsls	r3, r2
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006730:	4937      	ldr	r1, [pc, #220]	; (8006810 <HAL_GPIO_Init+0x334>)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	3302      	adds	r3, #2
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800673e:	4b3b      	ldr	r3, [pc, #236]	; (800682c <HAL_GPIO_Init+0x350>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	43db      	mvns	r3, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4013      	ands	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006762:	4a32      	ldr	r2, [pc, #200]	; (800682c <HAL_GPIO_Init+0x350>)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006768:	4b30      	ldr	r3, [pc, #192]	; (800682c <HAL_GPIO_Init+0x350>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	43db      	mvns	r3, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <HAL_GPIO_Init+0x350>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <HAL_GPIO_Init+0x350>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	43db      	mvns	r3, r3
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4013      	ands	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067b6:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_GPIO_Init+0x350>)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_GPIO_Init+0x350>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4013      	ands	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067e0:	4a12      	ldr	r2, [pc, #72]	; (800682c <HAL_GPIO_Init+0x350>)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	3301      	adds	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f47f ae78 	bne.w	80064ec <HAL_GPIO_Init+0x10>
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	40010000 	.word	0x40010000
 8006814:	48000400 	.word	0x48000400
 8006818:	48000800 	.word	0x48000800
 800681c:	48000c00 	.word	0x48000c00
 8006820:	48001000 	.word	0x48001000
 8006824:	48001400 	.word	0x48001400
 8006828:	48001800 	.word	0x48001800
 800682c:	40010400 	.word	0x40010400

08006830 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800683e:	e0cd      	b.n	80069dc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006840:	2201      	movs	r2, #1
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80c0 	beq.w	80069d6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006856:	4a68      	ldr	r2, [pc, #416]	; (80069f8 <HAL_GPIO_DeInit+0x1c8>)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	3302      	adds	r3, #2
 800685e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006862:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	220f      	movs	r2, #15
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800687e:	d025      	beq.n	80068cc <HAL_GPIO_DeInit+0x9c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a5e      	ldr	r2, [pc, #376]	; (80069fc <HAL_GPIO_DeInit+0x1cc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d01f      	beq.n	80068c8 <HAL_GPIO_DeInit+0x98>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a5d      	ldr	r2, [pc, #372]	; (8006a00 <HAL_GPIO_DeInit+0x1d0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d019      	beq.n	80068c4 <HAL_GPIO_DeInit+0x94>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a5c      	ldr	r2, [pc, #368]	; (8006a04 <HAL_GPIO_DeInit+0x1d4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_GPIO_DeInit+0x90>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a5b      	ldr	r2, [pc, #364]	; (8006a08 <HAL_GPIO_DeInit+0x1d8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00d      	beq.n	80068bc <HAL_GPIO_DeInit+0x8c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a5a      	ldr	r2, [pc, #360]	; (8006a0c <HAL_GPIO_DeInit+0x1dc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <HAL_GPIO_DeInit+0x88>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a59      	ldr	r2, [pc, #356]	; (8006a10 <HAL_GPIO_DeInit+0x1e0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d101      	bne.n	80068b4 <HAL_GPIO_DeInit+0x84>
 80068b0:	2306      	movs	r3, #6
 80068b2:	e00c      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068b4:	2307      	movs	r3, #7
 80068b6:	e00a      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068b8:	2305      	movs	r3, #5
 80068ba:	e008      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068bc:	2304      	movs	r3, #4
 80068be:	e006      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068c0:	2303      	movs	r3, #3
 80068c2:	e004      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e002      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_GPIO_DeInit+0x9e>
 80068cc:	2300      	movs	r3, #0
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	f002 0203 	and.w	r2, r2, #3
 80068d4:	0092      	lsls	r2, r2, #2
 80068d6:	4093      	lsls	r3, r2
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d132      	bne.n	8006944 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068de:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	494b      	ldr	r1, [pc, #300]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068ec:	4b49      	ldr	r3, [pc, #292]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	43db      	mvns	r3, r3
 80068f4:	4947      	ldr	r1, [pc, #284]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068fa:	4b46      	ldr	r3, [pc, #280]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	43db      	mvns	r3, r3
 8006902:	4944      	ldr	r1, [pc, #272]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006904:	4013      	ands	r3, r2
 8006906:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006908:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	43db      	mvns	r3, r3
 8006910:	4940      	ldr	r1, [pc, #256]	; (8006a14 <HAL_GPIO_DeInit+0x1e4>)
 8006912:	4013      	ands	r3, r2
 8006914:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	220f      	movs	r2, #15
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006926:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <HAL_GPIO_DeInit+0x1c8>)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	3302      	adds	r3, #2
 800692e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	43da      	mvns	r2, r3
 8006936:	4830      	ldr	r0, [pc, #192]	; (80069f8 <HAL_GPIO_DeInit+0x1c8>)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	400a      	ands	r2, r1
 800693e:	3302      	adds	r3, #2
 8006940:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	2103      	movs	r1, #3
 800694e:	fa01 f303 	lsl.w	r3, r1, r3
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	220f      	movs	r2, #15
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43db      	mvns	r3, r3
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	08d2      	lsrs	r2, r2, #3
 8006978:	4019      	ands	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3208      	adds	r2, #8
 800697e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	2103      	movs	r1, #3
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	2101      	movs	r1, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	2103      	movs	r1, #3
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	43db      	mvns	r3, r3
 80069bc:	401a      	ands	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	2101      	movs	r1, #1
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	fa01 f303 	lsl.w	r3, r1, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	401a      	ands	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	3301      	adds	r3, #1
 80069da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f47f af2b 	bne.w	8006840 <HAL_GPIO_DeInit+0x10>
  }
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40010000 	.word	0x40010000
 80069fc:	48000400 	.word	0x48000400
 8006a00:	48000800 	.word	0x48000800
 8006a04:	48000c00 	.word	0x48000c00
 8006a08:	48001000 	.word	0x48001000
 8006a0c:	48001400 	.word	0x48001400
 8006a10:	48001800 	.word	0x48001800
 8006a14:	40010400 	.word	0x40010400

08006a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	807b      	strh	r3, [r7, #2]
 8006a24:	4613      	mov	r3, r2
 8006a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a28:	787b      	ldrb	r3, [r7, #1]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a34:	e002      	b.n	8006a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a52:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a5e:	4a05      	ldr	r2, [pc, #20]	; (8006a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fa fffa 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40010400 	.word	0x40010400

08006a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e081      	b.n	8006b8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8a8 	bl	8006bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2224      	movs	r2, #36	; 0x24
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d107      	bne.n	8006af2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	e006      	b.n	8006b00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006afe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d104      	bne.n	8006b12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69d9      	ldr	r1, [r3, #28]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e021      	b.n	8006bec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	; 0x24
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f821 	bl	8006c08 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	817b      	strh	r3, [r7, #10]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	813b      	strh	r3, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	f040 80f9 	bne.w	8006e36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x34>
 8006c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0ed      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_I2C_Mem_Write+0x4e>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e0e6      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c72:	f7ff f833 	bl	8005cdc <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2319      	movs	r3, #25
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fadd 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0d1      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2221      	movs	r2, #33	; 0x21
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cbc:	88f8      	ldrh	r0, [r7, #6]
 8006cbe:	893a      	ldrh	r2, [r7, #8]
 8006cc0:	8979      	ldrh	r1, [r7, #10]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4603      	mov	r3, r0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f9ed 	bl	80070ac <I2C_RequestMemoryWrite>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0a9      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2bff      	cmp	r3, #255	; 0xff
 8006cec:	d90e      	bls.n	8006d0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	22ff      	movs	r2, #255	; 0xff
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	8979      	ldrh	r1, [r7, #10]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fc45 	bl	8007594 <I2C_TransferConfig>
 8006d0a:	e00f      	b.n	8006d2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	8979      	ldrh	r1, [r7, #10]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fc34 	bl	8007594 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fac7 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e07b      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	781a      	ldrb	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d034      	beq.n	8006de4 <HAL_I2C_Mem_Write+0x1c8>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d130      	bne.n	8006de4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fa59 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e04d      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2bff      	cmp	r3, #255	; 0xff
 8006da4:	d90e      	bls.n	8006dc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	22ff      	movs	r2, #255	; 0xff
 8006daa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	8979      	ldrh	r1, [r7, #10]
 8006db4:	2300      	movs	r3, #0
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fbe9 	bl	8007594 <I2C_TransferConfig>
 8006dc2:	e00f      	b.n	8006de4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	8979      	ldrh	r1, [r7, #10]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fbd8 	bl	8007594 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d19e      	bne.n	8006d2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 faa6 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e01a      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2220      	movs	r2, #32
 8006e08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6859      	ldr	r1, [r3, #4]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_I2C_Mem_Write+0x224>)
 8006e16:	400b      	ands	r3, r1
 8006e18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e36:	2302      	movs	r3, #2
  }
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	fe00e800 	.word	0xfe00e800

08006e44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	461a      	mov	r2, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	817b      	strh	r3, [r7, #10]
 8006e56:	460b      	mov	r3, r1
 8006e58:	813b      	strh	r3, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	f040 80fd 	bne.w	8007066 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_I2C_Mem_Read+0x34>
 8006e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0f1      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2C_Mem_Read+0x4e>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e0ea      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e9a:	f7fe ff1f 	bl	8005cdc <HAL_GetTick>
 8006e9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2319      	movs	r3, #25
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f9c9 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0d5      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2222      	movs	r2, #34	; 0x22
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2240      	movs	r2, #64	; 0x40
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a3a      	ldr	r2, [r7, #32]
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ee4:	88f8      	ldrh	r0, [r7, #6]
 8006ee6:	893a      	ldrh	r2, [r7, #8]
 8006ee8:	8979      	ldrh	r1, [r7, #10]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f92d 	bl	8007154 <I2C_RequestMemoryRead>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0ad      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2bff      	cmp	r3, #255	; 0xff
 8006f14:	d90e      	bls.n	8006f34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	8979      	ldrh	r1, [r7, #10]
 8006f24:	4b52      	ldr	r3, [pc, #328]	; (8007070 <HAL_I2C_Mem_Read+0x22c>)
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fb31 	bl	8007594 <I2C_TransferConfig>
 8006f32:	e00f      	b.n	8006f54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	8979      	ldrh	r1, [r7, #10]
 8006f46:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <HAL_I2C_Mem_Read+0x22c>)
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fb20 	bl	8007594 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2104      	movs	r1, #4
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f970 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e07c      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d034      	beq.n	8007014 <HAL_I2C_Mem_Read+0x1d0>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d130      	bne.n	8007014 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f941 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e04d      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d90e      	bls.n	8006ff4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	8979      	ldrh	r1, [r7, #10]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fad1 	bl	8007594 <I2C_TransferConfig>
 8006ff2:	e00f      	b.n	8007014 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007002:	b2da      	uxtb	r2, r3
 8007004:	8979      	ldrh	r1, [r7, #10]
 8007006:	2300      	movs	r3, #0
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fac0 	bl	8007594 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d19a      	bne.n	8006f54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f98e 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e01a      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2220      	movs	r2, #32
 8007038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <HAL_I2C_Mem_Read+0x230>)
 8007046:	400b      	ands	r3, r1
 8007048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
  }
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	80002400 	.word	0x80002400
 8007074:	fe00e800 	.word	0xfe00e800

08007078 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007086:	b2db      	uxtb	r3, r3
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	817b      	strh	r3, [r7, #10]
 80070be:	460b      	mov	r3, r1
 80070c0:	813b      	strh	r3, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	8979      	ldrh	r1, [r7, #10]
 80070cc:	4b20      	ldr	r3, [pc, #128]	; (8007150 <I2C_RequestMemoryWrite+0xa4>)
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fa5d 	bl	8007594 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f8f0 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e02c      	b.n	8007148 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d105      	bne.n	8007100 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070f4:	893b      	ldrh	r3, [r7, #8]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	629a      	str	r2, [r3, #40]	; 0x28
 80070fe:	e015      	b.n	800712c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007100:	893b      	ldrh	r3, [r7, #8]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b29b      	uxth	r3, r3
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f8d6 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e012      	b.n	8007148 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007122:	893b      	ldrh	r3, [r7, #8]
 8007124:	b2da      	uxtb	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2200      	movs	r2, #0
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f884 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	80002000 	.word	0x80002000

08007154 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4603      	mov	r3, r0
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	460b      	mov	r3, r1
 8007168:	813b      	strh	r3, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	8979      	ldrh	r1, [r7, #10]
 8007174:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <I2C_RequestMemoryRead+0xa4>)
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	2300      	movs	r3, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fa0a 	bl	8007594 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	69b9      	ldr	r1, [r7, #24]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f89d 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e02c      	b.n	80071ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d105      	bne.n	80071a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	629a      	str	r2, [r3, #40]	; 0x28
 80071a4:	e015      	b.n	80071d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071a6:	893b      	ldrh	r3, [r7, #8]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	69b9      	ldr	r1, [r7, #24]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f883 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e012      	b.n	80071ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071c8:	893b      	ldrh	r3, [r7, #8]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2200      	movs	r2, #0
 80071da:	2140      	movs	r1, #64	; 0x40
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f831 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	80002000 	.word	0x80002000

080071fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d007      	beq.n	8007238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	619a      	str	r2, [r3, #24]
  }
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007254:	e022      	b.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d01e      	beq.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fe fd3d 	bl	8005cdc <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d113      	bne.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e00f      	b.n	80072bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d0cd      	beq.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072d0:	e02c      	b.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f870 	bl	80073bc <I2C_IsErrorOccurred>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02a      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d01e      	beq.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fe fcf5 	bl	8005cdc <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d113      	bne.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e007      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b02      	cmp	r3, #2
 8007338:	d1cb      	bne.n	80072d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007350:	e028      	b.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f830 	bl	80073bc <I2C_IsErrorOccurred>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e026      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fe fcb9 	bl	8005cdc <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d113      	bne.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e007      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d1cf      	bne.n	8007352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d075      	beq.n	80074d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2210      	movs	r2, #16
 80073ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073f0:	e056      	b.n	80074a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d052      	beq.n	80074a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073fa:	f7fe fc6f 	bl	8005cdc <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	429a      	cmp	r2, r3
 8007408:	d302      	bcc.n	8007410 <I2C_IsErrorOccurred+0x54>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d147      	bne.n	80074a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d12e      	bne.n	8007492 <I2C_IsErrorOccurred+0xd6>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743a:	d02a      	beq.n	8007492 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800743c:	7cfb      	ldrb	r3, [r7, #19]
 800743e:	2b20      	cmp	r3, #32
 8007440:	d027      	beq.n	8007492 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007450:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007452:	f7fe fc43 	bl	8005cdc <HAL_GetTick>
 8007456:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007458:	e01b      	b.n	8007492 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800745a:	f7fe fc3f 	bl	8005cdc <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b19      	cmp	r3, #25
 8007466:	d914      	bls.n	8007492 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b20      	cmp	r3, #32
 800749e:	d1dc      	bne.n	800745a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d003      	beq.n	80074b6 <I2C_IsErrorOccurred+0xfa>
 80074ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d09d      	beq.n	80073f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2220      	movs	r2, #32
 80074c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f043 0304 	orr.w	r3, r3, #4
 80074cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f043 0308 	orr.w	r3, r3, #8
 800750e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01c      	beq.n	8007584 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fe56 	bl	80071fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6859      	ldr	r1, [r3, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <I2C_IsErrorOccurred+0x1d4>)
 800755c:	400b      	ands	r3, r1
 800755e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	431a      	orrs	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007588:	4618      	mov	r0, r3
 800758a:	3728      	adds	r7, #40	; 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	fe00e800 	.word	0xfe00e800

08007594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	817b      	strh	r3, [r7, #10]
 80075a2:	4613      	mov	r3, r2
 80075a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075a6:	897b      	ldrh	r3, [r7, #10]
 80075a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075ac:	7a7b      	ldrb	r3, [r7, #9]
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	4313      	orrs	r3, r2
 80075be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	0d5b      	lsrs	r3, r3, #21
 80075ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <I2C_TransferConfig+0x60>)
 80075d4:	430b      	orrs	r3, r1
 80075d6:	43db      	mvns	r3, r3
 80075d8:	ea02 0103 	and.w	r1, r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	03ff63ff 	.word	0x03ff63ff

080075f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b20      	cmp	r3, #32
 800760c:	d138      	bne.n	8007680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007618:	2302      	movs	r3, #2
 800761a:	e032      	b.n	8007682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800764a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	e000      	b.n	8007682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007680:	2302      	movs	r3, #2
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d139      	bne.n	8007718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e033      	b.n	800771a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2224      	movs	r2, #36	; 0x24
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <HAL_PWREx_GetVoltageRange+0x18>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40007000 	.word	0x40007000

08007744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007752:	d130      	bne.n	80077b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007754:	4b23      	ldr	r3, [pc, #140]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800775c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007760:	d038      	beq.n	80077d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007762:	4b20      	ldr	r3, [pc, #128]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800776c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007770:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2232      	movs	r2, #50	; 0x32
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800777e:	fba2 2303 	umull	r2, r3, r2, r3
 8007782:	0c9b      	lsrs	r3, r3, #18
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007788:	e002      	b.n	8007790 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3b01      	subs	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007790:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779c:	d102      	bne.n	80077a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f2      	bne.n	800778a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b0:	d110      	bne.n	80077d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c2:	d007      	beq.n	80077d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077cc:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40007000 	.word	0x40007000
 80077e8:	2000000c 	.word	0x2000000c
 80077ec:	431bde83 	.word	0x431bde83

080077f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e3d4      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007802:	4ba1      	ldr	r3, [pc, #644]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 030c 	and.w	r3, r3, #12
 800780a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800780c:	4b9e      	ldr	r3, [pc, #632]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 80e4 	beq.w	80079ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_RCC_OscConfig+0x4a>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b0c      	cmp	r3, #12
 800782e:	f040 808b 	bne.w	8007948 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 8087 	bne.w	8007948 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800783a:	4b93      	ldr	r3, [pc, #588]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <HAL_RCC_OscConfig+0x62>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e3ac      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	4b8c      	ldr	r3, [pc, #560]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <HAL_RCC_OscConfig+0x7c>
 8007862:	4b89      	ldr	r3, [pc, #548]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800786a:	e005      	b.n	8007878 <HAL_RCC_OscConfig+0x88>
 800786c:	4b86      	ldr	r3, [pc, #536]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 800786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007872:	091b      	lsrs	r3, r3, #4
 8007874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007878:	4293      	cmp	r3, r2
 800787a:	d223      	bcs.n	80078c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fd41 	bl	8008308 <RCC_SetFlashLatencyFromMSIRange>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e38d      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007890:	4b7d      	ldr	r3, [pc, #500]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a7c      	ldr	r2, [pc, #496]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007896:	f043 0308 	orr.w	r3, r3, #8
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	4b7a      	ldr	r3, [pc, #488]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	4977      	ldr	r1, [pc, #476]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078ae:	4b76      	ldr	r3, [pc, #472]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	4972      	ldr	r1, [pc, #456]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	604b      	str	r3, [r1, #4]
 80078c2:	e025      	b.n	8007910 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078c4:	4b70      	ldr	r3, [pc, #448]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a6f      	ldr	r2, [pc, #444]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078ca:	f043 0308 	orr.w	r3, r3, #8
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	4b6d      	ldr	r3, [pc, #436]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	496a      	ldr	r1, [pc, #424]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078e2:	4b69      	ldr	r3, [pc, #420]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	4965      	ldr	r1, [pc, #404]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fd01 	bl	8008308 <RCC_SetFlashLatencyFromMSIRange>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e34d      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007910:	f000 fc36 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b5c      	ldr	r3, [pc, #368]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	495a      	ldr	r1, [pc, #360]	; (8007a8c <HAL_RCC_OscConfig+0x29c>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	4a58      	ldr	r2, [pc, #352]	; (8007a90 <HAL_RCC_OscConfig+0x2a0>)
 800792e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007930:	4b58      	ldr	r3, [pc, #352]	; (8007a94 <HAL_RCC_OscConfig+0x2a4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe f981 	bl	8005c3c <HAL_InitTick>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d052      	beq.n	80079ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	e331      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d032      	beq.n	80079b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007950:	4b4d      	ldr	r3, [pc, #308]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a4c      	ldr	r2, [pc, #304]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800795c:	f7fe f9be 	bl	8005cdc <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007964:	f7fe f9ba 	bl	8005cdc <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e31a      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007976:	4b44      	ldr	r3, [pc, #272]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007982:	4b41      	ldr	r3, [pc, #260]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a40      	ldr	r2, [pc, #256]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007988:	f043 0308 	orr.w	r3, r3, #8
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b3e      	ldr	r3, [pc, #248]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	493b      	ldr	r1, [pc, #236]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 800799c:	4313      	orrs	r3, r2
 800799e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079a0:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	4936      	ldr	r1, [pc, #216]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	604b      	str	r3, [r1, #4]
 80079b4:	e01a      	b.n	80079ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079b6:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a33      	ldr	r2, [pc, #204]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079c2:	f7fe f98b 	bl	8005cdc <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079c8:	e008      	b.n	80079dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079ca:	f7fe f987 	bl	8005cdc <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e2e7      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079dc:	4b2a      	ldr	r3, [pc, #168]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <HAL_RCC_OscConfig+0x1da>
 80079e8:	e000      	b.n	80079ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d074      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d005      	beq.n	8007a0a <HAL_RCC_OscConfig+0x21a>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b0c      	cmp	r3, #12
 8007a02:	d10e      	bne.n	8007a22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d10b      	bne.n	8007a22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0a:	4b1f      	ldr	r3, [pc, #124]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d064      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d160      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e2c4      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCC_OscConfig+0x24a>
 8007a2c:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e01d      	b.n	8007a76 <HAL_RCC_OscConfig+0x286>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a42:	d10c      	bne.n	8007a5e <HAL_RCC_OscConfig+0x26e>
 8007a44:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e00b      	b.n	8007a76 <HAL_RCC_OscConfig+0x286>
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a06      	ldr	r2, [pc, #24]	; (8007a88 <HAL_RCC_OscConfig+0x298>)
 8007a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01c      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7e:	f7fe f92d 	bl	8005cdc <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a84:	e011      	b.n	8007aaa <HAL_RCC_OscConfig+0x2ba>
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	0801709c 	.word	0x0801709c
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a98:	f7fe f920 	bl	8005cdc <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b64      	cmp	r3, #100	; 0x64
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e280      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aaa:	4baf      	ldr	r3, [pc, #700]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x2a8>
 8007ab6:	e014      	b.n	8007ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fe f910 	bl	8005cdc <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ac0:	f7fe f90c 	bl	8005cdc <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b64      	cmp	r3, #100	; 0x64
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e26c      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ad2:	4ba5      	ldr	r3, [pc, #660]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x2d0>
 8007ade:	e000      	b.n	8007ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d060      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d005      	beq.n	8007b00 <HAL_RCC_OscConfig+0x310>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b0c      	cmp	r3, #12
 8007af8:	d119      	bne.n	8007b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d116      	bne.n	8007b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b00:	4b99      	ldr	r3, [pc, #612]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_RCC_OscConfig+0x328>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e249      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b18:	4b93      	ldr	r3, [pc, #588]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	061b      	lsls	r3, r3, #24
 8007b26:	4990      	ldr	r1, [pc, #576]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b2c:	e040      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d023      	beq.n	8007b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b36:	4b8c      	ldr	r3, [pc, #560]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a8b      	ldr	r2, [pc, #556]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b42:	f7fe f8cb 	bl	8005cdc <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b4a:	f7fe f8c7 	bl	8005cdc <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e227      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b5c:	4b82      	ldr	r3, [pc, #520]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b68:	4b7f      	ldr	r3, [pc, #508]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	061b      	lsls	r3, r3, #24
 8007b76:	497c      	ldr	r1, [pc, #496]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	604b      	str	r3, [r1, #4]
 8007b7c:	e018      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b7e:	4b7a      	ldr	r3, [pc, #488]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a79      	ldr	r2, [pc, #484]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fe f8a7 	bl	8005cdc <HAL_GetTick>
 8007b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fe f8a3 	bl	8005cdc <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e203      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba4:	4b70      	ldr	r3, [pc, #448]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1f0      	bne.n	8007b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d03c      	beq.n	8007c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01c      	beq.n	8007bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bc4:	4b68      	ldr	r3, [pc, #416]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bca:	4a67      	ldr	r2, [pc, #412]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd4:	f7fe f882 	bl	8005cdc <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bdc:	f7fe f87e 	bl	8005cdc <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e1de      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bee:	4b5e      	ldr	r3, [pc, #376]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0ef      	beq.n	8007bdc <HAL_RCC_OscConfig+0x3ec>
 8007bfc:	e01b      	b.n	8007c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bfe:	4b5a      	ldr	r3, [pc, #360]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c04:	4a58      	ldr	r2, [pc, #352]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0e:	f7fe f865 	bl	8005cdc <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c16:	f7fe f861 	bl	8005cdc <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e1c1      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c28:	4b4f      	ldr	r3, [pc, #316]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1ef      	bne.n	8007c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a6 	beq.w	8007d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c44:	2300      	movs	r3, #0
 8007c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007c48:	4b47      	ldr	r3, [pc, #284]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10d      	bne.n	8007c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c54:	4b44      	ldr	r3, [pc, #272]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	4a43      	ldr	r2, [pc, #268]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c60:	4b41      	ldr	r3, [pc, #260]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <HAL_RCC_OscConfig+0x57c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d118      	bne.n	8007cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7c:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <HAL_RCC_OscConfig+0x57c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a3a      	ldr	r2, [pc, #232]	; (8007d6c <HAL_RCC_OscConfig+0x57c>)
 8007c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c88:	f7fe f828 	bl	8005cdc <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c90:	f7fe f824 	bl	8005cdc <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e184      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca2:	4b32      	ldr	r3, [pc, #200]	; (8007d6c <HAL_RCC_OscConfig+0x57c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d108      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x4d8>
 8007cb6:	4b2c      	ldr	r3, [pc, #176]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	4a2a      	ldr	r2, [pc, #168]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cc6:	e024      	b.n	8007d12 <HAL_RCC_OscConfig+0x522>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b05      	cmp	r3, #5
 8007cce:	d110      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x502>
 8007cd0:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ce0:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	4a20      	ldr	r2, [pc, #128]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cf0:	e00f      	b.n	8007d12 <HAL_RCC_OscConfig+0x522>
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d02:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007d0a:	f023 0304 	bic.w	r3, r3, #4
 8007d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d016      	beq.n	8007d48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1a:	f7fd ffdf 	bl	8005cdc <HAL_GetTick>
 8007d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d20:	e00a      	b.n	8007d38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d22:	f7fd ffdb 	bl	8005cdc <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e139      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d38:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <HAL_RCC_OscConfig+0x578>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0ed      	beq.n	8007d22 <HAL_RCC_OscConfig+0x532>
 8007d46:	e01a      	b.n	8007d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d48:	f7fd ffc8 	bl	8005cdc <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d4e:	e00f      	b.n	8007d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d50:	f7fd ffc4 	bl	8005cdc <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d906      	bls.n	8007d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e122      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
 8007d66:	bf00      	nop
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d70:	4b90      	ldr	r3, [pc, #576]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e8      	bne.n	8007d50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d7e:	7ffb      	ldrb	r3, [r7, #31]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d105      	bne.n	8007d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d84:	4b8b      	ldr	r3, [pc, #556]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	4a8a      	ldr	r2, [pc, #552]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8108 	beq.w	8007faa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	f040 80d0 	bne.w	8007f44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007da4:	4b83      	ldr	r3, [pc, #524]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f003 0203 	and.w	r2, r3, #3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d130      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d127      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d11f      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007de4:	2a07      	cmp	r2, #7
 8007de6:	bf14      	ite	ne
 8007de8:	2201      	movne	r2, #1
 8007dea:	2200      	moveq	r2, #0
 8007dec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d113      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d109      	bne.n	8007e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	3b01      	subs	r3, #1
 8007e14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d06e      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	d069      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007e20:	4b64      	ldr	r3, [pc, #400]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007e2c:	4b61      	ldr	r3, [pc, #388]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0b7      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007e3c:	4b5d      	ldr	r3, [pc, #372]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a5c      	ldr	r2, [pc, #368]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e48:	f7fd ff48 	bl	8005cdc <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e50:	f7fd ff44 	bl	8005cdc <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e0a4      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e62:	4b54      	ldr	r3, [pc, #336]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e6e:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	4b51      	ldr	r3, [pc, #324]	; (8007fb8 <HAL_RCC_OscConfig+0x7c8>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	0112      	lsls	r2, r2, #4
 8007e82:	4311      	orrs	r1, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e88:	0212      	lsls	r2, r2, #8
 8007e8a:	4311      	orrs	r1, r2
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e90:	0852      	lsrs	r2, r2, #1
 8007e92:	3a01      	subs	r2, #1
 8007e94:	0552      	lsls	r2, r2, #21
 8007e96:	4311      	orrs	r1, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e9c:	0852      	lsrs	r2, r2, #1
 8007e9e:	3a01      	subs	r2, #1
 8007ea0:	0652      	lsls	r2, r2, #25
 8007ea2:	4311      	orrs	r1, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ea8:	0912      	lsrs	r2, r2, #4
 8007eaa:	0452      	lsls	r2, r2, #17
 8007eac:	430a      	orrs	r2, r1
 8007eae:	4941      	ldr	r1, [pc, #260]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007eb4:	4b3f      	ldr	r3, [pc, #252]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a3e      	ldr	r2, [pc, #248]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ec0:	4b3c      	ldr	r3, [pc, #240]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	4a3b      	ldr	r2, [pc, #236]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ecc:	f7fd ff06 	bl	8005cdc <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed4:	f7fd ff02 	bl	8005cdc <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e062      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ee6:	4b33      	ldr	r3, [pc, #204]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0f0      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ef2:	e05a      	b.n	8007faa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e059      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ef8:	4b2e      	ldr	r3, [pc, #184]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d152      	bne.n	8007faa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007f04:	4b2b      	ldr	r3, [pc, #172]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	4a27      	ldr	r2, [pc, #156]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f1c:	f7fd fede 	bl	8005cdc <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f24:	f7fd feda 	bl	8005cdc <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e03a      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f36:	4b1f      	ldr	r3, [pc, #124]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0x734>
 8007f42:	e032      	b.n	8007faa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b0c      	cmp	r3, #12
 8007f48:	d02d      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f4a:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007f56:	4b17      	ldr	r3, [pc, #92]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	4a13      	ldr	r2, [pc, #76]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f6e:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4a10      	ldr	r2, [pc, #64]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7e:	f7fd fead 	bl	8005cdc <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f84:	e008      	b.n	8007f98 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f86:	f7fd fea9 	bl	8005cdc <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e009      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <HAL_RCC_OscConfig+0x7c4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1f0      	bne.n	8007f86 <HAL_RCC_OscConfig+0x796>
 8007fa4:	e001      	b.n	8007faa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	f99d808c 	.word	0xf99d808c

08007fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0c8      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd0:	4b66      	ldr	r3, [pc, #408]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d910      	bls.n	8008000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fde:	4b63      	ldr	r3, [pc, #396]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f023 0207 	bic.w	r2, r3, #7
 8007fe6:	4961      	ldr	r1, [pc, #388]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fee:	4b5f      	ldr	r3, [pc, #380]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d001      	beq.n	8008000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e0b0      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d04c      	beq.n	80080a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d107      	bne.n	8008024 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008014:	4b56      	ldr	r3, [pc, #344]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d121      	bne.n	8008064 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e09e      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d107      	bne.n	800803c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800802c:	4b50      	ldr	r3, [pc, #320]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d115      	bne.n	8008064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e092      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008044:	4b4a      	ldr	r3, [pc, #296]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e086      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008054:	4b46      	ldr	r3, [pc, #280]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e07e      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008064:	4b42      	ldr	r3, [pc, #264]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f023 0203 	bic.w	r2, r3, #3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	493f      	ldr	r1, [pc, #252]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008072:	4313      	orrs	r3, r2
 8008074:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008076:	f7fd fe31 	bl	8005cdc <HAL_GetTick>
 800807a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807c:	e00a      	b.n	8008094 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800807e:	f7fd fe2d 	bl	8005cdc <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	f241 3288 	movw	r2, #5000	; 0x1388
 800808c:	4293      	cmp	r3, r2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e066      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008094:	4b36      	ldr	r3, [pc, #216]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 020c 	and.w	r2, r3, #12
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d1eb      	bne.n	800807e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b2:	4b2f      	ldr	r3, [pc, #188]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	492c      	ldr	r1, [pc, #176]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080c4:	4b29      	ldr	r3, [pc, #164]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d210      	bcs.n	80080f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080d2:	4b26      	ldr	r3, [pc, #152]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f023 0207 	bic.w	r2, r3, #7
 80080da:	4924      	ldr	r1, [pc, #144]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4313      	orrs	r3, r2
 80080e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e2:	4b22      	ldr	r3, [pc, #136]	; (800816c <HAL_RCC_ClockConfig+0x1b0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e036      	b.n	8008162 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008100:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4918      	ldr	r1, [pc, #96]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 800810e:	4313      	orrs	r3, r2
 8008110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4910      	ldr	r1, [pc, #64]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 800812e:	4313      	orrs	r3, r2
 8008130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008132:	f000 f825 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 8008136:	4602      	mov	r2, r0
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <HAL_RCC_ClockConfig+0x1b4>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	091b      	lsrs	r3, r3, #4
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	490c      	ldr	r1, [pc, #48]	; (8008174 <HAL_RCC_ClockConfig+0x1b8>)
 8008144:	5ccb      	ldrb	r3, [r1, r3]
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	fa22 f303 	lsr.w	r3, r2, r3
 800814e:	4a0a      	ldr	r2, [pc, #40]	; (8008178 <HAL_RCC_ClockConfig+0x1bc>)
 8008150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_RCC_ClockConfig+0x1c0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd fd70 	bl	8005c3c <HAL_InitTick>
 800815c:	4603      	mov	r3, r0
 800815e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008160:	7afb      	ldrb	r3, [r7, #11]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40022000 	.word	0x40022000
 8008170:	40021000 	.word	0x40021000
 8008174:	0801709c 	.word	0x0801709c
 8008178:	2000000c 	.word	0x2000000c
 800817c:	200000e8 	.word	0x200000e8

08008180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008180:	b480      	push	{r7}
 8008182:	b089      	sub	sp, #36	; 0x24
 8008184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800818e:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f003 030c 	and.w	r3, r3, #12
 8008196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008198:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_RCC_GetSysClockFreq+0x34>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	d121      	bne.n	80081f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d11e      	bne.n	80081f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80081b4:	4b34      	ldr	r3, [pc, #208]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d107      	bne.n	80081d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80081c0:	4b31      	ldr	r3, [pc, #196]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 80081c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	e005      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80081d0:	4b2d      	ldr	r3, [pc, #180]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80081dc:	4a2b      	ldr	r2, [pc, #172]	; (800828c <HAL_RCC_GetSysClockFreq+0x10c>)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10d      	bne.n	8008208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081f0:	e00a      	b.n	8008208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d102      	bne.n	80081fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <HAL_RCC_GetSysClockFreq+0x110>)
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	e004      	b.n	8008208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d101      	bne.n	8008208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008204:	4b23      	ldr	r3, [pc, #140]	; (8008294 <HAL_RCC_GetSysClockFreq+0x114>)
 8008206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b0c      	cmp	r3, #12
 800820c:	d134      	bne.n	8008278 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800820e:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d003      	beq.n	8008226 <HAL_RCC_GetSysClockFreq+0xa6>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d003      	beq.n	800822c <HAL_RCC_GetSysClockFreq+0xac>
 8008224:	e005      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <HAL_RCC_GetSysClockFreq+0x110>)
 8008228:	617b      	str	r3, [r7, #20]
      break;
 800822a:	e005      	b.n	8008238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800822c:	4b19      	ldr	r3, [pc, #100]	; (8008294 <HAL_RCC_GetSysClockFreq+0x114>)
 800822e:	617b      	str	r3, [r7, #20]
      break;
 8008230:	e002      	b.n	8008238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	617b      	str	r3, [r7, #20]
      break;
 8008236:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008238:	4b13      	ldr	r3, [pc, #76]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	fb02 f203 	mul.w	r2, r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <HAL_RCC_GetSysClockFreq+0x108>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	0e5b      	lsrs	r3, r3, #25
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	3301      	adds	r3, #1
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008278:	69bb      	ldr	r3, [r7, #24]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3724      	adds	r7, #36	; 0x24
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40021000 	.word	0x40021000
 800828c:	080170b4 	.word	0x080170b4
 8008290:	00f42400 	.word	0x00f42400
 8008294:	007a1200 	.word	0x007a1200

08008298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800829c:	4b03      	ldr	r3, [pc, #12]	; (80082ac <HAL_RCC_GetHCLKFreq+0x14>)
 800829e:	681b      	ldr	r3, [r3, #0]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	2000000c 	.word	0x2000000c

080082b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082b4:	f7ff fff0 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 80082b8:	4602      	mov	r2, r0
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082c6:	5ccb      	ldrb	r3, [r1, r3]
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40021000 	.word	0x40021000
 80082d8:	080170ac 	.word	0x080170ac

080082dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082e0:	f7ff ffda 	bl	8008298 <HAL_RCC_GetHCLKFreq>
 80082e4:	4602      	mov	r2, r0
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0adb      	lsrs	r3, r3, #11
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	4904      	ldr	r1, [pc, #16]	; (8008304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80082f2:	5ccb      	ldrb	r3, [r1, r3]
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40021000 	.word	0x40021000
 8008304:	080170ac 	.word	0x080170ac

08008308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008310:	2300      	movs	r3, #0
 8008312:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008314:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008320:	f7ff fa02 	bl	8007728 <HAL_PWREx_GetVoltageRange>
 8008324:	6178      	str	r0, [r7, #20]
 8008326:	e014      	b.n	8008352 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832c:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800832e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008332:	6593      	str	r3, [r2, #88]	; 0x58
 8008334:	4b22      	ldr	r3, [pc, #136]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008340:	f7ff f9f2 	bl	8007728 <HAL_PWREx_GetVoltageRange>
 8008344:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008346:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800834c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008350:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008358:	d10b      	bne.n	8008372 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b80      	cmp	r3, #128	; 0x80
 800835e:	d919      	bls.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2ba0      	cmp	r3, #160	; 0xa0
 8008364:	d902      	bls.n	800836c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008366:	2302      	movs	r3, #2
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	e013      	b.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800836c:	2301      	movs	r3, #1
 800836e:	613b      	str	r3, [r7, #16]
 8008370:	e010      	b.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b80      	cmp	r3, #128	; 0x80
 8008376:	d902      	bls.n	800837e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008378:	2303      	movs	r3, #3
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	e00a      	b.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d102      	bne.n	800838a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008384:	2302      	movs	r3, #2
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	e004      	b.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b70      	cmp	r3, #112	; 0x70
 800838e:	d101      	bne.n	8008394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008390:	2301      	movs	r3, #1
 8008392:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f023 0207 	bic.w	r2, r3, #7
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d001      	beq.n	80083b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	40021000 	.word	0x40021000
 80083c4:	40022000 	.word	0x40022000

080083c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083d0:	2300      	movs	r3, #0
 80083d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083d4:	2300      	movs	r3, #0
 80083d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d041      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083ec:	d02a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80083ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083f2:	d824      	bhi.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083f8:	d008      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80083fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083fe:	d81e      	bhi.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008408:	d010      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800840a:	e018      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800840c:	4b86      	ldr	r3, [pc, #536]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	4a85      	ldr	r2, [pc, #532]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008416:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008418:	e015      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3304      	adds	r3, #4
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fabb 	bl	800899c <RCCEx_PLLSAI1_Config>
 8008426:	4603      	mov	r3, r0
 8008428:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800842a:	e00c      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3320      	adds	r3, #32
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fba6 	bl	8008b84 <RCCEx_PLLSAI2_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800843c:	e003      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	74fb      	strb	r3, [r7, #19]
      break;
 8008442:	e000      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008446:	7cfb      	ldrb	r3, [r7, #19]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800844c:	4b76      	ldr	r3, [pc, #472]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800845a:	4973      	ldr	r1, [pc, #460]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800845c:	4313      	orrs	r3, r2
 800845e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008462:	e001      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008464:	7cfb      	ldrb	r3, [r7, #19]
 8008466:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d041      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800847c:	d02a      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800847e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008482:	d824      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008488:	d008      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800848a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800848e:	d81e      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008498:	d010      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800849a:	e018      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800849c:	4b62      	ldr	r3, [pc, #392]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4a61      	ldr	r2, [pc, #388]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084a8:	e015      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fa73 	bl	800899c <RCCEx_PLLSAI1_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084ba:	e00c      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3320      	adds	r3, #32
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fb5e 	bl	8008b84 <RCCEx_PLLSAI2_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084cc:	e003      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	74fb      	strb	r3, [r7, #19]
      break;
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80084d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d6:	7cfb      	ldrb	r3, [r7, #19]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084dc:	4b52      	ldr	r3, [pc, #328]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ea:	494f      	ldr	r1, [pc, #316]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80084f2:	e001      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f4:	7cfb      	ldrb	r3, [r7, #19]
 80084f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80a0 	beq.w	8008646 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008506:	2300      	movs	r3, #0
 8008508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800850a:	4b47      	ldr	r3, [pc, #284]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00d      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008520:	4b41      	ldr	r3, [pc, #260]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008524:	4a40      	ldr	r2, [pc, #256]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852a:	6593      	str	r3, [r2, #88]	; 0x58
 800852c:	4b3e      	ldr	r3, [pc, #248]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008538:	2301      	movs	r3, #1
 800853a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800853c:	4b3b      	ldr	r3, [pc, #236]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a3a      	ldr	r2, [pc, #232]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008548:	f7fd fbc8 	bl	8005cdc <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800854e:	e009      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008550:	f7fd fbc4 	bl	8005cdc <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d902      	bls.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	74fb      	strb	r3, [r7, #19]
        break;
 8008562:	e005      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008564:	4b31      	ldr	r3, [pc, #196]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0ef      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008570:	7cfb      	ldrb	r3, [r7, #19]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d15c      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008576:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01f      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	429a      	cmp	r2, r3
 8008592:	d019      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085a0:	4b21      	ldr	r3, [pc, #132]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	4a20      	ldr	r2, [pc, #128]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085b0:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b6:	4a1c      	ldr	r2, [pc, #112]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80085c0:	4a19      	ldr	r2, [pc, #100]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d016      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d2:	f7fd fb83 	bl	8005cdc <HAL_GetTick>
 80085d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085d8:	e00b      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085da:	f7fd fb7f 	bl	8005cdc <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d902      	bls.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	74fb      	strb	r3, [r7, #19]
            break;
 80085f0:	e006      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0ec      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10c      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008616:	4904      	ldr	r1, [pc, #16]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800861e:	e009      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008620:	7cfb      	ldrb	r3, [r7, #19]
 8008622:	74bb      	strb	r3, [r7, #18]
 8008624:	e006      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008626:	bf00      	nop
 8008628:	40021000 	.word	0x40021000
 800862c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	7cfb      	ldrb	r3, [r7, #19]
 8008632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008634:	7c7b      	ldrb	r3, [r7, #17]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d105      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800863a:	4b9e      	ldr	r3, [pc, #632]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863e:	4a9d      	ldr	r2, [pc, #628]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008652:	4b98      	ldr	r3, [pc, #608]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	f023 0203 	bic.w	r2, r3, #3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	4994      	ldr	r1, [pc, #592]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008674:	4b8f      	ldr	r3, [pc, #572]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867a:	f023 020c 	bic.w	r2, r3, #12
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	498c      	ldr	r1, [pc, #560]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008696:	4b87      	ldr	r3, [pc, #540]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	4983      	ldr	r1, [pc, #524]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086b8:	4b7e      	ldr	r3, [pc, #504]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	497b      	ldr	r1, [pc, #492]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086da:	4b76      	ldr	r3, [pc, #472]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e8:	4972      	ldr	r1, [pc, #456]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086fc:	4b6d      	ldr	r3, [pc, #436]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870a:	496a      	ldr	r1, [pc, #424]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800870c:	4313      	orrs	r3, r2
 800870e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800871e:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008724:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872c:	4961      	ldr	r1, [pc, #388]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008740:	4b5c      	ldr	r3, [pc, #368]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874e:	4959      	ldr	r1, [pc, #356]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008750:	4313      	orrs	r3, r2
 8008752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008762:	4b54      	ldr	r3, [pc, #336]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008770:	4950      	ldr	r1, [pc, #320]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008772:	4313      	orrs	r3, r2
 8008774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008784:	4b4b      	ldr	r3, [pc, #300]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008792:	4948      	ldr	r1, [pc, #288]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087a6:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b4:	493f      	ldr	r1, [pc, #252]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d028      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087c8:	4b3a      	ldr	r3, [pc, #232]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d6:	4937      	ldr	r1, [pc, #220]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e6:	d106      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087e8:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4a31      	ldr	r2, [pc, #196]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f2:	60d3      	str	r3, [r2, #12]
 80087f4:	e011      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087fe:	d10c      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3304      	adds	r3, #4
 8008804:	2101      	movs	r1, #1
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f8c8 	bl	800899c <RCCEx_PLLSAI1_Config>
 800880c:	4603      	mov	r3, r0
 800880e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008810:	7cfb      	ldrb	r3, [r7, #19]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008816:	7cfb      	ldrb	r3, [r7, #19]
 8008818:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d028      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008826:	4b23      	ldr	r3, [pc, #140]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	491f      	ldr	r1, [pc, #124]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008846:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800884c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008850:	60d3      	str	r3, [r2, #12]
 8008852:	e011      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800885c:	d10c      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f899 	bl	800899c <RCCEx_PLLSAI1_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800886e:	7cfb      	ldrb	r3, [r7, #19]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008874:	7cfb      	ldrb	r3, [r7, #19]
 8008876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02b      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008892:	4908      	ldr	r1, [pc, #32]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a2:	d109      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088a4:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4a02      	ldr	r2, [pc, #8]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ae:	60d3      	str	r3, [r2, #12]
 80088b0:	e014      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80088b2:	bf00      	nop
 80088b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088c0:	d10c      	bne.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3304      	adds	r3, #4
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f867 	bl	800899c <RCCEx_PLLSAI1_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088d2:	7cfb      	ldrb	r3, [r7, #19]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80088d8:	7cfb      	ldrb	r3, [r7, #19]
 80088da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d02f      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088e8:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f6:	4928      	ldr	r1, [pc, #160]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008906:	d10d      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	2102      	movs	r1, #2
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f844 	bl	800899c <RCCEx_PLLSAI1_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008918:	7cfb      	ldrb	r3, [r7, #19]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d014      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800891e:	7cfb      	ldrb	r3, [r7, #19]
 8008920:	74bb      	strb	r3, [r7, #18]
 8008922:	e011      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892c:	d10c      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3320      	adds	r3, #32
 8008932:	2102      	movs	r1, #2
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f925 	bl	8008b84 <RCCEx_PLLSAI2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800893e:	7cfb      	ldrb	r3, [r7, #19]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008944:	7cfb      	ldrb	r3, [r7, #19]
 8008946:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00a      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008954:	4b10      	ldr	r3, [pc, #64]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008962:	490d      	ldr	r1, [pc, #52]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008964:	4313      	orrs	r3, r2
 8008966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008986:	4904      	ldr	r1, [pc, #16]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008988:	4313      	orrs	r3, r2
 800898a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800898e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40021000 	.word	0x40021000

0800899c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089aa:	4b75      	ldr	r3, [pc, #468]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80089b6:	4b72      	ldr	r3, [pc, #456]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0203 	and.w	r2, r3, #3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d10d      	bne.n	80089e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
       ||
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80089ce:	4b6c      	ldr	r3, [pc, #432]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
       ||
 80089de:	429a      	cmp	r2, r3
 80089e0:	d047      	beq.n	8008a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
 80089e6:	e044      	b.n	8008a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d018      	beq.n	8008a22 <RCCEx_PLLSAI1_Config+0x86>
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d825      	bhi.n	8008a40 <RCCEx_PLLSAI1_Config+0xa4>
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <RCCEx_PLLSAI1_Config+0x62>
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d009      	beq.n	8008a10 <RCCEx_PLLSAI1_Config+0x74>
 80089fc:	e020      	b.n	8008a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089fe:	4b60      	ldr	r3, [pc, #384]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d11d      	bne.n	8008a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a0e:	e01a      	b.n	8008a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a10:	4b5b      	ldr	r3, [pc, #364]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d116      	bne.n	8008a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a20:	e013      	b.n	8008a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a22:	4b57      	ldr	r3, [pc, #348]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10f      	bne.n	8008a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a2e:	4b54      	ldr	r3, [pc, #336]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d109      	bne.n	8008a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a3e:	e006      	b.n	8008a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
      break;
 8008a44:	e004      	b.n	8008a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a46:	bf00      	nop
 8008a48:	e002      	b.n	8008a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e000      	b.n	8008a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10d      	bne.n	8008a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a56:	4b4a      	ldr	r3, [pc, #296]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6819      	ldr	r1, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	4944      	ldr	r1, [pc, #272]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d17d      	bne.n	8008b74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a78:	4b41      	ldr	r3, [pc, #260]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a40      	ldr	r2, [pc, #256]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a84:	f7fd f92a 	bl	8005cdc <HAL_GetTick>
 8008a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a8a:	e009      	b.n	8008aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a8c:	f7fd f926 	bl	8005cdc <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d902      	bls.n	8008aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a9e:	e005      	b.n	8008aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008aa0:	4b37      	ldr	r3, [pc, #220]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1ef      	bne.n	8008a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d160      	bne.n	8008b74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d111      	bne.n	8008adc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ab8:	4b31      	ldr	r3, [pc, #196]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6892      	ldr	r2, [r2, #8]
 8008ac8:	0211      	lsls	r1, r2, #8
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	68d2      	ldr	r2, [r2, #12]
 8008ace:	0912      	lsrs	r2, r2, #4
 8008ad0:	0452      	lsls	r2, r2, #17
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	492a      	ldr	r1, [pc, #168]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	610b      	str	r3, [r1, #16]
 8008ada:	e027      	b.n	8008b2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d112      	bne.n	8008b08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ae2:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008aea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6892      	ldr	r2, [r2, #8]
 8008af2:	0211      	lsls	r1, r2, #8
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6912      	ldr	r2, [r2, #16]
 8008af8:	0852      	lsrs	r2, r2, #1
 8008afa:	3a01      	subs	r2, #1
 8008afc:	0552      	lsls	r2, r2, #21
 8008afe:	430a      	orrs	r2, r1
 8008b00:	491f      	ldr	r1, [pc, #124]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	610b      	str	r3, [r1, #16]
 8008b06:	e011      	b.n	8008b2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b08:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6892      	ldr	r2, [r2, #8]
 8008b18:	0211      	lsls	r1, r2, #8
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6952      	ldr	r2, [r2, #20]
 8008b1e:	0852      	lsrs	r2, r2, #1
 8008b20:	3a01      	subs	r2, #1
 8008b22:	0652      	lsls	r2, r2, #25
 8008b24:	430a      	orrs	r2, r1
 8008b26:	4916      	ldr	r1, [pc, #88]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b38:	f7fd f8d0 	bl	8005cdc <HAL_GetTick>
 8008b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b3e:	e009      	b.n	8008b54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b40:	f7fd f8cc 	bl	8005cdc <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d902      	bls.n	8008b54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	73fb      	strb	r3, [r7, #15]
          break;
 8008b52:	e005      	b.n	8008b60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0ef      	beq.n	8008b40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b66:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	4904      	ldr	r1, [pc, #16]	; (8008b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40021000 	.word	0x40021000

08008b84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b92:	4b6a      	ldr	r3, [pc, #424]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d018      	beq.n	8008bd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008b9e:	4b67      	ldr	r3, [pc, #412]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f003 0203 	and.w	r2, r3, #3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d10d      	bne.n	8008bca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008bb6:	4b61      	ldr	r3, [pc, #388]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	091b      	lsrs	r3, r3, #4
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d047      	beq.n	8008c5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e044      	b.n	8008c5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d018      	beq.n	8008c0a <RCCEx_PLLSAI2_Config+0x86>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d825      	bhi.n	8008c28 <RCCEx_PLLSAI2_Config+0xa4>
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d002      	beq.n	8008be6 <RCCEx_PLLSAI2_Config+0x62>
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d009      	beq.n	8008bf8 <RCCEx_PLLSAI2_Config+0x74>
 8008be4:	e020      	b.n	8008c28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008be6:	4b55      	ldr	r3, [pc, #340]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d11d      	bne.n	8008c2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf6:	e01a      	b.n	8008c2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008bf8:	4b50      	ldr	r3, [pc, #320]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d116      	bne.n	8008c32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c08:	e013      	b.n	8008c32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c0a:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10f      	bne.n	8008c36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c16:	4b49      	ldr	r3, [pc, #292]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c26:	e006      	b.n	8008c36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e004      	b.n	8008c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c3e:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	430b      	orrs	r3, r1
 8008c54:	4939      	ldr	r1, [pc, #228]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d167      	bne.n	8008d30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008c60:	4b36      	ldr	r3, [pc, #216]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a35      	ldr	r2, [pc, #212]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6c:	f7fd f836 	bl	8005cdc <HAL_GetTick>
 8008c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c72:	e009      	b.n	8008c88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c74:	f7fd f832 	bl	8005cdc <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d902      	bls.n	8008c88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	73fb      	strb	r3, [r7, #15]
        break;
 8008c86:	e005      	b.n	8008c94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c88:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1ef      	bne.n	8008c74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d14a      	bne.n	8008d30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d111      	bne.n	8008cc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ca0:	4b26      	ldr	r3, [pc, #152]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6892      	ldr	r2, [r2, #8]
 8008cb0:	0211      	lsls	r1, r2, #8
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68d2      	ldr	r2, [r2, #12]
 8008cb6:	0912      	lsrs	r2, r2, #4
 8008cb8:	0452      	lsls	r2, r2, #17
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	491f      	ldr	r1, [pc, #124]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	614b      	str	r3, [r1, #20]
 8008cc2:	e011      	b.n	8008ce8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008cc4:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6892      	ldr	r2, [r2, #8]
 8008cd4:	0211      	lsls	r1, r2, #8
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6912      	ldr	r2, [r2, #16]
 8008cda:	0852      	lsrs	r2, r2, #1
 8008cdc:	3a01      	subs	r2, #1
 8008cde:	0652      	lsls	r2, r2, #25
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	4916      	ldr	r1, [pc, #88]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ce8:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf4:	f7fc fff2 	bl	8005cdc <HAL_GetTick>
 8008cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008cfa:	e009      	b.n	8008d10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008cfc:	f7fc ffee 	bl	8005cdc <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d902      	bls.n	8008d10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8008d0e:	e005      	b.n	8008d1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0ef      	beq.n	8008cfc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008d22:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d24:	695a      	ldr	r2, [r3, #20]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	4904      	ldr	r1, [pc, #16]	; (8008d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40021000 	.word	0x40021000

08008d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d06c      	beq.n	8008e2c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7f8 ffca 	bl	8001d00 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	22ca      	movs	r2, #202	; 0xca
 8008d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2253      	movs	r2, #83	; 0x53
 8008d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9a0 	bl	80090ca <RTC_EnterInitMode>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14b      	bne.n	8008e2c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6899      	ldr	r1, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	68d2      	ldr	r2, [r2, #12]
 8008dce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6919      	ldr	r1, [r3, #16]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	041a      	lsls	r2, r3, #16
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f9a3 	bl	8009130 <RTC_ExitInitMode>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d11b      	bne.n	8008e2c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0203 	bic.w	r2, r2, #3
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	22ff      	movs	r2, #255	; 0xff
 8008e22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e36:	b590      	push	{r4, r7, lr}
 8008e38:	b087      	sub	sp, #28
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_RTC_SetTime+0x1a>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e08b      	b.n	8008f68 <HAL_RTC_SetTime+0x132>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	22ca      	movs	r2, #202	; 0xca
 8008e66:	625a      	str	r2, [r3, #36]	; 0x24
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2253      	movs	r2, #83	; 0x53
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f92a 	bl	80090ca <RTC_EnterInitMode>
 8008e76:	4603      	mov	r3, r0
 8008e78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e7a:	7cfb      	ldrb	r3, [r7, #19]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d163      	bne.n	8008f48 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d126      	bne.n	8008ed4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2200      	movs	r2, #0
 8008e98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f984 	bl	80091ac <RTC_ByteToBcd2>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	785b      	ldrb	r3, [r3, #1]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 f97d 	bl	80091ac <RTC_ByteToBcd2>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008eb6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	789b      	ldrb	r3, [r3, #2]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f975 	bl	80091ac <RTC_ByteToBcd2>
 8008ec2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ec4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	78db      	ldrb	r3, [r3, #3]
 8008ecc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	e018      	b.n	8008f06 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d102      	bne.n	8008ee8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ef4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008efa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	78db      	ldrb	r3, [r3, #3]
 8008f00:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f02:	4313      	orrs	r3, r2
 8008f04:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6899      	ldr	r1, [r3, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f8f6 	bl	8009130 <RTC_ExitInitMode>
 8008f44:	4603      	mov	r3, r0
 8008f46:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	22ff      	movs	r2, #255	; 0xff
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008f50:	7cfb      	ldrb	r3, [r7, #19]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008f66:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	371c      	adds	r7, #28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd90      	pop	{r4, r7, pc}

08008f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f70:	b590      	push	{r4, r7, lr}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_RTC_SetDate+0x1a>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e075      	b.n	8009076 <HAL_RTC_SetDate+0x106>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10e      	bne.n	8008fbe <HAL_RTC_SetDate+0x4e>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	330a      	adds	r3, #10
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d11c      	bne.n	8008ffe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	78db      	ldrb	r3, [r3, #3]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8ef 	bl	80091ac <RTC_ByteToBcd2>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f8e8 	bl	80091ac <RTC_ByteToBcd2>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fe0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	789b      	ldrb	r3, [r3, #2]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f8e0 	bl	80091ac <RTC_ByteToBcd2>
 8008fec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e00e      	b.n	800901c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	78db      	ldrb	r3, [r3, #3]
 8009002:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800900a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009010:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	22ca      	movs	r2, #202	; 0xca
 8009022:	625a      	str	r2, [r3, #36]	; 0x24
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2253      	movs	r2, #83	; 0x53
 800902a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f84c 	bl	80090ca <RTC_EnterInitMode>
 8009032:	4603      	mov	r3, r0
 8009034:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009036:	7cfb      	ldrb	r3, [r7, #19]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10c      	bne.n	8009056 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009046:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800904a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f86f 	bl	8009130 <RTC_ExitInitMode>
 8009052:	4603      	mov	r3, r0
 8009054:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	22ff      	movs	r2, #255	; 0xff
 800905c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800905e:	7cfb      	ldrb	r3, [r7, #19]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009074:	7cfb      	ldrb	r3, [r7, #19]
}
 8009076:	4618      	mov	r0, r3
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd90      	pop	{r4, r7, pc}

0800907e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009094:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009096:	f7fc fe21 	bl	8005cdc <HAL_GetTick>
 800909a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800909c:	e009      	b.n	80090b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800909e:	f7fc fe1d 	bl	8005cdc <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ac:	d901      	bls.n	80090b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e007      	b.n	80090c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0ee      	beq.n	800909e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d120      	bne.n	8009126 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80090ee:	f7fc fdf5 	bl	8005cdc <HAL_GetTick>
 80090f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80090f4:	e00d      	b.n	8009112 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80090f6:	f7fc fdf1 	bl	8005cdc <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009104:	d905      	bls.n	8009112 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2203      	movs	r2, #3
 800910e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <RTC_EnterInitMode+0x5c>
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d1e7      	bne.n	80090f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <RTC_ExitInitMode+0x78>)
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	4a19      	ldr	r2, [pc, #100]	; (80091a8 <RTC_ExitInitMode+0x78>)
 8009142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009146:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <RTC_ExitInitMode+0x78>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10c      	bne.n	800916e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff92 	bl	800907e <HAL_RTC_WaitForSynchro>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01e      	beq.n	800919e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2203      	movs	r2, #3
 8009164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e017      	b.n	800919e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800916e:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <RTC_ExitInitMode+0x78>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	4a0d      	ldr	r2, [pc, #52]	; (80091a8 <RTC_ExitInitMode+0x78>)
 8009174:	f023 0320 	bic.w	r3, r3, #32
 8009178:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff ff7f 	bl	800907e <HAL_RTC_WaitForSynchro>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2203      	movs	r2, #3
 800918a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <RTC_ExitInitMode+0x78>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	4a04      	ldr	r2, [pc, #16]	; (80091a8 <RTC_ExitInitMode+0x78>)
 8009198:	f043 0320 	orr.w	r3, r3, #32
 800919c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40002800 	.word	0x40002800

080091ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80091be:	e005      	b.n	80091cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	3b0a      	subs	r3, #10
 80091ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d8f6      	bhi.n	80091c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	4313      	orrs	r3, r2
 80091de:	b2db      	uxtb	r3, r3
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e049      	b.n	8009292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7f9 f8e8 	bl	80023e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f000 fab6 	bl	800979c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d001      	beq.n	80092b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e04f      	b.n	8009354 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a23      	ldr	r2, [pc, #140]	; (8009360 <HAL_TIM_Base_Start_IT+0xc4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01d      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092de:	d018      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <HAL_TIM_Base_Start_IT+0xc8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d013      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a1e      	ldr	r2, [pc, #120]	; (8009368 <HAL_TIM_Base_Start_IT+0xcc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00e      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1c      	ldr	r2, [pc, #112]	; (800936c <HAL_TIM_Base_Start_IT+0xd0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d009      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <HAL_TIM_Base_Start_IT+0xd4>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d004      	beq.n	8009312 <HAL_TIM_Base_Start_IT+0x76>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a19      	ldr	r2, [pc, #100]	; (8009374 <HAL_TIM_Base_Start_IT+0xd8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d115      	bne.n	800933e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	4b17      	ldr	r3, [pc, #92]	; (8009378 <HAL_TIM_Base_Start_IT+0xdc>)
 800931a:	4013      	ands	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b06      	cmp	r3, #6
 8009322:	d015      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0xb4>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932a:	d011      	beq.n	8009350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933c:	e008      	b.n	8009350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0201 	orr.w	r2, r2, #1
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e000      	b.n	8009352 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	40012c00 	.word	0x40012c00
 8009364:	40000400 	.word	0x40000400
 8009368:	40000800 	.word	0x40000800
 800936c:	40000c00 	.word	0x40000c00
 8009370:	40013400 	.word	0x40013400
 8009374:	40014000 	.word	0x40014000
 8009378:	00010007 	.word	0x00010007

0800937c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b02      	cmp	r3, #2
 8009390:	d122      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b02      	cmp	r3, #2
 800939e:	d11b      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0202 	mvn.w	r2, #2
 80093a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9ce 	bl	8009760 <HAL_TIM_IC_CaptureCallback>
 80093c4:	e005      	b.n	80093d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9c0 	bl	800974c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f9d1 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d122      	bne.n	800942c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d11b      	bne.n	800942c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0204 	mvn.w	r2, #4
 80093fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9a4 	bl	8009760 <HAL_TIM_IC_CaptureCallback>
 8009418:	e005      	b.n	8009426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f996 	bl	800974c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9a7 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b08      	cmp	r3, #8
 8009438:	d122      	bne.n	8009480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d11b      	bne.n	8009480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0208 	mvn.w	r2, #8
 8009450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2204      	movs	r2, #4
 8009456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f97a 	bl	8009760 <HAL_TIM_IC_CaptureCallback>
 800946c:	e005      	b.n	800947a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f96c 	bl	800974c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f97d 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b10      	cmp	r3, #16
 800948c:	d122      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b10      	cmp	r3, #16
 800949a:	d11b      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0210 	mvn.w	r2, #16
 80094a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2208      	movs	r2, #8
 80094aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f950 	bl	8009760 <HAL_TIM_IC_CaptureCallback>
 80094c0:	e005      	b.n	80094ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f942 	bl	800974c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f953 	bl	8009774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d10e      	bne.n	8009500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d107      	bne.n	8009500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0201 	mvn.w	r2, #1
 80094f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7f8 f860 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950a:	2b80      	cmp	r3, #128	; 0x80
 800950c:	d10e      	bne.n	800952c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009518:	2b80      	cmp	r3, #128	; 0x80
 800951a:	d107      	bne.n	800952c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fafe 	bl	8009b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953a:	d10e      	bne.n	800955a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009546:	2b80      	cmp	r3, #128	; 0x80
 8009548:	d107      	bne.n	800955a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 faf1 	bl	8009b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009564:	2b40      	cmp	r3, #64	; 0x40
 8009566:	d10e      	bne.n	8009586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009572:	2b40      	cmp	r3, #64	; 0x40
 8009574:	d107      	bne.n	8009586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800957e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f901 	bl	8009788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b20      	cmp	r3, #32
 8009592:	d10e      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d107      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f06f 0220 	mvn.w	r2, #32
 80095aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fab1 	bl	8009b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_TIM_ConfigClockSource+0x1c>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e0b6      	b.n	8009744 <HAL_TIM_ConfigClockSource+0x18a>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2202      	movs	r2, #2
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009600:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009612:	d03e      	beq.n	8009692 <HAL_TIM_ConfigClockSource+0xd8>
 8009614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009618:	f200 8087 	bhi.w	800972a <HAL_TIM_ConfigClockSource+0x170>
 800961c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009620:	f000 8086 	beq.w	8009730 <HAL_TIM_ConfigClockSource+0x176>
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009628:	d87f      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 800962a:	2b70      	cmp	r3, #112	; 0x70
 800962c:	d01a      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0xaa>
 800962e:	2b70      	cmp	r3, #112	; 0x70
 8009630:	d87b      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 8009632:	2b60      	cmp	r3, #96	; 0x60
 8009634:	d050      	beq.n	80096d8 <HAL_TIM_ConfigClockSource+0x11e>
 8009636:	2b60      	cmp	r3, #96	; 0x60
 8009638:	d877      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 800963a:	2b50      	cmp	r3, #80	; 0x50
 800963c:	d03c      	beq.n	80096b8 <HAL_TIM_ConfigClockSource+0xfe>
 800963e:	2b50      	cmp	r3, #80	; 0x50
 8009640:	d873      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d058      	beq.n	80096f8 <HAL_TIM_ConfigClockSource+0x13e>
 8009646:	2b40      	cmp	r3, #64	; 0x40
 8009648:	d86f      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 800964a:	2b30      	cmp	r3, #48	; 0x30
 800964c:	d064      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0x15e>
 800964e:	2b30      	cmp	r3, #48	; 0x30
 8009650:	d86b      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 8009652:	2b20      	cmp	r3, #32
 8009654:	d060      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0x15e>
 8009656:	2b20      	cmp	r3, #32
 8009658:	d867      	bhi.n	800972a <HAL_TIM_ConfigClockSource+0x170>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d05c      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0x15e>
 800965e:	2b10      	cmp	r3, #16
 8009660:	d05a      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0x15e>
 8009662:	e062      	b.n	800972a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	6899      	ldr	r1, [r3, #8]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f000 f9a6 	bl	80099c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009686:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]
      break;
 8009690:	e04f      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6899      	ldr	r1, [r3, #8]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f000 f98f 	bl	80099c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b4:	609a      	str	r2, [r3, #8]
      break;
 80096b6:	e03c      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6859      	ldr	r1, [r3, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f000 f903 	bl	80098d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2150      	movs	r1, #80	; 0x50
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f95c 	bl	800998e <TIM_ITRx_SetConfig>
      break;
 80096d6:	e02c      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6859      	ldr	r1, [r3, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	461a      	mov	r2, r3
 80096e6:	f000 f922 	bl	800992e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2160      	movs	r1, #96	; 0x60
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f94c 	bl	800998e <TIM_ITRx_SetConfig>
      break;
 80096f6:	e01c      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	6859      	ldr	r1, [r3, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	461a      	mov	r2, r3
 8009706:	f000 f8e3 	bl	80098d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2140      	movs	r1, #64	; 0x40
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f93c 	bl	800998e <TIM_ITRx_SetConfig>
      break;
 8009716:	e00c      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f000 f933 	bl	800998e <TIM_ITRx_SetConfig>
      break;
 8009728:	e003      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
      break;
 800972e:	e000      	b.n	8009732 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a40      	ldr	r2, [pc, #256]	; (80098b0 <TIM_Base_SetConfig+0x114>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d013      	beq.n	80097dc <TIM_Base_SetConfig+0x40>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ba:	d00f      	beq.n	80097dc <TIM_Base_SetConfig+0x40>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a3d      	ldr	r2, [pc, #244]	; (80098b4 <TIM_Base_SetConfig+0x118>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00b      	beq.n	80097dc <TIM_Base_SetConfig+0x40>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a3c      	ldr	r2, [pc, #240]	; (80098b8 <TIM_Base_SetConfig+0x11c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d007      	beq.n	80097dc <TIM_Base_SetConfig+0x40>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a3b      	ldr	r2, [pc, #236]	; (80098bc <TIM_Base_SetConfig+0x120>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d003      	beq.n	80097dc <TIM_Base_SetConfig+0x40>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a3a      	ldr	r2, [pc, #232]	; (80098c0 <TIM_Base_SetConfig+0x124>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d108      	bne.n	80097ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a2f      	ldr	r2, [pc, #188]	; (80098b0 <TIM_Base_SetConfig+0x114>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d01f      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fc:	d01b      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a2c      	ldr	r2, [pc, #176]	; (80098b4 <TIM_Base_SetConfig+0x118>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d017      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a2b      	ldr	r2, [pc, #172]	; (80098b8 <TIM_Base_SetConfig+0x11c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d013      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a2a      	ldr	r2, [pc, #168]	; (80098bc <TIM_Base_SetConfig+0x120>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00f      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a29      	ldr	r2, [pc, #164]	; (80098c0 <TIM_Base_SetConfig+0x124>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00b      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a28      	ldr	r2, [pc, #160]	; (80098c4 <TIM_Base_SetConfig+0x128>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d007      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a27      	ldr	r2, [pc, #156]	; (80098c8 <TIM_Base_SetConfig+0x12c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d003      	beq.n	8009836 <TIM_Base_SetConfig+0x9a>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a26      	ldr	r2, [pc, #152]	; (80098cc <TIM_Base_SetConfig+0x130>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d108      	bne.n	8009848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a10      	ldr	r2, [pc, #64]	; (80098b0 <TIM_Base_SetConfig+0x114>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00f      	beq.n	8009894 <TIM_Base_SetConfig+0xf8>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a12      	ldr	r2, [pc, #72]	; (80098c0 <TIM_Base_SetConfig+0x124>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d00b      	beq.n	8009894 <TIM_Base_SetConfig+0xf8>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a11      	ldr	r2, [pc, #68]	; (80098c4 <TIM_Base_SetConfig+0x128>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d007      	beq.n	8009894 <TIM_Base_SetConfig+0xf8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a10      	ldr	r2, [pc, #64]	; (80098c8 <TIM_Base_SetConfig+0x12c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_Base_SetConfig+0xf8>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a0f      	ldr	r2, [pc, #60]	; (80098cc <TIM_Base_SetConfig+0x130>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d103      	bne.n	800989c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	615a      	str	r2, [r3, #20]
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	40000c00 	.word	0x40000c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40014400 	.word	0x40014400
 80098cc:	40014800 	.word	0x40014800

080098d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	f023 0201 	bic.w	r2, r3, #1
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	4313      	orrs	r3, r2
 8009904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f023 030a 	bic.w	r3, r3, #10
 800990c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800992e:	b480      	push	{r7}
 8009930:	b087      	sub	sp, #28
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	f023 0210 	bic.w	r2, r3, #16
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	031b      	lsls	r3, r3, #12
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800996a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	621a      	str	r2, [r3, #32]
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f043 0307 	orr.w	r3, r3, #7
 80099b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	609a      	str	r2, [r3, #8]
}
 80099b8:	bf00      	nop
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	021a      	lsls	r2, r3, #8
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	609a      	str	r2, [r3, #8]
}
 80099f8:	bf00      	nop
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e068      	b.n	8009aee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2e      	ldr	r2, [pc, #184]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d004      	beq.n	8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a2d      	ldr	r2, [pc, #180]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d108      	bne.n	8009a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d01d      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8e:	d018      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1b      	ldr	r2, [pc, #108]	; (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d013      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1a      	ldr	r2, [pc, #104]	; (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00e      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a18      	ldr	r2, [pc, #96]	; (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d009      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a13      	ldr	r2, [pc, #76]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d004      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a14      	ldr	r2, [pc, #80]	; (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10c      	bne.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40000400 	.word	0x40000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	40000c00 	.word	0x40000c00
 8009b10:	40014000 	.word	0x40014000

08009b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e040      	b.n	8009be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f83a 	bl	8009bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2224      	movs	r2, #36	; 0x24
 8009b7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0201 	bic.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f94a 	bl	8009e28 <UART_SetConfig>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e022      	b.n	8009be4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fbc8 	bl	800a33c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0201 	orr.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc4f 	bl	800a480 <UART_CheckIdleState>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	; 0x28
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c14:	2b20      	cmp	r3, #32
 8009c16:	f040 8082 	bne.w	8009d1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <HAL_UART_Transmit+0x26>
 8009c20:	88fb      	ldrh	r3, [r7, #6]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e07a      	b.n	8009d20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_UART_Transmit+0x38>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e073      	b.n	8009d20 <HAL_UART_Transmit+0x120>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2221      	movs	r2, #33	; 0x21
 8009c4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c4e:	f7fc f845 	bl	8005cdc <HAL_GetTick>
 8009c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	88fa      	ldrh	r2, [r7, #6]
 8009c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6c:	d108      	bne.n	8009c80 <HAL_UART_Transmit+0x80>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d104      	bne.n	8009c80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	e003      	b.n	8009c88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c90:	e02d      	b.n	8009cee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2180      	movs	r1, #128	; 0x80
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 fc38 	bl	800a512 <UART_WaitOnFlagUntilTimeout>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e039      	b.n	8009d20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	881a      	ldrh	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cbe:	b292      	uxth	r2, r2
 8009cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	61bb      	str	r3, [r7, #24]
 8009cc8:	e008      	b.n	8009cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1cb      	bne.n	8009c92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2200      	movs	r2, #0
 8009d02:	2140      	movs	r1, #64	; 0x40
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fc04 	bl	800a512 <UART_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e005      	b.n	8009d20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e000      	b.n	8009d20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009d1e:	2302      	movs	r3, #2
  }
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	d142      	bne.n	8009dc4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <HAL_UART_Receive_DMA+0x22>
 8009d44:	88fb      	ldrh	r3, [r7, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e03b      	b.n	8009dc6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_UART_Receive_DMA+0x34>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e034      	b.n	8009dc6 <HAL_UART_Receive_DMA+0x9e>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a18      	ldr	r2, [pc, #96]	; (8009dd0 <HAL_UART_Receive_DMA+0xa8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d01f      	beq.n	8009db4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d018      	beq.n	8009db4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	623b      	str	r3, [r7, #32]
 8009da2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	69f9      	ldr	r1, [r7, #28]
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e6      	bne.n	8009d82 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fc6e 	bl	800a69c <UART_Start_Receive_DMA>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	e000      	b.n	8009dc6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3728      	adds	r7, #40	; 0x28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	40008000 	.word	0x40008000

08009dd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4bad      	ldr	r3, [pc, #692]	; (800a108 <UART_SetConfig+0x2e0>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	6812      	ldr	r2, [r2, #0]
 8009e5a:	69f9      	ldr	r1, [r7, #28]
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4aa2      	ldr	r2, [pc, #648]	; (800a10c <UART_SetConfig+0x2e4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d004      	beq.n	8009e90 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a99      	ldr	r2, [pc, #612]	; (800a110 <UART_SetConfig+0x2e8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d121      	bne.n	8009ef2 <UART_SetConfig+0xca>
 8009eae:	4b99      	ldr	r3, [pc, #612]	; (800a114 <UART_SetConfig+0x2ec>)
 8009eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb4:	f003 0303 	and.w	r3, r3, #3
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d817      	bhi.n	8009eec <UART_SetConfig+0xc4>
 8009ebc:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <UART_SetConfig+0x9c>)
 8009ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec2:	bf00      	nop
 8009ec4:	08009ed5 	.word	0x08009ed5
 8009ec8:	08009ee1 	.word	0x08009ee1
 8009ecc:	08009edb 	.word	0x08009edb
 8009ed0:	08009ee7 	.word	0x08009ee7
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	76fb      	strb	r3, [r7, #27]
 8009ed8:	e0e7      	b.n	800a0aa <UART_SetConfig+0x282>
 8009eda:	2302      	movs	r3, #2
 8009edc:	76fb      	strb	r3, [r7, #27]
 8009ede:	e0e4      	b.n	800a0aa <UART_SetConfig+0x282>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	76fb      	strb	r3, [r7, #27]
 8009ee4:	e0e1      	b.n	800a0aa <UART_SetConfig+0x282>
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	76fb      	strb	r3, [r7, #27]
 8009eea:	e0de      	b.n	800a0aa <UART_SetConfig+0x282>
 8009eec:	2310      	movs	r3, #16
 8009eee:	76fb      	strb	r3, [r7, #27]
 8009ef0:	e0db      	b.n	800a0aa <UART_SetConfig+0x282>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a88      	ldr	r2, [pc, #544]	; (800a118 <UART_SetConfig+0x2f0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d132      	bne.n	8009f62 <UART_SetConfig+0x13a>
 8009efc:	4b85      	ldr	r3, [pc, #532]	; (800a114 <UART_SetConfig+0x2ec>)
 8009efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f02:	f003 030c 	and.w	r3, r3, #12
 8009f06:	2b0c      	cmp	r3, #12
 8009f08:	d828      	bhi.n	8009f5c <UART_SetConfig+0x134>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0xe8>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f45 	.word	0x08009f45
 8009f14:	08009f5d 	.word	0x08009f5d
 8009f18:	08009f5d 	.word	0x08009f5d
 8009f1c:	08009f5d 	.word	0x08009f5d
 8009f20:	08009f51 	.word	0x08009f51
 8009f24:	08009f5d 	.word	0x08009f5d
 8009f28:	08009f5d 	.word	0x08009f5d
 8009f2c:	08009f5d 	.word	0x08009f5d
 8009f30:	08009f4b 	.word	0x08009f4b
 8009f34:	08009f5d 	.word	0x08009f5d
 8009f38:	08009f5d 	.word	0x08009f5d
 8009f3c:	08009f5d 	.word	0x08009f5d
 8009f40:	08009f57 	.word	0x08009f57
 8009f44:	2300      	movs	r3, #0
 8009f46:	76fb      	strb	r3, [r7, #27]
 8009f48:	e0af      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	76fb      	strb	r3, [r7, #27]
 8009f4e:	e0ac      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f50:	2304      	movs	r3, #4
 8009f52:	76fb      	strb	r3, [r7, #27]
 8009f54:	e0a9      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f56:	2308      	movs	r3, #8
 8009f58:	76fb      	strb	r3, [r7, #27]
 8009f5a:	e0a6      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	76fb      	strb	r3, [r7, #27]
 8009f60:	e0a3      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a6d      	ldr	r2, [pc, #436]	; (800a11c <UART_SetConfig+0x2f4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d120      	bne.n	8009fae <UART_SetConfig+0x186>
 8009f6c:	4b69      	ldr	r3, [pc, #420]	; (800a114 <UART_SetConfig+0x2ec>)
 8009f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f76:	2b30      	cmp	r3, #48	; 0x30
 8009f78:	d013      	beq.n	8009fa2 <UART_SetConfig+0x17a>
 8009f7a:	2b30      	cmp	r3, #48	; 0x30
 8009f7c:	d814      	bhi.n	8009fa8 <UART_SetConfig+0x180>
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	d009      	beq.n	8009f96 <UART_SetConfig+0x16e>
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d810      	bhi.n	8009fa8 <UART_SetConfig+0x180>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <UART_SetConfig+0x168>
 8009f8a:	2b10      	cmp	r3, #16
 8009f8c:	d006      	beq.n	8009f9c <UART_SetConfig+0x174>
 8009f8e:	e00b      	b.n	8009fa8 <UART_SetConfig+0x180>
 8009f90:	2300      	movs	r3, #0
 8009f92:	76fb      	strb	r3, [r7, #27]
 8009f94:	e089      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f96:	2302      	movs	r3, #2
 8009f98:	76fb      	strb	r3, [r7, #27]
 8009f9a:	e086      	b.n	800a0aa <UART_SetConfig+0x282>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	76fb      	strb	r3, [r7, #27]
 8009fa0:	e083      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	76fb      	strb	r3, [r7, #27]
 8009fa6:	e080      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	76fb      	strb	r3, [r7, #27]
 8009fac:	e07d      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a5b      	ldr	r2, [pc, #364]	; (800a120 <UART_SetConfig+0x2f8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d120      	bne.n	8009ffa <UART_SetConfig+0x1d2>
 8009fb8:	4b56      	ldr	r3, [pc, #344]	; (800a114 <UART_SetConfig+0x2ec>)
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc4:	d013      	beq.n	8009fee <UART_SetConfig+0x1c6>
 8009fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc8:	d814      	bhi.n	8009ff4 <UART_SetConfig+0x1cc>
 8009fca:	2b80      	cmp	r3, #128	; 0x80
 8009fcc:	d009      	beq.n	8009fe2 <UART_SetConfig+0x1ba>
 8009fce:	2b80      	cmp	r3, #128	; 0x80
 8009fd0:	d810      	bhi.n	8009ff4 <UART_SetConfig+0x1cc>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <UART_SetConfig+0x1b4>
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	d006      	beq.n	8009fe8 <UART_SetConfig+0x1c0>
 8009fda:	e00b      	b.n	8009ff4 <UART_SetConfig+0x1cc>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	76fb      	strb	r3, [r7, #27]
 8009fe0:	e063      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	76fb      	strb	r3, [r7, #27]
 8009fe6:	e060      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fe8:	2304      	movs	r3, #4
 8009fea:	76fb      	strb	r3, [r7, #27]
 8009fec:	e05d      	b.n	800a0aa <UART_SetConfig+0x282>
 8009fee:	2308      	movs	r3, #8
 8009ff0:	76fb      	strb	r3, [r7, #27]
 8009ff2:	e05a      	b.n	800a0aa <UART_SetConfig+0x282>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	76fb      	strb	r3, [r7, #27]
 8009ff8:	e057      	b.n	800a0aa <UART_SetConfig+0x282>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a49      	ldr	r2, [pc, #292]	; (800a124 <UART_SetConfig+0x2fc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d125      	bne.n	800a050 <UART_SetConfig+0x228>
 800a004:	4b43      	ldr	r3, [pc, #268]	; (800a114 <UART_SetConfig+0x2ec>)
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a00e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a012:	d017      	beq.n	800a044 <UART_SetConfig+0x21c>
 800a014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a018:	d817      	bhi.n	800a04a <UART_SetConfig+0x222>
 800a01a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a01e:	d00b      	beq.n	800a038 <UART_SetConfig+0x210>
 800a020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a024:	d811      	bhi.n	800a04a <UART_SetConfig+0x222>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <UART_SetConfig+0x20a>
 800a02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a02e:	d006      	beq.n	800a03e <UART_SetConfig+0x216>
 800a030:	e00b      	b.n	800a04a <UART_SetConfig+0x222>
 800a032:	2300      	movs	r3, #0
 800a034:	76fb      	strb	r3, [r7, #27]
 800a036:	e038      	b.n	800a0aa <UART_SetConfig+0x282>
 800a038:	2302      	movs	r3, #2
 800a03a:	76fb      	strb	r3, [r7, #27]
 800a03c:	e035      	b.n	800a0aa <UART_SetConfig+0x282>
 800a03e:	2304      	movs	r3, #4
 800a040:	76fb      	strb	r3, [r7, #27]
 800a042:	e032      	b.n	800a0aa <UART_SetConfig+0x282>
 800a044:	2308      	movs	r3, #8
 800a046:	76fb      	strb	r3, [r7, #27]
 800a048:	e02f      	b.n	800a0aa <UART_SetConfig+0x282>
 800a04a:	2310      	movs	r3, #16
 800a04c:	76fb      	strb	r3, [r7, #27]
 800a04e:	e02c      	b.n	800a0aa <UART_SetConfig+0x282>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a2d      	ldr	r2, [pc, #180]	; (800a10c <UART_SetConfig+0x2e4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d125      	bne.n	800a0a6 <UART_SetConfig+0x27e>
 800a05a:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <UART_SetConfig+0x2ec>)
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a068:	d017      	beq.n	800a09a <UART_SetConfig+0x272>
 800a06a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a06e:	d817      	bhi.n	800a0a0 <UART_SetConfig+0x278>
 800a070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a074:	d00b      	beq.n	800a08e <UART_SetConfig+0x266>
 800a076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a07a:	d811      	bhi.n	800a0a0 <UART_SetConfig+0x278>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <UART_SetConfig+0x260>
 800a080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a084:	d006      	beq.n	800a094 <UART_SetConfig+0x26c>
 800a086:	e00b      	b.n	800a0a0 <UART_SetConfig+0x278>
 800a088:	2300      	movs	r3, #0
 800a08a:	76fb      	strb	r3, [r7, #27]
 800a08c:	e00d      	b.n	800a0aa <UART_SetConfig+0x282>
 800a08e:	2302      	movs	r3, #2
 800a090:	76fb      	strb	r3, [r7, #27]
 800a092:	e00a      	b.n	800a0aa <UART_SetConfig+0x282>
 800a094:	2304      	movs	r3, #4
 800a096:	76fb      	strb	r3, [r7, #27]
 800a098:	e007      	b.n	800a0aa <UART_SetConfig+0x282>
 800a09a:	2308      	movs	r3, #8
 800a09c:	76fb      	strb	r3, [r7, #27]
 800a09e:	e004      	b.n	800a0aa <UART_SetConfig+0x282>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	76fb      	strb	r3, [r7, #27]
 800a0a4:	e001      	b.n	800a0aa <UART_SetConfig+0x282>
 800a0a6:	2310      	movs	r3, #16
 800a0a8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a17      	ldr	r2, [pc, #92]	; (800a10c <UART_SetConfig+0x2e4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	f040 8087 	bne.w	800a1c4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0b6:	7efb      	ldrb	r3, [r7, #27]
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d837      	bhi.n	800a12c <UART_SetConfig+0x304>
 800a0bc:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <UART_SetConfig+0x29c>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0e9 	.word	0x0800a0e9
 800a0c8:	0800a12d 	.word	0x0800a12d
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a12d 	.word	0x0800a12d
 800a0d4:	0800a0f7 	.word	0x0800a0f7
 800a0d8:	0800a12d 	.word	0x0800a12d
 800a0dc:	0800a12d 	.word	0x0800a12d
 800a0e0:	0800a12d 	.word	0x0800a12d
 800a0e4:	0800a0ff 	.word	0x0800a0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e8:	f7fe f8e2 	bl	80082b0 <HAL_RCC_GetPCLK1Freq>
 800a0ec:	6178      	str	r0, [r7, #20]
        break;
 800a0ee:	e022      	b.n	800a136 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f0:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <UART_SetConfig+0x300>)
 800a0f2:	617b      	str	r3, [r7, #20]
        break;
 800a0f4:	e01f      	b.n	800a136 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0f6:	f7fe f843 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 800a0fa:	6178      	str	r0, [r7, #20]
        break;
 800a0fc:	e01b      	b.n	800a136 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a102:	617b      	str	r3, [r7, #20]
        break;
 800a104:	e017      	b.n	800a136 <UART_SetConfig+0x30e>
 800a106:	bf00      	nop
 800a108:	efff69f3 	.word	0xefff69f3
 800a10c:	40008000 	.word	0x40008000
 800a110:	40013800 	.word	0x40013800
 800a114:	40021000 	.word	0x40021000
 800a118:	40004400 	.word	0x40004400
 800a11c:	40004800 	.word	0x40004800
 800a120:	40004c00 	.word	0x40004c00
 800a124:	40005000 	.word	0x40005000
 800a128:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	76bb      	strb	r3, [r7, #26]
        break;
 800a134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80f1 	beq.w	800a320 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	4413      	add	r3, r2
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d305      	bcc.n	800a15a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	429a      	cmp	r2, r3
 800a158:	d902      	bls.n	800a160 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	76bb      	strb	r3, [r7, #26]
 800a15e:	e0df      	b.n	800a320 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	4618      	mov	r0, r3
 800a164:	f04f 0100 	mov.w	r1, #0
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	020b      	lsls	r3, r1, #8
 800a172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a176:	0202      	lsls	r2, r0, #8
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	6849      	ldr	r1, [r1, #4]
 800a17c:	0849      	lsrs	r1, r1, #1
 800a17e:	4608      	mov	r0, r1
 800a180:	f04f 0100 	mov.w	r1, #0
 800a184:	1814      	adds	r4, r2, r0
 800a186:	eb43 0501 	adc.w	r5, r3, r1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	461a      	mov	r2, r3
 800a190:	f04f 0300 	mov.w	r3, #0
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 fcd2 	bl	8000b40 <__aeabi_uldivmod>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1aa:	d308      	bcc.n	800a1be <UART_SetConfig+0x396>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b2:	d204      	bcs.n	800a1be <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	60da      	str	r2, [r3, #12]
 800a1bc:	e0b0      	b.n	800a320 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	76bb      	strb	r3, [r7, #26]
 800a1c2:	e0ad      	b.n	800a320 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1cc:	d15b      	bne.n	800a286 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a1ce:	7efb      	ldrb	r3, [r7, #27]
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d828      	bhi.n	800a226 <UART_SetConfig+0x3fe>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <UART_SetConfig+0x3b4>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a201 	.word	0x0800a201
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	0800a227 	.word	0x0800a227
 800a1ec:	0800a217 	.word	0x0800a217
 800a1f0:	0800a227 	.word	0x0800a227
 800a1f4:	0800a227 	.word	0x0800a227
 800a1f8:	0800a227 	.word	0x0800a227
 800a1fc:	0800a21f 	.word	0x0800a21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a200:	f7fe f856 	bl	80082b0 <HAL_RCC_GetPCLK1Freq>
 800a204:	6178      	str	r0, [r7, #20]
        break;
 800a206:	e013      	b.n	800a230 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a208:	f7fe f868 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800a20c:	6178      	str	r0, [r7, #20]
        break;
 800a20e:	e00f      	b.n	800a230 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a210:	4b49      	ldr	r3, [pc, #292]	; (800a338 <UART_SetConfig+0x510>)
 800a212:	617b      	str	r3, [r7, #20]
        break;
 800a214:	e00c      	b.n	800a230 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a216:	f7fd ffb3 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 800a21a:	6178      	str	r0, [r7, #20]
        break;
 800a21c:	e008      	b.n	800a230 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a222:	617b      	str	r3, [r7, #20]
        break;
 800a224:	e004      	b.n	800a230 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	76bb      	strb	r3, [r7, #26]
        break;
 800a22e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d074      	beq.n	800a320 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	005a      	lsls	r2, r3, #1
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	441a      	add	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b0f      	cmp	r3, #15
 800a250:	d916      	bls.n	800a280 <UART_SetConfig+0x458>
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d212      	bcs.n	800a280 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f023 030f 	bic.w	r3, r3, #15
 800a262:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	085b      	lsrs	r3, r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	b29a      	uxth	r2, r3
 800a270:	89fb      	ldrh	r3, [r7, #14]
 800a272:	4313      	orrs	r3, r2
 800a274:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	89fa      	ldrh	r2, [r7, #14]
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e04f      	b.n	800a320 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	76bb      	strb	r3, [r7, #26]
 800a284:	e04c      	b.n	800a320 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a286:	7efb      	ldrb	r3, [r7, #27]
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d828      	bhi.n	800a2de <UART_SetConfig+0x4b6>
 800a28c:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <UART_SetConfig+0x46c>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c9 	.word	0x0800a2c9
 800a2a0:	0800a2df 	.word	0x0800a2df
 800a2a4:	0800a2cf 	.word	0x0800a2cf
 800a2a8:	0800a2df 	.word	0x0800a2df
 800a2ac:	0800a2df 	.word	0x0800a2df
 800a2b0:	0800a2df 	.word	0x0800a2df
 800a2b4:	0800a2d7 	.word	0x0800a2d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b8:	f7fd fffa 	bl	80082b0 <HAL_RCC_GetPCLK1Freq>
 800a2bc:	6178      	str	r0, [r7, #20]
        break;
 800a2be:	e013      	b.n	800a2e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c0:	f7fe f80c 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800a2c4:	6178      	str	r0, [r7, #20]
        break;
 800a2c6:	e00f      	b.n	800a2e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <UART_SetConfig+0x510>)
 800a2ca:	617b      	str	r3, [r7, #20]
        break;
 800a2cc:	e00c      	b.n	800a2e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2ce:	f7fd ff57 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 800a2d2:	6178      	str	r0, [r7, #20]
        break;
 800a2d4:	e008      	b.n	800a2e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2da:	617b      	str	r3, [r7, #20]
        break;
 800a2dc:	e004      	b.n	800a2e8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	76bb      	strb	r3, [r7, #26]
        break;
 800a2e6:	bf00      	nop
    }

    if (pclk != 0U)
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d018      	beq.n	800a320 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	085a      	lsrs	r2, r3, #1
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	441a      	add	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a300:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b0f      	cmp	r3, #15
 800a306:	d909      	bls.n	800a31c <UART_SetConfig+0x4f4>
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a30e:	d205      	bcs.n	800a31c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	e001      	b.n	800a320 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a32c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bdb0      	pop	{r4, r5, r7, pc}
 800a336:	bf00      	nop
 800a338:	00f42400 	.word	0x00f42400

0800a33c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00a      	beq.n	800a388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	f003 0310 	and.w	r3, r3, #16
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01a      	beq.n	800a452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a43a:	d10a      	bne.n	800a452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	605a      	str	r2, [r3, #4]
  }
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a490:	f7fb fc24 	bl	8005cdc <HAL_GetTick>
 800a494:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0308 	and.w	r3, r3, #8
 800a4a0:	2b08      	cmp	r3, #8
 800a4a2:	d10e      	bne.n	800a4c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f82d 	bl	800a512 <UART_WaitOnFlagUntilTimeout>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e023      	b.n	800a50a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d10e      	bne.n	800a4ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f817 	bl	800a512 <UART_WaitOnFlagUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e00d      	b.n	800a50a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b09c      	sub	sp, #112	; 0x70
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	4613      	mov	r3, r2
 800a520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a522:	e0a5      	b.n	800a670 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	f000 80a1 	beq.w	800a670 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52e:	f7fb fbd5 	bl	8005cdc <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d302      	bcc.n	800a544 <UART_WaitOnFlagUntilTimeout+0x32>
 800a53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a540:	2b00      	cmp	r3, #0
 800a542:	d13e      	bne.n	800a5c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a558:	667b      	str	r3, [r7, #100]	; 0x64
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a562:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a564:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e6      	bne.n	800a544 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	f023 0301 	bic.w	r3, r3, #1
 800a58c:	663b      	str	r3, [r7, #96]	; 0x60
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3308      	adds	r3, #8
 800a594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a596:	64ba      	str	r2, [r7, #72]	; 0x48
 800a598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a59c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e5      	bne.n	800a576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e067      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d04f      	beq.n	800a670 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5de:	d147      	bne.n	800a670 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
 800a60a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e6      	bne.n	800a5ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3308      	adds	r3, #8
 800a622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	613b      	str	r3, [r7, #16]
   return(result);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	66bb      	str	r3, [r7, #104]	; 0x68
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3308      	adds	r3, #8
 800a63a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a63c:	623a      	str	r2, [r7, #32]
 800a63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	69f9      	ldr	r1, [r7, #28]
 800a642:	6a3a      	ldr	r2, [r7, #32]
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	61bb      	str	r3, [r7, #24]
   return(result);
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e5      	bne.n	800a61c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2220      	movs	r2, #32
 800a654:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2220      	movs	r2, #32
 800a65a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2220      	movs	r2, #32
 800a660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e010      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69da      	ldr	r2, [r3, #28]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4013      	ands	r3, r2
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	bf0c      	ite	eq
 800a680:	2301      	moveq	r3, #1
 800a682:	2300      	movne	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	461a      	mov	r2, r3
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	f43f af4a 	beq.w	800a524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3770      	adds	r7, #112	; 0x70
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b096      	sub	sp, #88	; 0x58
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2222      	movs	r2, #34	; 0x22
 800a6c4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02b      	beq.n	800a726 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d2:	4a42      	ldr	r2, [pc, #264]	; (800a7dc <UART_Start_Receive_DMA+0x140>)
 800a6d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6da:	4a41      	ldr	r2, [pc, #260]	; (800a7e0 <UART_Start_Receive_DMA+0x144>)
 800a6dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e2:	4a40      	ldr	r2, [pc, #256]	; (800a7e4 <UART_Start_Receive_DMA+0x148>)
 800a6e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3324      	adds	r3, #36	; 0x24
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	461a      	mov	r2, r3
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	f7fb fdab 	bl	800625c <HAL_DMA_Start_IT>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00c      	beq.n	800a726 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2210      	movs	r2, #16
 800a710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2220      	movs	r2, #32
 800a720:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e055      	b.n	800a7d2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d018      	beq.n	800a768 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a74a:	657b      	str	r3, [r7, #84]	; 0x54
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	461a      	mov	r2, r3
 800a752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a754:	64bb      	str	r3, [r7, #72]	; 0x48
 800a756:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e6      	bne.n	800a736 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	653b      	str	r3, [r7, #80]	; 0x50
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a788:	637a      	str	r2, [r7, #52]	; 0x34
 800a78a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e5      	bne.n	800a768 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7bc:	623a      	str	r2, [r7, #32]
 800a7be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	69f9      	ldr	r1, [r7, #28]
 800a7c2:	6a3a      	ldr	r2, [r7, #32]
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e5      	bne.n	800a79c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3758      	adds	r7, #88	; 0x58
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800a8fb 	.word	0x0800a8fb
 800a7e0:	0800aa1f 	.word	0x0800aa1f
 800a7e4:	0800aa57 	.word	0x0800aa57

0800a7e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b089      	sub	sp, #36	; 0x24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a804:	61fb      	str	r3, [r7, #28]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	613b      	str	r3, [r7, #16]
   return(result);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e6      	bne.n	800a7f0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a828:	bf00      	nop
 800a82a:	3724      	adds	r7, #36	; 0x24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a834:	b480      	push	{r7}
 800a836:	b095      	sub	sp, #84	; 0x54
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a850:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a85a:	643b      	str	r3, [r7, #64]	; 0x40
 800a85c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e6      	bne.n	800a83c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3308      	adds	r3, #8
 800a874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f023 0301 	bic.w	r3, r3, #1
 800a884:	64bb      	str	r3, [r7, #72]	; 0x48
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e5      	bne.n	800a86e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d118      	bne.n	800a8dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	e853 3f00 	ldrex	r3, [r3]
 800a8b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f023 0310 	bic.w	r3, r3, #16
 800a8be:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c8:	61bb      	str	r3, [r7, #24]
 800a8ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8cc:	6979      	ldr	r1, [r7, #20]
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	e841 2300 	strex	r3, r2, [r1]
 800a8d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e6      	bne.n	800a8aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a8ee:	bf00      	nop
 800a8f0:	3754      	adds	r7, #84	; 0x54
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b09c      	sub	sp, #112	; 0x70
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a906:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	d170      	bne.n	800a9f8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a918:	2200      	movs	r2, #0
 800a91a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a92e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a932:	66bb      	str	r3, [r7, #104]	; 0x68
 800a934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	461a      	mov	r2, r3
 800a93a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a93c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a93e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a944:	e841 2300 	strex	r3, r2, [r1]
 800a948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e6      	bne.n	800a91e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3308      	adds	r3, #8
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a962:	f023 0301 	bic.w	r3, r3, #1
 800a966:	667b      	str	r3, [r7, #100]	; 0x64
 800a968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a970:	647a      	str	r2, [r7, #68]	; 0x44
 800a972:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e5      	bne.n	800a950 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3308      	adds	r3, #8
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	623b      	str	r3, [r7, #32]
   return(result);
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99a:	663b      	str	r3, [r7, #96]	; 0x60
 800a99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9a4:	633a      	str	r2, [r7, #48]	; 0x30
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e5      	bne.n	800a984 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d118      	bne.n	800a9f8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	e853 3f00 	ldrex	r3, [r3]
 800a9d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 0310 	bic.w	r3, r3, #16
 800a9da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e4:	61fb      	str	r3, [r7, #28]
 800a9e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e8:	69b9      	ldr	r1, [r7, #24]
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	e841 2300 	strex	r3, r2, [r1]
 800a9f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1e6      	bne.n	800a9c6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d107      	bne.n	800aa10 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa06:	4619      	mov	r1, r3
 800aa08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa0a:	f7ff fa01 	bl	8009e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa0e:	e002      	b.n	800aa16 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800aa10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa12:	f7ff f9df 	bl	8009dd4 <HAL_UART_RxCpltCallback>
}
 800aa16:	bf00      	nop
 800aa18:	3770      	adds	r7, #112	; 0x70
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d109      	bne.n	800aa48 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff f9e5 	bl	8009e10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa46:	e002      	b.n	800aa4e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7ff f9cd 	bl	8009de8 <HAL_UART_RxHalfCpltCallback>
}
 800aa4e:	bf00      	nop
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b086      	sub	sp, #24
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d109      	bne.n	800aa92 <UART_DMAError+0x3c>
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b21      	cmp	r3, #33	; 0x21
 800aa82:	d106      	bne.n	800aa92 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800aa8c:	6978      	ldr	r0, [r7, #20]
 800aa8e:	f7ff feab 	bl	800a7e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9c:	2b40      	cmp	r3, #64	; 0x40
 800aa9e:	d109      	bne.n	800aab4 <UART_DMAError+0x5e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b22      	cmp	r3, #34	; 0x22
 800aaa4:	d106      	bne.n	800aab4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800aaae:	6978      	ldr	r0, [r7, #20]
 800aab0:	f7ff fec0 	bl	800a834 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaba:	f043 0210 	orr.w	r2, r3, #16
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac4:	6978      	ldr	r0, [r7, #20]
 800aac6:	f7ff f999 	bl	8009dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaca:	bf00      	nop
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <DataHist_parameters>:
 800aad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aad8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aada:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aadc:	7020      	strb	r0, [r4, #0]
 800aade:	6808      	ldr	r0, [r1, #0]
 800aae0:	6060      	str	r0, [r4, #4]
 800aae2:	6848      	ldr	r0, [r1, #4]
 800aae4:	60a0      	str	r0, [r4, #8]
 800aae6:	6888      	ldr	r0, [r1, #8]
 800aae8:	60e0      	str	r0, [r4, #12]
 800aaea:	68c8      	ldr	r0, [r1, #12]
 800aaec:	6120      	str	r0, [r4, #16]
 800aaee:	6908      	ldr	r0, [r1, #16]
 800aaf0:	6160      	str	r0, [r4, #20]
 800aaf2:	6948      	ldr	r0, [r1, #20]
 800aaf4:	61a0      	str	r0, [r4, #24]
 800aaf6:	6988      	ldr	r0, [r1, #24]
 800aaf8:	61e0      	str	r0, [r4, #28]
 800aafa:	69c8      	ldr	r0, [r1, #28]
 800aafc:	6220      	str	r0, [r4, #32]
 800aafe:	6a09      	ldr	r1, [r1, #32]
 800ab00:	6261      	str	r1, [r4, #36]	; 0x24
 800ab02:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800ab06:	8811      	ldrh	r1, [r2, #0]
 800ab08:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800ab0c:	8521      	strh	r1, [r4, #40]	; 0x28
 800ab0e:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800ab12:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800ab16:	f04f 0e00 	mov.w	lr, #0
 800ab1a:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800ab1e:	4641      	mov	r1, r8
 800ab20:	f852 0b04 	ldr.w	r0, [r2], #4
 800ab24:	f841 0b04 	str.w	r0, [r1], #4
 800ab28:	4562      	cmp	r2, ip
 800ab2a:	d1f9      	bne.n	800ab20 <DataHist_parameters+0x4c>
 800ab2c:	f10e 0e1e 	add.w	lr, lr, #30
 800ab30:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800ab34:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800ab38:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800ab3c:	d1ed      	bne.n	800ab1a <DataHist_parameters+0x46>
 800ab3e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800ab42:	881a      	ldrh	r2, [r3, #0]
 800ab44:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ab48:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800ab4c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ab50:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800ab54:	f04f 0c00 	mov.w	ip, #0
 800ab58:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ab5c:	4672      	mov	r2, lr
 800ab5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab62:	f842 1b04 	str.w	r1, [r2], #4
 800ab66:	4283      	cmp	r3, r0
 800ab68:	d1f9      	bne.n	800ab5e <DataHist_parameters+0x8a>
 800ab6a:	f10c 0c1e 	add.w	ip, ip, #30
 800ab6e:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800ab72:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800ab76:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ab7a:	d1ed      	bne.n	800ab58 <DataHist_parameters+0x84>
 800ab7c:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800ab80:	883b      	ldrh	r3, [r7, #0]
 800ab82:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ab86:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800ab8a:	3780      	adds	r7, #128	; 0x80
 800ab8c:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800ab90:	2000      	movs	r0, #0
 800ab92:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800ab96:	4662      	mov	r2, ip
 800ab98:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab9c:	f842 1b04 	str.w	r1, [r2], #4
 800aba0:	42bb      	cmp	r3, r7
 800aba2:	d1f9      	bne.n	800ab98 <DataHist_parameters+0xc4>
 800aba4:	301e      	adds	r0, #30
 800aba6:	285a      	cmp	r0, #90	; 0x5a
 800aba8:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800abac:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800abb0:	d1ef      	bne.n	800ab92 <DataHist_parameters+0xbe>
 800abb2:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800abb6:	8833      	ldrh	r3, [r6, #0]
 800abb8:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800abbc:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800abc0:	3680      	adds	r6, #128	; 0x80
 800abc2:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800abc6:	2000      	movs	r0, #0
 800abc8:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800abcc:	463a      	mov	r2, r7
 800abce:	f853 1b04 	ldr.w	r1, [r3], #4
 800abd2:	f842 1b04 	str.w	r1, [r2], #4
 800abd6:	429e      	cmp	r6, r3
 800abd8:	d1f9      	bne.n	800abce <DataHist_parameters+0xfa>
 800abda:	301e      	adds	r0, #30
 800abdc:	285a      	cmp	r0, #90	; 0x5a
 800abde:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800abe2:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800abe6:	d1ef      	bne.n	800abc8 <DataHist_parameters+0xf4>
 800abe8:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800abec:	69aa      	ldr	r2, [r5, #24]
 800abee:	f8c3 c004 	str.w	ip, [r3, #4]
 800abf2:	782b      	ldrb	r3, [r5, #0]
 800abf4:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800abf8:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800abfc:	619a      	str	r2, [r3, #24]
 800abfe:	686a      	ldr	r2, [r5, #4]
 800ac00:	605a      	str	r2, [r3, #4]
 800ac02:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800ac06:	68a9      	ldr	r1, [r5, #8]
 800ac08:	6011      	str	r1, [r2, #0]
 800ac0a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800ac0e:	68e9      	ldr	r1, [r5, #12]
 800ac10:	6011      	str	r1, [r2, #0]
 800ac12:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800ac16:	6929      	ldr	r1, [r5, #16]
 800ac18:	6011      	str	r1, [r2, #0]
 800ac1a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800ac1e:	6969      	ldr	r1, [r5, #20]
 800ac20:	6011      	str	r1, [r2, #0]
 800ac22:	69ea      	ldr	r2, [r5, #28]
 800ac24:	61da      	str	r2, [r3, #28]
 800ac26:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800ac2a:	6a2a      	ldr	r2, [r5, #32]
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800ac32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800ac3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800ac42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	bf00      	nop

0800ac4c <rotVect>:
 800ac4c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800ac50:	ed92 5a01 	vldr	s10, [r2, #4]
 800ac54:	edd2 5a00 	vldr	s11, [r2]
 800ac58:	ed92 6a02 	vldr	s12, [r2, #8]
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	f991 3000 	ldrsb.w	r3, [r1]
 800ac64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac68:	ee06 3a90 	vmov	s13, r3
 800ac6c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac70:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800ac74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ac78:	ee07 3a10 	vmov	s14, r3
 800ac7c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ac80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac84:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ac88:	edc0 7a00 	vstr	s15, [r0]
 800ac8c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800ac90:	ed92 5a01 	vldr	s10, [r2, #4]
 800ac94:	edd2 5a00 	vldr	s11, [r2]
 800ac98:	ed92 6a02 	vldr	s12, [r2, #8]
 800ac9c:	ee07 3a90 	vmov	s15, r3
 800aca0:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800aca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aca8:	ee06 3a90 	vmov	s13, r3
 800acac:	ee67 7a85 	vmul.f32	s15, s15, s10
 800acb0:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800acb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800acb8:	ee07 3a10 	vmov	s14, r3
 800acbc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800acc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acc4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800acc8:	edc0 7a01 	vstr	s15, [r0, #4]
 800accc:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800acd0:	ed92 5a01 	vldr	s10, [r2, #4]
 800acd4:	edd2 5a00 	vldr	s11, [r2]
 800acd8:	ed92 6a02 	vldr	s12, [r2, #8]
 800acdc:	ee07 3a90 	vmov	s15, r3
 800ace0:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800ace4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ace8:	ee06 3a90 	vmov	s13, r3
 800acec:	ee67 7a85 	vmul.f32	s15, s15, s10
 800acf0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800acf4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800acf8:	ee07 3a10 	vmov	s14, r3
 800acfc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ad00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ad04:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ad08:	edc0 7a02 	vstr	s15, [r0, #8]
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop

0800ad10 <findAxis>:
 800ad10:	f990 3000 	ldrsb.w	r3, [r0]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d027      	beq.n	800ad68 <findAxis+0x58>
 800ad18:	3301      	adds	r3, #1
 800ad1a:	d00e      	beq.n	800ad3a <findAxis+0x2a>
 800ad1c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d053      	beq.n	800adcc <findAxis+0xbc>
 800ad24:	3301      	adds	r3, #1
 800ad26:	d048      	beq.n	800adba <findAxis+0xaa>
 800ad28:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d053      	beq.n	800add8 <findAxis+0xc8>
 800ad30:	3301      	adds	r3, #1
 800ad32:	d104      	bne.n	800ad3e <findAxis+0x2e>
 800ad34:	2364      	movs	r3, #100	; 0x64
 800ad36:	700b      	strb	r3, [r1, #0]
 800ad38:	e001      	b.n	800ad3e <findAxis+0x2e>
 800ad3a:	2377      	movs	r3, #119	; 0x77
 800ad3c:	700b      	strb	r3, [r1, #0]
 800ad3e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d016      	beq.n	800ad74 <findAxis+0x64>
 800ad46:	3301      	adds	r3, #1
 800ad48:	d02e      	beq.n	800ada8 <findAxis+0x98>
 800ad4a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d039      	beq.n	800adc6 <findAxis+0xb6>
 800ad52:	3301      	adds	r3, #1
 800ad54:	d034      	beq.n	800adc0 <findAxis+0xb0>
 800ad56:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d03f      	beq.n	800adde <findAxis+0xce>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	d10a      	bne.n	800ad78 <findAxis+0x68>
 800ad62:	2364      	movs	r3, #100	; 0x64
 800ad64:	704b      	strb	r3, [r1, #1]
 800ad66:	e007      	b.n	800ad78 <findAxis+0x68>
 800ad68:	2365      	movs	r3, #101	; 0x65
 800ad6a:	700b      	strb	r3, [r1, #0]
 800ad6c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d1e8      	bne.n	800ad46 <findAxis+0x36>
 800ad74:	2365      	movs	r3, #101	; 0x65
 800ad76:	704b      	strb	r3, [r1, #1]
 800ad78:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d010      	beq.n	800ada2 <findAxis+0x92>
 800ad80:	3301      	adds	r3, #1
 800ad82:	d014      	beq.n	800adae <findAxis+0x9e>
 800ad84:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d022      	beq.n	800add2 <findAxis+0xc2>
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	d011      	beq.n	800adb4 <findAxis+0xa4>
 800ad90:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d025      	beq.n	800ade4 <findAxis+0xd4>
 800ad98:	3301      	adds	r3, #1
 800ad9a:	bf04      	itt	eq
 800ad9c:	2364      	moveq	r3, #100	; 0x64
 800ad9e:	708b      	strbeq	r3, [r1, #2]
 800ada0:	4770      	bx	lr
 800ada2:	2365      	movs	r3, #101	; 0x65
 800ada4:	708b      	strb	r3, [r1, #2]
 800ada6:	4770      	bx	lr
 800ada8:	2377      	movs	r3, #119	; 0x77
 800adaa:	704b      	strb	r3, [r1, #1]
 800adac:	e7e4      	b.n	800ad78 <findAxis+0x68>
 800adae:	2377      	movs	r3, #119	; 0x77
 800adb0:	708b      	strb	r3, [r1, #2]
 800adb2:	4770      	bx	lr
 800adb4:	2373      	movs	r3, #115	; 0x73
 800adb6:	708b      	strb	r3, [r1, #2]
 800adb8:	4770      	bx	lr
 800adba:	2373      	movs	r3, #115	; 0x73
 800adbc:	700b      	strb	r3, [r1, #0]
 800adbe:	e7be      	b.n	800ad3e <findAxis+0x2e>
 800adc0:	2373      	movs	r3, #115	; 0x73
 800adc2:	704b      	strb	r3, [r1, #1]
 800adc4:	e7d8      	b.n	800ad78 <findAxis+0x68>
 800adc6:	236e      	movs	r3, #110	; 0x6e
 800adc8:	704b      	strb	r3, [r1, #1]
 800adca:	e7d5      	b.n	800ad78 <findAxis+0x68>
 800adcc:	236e      	movs	r3, #110	; 0x6e
 800adce:	700b      	strb	r3, [r1, #0]
 800add0:	e7b5      	b.n	800ad3e <findAxis+0x2e>
 800add2:	236e      	movs	r3, #110	; 0x6e
 800add4:	708b      	strb	r3, [r1, #2]
 800add6:	4770      	bx	lr
 800add8:	2375      	movs	r3, #117	; 0x75
 800adda:	700b      	strb	r3, [r1, #0]
 800addc:	e7af      	b.n	800ad3e <findAxis+0x2e>
 800adde:	2375      	movs	r3, #117	; 0x75
 800ade0:	704b      	strb	r3, [r1, #1]
 800ade2:	e7c9      	b.n	800ad78 <findAxis+0x68>
 800ade4:	2375      	movs	r3, #117	; 0x75
 800ade6:	708b      	strb	r3, [r1, #2]
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	0000      	movs	r0, r0
	...

0800adf0 <findDirection>:
 800adf0:	b5d0      	push	{r4, r6, r7, lr}
 800adf2:	ed2d 8b04 	vpush	{d8-d9}
 800adf6:	eef0 8ac0 	vabs.f32	s17, s0
 800adfa:	eeb0 8ae0 	vabs.f32	s16, s1
 800adfe:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae06:	4604      	mov	r4, r0
 800ae08:	eeb0 9ac1 	vabs.f32	s18, s2
 800ae0c:	dd36      	ble.n	800ae7c <findDirection+0x8c>
 800ae0e:	eef4 8ac9 	vcmpe.f32	s17, s18
 800ae12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae16:	dd31      	ble.n	800ae7c <findDirection+0x8c>
 800ae18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae20:	ee18 0a90 	vmov	r0, s17
 800ae24:	f340 8094 	ble.w	800af50 <findDirection+0x160>
 800ae28:	f7f5 fb32 	bl	8000490 <__aeabi_f2d>
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	ee18 0a10 	vmov	r0, s16
 800ae32:	460f      	mov	r7, r1
 800ae34:	f7f5 fb2c 	bl	8000490 <__aeabi_f2d>
 800ae38:	a387      	add	r3, pc, #540	; (adr r3, 800b058 <findDirection+0x268>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fb7f 	bl	8000540 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 fe09 	bl	8000a60 <__aeabi_dcmpgt>
 800ae4e:	b188      	cbz	r0, 800ae74 <findDirection+0x84>
 800ae50:	ee19 0a10 	vmov	r0, s18
 800ae54:	f7f5 fb1c 	bl	8000490 <__aeabi_f2d>
 800ae58:	a37f      	add	r3, pc, #508	; (adr r3, 800b058 <findDirection+0x268>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fb6f 	bl	8000540 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4630      	mov	r0, r6
 800ae68:	4639      	mov	r1, r7
 800ae6a:	f7f5 fdf9 	bl	8000a60 <__aeabi_dcmpgt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	bf18      	it	ne
 800ae72:	2404      	movne	r4, #4
 800ae74:	ecbd 8b04 	vpop	{d8-d9}
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bdd0      	pop	{r4, r6, r7, pc}
 800ae7c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae84:	dd32      	ble.n	800aeec <findDirection+0xfc>
 800ae86:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	ee18 0a10 	vmov	r0, s16
 800ae92:	f340 8086 	ble.w	800afa2 <findDirection+0x1b2>
 800ae96:	f7f5 fafb 	bl	8000490 <__aeabi_f2d>
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	ee18 0a90 	vmov	r0, s17
 800aea0:	460f      	mov	r7, r1
 800aea2:	f7f5 faf5 	bl	8000490 <__aeabi_f2d>
 800aea6:	a36c      	add	r3, pc, #432	; (adr r3, 800b058 <findDirection+0x268>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 fb48 	bl	8000540 <__aeabi_dmul>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fdd2 	bl	8000a60 <__aeabi_dcmpgt>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d0d9      	beq.n	800ae74 <findDirection+0x84>
 800aec0:	ee19 0a10 	vmov	r0, s18
 800aec4:	f7f5 fae4 	bl	8000490 <__aeabi_f2d>
 800aec8:	a363      	add	r3, pc, #396	; (adr r3, 800b058 <findDirection+0x268>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fb37 	bl	8000540 <__aeabi_dmul>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 fdc1 	bl	8000a60 <__aeabi_dcmpgt>
 800aede:	ecbd 8b04 	vpop	{d8-d9}
 800aee2:	2800      	cmp	r0, #0
 800aee4:	bf18      	it	ne
 800aee6:	2401      	movne	r4, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	bdd0      	pop	{r4, r6, r7, pc}
 800aeec:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	ee19 0a10 	vmov	r0, s18
 800aef8:	dd7f      	ble.n	800affa <findDirection+0x20a>
 800aefa:	f7f5 fac9 	bl	8000490 <__aeabi_f2d>
 800aefe:	4606      	mov	r6, r0
 800af00:	ee18 0a10 	vmov	r0, s16
 800af04:	460f      	mov	r7, r1
 800af06:	f7f5 fac3 	bl	8000490 <__aeabi_f2d>
 800af0a:	a353      	add	r3, pc, #332	; (adr r3, 800b058 <findDirection+0x268>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 fb16 	bl	8000540 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 fda0 	bl	8000a60 <__aeabi_dcmpgt>
 800af20:	2800      	cmp	r0, #0
 800af22:	d0a7      	beq.n	800ae74 <findDirection+0x84>
 800af24:	ee18 0a90 	vmov	r0, s17
 800af28:	f7f5 fab2 	bl	8000490 <__aeabi_f2d>
 800af2c:	a34a      	add	r3, pc, #296	; (adr r3, 800b058 <findDirection+0x268>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 fb05 	bl	8000540 <__aeabi_dmul>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 fd8f 	bl	8000a60 <__aeabi_dcmpgt>
 800af42:	ecbd 8b04 	vpop	{d8-d9}
 800af46:	2800      	cmp	r0, #0
 800af48:	bf18      	it	ne
 800af4a:	2400      	movne	r4, #0
 800af4c:	4620      	mov	r0, r4
 800af4e:	bdd0      	pop	{r4, r6, r7, pc}
 800af50:	f7f5 fa9e 	bl	8000490 <__aeabi_f2d>
 800af54:	4606      	mov	r6, r0
 800af56:	ee18 0a10 	vmov	r0, s16
 800af5a:	460f      	mov	r7, r1
 800af5c:	f7f5 fa98 	bl	8000490 <__aeabi_f2d>
 800af60:	a33d      	add	r3, pc, #244	; (adr r3, 800b058 <findDirection+0x268>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 faeb 	bl	8000540 <__aeabi_dmul>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 fd75 	bl	8000a60 <__aeabi_dcmpgt>
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f af7c 	beq.w	800ae74 <findDirection+0x84>
 800af7c:	ee19 0a10 	vmov	r0, s18
 800af80:	f7f5 fa86 	bl	8000490 <__aeabi_f2d>
 800af84:	a334      	add	r3, pc, #208	; (adr r3, 800b058 <findDirection+0x268>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 fad9 	bl	8000540 <__aeabi_dmul>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4630      	mov	r0, r6
 800af94:	4639      	mov	r1, r7
 800af96:	f7f5 fd63 	bl	8000a60 <__aeabi_dcmpgt>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	bf18      	it	ne
 800af9e:	2405      	movne	r4, #5
 800afa0:	e768      	b.n	800ae74 <findDirection+0x84>
 800afa2:	f7f5 fa75 	bl	8000490 <__aeabi_f2d>
 800afa6:	4606      	mov	r6, r0
 800afa8:	ee18 0a90 	vmov	r0, s17
 800afac:	460f      	mov	r7, r1
 800afae:	f7f5 fa6f 	bl	8000490 <__aeabi_f2d>
 800afb2:	a329      	add	r3, pc, #164	; (adr r3, 800b058 <findDirection+0x268>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 fac2 	bl	8000540 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7f5 fd4c 	bl	8000a60 <__aeabi_dcmpgt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	f43f af53 	beq.w	800ae74 <findDirection+0x84>
 800afce:	ee19 0a10 	vmov	r0, s18
 800afd2:	f7f5 fa5d 	bl	8000490 <__aeabi_f2d>
 800afd6:	a320      	add	r3, pc, #128	; (adr r3, 800b058 <findDirection+0x268>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fab0 	bl	8000540 <__aeabi_dmul>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fd3a 	bl	8000a60 <__aeabi_dcmpgt>
 800afec:	ecbd 8b04 	vpop	{d8-d9}
 800aff0:	2800      	cmp	r0, #0
 800aff2:	bf18      	it	ne
 800aff4:	2403      	movne	r4, #3
 800aff6:	4620      	mov	r0, r4
 800aff8:	bdd0      	pop	{r4, r6, r7, pc}
 800affa:	f7f5 fa49 	bl	8000490 <__aeabi_f2d>
 800affe:	4606      	mov	r6, r0
 800b000:	ee18 0a10 	vmov	r0, s16
 800b004:	460f      	mov	r7, r1
 800b006:	f7f5 fa43 	bl	8000490 <__aeabi_f2d>
 800b00a:	a313      	add	r3, pc, #76	; (adr r3, 800b058 <findDirection+0x268>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 fa96 	bl	8000540 <__aeabi_dmul>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 fd20 	bl	8000a60 <__aeabi_dcmpgt>
 800b020:	2800      	cmp	r0, #0
 800b022:	f43f af27 	beq.w	800ae74 <findDirection+0x84>
 800b026:	ee18 0a90 	vmov	r0, s17
 800b02a:	f7f5 fa31 	bl	8000490 <__aeabi_f2d>
 800b02e:	a30a      	add	r3, pc, #40	; (adr r3, 800b058 <findDirection+0x268>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 fa84 	bl	8000540 <__aeabi_dmul>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fd0e 	bl	8000a60 <__aeabi_dcmpgt>
 800b044:	ecbd 8b04 	vpop	{d8-d9}
 800b048:	2800      	cmp	r0, #0
 800b04a:	bf18      	it	ne
 800b04c:	2402      	movne	r4, #2
 800b04e:	4620      	mov	r0, r4
 800b050:	bdd0      	pop	{r4, r6, r7, pc}
 800b052:	bf00      	nop
 800b054:	f3af 8000 	nop.w
 800b058:	e0000000 	.word	0xe0000000
 800b05c:	3ff6b851 	.word	0x3ff6b851

0800b060 <updateOrientation>:
 800b060:	b410      	push	{r4}
 800b062:	2300      	movs	r3, #0
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	6043      	str	r3, [r0, #4]
 800b068:	7203      	strb	r3, [r0, #8]
 800b06a:	780c      	ldrb	r4, [r1, #0]
 800b06c:	784a      	ldrb	r2, [r1, #1]
 800b06e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b072:	2b17      	cmp	r3, #23
 800b074:	bf98      	it	ls
 800b076:	3420      	addls	r4, #32
 800b078:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b07c:	bf98      	it	ls
 800b07e:	b2e4      	uxtbls	r4, r4
 800b080:	2b17      	cmp	r3, #23
 800b082:	788b      	ldrb	r3, [r1, #2]
 800b084:	bf98      	it	ls
 800b086:	3220      	addls	r2, #32
 800b088:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b08c:	bf98      	it	ls
 800b08e:	b2d2      	uxtbls	r2, r2
 800b090:	2917      	cmp	r1, #23
 800b092:	bf98      	it	ls
 800b094:	3320      	addls	r3, #32
 800b096:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b09a:	bf98      	it	ls
 800b09c:	b2db      	uxtbls	r3, r3
 800b09e:	2c13      	cmp	r4, #19
 800b0a0:	d80d      	bhi.n	800b0be <updateOrientation+0x5e>
 800b0a2:	e8df f004 	tbb	[pc, r4]
 800b0a6:	0a36      	.short	0x0a36
 800b0a8:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0ac:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0b0:	0c0c0c39 	.word	0x0c0c0c39
 800b0b4:	3f0c3c0c 	.word	0x3f0c3c0c
 800b0b8:	420c      	.short	0x420c
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	7001      	strb	r1, [r0, #0]
 800b0be:	3a64      	subs	r2, #100	; 0x64
 800b0c0:	2a13      	cmp	r2, #19
 800b0c2:	d80d      	bhi.n	800b0e0 <updateOrientation+0x80>
 800b0c4:	e8df f002 	tbb	[pc, r2]
 800b0c8:	0c0c0a34 	.word	0x0c0c0a34
 800b0cc:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0d0:	0c370c0c 	.word	0x0c370c0c
 800b0d4:	3a0c0c0c 	.word	0x3a0c0c0c
 800b0d8:	400c3d0c 	.word	0x400c3d0c
 800b0dc:	2201      	movs	r2, #1
 800b0de:	7042      	strb	r2, [r0, #1]
 800b0e0:	3b64      	subs	r3, #100	; 0x64
 800b0e2:	2b13      	cmp	r3, #19
 800b0e4:	d80d      	bhi.n	800b102 <updateOrientation+0xa2>
 800b0e6:	e8df f003 	tbb	[pc, r3]
 800b0ea:	320a      	.short	0x320a
 800b0ec:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0f0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0f4:	0c0c0c37 	.word	0x0c0c0c37
 800b0f8:	410c3c0c 	.word	0x410c3c0c
 800b0fc:	0f0c      	.short	0x0f0c
 800b0fe:	23ff      	movs	r3, #255	; 0xff
 800b100:	7203      	strb	r3, [r0, #8]
 800b102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	23ff      	movs	r3, #255	; 0xff
 800b10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10e:	7083      	strb	r3, [r0, #2]
 800b110:	4770      	bx	lr
 800b112:	21ff      	movs	r1, #255	; 0xff
 800b114:	7181      	strb	r1, [r0, #6]
 800b116:	e7d2      	b.n	800b0be <updateOrientation+0x5e>
 800b118:	2101      	movs	r1, #1
 800b11a:	70c1      	strb	r1, [r0, #3]
 800b11c:	e7cf      	b.n	800b0be <updateOrientation+0x5e>
 800b11e:	21ff      	movs	r1, #255	; 0xff
 800b120:	70c1      	strb	r1, [r0, #3]
 800b122:	e7cc      	b.n	800b0be <updateOrientation+0x5e>
 800b124:	2101      	movs	r1, #1
 800b126:	7181      	strb	r1, [r0, #6]
 800b128:	e7c9      	b.n	800b0be <updateOrientation+0x5e>
 800b12a:	21ff      	movs	r1, #255	; 0xff
 800b12c:	7001      	strb	r1, [r0, #0]
 800b12e:	e7c6      	b.n	800b0be <updateOrientation+0x5e>
 800b130:	22ff      	movs	r2, #255	; 0xff
 800b132:	71c2      	strb	r2, [r0, #7]
 800b134:	e7d4      	b.n	800b0e0 <updateOrientation+0x80>
 800b136:	2201      	movs	r2, #1
 800b138:	7102      	strb	r2, [r0, #4]
 800b13a:	e7d1      	b.n	800b0e0 <updateOrientation+0x80>
 800b13c:	22ff      	movs	r2, #255	; 0xff
 800b13e:	7102      	strb	r2, [r0, #4]
 800b140:	e7ce      	b.n	800b0e0 <updateOrientation+0x80>
 800b142:	2201      	movs	r2, #1
 800b144:	71c2      	strb	r2, [r0, #7]
 800b146:	e7cb      	b.n	800b0e0 <updateOrientation+0x80>
 800b148:	22ff      	movs	r2, #255	; 0xff
 800b14a:	7042      	strb	r2, [r0, #1]
 800b14c:	e7c8      	b.n	800b0e0 <updateOrientation+0x80>
 800b14e:	2301      	movs	r3, #1
 800b150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b154:	7083      	strb	r3, [r0, #2]
 800b156:	4770      	bx	lr
 800b158:	2301      	movs	r3, #1
 800b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15e:	7143      	strb	r3, [r0, #5]
 800b160:	4770      	bx	lr
 800b162:	23ff      	movs	r3, #255	; 0xff
 800b164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b168:	7143      	strb	r3, [r0, #5]
 800b16a:	4770      	bx	lr
 800b16c:	2301      	movs	r3, #1
 800b16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b172:	7203      	strb	r3, [r0, #8]
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop

0800b178 <qmult>:
 800b178:	ed91 2a03 	vldr	s4, [r1, #12]
 800b17c:	ed90 3a01 	vldr	s6, [r0, #4]
 800b180:	edd0 5a02 	vldr	s11, [r0, #8]
 800b184:	edd1 4a01 	vldr	s9, [r1, #4]
 800b188:	ed90 4a00 	vldr	s8, [r0]
 800b18c:	edd1 3a00 	vldr	s7, [r1]
 800b190:	ed91 5a02 	vldr	s10, [r1, #8]
 800b194:	edd0 2a03 	vldr	s5, [r0, #12]
 800b198:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b19c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b1a0:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b1a4:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b1a8:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b1ac:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b1b0:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b1b4:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b1b8:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b1bc:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b1c0:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b1c4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b1c8:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b1cc:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b1d0:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b1d4:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b1d8:	ed82 6a00 	vstr	s12, [r2]
 800b1dc:	edc2 6a01 	vstr	s13, [r2, #4]
 800b1e0:	ed82 7a02 	vstr	s14, [r2, #8]
 800b1e4:	edc2 7a03 	vstr	s15, [r2, #12]
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop

0800b1ec <MEMS_setMagIndexToOne>:
 800b1ec:	291f      	cmp	r1, #31
 800b1ee:	b430      	push	{r4, r5}
 800b1f0:	d920      	bls.n	800b234 <MEMS_setMagIndexToOne+0x48>
 800b1f2:	6885      	ldr	r5, [r0, #8]
 800b1f4:	3920      	subs	r1, #32
 800b1f6:	2401      	movs	r4, #1
 800b1f8:	fa04 f101 	lsl.w	r1, r4, r1
 800b1fc:	ea21 0105 	bic.w	r1, r1, r5
 800b200:	4069      	eors	r1, r5
 800b202:	2a1f      	cmp	r2, #31
 800b204:	6081      	str	r1, [r0, #8]
 800b206:	d91f      	bls.n	800b248 <MEMS_setMagIndexToOne+0x5c>
 800b208:	6901      	ldr	r1, [r0, #16]
 800b20a:	f1a2 0420 	sub.w	r4, r2, #32
 800b20e:	2201      	movs	r2, #1
 800b210:	40a2      	lsls	r2, r4
 800b212:	ea22 0201 	bic.w	r2, r2, r1
 800b216:	404a      	eors	r2, r1
 800b218:	2b1f      	cmp	r3, #31
 800b21a:	6102      	str	r2, [r0, #16]
 800b21c:	d91e      	bls.n	800b25c <MEMS_setMagIndexToOne+0x70>
 800b21e:	69c2      	ldr	r2, [r0, #28]
 800b220:	f1a3 0120 	sub.w	r1, r3, #32
 800b224:	2301      	movs	r3, #1
 800b226:	408b      	lsls	r3, r1
 800b228:	ea23 0302 	bic.w	r3, r3, r2
 800b22c:	4053      	eors	r3, r2
 800b22e:	bc30      	pop	{r4, r5}
 800b230:	61c3      	str	r3, [r0, #28]
 800b232:	4770      	bx	lr
 800b234:	68c5      	ldr	r5, [r0, #12]
 800b236:	2401      	movs	r4, #1
 800b238:	fa04 f101 	lsl.w	r1, r4, r1
 800b23c:	ea21 0105 	bic.w	r1, r1, r5
 800b240:	4069      	eors	r1, r5
 800b242:	2a1f      	cmp	r2, #31
 800b244:	60c1      	str	r1, [r0, #12]
 800b246:	d8df      	bhi.n	800b208 <MEMS_setMagIndexToOne+0x1c>
 800b248:	6944      	ldr	r4, [r0, #20]
 800b24a:	2101      	movs	r1, #1
 800b24c:	fa01 f202 	lsl.w	r2, r1, r2
 800b250:	ea22 0204 	bic.w	r2, r2, r4
 800b254:	4062      	eors	r2, r4
 800b256:	2b1f      	cmp	r3, #31
 800b258:	6142      	str	r2, [r0, #20]
 800b25a:	d8e0      	bhi.n	800b21e <MEMS_setMagIndexToOne+0x32>
 800b25c:	6981      	ldr	r1, [r0, #24]
 800b25e:	2201      	movs	r2, #1
 800b260:	fa02 f303 	lsl.w	r3, r2, r3
 800b264:	ea23 0301 	bic.w	r3, r3, r1
 800b268:	404b      	eors	r3, r1
 800b26a:	bc30      	pop	{r4, r5}
 800b26c:	6183      	str	r3, [r0, #24]
 800b26e:	4770      	bx	lr

0800b270 <getRotationMatrix>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4605      	mov	r5, r0
 800b274:	460c      	mov	r4, r1
 800b276:	4610      	mov	r0, r2
 800b278:	2100      	movs	r1, #0
 800b27a:	2224      	movs	r2, #36	; 0x24
 800b27c:	f00b fdf4 	bl	8016e68 <memset>
 800b280:	edd5 5a00 	vldr	s11, [r5]
 800b284:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b3ac <getRotationMatrix+0x13c>
 800b288:	edc0 5a02 	vstr	s11, [r0, #8]
 800b28c:	ed95 7a01 	vldr	s14, [r5, #4]
 800b290:	ed80 7a05 	vstr	s14, [r0, #20]
 800b294:	ed95 5a02 	vldr	s10, [r5, #8]
 800b298:	ed80 5a08 	vstr	s10, [r0, #32]
 800b29c:	ed94 4a02 	vldr	s8, [r4, #8]
 800b2a0:	edd4 3a01 	vldr	s7, [r4, #4]
 800b2a4:	edd4 4a00 	vldr	s9, [r4]
 800b2a8:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800b2ac:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800b2b0:	eee3 7a85 	vfma.f32	s15, s7, s10
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b2ba:	eeb0 7ae7 	vabs.f32	s14, s15
 800b2be:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800b2c2:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800b2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ca:	eea4 6a25 	vfma.f32	s12, s8, s11
 800b2ce:	bfdc      	itt	le
 800b2d0:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800b2d4:	eeb0 7a43 	vmovle.f32	s14, s6
 800b2d8:	eeb0 5ac6 	vabs.f32	s10, s12
 800b2dc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b2e0:	edc0 6a06 	vstr	s13, [r0, #24]
 800b2e4:	bfd4      	ite	le
 800b2e6:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800b2ea:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800b2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f2:	ed80 6a03 	vstr	s12, [r0, #12]
 800b2f6:	edc0 7a00 	vstr	s15, [r0]
 800b2fa:	d447      	bmi.n	800b38c <getRotationMatrix+0x11c>
 800b2fc:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800b300:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800b304:	eef0 5a66 	vmov.f32	s11, s13
 800b308:	edd3 6a06 	vldr	s13, [r3, #24]
 800b30c:	eeb0 5ae6 	vabs.f32	s10, s13
 800b310:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b318:	d543      	bpl.n	800b3a2 <getRotationMatrix+0x132>
 800b31a:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b31e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800b322:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b326:	eeb0 7a45 	vmov.f32	s14, s10
 800b32a:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800b32e:	eef0 5a44 	vmov.f32	s11, s8
 800b332:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800b336:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b33a:	ee65 5a07 	vmul.f32	s11, s10, s14
 800b33e:	edd3 3a08 	vldr	s7, [r3, #32]
 800b342:	edd3 4a02 	vldr	s9, [r3, #8]
 800b346:	ed93 4a05 	vldr	s8, [r3, #20]
 800b34a:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800b34e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b352:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b356:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b35a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800b35e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800b362:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800b366:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800b36a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800b36e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800b372:	edc3 7a00 	vstr	s15, [r3]
 800b376:	ed83 6a03 	vstr	s12, [r3, #12]
 800b37a:	ed83 7a06 	vstr	s14, [r3, #24]
 800b37e:	ed83 5a04 	vstr	s10, [r3, #16]
 800b382:	edc3 5a01 	vstr	s11, [r3, #4]
 800b386:	edc3 6a07 	vstr	s13, [r3, #28]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b390:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b394:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b398:	eeb0 7a45 	vmov.f32	s14, s10
 800b39c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800b3a0:	e7b2      	b.n	800b308 <getRotationMatrix+0x98>
 800b3a2:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800b3a6:	eee5 5a05 	vfma.f32	s11, s10, s10
 800b3aa:	e7c2      	b.n	800b332 <getRotationMatrix+0xc2>
 800b3ac:	00000000 	.word	0x00000000

0800b3b0 <b_dcm2q>:
 800b3b0:	ed90 5a08 	vldr	s10, [r0, #32]
 800b3b4:	edd0 7a00 	vldr	s15, [r0]
 800b3b8:	edd0 6a04 	vldr	s13, [r0, #16]
 800b3bc:	ee37 7a85 	vadd.f32	s14, s15, s10
 800b3c0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800b3c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b3c8:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b3cc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d4:	bfc5      	ittet	gt
 800b3d6:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800b3da:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800b3de:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800b4ec <b_dcm2q+0x13c>
 800b3e2:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800b3e6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b3ea:	ee35 6a47 	vsub.f32	s12, s10, s14
 800b3ee:	ee35 7a07 	vadd.f32	s14, s10, s14
 800b3f2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800b3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fa:	bfc5      	ittet	gt
 800b3fc:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800b400:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800b404:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800b4ec <b_dcm2q+0x13c>
 800b408:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800b40c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b410:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b418:	dd5b      	ble.n	800b4d2 <b_dcm2q+0x122>
 800b41a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b41e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b422:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b426:	eef1 4ac7 	vsqrt.f32	s9, s14
 800b42a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800b42e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b432:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b436:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b43a:	edd0 6a07 	vldr	s13, [r0, #28]
 800b43e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b446:	bf85      	ittet	hi
 800b448:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800b44c:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800b450:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800b4ec <b_dcm2q+0x13c>
 800b454:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800b458:	edd0 7a05 	vldr	s15, [r0, #20]
 800b45c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b468:	d43c      	bmi.n	800b4e4 <b_dcm2q+0x134>
 800b46a:	bfd8      	it	le
 800b46c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800b470:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b478:	ed81 7a00 	vstr	s14, [r1]
 800b47c:	edd0 7a06 	vldr	s15, [r0, #24]
 800b480:	ed90 7a02 	vldr	s14, [r0, #8]
 800b484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b490:	d425      	bmi.n	800b4de <b_dcm2q+0x12e>
 800b492:	bfd8      	it	le
 800b494:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800b498:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b49c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b4a0:	edc1 5a01 	vstr	s11, [r1, #4]
 800b4a4:	edd0 7a01 	vldr	s15, [r0, #4]
 800b4a8:	ed90 7a03 	vldr	s14, [r0, #12]
 800b4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	d40e      	bmi.n	800b4d8 <b_dcm2q+0x128>
 800b4ba:	bfd8      	it	le
 800b4bc:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800b4c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b4c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b4c8:	edc1 4a03 	vstr	s9, [r1, #12]
 800b4cc:	ed81 6a02 	vstr	s12, [r1, #8]
 800b4d0:	4770      	bx	lr
 800b4d2:	eddf 4a06 	vldr	s9, [pc, #24]	; 800b4ec <b_dcm2q+0x13c>
 800b4d6:	e7aa      	b.n	800b42e <b_dcm2q+0x7e>
 800b4d8:	eeb1 6a46 	vneg.f32	s12, s12
 800b4dc:	e7f0      	b.n	800b4c0 <b_dcm2q+0x110>
 800b4de:	eef1 5a65 	vneg.f32	s11, s11
 800b4e2:	e7d9      	b.n	800b498 <b_dcm2q+0xe8>
 800b4e4:	eeb1 7a47 	vneg.f32	s14, s14
 800b4e8:	e7c2      	b.n	800b470 <b_dcm2q+0xc0>
 800b4ea:	bf00      	nop
 800b4ec:	00000000 	.word	0x00000000

0800b4f0 <q2hpr>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	ed90 7a00 	vldr	s14, [r0]
 800b4f6:	edd0 6a01 	vldr	s13, [r0, #4]
 800b4fa:	edd0 7a02 	vldr	s15, [r0, #8]
 800b4fe:	ed90 5a03 	vldr	s10, [r0, #12]
 800b502:	ed2d 8b0a 	vpush	{d8-d12}
 800b506:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b50a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b50e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800b512:	ee67 0a07 	vmul.f32	s1, s14, s14
 800b516:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800b51a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b51e:	ee27 7a05 	vmul.f32	s14, s14, s10
 800b522:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b526:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b52a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800b52e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800b532:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800b536:	ee30 ca00 	vadd.f32	s24, s0, s0
 800b53a:	ee36 ba06 	vadd.f32	s22, s12, s12
 800b53e:	ee77 8a07 	vadd.f32	s17, s14, s14
 800b542:	ee75 baa5 	vadd.f32	s23, s11, s11
 800b546:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800b54a:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800b54e:	460c      	mov	r4, r1
 800b550:	bb8a      	cbnz	r2, 800b5b6 <q2hpr+0xc6>
 800b552:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800b556:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800b55a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b55e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800b562:	f009 ffa3 	bl	80154ac <atan2f>
 800b566:	eeb0 8a40 	vmov.f32	s16, s0
 800b56a:	ed84 8a00 	vstr	s16, [r4]
 800b56e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b572:	f009 ff69 	bl	8015448 <asinf>
 800b576:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b57a:	eef0 8a40 	vmov.f32	s17, s0
 800b57e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b582:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b586:	f009 ff91 	bl	80154ac <atan2f>
 800b58a:	eef1 8a68 	vneg.f32	s17, s17
 800b58e:	eeb0 9a40 	vmov.f32	s18, s0
 800b592:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	ed84 9a02 	vstr	s18, [r4, #8]
 800b59e:	edc4 8a01 	vstr	s17, [r4, #4]
 800b5a2:	d505      	bpl.n	800b5b0 <q2hpr+0xc0>
 800b5a4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b5fc <q2hpr+0x10c>
 800b5a8:	ee38 8a00 	vadd.f32	s16, s16, s0
 800b5ac:	ed84 8a00 	vstr	s16, [r4]
 800b5b0:	ecbd 8b0a 	vpop	{d8-d12}
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b5ba:	f009 ff45 	bl	8015448 <asinf>
 800b5be:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b5c2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800b5c6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b5ca:	eeb0 9a40 	vmov.f32	s18, s0
 800b5ce:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b5d2:	f009 ff6b 	bl	80154ac <atan2f>
 800b5d6:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800b5da:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800b5de:	eef0 8a40 	vmov.f32	s17, s0
 800b5e2:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b5e6:	eeb1 0a48 	vneg.f32	s0, s16
 800b5ea:	f009 ff5f 	bl	80154ac <atan2f>
 800b5ee:	eef1 8a68 	vneg.f32	s17, s17
 800b5f2:	eeb0 8a40 	vmov.f32	s16, s0
 800b5f6:	ed84 0a00 	vstr	s0, [r4]
 800b5fa:	e7ca      	b.n	800b592 <q2hpr+0xa2>
 800b5fc:	40c90fdb 	.word	0x40c90fdb

0800b600 <llEvaluate.constprop.0>:
 800b600:	edd2 0a00 	vldr	s1, [r2]
 800b604:	ed90 1a00 	vldr	s2, [r0]
 800b608:	edd0 1a04 	vldr	s3, [r0, #16]
 800b60c:	edd2 5a01 	vldr	s11, [r2, #4]
 800b610:	ed90 6a08 	vldr	s12, [r0, #32]
 800b614:	ed90 2a05 	vldr	s4, [r0, #20]
 800b618:	ed92 7a02 	vldr	s14, [r2, #8]
 800b61c:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800b620:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800b624:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800b628:	edd2 7a03 	vldr	s15, [r2, #12]
 800b62c:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800b630:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800b634:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800b638:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	f10d 0810 	add.w	r8, sp, #16
 800b646:	2704      	movs	r7, #4
 800b648:	f101 0510 	add.w	r5, r1, #16
 800b64c:	2f04      	cmp	r7, #4
 800b64e:	4686      	mov	lr, r0
 800b650:	f04f 0c03 	mov.w	ip, #3
 800b654:	b27b      	sxtb	r3, r7
 800b656:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800b65a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800b65e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800b662:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800b666:	eea6 7a43 	vfms.f32	s14, s12, s6
 800b66a:	edcd 6a00 	vstr	s13, [sp]
 800b66e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800b672:	eee6 7a63 	vfms.f32	s15, s12, s7
 800b676:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b67a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800b67e:	edcd 6a02 	vstr	s13, [sp, #8]
 800b682:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b686:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b68a:	ed78 7a01 	vldmdb	r8!, {s15}
 800b68e:	ed65 7a01 	vstmdb	r5!, {s15}
 800b692:	d029      	beq.n	800b6e8 <llEvaluate.constprop.0+0xe8>
 800b694:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800b698:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800b69c:	4432      	add	r2, r6
 800b69e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800b6a2:	edd2 6a00 	vldr	s13, [r2]
 800b6a6:	ed94 7a00 	vldr	s14, [r4]
 800b6aa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	2a04      	cmp	r2, #4
 800b6b4:	b25b      	sxtb	r3, r3
 800b6b6:	edc5 7a00 	vstr	s15, [r5]
 800b6ba:	d1ed      	bne.n	800b698 <llEvaluate.constprop.0+0x98>
 800b6bc:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b6c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6c4:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800b6c8:	ed85 7a00 	vstr	s14, [r5]
 800b6cc:	d013      	beq.n	800b6f6 <llEvaluate.constprop.0+0xf6>
 800b6ce:	3f01      	subs	r7, #1
 800b6d0:	b2ff      	uxtb	r7, r7
 800b6d2:	ed78 7a01 	vldmdb	r8!, {s15}
 800b6d6:	2f04      	cmp	r7, #4
 800b6d8:	f1ae 0e14 	sub.w	lr, lr, #20
 800b6dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6e0:	b27b      	sxtb	r3, r7
 800b6e2:	ed65 7a01 	vstmdb	r5!, {s15}
 800b6e6:	d1d5      	bne.n	800b694 <llEvaluate.constprop.0+0x94>
 800b6e8:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b6ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6f0:	ed85 7a00 	vstr	s14, [r5]
 800b6f4:	e7eb      	b.n	800b6ce <llEvaluate.constprop.0+0xce>
 800b6f6:	b004      	add	sp, #16
 800b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6fc <MEMS_updateMagBufferIndex>:
 800b6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b700:	ed2d 8b02 	vpush	{d8}
 800b704:	7804      	ldrb	r4, [r0, #0]
 800b706:	7842      	ldrb	r2, [r0, #1]
 800b708:	4606      	mov	r6, r0
 800b70a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800b70e:	2300      	movs	r3, #0
 800b710:	4294      	cmp	r4, r2
 800b712:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800b716:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800b71a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800b71e:	b083      	sub	sp, #12
 800b720:	460d      	mov	r5, r1
 800b722:	f100 0001 	add.w	r0, r0, #1
 800b726:	f000 8083 	beq.w	800b830 <MEMS_updateMagBufferIndex+0x134>
 800b72a:	1b00      	subs	r0, r0, r4
 800b72c:	fb90 f8f2 	sdiv	r8, r0, r2
 800b730:	fb02 0018 	mls	r0, r2, r8, r0
 800b734:	2800      	cmp	r0, #0
 800b736:	bfb6      	itet	lt
 800b738:	eb02 0800 	addlt.w	r8, r2, r0
 800b73c:	fa0f f880 	sxthge.w	r8, r0
 800b740:	fa0f f888 	sxthlt.w	r8, r8
 800b744:	b934      	cbnz	r4, 800b754 <MEMS_updateMagBufferIndex+0x58>
 800b746:	23ff      	movs	r3, #255	; 0xff
 800b748:	70b3      	strb	r3, [r6, #2]
 800b74a:	b003      	add	sp, #12
 800b74c:	ecbd 8b02 	vpop	{d8}
 800b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b758:	2700      	movs	r7, #0
 800b75a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800b75e:	463b      	mov	r3, r7
 800b760:	e000      	b.n	800b764 <MEMS_updateMagBufferIndex+0x68>
 800b762:	7872      	ldrb	r2, [r6, #1]
 800b764:	4443      	add	r3, r8
 800b766:	fb93 f4f2 	sdiv	r4, r3, r2
 800b76a:	fb02 3314 	mls	r3, r2, r4, r3
 800b76e:	b2dc      	uxtb	r4, r3
 800b770:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800b774:	3701      	adds	r7, #1
 800b776:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800b77a:	fb92 f3f5 	sdiv	r3, r2, r5
 800b77e:	fb05 2313 	mls	r3, r5, r3, r2
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfb8      	it	lt
 800b786:	195b      	addlt	r3, r3, r5
 800b788:	b21b      	sxth	r3, r3
 800b78a:	ee00 3a10 	vmov	s0, r3
 800b78e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b792:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b796:	f009 fd5f 	bl	8015258 <roundf>
 800b79a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800b79e:	fb92 f3f5 	sdiv	r3, r2, r5
 800b7a2:	fb05 2313 	mls	r3, r5, r3, r2
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	195b      	addlt	r3, r3, r5
 800b7ac:	b21b      	sxth	r3, r3
 800b7ae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b7b2:	ee00 3a10 	vmov	s0, r3
 800b7b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b7ba:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7be:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b7c2:	f009 fd49 	bl	8015258 <roundf>
 800b7c6:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800b7ca:	fb92 f3f5 	sdiv	r3, r2, r5
 800b7ce:	fb05 2313 	mls	r3, r5, r3, r2
 800b7d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b7d6:	18ea      	adds	r2, r5, r3
 800b7d8:	b219      	sxth	r1, r3
 800b7da:	b212      	sxth	r2, r2
 800b7dc:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800b7e0:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7e4:	ee00 1a10 	vmov	s0, r1
 800b7e8:	ee07 2a90 	vmov	s15, r2
 800b7ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b7f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b7fa:	bfb8      	it	lt
 800b7fc:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800b800:	f009 fd2a 	bl	8015258 <roundf>
 800b804:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b808:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800b80c:	edcd 7a01 	vstr	s15, [sp, #4]
 800b810:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b814:	4622      	mov	r2, r4
 800b816:	4649      	mov	r1, r9
 800b818:	4630      	mov	r0, r6
 800b81a:	f7ff fce7 	bl	800b1ec <MEMS_setMagIndexToOne>
 800b81e:	7832      	ldrb	r2, [r6, #0]
 800b820:	b2fb      	uxtb	r3, r7
 800b822:	429a      	cmp	r2, r3
 800b824:	d89d      	bhi.n	800b762 <MEMS_updateMagBufferIndex+0x66>
 800b826:	b003      	add	sp, #12
 800b828:	ecbd 8b02 	vpop	{d8}
 800b82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b830:	fb90 f8f4 	sdiv	r8, r0, r4
 800b834:	fb04 0018 	mls	r0, r4, r8, r0
 800b838:	fa0f f880 	sxth.w	r8, r0
 800b83c:	e782      	b.n	800b744 <MEMS_updateMagBufferIndex+0x48>
 800b83e:	bf00      	nop

0800b840 <getMagStats.constprop.0>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b846:	2400      	movs	r4, #0
 800b848:	4607      	mov	r7, r0
 800b84a:	6034      	str	r4, [r6, #0]
 800b84c:	601c      	str	r4, [r3, #0]
 800b84e:	7800      	ldrb	r0, [r0, #0]
 800b850:	787d      	ldrb	r5, [r7, #1]
 800b852:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800b856:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b85a:	42a8      	cmp	r0, r5
 800b85c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800b860:	f000 80c0 	beq.w	800b9e4 <getMagStats.constprop.0+0x1a4>
 800b864:	3401      	adds	r4, #1
 800b866:	eba4 0c00 	sub.w	ip, r4, r0
 800b86a:	fb9c f4f5 	sdiv	r4, ip, r5
 800b86e:	fb05 c414 	mls	r4, r5, r4, ip
 800b872:	2c00      	cmp	r4, #0
 800b874:	bfb8      	it	lt
 800b876:	1964      	addlt	r4, r4, r5
 800b878:	b224      	sxth	r4, r4
 800b87a:	ee04 0a90 	vmov	s9, r0
 800b87e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800ba00 <getMagStats.constprop.0+0x1c0>
 800b882:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800b886:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b88a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b88e:	2800      	cmp	r0, #0
 800b890:	f000 80b2 	beq.w	800b9f8 <getMagStats.constprop.0+0x1b8>
 800b894:	3801      	subs	r0, #1
 800b896:	fa54 fc80 	uxtab	ip, r4, r0
 800b89a:	f8b1 9000 	ldrh.w	r9, [r1]
 800b89e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800b8a2:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800b8a6:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800ba04 <getMagStats.constprop.0+0x1c4>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e002      	b.n	800b8b4 <getMagStats.constprop.0+0x74>
 800b8ae:	ed93 3a00 	vldr	s6, [r3]
 800b8b2:	3401      	adds	r4, #1
 800b8b4:	fb94 f1f5 	sdiv	r1, r4, r5
 800b8b8:	fb05 4111 	mls	r1, r5, r1, r4
 800b8bc:	b2c9      	uxtb	r1, r1
 800b8be:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800b8c2:	edd2 3a00 	vldr	s7, [r2]
 800b8c6:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800b8ca:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800b8ce:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800b8d0:	ed92 4a04 	vldr	s8, [r2, #16]
 800b8d4:	ed92 6a08 	vldr	s12, [r2, #32]
 800b8d8:	ebaa 0a09 	sub.w	sl, sl, r9
 800b8dc:	ebab 0b08 	sub.w	fp, fp, r8
 800b8e0:	fa0f fa8a 	sxth.w	sl, sl
 800b8e4:	ee07 aa10 	vmov	s14, sl
 800b8e8:	fa0f fa8b 	sxth.w	sl, fp
 800b8ec:	ee06 aa90 	vmov	s13, sl
 800b8f0:	eba1 010e 	sub.w	r1, r1, lr
 800b8f4:	b209      	sxth	r1, r1
 800b8f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b8fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b8fe:	ee07 1a90 	vmov	s15, r1
 800b902:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b906:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b90a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b90e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b912:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b916:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b91a:	ee16 1a90 	vmov	r1, s13
 800b91e:	ee17 aa10 	vmov	sl, s14
 800b922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b926:	fb11 f101 	smulbb	r1, r1, r1
 800b92a:	fa0f fa8a 	sxth.w	sl, sl
 800b92e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800b932:	ee17 1a90 	vmov	r1, s15
 800b936:	b209      	sxth	r1, r1
 800b938:	fb01 a101 	mla	r1, r1, r1, sl
 800b93c:	ee07 1a90 	vmov	s15, r1
 800b940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b944:	f100 0a01 	add.w	sl, r0, #1
 800b948:	eef1 6ae7 	vsqrt.f32	s13, s15
 800b94c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b950:	ee17 1a90 	vmov	r1, s15
 800b954:	b209      	sxth	r1, r1
 800b956:	ee07 1a10 	vmov	s14, r1
 800b95a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b95e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800b962:	ee37 7a03 	vadd.f32	s14, s14, s6
 800b966:	eef0 7ae7 	vabs.f32	s15, s15
 800b96a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b96e:	ed83 7a00 	vstr	s14, [r3]
 800b972:	ee17 1a90 	vmov	r1, s15
 800b976:	b209      	sxth	r1, r1
 800b978:	fb01 fb01 	mul.w	fp, r1, r1
 800b97c:	ee07 ba90 	vmov	s15, fp
 800b980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b984:	ee07 1a90 	vmov	s15, r1
 800b988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b98c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800b990:	edd6 7a00 	vldr	s15, [r6]
 800b994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b99c:	bf48      	it	mi
 800b99e:	fa5f f08a 	uxtbmi.w	r0, sl
 800b9a2:	45a4      	cmp	ip, r4
 800b9a4:	edc6 7a00 	vstr	s15, [r6]
 800b9a8:	d181      	bne.n	800b8ae <getMagStats.constprop.0+0x6e>
 800b9aa:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800b9ae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ba08 <getMagStats.constprop.0+0x1c8>
 800b9b2:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800b9b6:	eef1 7ae6 	vsqrt.f32	s15, s13
 800b9ba:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b9be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	bfb8      	it	lt
 800b9c8:	eef0 7a47 	vmovlt.f32	s15, s14
 800b9cc:	edc6 7a00 	vstr	s15, [r6]
 800b9d0:	edd3 7a00 	vldr	s15, [r3]
 800b9d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9d8:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800b9dc:	edc3 7a00 	vstr	s15, [r3]
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	1c65      	adds	r5, r4, #1
 800b9e6:	fb95 f4f0 	sdiv	r4, r5, r0
 800b9ea:	fb00 5414 	mls	r4, r0, r4, r5
 800b9ee:	ee04 0a90 	vmov	s9, r0
 800b9f2:	b224      	sxth	r4, r4
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	e742      	b.n	800b87e <getMagStats.constprop.0+0x3e>
 800b9f8:	edd6 7a00 	vldr	s15, [r6]
 800b9fc:	e7d5      	b.n	800b9aa <getMagStats.constprop.0+0x16a>
 800b9fe:	bf00      	nop
 800ba00:	423c0000 	.word	0x423c0000
 800ba04:	00000000 	.word	0x00000000
 800ba08:	3f59999a 	.word	0x3f59999a

0800ba0c <MFX_emptyAttitude>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	ed2d 8b10 	vpush	{d8-d15}
 800ba14:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800ba18:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800ba1c:	f04f 0a00 	mov.w	sl, #0
 800ba20:	4fef      	ldr	r7, [pc, #956]	; (800bde0 <MFX_emptyAttitude+0x3d4>)
 800ba22:	f8c4 a008 	str.w	sl, [r4, #8]
 800ba26:	e9c4 aa00 	strd	sl, sl, [r4]
 800ba2a:	f837 3b04 	ldrh.w	r3, [r7], #4
 800ba2e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800ba32:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800ba36:	4680      	mov	r8, r0
 800ba38:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800ba3c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800ba40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ba44:	0c1b      	lsrs	r3, r3, #16
 800ba46:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800ba4a:	ab27      	add	r3, sp, #156	; 0x9c
 800ba4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba50:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800ba54:	ab2d      	add	r3, sp, #180	; 0xb4
 800ba56:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800ba5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba5e:	ab30      	add	r3, sp, #192	; 0xc0
 800ba60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba64:	ab33      	add	r3, sp, #204	; 0xcc
 800ba66:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ba6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba6e:	f04f 0c00 	mov.w	ip, #0
 800ba72:	ab36      	add	r3, sp, #216	; 0xd8
 800ba74:	f04f 0b00 	mov.w	fp, #0
 800ba78:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800ba7c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800ba80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba84:	4628      	mov	r0, r5
 800ba86:	2224      	movs	r2, #36	; 0x24
 800ba88:	f00b f9ee 	bl	8016e68 <memset>
 800ba8c:	4651      	mov	r1, sl
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ba94:	ed9f bad3 	vldr	s22, [pc, #844]	; 800bde4 <MFX_emptyAttitude+0x3d8>
 800ba98:	eddf ead3 	vldr	s29, [pc, #844]	; 800bde8 <MFX_emptyAttitude+0x3dc>
 800ba9c:	f00b f9e4 	bl	8016e68 <memset>
 800baa0:	edd5 4a00 	vldr	s9, [r5]
 800baa4:	ed95 5a01 	vldr	s10, [r5, #4]
 800baa8:	edd5 5a02 	vldr	s11, [r5, #8]
 800baac:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800bab0:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800bab4:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800bab8:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800babc:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800bac0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800bac4:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800bac8:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800bacc:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800bad0:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800bad4:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800bad8:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800badc:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800bae0:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800bae4:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800bae8:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800baec:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800baf0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800baf4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800baf8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800bafc:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800bb00:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800bb04:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800bb08:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800bb0c:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800bb10:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800bb14:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800bb18:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800bb1c:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800bb20:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800bb24:	ed95 6a03 	vldr	s12, [r5, #12]
 800bb28:	edd5 6a04 	vldr	s13, [r5, #16]
 800bb2c:	ed95 7a05 	vldr	s14, [r5, #20]
 800bb30:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800bb34:	ed8d 6a08 	vstr	s12, [sp, #32]
 800bb38:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800bb3c:	edcd 6a07 	vstr	s13, [sp, #28]
 800bb40:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800bb44:	ed8d 7a06 	vstr	s14, [sp, #24]
 800bb48:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800bb4c:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800bb50:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800bb54:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800bb58:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800bb5c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800bb60:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800bb64:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800bb68:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800bb6c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800bb70:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800bb74:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800bb78:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800bb7c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800bb80:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800bb84:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800bb88:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800bb8c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800bb90:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800bb94:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800bb98:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800bb9c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800bba0:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800bba4:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800bba8:	edd5 7a06 	vldr	s15, [r5, #24]
 800bbac:	edd5 fa07 	vldr	s31, [r5, #28]
 800bbb0:	ed95 fa08 	vldr	s30, [r5, #32]
 800bbb4:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800bbb8:	edcd 7a05 	vstr	s15, [sp, #20]
 800bbbc:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800bbc0:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800bbc4:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800bbc8:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800bbcc:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800bbd0:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800bbd4:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800bbd8:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800bbdc:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800bbe0:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800bbe4:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800bbe8:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800bbec:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800bbf0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800bbf4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800bbf8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800bbfc:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800bc00:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800bc04:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800bc08:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800bc0c:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800bc10:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800bc14:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800bc18:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800bc1c:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800bc20:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800bc24:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800bc28:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800bc2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bc2e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800bc32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bc38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	f8cc 3000 	str.w	r3, [ip]
 800bc42:	4651      	mov	r1, sl
 800bc44:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800bc4e:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800bc52:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800bc56:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800bc5a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800bc5e:	f00b f903 	bl	8016e68 <memset>
 800bc62:	4621      	mov	r1, r4
 800bc64:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc68:	a898      	add	r0, sp, #608	; 0x260
 800bc6a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bc6e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800bc72:	f00b f8eb 	bl	8016e4c <memcpy>
 800bc76:	4651      	mov	r1, sl
 800bc78:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800bc82:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800bc86:	f00b f8ef 	bl	8016e68 <memset>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc90:	a8f4      	add	r0, sp, #976	; 0x3d0
 800bc92:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800bc96:	f00b f8d9 	bl	8016e4c <memcpy>
 800bc9a:	4651      	mov	r1, sl
 800bc9c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bca0:	4620      	mov	r0, r4
 800bca2:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800bca6:	f00b f8df 	bl	8016e68 <memset>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	8037      	strh	r7, [r6, #0]
 800bcae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bcb2:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800bcb6:	f00b f8c9 	bl	8016e4c <memcpy>
 800bcba:	4651      	mov	r1, sl
 800bcbc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	ed86 8a01 	vstr	s16, [r6, #4]
 800bcc6:	f00b f8cf 	bl	8016e68 <memset>
 800bcca:	4621      	mov	r1, r4
 800bccc:	802f      	strh	r7, [r5, #0]
 800bcce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bcd2:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800bcd6:	f00b f8b9 	bl	8016e4c <memcpy>
 800bcda:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800bcde:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800bce2:	2701      	movs	r7, #1
 800bce4:	9600      	str	r6, [sp, #0]
 800bce6:	9403      	str	r4, [sp, #12]
 800bce8:	eddf 3a40 	vldr	s7, [pc, #256]	; 800bdec <MFX_emptyAttitude+0x3e0>
 800bcec:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800bdf0 <MFX_emptyAttitude+0x3e4>
 800bcf0:	ed85 8a01 	vstr	s16, [r5, #4]
 800bcf4:	483f      	ldr	r0, [pc, #252]	; (800bdf4 <MFX_emptyAttitude+0x3e8>)
 800bcf6:	4d40      	ldr	r5, [pc, #256]	; (800bdf8 <MFX_emptyAttitude+0x3ec>)
 800bcf8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800be1c <MFX_emptyAttitude+0x410>
 800bcfc:	951c      	str	r5, [sp, #112]	; 0x70
 800bcfe:	abf2      	add	r3, sp, #968	; 0x3c8
 800bd00:	aa96      	add	r2, sp, #600	; 0x258
 800bd02:	a90d      	add	r1, sp, #52	; 0x34
 800bd04:	9017      	str	r0, [sp, #92]	; 0x5c
 800bd06:	4d3d      	ldr	r5, [pc, #244]	; (800bdfc <MFX_emptyAttitude+0x3f0>)
 800bd08:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	ae27      	add	r6, sp, #156	; 0x9c
 800bd10:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800bd14:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800bd18:	951b      	str	r5, [sp, #108]	; 0x6c
 800bd1a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800bd1e:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800bd22:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800bd26:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800bd2a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800bd2e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800bd32:	f7fe fecf 	bl	800aad4 <DataHist_parameters>
 800bd36:	ce07      	ldmia	r6!, {r0, r1, r2}
 800bd38:	4b31      	ldr	r3, [pc, #196]	; (800be00 <MFX_emptyAttitude+0x3f4>)
 800bd3a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800bd3e:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800bd42:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800bd46:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800bd4a:	f8c8 300c 	str.w	r3, [r8, #12]
 800bd4e:	4b2d      	ldr	r3, [pc, #180]	; (800be04 <MFX_emptyAttitude+0x3f8>)
 800bd50:	f8c8 3014 	str.w	r3, [r8, #20]
 800bd54:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800bd58:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800be08 <MFX_emptyAttitude+0x3fc>
 800bd5c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800be0c <MFX_emptyAttitude+0x400>
 800bd60:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800be10 <MFX_emptyAttitude+0x404>
 800bd64:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800be14 <MFX_emptyAttitude+0x408>
 800bd68:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800be18 <MFX_emptyAttitude+0x40c>
 800bd6c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800bd70:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800be20 <MFX_emptyAttitude+0x414>
 800bd74:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800be24 <MFX_emptyAttitude+0x418>
 800bd78:	edc8 2a06 	vstr	s5, [r8, #24]
 800bd7c:	f04f 0b00 	mov.w	fp, #0
 800bd80:	f04f 0c00 	mov.w	ip, #0
 800bd84:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800bd88:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800bd8c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800bd90:	ad2d      	add	r5, sp, #180	; 0xb4
 800bd92:	469b      	mov	fp, r3
 800bd94:	f8df c090 	ldr.w	ip, [pc, #144]	; 800be28 <MFX_emptyAttitude+0x41c>
 800bd98:	ed88 3a07 	vstr	s6, [r8, #28]
 800bd9c:	f240 1301 	movw	r3, #257	; 0x101
 800bda0:	edc8 3a08 	vstr	s7, [r8, #32]
 800bda4:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800bda8:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800bdac:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800bdb0:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800bdb4:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800bdb8:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800bdbc:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800bdc0:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800bdc4:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800bdc8:	f8c8 3000 	str.w	r3, [r8]
 800bdcc:	f8a8 3004 	strh.w	r3, [r8, #4]
 800bdd0:	ed88 8a02 	vstr	s16, [r8, #8]
 800bdd4:	ed88 8a04 	vstr	s16, [r8, #16]
 800bdd8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800bddc:	e028      	b.n	800be30 <MFX_emptyAttitude+0x424>
 800bdde:	bf00      	nop
 800bde0:	08017050 	.word	0x08017050
 800bde4:	00000000 	.word	0x00000000
 800bde8:	447a0000 	.word	0x447a0000
 800bdec:	3e93ffa3 	.word	0x3e93ffa3
 800bdf0:	3e5cec8f 	.word	0x3e5cec8f
 800bdf4:	3ea25c13 	.word	0x3ea25c13
 800bdf8:	40a00000 	.word	0x40a00000
 800bdfc:	3d57bb3d 	.word	0x3d57bb3d
 800be00:	01010100 	.word	0x01010100
 800be04:	41200000 	.word	0x41200000
 800be08:	3a9d4952 	.word	0x3a9d4952
 800be0c:	3ac49ba6 	.word	0x3ac49ba6
 800be10:	3b03126f 	.word	0x3b03126f
 800be14:	402ab021 	.word	0x402ab021
 800be18:	3a83126f 	.word	0x3a83126f
 800be1c:	3e006d36 	.word	0x3e006d36
 800be20:	3f639581 	.word	0x3f639581
 800be24:	3f13f7cf 	.word	0x3f13f7cf
 800be28:	3f2ac083 	.word	0x3f2ac083
 800be2c:	3f4ccccd 	.word	0x3f4ccccd
 800be30:	cd07      	ldmia	r5!, {r0, r1, r2}
 800be32:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800be36:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800be3a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800be3e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800be42:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800be46:	ab33      	add	r3, sp, #204	; 0xcc
 800be48:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800be4c:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800be50:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800be54:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be56:	ab36      	add	r3, sp, #216	; 0xd8
 800be58:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800be5c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800be60:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800be64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be66:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800be2c <MFX_emptyAttitude+0x420>
 800be6a:	4bd6      	ldr	r3, [pc, #856]	; (800c1c4 <MFX_emptyAttitude+0x7b8>)
 800be6c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800be70:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800be74:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800be78:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800be7c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800be80:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800be84:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800be88:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800be8c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800be90:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800be94:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800be98:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800be9c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800bea0:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800bea4:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800bea8:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800beac:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800beb0:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800beb4:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800beb8:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800bebc:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800bec0:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800bec4:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800bec8:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800becc:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800bed0:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800bed4:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800bed8:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800bedc:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800bee0:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800bee4:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800bee8:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800beec:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800bef0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800bef4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800bef8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800befc:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800bf00:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800bf04:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800bf08:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800bf0c:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800bf10:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800bf14:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800bf18:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800bf1c:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800bf20:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800bf24:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800bf28:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800bf2c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800bf30:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800bf34:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800bf38:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800bf3c:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800bf40:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800bf44:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800bf48:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800bf4c:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800bf50:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800bf54:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800bf58:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800bf5c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800bf60:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800bf64:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800bf68:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800bf6c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800bf70:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800bf74:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800bf78:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800bf7c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800bf80:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800bf84:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800bf88:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800bf8c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800bf90:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800bf94:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800bf98:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800bf9c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800bfa0:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800bfa4:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800bfa8:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800bfac:	ed9d 6a08 	vldr	s12, [sp, #32]
 800bfb0:	eddd 6a07 	vldr	s13, [sp, #28]
 800bfb4:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800bfb8:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800bfbc:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800bfc0:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800bfc4:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800bfc8:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800bfcc:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800bfd0:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800bfd4:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800bfd8:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800bfdc:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800bfe0:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800bfe4:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800bfe8:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800bfec:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800bff0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800bff4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800bff8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800bffc:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c000:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c004:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c008:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c00c:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c010:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c014:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c018:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c01c:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c020:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c024:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c028:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c02c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c030:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c034:	eddd 7a05 	vldr	s15, [sp, #20]
 800c038:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c03c:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c040:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c044:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c048:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c04c:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c050:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c054:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c058:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c05c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c060:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c064:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c068:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c06c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c070:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c074:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c078:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c07c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c080:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c084:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c088:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c08c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c090:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c094:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c098:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c09c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c0a0:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c0a4:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c0a8:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c0ac:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c0b0:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c0b4:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c0b8:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c0bc:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c0c0:	7820      	ldrb	r0, [r4, #0]
 800c0c2:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c0c6:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c0ca:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c0ce:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c0d2:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c0d6:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c0da:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c0de:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c0e2:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c0e6:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c0ea:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c0ee:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c0f2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c0f6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c0fa:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c0fe:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c102:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c106:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c10a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c10e:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c112:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c116:	f8cd e00c 	str.w	lr, [sp, #12]
 800c11a:	9500      	str	r5, [sp, #0]
 800c11c:	f7fe fcda 	bl	800aad4 <DataHist_parameters>
 800c120:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c124:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c128:	9205      	str	r2, [sp, #20]
 800c12a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c12e:	ed8b ba00 	vstr	s22, [fp]
 800c132:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c136:	ed83 ba00 	vstr	s22, [r3]
 800c13a:	9b05      	ldr	r3, [sp, #20]
 800c13c:	9106      	str	r1, [sp, #24]
 800c13e:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c142:	ed89 ba00 	vstr	s22, [r9]
 800c146:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c14a:	ed83 8a00 	vstr	s16, [r3]
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	9207      	str	r2, [sp, #28]
 800c152:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c156:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c15a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c15e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c162:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c166:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c16a:	ed8e ba00 	vstr	s22, [lr]
 800c16e:	ed8c ba00 	vstr	s22, [ip]
 800c172:	ed87 ba00 	vstr	s22, [r7]
 800c176:	ed86 ba00 	vstr	s22, [r6]
 800c17a:	ed85 ba00 	vstr	s22, [r5]
 800c17e:	ed84 ba00 	vstr	s22, [r4]
 800c182:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c186:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c18a:	ed83 ba00 	vstr	s22, [r3]
 800c18e:	9b07      	ldr	r3, [sp, #28]
 800c190:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c194:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c198:	ed80 8a00 	vstr	s16, [r0]
 800c19c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c1a0:	ed81 ba00 	vstr	s22, [r1]
 800c1a4:	ed83 ba00 	vstr	s22, [r3]
 800c1a8:	230a      	movs	r3, #10
 800c1aa:	ed82 ba00 	vstr	s22, [r2]
 800c1ae:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c1b2:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c1b6:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c1ba:	ecbd 8b10 	vpop	{d8-d15}
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	bf00      	nop
 800c1c4:	3f333333 	.word	0x3f333333

0800c1c8 <output_update>:
 800c1c8:	ed90 7a00 	vldr	s14, [r0]
 800c1cc:	edd0 7a01 	vldr	s15, [r0, #4]
 800c1d0:	ed90 5a03 	vldr	s10, [r0, #12]
 800c1d4:	edd0 5a02 	vldr	s11, [r0, #8]
 800c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c1e0:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c1e4:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c1e8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c1ec:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c1f0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c1f4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1f8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c1fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c200:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c204:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c208:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c20c:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c210:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c214:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c218:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c21c:	460f      	mov	r7, r1
 800c21e:	4615      	mov	r5, r2
 800c220:	461e      	mov	r6, r3
 800c222:	f1bc 0f00 	cmp.w	ip, #0
 800c226:	d146      	bne.n	800c2b6 <output_update+0xee>
 800c228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c22c:	eef1 6a66 	vneg.f32	s13, s13
 800c230:	edc3 7a01 	vstr	s15, [r3, #4]
 800c234:	edc3 6a00 	vstr	s13, [r3]
 800c238:	ed83 5a02 	vstr	s10, [r3, #8]
 800c23c:	4662      	mov	r2, ip
 800c23e:	4629      	mov	r1, r5
 800c240:	4604      	mov	r4, r0
 800c242:	f7ff f955 	bl	800b4f0 <q2hpr>
 800c246:	edd5 6a01 	vldr	s13, [r5, #4]
 800c24a:	ed95 7a00 	vldr	s14, [r5]
 800c24e:	edd5 7a02 	vldr	s15, [r5, #8]
 800c252:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800c364 <output_update+0x19c>
 800c256:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c25a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c25e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c262:	ed85 7a00 	vstr	s14, [r5]
 800c266:	edc5 6a01 	vstr	s13, [r5, #4]
 800c26a:	edc5 7a02 	vstr	s15, [r5, #8]
 800c26e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c272:	edd6 7a00 	vldr	s15, [r6]
 800c276:	6822      	ldr	r2, [r4, #0]
 800c278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c27c:	edc8 7a00 	vstr	s15, [r8]
 800c280:	ed97 7a00 	vldr	s14, [r7]
 800c284:	edd6 7a01 	vldr	s15, [r6, #4]
 800c288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c28c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c290:	edd6 7a02 	vldr	s15, [r6, #8]
 800c294:	ed97 7a02 	vldr	s14, [r7, #8]
 800c298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c29c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c2a0:	edd4 7a02 	vldr	s15, [r4, #8]
 800c2a4:	6863      	ldr	r3, [r4, #4]
 800c2a6:	6023      	str	r3, [r4, #0]
 800c2a8:	eef1 7a67 	vneg.f32	s15, s15
 800c2ac:	6062      	str	r2, [r4, #4]
 800c2ae:	edc4 7a02 	vstr	s15, [r4, #8]
 800c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b6:	f1bc 0f01 	cmp.w	ip, #1
 800c2ba:	d015      	beq.n	800c2e8 <output_update+0x120>
 800c2bc:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c364 <output_update+0x19c>
 800c2c0:	edd2 6a00 	vldr	s13, [r2]
 800c2c4:	ed92 7a01 	vldr	s14, [r2, #4]
 800c2c8:	edd2 7a02 	vldr	s15, [r2, #8]
 800c2cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c2d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c2d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c2d8:	edc2 6a00 	vstr	s13, [r2]
 800c2dc:	ed82 7a01 	vstr	s14, [r2, #4]
 800c2e0:	edc2 7a02 	vstr	s15, [r2, #8]
 800c2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ec:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c2f0:	eef1 6a66 	vneg.f32	s13, s13
 800c2f4:	edc3 7a00 	vstr	s15, [r3]
 800c2f8:	ed83 6a02 	vstr	s12, [r3, #8]
 800c2fc:	edc3 6a01 	vstr	s13, [r3, #4]
 800c300:	4662      	mov	r2, ip
 800c302:	4629      	mov	r1, r5
 800c304:	f7ff f8f4 	bl	800b4f0 <q2hpr>
 800c308:	edd5 6a00 	vldr	s13, [r5]
 800c30c:	ed95 7a01 	vldr	s14, [r5, #4]
 800c310:	edd5 7a02 	vldr	s15, [r5, #8]
 800c314:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c364 <output_update+0x19c>
 800c318:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c31c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c320:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c324:	ed85 7a01 	vstr	s14, [r5, #4]
 800c328:	edc5 6a00 	vstr	s13, [r5]
 800c32c:	edc5 7a02 	vstr	s15, [r5, #8]
 800c330:	ed97 7a00 	vldr	s14, [r7]
 800c334:	edd6 7a00 	vldr	s15, [r6]
 800c338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c33c:	edc8 7a00 	vstr	s15, [r8]
 800c340:	ed97 7a01 	vldr	s14, [r7, #4]
 800c344:	edd6 7a01 	vldr	s15, [r6, #4]
 800c348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c34c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c350:	edd6 7a02 	vldr	s15, [r6, #8]
 800c354:	ed97 7a02 	vldr	s14, [r7, #8]
 800c358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c35c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	42652ee1 	.word	0x42652ee1

0800c368 <kalman_3gyro.constprop.0>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	ed2d 8b10 	vpush	{d8-d15}
 800c370:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c374:	edd2 9a02 	vldr	s19, [r2, #8]
 800c378:	edd2 8a03 	vldr	s17, [r2, #12]
 800c37c:	edd2 6a04 	vldr	s13, [r2, #16]
 800c380:	ed92 6a05 	vldr	s12, [r2, #20]
 800c384:	6854      	ldr	r4, [r2, #4]
 800c386:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800c38a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c38e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c392:	4683      	mov	fp, r0
 800c394:	edd2 7a00 	vldr	s15, [r2]
 800c398:	48e3      	ldr	r0, [pc, #908]	; (800c728 <kalman_3gyro.constprop.0+0x3c0>)
 800c39a:	9108      	str	r1, [sp, #32]
 800c39c:	904a      	str	r0, [sp, #296]	; 0x128
 800c39e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	9328      	str	r3, [sp, #160]	; 0xa0
 800c3ac:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800c3b0:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800c3b4:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800c3b8:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800c3bc:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800c3c0:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c3c4:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800c3c8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800c3cc:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800c3d0:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800c3d4:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800c3d8:	946f      	str	r4, [sp, #444]	; 0x1bc
 800c3da:	9470      	str	r4, [sp, #448]	; 0x1c0
 800c3dc:	9471      	str	r4, [sp, #452]	; 0x1c4
 800c3de:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800c3e2:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800c3e6:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800c3ea:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800c3ee:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800c3f2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800c3f6:	eeb0 8a60 	vmov.f32	s16, s1
 800c3fa:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800c3fe:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800c402:	ed8d 1a07 	vstr	s2, [sp, #28]
 800c406:	f00a fd2f 	bl	8016e68 <memset>
 800c40a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800c40e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c412:	600b      	str	r3, [r1, #0]
 800c414:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800c418:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800c41c:	600b      	str	r3, [r1, #0]
 800c41e:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800c422:	600b      	str	r3, [r1, #0]
 800c424:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800c428:	600b      	str	r3, [r1, #0]
 800c42a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800c42e:	600b      	str	r3, [r1, #0]
 800c430:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800c434:	600b      	str	r3, [r1, #0]
 800c436:	2a00      	cmp	r2, #0
 800c438:	f001 82c2 	beq.w	800d9c0 <kalman_3gyro.constprop.0+0x1658>
 800c43c:	ed95 5a02 	vldr	s10, [r5, #8]
 800c440:	edd5 5a01 	vldr	s11, [r5, #4]
 800c444:	ed95 3a00 	vldr	s6, [r5]
 800c448:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c44c:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800c450:	ee35 4a05 	vadd.f32	s8, s10, s10
 800c454:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800c458:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c45c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800c460:	ee33 3a03 	vadd.f32	s6, s6, s6
 800c464:	9b08      	ldr	r3, [sp, #32]
 800c466:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800c46a:	ed82 4a00 	vstr	s8, [r2]
 800c46e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800c472:	edc2 4a00 	vstr	s9, [r2]
 800c476:	ed93 6a05 	vldr	s12, [r3, #20]
 800c47a:	edd3 6a04 	vldr	s13, [r3, #16]
 800c47e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c482:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800c486:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800c48a:	ed82 5a00 	vstr	s10, [r2]
 800c48e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800c492:	ed82 3a00 	vstr	s6, [r2]
 800c496:	eef1 3a46 	vneg.f32	s7, s12
 800c49a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800c49e:	edc2 5a00 	vstr	s11, [r2]
 800c4a2:	eeb1 4a66 	vneg.f32	s8, s13
 800c4a6:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800c4aa:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800c4ae:	edc2 7a00 	vstr	s15, [r2]
 800c4b2:	ee34 3a04 	vadd.f32	s6, s8, s8
 800c4b6:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800c4ba:	eef1 4a47 	vneg.f32	s9, s14
 800c4be:	ed82 5a00 	vstr	s10, [r2]
 800c4c2:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800c4c6:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800c4ca:	ed81 3a00 	vstr	s6, [r1]
 800c4ce:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800c4d2:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800c4d6:	ed81 5a00 	vstr	s10, [r1]
 800c4da:	ee77 7a07 	vadd.f32	s15, s14, s14
 800c4de:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800c4e2:	edc1 5a00 	vstr	s11, [r1]
 800c4e6:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800c4ea:	edc1 7a00 	vstr	s15, [r1]
 800c4ee:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	600b      	str	r3, [r1, #0]
 800c4f6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800c4fa:	ee76 2a06 	vadd.f32	s5, s12, s12
 800c4fe:	600b      	str	r3, [r1, #0]
 800c500:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800c504:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800c508:	600b      	str	r3, [r1, #0]
 800c50a:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800c50e:	edc2 2a00 	vstr	s5, [r2]
 800c512:	600b      	str	r3, [r1, #0]
 800c514:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800c518:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800c51c:	600b      	str	r3, [r1, #0]
 800c51e:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800c522:	a87b      	add	r0, sp, #492	; 0x1ec
 800c524:	600b      	str	r3, [r1, #0]
 800c526:	2230      	movs	r2, #48	; 0x30
 800c528:	2100      	movs	r1, #0
 800c52a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800c52e:	934b      	str	r3, [sp, #300]	; 0x12c
 800c530:	934f      	str	r3, [sp, #316]	; 0x13c
 800c532:	9353      	str	r3, [sp, #332]	; 0x14c
 800c534:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800c538:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800c53c:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800c540:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800c544:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800c548:	942c      	str	r4, [sp, #176]	; 0xb0
 800c54a:	f00a fc8d 	bl	8016e68 <memset>
 800c54e:	eddb 6a06 	vldr	s13, [fp, #24]
 800c552:	ed9b 7a07 	vldr	s14, [fp, #28]
 800c556:	eddb 7a08 	vldr	s15, [fp, #32]
 800c55a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800c55e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800c562:	ee28 7a07 	vmul.f32	s14, s16, s14
 800c566:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c56a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800c56e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800c572:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800c576:	2b00      	cmp	r3, #0
 800c578:	f043 84a8 	bne.w	800fecc <kalman_3gyro.constprop.0+0x3b64>
 800c57c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800c580:	2b00      	cmp	r3, #0
 800c582:	f043 81e7 	bne.w	800f954 <kalman_3gyro.constprop.0+0x35ec>
 800c586:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800c58a:	9304      	str	r3, [sp, #16]
 800c58c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800c590:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800c594:	9310      	str	r3, [sp, #64]	; 0x40
 800c596:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800c59a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800c59e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800c5a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a4:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800c5a8:	edd0 7a00 	vldr	s15, [r0]
 800c5ac:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800c5b0:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800c5b4:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800c5b8:	ed93 6a00 	vldr	s12, [r3]
 800c5bc:	ed91 7a00 	vldr	s14, [r1]
 800c5c0:	edd2 6a00 	vldr	s13, [r2]
 800c5c4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c5c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d2:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800c5d6:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800c5da:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800c5de:	933a      	str	r3, [sp, #232]	; 0xe8
 800c5e0:	933b      	str	r3, [sp, #236]	; 0xec
 800c5e2:	933c      	str	r3, [sp, #240]	; 0xf0
 800c5e4:	933d      	str	r3, [sp, #244]	; 0xf4
 800c5e6:	d14e      	bne.n	800c686 <kalman_3gyro.constprop.0+0x31e>
 800c5e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f0:	d149      	bne.n	800c686 <kalman_3gyro.constprop.0+0x31e>
 800c5f2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fa:	d144      	bne.n	800c686 <kalman_3gyro.constprop.0+0x31e>
 800c5fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c604:	d13f      	bne.n	800c686 <kalman_3gyro.constprop.0+0x31e>
 800c606:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800c608:	9336      	str	r3, [sp, #216]	; 0xd8
 800c60a:	7802      	ldrb	r2, [r0, #0]
 800c60c:	9337      	str	r3, [sp, #220]	; 0xdc
 800c60e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c612:	9338      	str	r3, [sp, #224]	; 0xe0
 800c614:	2300      	movs	r3, #0
 800c616:	ed90 7a03 	vldr	s14, [r0, #12]
 800c61a:	edd0 6a01 	vldr	s13, [r0, #4]
 800c61e:	edd0 7a02 	vldr	s15, [r0, #8]
 800c622:	9139      	str	r1, [sp, #228]	; 0xe4
 800c624:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800c628:	2a00      	cmp	r2, #0
 800c62a:	f003 8568 	beq.w	80100fe <kalman_3gyro.constprop.0+0x3d96>
 800c62e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c632:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800c636:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c63a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c63e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c642:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c646:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800c64a:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800c64e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c652:	2100      	movs	r1, #0
 800c654:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800c658:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800c65c:	f00a fc04 	bl	8016e68 <memset>
 800c660:	4b32      	ldr	r3, [pc, #200]	; (800c72c <kalman_3gyro.constprop.0+0x3c4>)
 800c662:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800c666:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800c66a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800c66e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800c672:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800c676:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800c67a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800c67e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800c682:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800c686:	9b08      	ldr	r3, [sp, #32]
 800c688:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c730 <kalman_3gyro.constprop.0+0x3c8>
 800c68c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c690:	edd3 5a00 	vldr	s11, [r3]
 800c694:	edd3 7a02 	vldr	s15, [r3, #8]
 800c698:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c69c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c6a0:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800c6a4:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ac:	f101 8127 	bmi.w	800d8fe <kalman_3gyro.constprop.0+0x1596>
 800c6b0:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800c6b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b8:	ee79 6a66 	vsub.f32	s13, s18, s13
 800c6bc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800c6c0:	eef0 6ae6 	vabs.f32	s13, s13
 800c6c4:	ee76 aaea 	vsub.f32	s21, s13, s21
 800c6c8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800c6cc:	ed93 5a04 	vldr	s10, [r3, #16]
 800c6d0:	ed93 3a03 	vldr	s6, [r3, #12]
 800c6d4:	edd3 1a05 	vldr	s3, [r3, #20]
 800c6d8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c730 <kalman_3gyro.constprop.0+0x3c8>
 800c6dc:	9b04      	ldr	r3, [sp, #16]
 800c6de:	ed95 ca00 	vldr	s24, [r5]
 800c6e2:	ed93 ba00 	vldr	s22, [r3]
 800c6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ea:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800c6ee:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800c6f2:	461e      	mov	r6, r3
 800c6f4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800c6f8:	9502      	str	r5, [sp, #8]
 800c6fa:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800c6fe:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800c702:	9327      	str	r3, [sp, #156]	; 0x9c
 800c704:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800c708:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800c70c:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800c710:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800c714:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800c718:	9501      	str	r5, [sp, #4]
 800c71a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800c71e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800c722:	eee3 6a03 	vfma.f32	s13, s6, s6
 800c726:	e009      	b.n	800c73c <kalman_3gyro.constprop.0+0x3d4>
 800c728:	3a9d4952 	.word	0x3a9d4952
 800c72c:	40a00000 	.word	0x40a00000
 800c730:	3c23d70a 	.word	0x3c23d70a
 800c734:	3dcccccd 	.word	0x3dcccccd
 800c738:	4b000000 	.word	0x4b000000
 800c73c:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800c740:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800c744:	ee25 8a82 	vmul.f32	s16, s11, s4
 800c748:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800c74c:	950c      	str	r5, [sp, #48]	; 0x30
 800c74e:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800c752:	ee67 fa02 	vmul.f32	s31, s14, s4
 800c756:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c75e:	bf58      	it	pl
 800c760:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800c764:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800c768:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800c76c:	bf48      	it	mi
 800c76e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800c734 <kalman_3gyro.constprop.0+0x3cc>
 800c772:	ed96 6a00 	vldr	s12, [r6]
 800c776:	edda 4a00 	vldr	s9, [sl]
 800c77a:	ed93 fa00 	vldr	s30, [r3]
 800c77e:	ed90 ea00 	vldr	s28, [r0]
 800c782:	edd4 3a00 	vldr	s7, [r4]
 800c786:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800c78a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800c78e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800c792:	9617      	str	r6, [sp, #92]	; 0x5c
 800c794:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800c798:	961a      	str	r6, [sp, #104]	; 0x68
 800c79a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800c79e:	9611      	str	r6, [sp, #68]	; 0x44
 800c7a0:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800c7a4:	9618      	str	r6, [sp, #96]	; 0x60
 800c7a6:	9e02      	ldr	r6, [sp, #8]
 800c7a8:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800c7ac:	9303      	str	r3, [sp, #12]
 800c7ae:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800c7b2:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c7b6:	ee23 3a26 	vmul.f32	s6, s6, s13
 800c7ba:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c7be:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c7c2:	edd1 6a00 	vldr	s13, [r1]
 800c7c6:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800c7ca:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800c7ce:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800c7d2:	edcd 6a05 	vstr	s13, [sp, #20]
 800c7d6:	ed8d 6a06 	vstr	s12, [sp, #24]
 800c7da:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800c7de:	ed92 6a00 	vldr	s12, [r2]
 800c7e2:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800c7e6:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800c7ea:	edd6 2a00 	vldr	s5, [r6]
 800c7ee:	eddc 4a00 	vldr	s9, [ip]
 800c7f2:	9e01      	ldr	r6, [sp, #4]
 800c7f4:	edd0 ca00 	vldr	s25, [r0]
 800c7f8:	ed96 1a00 	vldr	s2, [r6]
 800c7fc:	9803      	ldr	r0, [sp, #12]
 800c7fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c800:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800c804:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800c808:	eddc 0a00 	vldr	s1, [ip]
 800c80c:	ed96 da00 	vldr	s26, [r6]
 800c810:	edd0 4a00 	vldr	s9, [r0]
 800c814:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c816:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800c81a:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800c81e:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800c822:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800c826:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800c82a:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800c82e:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800c832:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800c836:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800c83a:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c83e:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800c842:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800c846:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800c84a:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800c84e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800c852:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800c856:	edd6 4a00 	vldr	s9, [r6]
 800c85a:	edd9 6a00 	vldr	s13, [r9]
 800c85e:	edde ba00 	vldr	s23, [lr]
 800c862:	ed95 4a00 	vldr	s8, [r5]
 800c866:	ed94 0a00 	vldr	s0, [r4]
 800c86a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800c86e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800c872:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800c876:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800c87a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800c87e:	edd9 ea00 	vldr	s29, [r9]
 800c882:	edd1 2a00 	vldr	s5, [r1]
 800c886:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800c88a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800c88e:	ed92 1a00 	vldr	s2, [r2]
 800c892:	edd3 ca00 	vldr	s25, [r3]
 800c896:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800c89a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800c89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8a0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c8a2:	edd3 4a00 	vldr	s9, [r3]
 800c8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8a8:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800c8ac:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800c8b0:	edd3 fa00 	vldr	s31, [r3]
 800c8b4:	eef0 4a6f 	vmov.f32	s9, s31
 800c8b8:	edd6 fa00 	vldr	s31, [r6]
 800c8bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c8be:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800c8c2:	eea3 5a08 	vfma.f32	s10, s6, s16
 800c8c6:	ed96 3a00 	vldr	s6, [r6]
 800c8ca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c8cc:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800c8d0:	ee25 8aad 	vmul.f32	s16, s11, s27
 800c8d4:	eddd 5a06 	vldr	s11, [sp, #24]
 800c8d8:	edd6 fa00 	vldr	s31, [r6]
 800c8dc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c8de:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800c8e2:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800c8e6:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800c8ea:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800c8ee:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800c8f2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800c8f6:	edd8 5a00 	vldr	s11, [r8]
 800c8fa:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800c8fe:	eef0 5a44 	vmov.f32	s11, s8
 800c902:	ed97 4a00 	vldr	s8, [r7]
 800c906:	ee76 6aae 	vadd.f32	s13, s13, s29
 800c90a:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800c90e:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800c912:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800c916:	eede 2a83 	vfnms.f32	s5, s29, s6
 800c91a:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800c91e:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800c922:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800c926:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800c92a:	eede 4a03 	vfnms.f32	s9, s28, s6
 800c92e:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800c932:	ee72 2aac 	vadd.f32	s5, s5, s25
 800c936:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800c93a:	edd6 ca00 	vldr	s25, [r6]
 800c93e:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800c942:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c944:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800c948:	ed96 ea00 	vldr	s28, [r6]
 800c94c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c94e:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800c952:	ed96 da00 	vldr	s26, [r6]
 800c956:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c958:	ee7f faac 	vadd.f32	s31, s31, s25
 800c95c:	edd6 ca00 	vldr	s25, [r6]
 800c960:	eedd ca03 	vfnms.f32	s25, s26, s6
 800c964:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800c968:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c96a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800c96e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800c972:	eee0 5a03 	vfma.f32	s11, s0, s6
 800c976:	eddd ba05 	vldr	s23, [sp, #20]
 800c97a:	ed96 0a00 	vldr	s0, [r6]
 800c97e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c980:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800c984:	eeee fa03 	vfma.f32	s31, s28, s6
 800c988:	eead 6a03 	vfma.f32	s12, s26, s6
 800c98c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800c990:	eea0 4a03 	vfma.f32	s8, s0, s6
 800c994:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800c998:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800c734 <kalman_3gyro.constprop.0+0x3cc>
 800c99c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800c9a0:	ee2c ca00 	vmul.f32	s24, s24, s0
 800c9a4:	ee6b ba80 	vmul.f32	s23, s23, s0
 800c9a8:	ed96 1a00 	vldr	s2, [r6]
 800c9ac:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800c9b0:	eee0 4a83 	vfma.f32	s9, s1, s6
 800c9b4:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800c9b8:	ee6f faab 	vmul.f32	s31, s31, s23
 800c9bc:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800c9c0:	ee60 6a26 	vmul.f32	s13, s0, s13
 800c9c4:	eddc 0a00 	vldr	s1, [ip]
 800c9c8:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800c9cc:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800c9d0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800c9d4:	eea0 1a83 	vfma.f32	s2, s1, s6
 800c9d8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800c9dc:	ee6f faaf 	vmul.f32	s31, s31, s31
 800c9e0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c9e4:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800c9e8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c9ec:	eee4 fa04 	vfma.f32	s31, s8, s8
 800c9f0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800c9f4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800c9f8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800c9fc:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800ca00:	eee1 fa01 	vfma.f32	s31, s2, s2
 800ca04:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800ca08:	eea1 5a82 	vfma.f32	s10, s3, s4
 800ca0c:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800c738 <kalman_3gyro.constprop.0+0x3d0>
 800ca10:	eef0 4ac8 	vabs.f32	s9, s16
 800ca14:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800ca20:	eeb1 dac6 	vsqrt.f32	s26, s12
 800ca24:	eef1 caef 	vsqrt.f32	s25, s31
 800ca28:	eef1 bae6 	vsqrt.f32	s23, s13
 800ca2c:	ee67 daad 	vmul.f32	s27, s15, s27
 800ca30:	eeb0 ca45 	vmov.f32	s24, s10
 800ca34:	d517      	bpl.n	800ca66 <kalman_3gyro.constprop.0+0x6fe>
 800ca36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca42:	f2c1 806f 	blt.w	800db24 <kalman_3gyro.constprop.0+0x17bc>
 800ca46:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ca4a:	ee17 0a90 	vmov	r0, s15
 800ca4e:	f7f3 fd1f 	bl	8000490 <__aeabi_f2d>
 800ca52:	ec41 0b10 	vmov	d0, r0, r1
 800ca56:	f008 fb3f 	bl	80150d8 <floor>
 800ca5a:	ec51 0b10 	vmov	r0, r1, d0
 800ca5e:	f7f4 f81f 	bl	8000aa0 <__aeabi_d2f>
 800ca62:	ee08 0a10 	vmov	s16, r0
 800ca66:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800c738 <kalman_3gyro.constprop.0+0x3d0>
 800ca6a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800ca6e:	eef0 6ace 	vabs.f32	s13, s28
 800ca72:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	d517      	bpl.n	800caac <kalman_3gyro.constprop.0+0x744>
 800ca7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca80:	eeb4 eae7 	vcmpe.f32	s28, s15
 800ca84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca88:	f2c1 8040 	blt.w	800db0c <kalman_3gyro.constprop.0+0x17a4>
 800ca8c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ca90:	ee17 0a90 	vmov	r0, s15
 800ca94:	f7f3 fcfc 	bl	8000490 <__aeabi_f2d>
 800ca98:	ec41 0b10 	vmov	d0, r0, r1
 800ca9c:	f008 fb1c 	bl	80150d8 <floor>
 800caa0:	ec51 0b10 	vmov	r0, r1, d0
 800caa4:	f7f3 fffc 	bl	8000aa0 <__aeabi_d2f>
 800caa8:	ee0e 0a10 	vmov	s28, r0
 800caac:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800c738 <kalman_3gyro.constprop.0+0x3d0>
 800cab0:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800cab4:	eeb0 7aed 	vabs.f32	s14, s27
 800cab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac0:	d517      	bpl.n	800caf2 <kalman_3gyro.constprop.0+0x78a>
 800cac2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cac6:	eef4 dae7 	vcmpe.f32	s27, s15
 800caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cace:	f2c1 8011 	blt.w	800daf4 <kalman_3gyro.constprop.0+0x178c>
 800cad2:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cad6:	ee17 0a90 	vmov	r0, s15
 800cada:	f7f3 fcd9 	bl	8000490 <__aeabi_f2d>
 800cade:	ec41 0b10 	vmov	d0, r0, r1
 800cae2:	f008 faf9 	bl	80150d8 <floor>
 800cae6:	ec51 0b10 	vmov	r0, r1, d0
 800caea:	f7f3 ffd9 	bl	8000aa0 <__aeabi_d2f>
 800caee:	ee0d 0a90 	vmov	s27, r0
 800caf2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800caf6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800cafa:	1e61      	subs	r1, r4, #1
 800cafc:	b249      	sxtb	r1, r1
 800cafe:	2900      	cmp	r1, #0
 800cb00:	dd1a      	ble.n	800cb38 <kalman_3gyro.constprop.0+0x7d0>
 800cb02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cb06:	1ea0      	subs	r0, r4, #2
 800cb08:	0089      	lsls	r1, r1, #2
 800cb0a:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800cb0e:	b2c0      	uxtb	r0, r0
 800cb10:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800cb14:	440a      	add	r2, r1
 800cb16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cb1a:	445b      	add	r3, fp
 800cb1c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800cb20:	6819      	ldr	r1, [r3, #0]
 800cb22:	6858      	ldr	r0, [r3, #4]
 800cb24:	60d9      	str	r1, [r3, #12]
 800cb26:	6899      	ldr	r1, [r3, #8]
 800cb28:	6118      	str	r0, [r3, #16]
 800cb2a:	6159      	str	r1, [r3, #20]
 800cb2c:	3b0c      	subs	r3, #12
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d1f6      	bne.n	800cb20 <kalman_3gyro.constprop.0+0x7b8>
 800cb32:	9b04      	ldr	r3, [sp, #16]
 800cb34:	ed93 ba00 	vldr	s22, [r3]
 800cb38:	ed88 8a00 	vstr	s16, [r8]
 800cb3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb40:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800cb44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cb46:	ed83 ea00 	vstr	s28, [r3]
 800cb4a:	9b01      	ldr	r3, [sp, #4]
 800cb4c:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cb50:	edc3 da00 	vstr	s27, [r3]
 800cb54:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	bf28      	it	cs
 800cb60:	461c      	movcs	r4, r3
 800cb62:	9b08      	ldr	r3, [sp, #32]
 800cb64:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800cb68:	edd3 da03 	vldr	s27, [r3, #12]
 800cb6c:	ed93 ba04 	vldr	s22, [r3, #16]
 800cb70:	edd3 6a05 	vldr	s13, [r3, #20]
 800cb74:	ee68 da2d 	vmul.f32	s27, s16, s27
 800cb78:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800cb7c:	eeb0 7aed 	vabs.f32	s14, s27
 800cb80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb88:	ee28 8a26 	vmul.f32	s16, s16, s13
 800cb8c:	d517      	bpl.n	800cbbe <kalman_3gyro.constprop.0+0x856>
 800cb8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb92:	eef4 dae7 	vcmpe.f32	s27, s15
 800cb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9a:	f2c0 879f 	blt.w	800dadc <kalman_3gyro.constprop.0+0x1774>
 800cb9e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cba2:	ee17 0a90 	vmov	r0, s15
 800cba6:	f7f3 fc73 	bl	8000490 <__aeabi_f2d>
 800cbaa:	ec41 0b10 	vmov	d0, r0, r1
 800cbae:	f008 fa93 	bl	80150d8 <floor>
 800cbb2:	ec51 0b10 	vmov	r0, r1, d0
 800cbb6:	f7f3 ff73 	bl	8000aa0 <__aeabi_d2f>
 800cbba:	ee0d 0a90 	vmov	s27, r0
 800cbbe:	eddf 7a89 	vldr	s15, [pc, #548]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cbc2:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800cbc6:	eeb0 7acb 	vabs.f32	s14, s22
 800cbca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd2:	d517      	bpl.n	800cc04 <kalman_3gyro.constprop.0+0x89c>
 800cbd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cbd8:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe0:	f2c0 8770 	blt.w	800dac4 <kalman_3gyro.constprop.0+0x175c>
 800cbe4:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cbe8:	ee17 0a90 	vmov	r0, s15
 800cbec:	f7f3 fc50 	bl	8000490 <__aeabi_f2d>
 800cbf0:	ec41 0b10 	vmov	d0, r0, r1
 800cbf4:	f008 fa70 	bl	80150d8 <floor>
 800cbf8:	ec51 0b10 	vmov	r0, r1, d0
 800cbfc:	f7f3 ff50 	bl	8000aa0 <__aeabi_d2f>
 800cc00:	ee0b 0a10 	vmov	s22, r0
 800cc04:	eddf 7a77 	vldr	s15, [pc, #476]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cc08:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cc0c:	eeb0 7ac8 	vabs.f32	s14, s16
 800cc10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	d517      	bpl.n	800cc4a <kalman_3gyro.constprop.0+0x8e2>
 800cc1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc26:	f2c0 8741 	blt.w	800daac <kalman_3gyro.constprop.0+0x1744>
 800cc2a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cc2e:	ee17 0a90 	vmov	r0, s15
 800cc32:	f7f3 fc2d 	bl	8000490 <__aeabi_f2d>
 800cc36:	ec41 0b10 	vmov	d0, r0, r1
 800cc3a:	f008 fa4d 	bl	80150d8 <floor>
 800cc3e:	ec51 0b10 	vmov	r0, r1, d0
 800cc42:	f7f3 ff2d 	bl	8000aa0 <__aeabi_d2f>
 800cc46:	ee08 0a10 	vmov	s16, r0
 800cc4a:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800cc4e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800cc52:	1e61      	subs	r1, r4, #1
 800cc54:	b249      	sxtb	r1, r1
 800cc56:	2900      	cmp	r1, #0
 800cc58:	dd17      	ble.n	800cc8a <kalman_3gyro.constprop.0+0x922>
 800cc5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cc5e:	1ea2      	subs	r2, r4, #2
 800cc60:	0089      	lsls	r1, r1, #2
 800cc62:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800cc6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cc70:	4401      	add	r1, r0
 800cc72:	445b      	add	r3, fp
 800cc74:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	6858      	ldr	r0, [r3, #4]
 800cc7c:	60da      	str	r2, [r3, #12]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	6118      	str	r0, [r3, #16]
 800cc82:	615a      	str	r2, [r3, #20]
 800cc84:	3b0c      	subs	r3, #12
 800cc86:	4299      	cmp	r1, r3
 800cc88:	d1f6      	bne.n	800cc78 <kalman_3gyro.constprop.0+0x910>
 800cc8a:	9b02      	ldr	r3, [sp, #8]
 800cc8c:	edc7 da00 	vstr	s27, [r7]
 800cc90:	ed83 ba00 	vstr	s22, [r3]
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	eddf 7a53 	vldr	s15, [pc, #332]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cc9a:	ed83 8a00 	vstr	s16, [r3]
 800cc9e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800cca2:	3301      	adds	r3, #1
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	429c      	cmp	r4, r3
 800cca8:	bf28      	it	cs
 800ccaa:	461c      	movcs	r4, r3
 800ccac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccae:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800ccb2:	ed93 7a00 	vldr	s14, [r3]
 800ccb6:	9b08      	ldr	r3, [sp, #32]
 800ccb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ccbc:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800ccc0:	edd3 da06 	vldr	s27, [r3, #24]
 800ccc4:	ed93 ba07 	vldr	s22, [r3, #28]
 800ccc8:	edd3 6a08 	vldr	s13, [r3, #32]
 800cccc:	ee68 da2d 	vmul.f32	s27, s16, s27
 800ccd0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800ccd4:	eeb0 7aed 	vabs.f32	s14, s27
 800ccd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800cce4:	d517      	bpl.n	800cd16 <kalman_3gyro.constprop.0+0x9ae>
 800cce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ccea:	eef4 dae7 	vcmpe.f32	s27, s15
 800ccee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf2:	f2c0 86cf 	blt.w	800da94 <kalman_3gyro.constprop.0+0x172c>
 800ccf6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ccfa:	ee17 0a90 	vmov	r0, s15
 800ccfe:	f7f3 fbc7 	bl	8000490 <__aeabi_f2d>
 800cd02:	ec41 0b10 	vmov	d0, r0, r1
 800cd06:	f008 f9e7 	bl	80150d8 <floor>
 800cd0a:	ec51 0b10 	vmov	r0, r1, d0
 800cd0e:	f7f3 fec7 	bl	8000aa0 <__aeabi_d2f>
 800cd12:	ee0d 0a90 	vmov	s27, r0
 800cd16:	eddf 7a33 	vldr	s15, [pc, #204]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cd1a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800cd1e:	eeb0 7acb 	vabs.f32	s14, s22
 800cd22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2a:	d517      	bpl.n	800cd5c <kalman_3gyro.constprop.0+0x9f4>
 800cd2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd30:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd38:	f2c0 86a0 	blt.w	800da7c <kalman_3gyro.constprop.0+0x1714>
 800cd3c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cd40:	ee17 0a90 	vmov	r0, s15
 800cd44:	f7f3 fba4 	bl	8000490 <__aeabi_f2d>
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	f008 f9c4 	bl	80150d8 <floor>
 800cd50:	ec51 0b10 	vmov	r0, r1, d0
 800cd54:	f7f3 fea4 	bl	8000aa0 <__aeabi_d2f>
 800cd58:	ee0b 0a10 	vmov	s22, r0
 800cd5c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cde4 <kalman_3gyro.constprop.0+0xa7c>
 800cd60:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cd64:	eeb0 7ac8 	vabs.f32	s14, s16
 800cd68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd70:	d517      	bpl.n	800cda2 <kalman_3gyro.constprop.0+0xa3a>
 800cd72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7e:	f2c0 8671 	blt.w	800da64 <kalman_3gyro.constprop.0+0x16fc>
 800cd82:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cd86:	ee17 0a90 	vmov	r0, s15
 800cd8a:	f7f3 fb81 	bl	8000490 <__aeabi_f2d>
 800cd8e:	ec41 0b10 	vmov	d0, r0, r1
 800cd92:	f008 f9a1 	bl	80150d8 <floor>
 800cd96:	ec51 0b10 	vmov	r0, r1, d0
 800cd9a:	f7f3 fe81 	bl	8000aa0 <__aeabi_d2f>
 800cd9e:	ee08 0a10 	vmov	s16, r0
 800cda2:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800cda6:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800cdaa:	1e63      	subs	r3, r4, #1
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dd1c      	ble.n	800cdec <kalman_3gyro.constprop.0+0xa84>
 800cdb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cdb6:	1ea2      	subs	r2, r4, #2
 800cdb8:	0099      	lsls	r1, r3, #2
 800cdba:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800cdc4:	4408      	add	r0, r1
 800cdc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cdca:	445b      	add	r3, fp
 800cdcc:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	6859      	ldr	r1, [r3, #4]
 800cdd4:	60da      	str	r2, [r3, #12]
 800cdd6:	689a      	ldr	r2, [r3, #8]
 800cdd8:	6119      	str	r1, [r3, #16]
 800cdda:	615a      	str	r2, [r3, #20]
 800cddc:	3b0c      	subs	r3, #12
 800cdde:	4283      	cmp	r3, r0
 800cde0:	d1f6      	bne.n	800cdd0 <kalman_3gyro.constprop.0+0xa68>
 800cde2:	e003      	b.n	800cdec <kalman_3gyro.constprop.0+0xa84>
 800cde4:	4b000000 	.word	0x4b000000
 800cde8:	00000000 	.word	0x00000000
 800cdec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdee:	edc3 da00 	vstr	s27, [r3]
 800cdf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdf4:	ed83 ba00 	vstr	s22, [r3]
 800cdf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdfa:	ed83 8a00 	vstr	s16, [r3]
 800cdfe:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	429c      	cmp	r4, r3
 800ce08:	bf28      	it	cs
 800ce0a:	461c      	movcs	r4, r3
 800ce0c:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800ce10:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800ce14:	aa54      	add	r2, sp, #336	; 0x150
 800ce16:	a92d      	add	r1, sp, #180	; 0xb4
 800ce18:	a830      	add	r0, sp, #192	; 0xc0
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	9314      	str	r3, [sp, #80]	; 0x50
 800ce1e:	f7fe fa27 	bl	800b270 <getRotationMatrix>
 800ce22:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800ce26:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	6861      	ldr	r1, [r4, #4]
 800ce2e:	68a2      	ldr	r2, [r4, #8]
 800ce30:	68e3      	ldr	r3, [r4, #12]
 800ce32:	4635      	mov	r5, r6
 800ce34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce36:	3410      	adds	r4, #16
 800ce38:	42bc      	cmp	r4, r7
 800ce3a:	462e      	mov	r6, r5
 800ce3c:	d1f5      	bne.n	800ce2a <kalman_3gyro.constprop.0+0xac2>
 800ce3e:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800ce42:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	6028      	str	r0, [r5, #0]
 800ce4a:	eef0 7ae7 	vabs.f32	s15, s15
 800ce4e:	eeb0 7ac7 	vabs.f32	s14, s14
 800ce52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce5a:	f140 85a4 	bpl.w	800d9a6 <kalman_3gyro.constprop.0+0x163e>
 800ce5e:	2303      	movs	r3, #3
 800ce60:	2706      	movs	r7, #6
 800ce62:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ce66:	2604      	movs	r6, #4
 800ce68:	2400      	movs	r4, #0
 800ce6a:	eef0 7a47 	vmov.f32	s15, s14
 800ce6e:	4632      	mov	r2, r6
 800ce70:	46a2      	mov	sl, r4
 800ce72:	2107      	movs	r1, #7
 800ce74:	f04f 0c01 	mov.w	ip, #1
 800ce78:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800ce7c:	eeb0 7ac7 	vabs.f32	s14, s14
 800ce80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce88:	f340 85ae 	ble.w	800d9e8 <kalman_3gyro.constprop.0+0x1680>
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	2007      	movs	r0, #7
 800ce90:	2108      	movs	r1, #8
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	461c      	mov	r4, r3
 800ce96:	9002      	str	r0, [sp, #8]
 800ce98:	460a      	mov	r2, r1
 800ce9a:	2306      	movs	r3, #6
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	2605      	movs	r6, #5
 800cea0:	f04f 0800 	mov.w	r8, #0
 800cea4:	f04f 0a01 	mov.w	sl, #1
 800cea8:	f04f 0c02 	mov.w	ip, #2
 800ceac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ceae:	442c      	add	r4, r5
 800ceb0:	442a      	add	r2, r5
 800ceb2:	edd4 6a00 	vldr	s13, [r4]
 800ceb6:	ed92 7a00 	vldr	s14, [r2]
 800ceba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cebe:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800cec2:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800cec6:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800ceca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800cece:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800ced2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800ced6:	970c      	str	r7, [sp, #48]	; 0x30
 800ced8:	9f01      	ldr	r7, [sp, #4]
 800ceda:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800cede:	00b6      	lsls	r6, r6, #2
 800cee0:	960a      	str	r6, [sp, #40]	; 0x28
 800cee2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800cee6:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800ceea:	edc4 7a00 	vstr	s15, [r4]
 800ceee:	edd2 7a00 	vldr	s15, [r2]
 800cef2:	ed99 7a00 	vldr	s14, [r9]
 800cef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cefa:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800cefe:	9204      	str	r2, [sp, #16]
 800cf00:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800cf04:	9205      	str	r2, [sp, #20]
 800cf06:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800cf0a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf0c:	00ba      	lsls	r2, r7, #2
 800cf0e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cf10:	9206      	str	r2, [sp, #24]
 800cf12:	0080      	lsls	r0, r0, #2
 800cf14:	9003      	str	r0, [sp, #12]
 800cf16:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800cf1a:	0089      	lsls	r1, r1, #2
 800cf1c:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf1e:	edc9 6a00 	vstr	s13, [r9]
 800cf22:	ed94 6a00 	vldr	s12, [r4]
 800cf26:	ed97 7a00 	vldr	s14, [r7]
 800cf2a:	edd5 7a00 	vldr	s15, [r5]
 800cf2e:	9902      	ldr	r1, [sp, #8]
 800cf30:	9a02      	ldr	r2, [sp, #8]
 800cf32:	eee6 7a47 	vfms.f32	s15, s12, s14
 800cf36:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800cf3a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800cf3e:	0092      	lsls	r2, r2, #2
 800cf40:	edc5 7a00 	vstr	s15, [r5]
 800cf44:	ed97 7a00 	vldr	s14, [r7]
 800cf48:	edde 7a00 	vldr	s15, [lr]
 800cf4c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	edce 7a00 	vstr	s15, [lr]
 800cf56:	edd0 5a00 	vldr	s11, [r0]
 800cf5a:	ed91 7a00 	vldr	s14, [r1]
 800cf5e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800cf62:	eef0 7ae7 	vabs.f32	s15, s15
 800cf66:	ed81 7a00 	vstr	s14, [r1]
 800cf6a:	ed90 6a00 	vldr	s12, [r0]
 800cf6e:	ed96 7a00 	vldr	s14, [r6]
 800cf72:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800cf76:	ed86 7a00 	vstr	s14, [r6]
 800cf7a:	ed95 7a00 	vldr	s14, [r5]
 800cf7e:	eeb0 7ac7 	vabs.f32	s14, s14
 800cf82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8a:	dd10      	ble.n	800cfae <kalman_3gyro.constprop.0+0xc46>
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	46c2      	mov	sl, r8
 800cf90:	4690      	mov	r8, r2
 800cf92:	461a      	mov	r2, r3
 800cf94:	9b01      	ldr	r3, [sp, #4]
 800cf96:	9902      	ldr	r1, [sp, #8]
 800cf98:	9803      	ldr	r0, [sp, #12]
 800cf9a:	9006      	str	r0, [sp, #24]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	008b      	lsls	r3, r1, #2
 800cfa2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800cfa6:	9105      	str	r1, [sp, #20]
 800cfa8:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800cfac:	9104      	str	r1, [sp, #16]
 800cfae:	9903      	ldr	r1, [sp, #12]
 800cfb0:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800cfb4:	4401      	add	r1, r0
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	9906      	ldr	r1, [sp, #24]
 800cfba:	ed94 7a00 	vldr	s14, [r4]
 800cfbe:	4401      	add	r1, r0
 800cfc0:	edd1 7a00 	vldr	s15, [r1]
 800cfc4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800cfc8:	4608      	mov	r0, r1
 800cfca:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800cfce:	440a      	add	r2, r1
 800cfd0:	440b      	add	r3, r1
 800cfd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfd4:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800cfd8:	4429      	add	r1, r5
 800cfda:	460d      	mov	r5, r1
 800cfdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfde:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800cfe2:	4431      	add	r1, r6
 800cfe4:	468e      	mov	lr, r1
 800cfe6:	ed84 3a00 	vstr	s6, [r4]
 800cfea:	ed92 7a00 	vldr	s14, [r2]
 800cfee:	edd3 7a00 	vldr	s15, [r3]
 800cff2:	9904      	ldr	r1, [sp, #16]
 800cff4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800cff8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800cffc:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d000:	440e      	add	r6, r1
 800d002:	1879      	adds	r1, r7, r1
 800d004:	edc3 7a00 	vstr	s15, [r3]
 800d008:	9101      	str	r1, [sp, #4]
 800d00a:	9b05      	ldr	r3, [sp, #20]
 800d00c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d00e:	edd2 0a00 	vldr	s1, [r2]
 800d012:	ed95 1a00 	vldr	s2, [r5]
 800d016:	ed9e 2a00 	vldr	s4, [lr]
 800d01a:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d01e:	edd6 6a00 	vldr	s13, [r6]
 800d022:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d026:	1874      	adds	r4, r6, r1
 800d028:	18f7      	adds	r7, r6, r3
 800d02a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d02e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d032:	eb06 0903 	add.w	r9, r6, r3
 800d036:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d03a:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d03e:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d042:	4633      	mov	r3, r6
 800d044:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d048:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d04c:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d050:	448c      	add	ip, r1
 800d052:	9901      	ldr	r1, [sp, #4]
 800d054:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d058:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d05c:	ed94 7a00 	vldr	s14, [r4]
 800d060:	ed93 6a00 	vldr	s12, [r3]
 800d064:	edd0 7a00 	vldr	s15, [r0]
 800d068:	ed99 8a00 	vldr	s16, [r9]
 800d06c:	ed91 ba00 	vldr	s22, [r1]
 800d070:	ed97 4a00 	vldr	s8, [r7]
 800d074:	edd6 4a00 	vldr	s9, [r6]
 800d078:	eddc da00 	vldr	s27, [ip]
 800d07c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d080:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d084:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d088:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d08c:	46a2      	mov	sl, r4
 800d08e:	4613      	mov	r3, r2
 800d090:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d094:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d098:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d09c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d0a0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d0a4:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d0a8:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d0ac:	ed94 5a00 	vldr	s10, [r4]
 800d0b0:	edda 3a00 	vldr	s7, [sl]
 800d0b4:	edd2 5a00 	vldr	s11, [r2]
 800d0b8:	edd3 7a00 	vldr	s15, [r3]
 800d0bc:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d0c0:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d0c4:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d0c8:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d0cc:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d0d0:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d0d4:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d0d8:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d0dc:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d0e0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d0e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d0e8:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d0ec:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d0f0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d0f4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d0f8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d0fc:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d100:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d104:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d108:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d10c:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d110:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d114:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d118:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d11c:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d120:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d124:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d128:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d12c:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d130:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d138:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d13c:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d140:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d144:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d148:	bfc8      	it	gt
 800d14a:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d14e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d152:	bfcc      	ite	gt
 800d154:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d158:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800cde8 <kalman_3gyro.constprop.0+0xa80>
 800d15c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d164:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d168:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d16c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d170:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d174:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d178:	f100 84e4 	bmi.w	800db44 <kalman_3gyro.constprop.0+0x17dc>
 800d17c:	bfd8      	it	le
 800d17e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d182:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d186:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d18a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d18e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d192:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d19e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d1a2:	bf84      	itt	hi
 800d1a4:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d1a8:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d1ac:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d1b0:	bf8c      	ite	hi
 800d1b2:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d1b6:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800d538 <kalman_3gyro.constprop.0+0x11d0>
 800d1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1be:	f100 84bd 	bmi.w	800db3c <kalman_3gyro.constprop.0+0x17d4>
 800d1c2:	bfd8      	it	le
 800d1c4:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d1c8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d1cc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d1d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	bf84      	itt	hi
 800d1e2:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d1e6:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d1ea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d1ee:	bf8c      	ite	hi
 800d1f0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d1f4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800d538 <kalman_3gyro.constprop.0+0x11d0>
 800d1f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d200:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d204:	f102 8399 	bmi.w	800f93a <kalman_3gyro.constprop.0+0x35d2>
 800d208:	bfd8      	it	le
 800d20a:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d20e:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d212:	1e53      	subs	r3, r2, #1
 800d214:	b25b      	sxtb	r3, r3
 800d216:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d220:	dd1c      	ble.n	800d25c <kalman_3gyro.constprop.0+0xef4>
 800d222:	3a02      	subs	r2, #2
 800d224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d228:	b2d2      	uxtb	r2, r2
 800d22a:	f1ab 000c 	sub.w	r0, fp, #12
 800d22e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d236:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d23a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d23e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d242:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d246:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d24a:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d24e:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d252:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d256:	3b0c      	subs	r3, #12
 800d258:	4283      	cmp	r3, r0
 800d25a:	d1f0      	bne.n	800d23e <kalman_3gyro.constprop.0+0xed6>
 800d25c:	eddd 6a07 	vldr	s13, [sp, #28]
 800d260:	4ab6      	ldr	r2, [pc, #728]	; (800d53c <kalman_3gyro.constprop.0+0x11d4>)
 800d262:	4bb7      	ldr	r3, [pc, #732]	; (800d540 <kalman_3gyro.constprop.0+0x11d8>)
 800d264:	ed92 8a00 	vldr	s16, [r2]
 800d268:	ed93 ba00 	vldr	s22, [r3]
 800d26c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d270:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d274:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d278:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d27c:	f1c1 0101 	rsb	r1, r1, #1
 800d280:	910c      	str	r1, [sp, #48]	; 0x30
 800d282:	a92d      	add	r1, sp, #180	; 0xb4
 800d284:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d288:	9123      	str	r1, [sp, #140]	; 0x8c
 800d28a:	2100      	movs	r1, #0
 800d28c:	9109      	str	r1, [sp, #36]	; 0x24
 800d28e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d292:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d296:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d29a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d29e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d2a2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800d2a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d2aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2ae:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800d2b2:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800d2b6:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800d2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d2c8:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800d2cc:	18e0      	adds	r0, r4, r3
 800d2ce:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d2d2:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d2d6:	f841 0b04 	str.w	r0, [r1], #4
 800d2da:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800d2de:	4298      	cmp	r0, r3
 800d2e0:	f102 020c 	add.w	r2, r2, #12
 800d2e4:	d1f2      	bne.n	800d2cc <kalman_3gyro.constprop.0+0xf64>
 800d2e6:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d2ea:	ed93 7a00 	vldr	s14, [r3]
 800d2ee:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800d2f2:	edd3 7a00 	vldr	s15, [r3]
 800d2f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fe:	bf84      	itt	hi
 800d300:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d304:	f8a9 3000 	strhhi.w	r3, [r9]
 800d308:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800d30c:	ed93 7a00 	vldr	s14, [r3]
 800d310:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800d314:	edd3 7a00 	vldr	s15, [r3]
 800d318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d320:	bf84      	itt	hi
 800d322:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d326:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800d32a:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800d32e:	ed93 7a00 	vldr	s14, [r3]
 800d332:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800d336:	edd3 7a00 	vldr	s15, [r3]
 800d33a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d342:	bf84      	itt	hi
 800d344:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d348:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800d34c:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800d350:	ed93 7a00 	vldr	s14, [r3]
 800d354:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800d358:	edd3 7a00 	vldr	s15, [r3]
 800d35c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d364:	bf84      	itt	hi
 800d366:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d36a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800d36e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800d372:	ed93 7a00 	vldr	s14, [r3]
 800d376:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800d37a:	edd3 7a00 	vldr	s15, [r3]
 800d37e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	bf84      	itt	hi
 800d388:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d38c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800d390:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800d394:	ed93 7a00 	vldr	s14, [r3]
 800d398:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800d39c:	edd3 7a00 	vldr	s15, [r3]
 800d3a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a8:	bf84      	itt	hi
 800d3aa:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d3ae:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800d3b2:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800d3b6:	ed93 7a00 	vldr	s14, [r3]
 800d3ba:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800d3be:	edd3 7a00 	vldr	s15, [r3]
 800d3c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ca:	bf84      	itt	hi
 800d3cc:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d3d0:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800d3d4:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800d3d8:	ed93 7a00 	vldr	s14, [r3]
 800d3dc:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800d3e0:	edd3 7a00 	vldr	s15, [r3]
 800d3e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ec:	bf84      	itt	hi
 800d3ee:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d3f2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800d3f6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800d3fa:	ed93 7a00 	vldr	s14, [r3]
 800d3fe:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800d402:	edd3 7a00 	vldr	s15, [r3]
 800d406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	bf84      	itt	hi
 800d410:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800d414:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800d418:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800d41c:	ed93 7a00 	vldr	s14, [r3]
 800d420:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800d424:	edd3 7a00 	vldr	s15, [r3]
 800d428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d430:	bf84      	itt	hi
 800d432:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800d436:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800d43a:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800d43e:	ed93 7a00 	vldr	s14, [r3]
 800d442:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800d446:	edd3 7a00 	vldr	s15, [r3]
 800d44a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	bf84      	itt	hi
 800d454:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800d458:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800d45c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800d460:	ed93 7a00 	vldr	s14, [r3]
 800d464:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800d468:	edd3 7a00 	vldr	s15, [r3]
 800d46c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d474:	bf84      	itt	hi
 800d476:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800d47a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800d47e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800d482:	ed93 7a00 	vldr	s14, [r3]
 800d486:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800d48a:	edd3 7a00 	vldr	s15, [r3]
 800d48e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d496:	bf84      	itt	hi
 800d498:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800d49c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800d4a0:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800d4a4:	ed93 7a00 	vldr	s14, [r3]
 800d4a8:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800d4ac:	edd3 7a00 	vldr	s15, [r3]
 800d4b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b8:	bf84      	itt	hi
 800d4ba:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800d4be:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800d4c2:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800d4c6:	ed93 7a00 	vldr	s14, [r3]
 800d4ca:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800d4ce:	edd3 7a00 	vldr	s15, [r3]
 800d4d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4da:	bf84      	itt	hi
 800d4dc:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800d4e0:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800d4e4:	221e      	movs	r2, #30
 800d4e6:	2101      	movs	r1, #1
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	f009 fcbd 	bl	8016e68 <memset>
 800d4ee:	2304      	movs	r3, #4
 800d4f0:	9307      	str	r3, [sp, #28]
 800d4f2:	2302      	movs	r3, #2
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	9b05      	ldr	r3, [sp, #20]
 800d4f8:	9306      	str	r3, [sp, #24]
 800d4fa:	1c5f      	adds	r7, r3, #1
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	9305      	str	r3, [sp, #20]
 800d500:	f04f 0b01 	mov.w	fp, #1
 800d504:	9b05      	ldr	r3, [sp, #20]
 800d506:	f8cd b004 	str.w	fp, [sp, #4]
 800d50a:	445b      	add	r3, fp
 800d50c:	2b1f      	cmp	r3, #31
 800d50e:	bfa8      	it	ge
 800d510:	231f      	movge	r3, #31
 800d512:	465a      	mov	r2, fp
 800d514:	eba3 0802 	sub.w	r8, r3, r2
 800d518:	f1b8 0f00 	cmp.w	r8, #0
 800d51c:	469b      	mov	fp, r3
 800d51e:	f107 35ff 	add.w	r5, r7, #4294967295
 800d522:	dd44      	ble.n	800d5ae <kalman_3gyro.constprop.0+0x1246>
 800d524:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d528:	9302      	str	r3, [sp, #8]
 800d52a:	f1ab 0302 	sub.w	r3, fp, #2
 800d52e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800d532:	4616      	mov	r6, r2
 800d534:	2400      	movs	r4, #0
 800d536:	e00f      	b.n	800d558 <kalman_3gyro.constprop.0+0x11f0>
 800d538:	00000000 	.word	0x00000000
 800d53c:	20001a2c 	.word	0x20001a2c
 800d540:	20001a3c 	.word	0x20001a3c
 800d544:	3f333333 	.word	0x3f333333
 800d548:	3f4ccccd 	.word	0x3f4ccccd
 800d54c:	3f666666 	.word	0x3f666666
 800d550:	3ecccccc 	.word	0x3ecccccc
 800d554:	3dcccccd 	.word	0x3dcccccd
 800d558:	1e71      	subs	r1, r6, #1
 800d55a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800d55e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800d562:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d566:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d56a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800d56e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d572:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800d576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57e:	f105 0c02 	add.w	ip, r5, #2
 800d582:	f105 0801 	add.w	r8, r5, #1
 800d586:	f240 81d3 	bls.w	800d930 <kalman_3gyro.constprop.0+0x15c8>
 800d58a:	45e3      	cmp	fp, ip
 800d58c:	f80a 0004 	strb.w	r0, [sl, r4]
 800d590:	f000 81bf 	beq.w	800d912 <kalman_3gyro.constprop.0+0x15aa>
 800d594:	4645      	mov	r5, r8
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	3401      	adds	r4, #1
 800d59a:	42a3      	cmp	r3, r4
 800d59c:	dcdc      	bgt.n	800d558 <kalman_3gyro.constprop.0+0x11f0>
 800d59e:	4698      	mov	r8, r3
 800d5a0:	9b01      	ldr	r3, [sp, #4]
 800d5a2:	1e58      	subs	r0, r3, #1
 800d5a4:	4448      	add	r0, r9
 800d5a6:	4642      	mov	r2, r8
 800d5a8:	4651      	mov	r1, sl
 800d5aa:	f009 fc4f 	bl	8016e4c <memcpy>
 800d5ae:	9b06      	ldr	r3, [sp, #24]
 800d5b0:	eb0b 0703 	add.w	r7, fp, r3
 800d5b4:	2f1e      	cmp	r7, #30
 800d5b6:	dda5      	ble.n	800d504 <kalman_3gyro.constprop.0+0x119c>
 800d5b8:	9b07      	ldr	r3, [sp, #28]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	9307      	str	r3, [sp, #28]
 800d5be:	d19a      	bne.n	800d4f6 <kalman_3gyro.constprop.0+0x118e>
 800d5c0:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800d5c4:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800d5c8:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d5cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d5d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d5d4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800d5d8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d5dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d5e8:	460a      	mov	r2, r1
 800d5ea:	bf4c      	ite	mi
 800d5ec:	2201      	movmi	r2, #1
 800d5ee:	2200      	movpl	r2, #0
 800d5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f4:	bf4c      	ite	mi
 800d5f6:	2301      	movmi	r3, #1
 800d5f8:	2300      	movpl	r3, #0
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	f000 81b4 	beq.w	800d968 <kalman_3gyro.constprop.0+0x1600>
 800d600:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d604:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d60e:	ece3 7a01 	vstmia	r3!, {s15}
 800d612:	930b      	str	r3, [sp, #44]	; 0x2c
 800d614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d616:	3304      	adds	r3, #4
 800d618:	930a      	str	r3, [sp, #40]	; 0x28
 800d61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	f47f ae4c 	bne.w	800d2ba <kalman_3gyro.constprop.0+0xf52>
 800d622:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d626:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800d62a:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800d62e:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800d544 <kalman_3gyro.constprop.0+0x11dc>
 800d632:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800d636:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800d548 <kalman_3gyro.constprop.0+0x11e0>
 800d63a:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800d63e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d642:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d646:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d64a:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800d64e:	eee6 7a06 	vfma.f32	s15, s12, s12
 800d652:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800d656:	eeb0 6a67 	vmov.f32	s12, s15
 800d65a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d65e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800d662:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800d666:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800d66a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800d66e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800d672:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800d676:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d67a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800d67e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800d682:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800d686:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800d68a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d68e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800d692:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d696:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d69a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800d69e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800d6a2:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f040 81a4 	bne.w	800d9f4 <kalman_3gyro.constprop.0+0x168c>
 800d6ac:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800d6b0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800d6b4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800d6b8:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800d6bc:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800d6c0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800d6c4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800d6c8:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800d6cc:	f8c8 3020 	str.w	r3, [r8, #32]
 800d6d0:	ed88 7a07 	vstr	s14, [r8, #28]
 800d6d4:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800d6d8:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800d6dc:	ed93 7a00 	vldr	s14, [r3]
 800d6e0:	ed92 8a00 	vldr	s16, [r2]
 800d6e4:	eddb ea02 	vldr	s29, [fp, #8]
 800d6e8:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800d6ec:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800d6f0:	ed92 5a00 	vldr	s10, [r2]
 800d6f4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800d6f8:	ed93 7a00 	vldr	s14, [r3]
 800d6fc:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d700:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800d704:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800d708:	ed92 5a00 	vldr	s10, [r2]
 800d70c:	ed93 7a00 	vldr	s14, [r3]
 800d710:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d714:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800d718:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800d71c:	ed92 5a00 	vldr	s10, [r2]
 800d720:	ed93 7a00 	vldr	s14, [r3]
 800d724:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d728:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800d72c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800d730:	ed92 5a00 	vldr	s10, [r2]
 800d734:	ed93 7a00 	vldr	s14, [r3]
 800d738:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800d73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d740:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d744:	f340 8232 	ble.w	800dbac <kalman_3gyro.constprop.0+0x1844>
 800d748:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800d74c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d754:	f100 815e 	bmi.w	800da14 <kalman_3gyro.constprop.0+0x16ac>
 800d758:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800d75c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800d760:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	f142 84bd 	bpl.w	80100e6 <kalman_3gyro.constprop.0+0x3d7e>
 800d76c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800d770:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d778:	f342 850a 	ble.w	8010190 <kalman_3gyro.constprop.0+0x3e28>
 800d77c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800d780:	eef4 2ac8 	vcmpe.f32	s5, s16
 800d784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d788:	f342 86c5 	ble.w	8010516 <kalman_3gyro.constprop.0+0x41ae>
 800d78c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800d790:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800d794:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800d798:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d79c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d7a0:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800d7a4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d7a8:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d7ac:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d7b8:	f202 86c5 	bhi.w	8010546 <kalman_3gyro.constprop.0+0x41de>
 800d7bc:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800d7c0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c8:	f342 86c5 	ble.w	8010556 <kalman_3gyro.constprop.0+0x41ee>
 800d7cc:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800d7d0:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800d7d4:	ee38 3a64 	vsub.f32	s6, s16, s9
 800d7d8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d7dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d7e0:	ee64 4a03 	vmul.f32	s9, s8, s6
 800d7e4:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800d7e8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d7ec:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800d7f0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f8:	f202 86c5 	bhi.w	8010586 <kalman_3gyro.constprop.0+0x421e>
 800d7fc:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800d800:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d808:	f343 8371 	ble.w	8010eee <kalman_3gyro.constprop.0+0x4b86>
 800d80c:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800d810:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800d814:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d818:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d81c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d820:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d824:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d828:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d82c:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800d830:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d838:	f202 86c5 	bhi.w	80105c6 <kalman_3gyro.constprop.0+0x425e>
 800d83c:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800d840:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d848:	f343 8359 	ble.w	8010efe <kalman_3gyro.constprop.0+0x4b96>
 800d84c:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800d850:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800d854:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d858:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d85c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d860:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d864:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d868:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d86c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800d870:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	f2c2 86c5 	blt.w	8010606 <kalman_3gyro.constprop.0+0x429e>
 800d87c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800d880:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800d884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d888:	f143 832d 	bpl.w	8010ee6 <kalman_3gyro.constprop.0+0x4b7e>
 800d88c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800d890:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800d894:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d898:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d89c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d8a0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d8a4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d8a8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d8ac:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800d8b0:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800d8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b8:	f2c2 86c5 	blt.w	8010646 <kalman_3gyro.constprop.0+0x42de>
 800d8bc:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800d8c0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c8:	f142 86c5 	bpl.w	8010656 <kalman_3gyro.constprop.0+0x42ee>
 800d8cc:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800d8d0:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800d8d4:	ee78 3a64 	vsub.f32	s7, s16, s9
 800d8d8:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d8dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d8e0:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d8e4:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800d8e8:	ee3e ea04 	vadd.f32	s28, s28, s8
 800d8ec:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800d8f0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800d8f4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800d8f8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800d8fc:	e15a      	b.n	800dbb4 <kalman_3gyro.constprop.0+0x184c>
 800d8fe:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800d54c <kalman_3gyro.constprop.0+0x11e4>
 800d902:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800d550 <kalman_3gyro.constprop.0+0x11e8>
 800d906:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800d554 <kalman_3gyro.constprop.0+0x11ec>
 800d90a:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800d90e:	f7fe bedd 	b.w	800c6cc <kalman_3gyro.constprop.0+0x364>
 800d912:	1c60      	adds	r0, r4, #1
 800d914:	42be      	cmp	r6, r7
 800d916:	eba7 0206 	sub.w	r2, r7, r6
 800d91a:	4449      	add	r1, r9
 800d91c:	4450      	add	r0, sl
 800d91e:	f6bf ae39 	bge.w	800d594 <kalman_3gyro.constprop.0+0x122c>
 800d922:	443c      	add	r4, r7
 800d924:	1ba4      	subs	r4, r4, r6
 800d926:	f009 fa91 	bl	8016e4c <memcpy>
 800d92a:	463e      	mov	r6, r7
 800d92c:	4645      	mov	r5, r8
 800d92e:	e632      	b.n	800d596 <kalman_3gyro.constprop.0+0x122e>
 800d930:	3601      	adds	r6, #1
 800d932:	42be      	cmp	r6, r7
 800d934:	f80a 2004 	strb.w	r2, [sl, r4]
 800d938:	f47f ae2d 	bne.w	800d596 <kalman_3gyro.constprop.0+0x122e>
 800d93c:	9b02      	ldr	r3, [sp, #8]
 800d93e:	f105 0801 	add.w	r8, r5, #1
 800d942:	1c60      	adds	r0, r4, #1
 800d944:	45c3      	cmp	fp, r8
 800d946:	eba3 0205 	sub.w	r2, r3, r5
 800d94a:	eb09 0105 	add.w	r1, r9, r5
 800d94e:	4450      	add	r0, sl
 800d950:	f77f ae21 	ble.w	800d596 <kalman_3gyro.constprop.0+0x122e>
 800d954:	f009 fa7a 	bl	8016e4c <memcpy>
 800d958:	9b02      	ldr	r3, [sp, #8]
 800d95a:	441c      	add	r4, r3
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	1b5a      	subs	r2, r3, r5
 800d960:	1b64      	subs	r4, r4, r5
 800d962:	eb02 0508 	add.w	r5, r2, r8
 800d966:	e616      	b.n	800d596 <kalman_3gyro.constprop.0+0x122e>
 800d968:	eef4 7a48 	vcmp.f32	s15, s16
 800d96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d970:	f43f ae46 	beq.w	800d600 <kalman_3gyro.constprop.0+0x1298>
 800d974:	eef4 7a4b 	vcmp.f32	s15, s22
 800d978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97c:	f43f ae40 	beq.w	800d600 <kalman_3gyro.constprop.0+0x1298>
 800d980:	eeb4 7a48 	vcmp.f32	s14, s16
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	f43f ae3a 	beq.w	800d600 <kalman_3gyro.constprop.0+0x1298>
 800d98c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800d990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d994:	f43f ae34 	beq.w	800d600 <kalman_3gyro.constprop.0+0x1298>
 800d998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d99c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d9a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d9a4:	e632      	b.n	800d60c <kalman_3gyro.constprop.0+0x12a4>
 800d9a6:	2304      	movs	r3, #4
 800d9a8:	9301      	str	r3, [sp, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	461c      	mov	r4, r3
 800d9ae:	2307      	movs	r3, #7
 800d9b0:	4694      	mov	ip, r2
 800d9b2:	2106      	movs	r1, #6
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	2603      	movs	r6, #3
 800d9b8:	f04f 0a01 	mov.w	sl, #1
 800d9bc:	f7ff ba5c 	b.w	800ce78 <kalman_3gyro.constprop.0+0xb10>
 800d9c0:	9a08      	ldr	r2, [sp, #32]
 800d9c2:	eddf 7a62 	vldr	s15, [pc, #392]	; 800db4c <kalman_3gyro.constprop.0+0x17e4>
 800d9c6:	eddf 5a62 	vldr	s11, [pc, #392]	; 800db50 <kalman_3gyro.constprop.0+0x17e8>
 800d9ca:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800db54 <kalman_3gyro.constprop.0+0x17ec>
 800d9ce:	4b62      	ldr	r3, [pc, #392]	; (800db58 <kalman_3gyro.constprop.0+0x17f0>)
 800d9d0:	edc2 7a00 	vstr	s15, [r2]
 800d9d4:	eeb0 4a65 	vmov.f32	s8, s11
 800d9d8:	eeb0 3a67 	vmov.f32	s6, s15
 800d9dc:	eef0 4a45 	vmov.f32	s9, s10
 800d9e0:	6053      	str	r3, [r2, #4]
 800d9e2:	6093      	str	r3, [r2, #8]
 800d9e4:	f7fe bd3e 	b.w	800c464 <kalman_3gyro.constprop.0+0xfc>
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	2005      	movs	r0, #5
 800d9ec:	f04f 0802 	mov.w	r8, #2
 800d9f0:	f7ff ba5c 	b.w	800ceac <kalman_3gyro.constprop.0+0xb44>
 800d9f4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800d9fe:	ed88 7a07 	vstr	s14, [r8, #28]
 800da02:	ed88 7a08 	vstr	s14, [r8, #32]
 800da06:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800da0a:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800da0e:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800da12:	e65f      	b.n	800d6d4 <kalman_3gyro.constprop.0+0x136c>
 800da14:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800da18:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	f342 83b2 	ble.w	8010188 <kalman_3gyro.constprop.0+0x3e20>
 800da24:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da2c:	f2c2 86e9 	blt.w	8010802 <kalman_3gyro.constprop.0+0x449a>
 800da30:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800da34:	eef4 4ac8 	vcmpe.f32	s9, s16
 800da38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3c:	f342 8712 	ble.w	8010864 <kalman_3gyro.constprop.0+0x44fc>
 800da40:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800da44:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800da48:	ee38 3a47 	vsub.f32	s6, s16, s14
 800da4c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800da50:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800da54:	ee64 4a03 	vmul.f32	s9, s8, s6
 800da58:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800da5c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800da60:	f002 bed8 	b.w	8010814 <kalman_3gyro.constprop.0+0x44ac>
 800da64:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da68:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da70:	f342 84bd 	ble.w	80103ee <kalman_3gyro.constprop.0+0x4086>
 800da74:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800da78:	f7ff b993 	b.w	800cda2 <kalman_3gyro.constprop.0+0xa3a>
 800da7c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da80:	eeb4 bac7 	vcmpe.f32	s22, s14
 800da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da88:	f342 849f 	ble.w	80103ca <kalman_3gyro.constprop.0+0x4062>
 800da8c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800da90:	f7ff b964 	b.w	800cd5c <kalman_3gyro.constprop.0+0x9f4>
 800da94:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da98:	eef4 dac7 	vcmpe.f32	s27, s14
 800da9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa0:	f342 84b7 	ble.w	8010412 <kalman_3gyro.constprop.0+0x40aa>
 800daa4:	eddf da2d 	vldr	s27, [pc, #180]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800daa8:	f7ff b935 	b.w	800cd16 <kalman_3gyro.constprop.0+0x9ae>
 800daac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dab0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab8:	f342 8475 	ble.w	80103a6 <kalman_3gyro.constprop.0+0x403e>
 800dabc:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800dac0:	f7ff b8c3 	b.w	800cc4a <kalman_3gyro.constprop.0+0x8e2>
 800dac4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dac8:	eeb4 bac7 	vcmpe.f32	s22, s14
 800dacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad0:	f342 83a0 	ble.w	8010214 <kalman_3gyro.constprop.0+0x3eac>
 800dad4:	ed9f ba21 	vldr	s22, [pc, #132]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800dad8:	f7ff b894 	b.w	800cc04 <kalman_3gyro.constprop.0+0x89c>
 800dadc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dae0:	eef4 dac7 	vcmpe.f32	s27, s14
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	f342 8382 	ble.w	80101f0 <kalman_3gyro.constprop.0+0x3e88>
 800daec:	eddf da1b 	vldr	s27, [pc, #108]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800daf0:	f7ff b865 	b.w	800cbbe <kalman_3gyro.constprop.0+0x856>
 800daf4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800daf8:	eef4 dac7 	vcmpe.f32	s27, s14
 800dafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db00:	f342 8364 	ble.w	80101cc <kalman_3gyro.constprop.0+0x3e64>
 800db04:	eddf da15 	vldr	s27, [pc, #84]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800db08:	f7fe bff3 	b.w	800caf2 <kalman_3gyro.constprop.0+0x78a>
 800db0c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800db10:	eeb4 eac7 	vcmpe.f32	s28, s14
 800db14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db18:	f342 8346 	ble.w	80101a8 <kalman_3gyro.constprop.0+0x3e40>
 800db1c:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800db20:	f7fe bfc4 	b.w	800caac <kalman_3gyro.constprop.0+0x744>
 800db24:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800db28:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800db2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db30:	f342 839e 	ble.w	8010270 <kalman_3gyro.constprop.0+0x3f08>
 800db34:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800db5c <kalman_3gyro.constprop.0+0x17f4>
 800db38:	f7fe bf95 	b.w	800ca66 <kalman_3gyro.constprop.0+0x6fe>
 800db3c:	eef1 3a63 	vneg.f32	s7, s7
 800db40:	f7ff bb42 	b.w	800d1c8 <kalman_3gyro.constprop.0+0xe60>
 800db44:	eef1 3a63 	vneg.f32	s7, s7
 800db48:	f7ff bb1b 	b.w	800d182 <kalman_3gyro.constprop.0+0xe1a>
 800db4c:	00000000 	.word	0x00000000
 800db50:	3fb33333 	.word	0x3fb33333
 800db54:	bfb33333 	.word	0xbfb33333
 800db58:	3f333333 	.word	0x3f333333
 800db5c:	80000000 	.word	0x80000000
 800db60:	3fb77778 	.word	0x3fb77778
 800db64:	3f99999a 	.word	0x3f99999a
 800db68:	3f4ccccd 	.word	0x3f4ccccd
 800db6c:	42d40000 	.word	0x42d40000
 800db70:	46979000 	.word	0x46979000
 800db74:	4415c000 	.word	0x4415c000
 800db78:	3ba3d70a 	.word	0x3ba3d70a
 800db7c:	3b449ba6 	.word	0x3b449ba6
 800db80:	3c75c28f 	.word	0x3c75c28f
 800db84:	3c23d70a 	.word	0x3c23d70a
 800db88:	3d4cccc0 	.word	0x3d4cccc0
 800db8c:	43480000 	.word	0x43480000
 800db90:	3d4ccccd 	.word	0x3d4ccccd
 800db94:	3cf5c28f 	.word	0x3cf5c28f
 800db98:	3eb33334 	.word	0x3eb33334
 800db9c:	3f933333 	.word	0x3f933333
 800dba0:	4247ffff 	.word	0x4247ffff
 800dba4:	3dcccccd 	.word	0x3dcccccd
 800dba8:	3e4ccccd 	.word	0x3e4ccccd
 800dbac:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800dbb0:	eeb0 ba4e 	vmov.f32	s22, s28
 800dbb4:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800dbb8:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800dbbc:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800dba4 <kalman_3gyro.constprop.0+0x183c>
 800dbc0:	ee79 da6d 	vsub.f32	s27, s18, s27
 800dbc4:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800dbc8:	eef0 daed 	vabs.f32	s27, s27
 800dbcc:	eeb0 5ac5 	vabs.f32	s10, s10
 800dbd0:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800dbd4:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	f340 821c 	ble.w	800e018 <kalman_3gyro.constprop.0+0x1cb0>
 800dbe0:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800db60 <kalman_3gyro.constprop.0+0x17f8>
 800dbe4:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800dbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbec:	f302 828b 	bgt.w	8010106 <kalman_3gyro.constprop.0+0x3d9e>
 800dbf0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800dbf4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800dbf8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800dbfc:	eee5 4a04 	vfma.f32	s9, s10, s8
 800dc00:	eeb0 5a64 	vmov.f32	s10, s9
 800dc04:	eeb4 5aea 	vcmpe.f32	s10, s21
 800dc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0c:	f89b 3000 	ldrb.w	r3, [fp]
 800dc10:	bfb8      	it	lt
 800dc12:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800dc16:	ed8d 5a01 	vstr	s10, [sp, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 81f9 	beq.w	800e012 <kalman_3gyro.constprop.0+0x1caa>
 800dc20:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 81de 	beq.w	800dfe6 <kalman_3gyro.constprop.0+0x1c7e>
 800dc2a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800dc2e:	2300      	movs	r3, #0
 800dc30:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800dc34:	eeb0 6a61 	vmov.f32	s12, s3
 800dc38:	eea7 6a47 	vfms.f32	s12, s14, s14
 800dc3c:	9908      	ldr	r1, [sp, #32]
 800dc3e:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800dc42:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800dc46:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800dc4a:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800dc4e:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800dc52:	eef1 0ac6 	vsqrt.f32	s1, s12
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800dc5c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800dc60:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800dc64:	9233      	str	r2, [sp, #204]	; 0xcc
 800dc66:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800dc6a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800dc6e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800dc72:	ee25 6a05 	vmul.f32	s12, s10, s10
 800dc76:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800dc7a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800dc7e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dc82:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800dc86:	ee34 4a04 	vadd.f32	s8, s8, s8
 800dc8a:	eeb0 3a42 	vmov.f32	s6, s4
 800dc8e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800dc92:	eea1 3a25 	vfma.f32	s6, s2, s11
 800dc96:	eef0 aa46 	vmov.f32	s21, s12
 800dc9a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800dc9e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800dca2:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800dca6:	ee65 6a26 	vmul.f32	s13, s10, s13
 800dcaa:	ee22 5a85 	vmul.f32	s10, s5, s10
 800dcae:	eef0 2a44 	vmov.f32	s5, s8
 800dcb2:	eee0 2a25 	vfma.f32	s5, s0, s11
 800dcb6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800dcba:	eeb0 fa64 	vmov.f32	s30, s9
 800dcbe:	eea0 4a65 	vfms.f32	s8, s0, s11
 800dcc2:	ee71 fac3 	vsub.f32	s31, s3, s6
 800dcc6:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800dcca:	eeb0 1a6a 	vmov.f32	s2, s21
 800dcce:	eef0 aa66 	vmov.f32	s21, s13
 800dcd2:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800dcd6:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800dcda:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800dcde:	ee32 6a06 	vadd.f32	s12, s4, s12
 800dce2:	ee22 2a87 	vmul.f32	s4, s5, s14
 800dce6:	eea0 0a84 	vfma.f32	s0, s1, s8
 800dcea:	eea0 2a81 	vfma.f32	s4, s1, s2
 800dcee:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800dcf2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800dcf6:	eef0 3a64 	vmov.f32	s7, s9
 800dcfa:	eee5 3a65 	vfms.f32	s7, s10, s11
 800dcfe:	eee5 4a25 	vfma.f32	s9, s10, s11
 800dd02:	ee33 3a61 	vsub.f32	s6, s6, s3
 800dd06:	edd1 5a02 	vldr	s11, [r1, #8]
 800dd0a:	ed91 5a05 	vldr	s10, [r1, #20]
 800dd0e:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800dd12:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800dd16:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800dd1a:	edd1 1a01 	vldr	s3, [r1, #4]
 800dd1e:	edd1 fa00 	vldr	s31, [r1]
 800dd22:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800dd26:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800dd2a:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800dd2e:	edd1 5a03 	vldr	s11, [r1, #12]
 800dd32:	edd1 1a04 	vldr	s3, [r1, #16]
 800dd36:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800db64 <kalman_3gyro.constprop.0+0x17fc>
 800dd3a:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800dd3e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800dd42:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800dd46:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800dd4a:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800dd4e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd56:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800dd5a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800dd5e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800dd62:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800dd66:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800dd6a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800dd6e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800dd72:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800dd76:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800dd7a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800dd7e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800dd82:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800dd86:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800dd8a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800dd8e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800dd92:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800dd96:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800dd9a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800dd9e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800dda2:	d506      	bpl.n	800ddb2 <kalman_3gyro.constprop.0+0x1a4a>
 800dda4:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800db68 <kalman_3gyro.constprop.0+0x1800>
 800dda8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	dc01      	bgt.n	800ddb6 <kalman_3gyro.constprop.0+0x1a4e>
 800ddb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ddb6:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800ddba:	eef0 7ae7 	vabs.f32	s15, s15
 800ddbe:	ee77 7aab 	vadd.f32	s15, s15, s23
 800ddc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	f340 8141 	ble.w	800e050 <kalman_3gyro.constprop.0+0x1ce8>
 800ddce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddda:	f142 8198 	bpl.w	801010e <kalman_3gyro.constprop.0+0x3da6>
 800ddde:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800db78 <kalman_3gyro.constprop.0+0x1810>
 800dde2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dde6:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800db84 <kalman_3gyro.constprop.0+0x181c>
 800ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddf2:	f102 8221 	bmi.w	8010238 <kalman_3gyro.constprop.0+0x3ed0>
 800ddf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfa:	f142 8221 	bpl.w	8010240 <kalman_3gyro.constprop.0+0x3ed8>
 800ddfe:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800db80 <kalman_3gyro.constprop.0+0x1818>
 800de02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0a:	f282 84a4 	bge.w	8010756 <kalman_3gyro.constprop.0+0x43ee>
 800de0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de12:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800db94 <kalman_3gyro.constprop.0+0x182c>
 800de16:	eef4 7ae6 	vcmpe.f32	s15, s13
 800de1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1e:	f2c2 84b0 	blt.w	8010782 <kalman_3gyro.constprop.0+0x441a>
 800de22:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800db90 <kalman_3gyro.constprop.0+0x1828>
 800de26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2e:	f142 84b0 	bpl.w	8010792 <kalman_3gyro.constprop.0+0x442a>
 800de32:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800db94 <kalman_3gyro.constprop.0+0x182c>
 800de36:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800dba0 <kalman_3gyro.constprop.0+0x1838>
 800de3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800de42:	ee66 6a87 	vmul.f32	s13, s13, s14
 800de46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800de4a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800de4e:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800dba4 <kalman_3gyro.constprop.0+0x183c>
 800de52:	eef4 7ae6 	vcmpe.f32	s15, s13
 800de56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5a:	f2c2 84b0 	blt.w	80107be <kalman_3gyro.constprop.0+0x4456>
 800de5e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800dba8 <kalman_3gyro.constprop.0+0x1840>
 800de62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6a:	f142 84b0 	bpl.w	80107ce <kalman_3gyro.constprop.0+0x4466>
 800de6e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800dba4 <kalman_3gyro.constprop.0+0x183c>
 800de72:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800db6c <kalman_3gyro.constprop.0+0x1804>
 800de76:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de7a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800de7e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800de82:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800de86:	eea6 7a86 	vfma.f32	s14, s13, s12
 800de8a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800de92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de96:	db0d      	blt.n	800deb4 <kalman_3gyro.constprop.0+0x1b4c>
 800de98:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de9c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800db70 <kalman_3gyro.constprop.0+0x1808>
 800dea0:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800db74 <kalman_3gyro.constprop.0+0x180c>
 800dea4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800dea8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800deac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800deb0:	eea6 7a86 	vfma.f32	s14, s13, s12
 800deb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deb8:	ee77 6a26 	vadd.f32	s13, s14, s13
 800debc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800dec0:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800dec4:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800db80 <kalman_3gyro.constprop.0+0x1818>
 800dec8:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800db78 <kalman_3gyro.constprop.0+0x1810>
 800decc:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800db84 <kalman_3gyro.constprop.0+0x181c>
 800ded0:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800db7c <kalman_3gyro.constprop.0+0x1814>
 800ded4:	eef4 4ac6 	vcmpe.f32	s9, s12
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	eef4 7ae3 	vcmpe.f32	s15, s7
 800dee0:	bfb8      	it	lt
 800dee2:	eef0 4a46 	vmovlt.f32	s9, s12
 800dee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deea:	ee24 4a84 	vmul.f32	s8, s9, s8
 800deee:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800def2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800def6:	f142 841f 	bpl.w	8010738 <kalman_3gyro.constprop.0+0x43d0>
 800defa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defe:	f2c2 841f 	blt.w	8010740 <kalman_3gyro.constprop.0+0x43d8>
 800df02:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800db80 <kalman_3gyro.constprop.0+0x1818>
 800df06:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0e:	f142 83ba 	bpl.w	8010686 <kalman_3gyro.constprop.0+0x431e>
 800df12:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800db84 <kalman_3gyro.constprop.0+0x181c>
 800df16:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800db88 <kalman_3gyro.constprop.0+0x1820>
 800df1a:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800db8c <kalman_3gyro.constprop.0+0x1824>
 800df1e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df26:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800df2a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800df2e:	eeb0 ca66 	vmov.f32	s24, s13
 800df32:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800db94 <kalman_3gyro.constprop.0+0x182c>
 800df36:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3e:	f2c2 83ba 	blt.w	80106b6 <kalman_3gyro.constprop.0+0x434e>
 800df42:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800db90 <kalman_3gyro.constprop.0+0x1828>
 800df46:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df4e:	f142 83ba 	bpl.w	80106c6 <kalman_3gyro.constprop.0+0x435e>
 800df52:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800db94 <kalman_3gyro.constprop.0+0x182c>
 800df56:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800db98 <kalman_3gyro.constprop.0+0x1830>
 800df5a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800dba0 <kalman_3gyro.constprop.0+0x1838>
 800df5e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800db9c <kalman_3gyro.constprop.0+0x1834>
 800df62:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df66:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800df6a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800df6e:	eeb0 ca66 	vmov.f32	s24, s13
 800df72:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800dba4 <kalman_3gyro.constprop.0+0x183c>
 800df76:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7e:	f2c2 83ba 	blt.w	80106f6 <kalman_3gyro.constprop.0+0x438e>
 800df82:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800dba8 <kalman_3gyro.constprop.0+0x1840>
 800df86:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8e:	f142 83ba 	bpl.w	8010706 <kalman_3gyro.constprop.0+0x439e>
 800df92:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e020 <kalman_3gyro.constprop.0+0x1cb8>
 800df96:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e024 <kalman_3gyro.constprop.0+0x1cbc>
 800df9a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df9e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800dfa2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800dfa6:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800dfaa:	eee3 6a83 	vfma.f32	s13, s7, s6
 800dfae:	eeb0 ca66 	vmov.f32	s24, s13
 800dfb2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dfb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfbe:	f2c2 80b0 	blt.w	8010122 <kalman_3gyro.constprop.0+0x3dba>
 800dfc2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800dfc6:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800dfca:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e028 <kalman_3gyro.constprop.0+0x1cc0>
 800dfce:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e02c <kalman_3gyro.constprop.0+0x1cc4>
 800dfd2:	ee63 3a23 	vmul.f32	s7, s6, s7
 800dfd6:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800dfda:	eee3 6a83 	vfma.f32	s13, s7, s6
 800dfde:	eeb0 ca66 	vmov.f32	s24, s13
 800dfe2:	f002 b89e 	b.w	8010122 <kalman_3gyro.constprop.0+0x3dba>
 800dfe6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dfea:	ed9b 6a05 	vldr	s12, [fp, #20]
 800dfee:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800dff2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800dff6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800dffa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dffe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e002:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e006:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00e:	f102 8246 	bmi.w	801049e <kalman_3gyro.constprop.0+0x4136>
 800e012:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e016:	e60b      	b.n	800dc30 <kalman_3gyro.constprop.0+0x18c8>
 800e018:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e01c:	e5f2      	b.n	800dc04 <kalman_3gyro.constprop.0+0x189c>
 800e01e:	bf00      	nop
 800e020:	3dcccccd 	.word	0x3dcccccd
 800e024:	410c0000 	.word	0x410c0000
 800e028:	42c80000 	.word	0x42c80000
 800e02c:	424a0000 	.word	0x424a0000
 800e030:	3c23d70a 	.word	0x3c23d70a
 800e034:	3b449ba6 	.word	0x3b449ba6
 800e038:	3fb33333 	.word	0x3fb33333
 800e03c:	3ecccccd 	.word	0x3ecccccd
 800e040:	3f8f5c29 	.word	0x3f8f5c29
 800e044:	3f59999a 	.word	0x3f59999a
 800e048:	3e4ccccd 	.word	0x3e4ccccd
 800e04c:	3f99999a 	.word	0x3f99999a
 800e050:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e054:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e030 <kalman_3gyro.constprop.0+0x1cc8>
 800e058:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e034 <kalman_3gyro.constprop.0+0x1ccc>
 800e05c:	eeb0 7a4c 	vmov.f32	s14, s24
 800e060:	eef0 4a4c 	vmov.f32	s9, s24
 800e064:	eddd 6a01 	vldr	s13, [sp, #4]
 800e068:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e06c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e070:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e074:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e078:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e07c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e080:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e084:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e088:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e08c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e090:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e094:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e098:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e09c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e0a0:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e0a4:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e0a8:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e0ac:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e0b0:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e0b4:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e0b8:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e0bc:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e0c0:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e0c4:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e0c8:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e0cc:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e0d0:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e0d4:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e0d8:	2a00      	cmp	r2, #0
 800e0da:	f001 8411 	beq.w	800f900 <kalman_3gyro.constprop.0+0x3598>
 800e0de:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e0e2:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e0e6:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e0ea:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e0ee:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e0f2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e0f6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e0fa:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e0fe:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e102:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e106:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e10a:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e10e:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e112:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e116:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e11a:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e11e:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e122:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e126:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e12a:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e12e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e132:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e136:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e13a:	b159      	cbz	r1, 800e154 <kalman_3gyro.constprop.0+0x1dec>
 800e13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e140:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e148:	dd04      	ble.n	800e154 <kalman_3gyro.constprop.0+0x1dec>
 800e14a:	2000      	movs	r0, #0
 800e14c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e150:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e154:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15c:	dd09      	ble.n	800e172 <kalman_3gyro.constprop.0+0x1e0a>
 800e15e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e162:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16a:	db02      	blt.n	800e172 <kalman_3gyro.constprop.0+0x1e0a>
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f002 8001 	beq.w	8010174 <kalman_3gyro.constprop.0+0x3e0c>
 800e172:	b132      	cbz	r2, 800e182 <kalman_3gyro.constprop.0+0x1e1a>
 800e174:	f240 1001 	movw	r0, #257	; 0x101
 800e178:	2301      	movs	r3, #1
 800e17a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e17e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e182:	2301      	movs	r3, #1
 800e184:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e188:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e18c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e038 <kalman_3gyro.constprop.0+0x1cd0>
 800e190:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e198:	dc09      	bgt.n	800e1ae <kalman_3gyro.constprop.0+0x1e46>
 800e19a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e03c <kalman_3gyro.constprop.0+0x1cd4>
 800e19e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a6:	d402      	bmi.n	800e1ae <kalman_3gyro.constprop.0+0x1e46>
 800e1a8:	2a00      	cmp	r2, #0
 800e1aa:	f042 80e4 	bne.w	8010376 <kalman_3gyro.constprop.0+0x400e>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e1b4:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e1b8:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e1bc:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e1c0:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e040 <kalman_3gyro.constprop.0+0x1cd8>
 800e1c4:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1cc:	dc09      	bgt.n	800e1e2 <kalman_3gyro.constprop.0+0x1e7a>
 800e1ce:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e044 <kalman_3gyro.constprop.0+0x1cdc>
 800e1d2:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1da:	d402      	bmi.n	800e1e2 <kalman_3gyro.constprop.0+0x1e7a>
 800e1dc:	2900      	cmp	r1, #0
 800e1de:	f042 8097 	bne.w	8010310 <kalman_3gyro.constprop.0+0x3fa8>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e1e8:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e1ec:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e1f0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e1f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1f8:	eef4 dae7 	vcmpe.f32	s27, s15
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	f341 836b 	ble.w	800f8da <kalman_3gyro.constprop.0+0x3572>
 800e204:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e208:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e20c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e210:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e214:	2300      	movs	r3, #0
 800e216:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e222:	eef4 dac7 	vcmpe.f32	s27, s14
 800e226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22a:	bfc4      	itt	gt
 800e22c:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e230:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e234:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e238:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e23c:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e240:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e244:	2b0e      	cmp	r3, #14
 800e246:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e24a:	dc02      	bgt.n	800e252 <kalman_3gyro.constprop.0+0x1eea>
 800e24c:	3305      	adds	r3, #5
 800e24e:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e252:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e256:	eef4 7acd 	vcmpe.f32	s15, s26
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	f340 82e9 	ble.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e262:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e266:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26e:	f340 82e1 	ble.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e272:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e276:	eef4 7aec 	vcmpe.f32	s15, s25
 800e27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e27e:	f340 82d9 	ble.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e048 <kalman_3gyro.constprop.0+0x1ce0>
 800e288:	ed93 7a06 	vldr	s14, [r3, #24]
 800e28c:	eef0 6ac7 	vabs.f32	s13, s14
 800e290:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e298:	f140 82cc 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e29c:	edd3 6a07 	vldr	s13, [r3, #28]
 800e2a0:	eeb0 6ae6 	vabs.f32	s12, s13
 800e2a4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ac:	f140 82c2 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e2b0:	ed93 6a08 	vldr	s12, [r3, #32]
 800e2b4:	eef0 4ac6 	vabs.f32	s9, s12
 800e2b8:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	f140 82b8 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e2c4:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e04c <kalman_3gyro.constprop.0+0x1ce4>
 800e2c8:	eef0 5ae5 	vabs.f32	s11, s11
 800e2cc:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d4:	f140 82ae 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e2d8:	eef0 1ae1 	vabs.f32	s3, s3
 800e2dc:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e4:	f140 82a6 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e2e8:	eeb0 5ac5 	vabs.f32	s10, s10
 800e2ec:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f4:	f140 829e 	bpl.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e2f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2fa:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800e2fe:	edd3 5a00 	vldr	s11, [r3]
 800e302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e304:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e306:	ed93 5a00 	vldr	s10, [r3]
 800e30a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e30c:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e310:	2a09      	cmp	r2, #9
 800e312:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800e316:	ed93 4a00 	vldr	s8, [r3]
 800e31a:	edd4 3a00 	vldr	s7, [r4]
 800e31e:	bf8c      	ite	hi
 800e320:	230a      	movhi	r3, #10
 800e322:	2305      	movls	r3, #5
 800e324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e328:	bfb4      	ite	lt
 800e32a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e32e:	eef0 7a65 	vmovge.f32	s15, s11
 800e332:	bf8c      	ite	hi
 800e334:	eef0 4a45 	vmovhi.f32	s9, s10
 800e338:	eef0 4a65 	vmovls.f32	s9, s11
 800e33c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e344:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e348:	bfb8      	it	lt
 800e34a:	eef0 7a63 	vmovlt.f32	s15, s7
 800e34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e352:	bf88      	it	hi
 800e354:	eef0 4a63 	vmovhi.f32	s9, s7
 800e358:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e364:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e368:	edd1 5a00 	vldr	s11, [r1]
 800e36c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e36e:	bfb8      	it	lt
 800e370:	eef0 7a44 	vmovlt.f32	s15, s8
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	bf88      	it	hi
 800e37a:	eef0 4a44 	vmovhi.f32	s9, s8
 800e37e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e382:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800e38e:	bfb8      	it	lt
 800e390:	eef0 7a65 	vmovlt.f32	s15, s11
 800e394:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39c:	bf88      	it	hi
 800e39e:	eef0 4a65 	vmovhi.f32	s9, s11
 800e3a2:	2b05      	cmp	r3, #5
 800e3a4:	ee35 5a25 	vadd.f32	s10, s10, s11
 800e3a8:	edd1 5a00 	vldr	s11, [r1]
 800e3ac:	d065      	beq.n	800e47a <kalman_3gyro.constprop.0+0x2112>
 800e3ae:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800e3b2:	edd1 3a00 	vldr	s7, [r1]
 800e3b6:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800e3ba:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e3be:	ed91 4a00 	vldr	s8, [r1]
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e3ca:	bfb8      	it	lt
 800e3cc:	eef0 7a63 	vmovlt.f32	s15, s7
 800e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d4:	bf88      	it	hi
 800e3d6:	eef0 4a63 	vmovhi.f32	s9, s7
 800e3da:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e3de:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800e3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e3ea:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e3ee:	edd1 3a00 	vldr	s7, [r1]
 800e3f2:	bfb8      	it	lt
 800e3f4:	eef0 7a44 	vmovlt.f32	s15, s8
 800e3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fc:	bf88      	it	hi
 800e3fe:	eef0 4a44 	vmovhi.f32	s9, s8
 800e402:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e406:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e412:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e416:	ed91 4a00 	vldr	s8, [r1]
 800e41a:	bfb8      	it	lt
 800e41c:	eef0 7a63 	vmovlt.f32	s15, s7
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	bf88      	it	hi
 800e426:	eef0 4a63 	vmovhi.f32	s9, s7
 800e42a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e432:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e436:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e43a:	bfb8      	it	lt
 800e43c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e444:	bf88      	it	hi
 800e446:	eef0 4a44 	vmovhi.f32	s9, s8
 800e44a:	2b0a      	cmp	r3, #10
 800e44c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e450:	d113      	bne.n	800e47a <kalman_3gyro.constprop.0+0x2112>
 800e452:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800e456:	ed91 4a00 	vldr	s8, [r1]
 800e45a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e466:	bfb8      	it	lt
 800e468:	eef0 7a44 	vmovlt.f32	s15, s8
 800e46c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e474:	bf88      	it	hi
 800e476:	eef0 4a44 	vmovhi.f32	s9, s8
 800e47a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e47e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800e81c <kalman_3gyro.constprop.0+0x24b4>
 800e482:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800e820 <kalman_3gyro.constprop.0+0x24b8>
 800e486:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e48a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e48e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	f300 81cd 	bgt.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e49a:	eef0 7ac5 	vabs.f32	s15, s10
 800e49e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e4a2:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800e824 <kalman_3gyro.constprop.0+0x24bc>
 800e4a6:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ae:	f300 81c1 	bgt.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e4b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e4b4:	ed91 5a00 	vldr	s10, [r1]
 800e4b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e4ba:	ed91 4a00 	vldr	s8, [r1]
 800e4be:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4c0:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e4c4:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800e4c8:	ed90 3a00 	vldr	s6, [r0]
 800e4cc:	edd1 3a00 	vldr	s7, [r1]
 800e4d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d6:	bfb4      	ite	lt
 800e4d8:	eef0 7a44 	vmovlt.f32	s15, s8
 800e4dc:	eef0 7a45 	vmovge.f32	s15, s10
 800e4e0:	bf8c      	ite	hi
 800e4e2:	eef0 4a44 	vmovhi.f32	s9, s8
 800e4e6:	eef0 4a45 	vmovls.f32	s9, s10
 800e4ea:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e4f6:	bfb8      	it	lt
 800e4f8:	eef0 7a43 	vmovlt.f32	s15, s6
 800e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e500:	bf88      	it	hi
 800e502:	eef0 4a43 	vmovhi.f32	s9, s6
 800e506:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e512:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e516:	ed91 4a00 	vldr	s8, [r1]
 800e51a:	bfb8      	it	lt
 800e51c:	eef0 7a63 	vmovlt.f32	s15, s7
 800e520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e524:	bf88      	it	hi
 800e526:	eef0 4a63 	vmovhi.f32	s9, s7
 800e52a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e52e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e536:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e53a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e53e:	bfb8      	it	lt
 800e540:	eef0 7a44 	vmovlt.f32	s15, s8
 800e544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e548:	bf88      	it	hi
 800e54a:	eef0 4a44 	vmovhi.f32	s9, s8
 800e54e:	2b05      	cmp	r3, #5
 800e550:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e554:	d065      	beq.n	800e622 <kalman_3gyro.constprop.0+0x22ba>
 800e556:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800e55a:	edd1 3a00 	vldr	s7, [r1]
 800e55e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800e562:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e566:	ed91 4a00 	vldr	s8, [r1]
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e572:	bfb8      	it	lt
 800e574:	eef0 7a63 	vmovlt.f32	s15, s7
 800e578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57c:	bf88      	it	hi
 800e57e:	eef0 4a63 	vmovhi.f32	s9, s7
 800e582:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e586:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800e58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e592:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e596:	edd1 3a00 	vldr	s7, [r1]
 800e59a:	bfb8      	it	lt
 800e59c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	bf88      	it	hi
 800e5a6:	eef0 4a44 	vmovhi.f32	s9, s8
 800e5aa:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e5ae:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e5ba:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e5be:	ed91 4a00 	vldr	s8, [r1]
 800e5c2:	bfb8      	it	lt
 800e5c4:	eef0 7a63 	vmovlt.f32	s15, s7
 800e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5cc:	bf88      	it	hi
 800e5ce:	eef0 4a63 	vmovhi.f32	s9, s7
 800e5d2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5da:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e5de:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e5e2:	bfb8      	it	lt
 800e5e4:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ec:	bf88      	it	hi
 800e5ee:	eef0 4a44 	vmovhi.f32	s9, s8
 800e5f2:	2b0a      	cmp	r3, #10
 800e5f4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e5f8:	d113      	bne.n	800e622 <kalman_3gyro.constprop.0+0x22ba>
 800e5fa:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800e5fe:	ed91 4a00 	vldr	s8, [r1]
 800e602:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e60a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e60e:	bfb8      	it	lt
 800e610:	eef0 7a44 	vmovlt.f32	s15, s8
 800e614:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61c:	bf88      	it	hi
 800e61e:	eef0 4a44 	vmovhi.f32	s9, s8
 800e622:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e626:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800e81c <kalman_3gyro.constprop.0+0x24b4>
 800e62a:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800e820 <kalman_3gyro.constprop.0+0x24b8>
 800e62e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e632:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e636:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63e:	f300 80f9 	bgt.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e642:	eef0 7ac5 	vabs.f32	s15, s10
 800e646:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e64a:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800e824 <kalman_3gyro.constprop.0+0x24bc>
 800e64e:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e656:	f300 80ed 	bgt.w	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e65a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e65c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800e65e:	edd1 4a00 	vldr	s9, [r1]
 800e662:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e664:	ed91 3a00 	vldr	s6, [r1]
 800e668:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e66a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e66e:	ed91 4a00 	vldr	s8, [r1]
 800e672:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800e676:	edd1 3a00 	vldr	s7, [r1]
 800e67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67e:	bfb4      	ite	lt
 800e680:	eef0 7a43 	vmovlt.f32	s15, s6
 800e684:	eef0 7a64 	vmovge.f32	s15, s9
 800e688:	bf8c      	ite	hi
 800e68a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e68e:	eeb0 5a64 	vmovls.f32	s10, s9
 800e692:	eef4 3ae7 	vcmpe.f32	s7, s15
 800e696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800e69e:	bfa8      	it	ge
 800e6a0:	eef0 7a63 	vmovge.f32	s15, s7
 800e6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a8:	bf98      	it	ls
 800e6aa:	eeb0 5a63 	vmovls.f32	s10, s7
 800e6ae:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800e6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b6:	ee34 3a83 	vadd.f32	s6, s9, s6
 800e6ba:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800e6be:	edd5 4a00 	vldr	s9, [r5]
 800e6c2:	bfa8      	it	ge
 800e6c4:	eef0 7a44 	vmovge.f32	s15, s8
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	bf98      	it	ls
 800e6ce:	eeb0 5a44 	vmovls.f32	s10, s8
 800e6d2:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e6d6:	ee73 3a83 	vadd.f32	s7, s7, s6
 800e6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6de:	eef4 4ac5 	vcmpe.f32	s9, s10
 800e6e2:	bfb8      	it	lt
 800e6e4:	eef0 7a64 	vmovlt.f32	s15, s9
 800e6e8:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f0:	bf98      	it	ls
 800e6f2:	eeb0 5a64 	vmovls.f32	s10, s9
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e6fc:	d065      	beq.n	800e7ca <kalman_3gyro.constprop.0+0x2462>
 800e6fe:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800e702:	ed95 4a00 	vldr	s8, [r5]
 800e706:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800e70a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e70e:	ed95 3a00 	vldr	s6, [r5]
 800e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e716:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e71a:	bfb8      	it	lt
 800e71c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e724:	bf88      	it	hi
 800e726:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e72a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e72e:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800e732:	edd5 3a00 	vldr	s7, [r5]
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800e73e:	bfb8      	it	lt
 800e740:	eef0 7a43 	vmovlt.f32	s15, s6
 800e744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e748:	bf88      	it	hi
 800e74a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e74e:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e752:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800e756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800e75e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800e762:	edd5 4a00 	vldr	s9, [r5]
 800e766:	bfb8      	it	lt
 800e768:	eef0 7a63 	vmovlt.f32	s15, s7
 800e76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e770:	bf88      	it	hi
 800e772:	eeb0 5a63 	vmovhi.f32	s10, s7
 800e776:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e77a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e786:	bfb8      	it	lt
 800e788:	eef0 7a64 	vmovlt.f32	s15, s9
 800e78c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e794:	bf88      	it	hi
 800e796:	eeb0 5a64 	vmovhi.f32	s10, s9
 800e79a:	2b0a      	cmp	r3, #10
 800e79c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800e7a0:	d113      	bne.n	800e7ca <kalman_3gyro.constprop.0+0x2462>
 800e7a2:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800e7a6:	ed93 4a00 	vldr	s8, [r3]
 800e7aa:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b2:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e7b6:	bfb8      	it	lt
 800e7b8:	eef0 7a44 	vmovlt.f32	s15, s8
 800e7bc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c4:	bf88      	it	hi
 800e7c6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e7ca:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e7ce:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800e81c <kalman_3gyro.constprop.0+0x24b4>
 800e7d2:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e820 <kalman_3gyro.constprop.0+0x24b8>
 800e7d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7da:	ee64 4a85 	vmul.f32	s9, s9, s10
 800e7de:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e6:	dc25      	bgt.n	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e7e8:	eef0 7ae4 	vabs.f32	s15, s9
 800e7ec:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800e7f0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e824 <kalman_3gyro.constprop.0+0x24bc>
 800e7f4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fc:	dc1a      	bgt.n	800e834 <kalman_3gyro.constprop.0+0x24cc>
 800e7fe:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800e802:	2d00      	cmp	r5, #0
 800e804:	f000 80e0 	beq.w	800e9c8 <kalman_3gyro.constprop.0+0x2660>
 800e808:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	f002 8439 	beq.w	8011084 <kalman_3gyro.constprop.0+0x4d1c>
 800e812:	2201      	movs	r2, #1
 800e814:	462b      	mov	r3, r5
 800e816:	9201      	str	r2, [sp, #4]
 800e818:	e01c      	b.n	800e854 <kalman_3gyro.constprop.0+0x24ec>
 800e81a:	bf00      	nop
 800e81c:	3be56041 	.word	0x3be56041
 800e820:	3dcccccd 	.word	0x3dcccccd
 800e824:	3e333333 	.word	0x3e333333
 800e828:	3d088889 	.word	0x3d088889
 800e82c:	42480000 	.word	0x42480000
 800e830:	00000000 	.word	0x00000000
 800e834:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800e838:	2100      	movs	r1, #0
 800e83a:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800e83e:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 80c1 	beq.w	800e9ca <kalman_3gyro.constprop.0+0x2662>
 800e848:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800e84c:	2a01      	cmp	r2, #1
 800e84e:	f001 8615 	beq.w	801047c <kalman_3gyro.constprop.0+0x4114>
 800e852:	9101      	str	r1, [sp, #4]
 800e854:	2b02      	cmp	r3, #2
 800e856:	f041 87d2 	bne.w	80107fe <kalman_3gyro.constprop.0+0x4496>
 800e85a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e85e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800e862:	f240 1301 	movw	r3, #257	; 0x101
 800e866:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800e86a:	2301      	movs	r3, #1
 800e86c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800e870:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e874:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800e878:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800e87c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e880:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800e884:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800e888:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e88c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800e890:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800e894:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e898:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a0:	f2c2 809a 	blt.w	80109d8 <kalman_3gyro.constprop.0+0x4670>
 800e8a4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	f002 83db 	beq.w	8011064 <kalman_3gyro.constprop.0+0x4cfc>
 800e8ae:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800e8b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e8bc:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800e8c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8c4:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800e8c8:	f002 84da 	beq.w	8011280 <kalman_3gyro.constprop.0+0x4f18>
 800e8cc:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800e8d0:	f002 80d0 	beq.w	8010a74 <kalman_3gyro.constprop.0+0x470c>
 800e8d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f042 80d0 	bne.w	8010a7e <kalman_3gyro.constprop.0+0x4716>
 800e8de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8e0:	a830      	add	r0, sp, #192	; 0xc0
 800e8e2:	f04f 31ff 	mov.w	r1, #4294967295
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	edd2 7a00 	vldr	s15, [r2]
 800e8ec:	3101      	adds	r1, #1
 800e8ee:	330c      	adds	r3, #12
 800e8f0:	3204      	adds	r2, #4
 800e8f2:	461c      	mov	r4, r3
 800e8f4:	ed94 7a00 	vldr	s14, [r4]
 800e8f8:	330c      	adds	r3, #12
 800e8fa:	4598      	cmp	r8, r3
 800e8fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e900:	d1f7      	bne.n	800e8f2 <kalman_3gyro.constprop.0+0x258a>
 800e902:	2902      	cmp	r1, #2
 800e904:	ece0 7a01 	vstmia	r0!, {s15}
 800e908:	f108 0804 	add.w	r8, r8, #4
 800e90c:	d1eb      	bne.n	800e8e6 <kalman_3gyro.constprop.0+0x257e>
 800e90e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e828 <kalman_3gyro.constprop.0+0x24c0>
 800e912:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800e916:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800e91a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800e91e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800e920:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800e924:	ee24 4a27 	vmul.f32	s8, s8, s15
 800e928:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800e92c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e930:	460a      	mov	r2, r1
 800e932:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800e936:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800e93a:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800e93e:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800e942:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94a:	f103 030c 	add.w	r3, r3, #12
 800e94e:	bf88      	it	hi
 800e950:	eef0 7a47 	vmovhi.f32	s15, s14
 800e954:	4293      	cmp	r3, r2
 800e956:	d1f2      	bne.n	800e93e <kalman_3gyro.constprop.0+0x25d6>
 800e958:	1d1a      	adds	r2, r3, #4
 800e95a:	4290      	cmp	r0, r2
 800e95c:	ece4 7a01 	vstmia	r4!, {s15}
 800e960:	d1e9      	bne.n	800e936 <kalman_3gyro.constprop.0+0x25ce>
 800e962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e964:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800e968:	edd3 7a00 	vldr	s15, [r3]
 800e96c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800e970:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800e974:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e978:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800e97c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800e980:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800e984:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800e988:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800e98c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800e990:	b14b      	cbz	r3, 800e9a6 <kalman_3gyro.constprop.0+0x263e>
 800e992:	ed9d 7a03 	vldr	s14, [sp, #12]
 800e996:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e99a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	f102 8553 	bmi.w	801144c <kalman_3gyro.constprop.0+0x50e4>
 800e9a6:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800e9aa:	2a1e      	cmp	r2, #30
 800e9ac:	f002 84dd 	beq.w	801136a <kalman_3gyro.constprop.0+0x5002>
 800e9b0:	1c53      	adds	r3, r2, #1
 800e9b2:	2aff      	cmp	r2, #255	; 0xff
 800e9b4:	bf14      	ite	ne
 800e9b6:	b2db      	uxtbne	r3, r3
 800e9b8:	23ff      	moveq	r3, #255	; 0xff
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800e9c0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	e012      	b.n	800e9ee <kalman_3gyro.constprop.0+0x2686>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800e9ce:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800e9d2:	9181      	str	r1, [sp, #516]	; 0x204
 800e9d4:	9282      	str	r2, [sp, #520]	; 0x208
 800e9d6:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800e9da:	9183      	str	r1, [sp, #524]	; 0x20c
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800e9e2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800e9e6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800e9ea:	f88b 2001 	strb.w	r2, [fp, #1]
 800e9ee:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800e82c <kalman_3gyro.constprop.0+0x24c4>
 800e9f2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800e9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fa:	f2c0 875f 	blt.w	800f8bc <kalman_3gyro.constprop.0+0x3554>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800ea04:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800ea08:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d125      	bne.n	800ea5c <kalman_3gyro.constprop.0+0x26f4>
 800ea10:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800ea14:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800ea18:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800ea1c:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800ea20:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ea24:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800ea28:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800ea2c:	ee25 5a24 	vmul.f32	s10, s10, s9
 800ea30:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ea34:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ea38:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ea3c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ea40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ea44:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800ea48:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800ea4c:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800ea50:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800ea54:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800ea58:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800ea5c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ea60:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800ea64:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800ea68:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800ea6c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800ea70:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800ea74:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800ea78:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800ea7c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800ea80:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800ea84:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800ea88:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800ea8c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800ea90:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800ea94:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800ea98:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800ea9c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800eaa0:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800eaa4:	eee7 3a07 	vfma.f32	s7, s14, s14
 800eaa8:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800eaac:	9301      	str	r3, [sp, #4]
 800eaae:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800eab2:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800eab6:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800eaba:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800eabe:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800eac2:	eea8 3a08 	vfma.f32	s6, s16, s16
 800eac6:	2500      	movs	r5, #0
 800eac8:	eea0 4a00 	vfma.f32	s8, s0, s0
 800eacc:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800ead0:	eea1 5a01 	vfma.f32	s10, s2, s2
 800ead4:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800ead8:	eea2 6a02 	vfma.f32	s12, s4, s4
 800eadc:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800eae0:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800eae4:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800eae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eaec:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800eaf0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800eaf4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800eaf8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800eafc:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800eb00:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800eb04:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800eb08:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800eb0c:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800eb10:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800eb14:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800eb18:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800eb1c:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800eb20:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800eb24:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800eb28:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800eb2c:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800eb30:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800eb34:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800e830 <kalman_3gyro.constprop.0+0x24c8>
 800eb38:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800eb3c:	ee24 4a04 	vmul.f32	s8, s8, s8
 800eb40:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800eb44:	ee25 5a05 	vmul.f32	s10, s10, s10
 800eb48:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800eb4c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800eb50:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800eb54:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eb58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb5c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800eb60:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800eb64:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800eb68:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800eb6c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800eb70:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800eb74:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800eb78:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800eb7c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800eb80:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800eb84:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800eb88:	e005      	b.n	800eb96 <kalman_3gyro.constprop.0+0x282e>
 800eb8a:	3501      	adds	r5, #1
 800eb8c:	2d0c      	cmp	r5, #12
 800eb8e:	f104 0404 	add.w	r4, r4, #4
 800eb92:	f000 84fe 	beq.w	800f592 <kalman_3gyro.constprop.0+0x322a>
 800eb96:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d0f5      	beq.n	800eb8a <kalman_3gyro.constprop.0+0x2822>
 800eb9e:	edd4 da00 	vldr	s27, [r4]
 800eba2:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800eba6:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800ebaa:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800ebae:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800ebb2:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800ebb6:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800ebba:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800ebbe:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800ebc2:	9b01      	ldr	r3, [sp, #4]
 800ebc4:	ed89 8a00 	vstr	s16, [r9]
 800ebc8:	ed89 8a01 	vstr	s16, [r9, #4]
 800ebcc:	ed89 8a02 	vstr	s16, [r9, #8]
 800ebd0:	ed89 8a03 	vstr	s16, [r9, #12]
 800ebd4:	ed89 8a04 	vstr	s16, [r9, #16]
 800ebd8:	ed89 8a05 	vstr	s16, [r9, #20]
 800ebdc:	ed89 8a06 	vstr	s16, [r9, #24]
 800ebe0:	ed89 8a07 	vstr	s16, [r9, #28]
 800ebe4:	ed89 8a08 	vstr	s16, [r9, #32]
 800ebe8:	464e      	mov	r6, r9
 800ebea:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800ebee:	464a      	mov	r2, r9
 800ebf0:	ecb3 7a01 	vldmia	r3!, {s14}
 800ebf4:	ecf2 7a01 	vldmia	r2!, {s15}
 800ebf8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ebfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec00:	d006      	beq.n	800ec10 <kalman_3gyro.constprop.0+0x28a8>
 800ec02:	eef5 da40 	vcmp.f32	s27, #0.0
 800ec06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0a:	bf18      	it	ne
 800ec0c:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800ec10:	ed93 7a08 	vldr	s14, [r3, #32]
 800ec14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1c:	d006      	beq.n	800ec2c <kalman_3gyro.constprop.0+0x28c4>
 800ec1e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	bf18      	it	ne
 800ec28:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800ec2c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ec30:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec38:	d006      	beq.n	800ec48 <kalman_3gyro.constprop.0+0x28e0>
 800ec3a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ec3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec42:	bf18      	it	ne
 800ec44:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800ec48:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800ec4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec54:	d006      	beq.n	800ec64 <kalman_3gyro.constprop.0+0x28fc>
 800ec56:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	bf18      	it	ne
 800ec60:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800ec64:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800ec68:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec70:	d006      	beq.n	800ec80 <kalman_3gyro.constprop.0+0x2918>
 800ec72:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ec76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7a:	bf18      	it	ne
 800ec7c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800ec80:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800ec84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8c:	d006      	beq.n	800ec9c <kalman_3gyro.constprop.0+0x2934>
 800ec8e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec96:	bf18      	it	ne
 800ec98:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800ec9c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800eca0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	d006      	beq.n	800ecb8 <kalman_3gyro.constprop.0+0x2950>
 800ecaa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	bf18      	it	ne
 800ecb4:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800ecb8:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800ecbc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	d006      	beq.n	800ecd4 <kalman_3gyro.constprop.0+0x296c>
 800ecc6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ecca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecce:	bf18      	it	ne
 800ecd0:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800ecd4:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800ecd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	d006      	beq.n	800ecf0 <kalman_3gyro.constprop.0+0x2988>
 800ece2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ece6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecea:	bf18      	it	ne
 800ecec:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800ecf0:	428b      	cmp	r3, r1
 800ecf2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ecf6:	f47f af7b 	bne.w	800ebf0 <kalman_3gyro.constprop.0+0x2888>
 800ecfa:	eef5 da40 	vcmp.f32	s27, #0.0
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	edd9 8a00 	vldr	s17, [r9]
 800ed06:	f040 8543 	bne.w	800f790 <kalman_3gyro.constprop.0+0x3428>
 800ed0a:	eef0 7a6d 	vmov.f32	s15, s27
 800ed0e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ed12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed16:	ed99 9a01 	vldr	s18, [r9, #4]
 800ed1a:	d006      	beq.n	800ed2a <kalman_3gyro.constprop.0+0x29c2>
 800ed1c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ed20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed24:	bf18      	it	ne
 800ed26:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800ed2a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	edd9 aa02 	vldr	s21, [r9, #8]
 800ed36:	d006      	beq.n	800ed46 <kalman_3gyro.constprop.0+0x29de>
 800ed38:	eef5 aa40 	vcmp.f32	s21, #0.0
 800ed3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed40:	bf18      	it	ne
 800ed42:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800ed46:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ed4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4e:	edd9 ba03 	vldr	s23, [r9, #12]
 800ed52:	d006      	beq.n	800ed62 <kalman_3gyro.constprop.0+0x29fa>
 800ed54:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ed58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5c:	bf18      	it	ne
 800ed5e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800ed62:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ed66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6a:	edd9 ca04 	vldr	s25, [r9, #16]
 800ed6e:	d006      	beq.n	800ed7e <kalman_3gyro.constprop.0+0x2a16>
 800ed70:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ed74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed78:	bf18      	it	ne
 800ed7a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800ed7e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	ed99 ca05 	vldr	s24, [r9, #20]
 800ed8a:	d006      	beq.n	800ed9a <kalman_3gyro.constprop.0+0x2a32>
 800ed8c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ed90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed94:	bf18      	it	ne
 800ed96:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800ed9a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ed9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda2:	ed99 da06 	vldr	s26, [r9, #24]
 800eda6:	d006      	beq.n	800edb6 <kalman_3gyro.constprop.0+0x2a4e>
 800eda8:	eeb5 da40 	vcmp.f32	s26, #0.0
 800edac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb0:	bf18      	it	ne
 800edb2:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800edb6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800edba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbe:	ed99 aa07 	vldr	s20, [r9, #28]
 800edc2:	d006      	beq.n	800edd2 <kalman_3gyro.constprop.0+0x2a6a>
 800edc4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800edc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edcc:	bf18      	it	ne
 800edce:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800edd2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	ed99 ba08 	vldr	s22, [r9, #32]
 800edde:	d006      	beq.n	800edee <kalman_3gyro.constprop.0+0x2a86>
 800ede0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ede4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede8:	bf18      	it	ne
 800edea:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800edee:	ab87      	add	r3, sp, #540	; 0x21c
 800edf0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800edf4:	ed92 7a00 	vldr	s14, [r2]
 800edf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edfc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ee00:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800ee04:	2d05      	cmp	r5, #5
 800ee06:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800ee0a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ee0e:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ee12:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800ee16:	ee6b baa7 	vmul.f32	s23, s23, s15
 800ee1a:	ee6c caa7 	vmul.f32	s25, s25, s15
 800ee1e:	ee2c ca27 	vmul.f32	s24, s24, s15
 800ee22:	ee2d da27 	vmul.f32	s26, s26, s15
 800ee26:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ee2a:	ee2b ba27 	vmul.f32	s22, s22, s15
 800ee2e:	edc9 8a00 	vstr	s17, [r9]
 800ee32:	ed89 9a01 	vstr	s18, [r9, #4]
 800ee36:	edc9 aa02 	vstr	s21, [r9, #8]
 800ee3a:	edc9 ba03 	vstr	s23, [r9, #12]
 800ee3e:	edc9 ca04 	vstr	s25, [r9, #16]
 800ee42:	ed89 ca05 	vstr	s24, [r9, #20]
 800ee46:	ed89 da06 	vstr	s26, [r9, #24]
 800ee4a:	ed89 aa07 	vstr	s20, [r9, #28]
 800ee4e:	ed89 ba08 	vstr	s22, [r9, #32]
 800ee52:	f340 8497 	ble.w	800f784 <kalman_3gyro.constprop.0+0x341c>
 800ee56:	eef5 da40 	vcmp.f32	s27, #0.0
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	f000 8510 	beq.w	800f882 <kalman_3gyro.constprop.0+0x351a>
 800ee62:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800ee66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	d001      	beq.n	800ee74 <kalman_3gyro.constprop.0+0x2b0c>
 800ee70:	ee67 7aad 	vmul.f32	s15, s15, s27
 800ee74:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ee78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7c:	d008      	beq.n	800ee90 <kalman_3gyro.constprop.0+0x2b28>
 800ee7e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800ee82:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8a:	bf18      	it	ne
 800ee8c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800ee90:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ee94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee98:	d008      	beq.n	800eeac <kalman_3gyro.constprop.0+0x2b44>
 800ee9a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800ee9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea6:	bf18      	it	ne
 800eea8:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800eeac:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800eeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb4:	d008      	beq.n	800eec8 <kalman_3gyro.constprop.0+0x2b60>
 800eeb6:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800eeba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec2:	bf18      	it	ne
 800eec4:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800eec8:	eef5 fa40 	vcmp.f32	s31, #0.0
 800eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed0:	d008      	beq.n	800eee4 <kalman_3gyro.constprop.0+0x2b7c>
 800eed2:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800eed6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	bf18      	it	ne
 800eee0:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800eee4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeec:	d008      	beq.n	800ef00 <kalman_3gyro.constprop.0+0x2b98>
 800eeee:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800eef2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefa:	bf18      	it	ne
 800eefc:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800ef00:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	d008      	beq.n	800ef1c <kalman_3gyro.constprop.0+0x2bb4>
 800ef0a:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800ef0e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef16:	bf18      	it	ne
 800ef18:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800ef1c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef24:	d008      	beq.n	800ef38 <kalman_3gyro.constprop.0+0x2bd0>
 800ef26:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800ef2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	bf18      	it	ne
 800ef34:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800ef38:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ef3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef40:	d008      	beq.n	800ef54 <kalman_3gyro.constprop.0+0x2bec>
 800ef42:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800ef46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4e:	bf18      	it	ne
 800ef50:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800ef54:	aa7b      	add	r2, sp, #492	; 0x1ec
 800ef56:	4413      	add	r3, r2
 800ef58:	edd3 9a00 	vldr	s19, [r3]
 800ef5c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800ef60:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ef64:	2100      	movs	r1, #0
 800ef66:	4650      	mov	r0, sl
 800ef68:	ed8d 5a05 	vstr	s10, [sp, #20]
 800ef6c:	edcd 5a04 	vstr	s11, [sp, #16]
 800ef70:	ed8d 6a03 	vstr	s12, [sp, #12]
 800ef74:	edcd 6a02 	vstr	s13, [sp, #8]
 800ef78:	f007 ff76 	bl	8016e68 <memset>
 800ef7c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800ef80:	eddd 5a04 	vldr	s11, [sp, #16]
 800ef84:	ed9d 6a03 	vldr	s12, [sp, #12]
 800ef88:	eddd 6a02 	vldr	s13, [sp, #8]
 800ef8c:	4651      	mov	r1, sl
 800ef8e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800ef92:	4653      	mov	r3, sl
 800ef94:	ecf6 7a01 	vldmia	r6!, {s15}
 800ef98:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	d062      	beq.n	800f068 <kalman_3gyro.constprop.0+0x2d00>
 800efa2:	eef5 da40 	vcmp.f32	s27, #0.0
 800efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efaa:	d005      	beq.n	800efb8 <kalman_3gyro.constprop.0+0x2c50>
 800efac:	ed93 7a00 	vldr	s14, [r3]
 800efb0:	eead 7aa7 	vfma.f32	s14, s27, s15
 800efb4:	ed83 7a00 	vstr	s14, [r3]
 800efb8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc0:	d005      	beq.n	800efce <kalman_3gyro.constprop.0+0x2c66>
 800efc2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800efc6:	eeae 7a27 	vfma.f32	s14, s28, s15
 800efca:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800efce:	eef5 ea40 	vcmp.f32	s29, #0.0
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	d005      	beq.n	800efe4 <kalman_3gyro.constprop.0+0x2c7c>
 800efd8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800efdc:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800efe0:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800efe4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800efe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efec:	d005      	beq.n	800effa <kalman_3gyro.constprop.0+0x2c92>
 800efee:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800eff2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800eff6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800effa:	eef5 fa40 	vcmp.f32	s31, #0.0
 800effe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f002:	d005      	beq.n	800f010 <kalman_3gyro.constprop.0+0x2ca8>
 800f004:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f008:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f00c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f010:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f018:	d005      	beq.n	800f026 <kalman_3gyro.constprop.0+0x2cbe>
 800f01a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f01e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f022:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f026:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02e:	d005      	beq.n	800f03c <kalman_3gyro.constprop.0+0x2cd4>
 800f030:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f034:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f038:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f03c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f044:	d005      	beq.n	800f052 <kalman_3gyro.constprop.0+0x2cea>
 800f046:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f04a:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f04e:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f052:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05a:	d005      	beq.n	800f068 <kalman_3gyro.constprop.0+0x2d00>
 800f05c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f060:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f064:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f068:	4296      	cmp	r6, r2
 800f06a:	f103 0304 	add.w	r3, r3, #4
 800f06e:	d191      	bne.n	800ef94 <kalman_3gyro.constprop.0+0x2c2c>
 800f070:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f074:	4656      	mov	r6, sl
 800f076:	463b      	mov	r3, r7
 800f078:	2208      	movs	r2, #8
 800f07a:	2000      	movs	r0, #0
 800f07c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f080:	e074      	b.n	800f16c <kalman_3gyro.constprop.0+0x2e04>
 800f082:	edd6 7a00 	vldr	s15, [r6]
 800f086:	ed83 8a01 	vstr	s16, [r3, #4]
 800f08a:	eef1 7a67 	vneg.f32	s15, s15
 800f08e:	2801      	cmp	r0, #1
 800f090:	edc6 7a00 	vstr	s15, [r6]
 800f094:	f1a2 0c07 	sub.w	ip, r2, #7
 800f098:	f000 831e 	beq.w	800f6d8 <kalman_3gyro.constprop.0+0x3370>
 800f09c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f0a0:	eddc 7a00 	vldr	s15, [ip]
 800f0a4:	ed83 8a02 	vstr	s16, [r3, #8]
 800f0a8:	eef1 7a67 	vneg.f32	s15, s15
 800f0ac:	2802      	cmp	r0, #2
 800f0ae:	edcc 7a00 	vstr	s15, [ip]
 800f0b2:	f1a2 0c06 	sub.w	ip, r2, #6
 800f0b6:	f000 82f8 	beq.w	800f6aa <kalman_3gyro.constprop.0+0x3342>
 800f0ba:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f0be:	eddc 7a00 	vldr	s15, [ip]
 800f0c2:	ed83 8a03 	vstr	s16, [r3, #12]
 800f0c6:	eef1 7a67 	vneg.f32	s15, s15
 800f0ca:	2803      	cmp	r0, #3
 800f0cc:	edcc 7a00 	vstr	s15, [ip]
 800f0d0:	f1a2 0c05 	sub.w	ip, r2, #5
 800f0d4:	d170      	bne.n	800f1b8 <kalman_3gyro.constprop.0+0x2e50>
 800f0d6:	edd6 7a03 	vldr	s15, [r6, #12]
 800f0da:	ed83 8a04 	vstr	s16, [r3, #16]
 800f0de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0e2:	f1a2 0e04 	sub.w	lr, r2, #4
 800f0e6:	edc6 7a03 	vstr	s15, [r6, #12]
 800f0ea:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f0ee:	edde 7a00 	vldr	s15, [lr]
 800f0f2:	ed83 8a05 	vstr	s16, [r3, #20]
 800f0f6:	eef1 7a67 	vneg.f32	s15, s15
 800f0fa:	f1a2 0c03 	sub.w	ip, r2, #3
 800f0fe:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f102:	edce 7a00 	vstr	s15, [lr]
 800f106:	eddc 7a00 	vldr	s15, [ip]
 800f10a:	ed83 8a06 	vstr	s16, [r3, #24]
 800f10e:	eef1 7a67 	vneg.f32	s15, s15
 800f112:	edcc 7a00 	vstr	s15, [ip]
 800f116:	f1a2 0c02 	sub.w	ip, r2, #2
 800f11a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f11e:	eddc 7a00 	vldr	s15, [ip]
 800f122:	ed83 8a07 	vstr	s16, [r3, #28]
 800f126:	eef1 7a67 	vneg.f32	s15, s15
 800f12a:	2807      	cmp	r0, #7
 800f12c:	edcc 7a00 	vstr	s15, [ip]
 800f130:	f102 3cff 	add.w	ip, r2, #4294967295
 800f134:	f040 80a2 	bne.w	800f27c <kalman_3gyro.constprop.0+0x2f14>
 800f138:	edd6 7a07 	vldr	s15, [r6, #28]
 800f13c:	ed83 8a08 	vstr	s16, [r3, #32]
 800f140:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f144:	edc6 7a07 	vstr	s15, [r6, #28]
 800f148:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f14c:	eddc 7a00 	vldr	s15, [ip]
 800f150:	3001      	adds	r0, #1
 800f152:	eef1 7a67 	vneg.f32	s15, s15
 800f156:	2809      	cmp	r0, #9
 800f158:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f15c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f160:	f102 0209 	add.w	r2, r2, #9
 800f164:	edcc 7a00 	vstr	s15, [ip]
 800f168:	f000 809f 	beq.w	800f2aa <kalman_3gyro.constprop.0+0x2f42>
 800f16c:	ed83 8a00 	vstr	s16, [r3]
 800f170:	2800      	cmp	r0, #0
 800f172:	d186      	bne.n	800f082 <kalman_3gyro.constprop.0+0x2d1a>
 800f174:	edda 7a00 	vldr	s15, [sl]
 800f178:	ed83 8a01 	vstr	s16, [r3, #4]
 800f17c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f180:	f1a2 0e07 	sub.w	lr, r2, #7
 800f184:	edc6 7a00 	vstr	s15, [r6]
 800f188:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f18c:	edde 7a00 	vldr	s15, [lr]
 800f190:	ed83 8a02 	vstr	s16, [r3, #8]
 800f194:	eef1 7a67 	vneg.f32	s15, s15
 800f198:	f1a2 0c06 	sub.w	ip, r2, #6
 800f19c:	edce 7a00 	vstr	s15, [lr]
 800f1a0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1a4:	eddc 7a00 	vldr	s15, [ip]
 800f1a8:	ed83 8a03 	vstr	s16, [r3, #12]
 800f1ac:	eef1 7a67 	vneg.f32	s15, s15
 800f1b0:	edcc 7a00 	vstr	s15, [ip]
 800f1b4:	f1a2 0c05 	sub.w	ip, r2, #5
 800f1b8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1bc:	eddc 7a00 	vldr	s15, [ip]
 800f1c0:	ed83 8a04 	vstr	s16, [r3, #16]
 800f1c4:	eef1 7a67 	vneg.f32	s15, s15
 800f1c8:	2804      	cmp	r0, #4
 800f1ca:	edcc 7a00 	vstr	s15, [ip]
 800f1ce:	f1a2 0c04 	sub.w	ip, r2, #4
 800f1d2:	d031      	beq.n	800f238 <kalman_3gyro.constprop.0+0x2ed0>
 800f1d4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1d8:	eddc 7a00 	vldr	s15, [ip]
 800f1dc:	ed83 8a05 	vstr	s16, [r3, #20]
 800f1e0:	eef1 7a67 	vneg.f32	s15, s15
 800f1e4:	2805      	cmp	r0, #5
 800f1e6:	edcc 7a00 	vstr	s15, [ip]
 800f1ea:	f1a2 0c03 	sub.w	ip, r2, #3
 800f1ee:	f000 8245 	beq.w	800f67c <kalman_3gyro.constprop.0+0x3314>
 800f1f2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1f6:	eddc 7a00 	vldr	s15, [ip]
 800f1fa:	ed83 8a06 	vstr	s16, [r3, #24]
 800f1fe:	eef1 7a67 	vneg.f32	s15, s15
 800f202:	2806      	cmp	r0, #6
 800f204:	edcc 7a00 	vstr	s15, [ip]
 800f208:	f1a2 0c02 	sub.w	ip, r2, #2
 800f20c:	d185      	bne.n	800f11a <kalman_3gyro.constprop.0+0x2db2>
 800f20e:	edd6 7a06 	vldr	s15, [r6, #24]
 800f212:	ed83 8a07 	vstr	s16, [r3, #28]
 800f216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f21a:	f102 3cff 	add.w	ip, r2, #4294967295
 800f21e:	edc6 7a06 	vstr	s15, [r6, #24]
 800f222:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f226:	eddc 7a00 	vldr	s15, [ip]
 800f22a:	ed83 8a08 	vstr	s16, [r3, #32]
 800f22e:	eef1 7a67 	vneg.f32	s15, s15
 800f232:	edcc 7a00 	vstr	s15, [ip]
 800f236:	e787      	b.n	800f148 <kalman_3gyro.constprop.0+0x2de0>
 800f238:	edd6 7a04 	vldr	s15, [r6, #16]
 800f23c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f240:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f244:	f1a2 0e03 	sub.w	lr, r2, #3
 800f248:	edc6 7a04 	vstr	s15, [r6, #16]
 800f24c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f250:	edde 7a00 	vldr	s15, [lr]
 800f254:	ed83 8a06 	vstr	s16, [r3, #24]
 800f258:	eef1 7a67 	vneg.f32	s15, s15
 800f25c:	f1a2 0c02 	sub.w	ip, r2, #2
 800f260:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f264:	edce 7a00 	vstr	s15, [lr]
 800f268:	eddc 7a00 	vldr	s15, [ip]
 800f26c:	ed83 8a07 	vstr	s16, [r3, #28]
 800f270:	eef1 7a67 	vneg.f32	s15, s15
 800f274:	edcc 7a00 	vstr	s15, [ip]
 800f278:	f102 3cff 	add.w	ip, r2, #4294967295
 800f27c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f280:	eddc 7a00 	vldr	s15, [ip]
 800f284:	ed83 8a08 	vstr	s16, [r3, #32]
 800f288:	eef1 7a67 	vneg.f32	s15, s15
 800f28c:	2808      	cmp	r0, #8
 800f28e:	edcc 7a00 	vstr	s15, [ip]
 800f292:	f47f af59 	bne.w	800f148 <kalman_3gyro.constprop.0+0x2de0>
 800f296:	ed96 7a08 	vldr	s14, [r6, #32]
 800f29a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f29e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2a2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f2a6:	edc2 7a00 	vstr	s15, [r2]
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800f2b0:	ecb1 3a01 	vldmia	r1!, {s6}
 800f2b4:	edd1 3a08 	vldr	s7, [r1, #32]
 800f2b8:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800f2bc:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800f2c0:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800f2c4:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800f2c8:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800f2cc:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800f2d0:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800f2d4:	465a      	mov	r2, fp
 800f2d6:	463b      	mov	r3, r7
 800f2d8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	d00c      	beq.n	800f2fc <kalman_3gyro.constprop.0+0x2f94>
 800f2e2:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800f2e6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	d005      	beq.n	800f2fc <kalman_3gyro.constprop.0+0x2f94>
 800f2f0:	edd3 7a00 	vldr	s15, [r3]
 800f2f4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800f2f8:	edc3 7a00 	vstr	s15, [r3]
 800f2fc:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f304:	d00c      	beq.n	800f320 <kalman_3gyro.constprop.0+0x2fb8>
 800f306:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800f30a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	d005      	beq.n	800f320 <kalman_3gyro.constprop.0+0x2fb8>
 800f314:	edd3 7a00 	vldr	s15, [r3]
 800f318:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800f31c:	edc3 7a00 	vstr	s15, [r3]
 800f320:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f328:	d00c      	beq.n	800f344 <kalman_3gyro.constprop.0+0x2fdc>
 800f32a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800f32e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f336:	d005      	beq.n	800f344 <kalman_3gyro.constprop.0+0x2fdc>
 800f338:	edd3 7a00 	vldr	s15, [r3]
 800f33c:	eee4 7a22 	vfma.f32	s15, s8, s5
 800f340:	edc3 7a00 	vstr	s15, [r3]
 800f344:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34c:	d00c      	beq.n	800f368 <kalman_3gyro.constprop.0+0x3000>
 800f34e:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800f352:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35a:	d005      	beq.n	800f368 <kalman_3gyro.constprop.0+0x3000>
 800f35c:	edd3 7a00 	vldr	s15, [r3]
 800f360:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f364:	edc3 7a00 	vstr	s15, [r3]
 800f368:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f370:	d00c      	beq.n	800f38c <kalman_3gyro.constprop.0+0x3024>
 800f372:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800f376:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37e:	d005      	beq.n	800f38c <kalman_3gyro.constprop.0+0x3024>
 800f380:	edd3 7a00 	vldr	s15, [r3]
 800f384:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f388:	edc3 7a00 	vstr	s15, [r3]
 800f38c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f394:	d00c      	beq.n	800f3b0 <kalman_3gyro.constprop.0+0x3048>
 800f396:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800f39a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a2:	d005      	beq.n	800f3b0 <kalman_3gyro.constprop.0+0x3048>
 800f3a4:	edd3 7a00 	vldr	s15, [r3]
 800f3a8:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800f3ac:	edc3 7a00 	vstr	s15, [r3]
 800f3b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	d00c      	beq.n	800f3d4 <kalman_3gyro.constprop.0+0x306c>
 800f3ba:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800f3be:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c6:	d005      	beq.n	800f3d4 <kalman_3gyro.constprop.0+0x306c>
 800f3c8:	edd3 7a00 	vldr	s15, [r3]
 800f3cc:	eee6 7a22 	vfma.f32	s15, s12, s5
 800f3d0:	edc3 7a00 	vstr	s15, [r3]
 800f3d4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3dc:	d00c      	beq.n	800f3f8 <kalman_3gyro.constprop.0+0x3090>
 800f3de:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800f3e2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	d005      	beq.n	800f3f8 <kalman_3gyro.constprop.0+0x3090>
 800f3ec:	edd3 7a00 	vldr	s15, [r3]
 800f3f0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800f3f4:	edc3 7a00 	vstr	s15, [r3]
 800f3f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f400:	d00c      	beq.n	800f41c <kalman_3gyro.constprop.0+0x30b4>
 800f402:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800f406:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f40e:	d005      	beq.n	800f41c <kalman_3gyro.constprop.0+0x30b4>
 800f410:	edd3 7a00 	vldr	s15, [r3]
 800f414:	eee7 7a22 	vfma.f32	s15, s14, s5
 800f418:	edc3 7a00 	vstr	s15, [r3]
 800f41c:	3224      	adds	r2, #36	; 0x24
 800f41e:	4296      	cmp	r6, r2
 800f420:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f424:	f47f af58 	bne.w	800f2d8 <kalman_3gyro.constprop.0+0x2f70>
 800f428:	3001      	adds	r0, #1
 800f42a:	2809      	cmp	r0, #9
 800f42c:	f107 0704 	add.w	r7, r7, #4
 800f430:	f47f af3e 	bne.w	800f2b0 <kalman_3gyro.constprop.0+0x2f48>
 800f434:	9801      	ldr	r0, [sp, #4]
 800f436:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f43a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800f43e:	f007 fd05 	bl	8016e4c <memcpy>
 800f442:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44a:	f000 817c 	beq.w	800f746 <kalman_3gyro.constprop.0+0x33de>
 800f44e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	f000 8176 	beq.w	800f746 <kalman_3gyro.constprop.0+0x33de>
 800f45a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f462:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f466:	f040 8212 	bne.w	800f88e <kalman_3gyro.constprop.0+0x3526>
 800f46a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	f000 8177 	beq.w	800f764 <kalman_3gyro.constprop.0+0x33fc>
 800f476:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f482:	f040 81cb 	bne.w	800f81c <kalman_3gyro.constprop.0+0x34b4>
 800f486:	eef0 ba47 	vmov.f32	s23, s14
 800f48a:	eef0 aa49 	vmov.f32	s21, s18
 800f48e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f496:	f000 8138 	beq.w	800f70a <kalman_3gyro.constprop.0+0x33a2>
 800f49a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a2:	f000 824e 	beq.w	800f942 <kalman_3gyro.constprop.0+0x35da>
 800f4a6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f4b2:	eef0 7a48 	vmov.f32	s15, s16
 800f4b6:	f040 81c5 	bne.w	800f844 <kalman_3gyro.constprop.0+0x34dc>
 800f4ba:	eeb0 ca47 	vmov.f32	s24, s14
 800f4be:	eef0 ca67 	vmov.f32	s25, s15
 800f4c2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	f000 8179 	beq.w	800f7c0 <kalman_3gyro.constprop.0+0x3458>
 800f4ce:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d6:	f000 8125 	beq.w	800f724 <kalman_3gyro.constprop.0+0x33bc>
 800f4da:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800f4e6:	eef0 7a48 	vmov.f32	s15, s16
 800f4ea:	f040 81be 	bne.w	800f86a <kalman_3gyro.constprop.0+0x3502>
 800f4ee:	eeb0 aa47 	vmov.f32	s20, s14
 800f4f2:	eeb0 da67 	vmov.f32	s26, s15
 800f4f6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	f000 811f 	beq.w	800f740 <kalman_3gyro.constprop.0+0x33d8>
 800f502:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50a:	f000 821d 	beq.w	800f948 <kalman_3gyro.constprop.0+0x35e0>
 800f50e:	eef0 7a48 	vmov.f32	s15, s16
 800f512:	ee2b ba29 	vmul.f32	s22, s22, s19
 800f516:	eef0 9a67 	vmov.f32	s19, s15
 800f51a:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800f51e:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800f522:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800f526:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800f52a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800f52e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800f532:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800f536:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f53a:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800f53e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800f542:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800f546:	ee74 baab 	vadd.f32	s23, s9, s23
 800f54a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800f54e:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800f552:	ee36 da0d 	vadd.f32	s26, s12, s26
 800f556:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800f55a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800f55e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800f562:	3501      	adds	r5, #1
 800f564:	2d0c      	cmp	r5, #12
 800f566:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800f56a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800f56e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800f572:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800f576:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800f57a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800f57e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800f582:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800f586:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800f58a:	f104 0404 	add.w	r4, r4, #4
 800f58e:	f47f ab02 	bne.w	800eb96 <kalman_3gyro.constprop.0+0x282e>
 800f592:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800f596:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800f59a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f59e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800f5a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f5a6:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f5aa:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f5ae:	eef4 7ae5 	vcmpe.f32	s15, s11
 800f5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b6:	f100 81b5 	bmi.w	800f924 <kalman_3gyro.constprop.0+0x35bc>
 800f5ba:	eef1 4ae7 	vsqrt.f32	s9, s15
 800f5be:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 800f950 <kalman_3gyro.constprop.0+0x35e8>
 800f5c2:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800f5c6:	ee67 4a86 	vmul.f32	s9, s15, s12
 800f5ca:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800f5ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5d2:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800f5d6:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800f5da:	aa36      	add	r2, sp, #216	; 0xd8
 800f5dc:	edc3 4a00 	vstr	s9, [r3]
 800f5e0:	edc3 5a01 	vstr	s11, [r3, #4]
 800f5e4:	edc3 7a02 	vstr	s15, [r3, #8]
 800f5e8:	ed83 5a03 	vstr	s10, [r3, #12]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800f5f4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800f5f8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800f5fc:	f7fb fdbc 	bl	800b178 <qmult>
 800f600:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800f604:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800f608:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800f60c:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800f610:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800f614:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f616:	ee66 7a06 	vmul.f32	s15, s12, s12
 800f61a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f61e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f622:	ae54      	add	r6, sp, #336	; 0x150
 800f624:	af5c      	add	r7, sp, #368	; 0x170
 800f626:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800f62a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f62e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800f632:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800f636:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f63a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f63e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f642:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f646:	edc3 5a00 	vstr	s11, [r3]
 800f64a:	ed83 6a01 	vstr	s12, [r3, #4]
 800f64e:	edc3 6a02 	vstr	s13, [r3, #8]
 800f652:	ed83 7a03 	vstr	s14, [r3, #12]
 800f656:	4634      	mov	r4, r6
 800f658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f65a:	42bc      	cmp	r4, r7
 800f65c:	6028      	str	r0, [r5, #0]
 800f65e:	6069      	str	r1, [r5, #4]
 800f660:	60aa      	str	r2, [r5, #8]
 800f662:	60eb      	str	r3, [r5, #12]
 800f664:	4626      	mov	r6, r4
 800f666:	f105 0510 	add.w	r5, r5, #16
 800f66a:	d1f4      	bne.n	800f656 <kalman_3gyro.constprop.0+0x32ee>
 800f66c:	6820      	ldr	r0, [r4, #0]
 800f66e:	6028      	str	r0, [r5, #0]
 800f670:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800f674:	ecbd 8b10 	vpop	{d8-d15}
 800f678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67c:	edd6 7a05 	vldr	s15, [r6, #20]
 800f680:	ed83 8a06 	vstr	s16, [r3, #24]
 800f684:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f688:	f1a2 0e02 	sub.w	lr, r2, #2
 800f68c:	edc6 7a05 	vstr	s15, [r6, #20]
 800f690:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f694:	edde 7a00 	vldr	s15, [lr]
 800f698:	ed83 8a07 	vstr	s16, [r3, #28]
 800f69c:	eef1 7a67 	vneg.f32	s15, s15
 800f6a0:	f102 3cff 	add.w	ip, r2, #4294967295
 800f6a4:	edce 7a00 	vstr	s15, [lr]
 800f6a8:	e5bb      	b.n	800f222 <kalman_3gyro.constprop.0+0x2eba>
 800f6aa:	edd6 7a02 	vldr	s15, [r6, #8]
 800f6ae:	ed83 8a03 	vstr	s16, [r3, #12]
 800f6b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6b6:	f1a2 0c05 	sub.w	ip, r2, #5
 800f6ba:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f6be:	edc6 7a02 	vstr	s15, [r6, #8]
 800f6c2:	eddc 7a00 	vldr	s15, [ip]
 800f6c6:	ed83 8a04 	vstr	s16, [r3, #16]
 800f6ca:	eef1 7a67 	vneg.f32	s15, s15
 800f6ce:	edcc 7a00 	vstr	s15, [ip]
 800f6d2:	f1a2 0c04 	sub.w	ip, r2, #4
 800f6d6:	e57d      	b.n	800f1d4 <kalman_3gyro.constprop.0+0x2e6c>
 800f6d8:	edd6 7a01 	vldr	s15, [r6, #4]
 800f6dc:	ed83 8a02 	vstr	s16, [r3, #8]
 800f6e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6e4:	f1a2 0c06 	sub.w	ip, r2, #6
 800f6e8:	edc6 7a01 	vstr	s15, [r6, #4]
 800f6ec:	e558      	b.n	800f1a0 <kalman_3gyro.constprop.0+0x2e38>
 800f6ee:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f6:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f6fa:	eeb0 7a48 	vmov.f32	s14, s16
 800f6fe:	f040 8097 	bne.w	800f830 <kalman_3gyro.constprop.0+0x34c8>
 800f702:	eef0 ca67 	vmov.f32	s25, s15
 800f706:	eef0 ba47 	vmov.f32	s23, s14
 800f70a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f712:	f43f aed6 	beq.w	800f4c2 <kalman_3gyro.constprop.0+0x315a>
 800f716:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71e:	d142      	bne.n	800f7a6 <kalman_3gyro.constprop.0+0x343e>
 800f720:	eeb0 ca69 	vmov.f32	s24, s19
 800f724:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72c:	f040 80ba 	bne.w	800f8a4 <kalman_3gyro.constprop.0+0x353c>
 800f730:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f738:	eeb0 da4a 	vmov.f32	s26, s20
 800f73c:	f47f aee1 	bne.w	800f502 <kalman_3gyro.constprop.0+0x319a>
 800f740:	eef0 9a4b 	vmov.f32	s19, s22
 800f744:	e6e9      	b.n	800f51a <kalman_3gyro.constprop.0+0x31b2>
 800f746:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74e:	d051      	beq.n	800f7f4 <kalman_3gyro.constprop.0+0x348c>
 800f750:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	f040 8097 	bne.w	800f88a <kalman_3gyro.constprop.0+0x3522>
 800f75c:	eef0 aa69 	vmov.f32	s21, s19
 800f760:	eef0 8a69 	vmov.f32	s17, s19
 800f764:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76c:	f43f ae8f 	beq.w	800f48e <kalman_3gyro.constprop.0+0x3126>
 800f770:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f778:	d1b9      	bne.n	800f6ee <kalman_3gyro.constprop.0+0x3386>
 800f77a:	eef0 ca69 	vmov.f32	s25, s19
 800f77e:	eef0 ba69 	vmov.f32	s23, s19
 800f782:	e7c2      	b.n	800f70a <kalman_3gyro.constprop.0+0x33a2>
 800f784:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f786:	4413      	add	r3, r2
 800f788:	edd3 9a00 	vldr	s19, [r3]
 800f78c:	f7ff bbe8 	b.w	800ef60 <kalman_3gyro.constprop.0+0x2bf8>
 800f790:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f798:	bf14      	ite	ne
 800f79a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800f79e:	eef0 7a68 	vmoveq.f32	s15, s17
 800f7a2:	f7ff bab4 	b.w	800ed0e <kalman_3gyro.constprop.0+0x29a6>
 800f7a6:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ae:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800f7b2:	eeb0 7a48 	vmov.f32	s14, s16
 800f7b6:	d14e      	bne.n	800f856 <kalman_3gyro.constprop.0+0x34ee>
 800f7b8:	eeb0 da67 	vmov.f32	s26, s15
 800f7bc:	eeb0 ca47 	vmov.f32	s24, s14
 800f7c0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c8:	f43f ae95 	beq.w	800f4f6 <kalman_3gyro.constprop.0+0x318e>
 800f7cc:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d4:	f000 84bd 	beq.w	8010152 <kalman_3gyro.constprop.0+0x3dea>
 800f7d8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e0:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800f7e4:	eeb0 7a48 	vmov.f32	s14, s16
 800f7e8:	d148      	bne.n	800f87c <kalman_3gyro.constprop.0+0x3514>
 800f7ea:	eef0 9a67 	vmov.f32	s19, s15
 800f7ee:	eeb0 aa47 	vmov.f32	s20, s14
 800f7f2:	e692      	b.n	800f51a <kalman_3gyro.constprop.0+0x31b2>
 800f7f4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fc:	d05b      	beq.n	800f8b6 <kalman_3gyro.constprop.0+0x354e>
 800f7fe:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	d0a9      	beq.n	800f75c <kalman_3gyro.constprop.0+0x33f4>
 800f808:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f810:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f814:	eef0 8a49 	vmov.f32	s17, s18
 800f818:	f43f ae35 	beq.w	800f486 <kalman_3gyro.constprop.0+0x311e>
 800f81c:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f824:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f828:	eef0 aa49 	vmov.f32	s21, s18
 800f82c:	f43f af69 	beq.w	800f702 <kalman_3gyro.constprop.0+0x339a>
 800f830:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f838:	eef0 ba47 	vmov.f32	s23, s14
 800f83c:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f840:	f43f ae3b 	beq.w	800f4ba <kalman_3gyro.constprop.0+0x3152>
 800f844:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f84c:	eef0 ca67 	vmov.f32	s25, s15
 800f850:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800f854:	d0b0      	beq.n	800f7b8 <kalman_3gyro.constprop.0+0x3450>
 800f856:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85e:	eeb0 ca47 	vmov.f32	s24, s14
 800f862:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800f866:	f43f ae42 	beq.w	800f4ee <kalman_3gyro.constprop.0+0x3186>
 800f86a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f872:	eeb0 da67 	vmov.f32	s26, s15
 800f876:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800f87a:	d0b6      	beq.n	800f7ea <kalman_3gyro.constprop.0+0x3482>
 800f87c:	eeb0 aa47 	vmov.f32	s20, s14
 800f880:	e647      	b.n	800f512 <kalman_3gyro.constprop.0+0x31aa>
 800f882:	eef0 7a6d 	vmov.f32	s15, s27
 800f886:	f7ff baf5 	b.w	800ee74 <kalman_3gyro.constprop.0+0x2b0c>
 800f88a:	eef0 8a48 	vmov.f32	s17, s16
 800f88e:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f896:	ee29 9a29 	vmul.f32	s18, s18, s19
 800f89a:	f47f adec 	bne.w	800f476 <kalman_3gyro.constprop.0+0x310e>
 800f89e:	eef0 aa49 	vmov.f32	s21, s18
 800f8a2:	e75f      	b.n	800f764 <kalman_3gyro.constprop.0+0x33fc>
 800f8a4:	ed9f ba2a 	vldr	s22, [pc, #168]	; 800f950 <kalman_3gyro.constprop.0+0x35e8>
 800f8a8:	eef0 9a48 	vmov.f32	s19, s16
 800f8ac:	eeb0 aa48 	vmov.f32	s20, s16
 800f8b0:	eeb0 da48 	vmov.f32	s26, s16
 800f8b4:	e631      	b.n	800f51a <kalman_3gyro.constprop.0+0x31b2>
 800f8b6:	eef0 8a6a 	vmov.f32	s17, s21
 800f8ba:	e753      	b.n	800f764 <kalman_3gyro.constprop.0+0x33fc>
 800f8bc:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 800f8c0:	2a31      	cmp	r2, #49	; 0x31
 800f8c2:	f63f a8a3 	bhi.w	800ea0c <kalman_3gyro.constprop.0+0x26a4>
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f8ce:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f8d2:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f8d6:	f7ff b899 	b.w	800ea0c <kalman_3gyro.constprop.0+0x26a4>
 800f8da:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f340 8423 	ble.w	801012a <kalman_3gyro.constprop.0+0x3dc2>
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800f8ec:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800f8f0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800f8f4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 800f8f8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 800f8fc:	f7fe bca9 	b.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 800f900:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800f904:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800f908:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800f90c:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800f910:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800f914:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800f918:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800f91c:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800f920:	f7fe bc18 	b.w	800e154 <kalman_3gyro.constprop.0+0x1dec>
 800f924:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800f928:	eef0 4a46 	vmov.f32	s9, s12
 800f92c:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800f930:	eef0 7a47 	vmov.f32	s15, s14
 800f934:	eef0 5a66 	vmov.f32	s11, s13
 800f938:	e64b      	b.n	800f5d2 <kalman_3gyro.constprop.0+0x326a>
 800f93a:	eeb1 7a47 	vneg.f32	s14, s14
 800f93e:	f7fd bc66 	b.w	800d20e <kalman_3gyro.constprop.0+0xea6>
 800f942:	eef0 ca69 	vmov.f32	s25, s19
 800f946:	e6e0      	b.n	800f70a <kalman_3gyro.constprop.0+0x33a2>
 800f948:	eeb0 ba69 	vmov.f32	s22, s19
 800f94c:	e5e5      	b.n	800f51a <kalman_3gyro.constprop.0+0x31b2>
 800f94e:	bf00      	nop
 800f950:	00000000 	.word	0x00000000
 800f954:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800f958:	49dc      	ldr	r1, [pc, #880]	; (800fccc <kalman_3gyro.constprop.0+0x3964>)
 800f95a:	4bdd      	ldr	r3, [pc, #884]	; (800fcd0 <kalman_3gyro.constprop.0+0x3968>)
 800f95c:	4add      	ldr	r2, [pc, #884]	; (800fcd4 <kalman_3gyro.constprop.0+0x396c>)
 800f95e:	2000      	movs	r0, #0
 800f960:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 800f964:	6029      	str	r1, [r5, #0]
 800f966:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 800f96a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 800f96e:	6002      	str	r2, [r0, #0]
 800f970:	600b      	str	r3, [r1, #0]
 800f972:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 800f976:	9004      	str	r0, [sp, #16]
 800f978:	9110      	str	r1, [sp, #64]	; 0x40
 800f97a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f000 80b4 	beq.w	800faec <kalman_3gyro.constprop.0+0x3784>
 800f984:	240c      	movs	r4, #12
 800f986:	eddf bad4 	vldr	s23, [pc, #848]	; 800fcd8 <kalman_3gyro.constprop.0+0x3970>
 800f98a:	ed9f bad4 	vldr	s22, [pc, #848]	; 800fcdc <kalman_3gyro.constprop.0+0x3974>
 800f98e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 800fce0 <kalman_3gyro.constprop.0+0x3978>
 800f992:	ed9f aad4 	vldr	s20, [pc, #848]	; 800fce4 <kalman_3gyro.constprop.0+0x397c>
 800f996:	eddf aad4 	vldr	s21, [pc, #848]	; 800fce8 <kalman_3gyro.constprop.0+0x3980>
 800f99a:	9f08      	ldr	r7, [sp, #32]
 800f99c:	fb14 8403 	smlabb	r4, r4, r3, r8
 800f9a0:	4646      	mov	r6, r8
 800f9a2:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800f9a6:	e06b      	b.n	800fa80 <kalman_3gyro.constprop.0+0x3718>
 800f9a8:	eeb4 7aca 	vcmpe.f32	s14, s20
 800f9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b0:	f300 815a 	bgt.w	800fc68 <kalman_3gyro.constprop.0+0x3900>
 800f9b4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f9b8:	ee17 0a90 	vmov	r0, s15
 800f9bc:	f7f0 fd68 	bl	8000490 <__aeabi_f2d>
 800f9c0:	ec41 0b10 	vmov	d0, r0, r1
 800f9c4:	f005 fb04 	bl	8014fd0 <ceil>
 800f9c8:	ec51 0b10 	vmov	r0, r1, d0
 800f9cc:	f7f1 f868 	bl	8000aa0 <__aeabi_d2f>
 800f9d0:	ee07 0a90 	vmov	s15, r0
 800f9d4:	edc6 7a00 	vstr	s15, [r6]
 800f9d8:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9dc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800f9e0:	eef0 6ae7 	vabs.f32	s13, s15
 800f9e4:	eef4 6acb 	vcmpe.f32	s13, s22
 800f9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ec:	d51b      	bpl.n	800fa26 <kalman_3gyro.constprop.0+0x36be>
 800f9ee:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800f9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f6:	f280 8120 	bge.w	800fc3a <kalman_3gyro.constprop.0+0x38d2>
 800f9fa:	eeb4 7aca 	vcmpe.f32	s14, s20
 800f9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa02:	f300 812e 	bgt.w	800fc62 <kalman_3gyro.constprop.0+0x38fa>
 800fa06:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fa0a:	ee17 0a90 	vmov	r0, s15
 800fa0e:	f7f0 fd3f 	bl	8000490 <__aeabi_f2d>
 800fa12:	ec41 0b10 	vmov	d0, r0, r1
 800fa16:	f005 fadb 	bl	8014fd0 <ceil>
 800fa1a:	ec51 0b10 	vmov	r0, r1, d0
 800fa1e:	f7f1 f83f 	bl	8000aa0 <__aeabi_d2f>
 800fa22:	ee07 0a90 	vmov	s15, r0
 800fa26:	edc6 7a01 	vstr	s15, [r6, #4]
 800fa2a:	ed97 7a02 	vldr	s14, [r7, #8]
 800fa2e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fa32:	eef0 6ae7 	vabs.f32	s13, s15
 800fa36:	eef4 6acb 	vcmpe.f32	s13, s22
 800fa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3e:	d51a      	bpl.n	800fa76 <kalman_3gyro.constprop.0+0x370e>
 800fa40:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa48:	da3b      	bge.n	800fac2 <kalman_3gyro.constprop.0+0x375a>
 800fa4a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fa4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa52:	f300 8103 	bgt.w	800fc5c <kalman_3gyro.constprop.0+0x38f4>
 800fa56:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fa5a:	ee17 0a90 	vmov	r0, s15
 800fa5e:	f7f0 fd17 	bl	8000490 <__aeabi_f2d>
 800fa62:	ec41 0b10 	vmov	d0, r0, r1
 800fa66:	f005 fab3 	bl	8014fd0 <ceil>
 800fa6a:	ec51 0b10 	vmov	r0, r1, d0
 800fa6e:	f7f1 f817 	bl	8000aa0 <__aeabi_d2f>
 800fa72:	ee07 0a90 	vmov	s15, r0
 800fa76:	edc6 7a02 	vstr	s15, [r6, #8]
 800fa7a:	360c      	adds	r6, #12
 800fa7c:	42b4      	cmp	r4, r6
 800fa7e:	d035      	beq.n	800faec <kalman_3gyro.constprop.0+0x3784>
 800fa80:	ed97 7a00 	vldr	s14, [r7]
 800fa84:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fa88:	eef0 6ae7 	vabs.f32	s13, s15
 800fa8c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa94:	d59e      	bpl.n	800f9d4 <kalman_3gyro.constprop.0+0x366c>
 800fa96:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9e:	db83      	blt.n	800f9a8 <kalman_3gyro.constprop.0+0x3640>
 800faa0:	ee77 7a89 	vadd.f32	s15, s15, s18
 800faa4:	ee17 0a90 	vmov	r0, s15
 800faa8:	f7f0 fcf2 	bl	8000490 <__aeabi_f2d>
 800faac:	ec41 0b10 	vmov	d0, r0, r1
 800fab0:	f005 fb12 	bl	80150d8 <floor>
 800fab4:	ec51 0b10 	vmov	r0, r1, d0
 800fab8:	f7f0 fff2 	bl	8000aa0 <__aeabi_d2f>
 800fabc:	ee07 0a90 	vmov	s15, r0
 800fac0:	e788      	b.n	800f9d4 <kalman_3gyro.constprop.0+0x366c>
 800fac2:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fac6:	360c      	adds	r6, #12
 800fac8:	ee17 0a90 	vmov	r0, s15
 800facc:	f7f0 fce0 	bl	8000490 <__aeabi_f2d>
 800fad0:	ec41 0b10 	vmov	d0, r0, r1
 800fad4:	f005 fb00 	bl	80150d8 <floor>
 800fad8:	ec51 0b10 	vmov	r0, r1, d0
 800fadc:	f7f0 ffe0 	bl	8000aa0 <__aeabi_d2f>
 800fae0:	ee07 0a90 	vmov	s15, r0
 800fae4:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fae8:	42b4      	cmp	r4, r6
 800faea:	d1c9      	bne.n	800fa80 <kalman_3gyro.constprop.0+0x3718>
 800faec:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 800faf0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 80cf 	beq.w	800fc98 <kalman_3gyro.constprop.0+0x3930>
 800fafa:	240c      	movs	r4, #12
 800fafc:	eddf ba7b 	vldr	s23, [pc, #492]	; 800fcec <kalman_3gyro.constprop.0+0x3984>
 800fb00:	ed9f ba76 	vldr	s22, [pc, #472]	; 800fcdc <kalman_3gyro.constprop.0+0x3974>
 800fb04:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 800fcf0 <kalman_3gyro.constprop.0+0x3988>
 800fb08:	ed9f aa7a 	vldr	s20, [pc, #488]	; 800fcf4 <kalman_3gyro.constprop.0+0x398c>
 800fb0c:	eddf aa76 	vldr	s21, [pc, #472]	; 800fce8 <kalman_3gyro.constprop.0+0x3980>
 800fb10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb14:	fb14 7403 	smlabb	r4, r4, r3, r7
 800fb18:	463e      	mov	r6, r7
 800fb1a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fb1e:	e06b      	b.n	800fbf8 <kalman_3gyro.constprop.0+0x3890>
 800fb20:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	f300 81a2 	bgt.w	800fe70 <kalman_3gyro.constprop.0+0x3b08>
 800fb2c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fb30:	ee17 0a90 	vmov	r0, s15
 800fb34:	f7f0 fcac 	bl	8000490 <__aeabi_f2d>
 800fb38:	ec41 0b10 	vmov	d0, r0, r1
 800fb3c:	f005 fa48 	bl	8014fd0 <ceil>
 800fb40:	ec51 0b10 	vmov	r0, r1, d0
 800fb44:	f7f0 ffac 	bl	8000aa0 <__aeabi_d2f>
 800fb48:	ee07 0a90 	vmov	s15, r0
 800fb4c:	edc6 7a00 	vstr	s15, [r6]
 800fb50:	ed99 7a04 	vldr	s14, [r9, #16]
 800fb54:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fb58:	eef0 6ae7 	vabs.f32	s13, s15
 800fb5c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb64:	d51b      	bpl.n	800fb9e <kalman_3gyro.constprop.0+0x3836>
 800fb66:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6e:	f280 8168 	bge.w	800fe42 <kalman_3gyro.constprop.0+0x3ada>
 800fb72:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7a:	f300 8176 	bgt.w	800fe6a <kalman_3gyro.constprop.0+0x3b02>
 800fb7e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fb82:	ee17 0a90 	vmov	r0, s15
 800fb86:	f7f0 fc83 	bl	8000490 <__aeabi_f2d>
 800fb8a:	ec41 0b10 	vmov	d0, r0, r1
 800fb8e:	f005 fa1f 	bl	8014fd0 <ceil>
 800fb92:	ec51 0b10 	vmov	r0, r1, d0
 800fb96:	f7f0 ff83 	bl	8000aa0 <__aeabi_d2f>
 800fb9a:	ee07 0a90 	vmov	s15, r0
 800fb9e:	edc6 7a01 	vstr	s15, [r6, #4]
 800fba2:	ed99 7a05 	vldr	s14, [r9, #20]
 800fba6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fbaa:	eef0 6ae7 	vabs.f32	s13, s15
 800fbae:	eef4 6acb 	vcmpe.f32	s13, s22
 800fbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb6:	d51a      	bpl.n	800fbee <kalman_3gyro.constprop.0+0x3886>
 800fbb8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc0:	da55      	bge.n	800fc6e <kalman_3gyro.constprop.0+0x3906>
 800fbc2:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbca:	f300 814b 	bgt.w	800fe64 <kalman_3gyro.constprop.0+0x3afc>
 800fbce:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fbd2:	ee17 0a90 	vmov	r0, s15
 800fbd6:	f7f0 fc5b 	bl	8000490 <__aeabi_f2d>
 800fbda:	ec41 0b10 	vmov	d0, r0, r1
 800fbde:	f005 f9f7 	bl	8014fd0 <ceil>
 800fbe2:	ec51 0b10 	vmov	r0, r1, d0
 800fbe6:	f7f0 ff5b 	bl	8000aa0 <__aeabi_d2f>
 800fbea:	ee07 0a90 	vmov	s15, r0
 800fbee:	edc6 7a02 	vstr	s15, [r6, #8]
 800fbf2:	360c      	adds	r6, #12
 800fbf4:	42b4      	cmp	r4, r6
 800fbf6:	d04f      	beq.n	800fc98 <kalman_3gyro.constprop.0+0x3930>
 800fbf8:	ed99 7a03 	vldr	s14, [r9, #12]
 800fbfc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fc00:	eef0 6ae7 	vabs.f32	s13, s15
 800fc04:	eef4 6acb 	vcmpe.f32	s13, s22
 800fc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0c:	d59e      	bpl.n	800fb4c <kalman_3gyro.constprop.0+0x37e4>
 800fc0e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc16:	db83      	blt.n	800fb20 <kalman_3gyro.constprop.0+0x37b8>
 800fc18:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc1c:	ee17 0a90 	vmov	r0, s15
 800fc20:	f7f0 fc36 	bl	8000490 <__aeabi_f2d>
 800fc24:	ec41 0b10 	vmov	d0, r0, r1
 800fc28:	f005 fa56 	bl	80150d8 <floor>
 800fc2c:	ec51 0b10 	vmov	r0, r1, d0
 800fc30:	f7f0 ff36 	bl	8000aa0 <__aeabi_d2f>
 800fc34:	ee07 0a90 	vmov	s15, r0
 800fc38:	e788      	b.n	800fb4c <kalman_3gyro.constprop.0+0x37e4>
 800fc3a:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc3e:	ee17 0a90 	vmov	r0, s15
 800fc42:	f7f0 fc25 	bl	8000490 <__aeabi_f2d>
 800fc46:	ec41 0b10 	vmov	d0, r0, r1
 800fc4a:	f005 fa45 	bl	80150d8 <floor>
 800fc4e:	ec51 0b10 	vmov	r0, r1, d0
 800fc52:	f7f0 ff25 	bl	8000aa0 <__aeabi_d2f>
 800fc56:	ee07 0a90 	vmov	s15, r0
 800fc5a:	e6e4      	b.n	800fa26 <kalman_3gyro.constprop.0+0x36be>
 800fc5c:	eef0 7a6a 	vmov.f32	s15, s21
 800fc60:	e709      	b.n	800fa76 <kalman_3gyro.constprop.0+0x370e>
 800fc62:	eef0 7a6a 	vmov.f32	s15, s21
 800fc66:	e6de      	b.n	800fa26 <kalman_3gyro.constprop.0+0x36be>
 800fc68:	eef0 7a6a 	vmov.f32	s15, s21
 800fc6c:	e6b2      	b.n	800f9d4 <kalman_3gyro.constprop.0+0x366c>
 800fc6e:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc72:	360c      	adds	r6, #12
 800fc74:	ee17 0a90 	vmov	r0, s15
 800fc78:	f7f0 fc0a 	bl	8000490 <__aeabi_f2d>
 800fc7c:	ec41 0b10 	vmov	d0, r0, r1
 800fc80:	f005 fa2a 	bl	80150d8 <floor>
 800fc84:	ec51 0b10 	vmov	r0, r1, d0
 800fc88:	f7f0 ff0a 	bl	8000aa0 <__aeabi_d2f>
 800fc8c:	ee07 0a90 	vmov	s15, r0
 800fc90:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fc94:	42b4      	cmp	r4, r6
 800fc96:	d1af      	bne.n	800fbf8 <kalman_3gyro.constprop.0+0x3890>
 800fc98:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f43c ac7e 	beq.w	800c59e <kalman_3gyro.constprop.0+0x236>
 800fca2:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 800fca6:	240c      	movs	r4, #12
 800fca8:	eddf ba13 	vldr	s23, [pc, #76]	; 800fcf8 <kalman_3gyro.constprop.0+0x3990>
 800fcac:	ed9f ba0b 	vldr	s22, [pc, #44]	; 800fcdc <kalman_3gyro.constprop.0+0x3974>
 800fcb0:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800fcfc <kalman_3gyro.constprop.0+0x3994>
 800fcb4:	ed9f aa12 	vldr	s20, [pc, #72]	; 800fd00 <kalman_3gyro.constprop.0+0x3998>
 800fcb8:	eddf aa0b 	vldr	s21, [pc, #44]	; 800fce8 <kalman_3gyro.constprop.0+0x3980>
 800fcbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fcc0:	960f      	str	r6, [sp, #60]	; 0x3c
 800fcc2:	fb14 6403 	smlabb	r4, r4, r3, r6
 800fcc6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fcca:	e099      	b.n	800fe00 <kalman_3gyro.constprop.0+0x3a98>
 800fccc:	3a7001e0 	.word	0x3a7001e0
 800fcd0:	3a8c0118 	.word	0x3a8c0118
 800fcd4:	3a000100 	.word	0x3a000100
 800fcd8:	44888777 	.word	0x44888777
 800fcdc:	4b000000 	.word	0x4b000000
 800fce0:	39f001e1 	.word	0x39f001e1
 800fce4:	b9f001e1 	.word	0xb9f001e1
 800fce8:	80000000 	.word	0x80000000
 800fcec:	44fffe00 	.word	0x44fffe00
 800fcf0:	39800100 	.word	0x39800100
 800fcf4:	b9800100 	.word	0xb9800100
 800fcf8:	446a0ccd 	.word	0x446a0ccd
 800fcfc:	3a0c0118 	.word	0x3a0c0118
 800fd00:	ba0c0118 	.word	0xba0c0118
 800fd04:	bf666666 	.word	0xbf666666
 800fd08:	3d072b02 	.word	0x3d072b02
 800fd0c:	3cb43958 	.word	0x3cb43958
 800fd10:	3cf5c28f 	.word	0x3cf5c28f
 800fd14:	3d75c28f 	.word	0x3d75c28f
 800fd18:	3d23d70a 	.word	0x3d23d70a
 800fd1c:	3ca3d70a 	.word	0x3ca3d70a
 800fd20:	3d4ccccd 	.word	0x3d4ccccd
 800fd24:	3d8f5c29 	.word	0x3d8f5c29
 800fd28:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd30:	f300 80c6 	bgt.w	800fec0 <kalman_3gyro.constprop.0+0x3b58>
 800fd34:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd38:	ee17 0a90 	vmov	r0, s15
 800fd3c:	f7f0 fba8 	bl	8000490 <__aeabi_f2d>
 800fd40:	ec41 0b10 	vmov	d0, r0, r1
 800fd44:	f005 f944 	bl	8014fd0 <ceil>
 800fd48:	ec51 0b10 	vmov	r0, r1, d0
 800fd4c:	f7f0 fea8 	bl	8000aa0 <__aeabi_d2f>
 800fd50:	ee07 0a90 	vmov	s15, r0
 800fd54:	edc6 7a00 	vstr	s15, [r6]
 800fd58:	ed99 7a07 	vldr	s14, [r9, #28]
 800fd5c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fd60:	eef0 6ae7 	vabs.f32	s13, s15
 800fd64:	eef4 6acb 	vcmpe.f32	s13, s22
 800fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6c:	d51b      	bpl.n	800fda6 <kalman_3gyro.constprop.0+0x3a3e>
 800fd6e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd76:	f280 808f 	bge.w	800fe98 <kalman_3gyro.constprop.0+0x3b30>
 800fd7a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd82:	f300 809a 	bgt.w	800feba <kalman_3gyro.constprop.0+0x3b52>
 800fd86:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd8a:	ee17 0a90 	vmov	r0, s15
 800fd8e:	f7f0 fb7f 	bl	8000490 <__aeabi_f2d>
 800fd92:	ec41 0b10 	vmov	d0, r0, r1
 800fd96:	f005 f91b 	bl	8014fd0 <ceil>
 800fd9a:	ec51 0b10 	vmov	r0, r1, d0
 800fd9e:	f7f0 fe7f 	bl	8000aa0 <__aeabi_d2f>
 800fda2:	ee07 0a90 	vmov	s15, r0
 800fda6:	edc6 7a01 	vstr	s15, [r6, #4]
 800fdaa:	ed99 7a08 	vldr	s14, [r9, #32]
 800fdae:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fdb2:	eef0 6ae7 	vabs.f32	s13, s15
 800fdb6:	eef4 6acb 	vcmpe.f32	s13, s22
 800fdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbe:	d519      	bpl.n	800fdf4 <kalman_3gyro.constprop.0+0x3a8c>
 800fdc0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc8:	da55      	bge.n	800fe76 <kalman_3gyro.constprop.0+0x3b0e>
 800fdca:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd2:	dc78      	bgt.n	800fec6 <kalman_3gyro.constprop.0+0x3b5e>
 800fdd4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fdd8:	ee17 0a90 	vmov	r0, s15
 800fddc:	f7f0 fb58 	bl	8000490 <__aeabi_f2d>
 800fde0:	ec41 0b10 	vmov	d0, r0, r1
 800fde4:	f005 f8f4 	bl	8014fd0 <ceil>
 800fde8:	ec51 0b10 	vmov	r0, r1, d0
 800fdec:	f7f0 fe58 	bl	8000aa0 <__aeabi_d2f>
 800fdf0:	ee07 0a90 	vmov	s15, r0
 800fdf4:	edc6 7a02 	vstr	s15, [r6, #8]
 800fdf8:	360c      	adds	r6, #12
 800fdfa:	42b4      	cmp	r4, r6
 800fdfc:	f43c abd2 	beq.w	800c5a4 <kalman_3gyro.constprop.0+0x23c>
 800fe00:	ed99 7a06 	vldr	s14, [r9, #24]
 800fe04:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fe08:	eef0 6ae7 	vabs.f32	s13, s15
 800fe0c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fe10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe14:	d59e      	bpl.n	800fd54 <kalman_3gyro.constprop.0+0x39ec>
 800fe16:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1e:	db83      	blt.n	800fd28 <kalman_3gyro.constprop.0+0x39c0>
 800fe20:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe24:	ee17 0a90 	vmov	r0, s15
 800fe28:	f7f0 fb32 	bl	8000490 <__aeabi_f2d>
 800fe2c:	ec41 0b10 	vmov	d0, r0, r1
 800fe30:	f005 f952 	bl	80150d8 <floor>
 800fe34:	ec51 0b10 	vmov	r0, r1, d0
 800fe38:	f7f0 fe32 	bl	8000aa0 <__aeabi_d2f>
 800fe3c:	ee07 0a90 	vmov	s15, r0
 800fe40:	e788      	b.n	800fd54 <kalman_3gyro.constprop.0+0x39ec>
 800fe42:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe46:	ee17 0a90 	vmov	r0, s15
 800fe4a:	f7f0 fb21 	bl	8000490 <__aeabi_f2d>
 800fe4e:	ec41 0b10 	vmov	d0, r0, r1
 800fe52:	f005 f941 	bl	80150d8 <floor>
 800fe56:	ec51 0b10 	vmov	r0, r1, d0
 800fe5a:	f7f0 fe21 	bl	8000aa0 <__aeabi_d2f>
 800fe5e:	ee07 0a90 	vmov	s15, r0
 800fe62:	e69c      	b.n	800fb9e <kalman_3gyro.constprop.0+0x3836>
 800fe64:	eef0 7a6a 	vmov.f32	s15, s21
 800fe68:	e6c1      	b.n	800fbee <kalman_3gyro.constprop.0+0x3886>
 800fe6a:	eef0 7a6a 	vmov.f32	s15, s21
 800fe6e:	e696      	b.n	800fb9e <kalman_3gyro.constprop.0+0x3836>
 800fe70:	eef0 7a6a 	vmov.f32	s15, s21
 800fe74:	e66a      	b.n	800fb4c <kalman_3gyro.constprop.0+0x37e4>
 800fe76:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe7a:	ee17 0a90 	vmov	r0, s15
 800fe7e:	f7f0 fb07 	bl	8000490 <__aeabi_f2d>
 800fe82:	ec41 0b10 	vmov	d0, r0, r1
 800fe86:	f005 f927 	bl	80150d8 <floor>
 800fe8a:	ec51 0b10 	vmov	r0, r1, d0
 800fe8e:	f7f0 fe07 	bl	8000aa0 <__aeabi_d2f>
 800fe92:	ee07 0a90 	vmov	s15, r0
 800fe96:	e7ad      	b.n	800fdf4 <kalman_3gyro.constprop.0+0x3a8c>
 800fe98:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe9c:	ee17 0a90 	vmov	r0, s15
 800fea0:	f7f0 faf6 	bl	8000490 <__aeabi_f2d>
 800fea4:	ec41 0b10 	vmov	d0, r0, r1
 800fea8:	f005 f916 	bl	80150d8 <floor>
 800feac:	ec51 0b10 	vmov	r0, r1, d0
 800feb0:	f7f0 fdf6 	bl	8000aa0 <__aeabi_d2f>
 800feb4:	ee07 0a90 	vmov	s15, r0
 800feb8:	e775      	b.n	800fda6 <kalman_3gyro.constprop.0+0x3a3e>
 800feba:	eef0 7a6a 	vmov.f32	s15, s21
 800febe:	e772      	b.n	800fda6 <kalman_3gyro.constprop.0+0x3a3e>
 800fec0:	eef0 7a6a 	vmov.f32	s15, s21
 800fec4:	e746      	b.n	800fd54 <kalman_3gyro.constprop.0+0x39ec>
 800fec6:	eef0 7a6a 	vmov.f32	s15, s21
 800feca:	e793      	b.n	800fdf4 <kalman_3gyro.constprop.0+0x3a8c>
 800fecc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800fece:	7813      	ldrb	r3, [r2, #0]
 800fed0:	ed92 7a03 	vldr	s14, [r2, #12]
 800fed4:	edd2 6a01 	vldr	s13, [r2, #4]
 800fed8:	edd2 7a02 	vldr	s15, [r2, #8]
 800fedc:	2200      	movs	r2, #0
 800fede:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f040 813b 	bne.w	801015e <kalman_3gyro.constprop.0+0x3df6>
 800fee8:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 800fd04 <kalman_3gyro.constprop.0+0x399c>
 800feec:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800fef0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800fef4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 800fef8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 800fefc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ff00:	2100      	movs	r1, #0
 800ff02:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800ff06:	f006 ffaf 	bl	8016e68 <memset>
 800ff0a:	eddb 7a02 	vldr	s15, [fp, #8]
 800ff0e:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 800fd08 <kalman_3gyro.constprop.0+0x39a0>
 800ff12:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 800fd0c <kalman_3gyro.constprop.0+0x39a4>
 800ff16:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 800fd10 <kalman_3gyro.constprop.0+0x39a8>
 800ff1a:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 800fd14 <kalman_3gyro.constprop.0+0x39ac>
 800ff1e:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 800fd18 <kalman_3gyro.constprop.0+0x39b0>
 800ff22:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 800fd1c <kalman_3gyro.constprop.0+0x39b4>
 800ff26:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 800fd20 <kalman_3gyro.constprop.0+0x39b8>
 800ff2a:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 800fd24 <kalman_3gyro.constprop.0+0x39bc>
 800ff2e:	4bd9      	ldr	r3, [pc, #868]	; (8010294 <kalman_3gyro.constprop.0+0x3f2c>)
 800ff30:	49d9      	ldr	r1, [pc, #868]	; (8010298 <kalman_3gyro.constprop.0+0x3f30>)
 800ff32:	4dda      	ldr	r5, [pc, #872]	; (801029c <kalman_3gyro.constprop.0+0x3f34>)
 800ff34:	ed9f 3ada 	vldr	s6, [pc, #872]	; 80102a0 <kalman_3gyro.constprop.0+0x3f38>
 800ff38:	48da      	ldr	r0, [pc, #872]	; (80102a4 <kalman_3gyro.constprop.0+0x3f3c>)
 800ff3a:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 800ff3e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff42:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ff46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ff4a:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 800ff4e:	eddf 5ad6 	vldr	s11, [pc, #856]	; 80102a8 <kalman_3gyro.constprop.0+0x3f40>
 800ff52:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 800ff56:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800ff5a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800ff5e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 800ff62:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 80102ac <kalman_3gyro.constprop.0+0x3f44>
 800ff66:	eddf 6ad2 	vldr	s13, [pc, #840]	; 80102b0 <kalman_3gyro.constprop.0+0x3f48>
 800ff6a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 800ff6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff72:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff76:	ee27 5a85 	vmul.f32	s10, s15, s10
 800ff7a:	ee27 4a84 	vmul.f32	s8, s15, s8
 800ff7e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ff82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ff86:	2200      	movs	r2, #0
 800ff88:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 800ff8c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 800ff90:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 800ff94:	4cc7      	ldr	r4, [pc, #796]	; (80102b4 <kalman_3gyro.constprop.0+0x3f4c>)
 800ff96:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 800ff9a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 800ff9e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 80102b8 <kalman_3gyro.constprop.0+0x3f50>
 800ffa2:	49c6      	ldr	r1, [pc, #792]	; (80102bc <kalman_3gyro.constprop.0+0x3f54>)
 800ffa4:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 800ffa8:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 800ffac:	eddf 4ac4 	vldr	s9, [pc, #784]	; 80102c0 <kalman_3gyro.constprop.0+0x3f58>
 800ffb0:	4bc4      	ldr	r3, [pc, #784]	; (80102c4 <kalman_3gyro.constprop.0+0x3f5c>)
 800ffb2:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 800ffb6:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 800ffba:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 800ffbe:	4ac2      	ldr	r2, [pc, #776]	; (80102c8 <kalman_3gyro.constprop.0+0x3f60>)
 800ffc0:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 800ffc4:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 800ffc8:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 800ffcc:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800ffd0:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800ffd4:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800ffd8:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800ffdc:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800ffe0:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800ffe4:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800ffe8:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800ffec:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800fff0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 800fff4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 800fff8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 800fffc:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8010000:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8010004:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010008:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 801000c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010010:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010014:	4cad      	ldr	r4, [pc, #692]	; (80102cc <kalman_3gyro.constprop.0+0x3f64>)
 8010016:	48ae      	ldr	r0, [pc, #696]	; (80102d0 <kalman_3gyro.constprop.0+0x3f68>)
 8010018:	49ae      	ldr	r1, [pc, #696]	; (80102d4 <kalman_3gyro.constprop.0+0x3f6c>)
 801001a:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 801001e:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8010022:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8010026:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801002a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801002e:	ee27 6a83 	vmul.f32	s12, s15, s6
 8010032:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8010036:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 801003a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801003e:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 8010042:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010046:	4aa4      	ldr	r2, [pc, #656]	; (80102d8 <kalman_3gyro.constprop.0+0x3f70>)
 8010048:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 801004c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010050:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010054:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010058:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 801005c:	4e9f      	ldr	r6, [pc, #636]	; (80102dc <kalman_3gyro.constprop.0+0x3f74>)
 801005e:	4da0      	ldr	r5, [pc, #640]	; (80102e0 <kalman_3gyro.constprop.0+0x3f78>)
 8010060:	49a0      	ldr	r1, [pc, #640]	; (80102e4 <kalman_3gyro.constprop.0+0x3f7c>)
 8010062:	4aa1      	ldr	r2, [pc, #644]	; (80102e8 <kalman_3gyro.constprop.0+0x3f80>)
 8010064:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010068:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 801006c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010070:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010074:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010078:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 801007c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010080:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010084:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010088:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 801008c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010090:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010094:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010098:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801009c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 80100a0:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 80100a4:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 80100a8:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 80100ac:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80100b0:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80100b4:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80100b8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80100bc:	b973      	cbnz	r3, 80100dc <kalman_3gyro.constprop.0+0x3d74>
 80100be:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80100c2:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80100c6:	6811      	ldr	r1, [r2, #0]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80100ce:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80100d8:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80100dc:	2300      	movs	r3, #0
 80100de:	f88b 3001 	strb.w	r3, [fp, #1]
 80100e2:	f7fc ba4b 	b.w	800c57c <kalman_3gyro.constprop.0+0x214>
 80100e6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80100ea:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 80100ee:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80100f2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80100f6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80100fa:	f7fd bd5b 	b.w	800dbb4 <kalman_3gyro.constprop.0+0x184c>
 80100fe:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80102ec <kalman_3gyro.constprop.0+0x3f84>
 8010102:	f7fc ba9e 	b.w	800c642 <kalman_3gyro.constprop.0+0x2da>
 8010106:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 801010a:	f7fd bd7b 	b.w	800dc04 <kalman_3gyro.constprop.0+0x189c>
 801010e:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80102f0 <kalman_3gyro.constprop.0+0x3f88>
 8010112:	ed9f 4a78 	vldr	s8, [pc, #480]	; 80102f4 <kalman_3gyro.constprop.0+0x3f8c>
 8010116:	eddf 4a78 	vldr	s9, [pc, #480]	; 80102f8 <kalman_3gyro.constprop.0+0x3f90>
 801011a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80102fc <kalman_3gyro.constprop.0+0x3f94>
 801011e:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010300 <kalman_3gyro.constprop.0+0x3f98>
 8010122:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010126:	f7fd bf9d 	b.w	800e064 <kalman_3gyro.constprop.0+0x1cfc>
 801012a:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 801012e:	2a00      	cmp	r2, #0
 8010130:	f340 8181 	ble.w	8010436 <kalman_3gyro.constprop.0+0x40ce>
 8010134:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010138:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801013c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010144:	f340 8177 	ble.w	8010436 <kalman_3gyro.constprop.0+0x40ce>
 8010148:	3a01      	subs	r2, #1
 801014a:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 801014e:	f7fe b880 	b.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 8010152:	eeb0 aa69 	vmov.f32	s20, s19
 8010156:	eeb0 ba69 	vmov.f32	s22, s19
 801015a:	f7ff b9de 	b.w	800f51a <kalman_3gyro.constprop.0+0x31b2>
 801015e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010162:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010166:	eee7 7a07 	vfma.f32	s15, s14, s14
 801016a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801016e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010172:	e6bb      	b.n	800feec <kalman_3gyro.constprop.0+0x3b84>
 8010174:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010178:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801017c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010180:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010184:	f7fe b802 	b.w	800e18c <kalman_3gyro.constprop.0+0x1e24>
 8010188:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 801018c:	f7fd bae6 	b.w	800d75c <kalman_3gyro.constprop.0+0x13f4>
 8010190:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010194:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010198:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801019c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80101a0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80101a4:	f7fd bd06 	b.w	800dbb4 <kalman_3gyro.constprop.0+0x184c>
 80101a8:	ee7e 7a67 	vsub.f32	s15, s28, s15
 80101ac:	ee17 0a90 	vmov	r0, s15
 80101b0:	f7f0 f96e 	bl	8000490 <__aeabi_f2d>
 80101b4:	ec41 0b10 	vmov	d0, r0, r1
 80101b8:	f004 ff0a 	bl	8014fd0 <ceil>
 80101bc:	ec51 0b10 	vmov	r0, r1, d0
 80101c0:	f7f0 fc6e 	bl	8000aa0 <__aeabi_d2f>
 80101c4:	ee0e 0a10 	vmov	s28, r0
 80101c8:	f7fc bc70 	b.w	800caac <kalman_3gyro.constprop.0+0x744>
 80101cc:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80101d0:	ee17 0a90 	vmov	r0, s15
 80101d4:	f7f0 f95c 	bl	8000490 <__aeabi_f2d>
 80101d8:	ec41 0b10 	vmov	d0, r0, r1
 80101dc:	f004 fef8 	bl	8014fd0 <ceil>
 80101e0:	ec51 0b10 	vmov	r0, r1, d0
 80101e4:	f7f0 fc5c 	bl	8000aa0 <__aeabi_d2f>
 80101e8:	ee0d 0a90 	vmov	s27, r0
 80101ec:	f7fc bc81 	b.w	800caf2 <kalman_3gyro.constprop.0+0x78a>
 80101f0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80101f4:	ee17 0a90 	vmov	r0, s15
 80101f8:	f7f0 f94a 	bl	8000490 <__aeabi_f2d>
 80101fc:	ec41 0b10 	vmov	d0, r0, r1
 8010200:	f004 fee6 	bl	8014fd0 <ceil>
 8010204:	ec51 0b10 	vmov	r0, r1, d0
 8010208:	f7f0 fc4a 	bl	8000aa0 <__aeabi_d2f>
 801020c:	ee0d 0a90 	vmov	s27, r0
 8010210:	f7fc bcd5 	b.w	800cbbe <kalman_3gyro.constprop.0+0x856>
 8010214:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010218:	ee17 0a90 	vmov	r0, s15
 801021c:	f7f0 f938 	bl	8000490 <__aeabi_f2d>
 8010220:	ec41 0b10 	vmov	d0, r0, r1
 8010224:	f004 fed4 	bl	8014fd0 <ceil>
 8010228:	ec51 0b10 	vmov	r0, r1, d0
 801022c:	f7f0 fc38 	bl	8000aa0 <__aeabi_d2f>
 8010230:	ee0b 0a10 	vmov	s22, r0
 8010234:	f7fc bce6 	b.w	800cc04 <kalman_3gyro.constprop.0+0x89c>
 8010238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023c:	f6fd addf 	blt.w	800ddfe <kalman_3gyro.constprop.0+0x1a96>
 8010240:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80102f8 <kalman_3gyro.constprop.0+0x3f90>
 8010244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024c:	f140 8283 	bpl.w	8010756 <kalman_3gyro.constprop.0+0x43ee>
 8010250:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010304 <kalman_3gyro.constprop.0+0x3f9c>
 8010254:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010308 <kalman_3gyro.constprop.0+0x3fa0>
 8010258:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801030c <kalman_3gyro.constprop.0+0x3fa4>
 801025c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010264:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010268:	eea6 7a86 	vfma.f32	s14, s13, s12
 801026c:	f7fd bdd1 	b.w	800de12 <kalman_3gyro.constprop.0+0x1aaa>
 8010270:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010274:	ee17 0a90 	vmov	r0, s15
 8010278:	f7f0 f90a 	bl	8000490 <__aeabi_f2d>
 801027c:	ec41 0b10 	vmov	d0, r0, r1
 8010280:	f004 fea6 	bl	8014fd0 <ceil>
 8010284:	ec51 0b10 	vmov	r0, r1, d0
 8010288:	f7f0 fc0a 	bl	8000aa0 <__aeabi_d2f>
 801028c:	ee08 0a10 	vmov	s16, r0
 8010290:	f7fc bbe9 	b.w	800ca66 <kalman_3gyro.constprop.0+0x6fe>
 8010294:	3eb33333 	.word	0x3eb33333
 8010298:	3ee66666 	.word	0x3ee66666
 801029c:	3f866666 	.word	0x3f866666
 80102a0:	3ecccccd 	.word	0x3ecccccd
 80102a4:	3f933333 	.word	0x3f933333
 80102a8:	3dcccccd 	.word	0x3dcccccd
 80102ac:	3e4ccccd 	.word	0x3e4ccccd
 80102b0:	3e99999a 	.word	0x3e99999a
 80102b4:	3f8ccccd 	.word	0x3f8ccccd
 80102b8:	3f4ccccd 	.word	0x3f4ccccd
 80102bc:	3ebd70a4 	.word	0x3ebd70a4
 80102c0:	3f666666 	.word	0x3f666666
 80102c4:	40a00000 	.word	0x40a00000
 80102c8:	3f99999a 	.word	0x3f99999a
 80102cc:	3f19999a 	.word	0x3f19999a
 80102d0:	3fb9999a 	.word	0x3fb9999a
 80102d4:	3fe66666 	.word	0x3fe66666
 80102d8:	3f333333 	.word	0x3f333333
 80102dc:	3fa66666 	.word	0x3fa66666
 80102e0:	3fcccccd 	.word	0x3fcccccd
 80102e4:	40200000 	.word	0x40200000
 80102e8:	40400000 	.word	0x40400000
 80102ec:	bf666666 	.word	0xbf666666
 80102f0:	391d4951 	.word	0x391d4951
 80102f4:	383cbe62 	.word	0x383cbe62
 80102f8:	3c75c28f 	.word	0x3c75c28f
 80102fc:	469c3e00 	.word	0x469c3e00
 8010300:	43168000 	.word	0x43168000
 8010304:	3c23d70a 	.word	0x3c23d70a
 8010308:	3f19999a 	.word	0x3f19999a
 801030c:	43480000 	.word	0x43480000
 8010310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010314:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010318:	eef0 7aca 	vabs.f32	s15, s20
 801031c:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010320:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010328:	eeb4 aac7 	vcmpe.f32	s20, s14
 801032c:	bfb8      	it	lt
 801032e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010336:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 801033a:	f77d af5b 	ble.w	800e1f4 <kalman_3gyro.constprop.0+0x1e8c>
 801033e:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010342:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010346:	eeb4 aac7 	vcmpe.f32	s20, s14
 801034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034e:	f77d af51 	ble.w	800e1f4 <kalman_3gyro.constprop.0+0x1e8c>
 8010352:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010356:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 801035a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801035e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010362:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010366:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 801036a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 801036e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010372:	f7fd bf3f 	b.w	800e1f4 <kalman_3gyro.constprop.0+0x1e8c>
 8010376:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 801037a:	2a01      	cmp	r2, #1
 801037c:	d002      	beq.n	8010384 <kalman_3gyro.constprop.0+0x401c>
 801037e:	2b01      	cmp	r3, #1
 8010380:	f47d af1e 	bne.w	800e1c0 <kalman_3gyro.constprop.0+0x1e58>
 8010384:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010388:	eef4 7ac3 	vcmpe.f32	s15, s6
 801038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010390:	bfa8      	it	ge
 8010392:	eeb0 3a67 	vmovge.f32	s6, s15
 8010396:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 801039a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 801039e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 80103a2:	f7fd bf0d 	b.w	800e1c0 <kalman_3gyro.constprop.0+0x1e58>
 80103a6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80103aa:	ee17 0a90 	vmov	r0, s15
 80103ae:	f7f0 f86f 	bl	8000490 <__aeabi_f2d>
 80103b2:	ec41 0b10 	vmov	d0, r0, r1
 80103b6:	f004 fe0b 	bl	8014fd0 <ceil>
 80103ba:	ec51 0b10 	vmov	r0, r1, d0
 80103be:	f7f0 fb6f 	bl	8000aa0 <__aeabi_d2f>
 80103c2:	ee08 0a10 	vmov	s16, r0
 80103c6:	f7fc bc40 	b.w	800cc4a <kalman_3gyro.constprop.0+0x8e2>
 80103ca:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80103ce:	ee17 0a90 	vmov	r0, s15
 80103d2:	f7f0 f85d 	bl	8000490 <__aeabi_f2d>
 80103d6:	ec41 0b10 	vmov	d0, r0, r1
 80103da:	f004 fdf9 	bl	8014fd0 <ceil>
 80103de:	ec51 0b10 	vmov	r0, r1, d0
 80103e2:	f7f0 fb5d 	bl	8000aa0 <__aeabi_d2f>
 80103e6:	ee0b 0a10 	vmov	s22, r0
 80103ea:	f7fc bcb7 	b.w	800cd5c <kalman_3gyro.constprop.0+0x9f4>
 80103ee:	ee78 7a67 	vsub.f32	s15, s16, s15
 80103f2:	ee17 0a90 	vmov	r0, s15
 80103f6:	f7f0 f84b 	bl	8000490 <__aeabi_f2d>
 80103fa:	ec41 0b10 	vmov	d0, r0, r1
 80103fe:	f004 fde7 	bl	8014fd0 <ceil>
 8010402:	ec51 0b10 	vmov	r0, r1, d0
 8010406:	f7f0 fb4b 	bl	8000aa0 <__aeabi_d2f>
 801040a:	ee08 0a10 	vmov	s16, r0
 801040e:	f7fc bcc8 	b.w	800cda2 <kalman_3gyro.constprop.0+0xa3a>
 8010412:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010416:	ee17 0a90 	vmov	r0, s15
 801041a:	f7f0 f839 	bl	8000490 <__aeabi_f2d>
 801041e:	ec41 0b10 	vmov	d0, r0, r1
 8010422:	f004 fdd5 	bl	8014fd0 <ceil>
 8010426:	ec51 0b10 	vmov	r0, r1, d0
 801042a:	f7f0 fb39 	bl	8000aa0 <__aeabi_d2f>
 801042e:	ee0d 0a90 	vmov	s27, r0
 8010432:	f7fc bc70 	b.w	800cd16 <kalman_3gyro.constprop.0+0x9ae>
 8010436:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 801043a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801043e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010442:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	f77d af02 	ble.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 801044e:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010456:	eef4 7aec 	vcmpe.f32	s15, s25
 801045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045e:	f77d aef8 	ble.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 8010462:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801046a:	eef4 7acd 	vcmpe.f32	s15, s26
 801046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010472:	f140 8711 	bpl.w	8011298 <kalman_3gyro.constprop.0+0x4f30>
 8010476:	3303      	adds	r3, #3
 8010478:	f7ff ba35 	b.w	800f8e6 <kalman_3gyro.constprop.0+0x357e>
 801047c:	460b      	mov	r3, r1
 801047e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010482:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010486:	9181      	str	r1, [sp, #516]	; 0x204
 8010488:	9282      	str	r2, [sp, #520]	; 0x208
 801048a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 801048e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010490:	2200      	movs	r2, #0
 8010492:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010496:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801049a:	f7fe baa8 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 801049e:	a936      	add	r1, sp, #216	; 0xd8
 80104a0:	a854      	add	r0, sp, #336	; 0x150
 80104a2:	f7fa ff85 	bl	800b3b0 <b_dcm2q>
 80104a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80104aa:	4619      	mov	r1, r3
 80104ac:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 80104b0:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 80104b4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80104b8:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80104bc:	f006 fcd4 	bl	8016e68 <memset>
 80104c0:	4bd8      	ldr	r3, [pc, #864]	; (8010824 <kalman_3gyro.constprop.0+0x44bc>)
 80104c2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80104c6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80104ca:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80104ce:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80104d2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80104d6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80104da:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80104de:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80104e2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80104e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80104e8:	781a      	ldrb	r2, [r3, #0]
 80104ea:	ee07 2a90 	vmov	s15, r2
 80104ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80104f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fa:	f040 84dc 	bne.w	8010eb6 <kalman_3gyro.constprop.0+0x4b4e>
 80104fe:	eeb0 7a4c 	vmov.f32	s14, s24
 8010502:	2300      	movs	r3, #0
 8010504:	f88b 3000 	strb.w	r3, [fp]
 8010508:	eddb ea02 	vldr	s29, [fp, #8]
 801050c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010510:	2301      	movs	r3, #1
 8010512:	f7fd bb8d 	b.w	800dc30 <kalman_3gyro.constprop.0+0x18c8>
 8010516:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 801051a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801051e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010522:	f340 85da 	ble.w	80110da <kalman_3gyro.constprop.0+0x4d72>
 8010526:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 801052a:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 801052e:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010532:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010536:	ee74 4ae2 	vsub.f32	s9, s9, s5
 801053a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801053e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010542:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010546:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 801054a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010552:	f63d a94b 	bhi.w	800d7ec <kalman_3gyro.constprop.0+0x1484>
 8010556:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 801055a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010562:	f340 84bc 	ble.w	8010ede <kalman_3gyro.constprop.0+0x4b76>
 8010566:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 801056a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 801056e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010572:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010576:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801057a:	ee24 4a03 	vmul.f32	s8, s8, s6
 801057e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010582:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010586:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 801058a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	f63d a94b 	bhi.w	800d82c <kalman_3gyro.constprop.0+0x14c4>
 8010596:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 801059a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a2:	f340 84a8 	ble.w	8010ef6 <kalman_3gyro.constprop.0+0x4b8e>
 80105a6:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 80105aa:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 80105ae:	ee38 3a47 	vsub.f32	s6, s16, s14
 80105b2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80105b6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80105ba:	ee24 4a03 	vmul.f32	s8, s8, s6
 80105be:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80105c2:	ee3e ea23 	vadd.f32	s28, s28, s7
 80105c6:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 80105ca:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d2:	f63d a94b 	bhi.w	800d86c <kalman_3gyro.constprop.0+0x1504>
 80105d6:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 80105da:	eef4 4ac8 	vcmpe.f32	s9, s16
 80105de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e2:	f340 8490 	ble.w	8010f06 <kalman_3gyro.constprop.0+0x4b9e>
 80105e6:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 80105ea:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 80105ee:	ee38 3a47 	vsub.f32	s6, s16, s14
 80105f2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80105f6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80105fa:	ee24 4a03 	vmul.f32	s8, s8, s6
 80105fe:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010602:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010606:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 801060a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	f6fd a94b 	blt.w	800d8ac <kalman_3gyro.constprop.0+0x1544>
 8010616:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 801061a:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	f57d a94b 	bpl.w	800d8bc <kalman_3gyro.constprop.0+0x1554>
 8010626:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 801062a:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 801062e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010632:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010636:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801063a:	ee24 7a03 	vmul.f32	s14, s8, s6
 801063e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010642:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010646:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 801064a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010652:	f6fd a94b 	blt.w	800d8ec <kalman_3gyro.constprop.0+0x1584>
 8010656:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065e:	f57d a945 	bpl.w	800d8ec <kalman_3gyro.constprop.0+0x1584>
 8010662:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010666:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 801066a:	ee78 3a47 	vsub.f32	s7, s16, s14
 801066e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010672:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010676:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801067a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 801067e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010682:	f7fd b933 	b.w	800d8ec <kalman_3gyro.constprop.0+0x1584>
 8010686:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010828 <kalman_3gyro.constprop.0+0x44c0>
 801068a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801068e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010692:	f57d ac56 	bpl.w	800df42 <kalman_3gyro.constprop.0+0x1bda>
 8010696:	eddf 3a65 	vldr	s7, [pc, #404]	; 801082c <kalman_3gyro.constprop.0+0x44c4>
 801069a:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010830 <kalman_3gyro.constprop.0+0x44c8>
 801069e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010834 <kalman_3gyro.constprop.0+0x44cc>
 80106a2:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010838 <kalman_3gyro.constprop.0+0x44d0>
 80106a6:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80106aa:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80106ae:	eee3 6a83 	vfma.f32	s13, s7, s6
 80106b2:	eeb0 ca66 	vmov.f32	s24, s13
 80106b6:	eddf 6a61 	vldr	s13, [pc, #388]	; 801083c <kalman_3gyro.constprop.0+0x44d4>
 80106ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	f6fd ac56 	blt.w	800df72 <kalman_3gyro.constprop.0+0x1c0a>
 80106c6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010840 <kalman_3gyro.constprop.0+0x44d8>
 80106ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d2:	f57d ac56 	bpl.w	800df82 <kalman_3gyro.constprop.0+0x1c1a>
 80106d6:	eddf 3a59 	vldr	s7, [pc, #356]	; 801083c <kalman_3gyro.constprop.0+0x44d4>
 80106da:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80106de:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80106e2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80106e6:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 80106ea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80106ee:	eee3 6a83 	vfma.f32	s13, s7, s6
 80106f2:	eeb0 ca66 	vmov.f32	s24, s13
 80106f6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010844 <kalman_3gyro.constprop.0+0x44dc>
 80106fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010702:	f6fd ac56 	blt.w	800dfb2 <kalman_3gyro.constprop.0+0x1c4a>
 8010706:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801070a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010712:	f57d ac56 	bpl.w	800dfc2 <kalman_3gyro.constprop.0+0x1c5a>
 8010716:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010844 <kalman_3gyro.constprop.0+0x44dc>
 801071a:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010848 <kalman_3gyro.constprop.0+0x44e0>
 801071e:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 801084c <kalman_3gyro.constprop.0+0x44e4>
 8010722:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010726:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 801072a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801072e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010732:	eeb0 ca66 	vmov.f32	s24, s13
 8010736:	e4f4      	b.n	8010122 <kalman_3gyro.constprop.0+0x3dba>
 8010738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801073c:	f57d abe1 	bpl.w	800df02 <kalman_3gyro.constprop.0+0x1b9a>
 8010740:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801082c <kalman_3gyro.constprop.0+0x44c4>
 8010744:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	da9b      	bge.n	8010686 <kalman_3gyro.constprop.0+0x431e>
 801074e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010752:	f7fd bbee 	b.w	800df32 <kalman_3gyro.constprop.0+0x1bca>
 8010756:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010828 <kalman_3gyro.constprop.0+0x44c0>
 801075a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010762:	f57d ab5e 	bpl.w	800de22 <kalman_3gyro.constprop.0+0x1aba>
 8010766:	eddf 6a31 	vldr	s13, [pc, #196]	; 801082c <kalman_3gyro.constprop.0+0x44c4>
 801076a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010850 <kalman_3gyro.constprop.0+0x44e8>
 801076e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010834 <kalman_3gyro.constprop.0+0x44cc>
 8010772:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010854 <kalman_3gyro.constprop.0+0x44ec>
 8010776:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801077a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801077e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010782:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801083c <kalman_3gyro.constprop.0+0x44d4>
 8010786:	eef4 7ae6 	vcmpe.f32	s15, s13
 801078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078e:	f6fd ab5e 	blt.w	800de4e <kalman_3gyro.constprop.0+0x1ae6>
 8010792:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010840 <kalman_3gyro.constprop.0+0x44d8>
 8010796:	eef4 7ac7 	vcmpe.f32	s15, s14
 801079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079e:	f57d ab5e 	bpl.w	800de5e <kalman_3gyro.constprop.0+0x1af6>
 80107a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 801083c <kalman_3gyro.constprop.0+0x44d4>
 80107a6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80107aa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80107ae:	ee66 6a87 	vmul.f32	s13, s13, s14
 80107b2:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80107b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80107ba:	eea6 7a86 	vfma.f32	s14, s13, s12
 80107be:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010844 <kalman_3gyro.constprop.0+0x44dc>
 80107c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80107c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ca:	f6fd ab5e 	blt.w	800de8a <kalman_3gyro.constprop.0+0x1b22>
 80107ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80107d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107da:	f57d ab5d 	bpl.w	800de98 <kalman_3gyro.constprop.0+0x1b30>
 80107de:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010844 <kalman_3gyro.constprop.0+0x44dc>
 80107e2:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010858 <kalman_3gyro.constprop.0+0x44f0>
 80107e6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801084c <kalman_3gyro.constprop.0+0x44e4>
 80107ea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801085c <kalman_3gyro.constprop.0+0x44f4>
 80107ee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80107f2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80107f6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80107fa:	f7fd bb5b 	b.w	800deb4 <kalman_3gyro.constprop.0+0x1b4c>
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	e63d      	b.n	801047e <kalman_3gyro.constprop.0+0x4116>
 8010802:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8010806:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080e:	da2b      	bge.n	8010868 <kalman_3gyro.constprop.0+0x4500>
 8010810:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010860 <kalman_3gyro.constprop.0+0x44f8>
 8010814:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8010818:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010820:	db3a      	blt.n	8010898 <kalman_3gyro.constprop.0+0x4530>
 8010822:	e386      	b.n	8010f32 <kalman_3gyro.constprop.0+0x4bca>
 8010824:	40a00000 	.word	0x40a00000
 8010828:	3cf5c28f 	.word	0x3cf5c28f
 801082c:	3c75c28f 	.word	0x3c75c28f
 8010830:	3dccccd0 	.word	0x3dccccd0
 8010834:	42855556 	.word	0x42855556
 8010838:	3f866666 	.word	0x3f866666
 801083c:	3d4ccccd 	.word	0x3d4ccccd
 8010840:	3dcccccd 	.word	0x3dcccccd
 8010844:	3e4ccccd 	.word	0x3e4ccccd
 8010848:	42200000 	.word	0x42200000
 801084c:	40555555 	.word	0x40555555
 8010850:	3ecccccc 	.word	0x3ecccccc
 8010854:	3fcccccd 	.word	0x3fcccccd
 8010858:	43f00000 	.word	0x43f00000
 801085c:	42ee0000 	.word	0x42ee0000
 8010860:	00000000 	.word	0x00000000
 8010864:	eeb0 7a64 	vmov.f32	s14, s9
 8010868:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 801086c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010874:	f140 8359 	bpl.w	8010f2a <kalman_3gyro.constprop.0+0x4bc2>
 8010878:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 801087c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010880:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010884:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010888:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801088c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010890:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010894:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010898:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 801089c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	f2c0 835d 	blt.w	8010f62 <kalman_3gyro.constprop.0+0x4bfa>
 80108a8:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 80108ac:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80108b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b4:	f140 8402 	bpl.w	80110bc <kalman_3gyro.constprop.0+0x4d54>
 80108b8:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 80108bc:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 80108c0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80108c4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80108c8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80108cc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80108d0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80108d4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80108d8:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 80108dc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80108e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e4:	f200 835d 	bhi.w	8010fa2 <kalman_3gyro.constprop.0+0x4c3a>
 80108e8:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 80108ec:	eef4 4ac8 	vcmpe.f32	s9, s16
 80108f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f4:	f340 83e8 	ble.w	80110c8 <kalman_3gyro.constprop.0+0x4d60>
 80108f8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80108fc:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8010900:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010904:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010908:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801090c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010910:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010914:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010918:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 801091c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010924:	f200 835d 	bhi.w	8010fe2 <kalman_3gyro.constprop.0+0x4c7a>
 8010928:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 801092c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010934:	f340 83b4 	ble.w	80110a0 <kalman_3gyro.constprop.0+0x4d38>
 8010938:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 801093c:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8010940:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010944:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010948:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801094c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010950:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010954:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010958:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 801095c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010964:	f2c0 835c 	blt.w	8011020 <kalman_3gyro.constprop.0+0x4cb8>
 8010968:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801096c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010974:	f140 835c 	bpl.w	8011030 <kalman_3gyro.constprop.0+0x4cc8>
 8010978:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 801097c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8010980:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010984:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010988:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801098c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010990:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8010994:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010998:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801099c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	f6fc aeda 	blt.w	800d75c <kalman_3gyro.constprop.0+0x13f4>
 80109a8:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80109ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b0:	f57c aed4 	bpl.w	800d75c <kalman_3gyro.constprop.0+0x13f4>
 80109b4:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 80109b8:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 80109bc:	ee78 3a47 	vsub.f32	s7, s16, s14
 80109c0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80109c4:	ee35 7a47 	vsub.f32	s14, s10, s14
 80109c8:	ee24 5aa3 	vmul.f32	s10, s9, s7
 80109cc:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80109d0:	ee3b ba04 	vadd.f32	s22, s22, s8
 80109d4:	f7fc bec2 	b.w	800d75c <kalman_3gyro.constprop.0+0x13f4>
 80109d8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80109dc:	eef4 7acd 	vcmpe.f32	s15, s26
 80109e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e4:	dd2c      	ble.n	8010a40 <kalman_3gyro.constprop.0+0x46d8>
 80109e6:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80109ea:	eef4 7aeb 	vcmpe.f32	s15, s23
 80109ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f2:	dd25      	ble.n	8010a40 <kalman_3gyro.constprop.0+0x46d8>
 80109f4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80109f8:	eef4 7aec 	vcmpe.f32	s15, s25
 80109fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a00:	dd1e      	ble.n	8010a40 <kalman_3gyro.constprop.0+0x46d8>
 8010a02:	eddd 5a03 	vldr	s11, [sp, #12]
 8010a06:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010a0a:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a12:	d515      	bpl.n	8010a40 <kalman_3gyro.constprop.0+0x46d8>
 8010a14:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010a18:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010a1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a28:	d50a      	bpl.n	8010a40 <kalman_3gyro.constprop.0+0x46d8>
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a30:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a34:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010a38:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010a3c:	f7fd bf4c 	b.w	800e8d8 <kalman_3gyro.constprop.0+0x2570>
 8010a40:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8010a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4c:	dd0b      	ble.n	8010a66 <kalman_3gyro.constprop.0+0x46fe>
 8010a4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5a:	f100 843f 	bmi.w	80112dc <kalman_3gyro.constprop.0+0x4f74>
 8010a5e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010a62:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a66:	2300      	movs	r3, #0
 8010a68:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010a6c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010a70:	f7fd bf32 	b.w	800e8d8 <kalman_3gyro.constprop.0+0x2570>
 8010a74:	2301      	movs	r3, #1
 8010a76:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a7a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8010a7e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8010a82:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8010a86:	edd2 5a00 	vldr	s11, [r2]
 8010a8a:	ed93 7a00 	vldr	s14, [r3]
 8010a8e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8010a92:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8010a96:	ed92 5a00 	vldr	s10, [r2]
 8010a9a:	edd3 6a00 	vldr	s13, [r3]
 8010a9e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8010aa2:	ee67 4a07 	vmul.f32	s9, s14, s14
 8010aa6:	eea5 4a05 	vfma.f32	s8, s10, s10
 8010aaa:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8010aae:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8010ab2:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8010ab6:	aa5d      	add	r2, sp, #372	; 0x174
 8010ab8:	a833      	add	r0, sp, #204	; 0xcc
 8010aba:	ed91 6a00 	vldr	s12, [r1]
 8010abe:	edd3 7a00 	vldr	s15, [r3]
 8010ac2:	eea6 4a06 	vfma.f32	s8, s12, s12
 8010ac6:	a92d      	add	r1, sp, #180	; 0xb4
 8010ac8:	ad5d      	add	r5, sp, #372	; 0x174
 8010aca:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8010ace:	ac66      	add	r4, sp, #408	; 0x198
 8010ad0:	eef1 2ac4 	vsqrt.f32	s5, s8
 8010ad4:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8010ad8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010adc:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8010ae0:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8010ae4:	ee25 5a04 	vmul.f32	s10, s10, s8
 8010ae8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010aec:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010af0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010af4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010af8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010afc:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8010b00:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8010b04:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8010b08:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8010b0c:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8010b10:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8010b14:	f7fa fbac 	bl	800b270 <getRotationMatrix>
 8010b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b20:	682e      	ldr	r6, [r5, #0]
 8010b22:	6026      	str	r6, [r4, #0]
 8010b24:	ad66      	add	r5, sp, #408	; 0x198
 8010b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b28:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b32:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8010b36:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8010b3a:	6026      	str	r6, [r4, #0]
 8010b3c:	eef0 7ae7 	vabs.f32	s15, s15
 8010b40:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4c:	f100 81df 	bmi.w	8010f0e <kalman_3gyro.constprop.0+0x4ba6>
 8010b50:	2307      	movs	r3, #7
 8010b52:	f04f 0c04 	mov.w	ip, #4
 8010b56:	9305      	str	r3, [sp, #20]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4662      	mov	r2, ip
 8010b5c:	2003      	movs	r0, #3
 8010b5e:	2706      	movs	r7, #6
 8010b60:	f04f 0e01 	mov.w	lr, #1
 8010b64:	9304      	str	r3, [sp, #16]
 8010b66:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8010b6a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b76:	f340 8296 	ble.w	80110a6 <kalman_3gyro.constprop.0+0x4d3e>
 8010b7a:	2306      	movs	r3, #6
 8010b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8010b7e:	2307      	movs	r3, #7
 8010b80:	9305      	str	r3, [sp, #20]
 8010b82:	2300      	movs	r3, #0
 8010b84:	2708      	movs	r7, #8
 8010b86:	f04f 0c04 	mov.w	ip, #4
 8010b8a:	9302      	str	r3, [sp, #8]
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	9707      	str	r7, [sp, #28]
 8010b90:	4662      	mov	r2, ip
 8010b92:	2005      	movs	r0, #5
 8010b94:	f04f 0e01 	mov.w	lr, #1
 8010b98:	9304      	str	r3, [sp, #16]
 8010b9a:	ab66      	add	r3, sp, #408	; 0x198
 8010b9c:	441a      	add	r2, r3
 8010b9e:	9b07      	ldr	r3, [sp, #28]
 8010ba0:	edd2 6a00 	vldr	s13, [r2]
 8010ba4:	9a02      	ldr	r2, [sp, #8]
 8010ba6:	a966      	add	r1, sp, #408	; 0x198
 8010ba8:	440b      	add	r3, r1
 8010baa:	ed93 7a00 	vldr	s14, [r3]
 8010bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bb2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010bb6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010bba:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010bbe:	9a04      	ldr	r2, [sp, #16]
 8010bc0:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8010bc4:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010bc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bcc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8010bd0:	0080      	lsls	r0, r0, #2
 8010bd2:	900e      	str	r0, [sp, #56]	; 0x38
 8010bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bd6:	940d      	str	r4, [sp, #52]	; 0x34
 8010bd8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010bdc:	edc3 7a00 	vstr	s15, [r3]
 8010be0:	ed96 7a00 	vldr	s14, [r6]
 8010be4:	edd1 7a00 	vldr	s15, [r1]
 8010be8:	930c      	str	r3, [sp, #48]	; 0x30
 8010bea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010bee:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8010bf2:	0080      	lsls	r0, r0, #2
 8010bf4:	9006      	str	r0, [sp, #24]
 8010bf6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8010bfa:	00bf      	lsls	r7, r7, #2
 8010bfc:	9711      	str	r7, [sp, #68]	; 0x44
 8010bfe:	9f05      	ldr	r7, [sp, #20]
 8010c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c02:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8010c06:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010c0a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	9307      	str	r3, [sp, #28]
 8010c12:	9b02      	ldr	r3, [sp, #8]
 8010c14:	edc6 6a00 	vstr	s13, [r6]
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	9312      	str	r3, [sp, #72]	; 0x48
 8010c24:	9b05      	ldr	r3, [sp, #20]
 8010c26:	ed96 7a00 	vldr	s14, [r6]
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c2e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c34:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010c38:	ed93 6a00 	vldr	s12, [r3]
 8010c3c:	edd2 7a00 	vldr	s15, [r2]
 8010c40:	eee6 7a47 	vfms.f32	s15, s12, s14
 8010c44:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8010c48:	950a      	str	r5, [sp, #40]	; 0x28
 8010c4a:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8010c4e:	edc2 7a00 	vstr	s15, [r2]
 8010c52:	ed96 7a00 	vldr	s14, [r6]
 8010c56:	edd4 7a00 	vldr	s15, [r4]
 8010c5a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010c5e:	edc4 7a00 	vstr	s15, [r4]
 8010c62:	edd0 5a00 	vldr	s11, [r0]
 8010c66:	ed97 7a00 	vldr	s14, [r7]
 8010c6a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010c6e:	eef0 7ae7 	vabs.f32	s15, s15
 8010c72:	ed87 7a00 	vstr	s14, [r7]
 8010c76:	ed90 6a00 	vldr	s12, [r0]
 8010c7a:	ed91 7a00 	vldr	s14, [r1]
 8010c7e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010c82:	ed81 7a00 	vstr	s14, [r1]
 8010c86:	ed92 7a00 	vldr	s14, [r2]
 8010c8a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c96:	dd12      	ble.n	8010cbe <kalman_3gyro.constprop.0+0x4956>
 8010c98:	9a07      	ldr	r2, [sp, #28]
 8010c9a:	9f05      	ldr	r7, [sp, #20]
 8010c9c:	9806      	ldr	r0, [sp, #24]
 8010c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca0:	4673      	mov	r3, lr
 8010ca2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010ca6:	9302      	str	r3, [sp, #8]
 8010ca8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	9206      	str	r2, [sp, #24]
 8010cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cb2:	00ba      	lsls	r2, r7, #2
 8010cb4:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8010cb8:	4605      	mov	r5, r0
 8010cba:	9207      	str	r2, [sp, #28]
 8010cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8010cbe:	9b06      	ldr	r3, [sp, #24]
 8010cc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010cc2:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010cc6:	4413      	add	r3, r2
 8010cc8:	461c      	mov	r4, r3
 8010cca:	462b      	mov	r3, r5
 8010ccc:	4413      	add	r3, r2
 8010cce:	ed94 7a00 	vldr	s14, [r4]
 8010cd2:	edd3 7a00 	vldr	s15, [r3]
 8010cd6:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8010cda:	4618      	mov	r0, r3
 8010cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cde:	4413      	add	r3, r2
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	9b07      	ldr	r3, [sp, #28]
 8010ce4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010ce8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010cec:	440b      	add	r3, r1
 8010cee:	4619      	mov	r1, r3
 8010cf0:	442e      	add	r6, r5
 8010cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cf4:	9607      	str	r6, [sp, #28]
 8010cf6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010cf8:	ed84 2a00 	vstr	s4, [r4]
 8010cfc:	442b      	add	r3, r5
 8010cfe:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 8010d02:	9306      	str	r3, [sp, #24]
 8010d04:	19bb      	adds	r3, r7, r6
 8010d06:	ed92 7a00 	vldr	s14, [r2]
 8010d0a:	edd1 7a00 	vldr	s15, [r1]
 8010d0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010d10:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010d14:	edd3 3a00 	vldr	s7, [r3]
 8010d18:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010d1c:	eee2 7a47 	vfms.f32	s15, s4, s14
 8010d20:	4423      	add	r3, r4
 8010d22:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010d26:	ed93 5a00 	vldr	s10, [r3]
 8010d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2c:	edc1 7a00 	vstr	s15, [r1]
 8010d30:	462f      	mov	r7, r5
 8010d32:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 8010d36:	4629      	mov	r1, r5
 8010d38:	eb05 0c03 	add.w	ip, r5, r3
 8010d3c:	9d04      	ldr	r5, [sp, #16]
 8010d3e:	ed92 1a00 	vldr	s2, [r2]
 8010d42:	4437      	add	r7, r6
 8010d44:	9705      	str	r7, [sp, #20]
 8010d46:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8010d4a:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8010d4e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010d52:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010d56:	4419      	add	r1, r3
 8010d58:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010d5c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8010d60:	191c      	adds	r4, r3, r4
 8010d62:	9b02      	ldr	r3, [sp, #8]
 8010d64:	9104      	str	r1, [sp, #16]
 8010d66:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8010d6a:	9409      	str	r4, [sp, #36]	; 0x24
 8010d6c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8010d70:	463d      	mov	r5, r7
 8010d72:	9904      	ldr	r1, [sp, #16]
 8010d74:	46b6      	mov	lr, r6
 8010d76:	4623      	mov	r3, r4
 8010d78:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010d7c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8010d80:	edd0 7a00 	vldr	s15, [r0]
 8010d84:	9805      	ldr	r0, [sp, #20]
 8010d86:	ed91 0a00 	vldr	s0, [r1]
 8010d8a:	ed90 8a00 	vldr	s16, [r0]
 8010d8e:	eddc 4a00 	vldr	s9, [ip]
 8010d92:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010d96:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8010d9a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010d9e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8010da2:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8010da6:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8010daa:	a85d      	add	r0, sp, #372	; 0x174
 8010dac:	a93e      	add	r1, sp, #248	; 0xf8
 8010dae:	edd7 5a00 	vldr	s11, [r7]
 8010db2:	ed96 6a00 	vldr	s12, [r6]
 8010db6:	9a06      	ldr	r2, [sp, #24]
 8010db8:	ed95 7a00 	vldr	s14, [r5]
 8010dbc:	edd4 6a00 	vldr	s13, [r4]
 8010dc0:	ed93 3a00 	vldr	s6, [r3]
 8010dc4:	edde 7a00 	vldr	s15, [lr]
 8010dc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010dca:	edd2 1a00 	vldr	s3, [r2]
 8010dce:	9e07      	ldr	r6, [sp, #28]
 8010dd0:	eee8 3a45 	vfms.f32	s7, s16, s10
 8010dd4:	eee0 4a45 	vfms.f32	s9, s0, s10
 8010dd8:	eea8 6a65 	vfms.f32	s12, s16, s11
 8010ddc:	eee7 7a48 	vfms.f32	s15, s14, s16
 8010de0:	eee0 6a65 	vfms.f32	s13, s0, s11
 8010de4:	eea7 3a40 	vfms.f32	s6, s14, s0
 8010de8:	ed94 0a00 	vldr	s0, [r4]
 8010dec:	eea2 3a67 	vfms.f32	s6, s4, s15
 8010df0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8010df4:	eee2 6a46 	vfms.f32	s13, s4, s12
 8010df8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8010dfc:	ee64 6a26 	vmul.f32	s13, s8, s13
 8010e00:	ee64 4a24 	vmul.f32	s9, s8, s9
 8010e04:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010e08:	eea1 6a66 	vfms.f32	s12, s2, s13
 8010e0c:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8010e10:	eee4 7a41 	vfms.f32	s15, s8, s2
 8010e14:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8010e18:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8010e1c:	eea4 7a61 	vfms.f32	s14, s8, s3
 8010e20:	ed96 3a00 	vldr	s6, [r6]
 8010e24:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8010e28:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010e2c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e30:	ee22 6a86 	vmul.f32	s12, s5, s12
 8010e34:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8010e38:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8010e3c:	eee3 5a46 	vfms.f32	s11, s6, s12
 8010e40:	ee27 7a02 	vmul.f32	s14, s14, s4
 8010e44:	ee22 5a05 	vmul.f32	s10, s4, s10
 8010e48:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010e4c:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8010e50:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8010e54:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8010e58:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8010e5c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8010e60:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8010e64:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8010e68:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8010e6c:	f7fa faa0 	bl	800b3b0 <b_dcm2q>
 8010e70:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8010e74:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8010e78:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8010e7c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8010e80:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010e84:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010e88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010e8c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8010e90:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8010e94:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f43d ad20 	beq.w	800e8de <kalman_3gyro.constprop.0+0x2576>
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010ea6:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8010eaa:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8010eae:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010eb2:	f7fd bd9c 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 8010eb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8010eba:	ed93 7a01 	vldr	s14, [r3, #4]
 8010ebe:	edd3 6a03 	vldr	s13, [r3, #12]
 8010ec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ec6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010eca:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010ece:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8010ed2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8010ed6:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8010eda:	f7ff bb12 	b.w	8010502 <kalman_3gyro.constprop.0+0x419a>
 8010ede:	eeb0 7a64 	vmov.f32	s14, s9
 8010ee2:	f7fc bc8b 	b.w	800d7fc <kalman_3gyro.constprop.0+0x1494>
 8010ee6:	eeb0 7a64 	vmov.f32	s14, s9
 8010eea:	f7ff bb94 	b.w	8010616 <kalman_3gyro.constprop.0+0x42ae>
 8010eee:	eeb0 7a64 	vmov.f32	s14, s9
 8010ef2:	f7ff bb50 	b.w	8010596 <kalman_3gyro.constprop.0+0x422e>
 8010ef6:	eeb0 7a64 	vmov.f32	s14, s9
 8010efa:	f7fc bc9f 	b.w	800d83c <kalman_3gyro.constprop.0+0x14d4>
 8010efe:	eeb0 7a64 	vmov.f32	s14, s9
 8010f02:	f7ff bb68 	b.w	80105d6 <kalman_3gyro.constprop.0+0x426e>
 8010f06:	eeb0 7a64 	vmov.f32	s14, s9
 8010f0a:	f7fc bcb7 	b.w	800d87c <kalman_3gyro.constprop.0+0x1514>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	2004      	movs	r0, #4
 8010f12:	2301      	movs	r3, #1
 8010f14:	2406      	movs	r4, #6
 8010f16:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010f1a:	9007      	str	r0, [sp, #28]
 8010f1c:	eef0 7a47 	vmov.f32	s15, s14
 8010f20:	4696      	mov	lr, r2
 8010f22:	f04f 0c03 	mov.w	ip, #3
 8010f26:	2707      	movs	r7, #7
 8010f28:	e61d      	b.n	8010b66 <kalman_3gyro.constprop.0+0x47fe>
 8010f2a:	ed9f bae2 	vldr	s22, [pc, #904]	; 80112b4 <kalman_3gyro.constprop.0+0x4f4c>
 8010f2e:	eeb0 7a64 	vmov.f32	s14, s9
 8010f32:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 8010f36:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3e:	f140 80b9 	bpl.w	80110b4 <kalman_3gyro.constprop.0+0x4d4c>
 8010f42:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 8010f46:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8010f4a:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f4e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f52:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f56:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f5a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f5e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f62:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8010f66:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	f6ff acb3 	blt.w	80108d8 <kalman_3gyro.constprop.0+0x4570>
 8010f72:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8010f76:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7e:	f140 80a0 	bpl.w	80110c2 <kalman_3gyro.constprop.0+0x4d5a>
 8010f82:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8010f86:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8010f8a:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f8e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f92:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f96:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f9a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f9e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010fa2:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8010fa6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fae:	f63f acb3 	bhi.w	8010918 <kalman_3gyro.constprop.0+0x45b0>
 8010fb2:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8010fb6:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbe:	f340 8086 	ble.w	80110ce <kalman_3gyro.constprop.0+0x4d66>
 8010fc2:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8010fc6:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8010fca:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fce:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fd2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010fd6:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010fda:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010fde:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010fe2:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8010fe6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fee:	f63f acb3 	bhi.w	8010958 <kalman_3gyro.constprop.0+0x45f0>
 8010ff2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8010ff6:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffe:	dd69      	ble.n	80110d4 <kalman_3gyro.constprop.0+0x4d6c>
 8011000:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8011004:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011008:	ee38 3a47 	vsub.f32	s6, s16, s14
 801100c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011010:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011014:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011018:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801101c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011020:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011024:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102c:	f63f acb4 	bhi.w	8010998 <kalman_3gyro.constprop.0+0x4630>
 8011030:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8011034:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	f77f acb4 	ble.w	80109a8 <kalman_3gyro.constprop.0+0x4640>
 8011040:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011044:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011048:	ee78 3a64 	vsub.f32	s7, s16, s9
 801104c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011050:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011054:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011058:	ee85 ba07 	vdiv.f32	s22, s10, s14
 801105c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011060:	f7fc bb7c 	b.w	800d75c <kalman_3gyro.constprop.0+0x13f4>
 8011064:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011068:	eddf 7a93 	vldr	s15, [pc, #588]	; 80112b8 <kalman_3gyro.constprop.0+0x4f50>
 801106c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80112bc <kalman_3gyro.constprop.0+0x4f54>
 8011070:	3301      	adds	r3, #1
 8011072:	b29b      	uxth	r3, r3
 8011074:	2b31      	cmp	r3, #49	; 0x31
 8011076:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801107a:	bf98      	it	ls
 801107c:	eef0 7a47 	vmovls.f32	s15, s14
 8011080:	f7fd bc1c 	b.w	800e8bc <kalman_3gyro.constprop.0+0x2554>
 8011084:	2a0a      	cmp	r2, #10
 8011086:	d02c      	beq.n	80110e2 <kalman_3gyro.constprop.0+0x4d7a>
 8011088:	2100      	movs	r1, #0
 801108a:	3201      	adds	r2, #1
 801108c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011090:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011094:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011098:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801109c:	f7fd bca7 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 80110a0:	eeb0 7a64 	vmov.f32	s14, s9
 80110a4:	e7a5      	b.n	8010ff2 <kalman_3gyro.constprop.0+0x4c8a>
 80110a6:	2305      	movs	r3, #5
 80110a8:	2108      	movs	r1, #8
 80110aa:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 80110ae:	2302      	movs	r3, #2
 80110b0:	9302      	str	r3, [sp, #8]
 80110b2:	e572      	b.n	8010b9a <kalman_3gyro.constprop.0+0x4832>
 80110b4:	eeb0 7a64 	vmov.f32	s14, s9
 80110b8:	f7ff bbf6 	b.w	80108a8 <kalman_3gyro.constprop.0+0x4540>
 80110bc:	eeb0 7a64 	vmov.f32	s14, s9
 80110c0:	e757      	b.n	8010f72 <kalman_3gyro.constprop.0+0x4c0a>
 80110c2:	eeb0 7a64 	vmov.f32	s14, s9
 80110c6:	e40f      	b.n	80108e8 <kalman_3gyro.constprop.0+0x4580>
 80110c8:	eeb0 7a64 	vmov.f32	s14, s9
 80110cc:	e771      	b.n	8010fb2 <kalman_3gyro.constprop.0+0x4c4a>
 80110ce:	eeb0 7a64 	vmov.f32	s14, s9
 80110d2:	e429      	b.n	8010928 <kalman_3gyro.constprop.0+0x45c0>
 80110d4:	eeb0 7a64 	vmov.f32	s14, s9
 80110d8:	e446      	b.n	8010968 <kalman_3gyro.constprop.0+0x4600>
 80110da:	ed9f ea76 	vldr	s28, [pc, #472]	; 80112b4 <kalman_3gyro.constprop.0+0x4f4c>
 80110de:	f7fc bb6d 	b.w	800d7bc <kalman_3gyro.constprop.0+0x1454>
 80110e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110e4:	ed94 3a00 	vldr	s6, [r4]
 80110e8:	edd2 5a00 	vldr	s11, [r2]
 80110ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80110ee:	edd0 3a00 	vldr	s7, [r0]
 80110f2:	ed92 1a00 	vldr	s2, [r2]
 80110f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110f8:	ed91 4a00 	vldr	s8, [r1]
 80110fc:	edd2 4a00 	vldr	s9, [r2]
 8011100:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011102:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011106:	ed92 2a00 	vldr	s4, [r2]
 801110a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801110c:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011110:	edd2 7a00 	vldr	s15, [r2]
 8011114:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011116:	edd2 2a00 	vldr	s5, [r2]
 801111a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801111c:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011120:	edd2 1a00 	vldr	s3, [r2]
 8011124:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011126:	ee74 4a82 	vadd.f32	s9, s9, s4
 801112a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801112e:	ed92 3a00 	vldr	s6, [r2]
 8011132:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011134:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011138:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801113c:	edd2 3a00 	vldr	s7, [r2]
 8011140:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011142:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011146:	ed92 4a00 	vldr	s8, [r2]
 801114a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801114c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011150:	ed92 2a00 	vldr	s4, [r2]
 8011154:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011156:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 801115a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 801115e:	edd2 2a00 	vldr	s5, [r2]
 8011162:	ed91 3a00 	vldr	s6, [r1]
 8011166:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801116a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801116e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011172:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011176:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 801117a:	ed90 4a00 	vldr	s8, [r0]
 801117e:	edd2 3a00 	vldr	s7, [r2]
 8011182:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011186:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 801118a:	ed91 2a00 	vldr	s4, [r1]
 801118e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011192:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011196:	ee74 4a83 	vadd.f32	s9, s9, s6
 801119a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 801119e:	ee75 5a84 	vadd.f32	s11, s11, s8
 80111a2:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 80111a6:	ed90 4a00 	vldr	s8, [r0]
 80111aa:	edd2 2a00 	vldr	s5, [r2]
 80111ae:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 80111b2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80111b6:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 80111ba:	edd1 3a00 	vldr	s7, [r1]
 80111be:	ed90 3a00 	vldr	s6, [r0]
 80111c2:	ee74 4a82 	vadd.f32	s9, s9, s4
 80111c6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80111ca:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 80111ce:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 80111d2:	ed92 4a00 	vldr	s8, [r2]
 80111d6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80111da:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80111de:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 80111e2:	edd0 3a00 	vldr	s7, [r0]
 80111e6:	edd4 2a00 	vldr	s5, [r4]
 80111ea:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80111ee:	ee75 5a83 	vadd.f32	s11, s11, s6
 80111f2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80111f6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80111fa:	ed91 3a00 	vldr	s6, [r1]
 80111fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011202:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011206:	ed92 4a00 	vldr	s8, [r2]
 801120a:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 801120e:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011212:	edd4 3a00 	vldr	s7, [r4]
 8011216:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 801121a:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801121e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011222:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011226:	ed91 4a00 	vldr	s8, [r1]
 801122a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801122e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011232:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011236:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 801123a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801123e:	edc1 4a00 	vstr	s9, [r1]
 8011242:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011246:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801124a:	edc1 5a00 	vstr	s11, [r1]
 801124e:	f240 1501 	movw	r5, #257	; 0x101
 8011252:	3201      	adds	r2, #1
 8011254:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011258:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 801125c:	edc1 7a00 	vstr	s15, [r1]
 8011260:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011264:	2800      	cmp	r0, #0
 8011266:	f43d abc2 	beq.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 801126a:	2200      	movs	r2, #0
 801126c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011270:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011274:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011278:	f88b 2001 	strb.w	r2, [fp, #1]
 801127c:	f7fd bbb7 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 8011280:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011284:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011288:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801128c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011290:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011294:	f7fd bb20 	b.w	800e8d8 <kalman_3gyro.constprop.0+0x2570>
 8011298:	2a00      	cmp	r2, #0
 801129a:	f340 80c1 	ble.w	8011420 <kalman_3gyro.constprop.0+0x50b8>
 801129e:	2300      	movs	r3, #0
 80112a0:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80112a4:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80112a8:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80112ac:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80112b0:	f7fc bfcf 	b.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 80112b4:	00000000 	.word	0x00000000
 80112b8:	3e4cccce 	.word	0x3e4cccce
 80112bc:	3eaaaaab 	.word	0x3eaaaaab
 80112c0:	3e999998 	.word	0x3e999998
 80112c4:	3f99999a 	.word	0x3f99999a
 80112c8:	3dccccd0 	.word	0x3dccccd0
 80112cc:	3f8ccccd 	.word	0x3f8ccccd
 80112d0:	3e4ccccd 	.word	0x3e4ccccd
 80112d4:	3d088889 	.word	0x3d088889
 80112d8:	3d0d3dcb 	.word	0x3d0d3dcb
 80112dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80112e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e8:	d55b      	bpl.n	80113a2 <kalman_3gyro.constprop.0+0x503a>
 80112ea:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80112c8 <kalman_3gyro.constprop.0+0x4f60>
 80112ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80112f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80112fa:	eef0 5a66 	vmov.f32	s11, s13
 80112fe:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011302:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130a:	eeb0 7a65 	vmov.f32	s14, s11
 801130e:	db5b      	blt.n	80113c8 <kalman_3gyro.constprop.0+0x5060>
 8011310:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131c:	d55b      	bpl.n	80113d6 <kalman_3gyro.constprop.0+0x506e>
 801131e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011322:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011326:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80112c0 <kalman_3gyro.constprop.0+0x4f58>
 801132a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80112c4 <kalman_3gyro.constprop.0+0x4f5c>
 801132e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011332:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011336:	eef4 7ae6 	vcmpe.f32	s15, s13
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	db5b      	blt.n	80113f8 <kalman_3gyro.constprop.0+0x5090>
 8011340:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134c:	d55b      	bpl.n	8011406 <kalman_3gyro.constprop.0+0x509e>
 801134e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011356:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801135a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801135e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011362:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011366:	f7ff bb7e 	b.w	8010a66 <kalman_3gyro.constprop.0+0x46fe>
 801136a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 801136e:	2b27      	cmp	r3, #39	; 0x27
 8011370:	f200 80c3 	bhi.w	80114fa <kalman_3gyro.constprop.0+0x5192>
 8011374:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011378:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 801137c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011380:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011384:	2201      	movs	r2, #1
 8011386:	4413      	add	r3, r2
 8011388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801138c:	bf14      	ite	ne
 801138e:	b29b      	uxthne	r3, r3
 8011390:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011394:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011398:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801139c:	9b01      	ldr	r3, [sp, #4]
 801139e:	f7fd bb26 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 80113a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ae:	d5af      	bpl.n	8011310 <kalman_3gyro.constprop.0+0x4fa8>
 80113b0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80113b4:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 80112c8 <kalman_3gyro.constprop.0+0x4f60>
 80113b8:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80112cc <kalman_3gyro.constprop.0+0x4f64>
 80113bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80113c0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80113c4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80113c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d4:	dbad      	blt.n	8011332 <kalman_3gyro.constprop.0+0x4fca>
 80113d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80113da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e2:	d5ad      	bpl.n	8011340 <kalman_3gyro.constprop.0+0x4fd8>
 80113e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80113ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80113f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80113f4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80113f8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80113fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	dbad      	blt.n	8011362 <kalman_3gyro.constprop.0+0x4ffa>
 8011406:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801140a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801140e:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 80112d0 <kalman_3gyro.constprop.0+0x4f68>
 8011412:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011416:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801141a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801141e:	e7a0      	b.n	8011362 <kalman_3gyro.constprop.0+0x4ffa>
 8011420:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011424:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011428:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 801142c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011430:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011434:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011438:	ee67 7a86 	vmul.f32	s15, s15, s12
 801143c:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011440:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011444:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011448:	f7fc bf03 	b.w	800e252 <kalman_3gyro.constprop.0+0x1eea>
 801144c:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 80112d4 <kalman_3gyro.constprop.0+0x4f6c>
 8011450:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 80112d8 <kalman_3gyro.constprop.0+0x4f70>
 8011454:	ac33      	add	r4, sp, #204	; 0xcc
 8011456:	f04f 30ff 	mov.w	r0, #4294967295
 801145a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 801145e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011462:	eef0 7a66 	vmov.f32	s15, s13
 8011466:	3001      	adds	r0, #1
 8011468:	461a      	mov	r2, r3
 801146a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 801146e:	320c      	adds	r2, #12
 8011470:	428a      	cmp	r2, r1
 8011472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011476:	d1f8      	bne.n	801146a <kalman_3gyro.constprop.0+0x5102>
 8011478:	ee27 7a84 	vmul.f32	s14, s15, s8
 801147c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011480:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011484:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011488:	330c      	adds	r3, #12
 801148a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801148e:	428b      	cmp	r3, r1
 8011490:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011494:	d1f6      	bne.n	8011484 <kalman_3gyro.constprop.0+0x511c>
 8011496:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801149a:	2802      	cmp	r0, #2
 801149c:	f103 0104 	add.w	r1, r3, #4
 80114a0:	ece4 6a01 	vstmia	r4!, {s13}
 80114a4:	d1d9      	bne.n	801145a <kalman_3gyro.constprop.0+0x50f2>
 80114a6:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 80114aa:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 80114ae:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 80114b2:	eef1 3ae7 	vsqrt.f32	s7, s15
 80114b6:	eeb1 4ae6 	vsqrt.f32	s8, s13
 80114ba:	eef1 4ac7 	vsqrt.f32	s9, s14
 80114be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114c2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80114c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114ca:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 80114ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d6:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 80114da:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 80114de:	f57d aa62 	bpl.w	800e9a6 <kalman_3gyro.constprop.0+0x263e>
 80114e2:	2200      	movs	r2, #0
 80114e4:	9b01      	ldr	r3, [sp, #4]
 80114e6:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 80114ea:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 80114ee:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80114f2:	f88b 2001 	strb.w	r2, [fp, #1]
 80114f6:	f7fd ba7a 	b.w	800e9ee <kalman_3gyro.constprop.0+0x2686>
 80114fa:	9b08      	ldr	r3, [sp, #32]
 80114fc:	6999      	ldr	r1, [r3, #24]
 80114fe:	69da      	ldr	r2, [r3, #28]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	9181      	str	r1, [sp, #516]	; 0x204
 8011504:	9282      	str	r2, [sp, #520]	; 0x208
 8011506:	9383      	str	r3, [sp, #524]	; 0x20c
 8011508:	e73a      	b.n	8011380 <kalman_3gyro.constprop.0+0x5018>
 801150a:	bf00      	nop
 801150c:	0000      	movs	r0, r0
	...

08011510 <iNemoEngine_API_Update>:
 8011510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	ed2d 8b0c 	vpush	{d8-d13}
 8011518:	4604      	mov	r4, r0
 801151a:	b0c1      	sub	sp, #260	; 0x104
 801151c:	460d      	mov	r5, r1
 801151e:	4617      	mov	r7, r2
 8011520:	eeb0 8a40 	vmov.f32	s16, s0
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 8253 	beq.w	80119d0 <iNemoEngine_API_Update+0x4c0>
 801152a:	461e      	mov	r6, r3
 801152c:	463b      	mov	r3, r7
 801152e:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011532:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011536:	6859      	ldr	r1, [r3, #4]
 8011538:	689a      	ldr	r2, [r3, #8]
 801153a:	ab33      	add	r3, sp, #204	; 0xcc
 801153c:	c307      	stmia	r3!, {r0, r1, r2}
 801153e:	6879      	ldr	r1, [r7, #4]
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	6838      	ldr	r0, [r7, #0]
 8011544:	ab30      	add	r3, sp, #192	; 0xc0
 8011546:	c307      	stmia	r3!, {r0, r1, r2}
 8011548:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801154c:	6879      	ldr	r1, [r7, #4]
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	ab36      	add	r3, sp, #216	; 0xd8
 8011552:	c307      	stmia	r3!, {r0, r1, r2}
 8011554:	f1bc 0f00 	cmp.w	ip, #0
 8011558:	d005      	beq.n	8011566 <iNemoEngine_API_Update+0x56>
 801155a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 801155e:	7923      	ldrb	r3, [r4, #4]
 8011560:	429a      	cmp	r2, r3
 8011562:	f080 829b 	bcs.w	8011a9c <iNemoEngine_API_Update+0x58c>
 8011566:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 801156a:	f10d 0a14 	add.w	sl, sp, #20
 801156e:	2300      	movs	r3, #0
 8011570:	4649      	mov	r1, r9
 8011572:	4650      	mov	r0, sl
 8011574:	aa33      	add	r2, sp, #204	; 0xcc
 8011576:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801157a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801157e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011582:	f7f9 fb63 	bl	800ac4c <rotVect>
 8011586:	aa36      	add	r2, sp, #216	; 0xd8
 8011588:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801158c:	a808      	add	r0, sp, #32
 801158e:	f7f9 fb5d 	bl	800ac4c <rotVect>
 8011592:	aa30      	add	r2, sp, #192	; 0xc0
 8011594:	4640      	mov	r0, r8
 8011596:	f104 0143 	add.w	r1, r4, #67	; 0x43
 801159a:	f7f9 fb57 	bl	800ac4c <rotVect>
 801159e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80115a2:	b923      	cbnz	r3, 80115ae <iNemoEngine_API_Update+0x9e>
 80115a4:	4b8c      	ldr	r3, [pc, #560]	; (80117d8 <iNemoEngine_API_Update+0x2c8>)
 80115a6:	930c      	str	r3, [sp, #48]	; 0x30
 80115a8:	2200      	movs	r2, #0
 80115aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80115ac:	930d      	str	r3, [sp, #52]	; 0x34
 80115ae:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 80115b2:	2f09      	cmp	r7, #9
 80115b4:	d851      	bhi.n	801165a <iNemoEngine_API_Update+0x14a>
 80115b6:	ed9d ba06 	vldr	s22, [sp, #24]
 80115ba:	eddd ba05 	vldr	s23, [sp, #20]
 80115be:	eddd aa07 	vldr	s21, [sp, #28]
 80115c2:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80115c6:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80115ca:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80115ce:	eeea 7aaa 	vfma.f32	s15, s21, s21
 80115d2:	ee17 0a90 	vmov	r0, s15
 80115d6:	f7ee ff5b 	bl	8000490 <__aeabi_f2d>
 80115da:	ec41 0b10 	vmov	d0, r0, r1
 80115de:	f003 fecd 	bl	801537c <sqrt>
 80115e2:	ec51 0b10 	vmov	r0, r1, d0
 80115e6:	f7ef fa5b 	bl	8000aa0 <__aeabi_d2f>
 80115ea:	ee07 0a90 	vmov	s15, r0
 80115ee:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 80115f2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 80115f6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 80115fa:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 80115fe:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011602:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011606:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801160a:	ee2b ba07 	vmul.f32	s22, s22, s14
 801160e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011612:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011616:	ee17 0a90 	vmov	r0, s15
 801161a:	edcd ba05 	vstr	s23, [sp, #20]
 801161e:	ed8d ba06 	vstr	s22, [sp, #24]
 8011622:	edcd aa07 	vstr	s21, [sp, #28]
 8011626:	f7ee ff33 	bl	8000490 <__aeabi_f2d>
 801162a:	ec41 0b10 	vmov	d0, r0, r1
 801162e:	f003 fea5 	bl	801537c <sqrt>
 8011632:	ec51 0b10 	vmov	r0, r1, d0
 8011636:	f7ef fa33 	bl	8000aa0 <__aeabi_d2f>
 801163a:	ee07 0a90 	vmov	s15, r0
 801163e:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011642:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011646:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801164a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801164e:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011652:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011656:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 801165a:	7923      	ldrb	r3, [r4, #4]
 801165c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011660:	429a      	cmp	r2, r3
 8011662:	f080 80dd 	bcs.w	8011820 <iNemoEngine_API_Update+0x310>
 8011666:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801166a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801166e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011672:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011676:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801167a:	3701      	adds	r7, #1
 801167c:	aa33      	add	r2, sp, #204	; 0xcc
 801167e:	4649      	mov	r1, r9
 8011680:	4640      	mov	r0, r8
 8011682:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	f7f9 fae0 	bl	800ac4c <rotVect>
 801168c:	9b03      	ldr	r3, [sp, #12]
 801168e:	f8db 1000 	ldr.w	r1, [fp]
 8011692:	6818      	ldr	r0, [r3, #0]
 8011694:	f8da 2000 	ldr.w	r2, [sl]
 8011698:	6833      	ldr	r3, [r6, #0]
 801169a:	61ab      	str	r3, [r5, #24]
 801169c:	60e8      	str	r0, [r5, #12]
 801169e:	6129      	str	r1, [r5, #16]
 80116a0:	616a      	str	r2, [r5, #20]
 80116a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80116ac:	4641      	mov	r1, r8
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	462a      	mov	r2, r5
 80116b2:	f105 031c 	add.w	r3, r5, #28
 80116b6:	f105 000c 	add.w	r0, r5, #12
 80116ba:	f7fa fd85 	bl	800c1c8 <output_update>
 80116be:	ed95 8a00 	vldr	s16, [r5]
 80116c2:	edd5 9a01 	vldr	s19, [r5, #4]
 80116c6:	eeb0 0a48 	vmov.f32	s0, s16
 80116ca:	f003 fdeb 	bl	80152a4 <sinf>
 80116ce:	eddf 7a43 	vldr	s15, [pc, #268]	; 80117dc <iNemoEngine_API_Update+0x2cc>
 80116d2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80117e0 <iNemoEngine_API_Update+0x2d0>
 80116d6:	ee60 8a00 	vmul.f32	s17, s0, s0
 80116da:	eef0 6ae9 	vabs.f32	s13, s19
 80116de:	eee8 7aa7 	vfma.f32	s15, s17, s15
 80116e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80116e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ea:	eef0 8a67 	vmov.f32	s17, s15
 80116ee:	d56e      	bpl.n	80117ce <iNemoEngine_API_Update+0x2be>
 80116f0:	eeb0 0a69 	vmov.f32	s0, s19
 80116f4:	f003 fe18 	bl	8015328 <tanf>
 80116f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116fc:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011700:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011704:	eddf 6a37 	vldr	s13, [pc, #220]	; 80117e4 <iNemoEngine_API_Update+0x2d4>
 8011708:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80117f8 <iNemoEngine_API_Update+0x2e8>
 801170c:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8011710:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011714:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171c:	bf88      	it	hi
 801171e:	eef0 7a66 	vmovhi.f32	s15, s13
 8011722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	bfb8      	it	lt
 801172c:	eef0 7a47 	vmovlt.f32	s15, s14
 8011730:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011734:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011738:	4c2b      	ldr	r4, [pc, #172]	; (80117e8 <iNemoEngine_API_Update+0x2d8>)
 801173a:	bba3      	cbnz	r3, 80117a6 <iNemoEngine_API_Update+0x296>
 801173c:	6820      	ldr	r0, [r4, #0]
 801173e:	edd5 0a08 	vldr	s1, [r5, #32]
 8011742:	ed95 0a07 	vldr	s0, [r5, #28]
 8011746:	edd5 9a03 	vldr	s19, [r5, #12]
 801174a:	ed95 aa04 	vldr	s20, [r5, #16]
 801174e:	ed95 9a05 	vldr	s18, [r5, #20]
 8011752:	edd5 8a06 	vldr	s17, [r5, #24]
 8011756:	f7f9 fb4b 	bl	800adf0 <findDirection>
 801175a:	6020      	str	r0, [r4, #0]
 801175c:	2805      	cmp	r0, #5
 801175e:	f200 833d 	bhi.w	8011ddc <iNemoEngine_API_Update+0x8cc>
 8011762:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011766:	000a      	.short	0x000a
 8011768:	00060137 	.word	0x00060137
 801176c:	00060169 	.word	0x00060169
 8011770:	000a      	.short	0x000a
 8011772:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80117ec <iNemoEngine_API_Update+0x2dc>
 8011776:	ee38 8a27 	vadd.f32	s16, s16, s15
 801177a:	eddf 7a28 	vldr	s15, [pc, #160]	; 801181c <iNemoEngine_API_Update+0x30c>
 801177e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011786:	bfa8      	it	ge
 8011788:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801178c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011794:	f100 8111 	bmi.w	80119ba <iNemoEngine_API_Update+0x4aa>
 8011798:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801179c:	b041      	add	sp, #260	; 0x104
 801179e:	ecbd 8b0c 	vpop	{d8-d13}
 80117a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a6:	ed95 9a05 	vldr	s18, [r5, #20]
 80117aa:	6820      	ldr	r0, [r4, #0]
 80117ac:	edd5 0a07 	vldr	s1, [r5, #28]
 80117b0:	ed95 0a08 	vldr	s0, [r5, #32]
 80117b4:	edd5 9a04 	vldr	s19, [r5, #16]
 80117b8:	ed95 aa03 	vldr	s20, [r5, #12]
 80117bc:	edd5 8a06 	vldr	s17, [r5, #24]
 80117c0:	eeb1 1a41 	vneg.f32	s2, s2
 80117c4:	eeb1 9a49 	vneg.f32	s18, s18
 80117c8:	f7f9 fb12 	bl	800adf0 <findDirection>
 80117cc:	e7c5      	b.n	801175a <iNemoEngine_API_Update+0x24a>
 80117ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 80117f0 <iNemoEngine_API_Update+0x2e0>
 80117d2:	eea8 9aa7 	vfma.f32	s18, s17, s15
 80117d6:	e793      	b.n	8011700 <iNemoEngine_API_Update+0x1f0>
 80117d8:	3f333333 	.word	0x3f333333
 80117dc:	00000000 	.word	0x00000000
 80117e0:	3fbc430e 	.word	0x3fbc430e
 80117e4:	40490fdb 	.word	0x40490fdb
 80117e8:	20000178 	.word	0x20000178
 80117ec:	43340000 	.word	0x43340000
 80117f0:	42c6ab07 	.word	0x42c6ab07
 80117f4:	3c03126f 	.word	0x3c03126f
 80117f8:	3c8efa35 	.word	0x3c8efa35
 80117fc:	3e4ccccd 	.word	0x3e4ccccd
 8011800:	3fb50481 	.word	0x3fb50481
 8011804:	3ed93dd9 	.word	0x3ed93dd9
 8011808:	3b656042 	.word	0x3b656042
 801180c:	42c80000 	.word	0x42c80000
 8011810:	3a83126f 	.word	0x3a83126f
 8011814:	3d4ccccd 	.word	0x3d4ccccd
 8011818:	3f333333 	.word	0x3f333333
 801181c:	43b40000 	.word	0x43b40000
 8011820:	ee07 3a90 	vmov	s15, r3
 8011824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011828:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80117f4 <iNemoEngine_API_Update+0x2e4>
 801182c:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80117f8 <iNemoEngine_API_Update+0x2e8>
 8011830:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8011808 <iNemoEngine_API_Update+0x2f8>
 8011834:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8011804 <iNemoEngine_API_Update+0x2f4>
 8011838:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8011800 <iNemoEngine_API_Update+0x2f0>
 801183c:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80117fc <iNemoEngine_API_Update+0x2ec>
 8011840:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011844:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011848:	ee85 5a81 	vdiv.f32	s10, s11, s2
 801184c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011850:	2700      	movs	r7, #0
 8011852:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011856:	f04f 0c00 	mov.w	ip, #0
 801185a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 801185e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011862:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011866:	edd3 5a00 	vldr	s11, [r3]
 801186a:	f8c3 c000 	str.w	ip, [r3]
 801186e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011872:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011876:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801187a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801187e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011882:	edd7 4a00 	vldr	s9, [r7]
 8011886:	f8c7 c000 	str.w	ip, [r7]
 801188a:	ed93 5a00 	vldr	s10, [r3]
 801188e:	f8c3 c000 	str.w	ip, [r3]
 8011892:	7963      	ldrb	r3, [r4, #5]
 8011894:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011898:	ee25 5a04 	vmul.f32	s10, s10, s8
 801189c:	ee65 5a84 	vmul.f32	s11, s11, s8
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	eec3 3a27 	vdiv.f32	s7, s6, s15
 80118a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80118aa:	ee27 6a86 	vmul.f32	s12, s15, s12
 80118ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118b2:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 80118b6:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 80118ba:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80118be:	f000 812e 	beq.w	8011b1e <iNemoEngine_API_Update+0x60e>
 80118c2:	2b02      	cmp	r3, #2
 80118c4:	f000 8122 	beq.w	8011b0c <iNemoEngine_API_Update+0x5fc>
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f000 80ef 	beq.w	8011aac <iNemoEngine_API_Update+0x59c>
 80118ce:	edd4 0a05 	vldr	s1, [r4, #20]
 80118d2:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 801180c <iNemoEngine_API_Update+0x2fc>
 80118d6:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8011810 <iNemoEngine_API_Update+0x300>
 80118da:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80118de:	ee60 0a85 	vmul.f32	s1, s1, s10
 80118e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80118e6:	8863      	ldrh	r3, [r4, #2]
 80118e8:	1e5a      	subs	r2, r3, #1
 80118ea:	2a12      	cmp	r2, #18
 80118ec:	f200 80e7 	bhi.w	8011abe <iNemoEngine_API_Update+0x5ae>
 80118f0:	3301      	adds	r3, #1
 80118f2:	b21a      	sxth	r2, r3
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	8062      	strh	r2, [r4, #2]
 80118fa:	f240 8115 	bls.w	8011b28 <iNemoEngine_API_Update+0x618>
 80118fe:	ee05 2a90 	vmov	s11, r2
 8011902:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8011814 <iNemoEngine_API_Update+0x304>
 8011906:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801190a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801190e:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011912:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8011916:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 801191a:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8011818 <iNemoEngine_API_Update+0x308>
 801191e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011922:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011926:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801192a:	ee26 6a25 	vmul.f32	s12, s12, s11
 801192e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011932:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8011936:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801193a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801193e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011942:	aa1a      	add	r2, sp, #104	; 0x68
 8011944:	af16      	add	r7, sp, #88	; 0x58
 8011946:	e9cd 7200 	strd	r7, r2, [sp]
 801194a:	ab12      	add	r3, sp, #72	; 0x48
 801194c:	aa1e      	add	r2, sp, #120	; 0x78
 801194e:	4641      	mov	r1, r8
 8011950:	4620      	mov	r0, r4
 8011952:	f7fa fd09 	bl	800c368 <kalman_3gyro.constprop.0>
 8011956:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011958:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 801195c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8011960:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8011964:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8011968:	f8c7 a000 	str.w	sl, [r7]
 801196c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8011970:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011974:	f8c7 e000 	str.w	lr, [r7]
 8011978:	f604 1748 	addw	r7, r4, #2376	; 0x948
 801197c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011980:	f8c7 c000 	str.w	ip, [r7]
 8011984:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011988:	6030      	str	r0, [r6, #0]
 801198a:	60f3      	str	r3, [r6, #12]
 801198c:	6071      	str	r1, [r6, #4]
 801198e:	60b2      	str	r2, [r6, #8]
 8011990:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011994:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011998:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801199c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801199e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 80119a2:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 80119a6:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80119aa:	edc3 7a00 	vstr	s15, [r3]
 80119ae:	f8cb e000 	str.w	lr, [fp]
 80119b2:	f8ca c000 	str.w	ip, [sl]
 80119b6:	6030      	str	r0, [r6, #0]
 80119b8:	e65f      	b.n	801167a <iNemoEngine_API_Update+0x16a>
 80119ba:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 801181c <iNemoEngine_API_Update+0x30c>
 80119be:	ee38 8a27 	vadd.f32	s16, s16, s15
 80119c2:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80119c6:	b041      	add	sp, #260	; 0x104
 80119c8:	ecbd 8b0c 	vpop	{d8-d13}
 80119cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d0:	ae0e      	add	r6, sp, #56	; 0x38
 80119d2:	e5ab      	b.n	801152c <iNemoEngine_API_Update+0x1c>
 80119d4:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80119d8:	ee69 8a28 	vmul.f32	s17, s18, s17
 80119dc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80119e0:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80119e4:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80119e8:	eee9 7a49 	vfms.f32	s15, s18, s18
 80119ec:	ee17 0a90 	vmov	r0, s15
 80119f0:	f7ee fd4e 	bl	8000490 <__aeabi_f2d>
 80119f4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80119f8:	4602      	mov	r2, r0
 80119fa:	460b      	mov	r3, r1
 80119fc:	ee17 0a90 	vmov	r0, s15
 8011a00:	ec43 2b18 	vmov	d8, r2, r3
 8011a04:	f7ee fd44 	bl	8000490 <__aeabi_f2d>
 8011a08:	eeb0 1a48 	vmov.f32	s2, s16
 8011a0c:	eef0 1a68 	vmov.f32	s3, s17
 8011a10:	ec41 0b10 	vmov	d0, r0, r1
 8011a14:	f003 fcb0 	bl	8015378 <atan2>
 8011a18:	a3f3      	add	r3, pc, #972	; (adr r3, 8011de8 <iNemoEngine_API_Update+0x8d8>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	ec51 0b10 	vmov	r0, r1, d0
 8011a22:	f7ee fd8d 	bl	8000540 <__aeabi_dmul>
 8011a26:	4bf2      	ldr	r3, [pc, #968]	; (8011df0 <iNemoEngine_API_Update+0x8e0>)
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f7ee fbd1 	bl	80001d0 <__aeabi_dsub>
 8011a2e:	f7ef f837 	bl	8000aa0 <__aeabi_d2f>
 8011a32:	ee08 0a10 	vmov	s16, r0
 8011a36:	e6a0      	b.n	801177a <iNemoEngine_API_Update+0x26a>
 8011a38:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011a3c:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011a40:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011a44:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011a48:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011a4c:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011a50:	ee17 0a90 	vmov	r0, s15
 8011a54:	f7ee fd1c 	bl	8000490 <__aeabi_f2d>
 8011a58:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	ee17 0a90 	vmov	r0, s15
 8011a64:	ec43 2b18 	vmov	d8, r2, r3
 8011a68:	f7ee fd12 	bl	8000490 <__aeabi_f2d>
 8011a6c:	eeb0 1a48 	vmov.f32	s2, s16
 8011a70:	eef0 1a68 	vmov.f32	s3, s17
 8011a74:	ec41 0b10 	vmov	d0, r0, r1
 8011a78:	f003 fc7e 	bl	8015378 <atan2>
 8011a7c:	a3da      	add	r3, pc, #872	; (adr r3, 8011de8 <iNemoEngine_API_Update+0x8d8>)
 8011a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a82:	ec51 0b10 	vmov	r0, r1, d0
 8011a86:	f7ee fd5b 	bl	8000540 <__aeabi_dmul>
 8011a8a:	4bd9      	ldr	r3, [pc, #868]	; (8011df0 <iNemoEngine_API_Update+0x8e0>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f7ee fba1 	bl	80001d4 <__adddf3>
 8011a92:	f7ef f805 	bl	8000aa0 <__aeabi_d2f>
 8011a96:	ee08 0a10 	vmov	s16, r0
 8011a9a:	e66e      	b.n	801177a <iNemoEngine_API_Update+0x26a>
 8011a9c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	dd44      	ble.n	8011b2e <iNemoEngine_API_Update+0x61e>
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8011aaa:	e55c      	b.n	8011566 <iNemoEngine_API_Update+0x56>
 8011aac:	8863      	ldrh	r3, [r4, #2]
 8011aae:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8011df4 <iNemoEngine_API_Update+0x8e4>
 8011ab2:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8011df8 <iNemoEngine_API_Update+0x8e8>
 8011ab6:	1e5a      	subs	r2, r3, #1
 8011ab8:	2a12      	cmp	r2, #18
 8011aba:	f67f af19 	bls.w	80118f0 <iNemoEngine_API_Update+0x3e0>
 8011abe:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8011ac2:	eddf 2ace 	vldr	s5, [pc, #824]	; 8011dfc <iNemoEngine_API_Update+0x8ec>
 8011ac6:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8011aca:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011ace:	ee34 4a22 	vadd.f32	s8, s8, s5
 8011ad2:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8011ad6:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8011ada:	2300      	movs	r3, #0
 8011adc:	8063      	strh	r3, [r4, #2]
 8011ade:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8011ae2:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8011ae6:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8011e00 <iNemoEngine_API_Update+0x8f0>
 8011aea:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8011aee:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011af2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011af6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011afa:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8011afe:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011b02:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011b06:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011b0a:	e71a      	b.n	8011942 <iNemoEngine_API_Update+0x432>
 8011b0c:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8011b10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011b14:	edd4 0a05 	vldr	s1, [r4, #20]
 8011b18:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8011e04 <iNemoEngine_API_Update+0x8f4>
 8011b1c:	e6e3      	b.n	80118e6 <iNemoEngine_API_Update+0x3d6>
 8011b1e:	edd4 0a05 	vldr	s1, [r4, #20]
 8011b22:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8011e08 <iNemoEngine_API_Update+0x8f8>
 8011b26:	e6de      	b.n	80118e6 <iNemoEngine_API_Update+0x3d6>
 8011b28:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8011e0c <iNemoEngine_API_Update+0x8fc>
 8011b2c:	e6ef      	b.n	801190e <iNemoEngine_API_Update+0x3fe>
 8011b2e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8011b32:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8011b36:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8011b3a:	ed97 5a00 	vldr	s10, [r7]
 8011b3e:	ed92 da00 	vldr	s26, [r2]
 8011b42:	ed93 6a00 	vldr	s12, [r3]
 8011b46:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8011df4 <iNemoEngine_API_Update+0x8e4>
 8011b4a:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8011b4e:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8011b52:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8011b56:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8011b5a:	ed91 3a00 	vldr	s6, [r1]
 8011b5e:	ed92 1a00 	vldr	s2, [r2]
 8011b62:	ed97 7a00 	vldr	s14, [r7]
 8011b66:	edd3 3a00 	vldr	s7, [r3]
 8011b6a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8011b6e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8011b72:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8011b76:	ed91 ba00 	vldr	s22, [r1]
 8011b7a:	edd0 6a00 	vldr	s13, [r0]
 8011b7e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8011b82:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8011b86:	edd1 aa00 	vldr	s21, [r1]
 8011b8a:	ed92 2a00 	vldr	s4, [r2]
 8011b8e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8011b92:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8011b96:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8011b9a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8011b9e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8011ba2:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8011ba6:	edd0 7a00 	vldr	s15, [r0]
 8011baa:	edd2 1a00 	vldr	s3, [r2]
 8011bae:	ed93 ca00 	vldr	s24, [r3]
 8011bb2:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8011bb6:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8011bba:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 8011bbe:	ed91 5a00 	vldr	s10, [r1]
 8011bc2:	edd0 5a00 	vldr	s11, [r0]
 8011bc6:	edd7 9a00 	vldr	s19, [r7]
 8011bca:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8011bce:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8011bd2:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8011bd6:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8011bda:	edd0 2a00 	vldr	s5, [r0]
 8011bde:	edd3 0a00 	vldr	s1, [r3]
 8011be2:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8011be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bea:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011bee:	edd7 7a00 	vldr	s15, [r7]
 8011bf2:	edd0 5a00 	vldr	s11, [r0]
 8011bf6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8011bfa:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8011bfe:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 8011c02:	ed93 6a00 	vldr	s12, [r3]
 8011c06:	edda ba00 	vldr	s23, [sl]
 8011c0a:	ed99 5a00 	vldr	s10, [r9]
 8011c0e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8011c12:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8011c16:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8011c1a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8011c1e:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8011c22:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8011c26:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8011c2a:	eddc 4a00 	vldr	s9, [ip]
 8011c2e:	edd3 7a00 	vldr	s15, [r3]
 8011c32:	ed98 1a00 	vldr	s2, [r8]
 8011c36:	edde 8a00 	vldr	s17, [lr]
 8011c3a:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8011c3e:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 8011c42:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 8011c46:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8011c4a:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8011c4e:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8011c52:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8011c56:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8011c5a:	ed9c aa00 	vldr	s20, [ip]
 8011c5e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8011c62:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8011c66:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8011c6a:	ed92 da00 	vldr	s26, [r2]
 8011c6e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8011c72:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8011c76:	ed91 ba00 	vldr	s22, [r1]
 8011c7a:	eef0 ca61 	vmov.f32	s25, s3
 8011c7e:	eddb 1a00 	vldr	s3, [fp]
 8011c82:	edd3 ba00 	vldr	s23, [r3]
 8011c86:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8011c8a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8011c8e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8011c92:	1c53      	adds	r3, r2, #1
 8011c94:	eeea 3a83 	vfma.f32	s7, s21, s6
 8011c98:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8011c9c:	edd8 aa00 	vldr	s21, [r8]
 8011ca0:	eee6 1a03 	vfma.f32	s3, s12, s6
 8011ca4:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8011ca8:	ed9e 6a00 	vldr	s12, [lr]
 8011cac:	edd7 aa00 	vldr	s21, [r7]
 8011cb0:	eee6 7a03 	vfma.f32	s15, s12, s6
 8011cb4:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8011cb8:	ed9c 6a00 	vldr	s12, [ip]
 8011cbc:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8011cc0:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8011cc4:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8011cc8:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8011ccc:	ee22 2a00 	vmul.f32	s4, s4, s0
 8011cd0:	ee62 2a80 	vmul.f32	s5, s5, s0
 8011cd4:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8011cd8:	ed90 0a00 	vldr	s0, [r0]
 8011cdc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8011ce0:	ee36 6a00 	vadd.f32	s12, s12, s0
 8011ce4:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8011ce8:	ed91 0a00 	vldr	s0, [r1]
 8011cec:	ee35 5a28 	vadd.f32	s10, s10, s17
 8011cf0:	ee66 6a82 	vmul.f32	s13, s13, s4
 8011cf4:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011cf8:	ee64 5a25 	vmul.f32	s11, s8, s11
 8011cfc:	eee0 4a83 	vfma.f32	s9, s1, s6
 8011d00:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8011d04:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8011d08:	eea1 5a03 	vfma.f32	s10, s2, s6
 8011d0c:	eea0 6a03 	vfma.f32	s12, s0, s6
 8011d10:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011d14:	ee63 3a82 	vmul.f32	s7, s7, s4
 8011d18:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011d1c:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8011d20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011d24:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8011d28:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011d2c:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8011d30:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011d34:	ee62 4a24 	vmul.f32	s9, s4, s9
 8011d38:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011d3c:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8011d40:	eea5 7a05 	vfma.f32	s14, s10, s10
 8011d44:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011d48:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8011d4c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8011d50:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011d54:	ee07 3a90 	vmov	s15, r3
 8011d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011d60:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8011d64:	b21b      	sxth	r3, r3
 8011d66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011d6a:	ee07 2a90 	vmov	s15, r2
 8011d6e:	ed90 4a00 	vldr	s8, [r0]
 8011d72:	edd1 4a00 	vldr	s9, [r1]
 8011d76:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8011d7a:	edd7 7a00 	vldr	s15, [r7]
 8011d7e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8011d82:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011d86:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8011d8a:	ee66 7a05 	vmul.f32	s15, s12, s10
 8011d8e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011d92:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011d96:	edc7 7a00 	vstr	s15, [r7]
 8011d9a:	edc0 6a00 	vstr	s13, [r0]
 8011d9e:	ed81 7a00 	vstr	s14, [r1]
 8011da2:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8011da6:	f47f abde 	bne.w	8011566 <iNemoEngine_API_Update+0x56>
 8011daa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011dae:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011db2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011db6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011dba:	2300      	movs	r3, #0
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	edc4 6a07 	vstr	s13, [r4, #28]
 8011dc2:	ed84 7a08 	vstr	s14, [r4, #32]
 8011dc6:	edc4 7a06 	vstr	s15, [r4, #24]
 8011dca:	603b      	str	r3, [r7, #0]
 8011dcc:	6003      	str	r3, [r0, #0]
 8011dce:	600b      	str	r3, [r1, #0]
 8011dd0:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8011dd4:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8011dd8:	f7ff bbc5 	b.w	8011566 <iNemoEngine_API_Update+0x56>
 8011ddc:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011e10 <iNemoEngine_API_Update+0x900>
 8011de0:	e4da      	b.n	8011798 <iNemoEngine_API_Update+0x288>
 8011de2:	bf00      	nop
 8011de4:	f3af 8000 	nop.w
 8011de8:	20000000 	.word	0x20000000
 8011dec:	404ca5dc 	.word	0x404ca5dc
 8011df0:	40568000 	.word	0x40568000
 8011df4:	3dcccccd 	.word	0x3dcccccd
 8011df8:	3a83126f 	.word	0x3a83126f
 8011dfc:	358637bd 	.word	0x358637bd
 8011e00:	3f333333 	.word	0x3f333333
 8011e04:	3727c5ac 	.word	0x3727c5ac
 8011e08:	3ac49ba6 	.word	0x3ac49ba6
 8011e0c:	3e4ccccd 	.word	0x3e4ccccd
 8011e10:	00000000 	.word	0x00000000

08011e14 <MEMS_getSensorData_I16>:
 8011e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e18:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8011e1c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011e20:	68c5      	ldr	r5, [r0, #12]
 8011e22:	4596      	cmp	lr, r2
 8011e24:	fa1f f882 	uxth.w	r8, r2
 8011e28:	d94d      	bls.n	8011ec6 <MEMS_getSensorData_I16+0xb2>
 8011e2a:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011e2e:	fb04 5313 	mls	r3, r4, r3, r5
 8011e32:	ebae 0c02 	sub.w	ip, lr, r2
 8011e36:	f8a1 8004 	strh.w	r8, [r1, #4]
 8011e3a:	600b      	str	r3, [r1, #0]
 8011e3c:	fa5f fc8c 	uxtb.w	ip, ip
 8011e40:	4647      	mov	r7, r8
 8011e42:	f1b8 0f00 	cmp.w	r8, #0
 8011e46:	d017      	beq.n	8011e78 <MEMS_getSensorData_I16+0x64>
 8011e48:	688e      	ldr	r6, [r1, #8]
 8011e4a:	6905      	ldr	r5, [r0, #16]
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8011e52:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8011e56:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8011e5a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8011e5e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8011e62:	f8c1 9002 	str.w	r9, [r1, #2]
 8011e66:	3301      	adds	r3, #1
 8011e68:	88e4      	ldrh	r4, [r4, #6]
 8011e6a:	80cc      	strh	r4, [r1, #6]
 8011e6c:	b2d9      	uxtb	r1, r3
 8011e6e:	42b9      	cmp	r1, r7
 8011e70:	460b      	mov	r3, r1
 8011e72:	d3ec      	bcc.n	8011e4e <MEMS_getSensorData_I16+0x3a>
 8011e74:	45c6      	cmp	lr, r8
 8011e76:	d934      	bls.n	8011ee2 <MEMS_getSensorData_I16+0xce>
 8011e78:	ebae 0308 	sub.w	r3, lr, r8
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	8103      	strh	r3, [r0, #8]
 8011e80:	f1bc 0f00 	cmp.w	ip, #0
 8011e84:	d01d      	beq.n	8011ec2 <MEMS_getSensorData_I16+0xae>
 8011e86:	6903      	ldr	r3, [r0, #16]
 8011e88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011e90:	f103 000a 	add.w	r0, r3, #10
 8011e94:	fa5f fc8c 	uxtb.w	ip, ip
 8011e98:	3202      	adds	r2, #2
 8011e9a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	2400      	movs	r4, #0
 8011ea2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011ea6:	f803 1c02 	strb.w	r1, [r3, #-2]
 8011eaa:	6811      	ldr	r1, [r2, #0]
 8011eac:	6019      	str	r1, [r3, #0]
 8011eae:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8011eb2:	8099      	strh	r1, [r3, #4]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	4283      	cmp	r3, r0
 8011eb8:	f802 4c02 	strb.w	r4, [r2, #-2]
 8011ebc:	f102 0208 	add.w	r2, r2, #8
 8011ec0:	d1ef      	bne.n	8011ea2 <MEMS_getSensorData_I16+0x8e>
 8011ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ec6:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011eca:	fb04 5313 	mls	r3, r4, r3, r5
 8011ece:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011ed2:	600b      	str	r3, [r1, #0]
 8011ed4:	f1be 0f00 	cmp.w	lr, #0
 8011ed8:	d005      	beq.n	8011ee6 <MEMS_getSensorData_I16+0xd2>
 8011eda:	4677      	mov	r7, lr
 8011edc:	f04f 0c00 	mov.w	ip, #0
 8011ee0:	e7b2      	b.n	8011e48 <MEMS_getSensorData_I16+0x34>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e7cb      	b.n	8011e7e <MEMS_getSensorData_I16+0x6a>
 8011ee6:	f8a0 e008 	strh.w	lr, [r0, #8]
 8011eea:	e7ea      	b.n	8011ec2 <MEMS_getSensorData_I16+0xae>

08011eec <MEMS_SolveLinearEq>:
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	ed2d 8b0c 	vpush	{d8-d13}
 8011ef4:	4617      	mov	r7, r2
 8011ef6:	2400      	movs	r4, #0
 8011ef8:	b0a9      	sub	sp, #164	; 0xa4
 8011efa:	2200      	movs	r2, #0
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	460d      	mov	r5, r1
 8011f00:	2240      	movs	r2, #64	; 0x40
 8011f02:	4621      	mov	r1, r4
 8011f04:	4680      	mov	r8, r0
 8011f06:	603c      	str	r4, [r7, #0]
 8011f08:	607c      	str	r4, [r7, #4]
 8011f0a:	60bc      	str	r4, [r7, #8]
 8011f0c:	60fc      	str	r4, [r7, #12]
 8011f0e:	a808      	add	r0, sp, #32
 8011f10:	461e      	mov	r6, r3
 8011f12:	eeb0 8a40 	vmov.f32	s16, s0
 8011f16:	e9cd 4400 	strd	r4, r4, [sp]
 8011f1a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8011f1e:	f004 ffa3 	bl	8016e68 <memset>
 8011f22:	4621      	mov	r1, r4
 8011f24:	a818      	add	r0, sp, #96	; 0x60
 8011f26:	2240      	movs	r2, #64	; 0x40
 8011f28:	f004 ff9e 	bl	8016e68 <memset>
 8011f2c:	edd5 2a03 	vldr	s5, [r5, #12]
 8011f30:	eddf 7ae4 	vldr	s15, [pc, #912]	; 80122c4 <MEMS_SolveLinearEq+0x3d8>
 8011f34:	eef4 2ae7 	vcmpe.f32	s5, s15
 8011f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3c:	d47e      	bmi.n	801203c <MEMS_SolveLinearEq+0x150>
 8011f3e:	f898 1000 	ldrb.w	r1, [r8]
 8011f42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011f46:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8011f4a:	4291      	cmp	r1, r2
 8011f4c:	d07c      	beq.n	8012048 <MEMS_SolveLinearEq+0x15c>
 8011f4e:	3301      	adds	r3, #1
 8011f50:	1a58      	subs	r0, r3, r1
 8011f52:	fb90 f3f2 	sdiv	r3, r0, r2
 8011f56:	fb02 0313 	mls	r3, r2, r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	bfb8      	it	lt
 8011f5e:	189b      	addlt	r3, r3, r2
 8011f60:	b21b      	sxth	r3, r3
 8011f62:	2900      	cmp	r1, #0
 8011f64:	f000 81d6 	beq.w	8012314 <MEMS_SolveLinearEq+0x428>
 8011f68:	3901      	subs	r1, #1
 8011f6a:	b2c9      	uxtb	r1, r1
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	edd5 3a00 	vldr	s7, [r5]
 8011f72:	ed95 4a01 	vldr	s8, [r5, #4]
 8011f76:	edd5 4a02 	vldr	s9, [r5, #8]
 8011f7a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8011f7e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 80122c8 <MEMS_SolveLinearEq+0x3dc>
 8011f82:	4419      	add	r1, r3
 8011f84:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8011f88:	fb93 f4f2 	sdiv	r4, r3, r2
 8011f8c:	fb02 3414 	mls	r4, r2, r4, r3
 8011f90:	b2e4      	uxtb	r4, r4
 8011f92:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8011f96:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8011f9a:	ee07 0a90 	vmov	s15, r0
 8011f9e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fa6:	ee06 0a10 	vmov	s12, r0
 8011faa:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011fae:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8011fb2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011fb6:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8011fba:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011fbe:	ee07 0a10 	vmov	s14, r0
 8011fc2:	ee36 5a63 	vsub.f32	s10, s12, s7
 8011fc6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fce:	eee5 6a05 	vfma.f32	s13, s10, s10
 8011fd2:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011fd6:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8011fda:	ee74 aac7 	vsub.f32	s21, s9, s14
 8011fde:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011fe2:	ee74 7a67 	vsub.f32	s15, s8, s15
 8011fe6:	eee7 6a07 	vfma.f32	s13, s14, s14
 8011fea:	eef4 6ac2 	vcmpe.f32	s13, s4
 8011fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff2:	d531      	bpl.n	8012058 <MEMS_SolveLinearEq+0x16c>
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	4299      	cmp	r1, r3
 8011ff8:	d1c6      	bne.n	8011f88 <MEMS_SolveLinearEq+0x9c>
 8011ffa:	eef0 7a65 	vmov.f32	s15, s11
 8011ffe:	2101      	movs	r1, #1
 8012000:	4608      	mov	r0, r1
 8012002:	2200      	movs	r2, #0
 8012004:	e006      	b.n	8012014 <MEMS_SolveLinearEq+0x128>
 8012006:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801200a:	ac28      	add	r4, sp, #160	; 0xa0
 801200c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012010:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8012014:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012018:	3001      	adds	r0, #1
 801201a:	ac28      	add	r4, sp, #160	; 0xa0
 801201c:	b2c0      	uxtb	r0, r0
 801201e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012022:	2804      	cmp	r0, #4
 8012024:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012028:	4613      	mov	r3, r2
 801202a:	d1ec      	bne.n	8012006 <MEMS_SolveLinearEq+0x11a>
 801202c:	1c48      	adds	r0, r1, #1
 801202e:	b2c0      	uxtb	r0, r0
 8012030:	2804      	cmp	r0, #4
 8012032:	d076      	beq.n	8012122 <MEMS_SolveLinearEq+0x236>
 8012034:	460b      	mov	r3, r1
 8012036:	460a      	mov	r2, r1
 8012038:	4601      	mov	r1, r0
 801203a:	e7e4      	b.n	8012006 <MEMS_SolveLinearEq+0x11a>
 801203c:	2000      	movs	r0, #0
 801203e:	b029      	add	sp, #164	; 0xa4
 8012040:	ecbd 8b0c 	vpop	{d8-d13}
 8012044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012048:	1c5a      	adds	r2, r3, #1
 801204a:	fb92 f3f1 	sdiv	r3, r2, r1
 801204e:	fb01 2313 	mls	r3, r1, r3, r2
 8012052:	b21b      	sxth	r3, r3
 8012054:	460a      	mov	r2, r1
 8012056:	e784      	b.n	8011f62 <MEMS_SolveLinearEq+0x76>
 8012058:	eef1 cae6 	vsqrt.f32	s25, s13
 801205c:	3301      	adds	r3, #1
 801205e:	428b      	cmp	r3, r1
 8012060:	ed9d ca00 	vldr	s24, [sp]
 8012064:	eddd ba08 	vldr	s23, [sp, #32]
 8012068:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 801206c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012070:	eddd 9a02 	vldr	s19, [sp, #8]
 8012074:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012078:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801207c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012080:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012084:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012088:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 801208c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012090:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012094:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012098:	ee3d da21 	vadd.f32	s26, s26, s3
 801209c:	ee26 7a26 	vmul.f32	s14, s12, s13
 80120a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120a4:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 80120a8:	ee72 aaec 	vsub.f32	s21, s5, s25
 80120ac:	eee7 5a27 	vfma.f32	s11, s14, s15
 80120b0:	eea7 ba26 	vfma.f32	s22, s14, s13
 80120b4:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80120b8:	eeaa ca87 	vfma.f32	s24, s21, s14
 80120bc:	eee7 ba07 	vfma.f32	s23, s14, s14
 80120c0:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80120c4:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80120c8:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80120cc:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80120d0:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80120d4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80120d8:	ee30 6a06 	vadd.f32	s12, s0, s12
 80120dc:	ee71 7a67 	vsub.f32	s15, s2, s15
 80120e0:	ee75 6a66 	vsub.f32	s13, s10, s13
 80120e4:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 80120e8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80120ec:	ed8d ca00 	vstr	s24, [sp]
 80120f0:	edcd ba08 	vstr	s23, [sp, #32]
 80120f4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80120f8:	ed8d aa01 	vstr	s20, [sp, #4]
 80120fc:	edcd 9a02 	vstr	s19, [sp, #8]
 8012100:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012104:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012108:	ed8d 6a03 	vstr	s12, [sp, #12]
 801210c:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012110:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012114:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012118:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 801211c:	f47f af34 	bne.w	8011f88 <MEMS_SolveLinearEq+0x9c>
 8012120:	e76b      	b.n	8011ffa <MEMS_SolveLinearEq+0x10e>
 8012122:	2240      	movs	r2, #64	; 0x40
 8012124:	2100      	movs	r1, #0
 8012126:	a818      	add	r0, sp, #96	; 0x60
 8012128:	f004 fe9e 	bl	8016e68 <memset>
 801212c:	ab08      	add	r3, sp, #32
 801212e:	ed9f 5a67 	vldr	s10, [pc, #412]	; 80122cc <MEMS_SolveLinearEq+0x3e0>
 8012132:	4618      	mov	r0, r3
 8012134:	aa18      	add	r2, sp, #96	; 0x60
 8012136:	2100      	movs	r1, #0
 8012138:	b24c      	sxtb	r4, r1
 801213a:	2900      	cmp	r1, #0
 801213c:	f000 80b5 	beq.w	80122aa <MEMS_SolveLinearEq+0x3be>
 8012140:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012144:	eeb0 7ae7 	vabs.f32	s14, s15
 8012148:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012150:	f53f af74 	bmi.w	801203c <MEMS_SolveLinearEq+0x150>
 8012154:	ed93 7a00 	vldr	s14, [r3]
 8012158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801215c:	2c01      	cmp	r4, #1
 801215e:	edc2 6a00 	vstr	s13, [r2]
 8012162:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801216a:	f000 80b5 	beq.w	80122d8 <MEMS_SolveLinearEq+0x3ec>
 801216e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012172:	eeb0 7ac6 	vabs.f32	s14, s12
 8012176:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	f53f af5d 	bmi.w	801203c <MEMS_SolveLinearEq+0x150>
 8012182:	ed93 7a01 	vldr	s14, [r3, #4]
 8012186:	ee37 7a67 	vsub.f32	s14, s14, s15
 801218a:	2c02      	cmp	r4, #2
 801218c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012190:	edc2 7a01 	vstr	s15, [r2, #4]
 8012194:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012198:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801219c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121a0:	eea6 7a26 	vfma.f32	s14, s12, s13
 80121a4:	f000 80a7 	beq.w	80122f6 <MEMS_SolveLinearEq+0x40a>
 80121a8:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 80121ac:	eeb0 6ae4 	vabs.f32	s12, s9
 80121b0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	f53f af40 	bmi.w	801203c <MEMS_SolveLinearEq+0x150>
 80121bc:	edd3 5a02 	vldr	s11, [r3, #8]
 80121c0:	ed90 6a00 	vldr	s12, [r0]
 80121c4:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80121c8:	eec7 5a24 	vdiv.f32	s11, s14, s9
 80121cc:	edc2 5a02 	vstr	s11, [r2, #8]
 80121d0:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 80121d4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80121d8:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80121dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80121e0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80121e4:	eee5 7a87 	vfma.f32	s15, s11, s14
 80121e8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	f77f af24 	ble.w	801203c <MEMS_SolveLinearEq+0x150>
 80121f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80121f8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80121fc:	ed82 7a03 	vstr	s14, [r2, #12]
 8012200:	3101      	adds	r1, #1
 8012202:	2904      	cmp	r1, #4
 8012204:	f103 0310 	add.w	r3, r3, #16
 8012208:	f102 0210 	add.w	r2, r2, #16
 801220c:	f100 0014 	add.w	r0, r0, #20
 8012210:	d192      	bne.n	8012138 <MEMS_SolveLinearEq+0x24c>
 8012212:	466a      	mov	r2, sp
 8012214:	4639      	mov	r1, r7
 8012216:	a818      	add	r0, sp, #96	; 0x60
 8012218:	f7f9 f9f2 	bl	800b600 <llEvaluate.constprop.0>
 801221c:	4b2c      	ldr	r3, [pc, #176]	; (80122d0 <MEMS_SolveLinearEq+0x3e4>)
 801221e:	6033      	str	r3, [r6, #0]
 8012220:	f10d 0910 	add.w	r9, sp, #16
 8012224:	46e8      	mov	r8, sp
 8012226:	f10d 0b0c 	add.w	fp, sp, #12
 801222a:	2400      	movs	r4, #0
 801222c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012230:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012234:	e9cd 4400 	strd	r4, r4, [sp]
 8012238:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801223c:	466a      	mov	r2, sp
 801223e:	f848 ab04 	str.w	sl, [r8], #4
 8012242:	a904      	add	r1, sp, #16
 8012244:	a818      	add	r0, sp, #96	; 0x60
 8012246:	f7f9 f9db 	bl	800b600 <llEvaluate.constprop.0>
 801224a:	ecf9 7a01 	vldmia	r9!, {s15}
 801224e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012256:	dd23      	ble.n	80122a0 <MEMS_SolveLinearEq+0x3b4>
 8012258:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801225c:	edd6 7a00 	vldr	s15, [r6]
 8012260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012268:	bfb8      	it	lt
 801226a:	eef0 7a47 	vmovlt.f32	s15, s14
 801226e:	45c3      	cmp	fp, r8
 8012270:	edc6 7a00 	vstr	s15, [r6]
 8012274:	d1de      	bne.n	8012234 <MEMS_SolveLinearEq+0x348>
 8012276:	edd5 7a03 	vldr	s15, [r5, #12]
 801227a:	ed97 7a03 	vldr	s14, [r7, #12]
 801227e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012282:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012286:	2001      	movs	r0, #1
 8012288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	bf48      	it	mi
 8012292:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012296:	b029      	add	sp, #164	; 0xa4
 8012298:	ecbd 8b0c 	vpop	{d8-d13}
 801229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a0:	45c3      	cmp	fp, r8
 80122a2:	ed86 0a00 	vstr	s0, [r6]
 80122a6:	d1c5      	bne.n	8012234 <MEMS_SolveLinearEq+0x348>
 80122a8:	e7e5      	b.n	8012276 <MEMS_SolveLinearEq+0x38a>
 80122aa:	edd0 7a00 	vldr	s15, [r0]
 80122ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b6:	f77f aec1 	ble.w	801203c <MEMS_SolveLinearEq+0x150>
 80122ba:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80122be:	ed82 7a00 	vstr	s14, [r2]
 80122c2:	e79d      	b.n	8012200 <MEMS_SolveLinearEq+0x314>
 80122c4:	3dcccccd 	.word	0x3dcccccd
 80122c8:	2b8cbccb 	.word	0x2b8cbccb
 80122cc:	358637bd 	.word	0x358637bd
 80122d0:	3dcccccd 	.word	0x3dcccccd
 80122d4:	00000000 	.word	0x00000000
 80122d8:	ed90 7a00 	vldr	s14, [r0]
 80122dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e4:	f77f aeaa 	ble.w	801203c <MEMS_SolveLinearEq+0x150>
 80122e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122ec:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80122f0:	ed82 7a01 	vstr	s14, [r2, #4]
 80122f4:	e784      	b.n	8012200 <MEMS_SolveLinearEq+0x314>
 80122f6:	edd0 7a00 	vldr	s15, [r0]
 80122fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012302:	f77f ae9b 	ble.w	801203c <MEMS_SolveLinearEq+0x150>
 8012306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801230a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801230e:	ed82 7a02 	vstr	s14, [r2, #8]
 8012312:	e775      	b.n	8012200 <MEMS_SolveLinearEq+0x314>
 8012314:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 80122d4 <MEMS_SolveLinearEq+0x3e8>
 8012318:	e671      	b.n	8011ffe <MEMS_SolveLinearEq+0x112>
 801231a:	bf00      	nop

0801231c <MEMS_EIG3>:
 801231c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012320:	ed90 7a01 	vldr	s14, [r0, #4]
 8012324:	edd0 4a04 	vldr	s9, [r0, #16]
 8012328:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012478 <MEMS_EIG3+0x15c>
 801232c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012330:	b510      	push	{r4, lr}
 8012332:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012336:	460c      	mov	r4, r1
 8012338:	ed2d 8b04 	vpush	{d8-d9}
 801233c:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012340:	b08a      	sub	sp, #40	; 0x28
 8012342:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234a:	d509      	bpl.n	8012360 <MEMS_EIG3+0x44>
 801234c:	6803      	ldr	r3, [r0, #0]
 801234e:	600b      	str	r3, [r1, #0]
 8012350:	68c3      	ldr	r3, [r0, #12]
 8012352:	604b      	str	r3, [r1, #4]
 8012354:	6943      	ldr	r3, [r0, #20]
 8012356:	608b      	str	r3, [r1, #8]
 8012358:	b00a      	add	sp, #40	; 0x28
 801235a:	ecbd 8b04 	vpop	{d8-d9}
 801235e:	bd10      	pop	{r4, pc}
 8012360:	ed90 4a00 	vldr	s8, [r0]
 8012364:	edd0 5a03 	vldr	s11, [r0, #12]
 8012368:	edd0 2a05 	vldr	s5, [r0, #20]
 801236c:	eddf 9a43 	vldr	s19, [pc, #268]	; 801247c <MEMS_EIG3+0x160>
 8012370:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012480 <MEMS_EIG3+0x164>
 8012374:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012378:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 801237c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012380:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012384:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012388:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 801238c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012390:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012394:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012398:	ee72 2ac8 	vsub.f32	s5, s5, s16
 801239c:	eea4 5a04 	vfma.f32	s10, s8, s8
 80123a0:	eea7 5aa3 	vfma.f32	s10, s15, s7
 80123a4:	eef0 7a45 	vmov.f32	s15, s10
 80123a8:	eee2 7aa2 	vfma.f32	s15, s5, s5
 80123ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80123b0:	eef1 8ae7 	vsqrt.f32	s17, s15
 80123b4:	ee80 6a28 	vdiv.f32	s12, s0, s17
 80123b8:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 80123bc:	eec4 2a28 	vdiv.f32	s5, s8, s17
 80123c0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80123c4:	ee65 5a86 	vmul.f32	s11, s11, s12
 80123c8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80123cc:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 80123d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80123d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80123d8:	ee66 4a46 	vnmul.f32	s9, s12, s12
 80123dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123e0:	eee5 4a85 	vfma.f32	s9, s11, s10
 80123e4:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80123e8:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80123ec:	eea6 5a26 	vfma.f32	s10, s12, s13
 80123f0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80123f4:	eef4 7ac3 	vcmpe.f32	s15, s6
 80123f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fc:	d909      	bls.n	8012412 <MEMS_EIG3+0xf6>
 80123fe:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012406:	db22      	blt.n	801244e <MEMS_EIG3+0x132>
 8012408:	eeb0 9a40 	vmov.f32	s18, s0
 801240c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012484 <MEMS_EIG3+0x168>
 8012410:	e003      	b.n	801241a <MEMS_EIG3+0xfe>
 8012412:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012488 <MEMS_EIG3+0x16c>
 8012416:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801241a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 801241e:	eef0 7a48 	vmov.f32	s15, s16
 8012422:	eeb0 7a48 	vmov.f32	s14, s16
 8012426:	eee8 7a89 	vfma.f32	s15, s17, s18
 801242a:	eea8 7a80 	vfma.f32	s14, s17, s0
 801242e:	edc4 7a00 	vstr	s15, [r4]
 8012432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012436:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801243a:	eed8 7a26 	vfnms.f32	s15, s16, s13
 801243e:	ed84 7a02 	vstr	s14, [r4, #8]
 8012442:	edc4 7a01 	vstr	s15, [r4, #4]
 8012446:	b00a      	add	sp, #40	; 0x28
 8012448:	ecbd 8b04 	vpop	{d8-d9}
 801244c:	bd10      	pop	{r4, pc}
 801244e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012452:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012456:	f002 ffc5 	bl	80153e4 <acosf>
 801245a:	ee60 9a29 	vmul.f32	s19, s0, s19
 801245e:	eeb0 0a69 	vmov.f32	s0, s19
 8012462:	f002 feb9 	bl	80151d8 <cosf>
 8012466:	eeb0 9a40 	vmov.f32	s18, s0
 801246a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801248c <MEMS_EIG3+0x170>
 801246e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012472:	f002 feb1 	bl	80151d8 <cosf>
 8012476:	e7d0      	b.n	801241a <MEMS_EIG3+0xfe>
 8012478:	358637bd 	.word	0x358637bd
 801247c:	3eaaaaab 	.word	0x3eaaaaab
 8012480:	3e2aaaab 	.word	0x3e2aaaab
 8012484:	bf000001 	.word	0xbf000001
 8012488:	3effffff 	.word	0x3effffff
 801248c:	40060a92 	.word	0x40060a92

08012490 <MEMS_runMagCal>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	ed2d 8b0a 	vpush	{d8-d12}
 8012498:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 801249c:	2282      	movs	r2, #130	; 0x82
 801249e:	ab36      	add	r3, sp, #216	; 0xd8
 80124a0:	460c      	mov	r4, r1
 80124a2:	9105      	str	r1, [sp, #20]
 80124a4:	4683      	mov	fp, r0
 80124a6:	4608      	mov	r0, r1
 80124a8:	a917      	add	r1, sp, #92	; 0x5c
 80124aa:	9319      	str	r3, [sp, #100]	; 0x64
 80124ac:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 80124b0:	f7ff fcb0 	bl	8011e14 <MEMS_getSensorData_I16>
 80124b4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 80124b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80124bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80124be:	9209      	str	r2, [sp, #36]	; 0x24
 80124c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80124c4:	9106      	str	r1, [sp, #24]
 80124c6:	fb01 2103 	mla	r1, r1, r3, r2
 80124ca:	9108      	str	r1, [sp, #32]
 80124cc:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 80124d0:	f1b8 0f00 	cmp.w	r8, #0
 80124d4:	f000 8417 	beq.w	8012d06 <MEMS_runMagCal+0x876>
 80124d8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80124dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124e0:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 80124e4:	fb02 f203 	mul.w	r2, r2, r3
 80124e8:	31a0      	adds	r1, #160	; 0xa0
 80124ea:	4291      	cmp	r1, r2
 80124ec:	f080 8411 	bcs.w	8012d12 <MEMS_runMagCal+0x882>
 80124f0:	3b00      	subs	r3, #0
 80124f2:	bf18      	it	ne
 80124f4:	2301      	movne	r3, #1
 80124f6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012500:	f8cb 200c 	str.w	r2, [fp, #12]
 8012504:	2300      	movs	r3, #0
 8012506:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 801250a:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 801250e:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012512:	22ff      	movs	r2, #255	; 0xff
 8012514:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012518:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801251c:	4cd5      	ldr	r4, [pc, #852]	; (8012874 <MEMS_runMagCal+0x3e4>)
 801251e:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012880 <MEMS_runMagCal+0x3f0>
 8012522:	9b05      	ldr	r3, [sp, #20]
 8012524:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012528:	edd3 5a01 	vldr	s11, [r3, #4]
 801252c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012530:	4652      	mov	r2, sl
 8012532:	2a03      	cmp	r2, #3
 8012534:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012538:	bf28      	it	cs
 801253a:	2203      	movcs	r2, #3
 801253c:	2100      	movs	r1, #0
 801253e:	9207      	str	r2, [sp, #28]
 8012540:	eeb0 0a67 	vmov.f32	s0, s15
 8012544:	464b      	mov	r3, r9
 8012546:	9402      	str	r4, [sp, #8]
 8012548:	4627      	mov	r7, r4
 801254a:	9503      	str	r5, [sp, #12]
 801254c:	462e      	mov	r6, r5
 801254e:	460a      	mov	r2, r1
 8012550:	9404      	str	r4, [sp, #16]
 8012552:	7818      	ldrb	r0, [r3, #0]
 8012554:	3201      	adds	r2, #1
 8012556:	b292      	uxth	r2, r2
 8012558:	2800      	cmp	r0, #0
 801255a:	d04b      	beq.n	80125f4 <MEMS_runMagCal+0x164>
 801255c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012560:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012564:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012568:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801256c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012570:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012574:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012578:	9c02      	ldr	r4, [sp, #8]
 801257a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 801257e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012582:	ee07 ea90 	vmov	s15, lr
 8012586:	ee07 ca10 	vmov	s14, ip
 801258a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801258e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012592:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012596:	ee37 7a44 	vsub.f32	s14, s14, s8
 801259a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801259e:	ee27 7a05 	vmul.f32	s14, s14, s10
 80125a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80125a6:	4574      	cmp	r4, lr
 80125a8:	eee7 7a07 	vfma.f32	s15, s14, s14
 80125ac:	bfb8      	it	lt
 80125ae:	4674      	movlt	r4, lr
 80125b0:	9402      	str	r4, [sp, #8]
 80125b2:	ee07 0a10 	vmov	s14, r0
 80125b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125ba:	9c03      	ldr	r4, [sp, #12]
 80125bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80125c0:	ee77 7a46 	vsub.f32	s15, s14, s12
 80125c4:	4574      	cmp	r4, lr
 80125c6:	bfa8      	it	ge
 80125c8:	4674      	movge	r4, lr
 80125ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80125ce:	4567      	cmp	r7, ip
 80125d0:	9403      	str	r4, [sp, #12]
 80125d2:	9c04      	ldr	r4, [sp, #16]
 80125d4:	bfb8      	it	lt
 80125d6:	4667      	movlt	r7, ip
 80125d8:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80125dc:	4566      	cmp	r6, ip
 80125de:	bfa8      	it	ge
 80125e0:	4666      	movge	r6, ip
 80125e2:	4284      	cmp	r4, r0
 80125e4:	bfb8      	it	lt
 80125e6:	4604      	movlt	r4, r0
 80125e8:	3101      	adds	r1, #1
 80125ea:	4285      	cmp	r5, r0
 80125ec:	b249      	sxtb	r1, r1
 80125ee:	9404      	str	r4, [sp, #16]
 80125f0:	bfa8      	it	ge
 80125f2:	4605      	movge	r5, r0
 80125f4:	9807      	ldr	r0, [sp, #28]
 80125f6:	4282      	cmp	r2, r0
 80125f8:	f103 0308 	add.w	r3, r3, #8
 80125fc:	d9a9      	bls.n	8012552 <MEMS_runMagCal+0xc2>
 80125fe:	4590      	cmp	r8, r2
 8012600:	9c04      	ldr	r4, [sp, #16]
 8012602:	f240 8767 	bls.w	80134d4 <MEMS_runMagCal+0x1044>
 8012606:	ebaa 0a02 	sub.w	sl, sl, r2
 801260a:	fa12 fa8a 	uxtah	sl, r2, sl
 801260e:	f109 0308 	add.w	r3, r9, #8
 8012612:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012616:	9307      	str	r3, [sp, #28]
 8012618:	2300      	movs	r3, #0
 801261a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	7813      	ldrb	r3, [r2, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 8096 	beq.w	8012754 <MEMS_runMagCal+0x2c4>
 8012628:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801262c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012630:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012634:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012638:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 801263c:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012640:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012644:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012648:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 801264c:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012650:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012654:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012658:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 801265c:	ebae 0808 	sub.w	r8, lr, r8
 8012660:	eba0 000a 	sub.w	r0, r0, sl
 8012664:	ee07 ca10 	vmov	s14, ip
 8012668:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801266c:	ee07 0a90 	vmov	s15, r0
 8012670:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012674:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012678:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 801267c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012680:	eba3 030a 	sub.w	r3, r3, sl
 8012684:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801268c:	ee06 ea90 	vmov	s13, lr
 8012690:	ebac 0909 	sub.w	r9, ip, r9
 8012694:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012698:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 801269c:	eef0 7ae7 	vabs.f32	s15, s15
 80126a0:	ee06 9a90 	vmov	s13, r9
 80126a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80126ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b0:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 80126b4:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 80126b8:	eef0 6ae6 	vabs.f32	s13, s13
 80126bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126c0:	eba0 0808 	sub.w	r8, r0, r8
 80126c4:	ee06 0a90 	vmov	s13, r0
 80126c8:	eba3 0309 	sub.w	r3, r3, r9
 80126cc:	ee35 5a63 	vsub.f32	s10, s10, s7
 80126d0:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80126d4:	ee25 5a06 	vmul.f32	s10, s10, s12
 80126d8:	9b02      	ldr	r3, [sp, #8]
 80126da:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80126de:	4577      	cmp	r7, lr
 80126e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80126e4:	ee06 8a90 	vmov	s13, r8
 80126e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126ec:	bfb8      	it	lt
 80126ee:	4677      	movlt	r7, lr
 80126f0:	4576      	cmp	r6, lr
 80126f2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80126f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80126fa:	bfa8      	it	ge
 80126fc:	4676      	movge	r6, lr
 80126fe:	4563      	cmp	r3, ip
 8012700:	bfb8      	it	lt
 8012702:	4663      	movlt	r3, ip
 8012704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012708:	eea5 7a05 	vfma.f32	s14, s10, s10
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	9b03      	ldr	r3, [sp, #12]
 8012710:	eef0 6ae6 	vabs.f32	s13, s13
 8012714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012718:	4563      	cmp	r3, ip
 801271a:	ee36 6a44 	vsub.f32	s12, s12, s8
 801271e:	bfa8      	it	ge
 8012720:	4663      	movge	r3, ip
 8012722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012726:	4284      	cmp	r4, r0
 8012728:	ee37 0a00 	vadd.f32	s0, s14, s0
 801272c:	bfb8      	it	lt
 801272e:	4604      	movlt	r4, r0
 8012730:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012734:	4285      	cmp	r5, r0
 8012736:	bfa8      	it	ge
 8012738:	4605      	movge	r5, r0
 801273a:	9303      	str	r3, [sp, #12]
 801273c:	ee17 0a90 	vmov	r0, s15
 8012740:	9b04      	ldr	r3, [sp, #16]
 8012742:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012746:	4283      	cmp	r3, r0
 8012748:	f101 0101 	add.w	r1, r1, #1
 801274c:	bf38      	it	cc
 801274e:	4603      	movcc	r3, r0
 8012750:	b249      	sxtb	r1, r1
 8012752:	9304      	str	r3, [sp, #16]
 8012754:	9b07      	ldr	r3, [sp, #28]
 8012756:	3208      	adds	r2, #8
 8012758:	4293      	cmp	r3, r2
 801275a:	f47f af61 	bne.w	8012620 <MEMS_runMagCal+0x190>
 801275e:	2900      	cmp	r1, #0
 8012760:	f000 86b6 	beq.w	80134d0 <MEMS_runMagCal+0x1040>
 8012764:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012768:	f280 82df 	bge.w	8012d2a <MEMS_runMagCal+0x89a>
 801276c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012770:	f2c0 82db 	blt.w	8012d2a <MEMS_runMagCal+0x89a>
 8012774:	9b02      	ldr	r3, [sp, #8]
 8012776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801277a:	f280 82d6 	bge.w	8012d2a <MEMS_runMagCal+0x89a>
 801277e:	9a03      	ldr	r2, [sp, #12]
 8012780:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012784:	f2c0 82d1 	blt.w	8012d2a <MEMS_runMagCal+0x89a>
 8012788:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801278c:	f280 82cd 	bge.w	8012d2a <MEMS_runMagCal+0x89a>
 8012790:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012794:	f2c0 82c9 	blt.w	8012d2a <MEMS_runMagCal+0x89a>
 8012798:	ee07 1a90 	vmov	s15, r1
 801279c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80127a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127a4:	eec0 7a26 	vdiv.f32	s15, s0, s13
 80127a8:	1bbe      	subs	r6, r7, r6
 80127aa:	1a9f      	subs	r7, r3, r2
 80127ac:	42be      	cmp	r6, r7
 80127ae:	4633      	mov	r3, r6
 80127b0:	eba4 0405 	sub.w	r4, r4, r5
 80127b4:	bfb8      	it	lt
 80127b6:	463b      	movlt	r3, r7
 80127b8:	42a3      	cmp	r3, r4
 80127ba:	bfb8      	it	lt
 80127bc:	4623      	movlt	r3, r4
 80127be:	eec7 6a25 	vdiv.f32	s13, s14, s11
 80127c2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80127c6:	ee07 3a10 	vmov	s14, r3
 80127ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012878 <MEMS_runMagCal+0x3e8>
 80127ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80127d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127d6:	ee25 0a80 	vmul.f32	s0, s11, s0
 80127da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e2:	f100 82a2 	bmi.w	8012d2a <MEMS_runMagCal+0x89a>
 80127e6:	eddd 7a04 	vldr	s15, [sp, #16]
 80127ea:	ed9f 6a24 	vldr	s12, [pc, #144]	; 801287c <MEMS_runMagCal+0x3ec>
 80127ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127f2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80127f6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80127fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fe:	f300 8294 	bgt.w	8012d2a <MEMS_runMagCal+0x89a>
 8012802:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012806:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801280a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012812:	f301 81f8 	bgt.w	8013c06 <MEMS_runMagCal+0x1776>
 8012816:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801281e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012826:	f340 8552 	ble.w	80132ce <MEMS_runMagCal+0xe3e>
 801282a:	ee07 6a90 	vmov	s15, r6
 801282e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012836:	eef4 7ae6 	vcmpe.f32	s15, s13
 801283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283e:	f340 8546 	ble.w	80132ce <MEMS_runMagCal+0xe3e>
 8012842:	ee07 7a90 	vmov	s15, r7
 8012846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801284a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012852:	f140 853c 	bpl.w	80132ce <MEMS_runMagCal+0xe3e>
 8012856:	ee07 4a90 	vmov	s15, r4
 801285a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801285e:	2300      	movs	r3, #0
 8012860:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012868:	9303      	str	r3, [sp, #12]
 801286a:	bf48      	it	mi
 801286c:	2301      	movmi	r3, #1
 801286e:	9307      	str	r3, [sp, #28]
 8012870:	f000 bd30 	b.w	80132d4 <MEMS_runMagCal+0xe44>
 8012874:	ffff8000 	.word	0xffff8000
 8012878:	43020000 	.word	0x43020000
 801287c:	447a0000 	.word	0x447a0000
 8012880:	00000000 	.word	0x00000000
 8012884:	41f00001 	.word	0x41f00001
 8012888:	400ccccd 	.word	0x400ccccd
 801288c:	3dcccccd 	.word	0x3dcccccd
 8012890:	423c0000 	.word	0x423c0000
 8012894:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012880 <MEMS_runMagCal+0x3f0>
 8012898:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012884 <MEMS_runMagCal+0x3f4>
 801289c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80128a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	dc10      	bgt.n	80128cc <MEMS_runMagCal+0x43c>
 80128aa:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012888 <MEMS_runMagCal+0x3f8>
 80128ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	dc09      	bgt.n	80128cc <MEMS_runMagCal+0x43c>
 80128b8:	ed94 9a03 	vldr	s18, [r4, #12]
 80128bc:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801288c <MEMS_runMagCal+0x3fc>
 80128c0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80128c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c8:	f201 8527 	bhi.w	801431a <MEMS_runMagCal+0x1e8a>
 80128cc:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012890 <MEMS_runMagCal+0x400>
 80128d0:	edd4 6a03 	vldr	s13, [r4, #12]
 80128d4:	ed94 5a00 	vldr	s10, [r4]
 80128d8:	edd4 5a01 	vldr	s11, [r4, #4]
 80128dc:	ed94 6a02 	vldr	s12, [r4, #8]
 80128e0:	edc4 7a06 	vstr	s15, [r4, #24]
 80128e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80128e8:	ad2e      	add	r5, sp, #184	; 0xb8
 80128ea:	2300      	movs	r3, #0
 80128ec:	e9c5 3300 	strd	r3, r3, [r5]
 80128f0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80128f4:	60ab      	str	r3, [r5, #8]
 80128f6:	61ab      	str	r3, [r5, #24]
 80128f8:	4be7      	ldr	r3, [pc, #924]	; (8012c98 <MEMS_runMagCal+0x808>)
 80128fa:	9311      	str	r3, [sp, #68]	; 0x44
 80128fc:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8012900:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8012904:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8012908:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801290c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8012910:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8012914:	eef0 6a67 	vmov.f32	s13, s15
 8012918:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801291c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012920:	ee39 9a46 	vsub.f32	s18, s18, s12
 8012924:	eddf 6add 	vldr	s13, [pc, #884]	; 8012c9c <MEMS_runMagCal+0x80c>
 8012928:	ed9f 6add 	vldr	s12, [pc, #884]	; 8012ca0 <MEMS_runMagCal+0x810>
 801292c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012930:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012934:	eef0 6ae6 	vabs.f32	s13, s13
 8012938:	ee77 7a67 	vsub.f32	s15, s14, s15
 801293c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012944:	eef0 7ae7 	vabs.f32	s15, s15
 8012948:	f101 84dd 	bmi.w	8014306 <MEMS_runMagCal+0x1e76>
 801294c:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8012ca4 <MEMS_runMagCal+0x814>
 8012950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012958:	f281 8438 	bge.w	80141cc <MEMS_runMagCal+0x1d3c>
 801295c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8012ca8 <MEMS_runMagCal+0x818>
 8012960:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012968:	f101 8430 	bmi.w	80141cc <MEMS_runMagCal+0x1d3c>
 801296c:	f002 fc74 	bl	8015258 <roundf>
 8012970:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012974:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8012978:	ee17 3a90 	vmov	r3, s15
 801297c:	eeb0 0a69 	vmov.f32	s0, s19
 8012980:	f8a9 3000 	strh.w	r3, [r9]
 8012984:	f002 fc68 	bl	8015258 <roundf>
 8012988:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801298c:	eeb0 0a4a 	vmov.f32	s0, s20
 8012990:	ee17 3a90 	vmov	r3, s15
 8012994:	f8a9 3002 	strh.w	r3, [r9, #2]
 8012998:	f002 fc5e 	bl	8015258 <roundf>
 801299c:	eddd 7a08 	vldr	s15, [sp, #32]
 80129a0:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 80129a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80129a8:	ee16 3a90 	vmov	r3, s13
 80129ac:	eddf 7abf 	vldr	s15, [pc, #764]	; 8012cac <MEMS_runMagCal+0x81c>
 80129b0:	f8a9 3004 	strh.w	r3, [r9, #4]
 80129b4:	ee27 0a27 	vmul.f32	s0, s14, s15
 80129b8:	f002 fc4e 	bl	8015258 <roundf>
 80129bc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80129c0:	ae0f      	add	r6, sp, #60	; 0x3c
 80129c2:	ed8b 0a01 	vstr	s0, [fp, #4]
 80129c6:	ab10      	add	r3, sp, #64	; 0x40
 80129c8:	ee1c 0a10 	vmov	r0, s24
 80129cc:	eeb0 0a48 	vmov.f32	s0, s16
 80129d0:	4649      	mov	r1, r9
 80129d2:	9600      	str	r6, [sp, #0]
 80129d4:	aa2d      	add	r2, sp, #180	; 0xb4
 80129d6:	f7f8 ff33 	bl	800b840 <getMagStats.constprop.0>
 80129da:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80129de:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8012cb0 <MEMS_runMagCal+0x820>
 80129e2:	461f      	mov	r7, r3
 80129e4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	ee07 3a90 	vmov	s15, r3
 80129ee:	ee07 0a10 	vmov	s14, r0
 80129f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a06:	dc0f      	bgt.n	8012a28 <MEMS_runMagCal+0x598>
 8012a08:	ed96 7a00 	vldr	s14, [r6]
 8012a0c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	bfc3      	ittte	gt
 8012a1a:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8012a1e:	fab3 f383 	clzgt	r3, r3
 8012a22:	095b      	lsrgt	r3, r3, #5
 8012a24:	2301      	movle	r3, #1
 8012a26:	9303      	str	r3, [sp, #12]
 8012a28:	ed96 0a00 	vldr	s0, [r6]
 8012a2c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8012a30:	9620      	str	r6, [sp, #128]	; 0x80
 8012a32:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012a36:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8012a3a:	f002 fc0d 	bl	8015258 <roundf>
 8012a3e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8012a42:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8012a46:	ee17 3a10 	vmov	r3, s14
 8012a4a:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8012a4e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8012a52:	f002 fc01 	bl	8015258 <roundf>
 8012a56:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8012cb4 <MEMS_runMagCal+0x824>
 8012a5a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8012a5e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012a62:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8012a66:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8012a6a:	f8d9 0000 	ldr.w	r0, [r9]
 8012a6e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8012a72:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012a76:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012a7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a7e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8012a82:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012a86:	ee16 2a90 	vmov	r2, s13
 8012a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a8e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8012a92:	f1b8 0f01 	cmp.w	r8, #1
 8012a96:	fa1f fc82 	uxth.w	ip, r2
 8012a9a:	bf08      	it	eq
 8012a9c:	23ff      	moveq	r3, #255	; 0xff
 8012a9e:	ee17 2a10 	vmov	r2, s14
 8012aa2:	ee17 1a90 	vmov	r1, s15
 8012aa6:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8012aaa:	ee16 0a10 	vmov	r0, s12
 8012aae:	bf08      	it	eq
 8012ab0:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8012aba:	b292      	uxth	r2, r2
 8012abc:	b289      	uxth	r1, r1
 8012abe:	2000      	movs	r0, #0
 8012ac0:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8012ac4:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8012ac8:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8012acc:	f88b 0000 	strb.w	r0, [fp]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 8118 	beq.w	8012d06 <MEMS_runMagCal+0x876>
 8012ad6:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8012ada:	f88b 0001 	strb.w	r0, [fp, #1]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f041 80fd 	bne.w	8013cde <MEMS_runMagCal+0x184e>
 8012ae4:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8012ae8:	ad0e      	add	r5, sp, #56	; 0x38
 8012aea:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8012aee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012af2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8012af6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8012afa:	f8cb 6008 	str.w	r6, [fp, #8]
 8012afe:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8012b02:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8012b06:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8012cb8 <MEMS_runMagCal+0x828>
 8012b0a:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8012b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012b12:	fb00 f404 	mul.w	r4, r0, r4
 8012b16:	ee05 4a90 	vmov	s11, r4
 8012b1a:	fb00 f406 	mul.w	r4, r0, r6
 8012b1e:	fb00 f00e 	mul.w	r0, r0, lr
 8012b22:	ee06 0a10 	vmov	s12, r0
 8012b26:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8012b2a:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8012b2e:	ee03 0a90 	vmov	s7, r0
 8012b32:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8012b36:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8012b3a:	ee05 4a10 	vmov	s10, r4
 8012b3e:	ee04 0a10 	vmov	s8, r0
 8012b42:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8012b46:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012b4a:	ee04 0a90 	vmov	s9, r0
 8012b4e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012b52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012b56:	f8dc 0000 	ldr.w	r0, [ip]
 8012b5a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8012b5e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8012b62:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012b66:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012b6a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8012b6e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8012b72:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8012b76:	2001      	movs	r0, #1
 8012b78:	24ff      	movs	r4, #255	; 0xff
 8012b7a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8012b7e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8012b82:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8012b86:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8012b8a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8012b8e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8012b92:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8012b96:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8012b9a:	f88b 4012 	strb.w	r4, [fp, #18]
 8012b9e:	2f00      	cmp	r7, #0
 8012ba0:	f001 82c8 	beq.w	8014134 <MEMS_runMagCal+0x1ca4>
 8012ba4:	9b05      	ldr	r3, [sp, #20]
 8012ba6:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8012cc4 <MEMS_runMagCal+0x834>
 8012baa:	ed93 0a01 	vldr	s0, [r3, #4]
 8012bae:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8012bb2:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	ee20 3a03 	vmul.f32	s6, s0, s6
 8012bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8012bc0:	4616      	mov	r6, r2
 8012bc2:	fb96 f3f0 	sdiv	r3, r6, r0
 8012bc6:	fb00 6313 	mls	r3, r0, r3, r6
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012bd0:	1c66      	adds	r6, r4, #1
 8012bd2:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8012bd6:	ee07 4a90 	vmov	s15, r4
 8012bda:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8012bde:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8012be2:	ee06 4a90 	vmov	s13, r4
 8012be6:	fb96 f4f1 	sdiv	r4, r6, r1
 8012bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bf2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012bf6:	ee07 3a10 	vmov	s14, r3
 8012bfa:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012bfe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012c02:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012c06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012c0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c0e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012c12:	fb01 6414 	mls	r4, r1, r4, r6
 8012c16:	b264      	sxtb	r4, r4
 8012c18:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012c1c:	3201      	adds	r2, #1
 8012c1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012c22:	b212      	sxth	r2, r2
 8012c24:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c28:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8012c2c:	42ba      	cmp	r2, r7
 8012c2e:	4616      	mov	r6, r2
 8012c30:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c34:	ee67 7a03 	vmul.f32	s15, s14, s6
 8012c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c3c:	ee17 ca90 	vmov	ip, s15
 8012c40:	f8a3 c014 	strh.w	ip, [r3, #20]
 8012c44:	dbbd      	blt.n	8012bc2 <MEMS_runMagCal+0x732>
 8012c46:	f88b 4012 	strb.w	r4, [fp, #18]
 8012c4a:	428f      	cmp	r7, r1
 8012c4c:	bf28      	it	cs
 8012c4e:	460f      	movcs	r7, r1
 8012c50:	f88b 7010 	strb.w	r7, [fp, #16]
 8012c54:	ee1c 0a10 	vmov	r0, s24
 8012c58:	9500      	str	r5, [sp, #0]
 8012c5a:	4642      	mov	r2, r8
 8012c5c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8012c60:	ab0d      	add	r3, sp, #52	; 0x34
 8012c62:	f7f8 fded 	bl	800b840 <getMagStats.constprop.0>
 8012c66:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012cbc <MEMS_runMagCal+0x82c>
 8012c6a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8012c6e:	edd5 6a00 	vldr	s13, [r5]
 8012c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8012c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c86:	d525      	bpl.n	8012cd4 <MEMS_runMagCal+0x844>
 8012c88:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c90:	f101 8257 	bmi.w	8014142 <MEMS_runMagCal+0x1cb2>
 8012c94:	e01e      	b.n	8012cd4 <MEMS_runMagCal+0x844>
 8012c96:	bf00      	nop
 8012c98:	41f00001 	.word	0x41f00001
 8012c9c:	3f8ccccd 	.word	0x3f8ccccd
 8012ca0:	3f266666 	.word	0x3f266666
 8012ca4:	3eb33333 	.word	0x3eb33333
 8012ca8:	3f19999a 	.word	0x3f19999a
 8012cac:	3a83126f 	.word	0x3a83126f
 8012cb0:	3c23d70a 	.word	0x3c23d70a
 8012cb4:	447a0000 	.word	0x447a0000
 8012cb8:	358637bd 	.word	0x358637bd
 8012cbc:	423c0000 	.word	0x423c0000
 8012cc0:	4423d666 	.word	0x4423d666
 8012cc4:	42c80000 	.word	0x42c80000
 8012cc8:	427c0000 	.word	0x427c0000
 8012ccc:	3f666666 	.word	0x3f666666
 8012cd0:	3eaaaaab 	.word	0x3eaaaaab
 8012cd4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce0:	d507      	bpl.n	8012cf2 <MEMS_runMagCal+0x862>
 8012ce2:	eef4 6a47 	vcmp.f32	s13, s14
 8012ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cea:	9b03      	ldr	r3, [sp, #12]
 8012cec:	bf48      	it	mi
 8012cee:	2302      	movmi	r3, #2
 8012cf0:	9303      	str	r3, [sp, #12]
 8012cf2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8012cf6:	9a03      	ldr	r2, [sp, #12]
 8012cf8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8012cfc:	2bc8      	cmp	r3, #200	; 0xc8
 8012cfe:	d902      	bls.n	8012d06 <MEMS_runMagCal+0x876>
 8012d00:	2302      	movs	r3, #2
 8012d02:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012d06:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8012d0a:	ecbd 8b0a 	vpop	{d8-d12}
 8012d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d12:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8012d16:	4291      	cmp	r1, r2
 8012d18:	f4ff abea 	bcc.w	80124f0 <MEMS_runMagCal+0x60>
 8012d1c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	f47f abf9 	bne.w	8012518 <MEMS_runMagCal+0x88>
 8012d26:	f7ff bbed 	b.w	8012504 <MEMS_runMagCal+0x74>
 8012d2a:	2702      	movs	r7, #2
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	9307      	str	r3, [sp, #28]
 8012d30:	9303      	str	r3, [sp, #12]
 8012d32:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8012cc0 <MEMS_runMagCal+0x830>
 8012d36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	f140 8260 	bpl.w	8013202 <MEMS_runMagCal+0xd72>
 8012d42:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8012cc4 <MEMS_runMagCal+0x834>
 8012d46:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8012d4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8012d54:	d911      	bls.n	8012d7a <MEMS_runMagCal+0x8ea>
 8012d56:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d5a:	ee17 3a90 	vmov	r3, s15
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	2bc7      	cmp	r3, #199	; 0xc7
 8012d62:	f201 8359 	bhi.w	8014418 <MEMS_runMagCal+0x1f88>
 8012d66:	2300      	movs	r3, #0
 8012d68:	22ff      	movs	r2, #255	; 0xff
 8012d6a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012d6e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8012d72:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8012d76:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012d7a:	2f00      	cmp	r7, #0
 8012d7c:	f040 824d 	bne.w	801321a <MEMS_runMagCal+0xd8a>
 8012d80:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f2c0 839e 	blt.w	80134c6 <MEMS_runMagCal+0x1036>
 8012d8a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8012d8e:	1c5a      	adds	r2, r3, #1
 8012d90:	fbb2 f3f6 	udiv	r3, r2, r6
 8012d94:	fb06 2313 	mls	r3, r6, r3, r2
 8012d98:	b25b      	sxtb	r3, r3
 8012d9a:	461d      	mov	r5, r3
 8012d9c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8012da0:	f88b 3012 	strb.w	r3, [fp, #18]
 8012da4:	3401      	adds	r4, #1
 8012da6:	42b4      	cmp	r4, r6
 8012da8:	bfa8      	it	ge
 8012daa:	4634      	movge	r4, r6
 8012dac:	fa5f f884 	uxtb.w	r8, r4
 8012db0:	f88b 8010 	strb.w	r8, [fp, #16]
 8012db4:	f002 fa50 	bl	8015258 <roundf>
 8012db8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012dbc:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8012dc0:	ee10 2a10 	vmov	r2, s0
 8012dc4:	829a      	strh	r2, [r3, #20]
 8012dc6:	2f00      	cmp	r7, #0
 8012dc8:	f040 8227 	bne.w	801321a <MEMS_runMagCal+0xd8a>
 8012dcc:	f8db 200c 	ldr.w	r2, [fp, #12]
 8012dd0:	b122      	cbz	r2, 8012ddc <MEMS_runMagCal+0x94c>
 8012dd2:	9908      	ldr	r1, [sp, #32]
 8012dd4:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8012dd8:	4299      	cmp	r1, r3
 8012dda:	d394      	bcc.n	8012d06 <MEMS_runMagCal+0x876>
 8012ddc:	9b03      	ldr	r3, [sp, #12]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d091      	beq.n	8012d06 <MEMS_runMagCal+0x876>
 8012de2:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8012de6:	1ebb      	subs	r3, r7, #2
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	f240 8232 	bls.w	8013252 <MEMS_runMagCal+0xdc2>
 8012dee:	9b05      	ldr	r3, [sp, #20]
 8012df0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8012cc8 <MEMS_runMagCal+0x838>
 8012df4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012df8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012dfc:	9a06      	ldr	r2, [sp, #24]
 8012dfe:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 8012e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e08:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8012e0c:	fb02 1404 	mla	r4, r2, r4, r1
 8012e10:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012e14:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8012e18:	3310      	adds	r3, #16
 8012e1a:	42a3      	cmp	r3, r4
 8012e1c:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8012e20:	ee28 9a89 	vmul.f32	s18, s17, s18
 8012e24:	ee0c 2a10 	vmov	s24, r2
 8012e28:	ee69 7a27 	vmul.f32	s15, s18, s15
 8012e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e30:	ee17 2a90 	vmov	r2, s15
 8012e34:	fa1f f982 	uxth.w	r9, r2
 8012e38:	f080 81fe 	bcs.w	8013238 <MEMS_runMagCal+0xda8>
 8012e3c:	f242 3328 	movw	r3, #9000	; 0x2328
 8012e40:	429c      	cmp	r4, r3
 8012e42:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8012e46:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8012e4a:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8012e4e:	bf1a      	itte	ne
 8012e50:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8012e54:	3c28      	subne	r4, #40	; 0x28
 8012e56:	2400      	moveq	r4, #0
 8012e58:	42a8      	cmp	r0, r5
 8012e5a:	f102 0201 	add.w	r2, r2, #1
 8012e5e:	f000 8727 	beq.w	8013cb0 <MEMS_runMagCal+0x1820>
 8012e62:	1a12      	subs	r2, r2, r0
 8012e64:	fb92 f1f5 	sdiv	r1, r2, r5
 8012e68:	fb05 2211 	mls	r2, r5, r1, r2
 8012e6c:	2a00      	cmp	r2, #0
 8012e6e:	bfb8      	it	lt
 8012e70:	1952      	addlt	r2, r2, r5
 8012e72:	b211      	sxth	r1, r2
 8012e74:	b358      	cbz	r0, 8012ece <MEMS_runMagCal+0xa3e>
 8012e76:	3801      	subs	r0, #1
 8012e78:	b280      	uxth	r0, r0
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	1b36      	subs	r6, r6, r4
 8012e7e:	9f03      	ldr	r7, [sp, #12]
 8012e80:	b2b6      	uxth	r6, r6
 8012e82:	4408      	add	r0, r1
 8012e84:	e002      	b.n	8012e8c <MEMS_runMagCal+0x9fc>
 8012e86:	3101      	adds	r1, #1
 8012e88:	4281      	cmp	r1, r0
 8012e8a:	d01b      	beq.n	8012ec4 <MEMS_runMagCal+0xa34>
 8012e8c:	fb91 f3f5 	sdiv	r3, r1, r5
 8012e90:	fb05 1313 	mls	r3, r5, r3, r1
 8012e94:	b2db      	uxtb	r3, r3
 8012e96:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012e9a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8012e9e:	4432      	add	r2, r6
 8012ea0:	b212      	sxth	r2, r2
 8012ea2:	2a00      	cmp	r2, #0
 8012ea4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8012ea8:	daed      	bge.n	8012e86 <MEMS_runMagCal+0x9f6>
 8012eaa:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012eae:	1e5a      	subs	r2, r3, #1
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f000 8306 	beq.w	80134c2 <MEMS_runMagCal+0x1032>
 8012eb6:	3101      	adds	r1, #1
 8012eb8:	4281      	cmp	r1, r0
 8012eba:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012ebe:	f04f 0701 	mov.w	r7, #1
 8012ec2:	d1e3      	bne.n	8012e8c <MEMS_runMagCal+0x9fc>
 8012ec4:	2f01      	cmp	r7, #1
 8012ec6:	f001 80ea 	beq.w	801409e <MEMS_runMagCal+0x1c0e>
 8012eca:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8012ece:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	f000 81b6 	beq.w	8013244 <MEMS_runMagCal+0xdb4>
 8012ed8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8012edc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012ede:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ee2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8012ee6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012eea:	3308      	adds	r3, #8
 8012eec:	441c      	add	r4, r3
 8012eee:	42a2      	cmp	r2, r4
 8012ef0:	f200 86e6 	bhi.w	8013cc0 <MEMS_runMagCal+0x1830>
 8012ef4:	9b07      	ldr	r3, [sp, #28]
 8012ef6:	b923      	cbnz	r3, 8012f02 <MEMS_runMagCal+0xa72>
 8012ef8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012efc:	2b0a      	cmp	r3, #10
 8012efe:	f240 81a5 	bls.w	801324c <MEMS_runMagCal+0xdbc>
 8012f02:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8012f06:	9302      	str	r3, [sp, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	f000 819f 	beq.w	801324c <MEMS_runMagCal+0xdbc>
 8012f0e:	ee29 aa09 	vmul.f32	s20, s18, s18
 8012f12:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8012ccc <MEMS_runMagCal+0x83c>
 8012f16:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8012cd0 <MEMS_runMagCal+0x840>
 8012f1a:	9b03      	ldr	r3, [sp, #12]
 8012f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f1e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8012f22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f26:	2100      	movs	r1, #0
 8012f28:	ee2a aa26 	vmul.f32	s20, s20, s13
 8012f2c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8012f30:	ee69 9a29 	vmul.f32	s19, s18, s19
 8012f34:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012f38:	468a      	mov	sl, r1
 8012f3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012f3c:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8012f40:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f000 80e2 	beq.w	801310e <MEMS_runMagCal+0xc7e>
 8012f4a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012f4e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8012f52:	ee07 4a90 	vmov	s15, r4
 8012f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f5a:	eef0 7ae7 	vabs.f32	s15, s15
 8012f5e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f66:	f100 820b 	bmi.w	8013380 <MEMS_runMagCal+0xef0>
 8012f6a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8012f6e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8012f72:	2f00      	cmp	r7, #0
 8012f74:	f000 8223 	beq.w	80133be <MEMS_runMagCal+0xf2e>
 8012f78:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 8012f7c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8012f80:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8012f84:	1b52      	subs	r2, r2, r5
 8012f86:	fb02 f102 	mul.w	r1, r2, r2
 8012f8a:	1b02      	subs	r2, r0, r4
 8012f8c:	fb02 1202 	mla	r2, r2, r2, r1
 8012f90:	1b9b      	subs	r3, r3, r6
 8012f92:	fb03 2303 	mla	r3, r3, r3, r2
 8012f96:	ee07 3a90 	vmov	s15, r3
 8012f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f9e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa6:	f300 80b2 	bgt.w	801310e <MEMS_runMagCal+0xc7e>
 8012faa:	fb94 f3f9 	sdiv	r3, r4, r9
 8012fae:	fb09 4313 	mls	r3, r9, r3, r4
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	bfb8      	it	lt
 8012fb6:	444b      	addlt	r3, r9
 8012fb8:	b21b      	sxth	r3, r3
 8012fba:	ee00 3a10 	vmov	s0, r3
 8012fbe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fc2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012fc6:	f002 f947 	bl	8015258 <roundf>
 8012fca:	fb95 f3f9 	sdiv	r3, r5, r9
 8012fce:	fb09 5313 	mls	r3, r9, r3, r5
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	bfb8      	it	lt
 8012fd6:	444b      	addlt	r3, r9
 8012fd8:	b21b      	sxth	r3, r3
 8012fda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012fde:	ee00 3a10 	vmov	s0, r3
 8012fe2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fe6:	edcd 7a04 	vstr	s15, [sp, #16]
 8012fea:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012fee:	f002 f933 	bl	8015258 <roundf>
 8012ff2:	fb96 f3f9 	sdiv	r3, r6, r9
 8012ff6:	fb09 6313 	mls	r3, r9, r3, r6
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	bfb8      	it	lt
 8012ffe:	444b      	addlt	r3, r9
 8013000:	b21b      	sxth	r3, r3
 8013002:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013006:	ee00 3a10 	vmov	s0, r3
 801300a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801300e:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8013012:	edcd 7a04 	vstr	s15, [sp, #16]
 8013016:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801301a:	9204      	str	r2, [sp, #16]
 801301c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013020:	f002 f91a 	bl	8015258 <roundf>
 8013024:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013028:	f1b8 0f1f 	cmp.w	r8, #31
 801302c:	edcd 7a06 	vstr	s15, [sp, #24]
 8013030:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013034:	9106      	str	r1, [sp, #24]
 8013036:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 801303a:	f240 823d 	bls.w	80134b8 <MEMS_runMagCal+0x1028>
 801303e:	f1a8 0220 	sub.w	r2, r8, #32
 8013042:	2101      	movs	r1, #1
 8013044:	fa01 f202 	lsl.w	r2, r1, r2
 8013048:	401a      	ands	r2, r3
 801304a:	9804      	ldr	r0, [sp, #16]
 801304c:	281f      	cmp	r0, #31
 801304e:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013052:	f240 821f 	bls.w	8013494 <MEMS_runMagCal+0x1004>
 8013056:	f1a0 0120 	sub.w	r1, r0, #32
 801305a:	2001      	movs	r0, #1
 801305c:	fa00 f101 	lsl.w	r1, r0, r1
 8013060:	ea01 0c03 	and.w	ip, r1, r3
 8013064:	9906      	ldr	r1, [sp, #24]
 8013066:	291f      	cmp	r1, #31
 8013068:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801306c:	f240 821e 	bls.w	80134ac <MEMS_runMagCal+0x101c>
 8013070:	f1a1 0020 	sub.w	r0, r1, #32
 8013074:	2101      	movs	r1, #1
 8013076:	fa01 f000 	lsl.w	r0, r1, r0
 801307a:	4003      	ands	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	f040 812b 	bne.w	80132d8 <MEMS_runMagCal+0xe48>
 8013082:	ea52 030c 	orrs.w	r3, r2, ip
 8013086:	f040 812c 	bne.w	80132e2 <MEMS_runMagCal+0xe52>
 801308a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801308e:	930a      	str	r3, [sp, #40]	; 0x28
 8013090:	461a      	mov	r2, r3
 8013092:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013096:	3301      	adds	r3, #1
 8013098:	4694      	mov	ip, r2
 801309a:	930b      	str	r3, [sp, #44]	; 0x2c
 801309c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801309e:	fb92 f3fc 	sdiv	r3, r2, ip
 80130a2:	3701      	adds	r7, #1
 80130a4:	4567      	cmp	r7, ip
 80130a6:	bfa8      	it	ge
 80130a8:	4667      	movge	r7, ip
 80130aa:	fb0c 2c13 	mls	ip, ip, r3, r2
 80130ae:	b2ff      	uxtb	r7, r7
 80130b0:	fa4f fc8c 	sxtb.w	ip, ip
 80130b4:	9905      	ldr	r1, [sp, #20]
 80130b6:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80130ba:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80130be:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80130c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130c4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80130c8:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80130cc:	1a9b      	subs	r3, r3, r2
 80130ce:	fb01 330a 	mla	r3, r1, sl, r3
 80130d2:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80130d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130d8:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 80130dc:	429f      	cmp	r7, r3
 80130de:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 80130e2:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 80130e6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80130ea:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80130ee:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80130f2:	f000 8758 	beq.w	8013fa6 <MEMS_runMagCal+0x1b16>
 80130f6:	9b06      	ldr	r3, [sp, #24]
 80130f8:	9a04      	ldr	r2, [sp, #16]
 80130fa:	ee1c 0a10 	vmov	r0, s24
 80130fe:	4641      	mov	r1, r8
 8013100:	f7f8 f874 	bl	800b1ec <MEMS_setMagIndexToOne>
 8013104:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013108:	9302      	str	r3, [sp, #8]
 801310a:	2301      	movs	r3, #1
 801310c:	9309      	str	r3, [sp, #36]	; 0x24
 801310e:	9b02      	ldr	r3, [sp, #8]
 8013110:	f10a 0a01 	add.w	sl, sl, #1
 8013114:	fa0f fa8a 	sxth.w	sl, sl
 8013118:	459a      	cmp	sl, r3
 801311a:	4651      	mov	r1, sl
 801311c:	f6ff af0d 	blt.w	8012f3a <MEMS_runMagCal+0xaaa>
 8013120:	f89b 3000 	ldrb.w	r3, [fp]
 8013124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013126:	431a      	orrs	r2, r3
 8013128:	b2d3      	uxtb	r3, r2
 801312a:	f88b 3000 	strb.w	r3, [fp]
 801312e:	2b00      	cmp	r3, #0
 8013130:	f43f ade9 	beq.w	8012d06 <MEMS_runMagCal+0x876>
 8013134:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013138:	9306      	str	r3, [sp, #24]
 801313a:	2b19      	cmp	r3, #25
 801313c:	f67f ade3 	bls.w	8012d06 <MEMS_runMagCal+0x876>
 8013140:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013144:	9309      	str	r3, [sp, #36]	; 0x24
 8013146:	b123      	cbz	r3, 8013152 <MEMS_runMagCal+0xcc2>
 8013148:	f8db 3004 	ldr.w	r3, [fp, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	f040 8583 	bne.w	8013c58 <MEMS_runMagCal+0x17c8>
 8013152:	9b07      	ldr	r3, [sp, #28]
 8013154:	2b00      	cmp	r3, #0
 8013156:	f040 872f 	bne.w	8013fb8 <MEMS_runMagCal+0x1b28>
 801315a:	9b05      	ldr	r3, [sp, #20]
 801315c:	9903      	ldr	r1, [sp, #12]
 801315e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013162:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013166:	9302      	str	r3, [sp, #8]
 8013168:	2600      	movs	r6, #0
 801316a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 801316e:	9304      	str	r3, [sp, #16]
 8013170:	f04f 0a01 	mov.w	sl, #1
 8013174:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013178:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 801317c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013180:	9624      	str	r6, [sp, #144]	; 0x90
 8013182:	4657      	mov	r7, sl
 8013184:	460b      	mov	r3, r1
 8013186:	460c      	mov	r4, r1
 8013188:	e013      	b.n	80131b2 <MEMS_runMagCal+0xd22>
 801318a:	f1b9 0f00 	cmp.w	r9, #0
 801318e:	bf18      	it	ne
 8013190:	3101      	addne	r1, #1
 8013192:	2d00      	cmp	r5, #0
 8013194:	bf18      	it	ne
 8013196:	3401      	addne	r4, #1
 8013198:	2a00      	cmp	r2, #0
 801319a:	bf18      	it	ne
 801319c:	3301      	addne	r3, #1
 801319e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80131a2:	b2c9      	uxtb	r1, r1
 80131a4:	b2e4      	uxtb	r4, r4
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	f000 81a2 	beq.w	80134f0 <MEMS_runMagCal+0x1060>
 80131ac:	3601      	adds	r6, #1
 80131ae:	fa5f fa8c 	uxtb.w	sl, ip
 80131b2:	9804      	ldr	r0, [sp, #16]
 80131b4:	f1a6 0220 	sub.w	r2, r6, #32
 80131b8:	fa07 f202 	lsl.w	r2, r7, r2
 80131bc:	ea02 0500 	and.w	r5, r2, r0
 80131c0:	9802      	ldr	r0, [sp, #8]
 80131c2:	2e1f      	cmp	r6, #31
 80131c4:	ea08 0902 	and.w	r9, r8, r2
 80131c8:	f10a 0c01 	add.w	ip, sl, #1
 80131cc:	ea02 0200 	and.w	r2, r2, r0
 80131d0:	fa07 f006 	lsl.w	r0, r7, r6
 80131d4:	d8d9      	bhi.n	801318a <MEMS_runMagCal+0xcfa>
 80131d6:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 80131da:	ea00 0902 	and.w	r9, r0, r2
 80131de:	4005      	ands	r5, r0
 80131e0:	ea0e 0000 	and.w	r0, lr, r0
 80131e4:	f1b9 0f00 	cmp.w	r9, #0
 80131e8:	bf18      	it	ne
 80131ea:	3401      	addne	r4, #1
 80131ec:	2d00      	cmp	r5, #0
 80131ee:	bf0c      	ite	eq
 80131f0:	461d      	moveq	r5, r3
 80131f2:	1c5d      	addne	r5, r3, #1
 80131f4:	2800      	cmp	r0, #0
 80131f6:	bf18      	it	ne
 80131f8:	3101      	addne	r1, #1
 80131fa:	b2e4      	uxtb	r4, r4
 80131fc:	b2eb      	uxtb	r3, r5
 80131fe:	b2c9      	uxtb	r1, r1
 8013200:	e7d4      	b.n	80131ac <MEMS_runMagCal+0xd1c>
 8013202:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013206:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 80134dc <MEMS_runMagCal+0x104c>
 801320a:	2b01      	cmp	r3, #1
 801320c:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013210:	f63f ada9 	bhi.w	8012d66 <MEMS_runMagCal+0x8d6>
 8013214:	2f00      	cmp	r7, #0
 8013216:	f43f adb3 	beq.w	8012d80 <MEMS_runMagCal+0x8f0>
 801321a:	9908      	ldr	r1, [sp, #32]
 801321c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013220:	2200      	movs	r2, #0
 8013222:	23ff      	movs	r3, #255	; 0xff
 8013224:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013228:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801322c:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013230:	ecbd 8b0a 	vpop	{d8-d12}
 8013234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013238:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801323c:	4634      	mov	r4, r6
 801323e:	2800      	cmp	r0, #0
 8013240:	f47f ae4a 	bne.w	8012ed8 <MEMS_runMagCal+0xa48>
 8013244:	9b07      	ldr	r3, [sp, #28]
 8013246:	2b00      	cmp	r3, #0
 8013248:	f47f ae5b 	bne.w	8012f02 <MEMS_runMagCal+0xa72>
 801324c:	9b03      	ldr	r3, [sp, #12]
 801324e:	9309      	str	r3, [sp, #36]	; 0x24
 8013250:	e766      	b.n	8013120 <MEMS_runMagCal+0xc90>
 8013252:	45b0      	cmp	r8, r6
 8013254:	f000 86b9 	beq.w	8013fca <MEMS_runMagCal+0x1b3a>
 8013258:	2f03      	cmp	r7, #3
 801325a:	f47f adc8 	bne.w	8012dee <MEMS_runMagCal+0x95e>
 801325e:	ee07 2a90 	vmov	s15, r2
 8013262:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80134e0 <MEMS_runMagCal+0x1050>
 8013266:	ed9b 7a01 	vldr	s14, [fp, #4]
 801326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801326e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327e:	f77f adb6 	ble.w	8012dee <MEMS_runMagCal+0x95e>
 8013282:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013286:	2b00      	cmp	r3, #0
 8013288:	f43f adb1 	beq.w	8012dee <MEMS_runMagCal+0x95e>
 801328c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013290:	330a      	adds	r3, #10
 8013292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013296:	ee07 3a90 	vmov	s15, r3
 801329a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80132a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132aa:	f77f ada0 	ble.w	8012dee <MEMS_runMagCal+0x95e>
 80132ae:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f47f ad9b 	bne.w	8012dee <MEMS_runMagCal+0x95e>
 80132b8:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f43f ad22 	beq.w	8012d06 <MEMS_runMagCal+0x876>
 80132c2:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80132c6:	2bff      	cmp	r3, #255	; 0xff
 80132c8:	f47f ad1d 	bne.w	8012d06 <MEMS_runMagCal+0x876>
 80132cc:	e58f      	b.n	8012dee <MEMS_runMagCal+0x95e>
 80132ce:	2300      	movs	r3, #0
 80132d0:	9307      	str	r3, [sp, #28]
 80132d2:	9303      	str	r3, [sp, #12]
 80132d4:	2700      	movs	r7, #0
 80132d6:	e52c      	b.n	8012d32 <MEMS_runMagCal+0x8a2>
 80132d8:	b11a      	cbz	r2, 80132e2 <MEMS_runMagCal+0xe52>
 80132da:	f1bc 0f00 	cmp.w	ip, #0
 80132de:	f47f af16 	bne.w	801310e <MEMS_runMagCal+0xc7e>
 80132e2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80132e6:	930a      	str	r3, [sp, #40]	; 0x28
 80132e8:	461a      	mov	r2, r3
 80132ea:	4297      	cmp	r7, r2
 80132ec:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80132f0:	f000 848f 	beq.w	8013c12 <MEMS_runMagCal+0x1782>
 80132f4:	3301      	adds	r3, #1
 80132f6:	4611      	mov	r1, r2
 80132f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80132fa:	1bdb      	subs	r3, r3, r7
 80132fc:	fb93 f2f2 	sdiv	r2, r3, r2
 8013300:	fb01 3212 	mls	r2, r1, r2, r3
 8013304:	2a00      	cmp	r2, #0
 8013306:	bfbc      	itt	lt
 8013308:	460b      	movlt	r3, r1
 801330a:	18d2      	addlt	r2, r2, r3
 801330c:	468c      	mov	ip, r1
 801330e:	b212      	sxth	r2, r2
 8013310:	f107 3eff 	add.w	lr, r7, #4294967295
 8013314:	fa5f fe8e 	uxtb.w	lr, lr
 8013318:	f10e 0e01 	add.w	lr, lr, #1
 801331c:	4496      	add	lr, r2
 801331e:	e002      	b.n	8013326 <MEMS_runMagCal+0xe96>
 8013320:	4572      	cmp	r2, lr
 8013322:	f43f aebb 	beq.w	801309c <MEMS_runMagCal+0xc0c>
 8013326:	fb92 f3fc 	sdiv	r3, r2, ip
 801332a:	fb0c 2313 	mls	r3, ip, r3, r2
 801332e:	b2db      	uxtb	r3, r3
 8013330:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013334:	3201      	adds	r2, #1
 8013336:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801333a:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 801333e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013342:	1a20      	subs	r0, r4, r0
 8013344:	1a69      	subs	r1, r5, r1
 8013346:	ee07 0a90 	vmov	s15, r0
 801334a:	ee06 1a90 	vmov	s13, r1
 801334e:	1af3      	subs	r3, r6, r3
 8013350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013354:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013358:	ee07 3a10 	vmov	s14, r3
 801335c:	eef0 7ae7 	vabs.f32	s15, s15
 8013360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013364:	eef0 6ae6 	vabs.f32	s13, s13
 8013368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801336c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013374:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337c:	ddd0      	ble.n	8013320 <MEMS_runMagCal+0xe90>
 801337e:	e6c6      	b.n	801310e <MEMS_runMagCal+0xc7e>
 8013380:	ee07 5a90 	vmov	s15, r5
 8013384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013388:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801338c:	eef0 7ae7 	vabs.f32	s15, s15
 8013390:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013398:	f77f ade9 	ble.w	8012f6e <MEMS_runMagCal+0xade>
 801339c:	ee07 6a90 	vmov	s15, r6
 80133a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133a4:	eef0 7ae7 	vabs.f32	s15, s15
 80133a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80133ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b0:	f73f aead 	bgt.w	801310e <MEMS_runMagCal+0xc7e>
 80133b4:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80133b8:	2f00      	cmp	r7, #0
 80133ba:	f47f addd 	bne.w	8012f78 <MEMS_runMagCal+0xae8>
 80133be:	fb94 f2f9 	sdiv	r2, r4, r9
 80133c2:	f04f 0301 	mov.w	r3, #1
 80133c6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80133ca:	9b05      	ldr	r3, [sp, #20]
 80133cc:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 80133d0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80133d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133d6:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 80133da:	fb09 4212 	mls	r2, r9, r2, r4
 80133de:	2a00      	cmp	r2, #0
 80133e0:	fb01 3300 	mla	r3, r1, r0, r3
 80133e4:	bfb8      	it	lt
 80133e6:	444a      	addlt	r2, r9
 80133e8:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 80133ec:	b213      	sxth	r3, r2
 80133ee:	ee00 3a10 	vmov	s0, r3
 80133f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80133f6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80133fa:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80133fe:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013402:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013406:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801340a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801340e:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013412:	f001 ff21 	bl	8015258 <roundf>
 8013416:	fb95 f3f9 	sdiv	r3, r5, r9
 801341a:	fb09 5513 	mls	r5, r9, r3, r5
 801341e:	2d00      	cmp	r5, #0
 8013420:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013424:	bfb8      	it	lt
 8013426:	444d      	addlt	r5, r9
 8013428:	b22d      	sxth	r5, r5
 801342a:	edcd 7a02 	vstr	s15, [sp, #8]
 801342e:	ee07 5a90 	vmov	s15, r5
 8013432:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013436:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801343a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801343e:	f001 ff0b 	bl	8015258 <roundf>
 8013442:	fb96 f3f9 	sdiv	r3, r6, r9
 8013446:	fb09 6613 	mls	r6, r9, r3, r6
 801344a:	2e00      	cmp	r6, #0
 801344c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013450:	bfb8      	it	lt
 8013452:	444e      	addlt	r6, r9
 8013454:	b236      	sxth	r6, r6
 8013456:	edcd 7a02 	vstr	s15, [sp, #8]
 801345a:	ee07 6a90 	vmov	s15, r6
 801345e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013462:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013466:	9204      	str	r2, [sp, #16]
 8013468:	2301      	movs	r3, #1
 801346a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801346e:	9309      	str	r3, [sp, #36]	; 0x24
 8013470:	f001 fef2 	bl	8015258 <roundf>
 8013474:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013478:	9a04      	ldr	r2, [sp, #16]
 801347a:	edcd 7a02 	vstr	s15, [sp, #8]
 801347e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013482:	ee1c 0a10 	vmov	r0, s24
 8013486:	4621      	mov	r1, r4
 8013488:	f7f7 feb0 	bl	800b1ec <MEMS_setMagIndexToOne>
 801348c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013490:	9302      	str	r3, [sp, #8]
 8013492:	e63c      	b.n	801310e <MEMS_runMagCal+0xc7e>
 8013494:	4603      	mov	r3, r0
 8013496:	2001      	movs	r0, #1
 8013498:	fa00 f303 	lsl.w	r3, r0, r3
 801349c:	ea01 0c03 	and.w	ip, r1, r3
 80134a0:	9906      	ldr	r1, [sp, #24]
 80134a2:	291f      	cmp	r1, #31
 80134a4:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 80134a8:	f63f ade2 	bhi.w	8013070 <MEMS_runMagCal+0xbe0>
 80134ac:	460b      	mov	r3, r1
 80134ae:	2101      	movs	r1, #1
 80134b0:	fa01 f303 	lsl.w	r3, r1, r3
 80134b4:	4003      	ands	r3, r0
 80134b6:	e5e1      	b.n	801307c <MEMS_runMagCal+0xbec>
 80134b8:	2301      	movs	r3, #1
 80134ba:	fa03 f308 	lsl.w	r3, r3, r8
 80134be:	401a      	ands	r2, r3
 80134c0:	e5c3      	b.n	801304a <MEMS_runMagCal+0xbba>
 80134c2:	2701      	movs	r7, #1
 80134c4:	e4df      	b.n	8012e86 <MEMS_runMagCal+0x9f6>
 80134c6:	2500      	movs	r5, #0
 80134c8:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80134cc:	462b      	mov	r3, r5
 80134ce:	e465      	b.n	8012d9c <MEMS_runMagCal+0x90c>
 80134d0:	460f      	mov	r7, r1
 80134d2:	e42b      	b.n	8012d2c <MEMS_runMagCal+0x89c>
 80134d4:	2300      	movs	r3, #0
 80134d6:	9304      	str	r3, [sp, #16]
 80134d8:	f7ff b941 	b.w	801275e <MEMS_runMagCal+0x2ce>
 80134dc:	477fff00 	.word	0x477fff00
 80134e0:	3a83126f 	.word	0x3a83126f
 80134e4:	42340000 	.word	0x42340000
 80134e8:	3faccccd 	.word	0x3faccccd
 80134ec:	00000000 	.word	0x00000000
 80134f0:	2905      	cmp	r1, #5
 80134f2:	f240 8383 	bls.w	8013bfc <MEMS_runMagCal+0x176c>
 80134f6:	2c05      	cmp	r4, #5
 80134f8:	f240 8380 	bls.w	8013bfc <MEMS_runMagCal+0x176c>
 80134fc:	2b05      	cmp	r3, #5
 80134fe:	f240 837d 	bls.w	8013bfc <MEMS_runMagCal+0x176c>
 8013502:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013506:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 801350a:	9302      	str	r3, [sp, #8]
 801350c:	9b06      	ldr	r3, [sp, #24]
 801350e:	4553      	cmp	r3, sl
 8013510:	f000 85f1 	beq.w	80140f6 <MEMS_runMagCal+0x1c66>
 8013514:	461a      	mov	r2, r3
 8013516:	9b02      	ldr	r3, [sp, #8]
 8013518:	3301      	adds	r3, #1
 801351a:	9304      	str	r3, [sp, #16]
 801351c:	1a9b      	subs	r3, r3, r2
 801351e:	fb93 f2fa 	sdiv	r2, r3, sl
 8013522:	fb0a 3212 	mls	r2, sl, r2, r3
 8013526:	2a00      	cmp	r2, #0
 8013528:	bfb8      	it	lt
 801352a:	4452      	addlt	r2, sl
 801352c:	46d1      	mov	r9, sl
 801352e:	b212      	sxth	r2, r2
 8013530:	9906      	ldr	r1, [sp, #24]
 8013532:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013536:	f101 38ff 	add.w	r8, r1, #4294967295
 801353a:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801353e:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013542:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013546:	fa5f f888 	uxtb.w	r8, r8
 801354a:	f108 0801 	add.w	r8, r8, #1
 801354e:	468e      	mov	lr, r1
 8013550:	463e      	mov	r6, r7
 8013552:	46ac      	mov	ip, r5
 8013554:	4490      	add	r8, r2
 8013556:	fb92 f3f9 	sdiv	r3, r2, r9
 801355a:	fb09 2313 	mls	r3, r9, r3, r2
 801355e:	b2db      	uxtb	r3, r3
 8013560:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013564:	3201      	adds	r2, #1
 8013566:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801356a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 801356e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013572:	42a1      	cmp	r1, r4
 8013574:	bfb8      	it	lt
 8013576:	4621      	movlt	r1, r4
 8013578:	45a6      	cmp	lr, r4
 801357a:	bfa8      	it	ge
 801357c:	46a6      	movge	lr, r4
 801357e:	4285      	cmp	r5, r0
 8013580:	bfb8      	it	lt
 8013582:	4605      	movlt	r5, r0
 8013584:	4584      	cmp	ip, r0
 8013586:	bfa8      	it	ge
 8013588:	4684      	movge	ip, r0
 801358a:	429f      	cmp	r7, r3
 801358c:	bfb8      	it	lt
 801358e:	461f      	movlt	r7, r3
 8013590:	429e      	cmp	r6, r3
 8013592:	bfa8      	it	ge
 8013594:	461e      	movge	r6, r3
 8013596:	4542      	cmp	r2, r8
 8013598:	d1dd      	bne.n	8013556 <MEMS_runMagCal+0x10c6>
 801359a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801359e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 80135a2:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80135a6:	eba1 010e 	sub.w	r1, r1, lr
 80135aa:	eba5 050c 	sub.w	r5, r5, ip
 80135ae:	1bbe      	subs	r6, r7, r6
 80135b0:	b209      	sxth	r1, r1
 80135b2:	b22d      	sxth	r5, r5
 80135b4:	b236      	sxth	r6, r6
 80135b6:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 80134e4 <MEMS_runMagCal+0x1054>
 80135ba:	ee28 7a87 	vmul.f32	s14, s17, s14
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f040 8593 	bne.w	80140ea <MEMS_runMagCal+0x1c5a>
 80135c4:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80135c8:	fab3 f883 	clz	r8, r3
 80135cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80135d0:	ee06 1a90 	vmov	s13, r1
 80135d4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80135d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80135e0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80135e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e8:	f300 8562 	bgt.w	80140b0 <MEMS_runMagCal+0x1c20>
 80135ec:	ee06 5a10 	vmov	s12, r5
 80135f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80135f4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80135f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fc:	f100 8558 	bmi.w	80140b0 <MEMS_runMagCal+0x1c20>
 8013600:	ee05 6a90 	vmov	s11, r6
 8013604:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013608:	eef4 7ae5 	vcmpe.f32	s15, s11
 801360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013610:	f100 854e 	bmi.w	80140b0 <MEMS_runMagCal+0x1c20>
 8013614:	428d      	cmp	r5, r1
 8013616:	462b      	mov	r3, r5
 8013618:	bfb8      	it	lt
 801361a:	460b      	movlt	r3, r1
 801361c:	42b3      	cmp	r3, r6
 801361e:	461a      	mov	r2, r3
 8013620:	bfb8      	it	lt
 8013622:	4632      	movlt	r2, r6
 8013624:	428e      	cmp	r6, r1
 8013626:	4633      	mov	r3, r6
 8013628:	bfa8      	it	ge
 801362a:	460b      	movge	r3, r1
 801362c:	42ab      	cmp	r3, r5
 801362e:	bfa8      	it	ge
 8013630:	462b      	movge	r3, r5
 8013632:	428a      	cmp	r2, r1
 8013634:	9202      	str	r2, [sp, #8]
 8013636:	f340 8588 	ble.w	801414a <MEMS_runMagCal+0x1cba>
 801363a:	4299      	cmp	r1, r3
 801363c:	bfb8      	it	lt
 801363e:	4619      	movlt	r1, r3
 8013640:	42aa      	cmp	r2, r5
 8013642:	dd02      	ble.n	801364a <MEMS_runMagCal+0x11ba>
 8013644:	42ab      	cmp	r3, r5
 8013646:	bfb8      	it	lt
 8013648:	4629      	movlt	r1, r5
 801364a:	9a02      	ldr	r2, [sp, #8]
 801364c:	4296      	cmp	r6, r2
 801364e:	da02      	bge.n	8013656 <MEMS_runMagCal+0x11c6>
 8013650:	429e      	cmp	r6, r3
 8013652:	bfc8      	it	gt
 8013654:	4631      	movgt	r1, r6
 8013656:	f1b8 0f00 	cmp.w	r8, #0
 801365a:	f000 8299 	beq.w	8013b90 <MEMS_runMagCal+0x1700>
 801365e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013666:	dc0d      	bgt.n	8013684 <MEMS_runMagCal+0x11f4>
 8013668:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013670:	dc08      	bgt.n	8013684 <MEMS_runMagCal+0x11f4>
 8013672:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367a:	bfcc      	ite	gt
 801367c:	f04f 0801 	movgt.w	r8, #1
 8013680:	f04f 0800 	movle.w	r8, #0
 8013684:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80134e8 <MEMS_runMagCal+0x1058>
 8013688:	ed9d 5a02 	vldr	s10, [sp, #8]
 801368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013690:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013694:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369c:	f2c0 8558 	blt.w	8014150 <MEMS_runMagCal+0x1cc0>
 80136a0:	ee07 1a90 	vmov	s15, r1
 80136a4:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 80136a8:	ee27 5a05 	vmul.f32	s10, s14, s10
 80136ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136b0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80136b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b8:	f2c0 854a 	blt.w	8014150 <MEMS_runMagCal+0x1cc0>
 80136bc:	9a02      	ldr	r2, [sp, #8]
 80136be:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80136c2:	f280 8545 	bge.w	8014150 <MEMS_runMagCal+0x1cc0>
 80136c6:	ee07 3a90 	vmov	s15, r3
 80136ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136ce:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 80136d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80136d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136de:	f140 8537 	bpl.w	8014150 <MEMS_runMagCal+0x1cc0>
 80136e2:	9b06      	ldr	r3, [sp, #24]
 80136e4:	4553      	cmp	r3, sl
 80136e6:	f000 8569 	beq.w	80141bc <MEMS_runMagCal+0x1d2c>
 80136ea:	461a      	mov	r2, r3
 80136ec:	9b04      	ldr	r3, [sp, #16]
 80136ee:	1a9b      	subs	r3, r3, r2
 80136f0:	fb93 f7f9 	sdiv	r7, r3, r9
 80136f4:	fb09 3717 	mls	r7, r9, r7, r3
 80136f8:	2f00      	cmp	r7, #0
 80136fa:	bfb8      	it	lt
 80136fc:	4457      	addlt	r7, sl
 80136fe:	b23f      	sxth	r7, r7
 8013700:	9b03      	ldr	r3, [sp, #12]
 8013702:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013706:	b27f      	sxtb	r7, r7
 8013708:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801370c:	9304      	str	r3, [sp, #16]
 801370e:	f1c7 0e01 	rsb	lr, r7, #1
 8013712:	469c      	mov	ip, r3
 8013714:	463b      	mov	r3, r7
 8013716:	fb93 f1f9 	sdiv	r1, r3, r9
 801371a:	fb09 3111 	mls	r1, r9, r1, r3
 801371e:	b24a      	sxtb	r2, r1
 8013720:	2a00      	cmp	r2, #0
 8013722:	f107 0701 	add.w	r7, r7, #1
 8013726:	bfb8      	it	lt
 8013728:	eb0a 0201 	addlt.w	r2, sl, r1
 801372c:	fb97 f3f9 	sdiv	r3, r7, r9
 8013730:	fb09 7313 	mls	r3, r9, r3, r7
 8013734:	bfb8      	it	lt
 8013736:	b252      	sxtblt	r2, r2
 8013738:	b25b      	sxtb	r3, r3
 801373a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801373e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013742:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013746:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 801374a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801374e:	1a45      	subs	r5, r0, r1
 8013750:	bf48      	it	mi
 8013752:	1a09      	submi	r1, r1, r0
 8013754:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013758:	bf4c      	ite	mi
 801375a:	b20d      	sxthmi	r5, r1
 801375c:	b22d      	sxthpl	r5, r5
 801375e:	1a21      	subs	r1, r4, r0
 8013760:	bf48      	it	mi
 8013762:	1b01      	submi	r1, r0, r4
 8013764:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013768:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801376c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013770:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013774:	1a9b      	subs	r3, r3, r2
 8013776:	1a26      	subs	r6, r4, r0
 8013778:	b21b      	sxth	r3, r3
 801377a:	bf48      	it	mi
 801377c:	1b06      	submi	r6, r0, r4
 801377e:	2b00      	cmp	r3, #0
 8013780:	b209      	sxth	r1, r1
 8013782:	b236      	sxth	r6, r6
 8013784:	dd20      	ble.n	80137c8 <MEMS_runMagCal+0x1338>
 8013786:	4429      	add	r1, r5
 8013788:	440e      	add	r6, r1
 801378a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801378e:	fb02 f606 	mul.w	r6, r2, r6
 8013792:	ee07 6a90 	vmov	s15, r6
 8013796:	ee07 3a10 	vmov	s14, r3
 801379a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801379e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80137a2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80137a6:	f10c 0c01 	add.w	ip, ip, #1
 80137aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80137ae:	fa5f fc8c 	uxtb.w	ip, ip
 80137b2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80137b6:	ee17 3a90 	vmov	r3, s15
 80137ba:	b21b      	sxth	r3, r3
 80137bc:	2b96      	cmp	r3, #150	; 0x96
 80137be:	dd03      	ble.n	80137c8 <MEMS_runMagCal+0x1338>
 80137c0:	9b04      	ldr	r3, [sp, #16]
 80137c2:	3301      	adds	r3, #1
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	9304      	str	r3, [sp, #16]
 80137c8:	eb0e 0307 	add.w	r3, lr, r7
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	4598      	cmp	r8, r3
 80137d0:	d8a0      	bhi.n	8013714 <MEMS_runMagCal+0x1284>
 80137d2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80137d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80137da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80137de:	4563      	cmp	r3, ip
 80137e0:	f340 820c 	ble.w	8013bfc <MEMS_runMagCal+0x176c>
 80137e4:	9b07      	ldr	r3, [sp, #28]
 80137e6:	b92b      	cbnz	r3, 80137f4 <MEMS_runMagCal+0x1364>
 80137e8:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80137ec:	3b02      	subs	r3, #2
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	f240 851e 	bls.w	8014230 <MEMS_runMagCal+0x1da0>
 80137f4:	ac25      	add	r4, sp, #148	; 0x94
 80137f6:	2220      	movs	r2, #32
 80137f8:	4620      	mov	r0, r4
 80137fa:	2100      	movs	r1, #0
 80137fc:	f003 fb34 	bl	8016e68 <memset>
 8013800:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8013804:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013808:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801380c:	2200      	movs	r2, #0
 801380e:	4286      	cmp	r6, r0
 8013810:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8013814:	921f      	str	r2, [sp, #124]	; 0x7c
 8013816:	f103 0301 	add.w	r3, r3, #1
 801381a:	f000 8501 	beq.w	8014220 <MEMS_runMagCal+0x1d90>
 801381e:	1b9b      	subs	r3, r3, r6
 8013820:	fb93 f2f0 	sdiv	r2, r3, r0
 8013824:	fb00 3312 	mls	r3, r0, r2, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	bfb8      	it	lt
 801382c:	181b      	addlt	r3, r3, r0
 801382e:	b21a      	sxth	r2, r3
 8013830:	2e00      	cmp	r6, #0
 8013832:	f000 854c 	beq.w	80142ce <MEMS_runMagCal+0x1e3e>
 8013836:	1e77      	subs	r7, r6, #1
 8013838:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 80134ec <MEMS_runMagCal+0x105c>
 801383c:	b2fd      	uxtb	r5, r7
 801383e:	3501      	adds	r5, #1
 8013840:	eeb0 5a65 	vmov.f32	s10, s11
 8013844:	eef0 4a65 	vmov.f32	s9, s11
 8013848:	4415      	add	r5, r2
 801384a:	4611      	mov	r1, r2
 801384c:	fb91 f3f0 	sdiv	r3, r1, r0
 8013850:	fb00 1313 	mls	r3, r0, r3, r1
 8013854:	b2db      	uxtb	r3, r3
 8013856:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801385a:	3101      	adds	r1, #1
 801385c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013860:	ee06 ca90 	vmov	s13, ip
 8013864:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013868:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801386c:	ee07 ca10 	vmov	s14, ip
 8013870:	ee07 3a90 	vmov	s15, r3
 8013874:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801387c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013880:	42a9      	cmp	r1, r5
 8013882:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013886:	ee35 5a07 	vadd.f32	s10, s10, s14
 801388a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801388e:	d1dd      	bne.n	801384c <MEMS_runMagCal+0x13bc>
 8013890:	ee07 6a90 	vmov	s15, r6
 8013894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801389c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 80138a0:	b2f9      	uxtb	r1, r7
 80138a2:	3101      	adds	r1, #1
 80138a4:	4411      	add	r1, r2
 80138a6:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8013c54 <MEMS_runMagCal+0x17c4>
 80138aa:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 80138ae:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80138b2:	ee29 aa85 	vmul.f32	s20, s19, s10
 80138b6:	ee69 9aa5 	vmul.f32	s19, s19, s11
 80138ba:	eef0 4a46 	vmov.f32	s9, s12
 80138be:	eeb0 4a46 	vmov.f32	s8, s12
 80138c2:	eef0 3a46 	vmov.f32	s7, s12
 80138c6:	eeb0 3a46 	vmov.f32	s6, s12
 80138ca:	eef0 2a46 	vmov.f32	s5, s12
 80138ce:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 80138d2:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 80138d6:	fb92 f3f0 	sdiv	r3, r2, r0
 80138da:	fb00 2313 	mls	r3, r0, r3, r2
 80138de:	b2db      	uxtb	r3, r3
 80138e0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80138e4:	3201      	adds	r2, #1
 80138e6:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 80138ea:	ee06 5a90 	vmov	s13, r5
 80138ee:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80138f2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80138f6:	ee07 5a10 	vmov	s14, r5
 80138fa:	ee07 3a90 	vmov	s15, r3
 80138fe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801390a:	ee76 6ac9 	vsub.f32	s13, s13, s18
 801390e:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8013912:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8013916:	4291      	cmp	r1, r2
 8013918:	eee6 2aa6 	vfma.f32	s5, s13, s13
 801391c:	eea6 3a87 	vfma.f32	s6, s13, s14
 8013920:	eea7 4a07 	vfma.f32	s8, s14, s14
 8013924:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8013928:	eee7 4a27 	vfma.f32	s9, s14, s15
 801392c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013930:	d1d1      	bne.n	80138d6 <MEMS_runMagCal+0x1446>
 8013932:	edc4 2a00 	vstr	s5, [r4]
 8013936:	ed84 3a01 	vstr	s6, [r4, #4]
 801393a:	edc4 3a02 	vstr	s7, [r4, #8]
 801393e:	ed84 4a03 	vstr	s8, [r4, #12]
 8013942:	edc4 4a04 	vstr	s9, [r4, #16]
 8013946:	ed84 6a05 	vstr	s12, [r4, #20]
 801394a:	a91a      	add	r1, sp, #104	; 0x68
 801394c:	4620      	mov	r0, r4
 801394e:	f7fe fce5 	bl	801231c <MEMS_EIG3>
 8013952:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8013956:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801395a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801395e:	eef0 5ae4 	vabs.f32	s11, s9
 8013962:	eef0 6ac6 	vabs.f32	s13, s12
 8013966:	eef4 6ae5 	vcmpe.f32	s13, s11
 801396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801396e:	bf8c      	ite	hi
 8013970:	eef0 7a65 	vmovhi.f32	s15, s11
 8013974:	eef0 7a66 	vmovls.f32	s15, s13
 8013978:	eeb0 7ac5 	vabs.f32	s14, s10
 801397c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013988:	bf88      	it	hi
 801398a:	eef0 7a47 	vmovhi.f32	s15, s14
 801398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013992:	bfb8      	it	lt
 8013994:	eef0 6a65 	vmovlt.f32	s13, s11
 8013998:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801399c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80139a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80139a8:	bfb8      	it	lt
 80139aa:	eeb0 7a66 	vmovlt.f32	s14, s13
 80139ae:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80139b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b6:	f300 8420 	bgt.w	80141fa <MEMS_runMagCal+0x1d6a>
 80139ba:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80139be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139c2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80139c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80139ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ce:	dd02      	ble.n	80139d6 <MEMS_runMagCal+0x1546>
 80139d0:	2b22      	cmp	r3, #34	; 0x22
 80139d2:	f240 8412 	bls.w	80141fa <MEMS_runMagCal+0x1d6a>
 80139d6:	ee76 7a24 	vadd.f32	s15, s12, s9
 80139da:	ee07 3a10 	vmov	s14, r3
 80139de:	ee77 7a85 	vadd.f32	s15, s15, s10
 80139e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139e6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013c28 <MEMS_runMagCal+0x1798>
 80139ea:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80139ee:	eef1 7ac6 	vsqrt.f32	s15, s12
 80139f2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80139f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80139fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fe:	f300 83fc 	bgt.w	80141fa <MEMS_runMagCal+0x1d6a>
 8013a02:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0e:	f100 83f4 	bmi.w	80141fa <MEMS_runMagCal+0x1d6a>
 8013a12:	eddf 7a86 	vldr	s15, [pc, #536]	; 8013c2c <MEMS_runMagCal+0x179c>
 8013a16:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8013a20:	932c      	str	r3, [sp, #176]	; 0xb0
 8013a22:	eddd 7a02 	vldr	s15, [sp, #8]
 8013a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a32:	d408      	bmi.n	8013a46 <MEMS_runMagCal+0x15b6>
 8013a34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013a38:	ee17 3a10 	vmov	r3, s14
 8013a3c:	b21b      	sxth	r3, r3
 8013a3e:	ee07 3a90 	vmov	s15, r3
 8013a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a46:	eddf 6a81 	vldr	s13, [pc, #516]	; 8013c4c <MEMS_runMagCal+0x17bc>
 8013a4a:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8013a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a56:	dc08      	bgt.n	8013a6a <MEMS_runMagCal+0x15da>
 8013a58:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013a5c:	ee17 3a10 	vmov	r3, s14
 8013a60:	b21b      	sxth	r3, r3
 8013a62:	ee07 3a90 	vmov	s15, r3
 8013a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a6a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8013a6e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8013c30 <MEMS_runMagCal+0x17a0>
 8013a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7a:	f340 8424 	ble.w	80142c6 <MEMS_runMagCal+0x1e36>
 8013a7e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013c34 <MEMS_runMagCal+0x17a4>
 8013a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8a:	f140 841c 	bpl.w	80142c6 <MEMS_runMagCal+0x1e36>
 8013a8e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8013c38 <MEMS_runMagCal+0x17a8>
 8013a92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a96:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013a9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013aa2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8013c4c <MEMS_runMagCal+0x17bc>
 8013aa6:	eddf ba6b 	vldr	s23, [pc, #428]	; 8013c54 <MEMS_runMagCal+0x17c4>
 8013aaa:	ed9f ba64 	vldr	s22, [pc, #400]	; 8013c3c <MEMS_runMagCal+0x17ac>
 8013aae:	eddf aa64 	vldr	s21, [pc, #400]	; 8013c40 <MEMS_runMagCal+0x17b0>
 8013ab2:	9d03      	ldr	r5, [sp, #12]
 8013ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ab8:	ee68 4a09 	vmul.f32	s9, s16, s18
 8013abc:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8013ac0:	ee68 9a29 	vmul.f32	s19, s16, s19
 8013ac4:	edc4 4a00 	vstr	s9, [r4]
 8013ac8:	ed84 aa01 	vstr	s20, [r4, #4]
 8013acc:	edc4 9a02 	vstr	s19, [r4, #8]
 8013ad0:	edc4 7a03 	vstr	s15, [r4, #12]
 8013ad4:	edc4 7a06 	vstr	s15, [r4, #24]
 8013ad8:	ab11      	add	r3, sp, #68	; 0x44
 8013ada:	ee1c 0a10 	vmov	r0, s24
 8013ade:	aa2d      	add	r2, sp, #180	; 0xb4
 8013ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	f7fe fa01 	bl	8011eec <MEMS_SolveLinearEq>
 8013aea:	1c6b      	adds	r3, r5, #1
 8013aec:	2800      	cmp	r0, #0
 8013aee:	f43e aed1 	beq.w	8012894 <MEMS_runMagCal+0x404>
 8013af2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8013af6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8013afa:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8013afe:	edd4 4a00 	vldr	s9, [r4]
 8013b02:	ed94 5a01 	vldr	s10, [r4, #4]
 8013b06:	edd4 5a02 	vldr	s11, [r4, #8]
 8013b0a:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8013b0e:	ed94 6a03 	vldr	s12, [r4, #12]
 8013b12:	eef0 6ae3 	vabs.f32	s13, s7
 8013b16:	eef0 7ac3 	vabs.f32	s15, s6
 8013b1a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b22:	bfb8      	it	lt
 8013b24:	eef0 7a66 	vmovlt.f32	s15, s13
 8013b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b30:	bfb8      	it	lt
 8013b32:	eef0 7a6b 	vmovlt.f32	s15, s23
 8013b36:	eef0 6ac4 	vabs.f32	s13, s8
 8013b3a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b42:	bfb8      	it	lt
 8013b44:	eef0 6a67 	vmovlt.f32	s13, s15
 8013b48:	ee74 4a83 	vadd.f32	s9, s9, s6
 8013b4c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8013b50:	ee75 5a84 	vadd.f32	s11, s11, s8
 8013b54:	ee36 6a07 	vadd.f32	s12, s12, s14
 8013b58:	eef4 6acb 	vcmpe.f32	s13, s22
 8013b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b60:	edc4 4a00 	vstr	s9, [r4]
 8013b64:	ed84 5a01 	vstr	s10, [r4, #4]
 8013b68:	edc4 5a02 	vstr	s11, [r4, #8]
 8013b6c:	ed84 6a03 	vstr	s12, [r4, #12]
 8013b70:	eef0 7ac7 	vabs.f32	s15, s14
 8013b74:	d507      	bpl.n	8013b86 <MEMS_runMagCal+0x16f6>
 8013b76:	eef4 7aea 	vcmpe.f32	s15, s21
 8013b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b7e:	d502      	bpl.n	8013b86 <MEMS_runMagCal+0x16f6>
 8013b80:	2d01      	cmp	r5, #1
 8013b82:	f63e ae8b 	bhi.w	801289c <MEMS_runMagCal+0x40c>
 8013b86:	b2dd      	uxtb	r5, r3
 8013b88:	2d05      	cmp	r5, #5
 8013b8a:	d1a5      	bne.n	8013ad8 <MEMS_runMagCal+0x1648>
 8013b8c:	f7fe be86 	b.w	801289c <MEMS_runMagCal+0x40c>
 8013b90:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8013b94:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8013b98:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8013b9c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 8013c44 <MEMS_runMagCal+0x17b4>
 8013ba0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8013ba4:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8013ba8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013bac:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013bb0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013bb4:	eef4 7ae4 	vcmpe.f32	s15, s9
 8013bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bbc:	bf88      	it	hi
 8013bbe:	eef0 7a64 	vmovhi.f32	s15, s9
 8013bc2:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bca:	bfb8      	it	lt
 8013bcc:	eef0 7a45 	vmovlt.f32	s15, s10
 8013bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013bd4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bdc:	dc0e      	bgt.n	8013bfc <MEMS_runMagCal+0x176c>
 8013bde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013be2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bea:	dc07      	bgt.n	8013bfc <MEMS_runMagCal+0x176c>
 8013bec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf8:	f77f ad73 	ble.w	80136e2 <MEMS_runMagCal+0x1252>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	f88b 3000 	strb.w	r3, [fp]
 8013c02:	f7ff b880 	b.w	8012d06 <MEMS_runMagCal+0x876>
 8013c06:	2300      	movs	r3, #0
 8013c08:	9307      	str	r3, [sp, #28]
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	9303      	str	r3, [sp, #12]
 8013c0e:	f7ff bb61 	b.w	80132d4 <MEMS_runMagCal+0xe44>
 8013c12:	3301      	adds	r3, #1
 8013c14:	fb93 f2f7 	sdiv	r2, r3, r7
 8013c18:	fb07 3212 	mls	r2, r7, r2, r3
 8013c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c1e:	b212      	sxth	r2, r2
 8013c20:	46bc      	mov	ip, r7
 8013c22:	f7ff bb75 	b.w	8013310 <MEMS_runMagCal+0xe80>
 8013c26:	bf00      	nop
 8013c28:	42960000 	.word	0x42960000
 8013c2c:	430d0000 	.word	0x430d0000
 8013c30:	41966667 	.word	0x41966667
 8013c34:	433c0000 	.word	0x433c0000
 8013c38:	3c2e4c41 	.word	0x3c2e4c41
 8013c3c:	3e99999a 	.word	0x3e99999a
 8013c40:	3f666666 	.word	0x3f666666
 8013c44:	3eaaaaab 	.word	0x3eaaaaab
 8013c48:	358637bd 	.word	0x358637bd
 8013c4c:	423c0000 	.word	0x423c0000
 8013c50:	3a83126f 	.word	0x3a83126f
 8013c54:	00000000 	.word	0x00000000
 8013c58:	eddd 7a08 	vldr	s15, [sp, #32]
 8013c5c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8013c50 <MEMS_runMagCal+0x17c0>
 8013c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c64:	ee07 3a10 	vmov	s14, r3
 8013c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c70:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013c74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013c78:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c80:	f63f aa67 	bhi.w	8013152 <MEMS_runMagCal+0xcc2>
 8013c84:	9b07      	ldr	r3, [sp, #28]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f43f a83d 	beq.w	8012d06 <MEMS_runMagCal+0x876>
 8013c8c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8013c90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c94:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c9c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca4:	bf4c      	ite	mi
 8013ca6:	2301      	movmi	r3, #1
 8013ca8:	2300      	movpl	r3, #0
 8013caa:	9307      	str	r3, [sp, #28]
 8013cac:	f7ff ba55 	b.w	801315a <MEMS_runMagCal+0xcca>
 8013cb0:	fb92 f1f0 	sdiv	r1, r2, r0
 8013cb4:	fb00 2211 	mls	r2, r0, r1, r2
 8013cb8:	b211      	sxth	r1, r2
 8013cba:	4605      	mov	r5, r0
 8013cbc:	f7ff b8da 	b.w	8012e74 <MEMS_runMagCal+0x9e4>
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	23ff      	movs	r3, #255	; 0xff
 8013cc4:	ee1c 0a10 	vmov	r0, s24
 8013cc8:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013ccc:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013cd0:	eeb0 0a49 	vmov.f32	s0, s18
 8013cd4:	4649      	mov	r1, r9
 8013cd6:	f7f7 fd11 	bl	800b6fc <MEMS_updateMagBufferIndex>
 8013cda:	f7ff b90b 	b.w	8012ef4 <MEMS_runMagCal+0xa64>
 8013cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ce2:	fb03 f60c 	mul.w	r6, r3, ip
 8013ce6:	fb03 f202 	mul.w	r2, r3, r2
 8013cea:	fb03 f301 	mul.w	r3, r3, r1
 8013cee:	ee06 6a90 	vmov	s13, r6
 8013cf2:	ee07 2a10 	vmov	s14, r2
 8013cf6:	ee07 3a90 	vmov	s15, r3
 8013cfa:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8013c48 <MEMS_runMagCal+0x17b8>
 8013cfe:	9e05      	ldr	r6, [sp, #20]
 8013d00:	9400      	str	r4, [sp, #0]
 8013d02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d0e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013d12:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013d16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013d1a:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013d1e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8013d22:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8013d26:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8013d2a:	6028      	str	r0, [r5, #0]
 8013d2c:	ed96 0a01 	vldr	s0, [r6, #4]
 8013d30:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8013d34:	4642      	mov	r2, r8
 8013d36:	ab0d      	add	r3, sp, #52	; 0x34
 8013d38:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8013d3c:	ad0e      	add	r5, sp, #56	; 0x38
 8013d3e:	ee1c 0a10 	vmov	r0, s24
 8013d42:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013d46:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8013d4a:	f7f7 fd79 	bl	800b840 <getMagStats.constprop.0>
 8013d4e:	9500      	str	r5, [sp, #0]
 8013d50:	ed96 0a01 	vldr	s0, [r6, #4]
 8013d54:	ee1c 0a10 	vmov	r0, s24
 8013d58:	aa2d      	add	r2, sp, #180	; 0xb4
 8013d5a:	ab0d      	add	r3, sp, #52	; 0x34
 8013d5c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013d60:	f7f7 fd6e 	bl	800b840 <getMagStats.constprop.0>
 8013d64:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8013c4c <MEMS_runMagCal+0x17bc>
 8013d68:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013d6c:	ed95 7a00 	vldr	s14, [r5]
 8013d70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d74:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013d78:	eef0 7ae7 	vabs.f32	s15, s15
 8013d7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d84:	d505      	bpl.n	8013d92 <MEMS_runMagCal+0x1902>
 8013d86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8e:	f100 81fa 	bmi.w	8014186 <MEMS_runMagCal+0x1cf6>
 8013d92:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013d96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d9e:	f140 81a8 	bpl.w	80140f2 <MEMS_runMagCal+0x1c62>
 8013da2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013daa:	9b03      	ldr	r3, [sp, #12]
 8013dac:	bfb8      	it	lt
 8013dae:	2302      	movlt	r3, #2
 8013db0:	edd4 6a00 	vldr	s13, [r4]
 8013db4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc4:	f57e af9f 	bpl.w	8012d06 <MEMS_runMagCal+0x876>
 8013dc8:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	f63e af9a 	bhi.w	8012d06 <MEMS_runMagCal+0x876>
 8013dd2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dda:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de2:	d40e      	bmi.n	8013e02 <MEMS_runMagCal+0x1972>
 8013de4:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013de8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df0:	f140 80d4 	bpl.w	8013f9c <MEMS_runMagCal+0x1b0c>
 8013df4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8013df8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	f080 80cd 	bcs.w	8013f9c <MEMS_runMagCal+0x1b0c>
 8013e02:	9b05      	ldr	r3, [sp, #20]
 8013e04:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8013e08:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8013e0c:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8013e10:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8013e14:	edd3 5a01 	vldr	s11, [r3, #4]
 8013e18:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8013e1c:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8013e20:	1b8b      	subs	r3, r1, r6
 8013e22:	eba0 0c07 	sub.w	ip, r0, r7
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	bfb8      	it	lt
 8013e2a:	425b      	neglt	r3, r3
 8013e2c:	f1bc 0f00 	cmp.w	ip, #0
 8013e30:	bfb8      	it	lt
 8013e32:	f1cc 0c00 	rsblt	ip, ip, #0
 8013e36:	4563      	cmp	r3, ip
 8013e38:	bfb8      	it	lt
 8013e3a:	4663      	movlt	r3, ip
 8013e3c:	eba2 0c04 	sub.w	ip, r2, r4
 8013e40:	f1bc 0f00 	cmp.w	ip, #0
 8013e44:	b21b      	sxth	r3, r3
 8013e46:	bfb8      	it	lt
 8013e48:	f1cc 0c00 	rsblt	ip, ip, #0
 8013e4c:	4563      	cmp	r3, ip
 8013e4e:	bfb8      	it	lt
 8013e50:	4663      	movlt	r3, ip
 8013e52:	b21b      	sxth	r3, r3
 8013e54:	ee07 3a90 	vmov	s15, r3
 8013e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e5c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8013e60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013e64:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6c:	f140 8096 	bpl.w	8013f9c <MEMS_runMagCal+0x1b0c>
 8013e70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013e74:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8013e78:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8013e7c:	ee04 3a90 	vmov	s9, r3
 8013e80:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8013e84:	ee05 3a10 	vmov	s10, r3
 8013e88:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 8013e8c:	ee07 0a90 	vmov	s15, r0
 8013e90:	ee05 3a90 	vmov	s11, r3
 8013e94:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013e98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013e9c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8013ea0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013ea4:	ee06 3a10 	vmov	s12, r3
 8013ea8:	ee03 7a90 	vmov	s7, r7
 8013eac:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8013eb0:	ee07 1a90 	vmov	s15, r1
 8013eb4:	ee00 3a90 	vmov	s1, r3
 8013eb8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013ebc:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8013ec0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013ec4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8013ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ecc:	ee64 4a84 	vmul.f32	s9, s9, s8
 8013ed0:	ee03 6a90 	vmov	s7, r6
 8013ed4:	eee2 6a22 	vfma.f32	s13, s4, s5
 8013ed8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013edc:	ee07 2a90 	vmov	s15, r2
 8013ee0:	ee01 3a10 	vmov	s2, r3
 8013ee4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013ee8:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8013eec:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8013ef0:	eee2 4a20 	vfma.f32	s9, s4, s1
 8013ef4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013ef8:	ee01 3a90 	vmov	s3, r3
 8013efc:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013f00:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013f04:	eea2 7a03 	vfma.f32	s14, s4, s6
 8013f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f0c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013f10:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013f14:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8013f18:	ee03 4a90 	vmov	s7, r4
 8013f1c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013f20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013f24:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013f28:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013f2c:	ee16 2a90 	vmov	r2, s13
 8013f30:	ee04 3a10 	vmov	s8, r3
 8013f34:	eea2 5a01 	vfma.f32	s10, s4, s2
 8013f38:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8013f3c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013f40:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8013f44:	eee2 7a23 	vfma.f32	s15, s4, s7
 8013f48:	ee14 2a90 	vmov	r2, s9
 8013f4c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013f50:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013f54:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013f58:	eee2 5a21 	vfma.f32	s11, s4, s3
 8013f5c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8013f60:	eea2 6a04 	vfma.f32	s12, s4, s8
 8013f64:	ee17 2a10 	vmov	r2, s14
 8013f68:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8013f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f70:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8013f74:	ee15 2a10 	vmov	r2, s10
 8013f78:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8013f7c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8013f80:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013f84:	ee17 2a90 	vmov	r2, s15
 8013f88:	ee16 3a10 	vmov	r3, s12
 8013f8c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8013f90:	ee15 2a90 	vmov	r2, s11
 8013f94:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013f98:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8013f9c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013f9e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013fa2:	f7fe bda2 	b.w	8012aea <MEMS_runMagCal+0x65a>
 8013fa6:	ee1c 0a10 	vmov	r0, s24
 8013faa:	eeb0 0a49 	vmov.f32	s0, s18
 8013fae:	4649      	mov	r1, r9
 8013fb0:	f7f7 fba4 	bl	800b6fc <MEMS_updateMagBufferIndex>
 8013fb4:	f7ff b89f 	b.w	80130f6 <MEMS_runMagCal+0xc66>
 8013fb8:	eddd 7a08 	vldr	s15, [sp, #32]
 8013fbc:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8013c50 <MEMS_runMagCal+0x17c0>
 8013fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fc8:	e660      	b.n	8013c8c <MEMS_runMagCal+0x17fc>
 8013fca:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8013c54 <MEMS_runMagCal+0x17c4>
 8013fce:	1c6b      	adds	r3, r5, #1
 8013fd0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8013fd4:	ad0e      	add	r5, sp, #56	; 0x38
 8013fd6:	fb93 f1f6 	sdiv	r1, r3, r6
 8013fda:	fa1f fc86 	uxth.w	ip, r6
 8013fde:	fb06 3311 	mls	r3, r6, r1, r3
 8013fe2:	edc5 6a00 	vstr	s13, [r5]
 8013fe6:	2e00      	cmp	r6, #0
 8013fe8:	f000 80e1 	beq.w	80141ae <MEMS_runMagCal+0x1d1e>
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013ff2:	1c58      	adds	r0, r3, #1
 8013ff4:	eeb0 6a66 	vmov.f32	s12, s13
 8013ff8:	fa10 fc8c 	uxtah	ip, r0, ip
 8013ffc:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8014000:	4619      	mov	r1, r3
 8014002:	e000      	b.n	8014006 <MEMS_runMagCal+0x1b76>
 8014004:	3001      	adds	r0, #1
 8014006:	fbb1 f3f6 	udiv	r3, r1, r6
 801400a:	fb06 1313 	mls	r3, r6, r3, r1
 801400e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8014012:	8a99      	ldrh	r1, [r3, #20]
 8014014:	4571      	cmp	r1, lr
 8014016:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 801401a:	f1a3 031c 	sub.w	r3, r3, #28
 801401e:	bf98      	it	ls
 8014020:	ebae 0301 	subls.w	r3, lr, r1
 8014024:	b29b      	uxth	r3, r3
 8014026:	fb03 f303 	mul.w	r3, r3, r3
 801402a:	ee07 1a10 	vmov	s14, r1
 801402e:	ee07 3a90 	vmov	s15, r3
 8014032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801403a:	4584      	cmp	ip, r0
 801403c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014040:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014044:	4601      	mov	r1, r0
 8014046:	d1dd      	bne.n	8014004 <MEMS_runMagCal+0x1b74>
 8014048:	ee07 4a90 	vmov	s15, r4
 801404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014050:	eddf 5ae6 	vldr	s11, [pc, #920]	; 80143ec <MEMS_runMagCal+0x1f5c>
 8014054:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 80143f0 <MEMS_runMagCal+0x1f60>
 8014058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801405c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014060:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014064:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014068:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801406c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014074:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014078:	edc5 7a00 	vstr	s15, [r5]
 801407c:	dd47      	ble.n	801410e <MEMS_runMagCal+0x1c7e>
 801407e:	eddf 7add 	vldr	s15, [pc, #884]	; 80143f4 <MEMS_runMagCal+0x1f64>
 8014082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014086:	2302      	movs	r3, #2
 8014088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014090:	f77e aead 	ble.w	8012dee <MEMS_runMagCal+0x95e>
 8014094:	2301      	movs	r3, #1
 8014096:	f88b 3001 	strb.w	r3, [fp, #1]
 801409a:	f7fe bea8 	b.w	8012dee <MEMS_runMagCal+0x95e>
 801409e:	ee1c 0a10 	vmov	r0, s24
 80140a2:	eeb0 0a49 	vmov.f32	s0, s18
 80140a6:	4649      	mov	r1, r9
 80140a8:	f7f7 fb28 	bl	800b6fc <MEMS_updateMagBufferIndex>
 80140ac:	f7fe bf0d 	b.w	8012eca <MEMS_runMagCal+0xa3a>
 80140b0:	9b02      	ldr	r3, [sp, #8]
 80140b2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80140b6:	f8db 100c 	ldr.w	r1, [fp, #12]
 80140ba:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80140be:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80140c2:	4413      	add	r3, r2
 80140c4:	4299      	cmp	r1, r3
 80140c6:	f4bf ad99 	bcs.w	8013bfc <MEMS_runMagCal+0x176c>
 80140ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80140d0:	fb03 f301 	mul.w	r3, r3, r1
 80140d4:	3364      	adds	r3, #100	; 0x64
 80140d6:	4293      	cmp	r3, r2
 80140d8:	bf38      	it	cc
 80140da:	4613      	movcc	r3, r2
 80140dc:	2200      	movs	r2, #0
 80140de:	f8cb 300c 	str.w	r3, [fp, #12]
 80140e2:	f88b 2000 	strb.w	r2, [fp]
 80140e6:	f7fe be0e 	b.w	8012d06 <MEMS_runMagCal+0x876>
 80140ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80140ee:	f7ff ba6f 	b.w	80135d0 <MEMS_runMagCal+0x1140>
 80140f2:	9b03      	ldr	r3, [sp, #12]
 80140f4:	e65c      	b.n	8013db0 <MEMS_runMagCal+0x1920>
 80140f6:	4619      	mov	r1, r3
 80140f8:	9b02      	ldr	r3, [sp, #8]
 80140fa:	3301      	adds	r3, #1
 80140fc:	fb93 f2f1 	sdiv	r2, r3, r1
 8014100:	fb01 3212 	mls	r2, r1, r2, r3
 8014104:	9304      	str	r3, [sp, #16]
 8014106:	b212      	sxth	r2, r2
 8014108:	4689      	mov	r9, r1
 801410a:	f7ff ba11 	b.w	8013530 <MEMS_runMagCal+0x10a0>
 801410e:	eddf 7aba 	vldr	s15, [pc, #744]	; 80143f8 <MEMS_runMagCal+0x1f68>
 8014112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80143f4 <MEMS_runMagCal+0x1f64>
 801411e:	d434      	bmi.n	801418a <MEMS_runMagCal+0x1cfa>
 8014120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014128:	bfc4      	itt	gt
 801412a:	2301      	movgt	r3, #1
 801412c:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014130:	f7ff b892 	b.w	8013258 <MEMS_runMagCal+0xdc8>
 8014134:	9b05      	ldr	r3, [sp, #20]
 8014136:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801413a:	ed93 0a01 	vldr	s0, [r3, #4]
 801413e:	f7fe bd84 	b.w	8012c4a <MEMS_runMagCal+0x7ba>
 8014142:	2303      	movs	r3, #3
 8014144:	9303      	str	r3, [sp, #12]
 8014146:	f7fe bdd4 	b.w	8012cf2 <MEMS_runMagCal+0x862>
 801414a:	4619      	mov	r1, r3
 801414c:	f7ff ba78 	b.w	8013640 <MEMS_runMagCal+0x11b0>
 8014150:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014158:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014160:	f73f ad4c 	bgt.w	8013bfc <MEMS_runMagCal+0x176c>
 8014164:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014168:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014170:	f73f ad44 	bgt.w	8013bfc <MEMS_runMagCal+0x176c>
 8014174:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014178:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014180:	f77f aaaf 	ble.w	80136e2 <MEMS_runMagCal+0x1252>
 8014184:	e53a      	b.n	8013bfc <MEMS_runMagCal+0x176c>
 8014186:	2303      	movs	r3, #3
 8014188:	e612      	b.n	8013db0 <MEMS_runMagCal+0x1920>
 801418a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801418e:	2300      	movs	r3, #0
 8014190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014194:	f88b 3001 	strb.w	r3, [fp, #1]
 8014198:	f04f 0103 	mov.w	r1, #3
 801419c:	bfc8      	it	gt
 801419e:	2301      	movgt	r3, #1
 80141a0:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 80141a4:	bfc8      	it	gt
 80141a6:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80141aa:	f7ff b858 	b.w	801325e <MEMS_runMagCal+0xdce>
 80141ae:	2303      	movs	r3, #3
 80141b0:	f88b c001 	strb.w	ip, [fp, #1]
 80141b4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80141b8:	f7ff b851 	b.w	801325e <MEMS_runMagCal+0xdce>
 80141bc:	9b04      	ldr	r3, [sp, #16]
 80141be:	fb93 f7f9 	sdiv	r7, r3, r9
 80141c2:	fb09 3717 	mls	r7, r9, r7, r3
 80141c6:	b23f      	sxth	r7, r7
 80141c8:	f7ff ba9a 	b.w	8013700 <MEMS_runMagCal+0x1270>
 80141cc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80143fc <MEMS_runMagCal+0x1f6c>
 80141d0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80141d4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80141d8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80141dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141e0:	ee87 0a08 	vdiv.f32	s0, s14, s16
 80141e4:	ee17 2a90 	vmov	r2, s15
 80141e8:	b291      	uxth	r1, r2
 80141ea:	b113      	cbz	r3, 80141f2 <MEMS_runMagCal+0x1d62>
 80141ec:	3b01      	subs	r3, #1
 80141ee:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80141f2:	ee1c 0a10 	vmov	r0, s24
 80141f6:	f7f7 fa81 	bl	800b6fc <MEMS_updateMagBufferIndex>
 80141fa:	eddd 7a08 	vldr	s15, [sp, #32]
 80141fe:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014202:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014400 <MEMS_runMagCal+0x1f70>
 8014206:	ee20 0a27 	vmul.f32	s0, s0, s15
 801420a:	f001 f825 	bl	8015258 <roundf>
 801420e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014212:	2300      	movs	r3, #0
 8014214:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014218:	f88b 3000 	strb.w	r3, [fp]
 801421c:	f7fe bd73 	b.w	8012d06 <MEMS_runMagCal+0x876>
 8014220:	fb93 f2f6 	sdiv	r2, r3, r6
 8014224:	fb06 3312 	mls	r3, r6, r2, r3
 8014228:	b21a      	sxth	r2, r3
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff bb00 	b.w	8013830 <MEMS_runMagCal+0x13a0>
 8014230:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014234:	f001 f810 	bl	8015258 <roundf>
 8014238:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801423c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014240:	ee17 3a90 	vmov	r3, s15
 8014244:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014248:	f8a9 3000 	strh.w	r3, [r9]
 801424c:	f001 f804 	bl	8015258 <roundf>
 8014250:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014254:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014258:	ee17 3a90 	vmov	r3, s15
 801425c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014260:	f000 fffa 	bl	8015258 <roundf>
 8014264:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014268:	ac0f      	add	r4, sp, #60	; 0x3c
 801426a:	ee17 5a90 	vmov	r5, s15
 801426e:	9400      	str	r4, [sp, #0]
 8014270:	ee1c 0a10 	vmov	r0, s24
 8014274:	4649      	mov	r1, r9
 8014276:	ab10      	add	r3, sp, #64	; 0x40
 8014278:	eeb0 0a48 	vmov.f32	s0, s16
 801427c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014280:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014284:	f7f7 fadc 	bl	800b840 <getMagStats.constprop.0>
 8014288:	ed94 7a00 	vldr	s14, [r4]
 801428c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014404 <MEMS_runMagCal+0x1f74>
 8014290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014298:	d50e      	bpl.n	80142b8 <MEMS_runMagCal+0x1e28>
 801429a:	b968      	cbnz	r0, 80142b8 <MEMS_runMagCal+0x1e28>
 801429c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80142a0:	b32b      	cbz	r3, 80142ee <MEMS_runMagCal+0x1e5e>
 80142a2:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 80142a6:	ee07 3a90 	vmov	s15, r3
 80142aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80142b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b6:	dc1a      	bgt.n	80142ee <MEMS_runMagCal+0x1e5e>
 80142b8:	2300      	movs	r3, #0
 80142ba:	f8c9 3000 	str.w	r3, [r9]
 80142be:	f8a9 3004 	strh.w	r3, [r9, #4]
 80142c2:	f7ff ba97 	b.w	80137f4 <MEMS_runMagCal+0x1364>
 80142c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142ca:	f7ff bbea 	b.w	8013aa2 <MEMS_runMagCal+0x1612>
 80142ce:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014408 <MEMS_runMagCal+0x1f78>
 80142d2:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80142d6:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 80142da:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 80142de:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80142e2:	ee29 aa8a 	vmul.f32	s20, s19, s20
 80142e6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80142ea:	f7ff bb2e 	b.w	801394a <MEMS_runMagCal+0x14ba>
 80142ee:	eddd 7a08 	vldr	s15, [sp, #32]
 80142f2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80142f6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014400 <MEMS_runMagCal+0x1f70>
 80142fa:	2303      	movs	r3, #3
 80142fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014300:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014304:	e781      	b.n	801420a <MEMS_runMagCal+0x1d7a>
 8014306:	eddf 6a41 	vldr	s13, [pc, #260]	; 801440c <MEMS_runMagCal+0x1f7c>
 801430a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	f77e ab1b 	ble.w	801294c <MEMS_runMagCal+0x4bc>
 8014316:	f7fe bb21 	b.w	801295c <MEMS_runMagCal+0x4cc>
 801431a:	2224      	movs	r2, #36	; 0x24
 801431c:	2100      	movs	r1, #0
 801431e:	a82d      	add	r0, sp, #180	; 0xb4
 8014320:	f002 fda2 	bl	8016e68 <memset>
 8014324:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014410 <MEMS_runMagCal+0x1f80>
 8014328:	eec7 9a89 	vdiv.f32	s19, s15, s18
 801432c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014330:	4627      	mov	r7, r4
 8014332:	ae2d      	add	r6, sp, #180	; 0xb4
 8014334:	2500      	movs	r5, #0
 8014336:	3501      	adds	r5, #1
 8014338:	ecb7 0a01 	vldmia	r7!, {s0}
 801433c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014340:	f000 ff8a 	bl	8015258 <roundf>
 8014344:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014348:	4633      	mov	r3, r6
 801434a:	edc3 9a00 	vstr	s19, [r3]
 801434e:	ee10 3a10 	vmov	r3, s0
 8014352:	2d03      	cmp	r5, #3
 8014354:	f829 3b02 	strh.w	r3, [r9], #2
 8014358:	f106 0610 	add.w	r6, r6, #16
 801435c:	d1eb      	bne.n	8014336 <MEMS_runMagCal+0x1ea6>
 801435e:	ad12      	add	r5, sp, #72	; 0x48
 8014360:	9500      	str	r5, [sp, #0]
 8014362:	ab2b      	add	r3, sp, #172	; 0xac
 8014364:	eeb0 0a48 	vmov.f32	s0, s16
 8014368:	ee1c 0a10 	vmov	r0, s24
 801436c:	a915      	add	r1, sp, #84	; 0x54
 801436e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014370:	f7f7 fa66 	bl	800b840 <getMagStats.constprop.0>
 8014374:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014410 <MEMS_runMagCal+0x1f80>
 8014378:	ed94 4a03 	vldr	s8, [r4, #12]
 801437c:	edd5 7a00 	vldr	s15, [r5]
 8014380:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014384:	edd4 6a06 	vldr	s13, [r4, #24]
 8014388:	edd4 4a00 	vldr	s9, [r4]
 801438c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014390:	edd4 5a02 	vldr	s11, [r4, #8]
 8014394:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014398:	ad2e      	add	r5, sp, #184	; 0xb8
 801439a:	2300      	movs	r3, #0
 801439c:	e9c5 3300 	strd	r3, r3, [r5]
 80143a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80143a4:	60ab      	str	r3, [r5, #8]
 80143a6:	61ab      	str	r3, [r5, #24]
 80143a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80143ac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80143b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b4:	ee84 0a88 	vdiv.f32	s0, s9, s16
 80143b8:	eec5 9a08 	vdiv.f32	s19, s10, s16
 80143bc:	ee85 aa88 	vdiv.f32	s20, s11, s16
 80143c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80143c4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80143c8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80143cc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80143d0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80143d4:	d405      	bmi.n	80143e2 <MEMS_runMagCal+0x1f52>
 80143d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143de:	f57e aa9b 	bpl.w	8012918 <MEMS_runMagCal+0x488>
 80143e2:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014414 <MEMS_runMagCal+0x1f84>
 80143e6:	f7fe ba9d 	b.w	8012924 <MEMS_runMagCal+0x494>
 80143ea:	bf00      	nop
 80143ec:	3c23d70a 	.word	0x3c23d70a
 80143f0:	4b095440 	.word	0x4b095440
 80143f4:	481c4000 	.word	0x481c4000
 80143f8:	471c4000 	.word	0x471c4000
 80143fc:	433d0000 	.word	0x433d0000
 8014400:	3a83126f 	.word	0x3a83126f
 8014404:	3ff4cccd 	.word	0x3ff4cccd
 8014408:	7f800000 	.word	0x7f800000
 801440c:	3ee66666 	.word	0x3ee66666
 8014410:	423c0000 	.word	0x423c0000
 8014414:	00000000 	.word	0x00000000
 8014418:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 801441c:	4293      	cmp	r3, r2
 801441e:	f67e acac 	bls.w	8012d7a <MEMS_runMagCal+0x8ea>
 8014422:	f7fe bca0 	b.w	8012d66 <MEMS_runMagCal+0x8d6>
 8014426:	bf00      	nop

08014428 <MotionFX_GetStateSize>:
 8014428:	f44f 6018 	mov.w	r0, #2432	; 0x980
 801442c:	4770      	bx	lr
 801442e:	bf00      	nop

08014430 <MotionFX_initialize>:
 8014430:	4a3b      	ldr	r2, [pc, #236]	; (8014520 <MotionFX_initialize+0xf0>)
 8014432:	493c      	ldr	r1, [pc, #240]	; (8014524 <MotionFX_initialize+0xf4>)
 8014434:	6813      	ldr	r3, [r2, #0]
 8014436:	f023 0301 	bic.w	r3, r3, #1
 801443a:	b530      	push	{r4, r5, lr}
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	680b      	ldr	r3, [r1, #0]
 8014440:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014444:	4013      	ands	r3, r2
 8014446:	f24c 2540 	movw	r5, #49728	; 0xc240
 801444a:	42ab      	cmp	r3, r5
 801444c:	b085      	sub	sp, #20
 801444e:	4604      	mov	r4, r0
 8014450:	d013      	beq.n	801447a <MotionFX_initialize+0x4a>
 8014452:	680b      	ldr	r3, [r1, #0]
 8014454:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014458:	4013      	ands	r3, r2
 801445a:	428b      	cmp	r3, r1
 801445c:	d00d      	beq.n	801447a <MotionFX_initialize+0x4a>
 801445e:	4b32      	ldr	r3, [pc, #200]	; (8014528 <MotionFX_initialize+0xf8>)
 8014460:	2201      	movs	r2, #1
 8014462:	601a      	str	r2, [r3, #0]
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	2a00      	cmp	r2, #0
 8014468:	d1fc      	bne.n	8014464 <MotionFX_initialize+0x34>
 801446a:	4b30      	ldr	r3, [pc, #192]	; (801452c <MotionFX_initialize+0xfc>)
 801446c:	4a30      	ldr	r2, [pc, #192]	; (8014530 <MotionFX_initialize+0x100>)
 801446e:	601a      	str	r2, [r3, #0]
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	4b30      	ldr	r3, [pc, #192]	; (8014534 <MotionFX_initialize+0x104>)
 8014474:	429a      	cmp	r2, r3
 8014476:	d01f      	beq.n	80144b8 <MotionFX_initialize+0x88>
 8014478:	e7fe      	b.n	8014478 <MotionFX_initialize+0x48>
 801447a:	4b2f      	ldr	r3, [pc, #188]	; (8014538 <MotionFX_initialize+0x108>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d1ed      	bne.n	801445e <MotionFX_initialize+0x2e>
 8014482:	4a2e      	ldr	r2, [pc, #184]	; (801453c <MotionFX_initialize+0x10c>)
 8014484:	6813      	ldr	r3, [r2, #0]
 8014486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801448a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801448e:	d006      	beq.n	801449e <MotionFX_initialize+0x6e>
 8014490:	6813      	ldr	r3, [r2, #0]
 8014492:	f240 4283 	movw	r2, #1155	; 0x483
 8014496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801449a:	4293      	cmp	r3, r2
 801449c:	d1df      	bne.n	801445e <MotionFX_initialize+0x2e>
 801449e:	4b28      	ldr	r3, [pc, #160]	; (8014540 <MotionFX_initialize+0x110>)
 80144a0:	2201      	movs	r2, #1
 80144a2:	601a      	str	r2, [r3, #0]
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	2a00      	cmp	r2, #0
 80144a8:	d1fc      	bne.n	80144a4 <MotionFX_initialize+0x74>
 80144aa:	4b26      	ldr	r3, [pc, #152]	; (8014544 <MotionFX_initialize+0x114>)
 80144ac:	4a20      	ldr	r2, [pc, #128]	; (8014530 <MotionFX_initialize+0x100>)
 80144ae:	601a      	str	r2, [r3, #0]
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	4b20      	ldr	r3, [pc, #128]	; (8014534 <MotionFX_initialize+0x104>)
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d1df      	bne.n	8014478 <MotionFX_initialize+0x48>
 80144b8:	4b23      	ldr	r3, [pc, #140]	; (8014548 <MotionFX_initialize+0x118>)
 80144ba:	4a24      	ldr	r2, [pc, #144]	; (801454c <MotionFX_initialize+0x11c>)
 80144bc:	9301      	str	r3, [sp, #4]
 80144be:	2501      	movs	r5, #1
 80144c0:	4620      	mov	r0, r4
 80144c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80144c6:	7115      	strb	r5, [r2, #4]
 80144c8:	f7f7 faa0 	bl	800ba0c <MFX_emptyAttitude>
 80144cc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80144d0:	a901      	add	r1, sp, #4
 80144d2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80144d6:	f7f6 fdc3 	bl	800b060 <updateOrientation>
 80144da:	a903      	add	r1, sp, #12
 80144dc:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80144e0:	f7f6 fdbe 	bl	800b060 <updateOrientation>
 80144e4:	a902      	add	r1, sp, #8
 80144e6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80144ea:	f7f6 fdb9 	bl	800b060 <updateOrientation>
 80144ee:	4818      	ldr	r0, [pc, #96]	; (8014550 <MotionFX_initialize+0x120>)
 80144f0:	4918      	ldr	r1, [pc, #96]	; (8014554 <MotionFX_initialize+0x124>)
 80144f2:	4a19      	ldr	r2, [pc, #100]	; (8014558 <MotionFX_initialize+0x128>)
 80144f4:	4b19      	ldr	r3, [pc, #100]	; (801455c <MotionFX_initialize+0x12c>)
 80144f6:	7365      	strb	r5, [r4, #13]
 80144f8:	4d19      	ldr	r5, [pc, #100]	; (8014560 <MotionFX_initialize+0x130>)
 80144fa:	62a0      	str	r0, [r4, #40]	; 0x28
 80144fc:	6361      	str	r1, [r4, #52]	; 0x34
 80144fe:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014502:	2100      	movs	r1, #0
 8014504:	61a2      	str	r2, [r4, #24]
 8014506:	61e3      	str	r3, [r4, #28]
 8014508:	f44f 7281 	mov.w	r2, #258	; 0x102
 801450c:	f240 1301 	movw	r3, #257	; 0x101
 8014510:	6225      	str	r5, [r4, #32]
 8014512:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014514:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014518:	80a2      	strh	r2, [r4, #4]
 801451a:	81e3      	strh	r3, [r4, #14]
 801451c:	b005      	add	sp, #20
 801451e:	bd30      	pop	{r4, r5, pc}
 8014520:	e0002000 	.word	0xe0002000
 8014524:	e000ed00 	.word	0xe000ed00
 8014528:	40023008 	.word	0x40023008
 801452c:	40023000 	.word	0x40023000
 8014530:	f407a5c2 	.word	0xf407a5c2
 8014534:	b5e8b5cd 	.word	0xb5e8b5cd
 8014538:	e0042000 	.word	0xe0042000
 801453c:	5c001000 	.word	0x5c001000
 8014540:	58024c08 	.word	0x58024c08
 8014544:	58024c00 	.word	0x58024c00
 8014548:	00756e65 	.word	0x00756e65
 801454c:	20000178 	.word	0x20000178
 8014550:	3f666666 	.word	0x3f666666
 8014554:	3f2ac083 	.word	0x3f2ac083
 8014558:	3a51b717 	.word	0x3a51b717
 801455c:	3a378034 	.word	0x3a378034
 8014560:	3b378034 	.word	0x3b378034

08014564 <MotionFX_setKnobs>:
 8014564:	4b23      	ldr	r3, [pc, #140]	; (80145f4 <MotionFX_setKnobs+0x90>)
 8014566:	791b      	ldrb	r3, [r3, #4]
 8014568:	b903      	cbnz	r3, 801456c <MotionFX_setKnobs+0x8>
 801456a:	4770      	bx	lr
 801456c:	2900      	cmp	r1, #0
 801456e:	d0fc      	beq.n	801456a <MotionFX_setKnobs+0x6>
 8014570:	b570      	push	{r4, r5, r6, lr}
 8014572:	4604      	mov	r4, r0
 8014574:	684a      	ldr	r2, [r1, #4]
 8014576:	6808      	ldr	r0, [r1, #0]
 8014578:	688b      	ldr	r3, [r1, #8]
 801457a:	6363      	str	r3, [r4, #52]	; 0x34
 801457c:	62a0      	str	r0, [r4, #40]	; 0x28
 801457e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014580:	7b0b      	ldrb	r3, [r1, #12]
 8014582:	7163      	strb	r3, [r4, #5]
 8014584:	6908      	ldr	r0, [r1, #16]
 8014586:	694a      	ldr	r2, [r1, #20]
 8014588:	698b      	ldr	r3, [r1, #24]
 801458a:	6223      	str	r3, [r4, #32]
 801458c:	61e2      	str	r2, [r4, #28]
 801458e:	61a0      	str	r0, [r4, #24]
 8014590:	7f0b      	ldrb	r3, [r1, #28]
 8014592:	7123      	strb	r3, [r4, #4]
 8014594:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014598:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801459c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801459e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 80145a2:	460a      	mov	r2, r1
 80145a4:	460b      	mov	r3, r1
 80145a6:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 80145aa:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 80145ae:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 80145b2:	7889      	ldrb	r1, [r1, #2]
 80145b4:	7892      	ldrb	r2, [r2, #2]
 80145b6:	789b      	ldrb	r3, [r3, #2]
 80145b8:	b084      	sub	sp, #16
 80145ba:	f88d 1006 	strb.w	r1, [sp, #6]
 80145be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80145c2:	a901      	add	r1, sp, #4
 80145c4:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80145c8:	f88d 200a 	strb.w	r2, [sp, #10]
 80145cc:	f8ad 6004 	strh.w	r6, [sp, #4]
 80145d0:	f8ad 5008 	strh.w	r5, [sp, #8]
 80145d4:	f88d 300e 	strb.w	r3, [sp, #14]
 80145d8:	f7f6 fd42 	bl	800b060 <updateOrientation>
 80145dc:	a903      	add	r1, sp, #12
 80145de:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80145e2:	f7f6 fd3d 	bl	800b060 <updateOrientation>
 80145e6:	a902      	add	r1, sp, #8
 80145e8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80145ec:	f7f6 fd38 	bl	800b060 <updateOrientation>
 80145f0:	b004      	add	sp, #16
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	20000178 	.word	0x20000178

080145f8 <MotionFX_getKnobs>:
 80145f8:	4b1c      	ldr	r3, [pc, #112]	; (801466c <MotionFX_getKnobs+0x74>)
 80145fa:	791b      	ldrb	r3, [r3, #4]
 80145fc:	b903      	cbnz	r3, 8014600 <MotionFX_getKnobs+0x8>
 80145fe:	4770      	bx	lr
 8014600:	460a      	mov	r2, r1
 8014602:	2900      	cmp	r1, #0
 8014604:	d0fb      	beq.n	80145fe <MotionFX_getKnobs+0x6>
 8014606:	b510      	push	{r4, lr}
 8014608:	4604      	mov	r4, r0
 801460a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801460c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801460e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014610:	6093      	str	r3, [r2, #8]
 8014612:	6010      	str	r0, [r2, #0]
 8014614:	6051      	str	r1, [r2, #4]
 8014616:	7963      	ldrb	r3, [r4, #5]
 8014618:	7313      	strb	r3, [r2, #12]
 801461a:	69a0      	ldr	r0, [r4, #24]
 801461c:	69e1      	ldr	r1, [r4, #28]
 801461e:	6a23      	ldr	r3, [r4, #32]
 8014620:	6193      	str	r3, [r2, #24]
 8014622:	6110      	str	r0, [r2, #16]
 8014624:	6151      	str	r1, [r2, #20]
 8014626:	7923      	ldrb	r3, [r4, #4]
 8014628:	7713      	strb	r3, [r2, #28]
 801462a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801462e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014632:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014638:	f102 011d 	add.w	r1, r2, #29
 801463c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014640:	f7f6 fb66 	bl	800ad10 <findAxis>
 8014644:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014648:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801464c:	f7f6 fb60 	bl	800ad10 <findAxis>
 8014650:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014654:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014658:	f7f6 fb5a 	bl	800ad10 <findAxis>
 801465c:	2300      	movs	r3, #0
 801465e:	f882 3020 	strb.w	r3, [r2, #32]
 8014662:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014666:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801466a:	bd10      	pop	{r4, pc}
 801466c:	20000178 	.word	0x20000178

08014670 <MotionFX_enable_6X>:
 8014670:	4b0e      	ldr	r3, [pc, #56]	; (80146ac <MotionFX_enable_6X+0x3c>)
 8014672:	791b      	ldrb	r3, [r3, #4]
 8014674:	b903      	cbnz	r3, 8014678 <MotionFX_enable_6X+0x8>
 8014676:	4770      	bx	lr
 8014678:	2900      	cmp	r1, #0
 801467a:	d0fc      	beq.n	8014676 <MotionFX_enable_6X+0x6>
 801467c:	b530      	push	{r4, r5, lr}
 801467e:	1d05      	adds	r5, r0, #4
 8014680:	b099      	sub	sp, #100	; 0x64
 8014682:	4604      	mov	r4, r0
 8014684:	4629      	mov	r1, r5
 8014686:	225c      	movs	r2, #92	; 0x5c
 8014688:	a801      	add	r0, sp, #4
 801468a:	f002 fbdf 	bl	8016e4c <memcpy>
 801468e:	4620      	mov	r0, r4
 8014690:	f7f7 f9bc 	bl	800ba0c <MFX_emptyAttitude>
 8014694:	a901      	add	r1, sp, #4
 8014696:	4628      	mov	r0, r5
 8014698:	225c      	movs	r2, #92	; 0x5c
 801469a:	f002 fbd7 	bl	8016e4c <memcpy>
 801469e:	2300      	movs	r3, #0
 80146a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80146a4:	7363      	strb	r3, [r4, #13]
 80146a6:	b019      	add	sp, #100	; 0x64
 80146a8:	bd30      	pop	{r4, r5, pc}
 80146aa:	bf00      	nop
 80146ac:	20000178 	.word	0x20000178

080146b0 <MotionFX_enable_9X>:
 80146b0:	4b0e      	ldr	r3, [pc, #56]	; (80146ec <MotionFX_enable_9X+0x3c>)
 80146b2:	791b      	ldrb	r3, [r3, #4]
 80146b4:	b903      	cbnz	r3, 80146b8 <MotionFX_enable_9X+0x8>
 80146b6:	4770      	bx	lr
 80146b8:	2900      	cmp	r1, #0
 80146ba:	d0fc      	beq.n	80146b6 <MotionFX_enable_9X+0x6>
 80146bc:	b530      	push	{r4, r5, lr}
 80146be:	1d05      	adds	r5, r0, #4
 80146c0:	b099      	sub	sp, #100	; 0x64
 80146c2:	4604      	mov	r4, r0
 80146c4:	4629      	mov	r1, r5
 80146c6:	225c      	movs	r2, #92	; 0x5c
 80146c8:	a801      	add	r0, sp, #4
 80146ca:	f002 fbbf 	bl	8016e4c <memcpy>
 80146ce:	4620      	mov	r0, r4
 80146d0:	f7f7 f99c 	bl	800ba0c <MFX_emptyAttitude>
 80146d4:	a901      	add	r1, sp, #4
 80146d6:	4628      	mov	r0, r5
 80146d8:	225c      	movs	r2, #92	; 0x5c
 80146da:	f002 fbb7 	bl	8016e4c <memcpy>
 80146de:	2301      	movs	r3, #1
 80146e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80146e4:	7363      	strb	r3, [r4, #13]
 80146e6:	b019      	add	sp, #100	; 0x64
 80146e8:	bd30      	pop	{r4, r5, pc}
 80146ea:	bf00      	nop
 80146ec:	20000178 	.word	0x20000178

080146f0 <MotionFX_update>:
 80146f0:	b470      	push	{r4, r5, r6}
 80146f2:	4c06      	ldr	r4, [pc, #24]	; (801470c <MotionFX_update+0x1c>)
 80146f4:	9e03      	ldr	r6, [sp, #12]
 80146f6:	7925      	ldrb	r5, [r4, #4]
 80146f8:	b90d      	cbnz	r5, 80146fe <MotionFX_update+0xe>
 80146fa:	bc70      	pop	{r4, r5, r6}
 80146fc:	4770      	bx	lr
 80146fe:	461c      	mov	r4, r3
 8014700:	ed94 0a00 	vldr	s0, [r4]
 8014704:	4633      	mov	r3, r6
 8014706:	bc70      	pop	{r4, r5, r6}
 8014708:	f7fc bf02 	b.w	8011510 <iNemoEngine_API_Update>
 801470c:	20000178 	.word	0x20000178

08014710 <MotionFX_propagate>:
 8014710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014714:	ed2d 8b06 	vpush	{d8-d10}
 8014718:	4ca3      	ldr	r4, [pc, #652]	; (80149a8 <MotionFX_propagate+0x298>)
 801471a:	7927      	ldrb	r7, [r4, #4]
 801471c:	b0a0      	sub	sp, #128	; 0x80
 801471e:	b927      	cbnz	r7, 801472a <MotionFX_propagate+0x1a>
 8014720:	b020      	add	sp, #128	; 0x80
 8014722:	ecbd 8b06 	vpop	{d8-d10}
 8014726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801472a:	4616      	mov	r6, r2
 801472c:	4604      	mov	r4, r0
 801472e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014732:	edd3 9a00 	vldr	s19, [r3]
 8014736:	460d      	mov	r5, r1
 8014738:	6851      	ldr	r1, [r2, #4]
 801473a:	6892      	ldr	r2, [r2, #8]
 801473c:	ab13      	add	r3, sp, #76	; 0x4c
 801473e:	c307      	stmia	r3!, {r0, r1, r2}
 8014740:	6830      	ldr	r0, [r6, #0]
 8014742:	6871      	ldr	r1, [r6, #4]
 8014744:	68b2      	ldr	r2, [r6, #8]
 8014746:	ab10      	add	r3, sp, #64	; 0x40
 8014748:	c307      	stmia	r3!, {r0, r1, r2}
 801474a:	4637      	mov	r7, r6
 801474c:	ab16      	add	r3, sp, #88	; 0x58
 801474e:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	68ba      	ldr	r2, [r7, #8]
 8014756:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 801475a:	c307      	stmia	r3!, {r0, r1, r2}
 801475c:	aa13      	add	r2, sp, #76	; 0x4c
 801475e:	4651      	mov	r1, sl
 8014760:	a803      	add	r0, sp, #12
 8014762:	f7f6 fa73 	bl	800ac4c <rotVect>
 8014766:	aa16      	add	r2, sp, #88	; 0x58
 8014768:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801476c:	a806      	add	r0, sp, #24
 801476e:	f7f6 fa6d 	bl	800ac4c <rotVect>
 8014772:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014776:	2b09      	cmp	r3, #9
 8014778:	d829      	bhi.n	80147ce <MotionFX_propagate+0xbe>
 801477a:	eddd 8a04 	vldr	s17, [sp, #16]
 801477e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014782:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014786:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801478a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801478e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014792:	ee17 0a90 	vmov	r0, s15
 8014796:	f7eb fe7b 	bl	8000490 <__aeabi_f2d>
 801479a:	ec41 0b10 	vmov	d0, r0, r1
 801479e:	f000 fded 	bl	801537c <sqrt>
 80147a2:	ec51 0b10 	vmov	r0, r1, d0
 80147a6:	f7ec f97b 	bl	8000aa0 <__aeabi_d2f>
 80147aa:	ee07 0a90 	vmov	s15, r0
 80147ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147b2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80147b6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80147ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80147be:	ee28 8a27 	vmul.f32	s16, s16, s15
 80147c2:	ed8d 9a03 	vstr	s18, [sp, #12]
 80147c6:	edcd 8a04 	vstr	s17, [sp, #16]
 80147ca:	ed8d 8a05 	vstr	s16, [sp, #20]
 80147ce:	7923      	ldrb	r3, [r4, #4]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f000 80d3 	beq.w	801497c <MotionFX_propagate+0x26c>
 80147d6:	ee07 3a90 	vmov	s15, r3
 80147da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80147e6:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 80147ea:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80147ee:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80147f2:	edd2 7a00 	vldr	s15, [r2]
 80147f6:	eddd 8a06 	vldr	s17, [sp, #24]
 80147fa:	ed9d 6a07 	vldr	s12, [sp, #28]
 80147fe:	ed9d 8a08 	vldr	s16, [sp, #32]
 8014802:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80149ac <MotionFX_propagate+0x29c>
 8014806:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80149b0 <MotionFX_propagate+0x2a0>
 801480a:	eee6 7aa8 	vfma.f32	s15, s13, s17
 801480e:	ee26 9a07 	vmul.f32	s18, s12, s14
 8014812:	edc2 7a00 	vstr	s15, [r2]
 8014816:	edd3 7a00 	vldr	s15, [r3]
 801481a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801481e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014822:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014826:	ee68 8a87 	vmul.f32	s17, s17, s14
 801482a:	edc3 7a00 	vstr	s15, [r3]
 801482e:	edd2 7a00 	vldr	s15, [r2]
 8014832:	edcd 8a06 	vstr	s17, [sp, #24]
 8014836:	eee6 7a88 	vfma.f32	s15, s13, s16
 801483a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 801483e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014842:	edc2 7a00 	vstr	s15, [r2]
 8014846:	edd3 7a00 	vldr	s15, [r3]
 801484a:	ed8d 8a08 	vstr	s16, [sp, #32]
 801484e:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014852:	ed93 7a00 	vldr	s14, [r3]
 8014856:	ee39 9a67 	vsub.f32	s18, s18, s15
 801485a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801485e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014862:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014866:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801486a:	ed93 7a00 	vldr	s14, [r3]
 801486e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014872:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014876:	eee8 7a08 	vfma.f32	s15, s16, s16
 801487a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801487e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014886:	dd7e      	ble.n	8014986 <MotionFX_propagate+0x276>
 8014888:	eeb1 aae7 	vsqrt.f32	s20, s15
 801488c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014890:	eeb0 0a69 	vmov.f32	s0, s19
 8014894:	f000 fd06 	bl	80152a4 <sinf>
 8014898:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 801489c:	eeb0 0a69 	vmov.f32	s0, s19
 80148a0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80148a4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80148a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80148ac:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80148b0:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80148b4:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80148b8:	f000 fc8e 	bl	80151d8 <cosf>
 80148bc:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80148c0:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80148c4:	a809      	add	r0, sp, #36	; 0x24
 80148c6:	4632      	mov	r2, r6
 80148c8:	4631      	mov	r1, r6
 80148ca:	f7f6 fc55 	bl	800b178 <qmult>
 80148ce:	edd8 7a00 	vldr	s15, [r8]
 80148d2:	ed96 7a00 	vldr	s14, [r6]
 80148d6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80148da:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80148de:	edd9 6a00 	vldr	s13, [r9]
 80148e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80148e6:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80148ea:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80148ee:	3301      	adds	r3, #1
 80148f0:	aa13      	add	r2, sp, #76	; 0x4c
 80148f2:	edd7 6a00 	vldr	s13, [r7]
 80148f6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80148fa:	4651      	mov	r1, sl
 80148fc:	a809      	add	r0, sp, #36	; 0x24
 80148fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014902:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014906:	eef1 6ae7 	vsqrt.f32	s13, s15
 801490a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801490e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014912:	ed86 7a00 	vstr	s14, [r6]
 8014916:	ed99 7a00 	vldr	s14, [r9]
 801491a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801491e:	ed89 7a00 	vstr	s14, [r9]
 8014922:	ed98 7a00 	vldr	s14, [r8]
 8014926:	ee27 7a27 	vmul.f32	s14, s14, s15
 801492a:	ed88 7a00 	vstr	s14, [r8]
 801492e:	ed97 7a00 	vldr	s14, [r7]
 8014932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014936:	edc7 7a00 	vstr	s15, [r7]
 801493a:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801493e:	f7f6 f985 	bl	800ac4c <rotVect>
 8014942:	f8d9 0000 	ldr.w	r0, [r9]
 8014946:	f8d8 1000 	ldr.w	r1, [r8]
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	6833      	ldr	r3, [r6, #0]
 801494e:	60eb      	str	r3, [r5, #12]
 8014950:	6128      	str	r0, [r5, #16]
 8014952:	6169      	str	r1, [r5, #20]
 8014954:	61aa      	str	r2, [r5, #24]
 8014956:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801495a:	9301      	str	r3, [sp, #4]
 801495c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014960:	9300      	str	r3, [sp, #0]
 8014962:	a909      	add	r1, sp, #36	; 0x24
 8014964:	f105 031c 	add.w	r3, r5, #28
 8014968:	462a      	mov	r2, r5
 801496a:	f105 000c 	add.w	r0, r5, #12
 801496e:	f7f7 fc2b 	bl	800c1c8 <output_update>
 8014972:	b020      	add	sp, #128	; 0x80
 8014974:	ecbd 8b06 	vpop	{d8-d10}
 8014978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801497c:	2301      	movs	r3, #1
 801497e:	7123      	strb	r3, [r4, #4]
 8014980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014984:	e72f      	b.n	80147e6 <MotionFX_propagate+0xd6>
 8014986:	ee68 8a80 	vmul.f32	s17, s17, s0
 801498a:	ee29 9a00 	vmul.f32	s18, s18, s0
 801498e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014992:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014996:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801499a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801499e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80149a2:	930c      	str	r3, [sp, #48]	; 0x30
 80149a4:	e78c      	b.n	80148c0 <MotionFX_propagate+0x1b0>
 80149a6:	bf00      	nop
 80149a8:	20000178 	.word	0x20000178
 80149ac:	3c8efa35 	.word	0x3c8efa35
 80149b0:	38d1b718 	.word	0x38d1b718

080149b4 <MotionFX_MagCal_init>:
 80149b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b6:	4c44      	ldr	r4, [pc, #272]	; (8014ac8 <MotionFX_MagCal_init+0x114>)
 80149b8:	7923      	ldrb	r3, [r4, #4]
 80149ba:	b903      	cbnz	r3, 80149be <MotionFX_MagCal_init+0xa>
 80149bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149be:	1e43      	subs	r3, r0, #1
 80149c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80149c4:	4605      	mov	r5, r0
 80149c6:	d2f9      	bcs.n	80149bc <MotionFX_MagCal_init+0x8>
 80149c8:	2900      	cmp	r1, #0
 80149ca:	d139      	bne.n	8014a40 <MotionFX_MagCal_init+0x8c>
 80149cc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80149d0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80149d4:	4a3d      	ldr	r2, [pc, #244]	; (8014acc <MotionFX_MagCal_init+0x118>)
 80149d6:	1b5b      	subs	r3, r3, r5
 80149d8:	ee07 3a90 	vmov	s15, r3
 80149dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149e0:	23c8      	movs	r3, #200	; 0xc8
 80149e2:	eef0 7ae7 	vabs.f32	s15, s15
 80149e6:	fb93 f3f5 	sdiv	r3, r3, r5
 80149ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	2b0f      	cmp	r3, #15
 80149f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149f6:	bf28      	it	cs
 80149f8:	230f      	movcs	r3, #15
 80149fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fe:	6015      	str	r5, [r2, #0]
 8014a00:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8014a04:	b22d      	sxth	r5, r5
 8014a06:	dc0e      	bgt.n	8014a26 <MotionFX_MagCal_init+0x72>
 8014a08:	edd4 7a03 	vldr	s15, [r4, #12]
 8014a0c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014ad0 <MotionFX_MagCal_init+0x11c>
 8014a10:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014ad4 <MotionFX_MagCal_init+0x120>
 8014a14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a18:	eef0 7ae7 	vabs.f32	s15, s15
 8014a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a24:	dd08      	ble.n	8014a38 <MotionFX_MagCal_init+0x84>
 8014a26:	2300      	movs	r3, #0
 8014a28:	492b      	ldr	r1, [pc, #172]	; (8014ad8 <MotionFX_MagCal_init+0x124>)
 8014a2a:	8165      	strh	r5, [r4, #10]
 8014a2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8014a30:	60e1      	str	r1, [r4, #12]
 8014a32:	8223      	strh	r3, [r4, #16]
 8014a34:	6163      	str	r3, [r4, #20]
 8014a36:	8122      	strh	r2, [r4, #8]
 8014a38:	2300      	movs	r3, #0
 8014a3a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8014a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a40:	2600      	movs	r6, #0
 8014a42:	4826      	ldr	r0, [pc, #152]	; (8014adc <MotionFX_MagCal_init+0x128>)
 8014a44:	61a0      	str	r0, [r4, #24]
 8014a46:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8014a4a:	4631      	mov	r1, r6
 8014a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a50:	6122      	str	r2, [r4, #16]
 8014a52:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014a56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014a5a:	6166      	str	r6, [r4, #20]
 8014a5c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8014a60:	6566      	str	r6, [r4, #84]	; 0x54
 8014a62:	83a6      	strh	r6, [r4, #28]
 8014a64:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8014a68:	f002 f9fe 	bl	8016e68 <memset>
 8014a6c:	23ff      	movs	r3, #255	; 0xff
 8014a6e:	225f      	movs	r2, #95	; 0x5f
 8014a70:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8014a74:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8014a78:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	2300      	movs	r3, #0
 8014a80:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014a84:	f44f 7780 	mov.w	r7, #256	; 0x100
 8014a88:	4631      	mov	r1, r6
 8014a8a:	62a6      	str	r6, [r4, #40]	; 0x28
 8014a8c:	2230      	movs	r2, #48	; 0x30
 8014a8e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8014a92:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8014a96:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8014a9a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8014a9c:	f002 f9e4 	bl	8016e68 <memset>
 8014aa0:	f1a5 030a 	sub.w	r3, r5, #10
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014aaa:	2b32      	cmp	r3, #50	; 0x32
 8014aac:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8014ab0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8014ab4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8014ab8:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8014abc:	d888      	bhi.n	80149d0 <MotionFX_MagCal_init+0x1c>
 8014abe:	2301      	movs	r3, #1
 8014ac0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8014ac4:	e784      	b.n	80149d0 <MotionFX_MagCal_init+0x1c>
 8014ac6:	bf00      	nop
 8014ac8:	20000178 	.word	0x20000178
 8014acc:	20000000 	.word	0x20000000
 8014ad0:	3dcccccd 	.word	0x3dcccccd
 8014ad4:	3c23d70a 	.word	0x3c23d70a
 8014ad8:	3dcccccd 	.word	0x3dcccccd
 8014adc:	2000161c 	.word	0x2000161c

08014ae0 <MotionFX_MagCal_run>:
 8014ae0:	4a3e      	ldr	r2, [pc, #248]	; (8014bdc <MotionFX_MagCal_run+0xfc>)
 8014ae2:	7913      	ldrb	r3, [r2, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d077      	beq.n	8014bd8 <MotionFX_MagCal_run+0xf8>
 8014ae8:	ed90 7a00 	vldr	s14, [r0]
 8014aec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8014be0 <MotionFX_MagCal_run+0x100>
 8014af0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af8:	bfb4      	ite	lt
 8014afa:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014afe:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014b02:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b08:	ed90 7a01 	vldr	s14, [r0, #4]
 8014b0c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8014be0 <MotionFX_MagCal_run+0x100>
 8014b10:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8014b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b20:	ee17 1a90 	vmov	r1, s15
 8014b24:	bfb4      	ite	lt
 8014b26:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014b2a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014b2e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014b32:	ed90 7a02 	vldr	s14, [r0, #8]
 8014b36:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014be0 <MotionFX_MagCal_run+0x100>
 8014b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b3e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b46:	ee17 4a90 	vmov	r4, s15
 8014b4a:	bfac      	ite	ge
 8014b4c:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014b50:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014b54:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b5c:	ee17 7a90 	vmov	r7, s15
 8014b60:	b383      	cbz	r3, 8014bc4 <MotionFX_MagCal_run+0xe4>
 8014b62:	4820      	ldr	r0, [pc, #128]	; (8014be4 <MotionFX_MagCal_run+0x104>)
 8014b64:	6805      	ldr	r5, [r0, #0]
 8014b66:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8014b6a:	fb15 f503 	smulbb	r5, r5, r3
 8014b6e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8014b72:	00dd      	lsls	r5, r3, #3
 8014b74:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8014b78:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8014be8 <MotionFX_MagCal_run+0x108>
 8014b7c:	42b1      	cmp	r1, r6
 8014b7e:	bfa8      	it	ge
 8014b80:	4631      	movge	r1, r6
 8014b82:	42b7      	cmp	r7, r6
 8014b84:	bfa8      	it	ge
 8014b86:	4637      	movge	r7, r6
 8014b88:	4561      	cmp	r1, ip
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	bfb8      	it	lt
 8014b8e:	4660      	movlt	r0, ip
 8014b90:	4564      	cmp	r4, ip
 8014b92:	db1f      	blt.n	8014bd4 <MotionFX_MagCal_run+0xf4>
 8014b94:	42b4      	cmp	r4, r6
 8014b96:	bfa8      	it	ge
 8014b98:	4634      	movge	r4, r6
 8014b9a:	b224      	sxth	r4, r4
 8014b9c:	4e12      	ldr	r6, [pc, #72]	; (8014be8 <MotionFX_MagCal_run+0x108>)
 8014b9e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	4415      	add	r5, r2
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	42b7      	cmp	r7, r6
 8014baa:	bfb8      	it	lt
 8014bac:	4637      	movlt	r7, r6
 8014bae:	428b      	cmp	r3, r1
 8014bb0:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8014bb4:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8014bb8:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 8014bbc:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8014bc0:	d014      	beq.n	8014bec <MotionFX_MagCal_run+0x10c>
 8014bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bc4:	68c0      	ldr	r0, [r0, #12]
 8014bc6:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8014bca:	2001      	movs	r0, #1
 8014bcc:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8014bd0:	461d      	mov	r5, r3
 8014bd2:	e7cf      	b.n	8014b74 <MotionFX_MagCal_run+0x94>
 8014bd4:	4634      	mov	r4, r6
 8014bd6:	e7e1      	b.n	8014b9c <MotionFX_MagCal_run+0xbc>
 8014bd8:	4770      	bx	lr
 8014bda:	bf00      	nop
 8014bdc:	20000178 	.word	0x20000178
 8014be0:	43fa0000 	.word	0x43fa0000
 8014be4:	20000000 	.word	0x20000000
 8014be8:	ffff8002 	.word	0xffff8002
 8014bec:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8014bf0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f000 8159 	beq.w	8014eb2 <MotionFX_MagCal_run+0x3d2>
 8014c00:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 8014c04:	8a57      	ldrh	r7, [r2, #18]
 8014c06:	8a13      	ldrh	r3, [r2, #16]
 8014c08:	2900      	cmp	r1, #0
 8014c0a:	f000 8150 	beq.w	8014eae <MotionFX_MagCal_run+0x3ce>
 8014c0e:	2f00      	cmp	r7, #0
 8014c10:	f000 814d 	beq.w	8014eae <MotionFX_MagCal_run+0x3ce>
 8014c14:	42bb      	cmp	r3, r7
 8014c16:	bf28      	it	cs
 8014c18:	463b      	movcs	r3, r7
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	42bb      	cmp	r3, r7
 8014c20:	bf28      	it	cs
 8014c22:	463b      	movcs	r3, r7
 8014c24:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014c28:	191d      	adds	r5, r3, r4
 8014c2a:	f04f 0c01 	mov.w	ip, #1
 8014c2e:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8014c32:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8014c36:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8014c3a:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c3e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 8014c42:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c46:	4561      	cmp	r1, ip
 8014c48:	f000 812a 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014c4c:	4463      	add	r3, ip
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	42bb      	cmp	r3, r7
 8014c52:	bf28      	it	cs
 8014c54:	463b      	movcs	r3, r7
 8014c56:	eb03 0e04 	add.w	lr, r3, r4
 8014c5a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014c5e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014c62:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8014c66:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c6a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8014c6e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c72:	2902      	cmp	r1, #2
 8014c74:	f000 8114 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014c78:	4463      	add	r3, ip
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	42bb      	cmp	r3, r7
 8014c7e:	bf28      	it	cs
 8014c80:	463b      	movcs	r3, r7
 8014c82:	eb03 0e04 	add.w	lr, r3, r4
 8014c86:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014c8a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014c8e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8014c92:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c96:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8014c9a:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c9e:	2903      	cmp	r1, #3
 8014ca0:	f000 80fe 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014ca4:	4463      	add	r3, ip
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	42bb      	cmp	r3, r7
 8014caa:	bf28      	it	cs
 8014cac:	463b      	movcs	r3, r7
 8014cae:	eb03 0e04 	add.w	lr, r3, r4
 8014cb2:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014cb6:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014cba:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8014cbe:	f8c5 e002 	str.w	lr, [r5, #2]
 8014cc2:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8014cc6:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014cca:	2904      	cmp	r1, #4
 8014ccc:	f000 80e8 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014cd0:	4463      	add	r3, ip
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	42bb      	cmp	r3, r7
 8014cd6:	bf28      	it	cs
 8014cd8:	463b      	movcs	r3, r7
 8014cda:	eb03 0e04 	add.w	lr, r3, r4
 8014cde:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014ce2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014ce6:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8014cea:	f8c5 e002 	str.w	lr, [r5, #2]
 8014cee:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8014cf2:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014cf6:	2905      	cmp	r1, #5
 8014cf8:	f000 80d2 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014cfc:	4463      	add	r3, ip
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	42bb      	cmp	r3, r7
 8014d02:	bf28      	it	cs
 8014d04:	463b      	movcs	r3, r7
 8014d06:	441c      	add	r4, r3
 8014d08:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8014d0c:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8014d10:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8014d14:	f8c5 4002 	str.w	r4, [r5, #2]
 8014d18:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8014d1c:	80ec      	strh	r4, [r5, #6]
 8014d1e:	2906      	cmp	r1, #6
 8014d20:	f000 80be 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014d24:	4463      	add	r3, ip
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	42bb      	cmp	r3, r7
 8014d2a:	bf28      	it	cs
 8014d2c:	463b      	movcs	r3, r7
 8014d2e:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014d32:	eb03 0c04 	add.w	ip, r3, r4
 8014d36:	2501      	movs	r5, #1
 8014d38:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8014d3c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8014d40:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8014d44:	f8cc e002 	str.w	lr, [ip, #2]
 8014d48:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8014d4c:	f8ac e006 	strh.w	lr, [ip, #6]
 8014d50:	2907      	cmp	r1, #7
 8014d52:	f000 80a5 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014d56:	442b      	add	r3, r5
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	42bb      	cmp	r3, r7
 8014d5c:	bf28      	it	cs
 8014d5e:	463b      	movcs	r3, r7
 8014d60:	eb03 0e04 	add.w	lr, r3, r4
 8014d64:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014d68:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014d6c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8014d70:	f8cc e002 	str.w	lr, [ip, #2]
 8014d74:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8014d78:	f8ac e006 	strh.w	lr, [ip, #6]
 8014d7c:	2908      	cmp	r1, #8
 8014d7e:	f000 808f 	beq.w	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014d82:	442b      	add	r3, r5
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	42bb      	cmp	r3, r7
 8014d88:	bf28      	it	cs
 8014d8a:	463b      	movcs	r3, r7
 8014d8c:	eb03 0e04 	add.w	lr, r3, r4
 8014d90:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014d94:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014d98:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8014d9c:	f8cc e002 	str.w	lr, [ip, #2]
 8014da0:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8014da4:	f8ac e006 	strh.w	lr, [ip, #6]
 8014da8:	2909      	cmp	r1, #9
 8014daa:	d079      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014dac:	442b      	add	r3, r5
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	42bb      	cmp	r3, r7
 8014db2:	bf28      	it	cs
 8014db4:	463b      	movcs	r3, r7
 8014db6:	eb03 0e04 	add.w	lr, r3, r4
 8014dba:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014dbe:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014dc2:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8014dc6:	f8cc e002 	str.w	lr, [ip, #2]
 8014dca:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8014dce:	f8ac e006 	strh.w	lr, [ip, #6]
 8014dd2:	290a      	cmp	r1, #10
 8014dd4:	d064      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014dd6:	442b      	add	r3, r5
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	42bb      	cmp	r3, r7
 8014ddc:	bf28      	it	cs
 8014dde:	463b      	movcs	r3, r7
 8014de0:	eb03 0e04 	add.w	lr, r3, r4
 8014de4:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014de8:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014dec:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8014df0:	f8cc e002 	str.w	lr, [ip, #2]
 8014df4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8014df8:	f8ac e006 	strh.w	lr, [ip, #6]
 8014dfc:	290b      	cmp	r1, #11
 8014dfe:	d04f      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014e00:	442b      	add	r3, r5
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	42bb      	cmp	r3, r7
 8014e06:	bf28      	it	cs
 8014e08:	463b      	movcs	r3, r7
 8014e0a:	eb03 0e04 	add.w	lr, r3, r4
 8014e0e:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014e12:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014e16:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8014e1a:	f8cc e002 	str.w	lr, [ip, #2]
 8014e1e:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8014e22:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e26:	290c      	cmp	r1, #12
 8014e28:	d03a      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014e2a:	442b      	add	r3, r5
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	42bb      	cmp	r3, r7
 8014e30:	bf28      	it	cs
 8014e32:	463b      	movcs	r3, r7
 8014e34:	eb03 0e04 	add.w	lr, r3, r4
 8014e38:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014e3c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014e40:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8014e44:	f8cc e002 	str.w	lr, [ip, #2]
 8014e48:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8014e4c:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e50:	290d      	cmp	r1, #13
 8014e52:	d025      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014e54:	442b      	add	r3, r5
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	42bb      	cmp	r3, r7
 8014e5a:	bf28      	it	cs
 8014e5c:	463b      	movcs	r3, r7
 8014e5e:	eb03 0e04 	add.w	lr, r3, r4
 8014e62:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014e66:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014e6a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8014e6e:	f8cc e002 	str.w	lr, [ip, #2]
 8014e72:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8014e76:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e7a:	290e      	cmp	r1, #14
 8014e7c:	d010      	beq.n	8014ea0 <MotionFX_MagCal_run+0x3c0>
 8014e7e:	442b      	add	r3, r5
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	42bb      	cmp	r3, r7
 8014e84:	bf28      	it	cs
 8014e86:	463b      	movcs	r3, r7
 8014e88:	441c      	add	r4, r3
 8014e8a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8014e8e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8014e92:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8014e96:	f8c7 0002 	str.w	r0, [r7, #2]
 8014e9a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 8014e9e:	80f8      	strh	r0, [r7, #6]
 8014ea0:	3901      	subs	r1, #1
 8014ea2:	b2c9      	uxtb	r1, r1
 8014ea4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014ea8:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 8014eac:	4434      	add	r4, r6
 8014eae:	8213      	strh	r3, [r2, #16]
 8014eb0:	6154      	str	r4, [r2, #20]
 8014eb2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	f43f ae83 	beq.w	8014bc2 <MotionFX_MagCal_run+0xe2>
 8014ebc:	8a11      	ldrh	r1, [r2, #16]
 8014ebe:	8a53      	ldrh	r3, [r2, #18]
 8014ec0:	428b      	cmp	r3, r1
 8014ec2:	d022      	beq.n	8014f0a <MotionFX_MagCal_run+0x42a>
 8014ec4:	b341      	cbz	r1, 8014f18 <MotionFX_MagCal_run+0x438>
 8014ec6:	6953      	ldr	r3, [r2, #20]
 8014ec8:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8014ecc:	3301      	adds	r3, #1
 8014ece:	4403      	add	r3, r0
 8014ed0:	1c58      	adds	r0, r3, #1
 8014ed2:	d021      	beq.n	8014f18 <MotionFX_MagCal_run+0x438>
 8014ed4:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8014ed8:	3410      	adds	r4, #16
 8014eda:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8014edc:	42a0      	cmp	r0, r4
 8014ede:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8014ee2:	bf84      	itt	hi
 8014ee4:	6553      	strhi	r3, [r2, #84]	; 0x54
 8014ee6:	4618      	movhi	r0, r3
 8014ee8:	4420      	add	r0, r4
 8014eea:	4283      	cmp	r3, r0
 8014eec:	f4ff ae69 	bcc.w	8014bc2 <MotionFX_MagCal_run+0xe2>
 8014ef0:	b131      	cbz	r1, 8014f00 <MotionFX_MagCal_run+0x420>
 8014ef2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8014ef6:	6952      	ldr	r2, [r2, #20]
 8014ef8:	3901      	subs	r1, #1
 8014efa:	fb00 2111 	mls	r1, r0, r1, r2
 8014efe:	b289      	uxth	r1, r1
 8014f00:	1a5b      	subs	r3, r3, r1
 8014f02:	b21b      	sxth	r3, r3
 8014f04:	42a3      	cmp	r3, r4
 8014f06:	f6ff ae5c 	blt.w	8014bc2 <MotionFX_MagCal_run+0xe2>
 8014f0a:	4905      	ldr	r1, [pc, #20]	; (8014f20 <MotionFX_MagCal_run+0x440>)
 8014f0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f10:	f101 0014 	add.w	r0, r1, #20
 8014f14:	f7fd babc 	b.w	8012490 <MEMS_runMagCal>
 8014f18:	f242 7410 	movw	r4, #10000	; 0x2710
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	e7dc      	b.n	8014eda <MotionFX_MagCal_run+0x3fa>
 8014f20:	20000180 	.word	0x20000180

08014f24 <MotionFX_MagCal_getParams>:
 8014f24:	b4f0      	push	{r4, r5, r6, r7}
 8014f26:	4f1b      	ldr	r7, [pc, #108]	; (8014f94 <MotionFX_MagCal_getParams+0x70>)
 8014f28:	793b      	ldrb	r3, [r7, #4]
 8014f2a:	b08e      	sub	sp, #56	; 0x38
 8014f2c:	b373      	cbz	r3, 8014f8c <MotionFX_MagCal_getParams+0x68>
 8014f2e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8014f32:	4606      	mov	r6, r0
 8014f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f36:	ac01      	add	r4, sp, #4
 8014f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f40:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014f44:	eddd 6a02 	vldr	s13, [sp, #8]
 8014f48:	eddd 7a04 	vldr	s15, [sp, #16]
 8014f4c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8014f98 <MotionFX_MagCal_getParams+0x74>
 8014f50:	682d      	ldr	r5, [r5, #0]
 8014f52:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8014f56:	7337      	strb	r7, [r6, #12]
 8014f58:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014f5c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014f76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014f7e:	6025      	str	r5, [r4, #0]
 8014f80:	edc6 6a00 	vstr	s13, [r6]
 8014f84:	ed86 7a01 	vstr	s14, [r6, #4]
 8014f88:	edc6 7a02 	vstr	s15, [r6, #8]
 8014f8c:	b00e      	add	sp, #56	; 0x38
 8014f8e:	bcf0      	pop	{r4, r5, r6, r7}
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop
 8014f94:	20000178 	.word	0x20000178
 8014f98:	3b03126f 	.word	0x3b03126f

08014f9c <_Znwj>:
 8014f9c:	2801      	cmp	r0, #1
 8014f9e:	bf38      	it	cc
 8014fa0:	2001      	movcc	r0, #1
 8014fa2:	b510      	push	{r4, lr}
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f001 ff48 	bl	8016e3c <malloc>
 8014fac:	b930      	cbnz	r0, 8014fbc <_Znwj+0x20>
 8014fae:	f000 f807 	bl	8014fc0 <_ZSt15get_new_handlerv>
 8014fb2:	b908      	cbnz	r0, 8014fb8 <_Znwj+0x1c>
 8014fb4:	f001 ff10 	bl	8016dd8 <abort>
 8014fb8:	4780      	blx	r0
 8014fba:	e7f4      	b.n	8014fa6 <_Znwj+0xa>
 8014fbc:	bd10      	pop	{r4, pc}
	...

08014fc0 <_ZSt15get_new_handlerv>:
 8014fc0:	4b02      	ldr	r3, [pc, #8]	; (8014fcc <_ZSt15get_new_handlerv+0xc>)
 8014fc2:	6818      	ldr	r0, [r3, #0]
 8014fc4:	f3bf 8f5b 	dmb	ish
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	20001248 	.word	0x20001248

08014fd0 <ceil>:
 8014fd0:	ec51 0b10 	vmov	r0, r1, d0
 8014fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014fdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014fe0:	2e13      	cmp	r6, #19
 8014fe2:	ee10 5a10 	vmov	r5, s0
 8014fe6:	ee10 8a10 	vmov	r8, s0
 8014fea:	460c      	mov	r4, r1
 8014fec:	dc30      	bgt.n	8015050 <ceil+0x80>
 8014fee:	2e00      	cmp	r6, #0
 8014ff0:	da12      	bge.n	8015018 <ceil+0x48>
 8014ff2:	a335      	add	r3, pc, #212	; (adr r3, 80150c8 <ceil+0xf8>)
 8014ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff8:	f7eb f8ec 	bl	80001d4 <__adddf3>
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2300      	movs	r3, #0
 8015000:	f7eb fd2e 	bl	8000a60 <__aeabi_dcmpgt>
 8015004:	b128      	cbz	r0, 8015012 <ceil+0x42>
 8015006:	2c00      	cmp	r4, #0
 8015008:	db55      	blt.n	80150b6 <ceil+0xe6>
 801500a:	432c      	orrs	r4, r5
 801500c:	d057      	beq.n	80150be <ceil+0xee>
 801500e:	4c30      	ldr	r4, [pc, #192]	; (80150d0 <ceil+0x100>)
 8015010:	2500      	movs	r5, #0
 8015012:	4621      	mov	r1, r4
 8015014:	4628      	mov	r0, r5
 8015016:	e025      	b.n	8015064 <ceil+0x94>
 8015018:	4f2e      	ldr	r7, [pc, #184]	; (80150d4 <ceil+0x104>)
 801501a:	4137      	asrs	r7, r6
 801501c:	ea01 0307 	and.w	r3, r1, r7
 8015020:	4303      	orrs	r3, r0
 8015022:	d01f      	beq.n	8015064 <ceil+0x94>
 8015024:	a328      	add	r3, pc, #160	; (adr r3, 80150c8 <ceil+0xf8>)
 8015026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502a:	f7eb f8d3 	bl	80001d4 <__adddf3>
 801502e:	2200      	movs	r2, #0
 8015030:	2300      	movs	r3, #0
 8015032:	f7eb fd15 	bl	8000a60 <__aeabi_dcmpgt>
 8015036:	2800      	cmp	r0, #0
 8015038:	d0eb      	beq.n	8015012 <ceil+0x42>
 801503a:	2c00      	cmp	r4, #0
 801503c:	bfc2      	ittt	gt
 801503e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015042:	fa43 f606 	asrgt.w	r6, r3, r6
 8015046:	19a4      	addgt	r4, r4, r6
 8015048:	ea24 0407 	bic.w	r4, r4, r7
 801504c:	2500      	movs	r5, #0
 801504e:	e7e0      	b.n	8015012 <ceil+0x42>
 8015050:	2e33      	cmp	r6, #51	; 0x33
 8015052:	dd0b      	ble.n	801506c <ceil+0x9c>
 8015054:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015058:	d104      	bne.n	8015064 <ceil+0x94>
 801505a:	ee10 2a10 	vmov	r2, s0
 801505e:	460b      	mov	r3, r1
 8015060:	f7eb f8b8 	bl	80001d4 <__adddf3>
 8015064:	ec41 0b10 	vmov	d0, r0, r1
 8015068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801506c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015070:	f04f 33ff 	mov.w	r3, #4294967295
 8015074:	fa23 f707 	lsr.w	r7, r3, r7
 8015078:	4207      	tst	r7, r0
 801507a:	d0f3      	beq.n	8015064 <ceil+0x94>
 801507c:	a312      	add	r3, pc, #72	; (adr r3, 80150c8 <ceil+0xf8>)
 801507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015082:	f7eb f8a7 	bl	80001d4 <__adddf3>
 8015086:	2200      	movs	r2, #0
 8015088:	2300      	movs	r3, #0
 801508a:	f7eb fce9 	bl	8000a60 <__aeabi_dcmpgt>
 801508e:	2800      	cmp	r0, #0
 8015090:	d0bf      	beq.n	8015012 <ceil+0x42>
 8015092:	2c00      	cmp	r4, #0
 8015094:	dd02      	ble.n	801509c <ceil+0xcc>
 8015096:	2e14      	cmp	r6, #20
 8015098:	d103      	bne.n	80150a2 <ceil+0xd2>
 801509a:	3401      	adds	r4, #1
 801509c:	ea25 0507 	bic.w	r5, r5, r7
 80150a0:	e7b7      	b.n	8015012 <ceil+0x42>
 80150a2:	2301      	movs	r3, #1
 80150a4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80150a8:	fa03 f606 	lsl.w	r6, r3, r6
 80150ac:	4435      	add	r5, r6
 80150ae:	4545      	cmp	r5, r8
 80150b0:	bf38      	it	cc
 80150b2:	18e4      	addcc	r4, r4, r3
 80150b4:	e7f2      	b.n	801509c <ceil+0xcc>
 80150b6:	2500      	movs	r5, #0
 80150b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80150bc:	e7a9      	b.n	8015012 <ceil+0x42>
 80150be:	4625      	mov	r5, r4
 80150c0:	e7a7      	b.n	8015012 <ceil+0x42>
 80150c2:	bf00      	nop
 80150c4:	f3af 8000 	nop.w
 80150c8:	8800759c 	.word	0x8800759c
 80150cc:	7e37e43c 	.word	0x7e37e43c
 80150d0:	3ff00000 	.word	0x3ff00000
 80150d4:	000fffff 	.word	0x000fffff

080150d8 <floor>:
 80150d8:	ec51 0b10 	vmov	r0, r1, d0
 80150dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80150e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80150e8:	2e13      	cmp	r6, #19
 80150ea:	ee10 5a10 	vmov	r5, s0
 80150ee:	ee10 8a10 	vmov	r8, s0
 80150f2:	460c      	mov	r4, r1
 80150f4:	dc32      	bgt.n	801515c <floor+0x84>
 80150f6:	2e00      	cmp	r6, #0
 80150f8:	da14      	bge.n	8015124 <floor+0x4c>
 80150fa:	a333      	add	r3, pc, #204	; (adr r3, 80151c8 <floor+0xf0>)
 80150fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015100:	f7eb f868 	bl	80001d4 <__adddf3>
 8015104:	2200      	movs	r2, #0
 8015106:	2300      	movs	r3, #0
 8015108:	f7eb fcaa 	bl	8000a60 <__aeabi_dcmpgt>
 801510c:	b138      	cbz	r0, 801511e <floor+0x46>
 801510e:	2c00      	cmp	r4, #0
 8015110:	da57      	bge.n	80151c2 <floor+0xea>
 8015112:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015116:	431d      	orrs	r5, r3
 8015118:	d001      	beq.n	801511e <floor+0x46>
 801511a:	4c2d      	ldr	r4, [pc, #180]	; (80151d0 <floor+0xf8>)
 801511c:	2500      	movs	r5, #0
 801511e:	4621      	mov	r1, r4
 8015120:	4628      	mov	r0, r5
 8015122:	e025      	b.n	8015170 <floor+0x98>
 8015124:	4f2b      	ldr	r7, [pc, #172]	; (80151d4 <floor+0xfc>)
 8015126:	4137      	asrs	r7, r6
 8015128:	ea01 0307 	and.w	r3, r1, r7
 801512c:	4303      	orrs	r3, r0
 801512e:	d01f      	beq.n	8015170 <floor+0x98>
 8015130:	a325      	add	r3, pc, #148	; (adr r3, 80151c8 <floor+0xf0>)
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	f7eb f84d 	bl	80001d4 <__adddf3>
 801513a:	2200      	movs	r2, #0
 801513c:	2300      	movs	r3, #0
 801513e:	f7eb fc8f 	bl	8000a60 <__aeabi_dcmpgt>
 8015142:	2800      	cmp	r0, #0
 8015144:	d0eb      	beq.n	801511e <floor+0x46>
 8015146:	2c00      	cmp	r4, #0
 8015148:	bfbe      	ittt	lt
 801514a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801514e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015152:	19a4      	addlt	r4, r4, r6
 8015154:	ea24 0407 	bic.w	r4, r4, r7
 8015158:	2500      	movs	r5, #0
 801515a:	e7e0      	b.n	801511e <floor+0x46>
 801515c:	2e33      	cmp	r6, #51	; 0x33
 801515e:	dd0b      	ble.n	8015178 <floor+0xa0>
 8015160:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015164:	d104      	bne.n	8015170 <floor+0x98>
 8015166:	ee10 2a10 	vmov	r2, s0
 801516a:	460b      	mov	r3, r1
 801516c:	f7eb f832 	bl	80001d4 <__adddf3>
 8015170:	ec41 0b10 	vmov	d0, r0, r1
 8015174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015178:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801517c:	f04f 33ff 	mov.w	r3, #4294967295
 8015180:	fa23 f707 	lsr.w	r7, r3, r7
 8015184:	4207      	tst	r7, r0
 8015186:	d0f3      	beq.n	8015170 <floor+0x98>
 8015188:	a30f      	add	r3, pc, #60	; (adr r3, 80151c8 <floor+0xf0>)
 801518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518e:	f7eb f821 	bl	80001d4 <__adddf3>
 8015192:	2200      	movs	r2, #0
 8015194:	2300      	movs	r3, #0
 8015196:	f7eb fc63 	bl	8000a60 <__aeabi_dcmpgt>
 801519a:	2800      	cmp	r0, #0
 801519c:	d0bf      	beq.n	801511e <floor+0x46>
 801519e:	2c00      	cmp	r4, #0
 80151a0:	da02      	bge.n	80151a8 <floor+0xd0>
 80151a2:	2e14      	cmp	r6, #20
 80151a4:	d103      	bne.n	80151ae <floor+0xd6>
 80151a6:	3401      	adds	r4, #1
 80151a8:	ea25 0507 	bic.w	r5, r5, r7
 80151ac:	e7b7      	b.n	801511e <floor+0x46>
 80151ae:	2301      	movs	r3, #1
 80151b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80151b4:	fa03 f606 	lsl.w	r6, r3, r6
 80151b8:	4435      	add	r5, r6
 80151ba:	4545      	cmp	r5, r8
 80151bc:	bf38      	it	cc
 80151be:	18e4      	addcc	r4, r4, r3
 80151c0:	e7f2      	b.n	80151a8 <floor+0xd0>
 80151c2:	2500      	movs	r5, #0
 80151c4:	462c      	mov	r4, r5
 80151c6:	e7aa      	b.n	801511e <floor+0x46>
 80151c8:	8800759c 	.word	0x8800759c
 80151cc:	7e37e43c 	.word	0x7e37e43c
 80151d0:	bff00000 	.word	0xbff00000
 80151d4:	000fffff 	.word	0x000fffff

080151d8 <cosf>:
 80151d8:	ee10 3a10 	vmov	r3, s0
 80151dc:	b507      	push	{r0, r1, r2, lr}
 80151de:	4a1c      	ldr	r2, [pc, #112]	; (8015250 <cosf+0x78>)
 80151e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151e4:	4293      	cmp	r3, r2
 80151e6:	dc04      	bgt.n	80151f2 <cosf+0x1a>
 80151e8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015254 <cosf+0x7c>
 80151ec:	f000 fe9e 	bl	8015f2c <__kernel_cosf>
 80151f0:	e004      	b.n	80151fc <cosf+0x24>
 80151f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80151f6:	db04      	blt.n	8015202 <cosf+0x2a>
 80151f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80151fc:	b003      	add	sp, #12
 80151fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015202:	4668      	mov	r0, sp
 8015204:	f000 fd52 	bl	8015cac <__ieee754_rem_pio2f>
 8015208:	f000 0003 	and.w	r0, r0, #3
 801520c:	2801      	cmp	r0, #1
 801520e:	d007      	beq.n	8015220 <cosf+0x48>
 8015210:	2802      	cmp	r0, #2
 8015212:	d00e      	beq.n	8015232 <cosf+0x5a>
 8015214:	b9a0      	cbnz	r0, 8015240 <cosf+0x68>
 8015216:	eddd 0a01 	vldr	s1, [sp, #4]
 801521a:	ed9d 0a00 	vldr	s0, [sp]
 801521e:	e7e5      	b.n	80151ec <cosf+0x14>
 8015220:	eddd 0a01 	vldr	s1, [sp, #4]
 8015224:	ed9d 0a00 	vldr	s0, [sp]
 8015228:	f001 f96a 	bl	8016500 <__kernel_sinf>
 801522c:	eeb1 0a40 	vneg.f32	s0, s0
 8015230:	e7e4      	b.n	80151fc <cosf+0x24>
 8015232:	eddd 0a01 	vldr	s1, [sp, #4]
 8015236:	ed9d 0a00 	vldr	s0, [sp]
 801523a:	f000 fe77 	bl	8015f2c <__kernel_cosf>
 801523e:	e7f5      	b.n	801522c <cosf+0x54>
 8015240:	eddd 0a01 	vldr	s1, [sp, #4]
 8015244:	ed9d 0a00 	vldr	s0, [sp]
 8015248:	2001      	movs	r0, #1
 801524a:	f001 f959 	bl	8016500 <__kernel_sinf>
 801524e:	e7d5      	b.n	80151fc <cosf+0x24>
 8015250:	3f490fd8 	.word	0x3f490fd8
 8015254:	00000000 	.word	0x00000000

08015258 <roundf>:
 8015258:	ee10 0a10 	vmov	r0, s0
 801525c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015260:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015264:	2a16      	cmp	r2, #22
 8015266:	dc15      	bgt.n	8015294 <roundf+0x3c>
 8015268:	2a00      	cmp	r2, #0
 801526a:	da08      	bge.n	801527e <roundf+0x26>
 801526c:	3201      	adds	r2, #1
 801526e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015272:	d101      	bne.n	8015278 <roundf+0x20>
 8015274:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015278:	ee00 3a10 	vmov	s0, r3
 801527c:	4770      	bx	lr
 801527e:	4908      	ldr	r1, [pc, #32]	; (80152a0 <roundf+0x48>)
 8015280:	4111      	asrs	r1, r2
 8015282:	4208      	tst	r0, r1
 8015284:	d0fa      	beq.n	801527c <roundf+0x24>
 8015286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801528a:	4113      	asrs	r3, r2
 801528c:	4403      	add	r3, r0
 801528e:	ea23 0301 	bic.w	r3, r3, r1
 8015292:	e7f1      	b.n	8015278 <roundf+0x20>
 8015294:	2a80      	cmp	r2, #128	; 0x80
 8015296:	d1f1      	bne.n	801527c <roundf+0x24>
 8015298:	ee30 0a00 	vadd.f32	s0, s0, s0
 801529c:	4770      	bx	lr
 801529e:	bf00      	nop
 80152a0:	007fffff 	.word	0x007fffff

080152a4 <sinf>:
 80152a4:	ee10 3a10 	vmov	r3, s0
 80152a8:	b507      	push	{r0, r1, r2, lr}
 80152aa:	4a1d      	ldr	r2, [pc, #116]	; (8015320 <sinf+0x7c>)
 80152ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152b0:	4293      	cmp	r3, r2
 80152b2:	dc05      	bgt.n	80152c0 <sinf+0x1c>
 80152b4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015324 <sinf+0x80>
 80152b8:	2000      	movs	r0, #0
 80152ba:	f001 f921 	bl	8016500 <__kernel_sinf>
 80152be:	e004      	b.n	80152ca <sinf+0x26>
 80152c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80152c4:	db04      	blt.n	80152d0 <sinf+0x2c>
 80152c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80152ca:	b003      	add	sp, #12
 80152cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80152d0:	4668      	mov	r0, sp
 80152d2:	f000 fceb 	bl	8015cac <__ieee754_rem_pio2f>
 80152d6:	f000 0003 	and.w	r0, r0, #3
 80152da:	2801      	cmp	r0, #1
 80152dc:	d008      	beq.n	80152f0 <sinf+0x4c>
 80152de:	2802      	cmp	r0, #2
 80152e0:	d00d      	beq.n	80152fe <sinf+0x5a>
 80152e2:	b9b0      	cbnz	r0, 8015312 <sinf+0x6e>
 80152e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80152e8:	ed9d 0a00 	vldr	s0, [sp]
 80152ec:	2001      	movs	r0, #1
 80152ee:	e7e4      	b.n	80152ba <sinf+0x16>
 80152f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80152f4:	ed9d 0a00 	vldr	s0, [sp]
 80152f8:	f000 fe18 	bl	8015f2c <__kernel_cosf>
 80152fc:	e7e5      	b.n	80152ca <sinf+0x26>
 80152fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8015302:	ed9d 0a00 	vldr	s0, [sp]
 8015306:	2001      	movs	r0, #1
 8015308:	f001 f8fa 	bl	8016500 <__kernel_sinf>
 801530c:	eeb1 0a40 	vneg.f32	s0, s0
 8015310:	e7db      	b.n	80152ca <sinf+0x26>
 8015312:	eddd 0a01 	vldr	s1, [sp, #4]
 8015316:	ed9d 0a00 	vldr	s0, [sp]
 801531a:	f000 fe07 	bl	8015f2c <__kernel_cosf>
 801531e:	e7f5      	b.n	801530c <sinf+0x68>
 8015320:	3f490fd8 	.word	0x3f490fd8
 8015324:	00000000 	.word	0x00000000

08015328 <tanf>:
 8015328:	ee10 3a10 	vmov	r3, s0
 801532c:	b507      	push	{r0, r1, r2, lr}
 801532e:	4a10      	ldr	r2, [pc, #64]	; (8015370 <tanf+0x48>)
 8015330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015334:	4293      	cmp	r3, r2
 8015336:	dc05      	bgt.n	8015344 <tanf+0x1c>
 8015338:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015374 <tanf+0x4c>
 801533c:	2001      	movs	r0, #1
 801533e:	f001 f927 	bl	8016590 <__kernel_tanf>
 8015342:	e004      	b.n	801534e <tanf+0x26>
 8015344:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015348:	db04      	blt.n	8015354 <tanf+0x2c>
 801534a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801534e:	b003      	add	sp, #12
 8015350:	f85d fb04 	ldr.w	pc, [sp], #4
 8015354:	4668      	mov	r0, sp
 8015356:	f000 fca9 	bl	8015cac <__ieee754_rem_pio2f>
 801535a:	0040      	lsls	r0, r0, #1
 801535c:	f000 0002 	and.w	r0, r0, #2
 8015360:	eddd 0a01 	vldr	s1, [sp, #4]
 8015364:	ed9d 0a00 	vldr	s0, [sp]
 8015368:	f1c0 0001 	rsb	r0, r0, #1
 801536c:	e7e7      	b.n	801533e <tanf+0x16>
 801536e:	bf00      	nop
 8015370:	3f490fda 	.word	0x3f490fda
 8015374:	00000000 	.word	0x00000000

08015378 <atan2>:
 8015378:	f000 b89a 	b.w	80154b0 <__ieee754_atan2>

0801537c <sqrt>:
 801537c:	b538      	push	{r3, r4, r5, lr}
 801537e:	ed2d 8b02 	vpush	{d8}
 8015382:	ec55 4b10 	vmov	r4, r5, d0
 8015386:	f000 f95d 	bl	8015644 <__ieee754_sqrt>
 801538a:	4b15      	ldr	r3, [pc, #84]	; (80153e0 <sqrt+0x64>)
 801538c:	eeb0 8a40 	vmov.f32	s16, s0
 8015390:	eef0 8a60 	vmov.f32	s17, s1
 8015394:	f993 3000 	ldrsb.w	r3, [r3]
 8015398:	3301      	adds	r3, #1
 801539a:	d019      	beq.n	80153d0 <sqrt+0x54>
 801539c:	4622      	mov	r2, r4
 801539e:	462b      	mov	r3, r5
 80153a0:	4620      	mov	r0, r4
 80153a2:	4629      	mov	r1, r5
 80153a4:	f7eb fb66 	bl	8000a74 <__aeabi_dcmpun>
 80153a8:	b990      	cbnz	r0, 80153d0 <sqrt+0x54>
 80153aa:	2200      	movs	r2, #0
 80153ac:	2300      	movs	r3, #0
 80153ae:	4620      	mov	r0, r4
 80153b0:	4629      	mov	r1, r5
 80153b2:	f7eb fb37 	bl	8000a24 <__aeabi_dcmplt>
 80153b6:	b158      	cbz	r0, 80153d0 <sqrt+0x54>
 80153b8:	f001 fd16 	bl	8016de8 <__errno>
 80153bc:	2321      	movs	r3, #33	; 0x21
 80153be:	6003      	str	r3, [r0, #0]
 80153c0:	2200      	movs	r2, #0
 80153c2:	2300      	movs	r3, #0
 80153c4:	4610      	mov	r0, r2
 80153c6:	4619      	mov	r1, r3
 80153c8:	f7eb f9e4 	bl	8000794 <__aeabi_ddiv>
 80153cc:	ec41 0b18 	vmov	d8, r0, r1
 80153d0:	eeb0 0a48 	vmov.f32	s0, s16
 80153d4:	eef0 0a68 	vmov.f32	s1, s17
 80153d8:	ecbd 8b02 	vpop	{d8}
 80153dc:	bd38      	pop	{r3, r4, r5, pc}
 80153de:	bf00      	nop
 80153e0:	200000ed 	.word	0x200000ed

080153e4 <acosf>:
 80153e4:	b508      	push	{r3, lr}
 80153e6:	ed2d 8b02 	vpush	{d8}
 80153ea:	eeb0 8a40 	vmov.f32	s16, s0
 80153ee:	f000 f9dd 	bl	80157ac <__ieee754_acosf>
 80153f2:	4b13      	ldr	r3, [pc, #76]	; (8015440 <acosf+0x5c>)
 80153f4:	f993 3000 	ldrsb.w	r3, [r3]
 80153f8:	3301      	adds	r3, #1
 80153fa:	eef0 8a40 	vmov.f32	s17, s0
 80153fe:	d01a      	beq.n	8015436 <acosf+0x52>
 8015400:	eeb4 8a48 	vcmp.f32	s16, s16
 8015404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015408:	d615      	bvs.n	8015436 <acosf+0x52>
 801540a:	eeb0 0a48 	vmov.f32	s0, s16
 801540e:	f001 fc21 	bl	8016c54 <fabsf>
 8015412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015416:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541e:	dd0a      	ble.n	8015436 <acosf+0x52>
 8015420:	f001 fce2 	bl	8016de8 <__errno>
 8015424:	ecbd 8b02 	vpop	{d8}
 8015428:	2321      	movs	r3, #33	; 0x21
 801542a:	6003      	str	r3, [r0, #0]
 801542c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015430:	4804      	ldr	r0, [pc, #16]	; (8015444 <acosf+0x60>)
 8015432:	f001 bc59 	b.w	8016ce8 <nanf>
 8015436:	eeb0 0a68 	vmov.f32	s0, s17
 801543a:	ecbd 8b02 	vpop	{d8}
 801543e:	bd08      	pop	{r3, pc}
 8015440:	200000ed 	.word	0x200000ed
 8015444:	080170e4 	.word	0x080170e4

08015448 <asinf>:
 8015448:	b508      	push	{r3, lr}
 801544a:	ed2d 8b02 	vpush	{d8}
 801544e:	eeb0 8a40 	vmov.f32	s16, s0
 8015452:	f000 faa5 	bl	80159a0 <__ieee754_asinf>
 8015456:	4b13      	ldr	r3, [pc, #76]	; (80154a4 <asinf+0x5c>)
 8015458:	f993 3000 	ldrsb.w	r3, [r3]
 801545c:	3301      	adds	r3, #1
 801545e:	eef0 8a40 	vmov.f32	s17, s0
 8015462:	d01a      	beq.n	801549a <asinf+0x52>
 8015464:	eeb4 8a48 	vcmp.f32	s16, s16
 8015468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546c:	d615      	bvs.n	801549a <asinf+0x52>
 801546e:	eeb0 0a48 	vmov.f32	s0, s16
 8015472:	f001 fbef 	bl	8016c54 <fabsf>
 8015476:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801547a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015482:	dd0a      	ble.n	801549a <asinf+0x52>
 8015484:	f001 fcb0 	bl	8016de8 <__errno>
 8015488:	ecbd 8b02 	vpop	{d8}
 801548c:	2321      	movs	r3, #33	; 0x21
 801548e:	6003      	str	r3, [r0, #0]
 8015490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015494:	4804      	ldr	r0, [pc, #16]	; (80154a8 <asinf+0x60>)
 8015496:	f001 bc27 	b.w	8016ce8 <nanf>
 801549a:	eeb0 0a68 	vmov.f32	s0, s17
 801549e:	ecbd 8b02 	vpop	{d8}
 80154a2:	bd08      	pop	{r3, pc}
 80154a4:	200000ed 	.word	0x200000ed
 80154a8:	080170e4 	.word	0x080170e4

080154ac <atan2f>:
 80154ac:	f000 bb5e 	b.w	8015b6c <__ieee754_atan2f>

080154b0 <__ieee754_atan2>:
 80154b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b4:	ec57 6b11 	vmov	r6, r7, d1
 80154b8:	4273      	negs	r3, r6
 80154ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015640 <__ieee754_atan2+0x190>
 80154be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80154c2:	4333      	orrs	r3, r6
 80154c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80154c8:	4573      	cmp	r3, lr
 80154ca:	ec51 0b10 	vmov	r0, r1, d0
 80154ce:	ee11 8a10 	vmov	r8, s2
 80154d2:	d80a      	bhi.n	80154ea <__ieee754_atan2+0x3a>
 80154d4:	4244      	negs	r4, r0
 80154d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154da:	4304      	orrs	r4, r0
 80154dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80154e0:	4574      	cmp	r4, lr
 80154e2:	ee10 9a10 	vmov	r9, s0
 80154e6:	468c      	mov	ip, r1
 80154e8:	d907      	bls.n	80154fa <__ieee754_atan2+0x4a>
 80154ea:	4632      	mov	r2, r6
 80154ec:	463b      	mov	r3, r7
 80154ee:	f7ea fe71 	bl	80001d4 <__adddf3>
 80154f2:	ec41 0b10 	vmov	d0, r0, r1
 80154f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80154fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015502:	4334      	orrs	r4, r6
 8015504:	d103      	bne.n	801550e <__ieee754_atan2+0x5e>
 8015506:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801550a:	f001 b925 	b.w	8016758 <atan>
 801550e:	17bc      	asrs	r4, r7, #30
 8015510:	f004 0402 	and.w	r4, r4, #2
 8015514:	ea53 0909 	orrs.w	r9, r3, r9
 8015518:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801551c:	d107      	bne.n	801552e <__ieee754_atan2+0x7e>
 801551e:	2c02      	cmp	r4, #2
 8015520:	d060      	beq.n	80155e4 <__ieee754_atan2+0x134>
 8015522:	2c03      	cmp	r4, #3
 8015524:	d1e5      	bne.n	80154f2 <__ieee754_atan2+0x42>
 8015526:	a142      	add	r1, pc, #264	; (adr r1, 8015630 <__ieee754_atan2+0x180>)
 8015528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801552c:	e7e1      	b.n	80154f2 <__ieee754_atan2+0x42>
 801552e:	ea52 0808 	orrs.w	r8, r2, r8
 8015532:	d106      	bne.n	8015542 <__ieee754_atan2+0x92>
 8015534:	f1bc 0f00 	cmp.w	ip, #0
 8015538:	da5f      	bge.n	80155fa <__ieee754_atan2+0x14a>
 801553a:	a13f      	add	r1, pc, #252	; (adr r1, 8015638 <__ieee754_atan2+0x188>)
 801553c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015540:	e7d7      	b.n	80154f2 <__ieee754_atan2+0x42>
 8015542:	4572      	cmp	r2, lr
 8015544:	d10f      	bne.n	8015566 <__ieee754_atan2+0xb6>
 8015546:	4293      	cmp	r3, r2
 8015548:	f104 34ff 	add.w	r4, r4, #4294967295
 801554c:	d107      	bne.n	801555e <__ieee754_atan2+0xae>
 801554e:	2c02      	cmp	r4, #2
 8015550:	d84c      	bhi.n	80155ec <__ieee754_atan2+0x13c>
 8015552:	4b35      	ldr	r3, [pc, #212]	; (8015628 <__ieee754_atan2+0x178>)
 8015554:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015558:	e9d4 0100 	ldrd	r0, r1, [r4]
 801555c:	e7c9      	b.n	80154f2 <__ieee754_atan2+0x42>
 801555e:	2c02      	cmp	r4, #2
 8015560:	d848      	bhi.n	80155f4 <__ieee754_atan2+0x144>
 8015562:	4b32      	ldr	r3, [pc, #200]	; (801562c <__ieee754_atan2+0x17c>)
 8015564:	e7f6      	b.n	8015554 <__ieee754_atan2+0xa4>
 8015566:	4573      	cmp	r3, lr
 8015568:	d0e4      	beq.n	8015534 <__ieee754_atan2+0x84>
 801556a:	1a9b      	subs	r3, r3, r2
 801556c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015570:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015574:	da1e      	bge.n	80155b4 <__ieee754_atan2+0x104>
 8015576:	2f00      	cmp	r7, #0
 8015578:	da01      	bge.n	801557e <__ieee754_atan2+0xce>
 801557a:	323c      	adds	r2, #60	; 0x3c
 801557c:	db1e      	blt.n	80155bc <__ieee754_atan2+0x10c>
 801557e:	4632      	mov	r2, r6
 8015580:	463b      	mov	r3, r7
 8015582:	f7eb f907 	bl	8000794 <__aeabi_ddiv>
 8015586:	ec41 0b10 	vmov	d0, r0, r1
 801558a:	f001 fa85 	bl	8016a98 <fabs>
 801558e:	f001 f8e3 	bl	8016758 <atan>
 8015592:	ec51 0b10 	vmov	r0, r1, d0
 8015596:	2c01      	cmp	r4, #1
 8015598:	d013      	beq.n	80155c2 <__ieee754_atan2+0x112>
 801559a:	2c02      	cmp	r4, #2
 801559c:	d015      	beq.n	80155ca <__ieee754_atan2+0x11a>
 801559e:	2c00      	cmp	r4, #0
 80155a0:	d0a7      	beq.n	80154f2 <__ieee754_atan2+0x42>
 80155a2:	a319      	add	r3, pc, #100	; (adr r3, 8015608 <__ieee754_atan2+0x158>)
 80155a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a8:	f7ea fe12 	bl	80001d0 <__aeabi_dsub>
 80155ac:	a318      	add	r3, pc, #96	; (adr r3, 8015610 <__ieee754_atan2+0x160>)
 80155ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b2:	e014      	b.n	80155de <__ieee754_atan2+0x12e>
 80155b4:	a118      	add	r1, pc, #96	; (adr r1, 8015618 <__ieee754_atan2+0x168>)
 80155b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ba:	e7ec      	b.n	8015596 <__ieee754_atan2+0xe6>
 80155bc:	2000      	movs	r0, #0
 80155be:	2100      	movs	r1, #0
 80155c0:	e7e9      	b.n	8015596 <__ieee754_atan2+0xe6>
 80155c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155c6:	4619      	mov	r1, r3
 80155c8:	e793      	b.n	80154f2 <__ieee754_atan2+0x42>
 80155ca:	a30f      	add	r3, pc, #60	; (adr r3, 8015608 <__ieee754_atan2+0x158>)
 80155cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d0:	f7ea fdfe 	bl	80001d0 <__aeabi_dsub>
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	a10d      	add	r1, pc, #52	; (adr r1, 8015610 <__ieee754_atan2+0x160>)
 80155da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155de:	f7ea fdf7 	bl	80001d0 <__aeabi_dsub>
 80155e2:	e786      	b.n	80154f2 <__ieee754_atan2+0x42>
 80155e4:	a10a      	add	r1, pc, #40	; (adr r1, 8015610 <__ieee754_atan2+0x160>)
 80155e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ea:	e782      	b.n	80154f2 <__ieee754_atan2+0x42>
 80155ec:	a10c      	add	r1, pc, #48	; (adr r1, 8015620 <__ieee754_atan2+0x170>)
 80155ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155f2:	e77e      	b.n	80154f2 <__ieee754_atan2+0x42>
 80155f4:	2000      	movs	r0, #0
 80155f6:	2100      	movs	r1, #0
 80155f8:	e77b      	b.n	80154f2 <__ieee754_atan2+0x42>
 80155fa:	a107      	add	r1, pc, #28	; (adr r1, 8015618 <__ieee754_atan2+0x168>)
 80155fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015600:	e777      	b.n	80154f2 <__ieee754_atan2+0x42>
 8015602:	bf00      	nop
 8015604:	f3af 8000 	nop.w
 8015608:	33145c07 	.word	0x33145c07
 801560c:	3ca1a626 	.word	0x3ca1a626
 8015610:	54442d18 	.word	0x54442d18
 8015614:	400921fb 	.word	0x400921fb
 8015618:	54442d18 	.word	0x54442d18
 801561c:	3ff921fb 	.word	0x3ff921fb
 8015620:	54442d18 	.word	0x54442d18
 8015624:	3fe921fb 	.word	0x3fe921fb
 8015628:	080170e8 	.word	0x080170e8
 801562c:	08017100 	.word	0x08017100
 8015630:	54442d18 	.word	0x54442d18
 8015634:	c00921fb 	.word	0xc00921fb
 8015638:	54442d18 	.word	0x54442d18
 801563c:	bff921fb 	.word	0xbff921fb
 8015640:	7ff00000 	.word	0x7ff00000

08015644 <__ieee754_sqrt>:
 8015644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015648:	ec55 4b10 	vmov	r4, r5, d0
 801564c:	4e56      	ldr	r6, [pc, #344]	; (80157a8 <__ieee754_sqrt+0x164>)
 801564e:	43ae      	bics	r6, r5
 8015650:	ee10 0a10 	vmov	r0, s0
 8015654:	ee10 3a10 	vmov	r3, s0
 8015658:	4629      	mov	r1, r5
 801565a:	462a      	mov	r2, r5
 801565c:	d110      	bne.n	8015680 <__ieee754_sqrt+0x3c>
 801565e:	ee10 2a10 	vmov	r2, s0
 8015662:	462b      	mov	r3, r5
 8015664:	f7ea ff6c 	bl	8000540 <__aeabi_dmul>
 8015668:	4602      	mov	r2, r0
 801566a:	460b      	mov	r3, r1
 801566c:	4620      	mov	r0, r4
 801566e:	4629      	mov	r1, r5
 8015670:	f7ea fdb0 	bl	80001d4 <__adddf3>
 8015674:	4604      	mov	r4, r0
 8015676:	460d      	mov	r5, r1
 8015678:	ec45 4b10 	vmov	d0, r4, r5
 801567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015680:	2d00      	cmp	r5, #0
 8015682:	dc10      	bgt.n	80156a6 <__ieee754_sqrt+0x62>
 8015684:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015688:	4330      	orrs	r0, r6
 801568a:	d0f5      	beq.n	8015678 <__ieee754_sqrt+0x34>
 801568c:	b15d      	cbz	r5, 80156a6 <__ieee754_sqrt+0x62>
 801568e:	ee10 2a10 	vmov	r2, s0
 8015692:	462b      	mov	r3, r5
 8015694:	ee10 0a10 	vmov	r0, s0
 8015698:	f7ea fd9a 	bl	80001d0 <__aeabi_dsub>
 801569c:	4602      	mov	r2, r0
 801569e:	460b      	mov	r3, r1
 80156a0:	f7eb f878 	bl	8000794 <__aeabi_ddiv>
 80156a4:	e7e6      	b.n	8015674 <__ieee754_sqrt+0x30>
 80156a6:	1509      	asrs	r1, r1, #20
 80156a8:	d076      	beq.n	8015798 <__ieee754_sqrt+0x154>
 80156aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80156ae:	07ce      	lsls	r6, r1, #31
 80156b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80156b4:	bf5e      	ittt	pl
 80156b6:	0fda      	lsrpl	r2, r3, #31
 80156b8:	005b      	lslpl	r3, r3, #1
 80156ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80156be:	0fda      	lsrs	r2, r3, #31
 80156c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80156c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80156c8:	2000      	movs	r0, #0
 80156ca:	106d      	asrs	r5, r5, #1
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	f04f 0e16 	mov.w	lr, #22
 80156d2:	4684      	mov	ip, r0
 80156d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80156d8:	eb0c 0401 	add.w	r4, ip, r1
 80156dc:	4294      	cmp	r4, r2
 80156de:	bfde      	ittt	le
 80156e0:	1b12      	suble	r2, r2, r4
 80156e2:	eb04 0c01 	addle.w	ip, r4, r1
 80156e6:	1840      	addle	r0, r0, r1
 80156e8:	0052      	lsls	r2, r2, #1
 80156ea:	f1be 0e01 	subs.w	lr, lr, #1
 80156ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80156f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80156f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80156fa:	d1ed      	bne.n	80156d8 <__ieee754_sqrt+0x94>
 80156fc:	4671      	mov	r1, lr
 80156fe:	2720      	movs	r7, #32
 8015700:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015704:	4562      	cmp	r2, ip
 8015706:	eb04 060e 	add.w	r6, r4, lr
 801570a:	dc02      	bgt.n	8015712 <__ieee754_sqrt+0xce>
 801570c:	d113      	bne.n	8015736 <__ieee754_sqrt+0xf2>
 801570e:	429e      	cmp	r6, r3
 8015710:	d811      	bhi.n	8015736 <__ieee754_sqrt+0xf2>
 8015712:	2e00      	cmp	r6, #0
 8015714:	eb06 0e04 	add.w	lr, r6, r4
 8015718:	da43      	bge.n	80157a2 <__ieee754_sqrt+0x15e>
 801571a:	f1be 0f00 	cmp.w	lr, #0
 801571e:	db40      	blt.n	80157a2 <__ieee754_sqrt+0x15e>
 8015720:	f10c 0801 	add.w	r8, ip, #1
 8015724:	eba2 020c 	sub.w	r2, r2, ip
 8015728:	429e      	cmp	r6, r3
 801572a:	bf88      	it	hi
 801572c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015730:	1b9b      	subs	r3, r3, r6
 8015732:	4421      	add	r1, r4
 8015734:	46c4      	mov	ip, r8
 8015736:	0052      	lsls	r2, r2, #1
 8015738:	3f01      	subs	r7, #1
 801573a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801573e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015742:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015746:	d1dd      	bne.n	8015704 <__ieee754_sqrt+0xc0>
 8015748:	4313      	orrs	r3, r2
 801574a:	d006      	beq.n	801575a <__ieee754_sqrt+0x116>
 801574c:	1c4c      	adds	r4, r1, #1
 801574e:	bf13      	iteet	ne
 8015750:	3101      	addne	r1, #1
 8015752:	3001      	addeq	r0, #1
 8015754:	4639      	moveq	r1, r7
 8015756:	f021 0101 	bicne.w	r1, r1, #1
 801575a:	1043      	asrs	r3, r0, #1
 801575c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015760:	0849      	lsrs	r1, r1, #1
 8015762:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015766:	07c2      	lsls	r2, r0, #31
 8015768:	bf48      	it	mi
 801576a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801576e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015772:	460c      	mov	r4, r1
 8015774:	463d      	mov	r5, r7
 8015776:	e77f      	b.n	8015678 <__ieee754_sqrt+0x34>
 8015778:	0ada      	lsrs	r2, r3, #11
 801577a:	3815      	subs	r0, #21
 801577c:	055b      	lsls	r3, r3, #21
 801577e:	2a00      	cmp	r2, #0
 8015780:	d0fa      	beq.n	8015778 <__ieee754_sqrt+0x134>
 8015782:	02d7      	lsls	r7, r2, #11
 8015784:	d50a      	bpl.n	801579c <__ieee754_sqrt+0x158>
 8015786:	f1c1 0420 	rsb	r4, r1, #32
 801578a:	fa23 f404 	lsr.w	r4, r3, r4
 801578e:	1e4d      	subs	r5, r1, #1
 8015790:	408b      	lsls	r3, r1
 8015792:	4322      	orrs	r2, r4
 8015794:	1b41      	subs	r1, r0, r5
 8015796:	e788      	b.n	80156aa <__ieee754_sqrt+0x66>
 8015798:	4608      	mov	r0, r1
 801579a:	e7f0      	b.n	801577e <__ieee754_sqrt+0x13a>
 801579c:	0052      	lsls	r2, r2, #1
 801579e:	3101      	adds	r1, #1
 80157a0:	e7ef      	b.n	8015782 <__ieee754_sqrt+0x13e>
 80157a2:	46e0      	mov	r8, ip
 80157a4:	e7be      	b.n	8015724 <__ieee754_sqrt+0xe0>
 80157a6:	bf00      	nop
 80157a8:	7ff00000 	.word	0x7ff00000

080157ac <__ieee754_acosf>:
 80157ac:	b508      	push	{r3, lr}
 80157ae:	ee10 3a10 	vmov	r3, s0
 80157b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80157b6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80157ba:	ed2d 8b0c 	vpush	{d8-d13}
 80157be:	d10a      	bne.n	80157d6 <__ieee754_acosf+0x2a>
 80157c0:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801595c <__ieee754_acosf+0x1b0>
 80157c4:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015960 <__ieee754_acosf+0x1b4>
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	bfd8      	it	le
 80157cc:	eeb0 0a48 	vmovle.f32	s0, s16
 80157d0:	ecbd 8b0c 	vpop	{d8-d13}
 80157d4:	bd08      	pop	{r3, pc}
 80157d6:	dd04      	ble.n	80157e2 <__ieee754_acosf+0x36>
 80157d8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80157dc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80157e0:	e7f6      	b.n	80157d0 <__ieee754_acosf+0x24>
 80157e2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80157e6:	da3e      	bge.n	8015866 <__ieee754_acosf+0xba>
 80157e8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80157ec:	f340 80b3 	ble.w	8015956 <__ieee754_acosf+0x1aa>
 80157f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80157f4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8015964 <__ieee754_acosf+0x1b8>
 80157f8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015968 <__ieee754_acosf+0x1bc>
 80157fc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801596c <__ieee754_acosf+0x1c0>
 8015800:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015970 <__ieee754_acosf+0x1c4>
 8015804:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015808:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8015974 <__ieee754_acosf+0x1c8>
 801580c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015810:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015978 <__ieee754_acosf+0x1cc>
 8015814:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015818:	eddf 6a58 	vldr	s13, [pc, #352]	; 801597c <__ieee754_acosf+0x1d0>
 801581c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015820:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015980 <__ieee754_acosf+0x1d4>
 8015824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015828:	eddf 6a56 	vldr	s13, [pc, #344]	; 8015984 <__ieee754_acosf+0x1d8>
 801582c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015830:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015988 <__ieee754_acosf+0x1dc>
 8015834:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015838:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801598c <__ieee754_acosf+0x1e0>
 801583c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015844:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015848:	ee27 7a27 	vmul.f32	s14, s14, s15
 801584c:	eef0 7a66 	vmov.f32	s15, s13
 8015850:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015854:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015990 <__ieee754_acosf+0x1e4>
 8015858:	eea0 8a66 	vfms.f32	s16, s0, s13
 801585c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015860:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015864:	e7b4      	b.n	80157d0 <__ieee754_acosf+0x24>
 8015866:	2b00      	cmp	r3, #0
 8015868:	eddf da3e 	vldr	s27, [pc, #248]	; 8015964 <__ieee754_acosf+0x1b8>
 801586c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015968 <__ieee754_acosf+0x1bc>
 8015870:	ed9f ca40 	vldr	s24, [pc, #256]	; 8015974 <__ieee754_acosf+0x1c8>
 8015874:	eddf ba40 	vldr	s23, [pc, #256]	; 8015978 <__ieee754_acosf+0x1cc>
 8015878:	ed9f ba40 	vldr	s22, [pc, #256]	; 801597c <__ieee754_acosf+0x1d0>
 801587c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015980 <__ieee754_acosf+0x1d4>
 8015880:	ed9f da40 	vldr	s26, [pc, #256]	; 8015984 <__ieee754_acosf+0x1d8>
 8015884:	eddf aa39 	vldr	s21, [pc, #228]	; 801596c <__ieee754_acosf+0x1c0>
 8015888:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015988 <__ieee754_acosf+0x1dc>
 801588c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801598c <__ieee754_acosf+0x1e0>
 8015890:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015894:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015898:	da28      	bge.n	80158ec <__ieee754_acosf+0x140>
 801589a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801589e:	ee20 0a27 	vmul.f32	s0, s0, s15
 80158a2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80158a6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80158aa:	eeac ca80 	vfma.f32	s24, s25, s0
 80158ae:	eeaa aa80 	vfma.f32	s20, s21, s0
 80158b2:	eeec ba00 	vfma.f32	s23, s24, s0
 80158b6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80158ba:	eeab ba80 	vfma.f32	s22, s23, s0
 80158be:	eea9 9a80 	vfma.f32	s18, s19, s0
 80158c2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80158c6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80158ca:	f000 fb2b 	bl	8015f24 <__ieee754_sqrtf>
 80158ce:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80158d2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015994 <__ieee754_acosf+0x1e8>
 80158d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80158da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80158de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80158e2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015998 <__ieee754_acosf+0x1ec>
 80158e6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80158ea:	e771      	b.n	80157d0 <__ieee754_acosf+0x24>
 80158ec:	ee39 8a40 	vsub.f32	s16, s18, s0
 80158f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80158f4:	eeb0 0a48 	vmov.f32	s0, s16
 80158f8:	f000 fb14 	bl	8015f24 <__ieee754_sqrtf>
 80158fc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015900:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8015904:	eeac ca88 	vfma.f32	s24, s25, s16
 8015908:	eeaa aa88 	vfma.f32	s20, s21, s16
 801590c:	eeec ba08 	vfma.f32	s23, s24, s16
 8015910:	ee10 3a10 	vmov	r3, s0
 8015914:	eeab ba88 	vfma.f32	s22, s23, s16
 8015918:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801591c:	f023 030f 	bic.w	r3, r3, #15
 8015920:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015924:	ee07 3a90 	vmov	s15, r3
 8015928:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801592c:	eeb0 6a48 	vmov.f32	s12, s16
 8015930:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8015934:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015938:	ee70 6a27 	vadd.f32	s13, s0, s15
 801593c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015940:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015944:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015948:	eea0 7a26 	vfma.f32	s14, s0, s13
 801594c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015950:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015954:	e73c      	b.n	80157d0 <__ieee754_acosf+0x24>
 8015956:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801599c <__ieee754_acosf+0x1f0>
 801595a:	e739      	b.n	80157d0 <__ieee754_acosf+0x24>
 801595c:	00000000 	.word	0x00000000
 8015960:	40490fdb 	.word	0x40490fdb
 8015964:	3811ef08 	.word	0x3811ef08
 8015968:	3a4f7f04 	.word	0x3a4f7f04
 801596c:	bf303361 	.word	0xbf303361
 8015970:	33a22168 	.word	0x33a22168
 8015974:	bd241146 	.word	0xbd241146
 8015978:	3e4e0aa8 	.word	0x3e4e0aa8
 801597c:	bea6b090 	.word	0xbea6b090
 8015980:	3e2aaaab 	.word	0x3e2aaaab
 8015984:	3d9dc62e 	.word	0x3d9dc62e
 8015988:	4001572d 	.word	0x4001572d
 801598c:	c019d139 	.word	0xc019d139
 8015990:	3fc90fda 	.word	0x3fc90fda
 8015994:	b3a22168 	.word	0xb3a22168
 8015998:	40490fda 	.word	0x40490fda
 801599c:	3fc90fdb 	.word	0x3fc90fdb

080159a0 <__ieee754_asinf>:
 80159a0:	b538      	push	{r3, r4, r5, lr}
 80159a2:	ee10 5a10 	vmov	r5, s0
 80159a6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80159aa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80159ae:	ed2d 8b04 	vpush	{d8-d9}
 80159b2:	d10c      	bne.n	80159ce <__ieee754_asinf+0x2e>
 80159b4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8015b2c <__ieee754_asinf+0x18c>
 80159b8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8015b30 <__ieee754_asinf+0x190>
 80159bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80159c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159c4:	eeb0 0a67 	vmov.f32	s0, s15
 80159c8:	ecbd 8b04 	vpop	{d8-d9}
 80159cc:	bd38      	pop	{r3, r4, r5, pc}
 80159ce:	dd04      	ble.n	80159da <__ieee754_asinf+0x3a>
 80159d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80159d4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80159d8:	e7f6      	b.n	80159c8 <__ieee754_asinf+0x28>
 80159da:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80159de:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80159e2:	da0b      	bge.n	80159fc <__ieee754_asinf+0x5c>
 80159e4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80159e8:	da52      	bge.n	8015a90 <__ieee754_asinf+0xf0>
 80159ea:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015b34 <__ieee754_asinf+0x194>
 80159ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 80159f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80159f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fa:	dce5      	bgt.n	80159c8 <__ieee754_asinf+0x28>
 80159fc:	f001 f92a 	bl	8016c54 <fabsf>
 8015a00:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015a04:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015a08:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015a0c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015b38 <__ieee754_asinf+0x198>
 8015a10:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8015b3c <__ieee754_asinf+0x19c>
 8015a14:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8015b40 <__ieee754_asinf+0x1a0>
 8015a18:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015a1c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015b44 <__ieee754_asinf+0x1a4>
 8015a20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a24:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015b48 <__ieee754_asinf+0x1a8>
 8015a28:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015a2c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015b4c <__ieee754_asinf+0x1ac>
 8015a30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a34:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015b50 <__ieee754_asinf+0x1b0>
 8015a38:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015a3c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015b54 <__ieee754_asinf+0x1b4>
 8015a40:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015a44:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015b58 <__ieee754_asinf+0x1b8>
 8015a48:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015a4c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015b5c <__ieee754_asinf+0x1bc>
 8015a50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a54:	eeb0 0a48 	vmov.f32	s0, s16
 8015a58:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015a5c:	f000 fa62 	bl	8015f24 <__ieee754_sqrtf>
 8015a60:	4b3f      	ldr	r3, [pc, #252]	; (8015b60 <__ieee754_asinf+0x1c0>)
 8015a62:	ee29 9a08 	vmul.f32	s18, s18, s16
 8015a66:	429c      	cmp	r4, r3
 8015a68:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015a6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015a70:	dd3d      	ble.n	8015aee <__ieee754_asinf+0x14e>
 8015a72:	eea0 0a06 	vfma.f32	s0, s0, s12
 8015a76:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8015b64 <__ieee754_asinf+0x1c4>
 8015a7a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8015a7e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015b30 <__ieee754_asinf+0x190>
 8015a82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015a86:	2d00      	cmp	r5, #0
 8015a88:	bfd8      	it	le
 8015a8a:	eeb1 0a40 	vnegle.f32	s0, s0
 8015a8e:	e79b      	b.n	80159c8 <__ieee754_asinf+0x28>
 8015a90:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015a94:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015b38 <__ieee754_asinf+0x198>
 8015a98:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015b3c <__ieee754_asinf+0x19c>
 8015a9c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8015b50 <__ieee754_asinf+0x1b0>
 8015aa0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015aa4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8015b44 <__ieee754_asinf+0x1a4>
 8015aa8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015aac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8015b48 <__ieee754_asinf+0x1a8>
 8015ab0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015ab4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015b4c <__ieee754_asinf+0x1ac>
 8015ab8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015abc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015b40 <__ieee754_asinf+0x1a0>
 8015ac0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015ac4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8015b54 <__ieee754_asinf+0x1b4>
 8015ac8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015acc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8015b58 <__ieee754_asinf+0x1b8>
 8015ad0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015ad4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8015b5c <__ieee754_asinf+0x1bc>
 8015ad8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ae0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015ae4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015ae8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015aec:	e76c      	b.n	80159c8 <__ieee754_asinf+0x28>
 8015aee:	ee10 3a10 	vmov	r3, s0
 8015af2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015af6:	f023 030f 	bic.w	r3, r3, #15
 8015afa:	ee07 3a10 	vmov	s14, r3
 8015afe:	eea7 8a47 	vfms.f32	s16, s14, s14
 8015b02:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015b06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015b0a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8015b0e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015b2c <__ieee754_asinf+0x18c>
 8015b12:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8015b16:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8015b1a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015b68 <__ieee754_asinf+0x1c8>
 8015b1e:	eeb0 6a40 	vmov.f32	s12, s0
 8015b22:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015b26:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015b2a:	e7aa      	b.n	8015a82 <__ieee754_asinf+0xe2>
 8015b2c:	b33bbd2e 	.word	0xb33bbd2e
 8015b30:	3fc90fdb 	.word	0x3fc90fdb
 8015b34:	7149f2ca 	.word	0x7149f2ca
 8015b38:	3811ef08 	.word	0x3811ef08
 8015b3c:	3a4f7f04 	.word	0x3a4f7f04
 8015b40:	3e2aaaab 	.word	0x3e2aaaab
 8015b44:	bd241146 	.word	0xbd241146
 8015b48:	3e4e0aa8 	.word	0x3e4e0aa8
 8015b4c:	bea6b090 	.word	0xbea6b090
 8015b50:	3d9dc62e 	.word	0x3d9dc62e
 8015b54:	bf303361 	.word	0xbf303361
 8015b58:	4001572d 	.word	0x4001572d
 8015b5c:	c019d139 	.word	0xc019d139
 8015b60:	3f799999 	.word	0x3f799999
 8015b64:	333bbd2e 	.word	0x333bbd2e
 8015b68:	3f490fdb 	.word	0x3f490fdb

08015b6c <__ieee754_atan2f>:
 8015b6c:	ee10 2a90 	vmov	r2, s1
 8015b70:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015b74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015b78:	b510      	push	{r4, lr}
 8015b7a:	eef0 7a40 	vmov.f32	s15, s0
 8015b7e:	dc06      	bgt.n	8015b8e <__ieee754_atan2f+0x22>
 8015b80:	ee10 0a10 	vmov	r0, s0
 8015b84:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015b88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b8c:	dd04      	ble.n	8015b98 <__ieee754_atan2f+0x2c>
 8015b8e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015b92:	eeb0 0a67 	vmov.f32	s0, s15
 8015b96:	bd10      	pop	{r4, pc}
 8015b98:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015b9c:	d103      	bne.n	8015ba6 <__ieee754_atan2f+0x3a>
 8015b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ba2:	f000 bf83 	b.w	8016aac <atanf>
 8015ba6:	1794      	asrs	r4, r2, #30
 8015ba8:	f004 0402 	and.w	r4, r4, #2
 8015bac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015bb0:	b943      	cbnz	r3, 8015bc4 <__ieee754_atan2f+0x58>
 8015bb2:	2c02      	cmp	r4, #2
 8015bb4:	d05e      	beq.n	8015c74 <__ieee754_atan2f+0x108>
 8015bb6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015c88 <__ieee754_atan2f+0x11c>
 8015bba:	2c03      	cmp	r4, #3
 8015bbc:	bf08      	it	eq
 8015bbe:	eef0 7a47 	vmoveq.f32	s15, s14
 8015bc2:	e7e6      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015bc4:	b941      	cbnz	r1, 8015bd8 <__ieee754_atan2f+0x6c>
 8015bc6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015c8c <__ieee754_atan2f+0x120>
 8015bca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015c90 <__ieee754_atan2f+0x124>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	bfb8      	it	lt
 8015bd2:	eef0 7a40 	vmovlt.f32	s15, s0
 8015bd6:	e7dc      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015bd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015bdc:	d110      	bne.n	8015c00 <__ieee754_atan2f+0x94>
 8015bde:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015be2:	f104 34ff 	add.w	r4, r4, #4294967295
 8015be6:	d107      	bne.n	8015bf8 <__ieee754_atan2f+0x8c>
 8015be8:	2c02      	cmp	r4, #2
 8015bea:	d846      	bhi.n	8015c7a <__ieee754_atan2f+0x10e>
 8015bec:	4b29      	ldr	r3, [pc, #164]	; (8015c94 <__ieee754_atan2f+0x128>)
 8015bee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015bf2:	edd4 7a00 	vldr	s15, [r4]
 8015bf6:	e7cc      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015bf8:	2c02      	cmp	r4, #2
 8015bfa:	d841      	bhi.n	8015c80 <__ieee754_atan2f+0x114>
 8015bfc:	4b26      	ldr	r3, [pc, #152]	; (8015c98 <__ieee754_atan2f+0x12c>)
 8015bfe:	e7f6      	b.n	8015bee <__ieee754_atan2f+0x82>
 8015c00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c04:	d0df      	beq.n	8015bc6 <__ieee754_atan2f+0x5a>
 8015c06:	1a5b      	subs	r3, r3, r1
 8015c08:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8015c0c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015c10:	da1a      	bge.n	8015c48 <__ieee754_atan2f+0xdc>
 8015c12:	2a00      	cmp	r2, #0
 8015c14:	da01      	bge.n	8015c1a <__ieee754_atan2f+0xae>
 8015c16:	313c      	adds	r1, #60	; 0x3c
 8015c18:	db19      	blt.n	8015c4e <__ieee754_atan2f+0xe2>
 8015c1a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8015c1e:	f001 f819 	bl	8016c54 <fabsf>
 8015c22:	f000 ff43 	bl	8016aac <atanf>
 8015c26:	eef0 7a40 	vmov.f32	s15, s0
 8015c2a:	2c01      	cmp	r4, #1
 8015c2c:	d012      	beq.n	8015c54 <__ieee754_atan2f+0xe8>
 8015c2e:	2c02      	cmp	r4, #2
 8015c30:	d017      	beq.n	8015c62 <__ieee754_atan2f+0xf6>
 8015c32:	2c00      	cmp	r4, #0
 8015c34:	d0ad      	beq.n	8015b92 <__ieee754_atan2f+0x26>
 8015c36:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8015c9c <__ieee754_atan2f+0x130>
 8015c3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c3e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015ca0 <__ieee754_atan2f+0x134>
 8015c42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c46:	e7a4      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c48:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015c8c <__ieee754_atan2f+0x120>
 8015c4c:	e7ed      	b.n	8015c2a <__ieee754_atan2f+0xbe>
 8015c4e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015ca4 <__ieee754_atan2f+0x138>
 8015c52:	e7ea      	b.n	8015c2a <__ieee754_atan2f+0xbe>
 8015c54:	ee17 3a90 	vmov	r3, s15
 8015c58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c5c:	ee07 3a90 	vmov	s15, r3
 8015c60:	e797      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c62:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015c9c <__ieee754_atan2f+0x130>
 8015c66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c6a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015ca0 <__ieee754_atan2f+0x134>
 8015c6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015c72:	e78e      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c74:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015ca0 <__ieee754_atan2f+0x134>
 8015c78:	e78b      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c7a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015ca8 <__ieee754_atan2f+0x13c>
 8015c7e:	e788      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c80:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015ca4 <__ieee754_atan2f+0x138>
 8015c84:	e785      	b.n	8015b92 <__ieee754_atan2f+0x26>
 8015c86:	bf00      	nop
 8015c88:	c0490fdb 	.word	0xc0490fdb
 8015c8c:	3fc90fdb 	.word	0x3fc90fdb
 8015c90:	bfc90fdb 	.word	0xbfc90fdb
 8015c94:	08017118 	.word	0x08017118
 8015c98:	08017124 	.word	0x08017124
 8015c9c:	33bbbd2e 	.word	0x33bbbd2e
 8015ca0:	40490fdb 	.word	0x40490fdb
 8015ca4:	00000000 	.word	0x00000000
 8015ca8:	3f490fdb 	.word	0x3f490fdb

08015cac <__ieee754_rem_pio2f>:
 8015cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cae:	ee10 6a10 	vmov	r6, s0
 8015cb2:	4b8e      	ldr	r3, [pc, #568]	; (8015eec <__ieee754_rem_pio2f+0x240>)
 8015cb4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015cb8:	429d      	cmp	r5, r3
 8015cba:	b087      	sub	sp, #28
 8015cbc:	eef0 7a40 	vmov.f32	s15, s0
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	dc05      	bgt.n	8015cd0 <__ieee754_rem_pio2f+0x24>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	ed80 0a00 	vstr	s0, [r0]
 8015cca:	6043      	str	r3, [r0, #4]
 8015ccc:	2000      	movs	r0, #0
 8015cce:	e01a      	b.n	8015d06 <__ieee754_rem_pio2f+0x5a>
 8015cd0:	4b87      	ldr	r3, [pc, #540]	; (8015ef0 <__ieee754_rem_pio2f+0x244>)
 8015cd2:	429d      	cmp	r5, r3
 8015cd4:	dc46      	bgt.n	8015d64 <__ieee754_rem_pio2f+0xb8>
 8015cd6:	2e00      	cmp	r6, #0
 8015cd8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015ef4 <__ieee754_rem_pio2f+0x248>
 8015cdc:	4b86      	ldr	r3, [pc, #536]	; (8015ef8 <__ieee754_rem_pio2f+0x24c>)
 8015cde:	f025 050f 	bic.w	r5, r5, #15
 8015ce2:	dd1f      	ble.n	8015d24 <__ieee754_rem_pio2f+0x78>
 8015ce4:	429d      	cmp	r5, r3
 8015ce6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cea:	d00e      	beq.n	8015d0a <__ieee754_rem_pio2f+0x5e>
 8015cec:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015efc <__ieee754_rem_pio2f+0x250>
 8015cf0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015cf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cf8:	ed80 0a00 	vstr	s0, [r0]
 8015cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d00:	2001      	movs	r0, #1
 8015d02:	edc4 7a01 	vstr	s15, [r4, #4]
 8015d06:	b007      	add	sp, #28
 8015d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d0a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015f00 <__ieee754_rem_pio2f+0x254>
 8015d0e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8015f04 <__ieee754_rem_pio2f+0x258>
 8015d12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d16:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015d1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015d1e:	edc0 6a00 	vstr	s13, [r0]
 8015d22:	e7eb      	b.n	8015cfc <__ieee754_rem_pio2f+0x50>
 8015d24:	429d      	cmp	r5, r3
 8015d26:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015d2a:	d00e      	beq.n	8015d4a <__ieee754_rem_pio2f+0x9e>
 8015d2c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015efc <__ieee754_rem_pio2f+0x250>
 8015d30:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015d34:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d38:	ed80 0a00 	vstr	s0, [r0]
 8015d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015d40:	f04f 30ff 	mov.w	r0, #4294967295
 8015d44:	edc4 7a01 	vstr	s15, [r4, #4]
 8015d48:	e7dd      	b.n	8015d06 <__ieee754_rem_pio2f+0x5a>
 8015d4a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015f00 <__ieee754_rem_pio2f+0x254>
 8015d4e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015f04 <__ieee754_rem_pio2f+0x258>
 8015d52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015d56:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015d5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015d5e:	edc0 6a00 	vstr	s13, [r0]
 8015d62:	e7eb      	b.n	8015d3c <__ieee754_rem_pio2f+0x90>
 8015d64:	4b68      	ldr	r3, [pc, #416]	; (8015f08 <__ieee754_rem_pio2f+0x25c>)
 8015d66:	429d      	cmp	r5, r3
 8015d68:	dc72      	bgt.n	8015e50 <__ieee754_rem_pio2f+0x1a4>
 8015d6a:	f000 ff73 	bl	8016c54 <fabsf>
 8015d6e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015f0c <__ieee754_rem_pio2f+0x260>
 8015d72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015d82:	ee17 0a90 	vmov	r0, s15
 8015d86:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015ef4 <__ieee754_rem_pio2f+0x248>
 8015d8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015d8e:	281f      	cmp	r0, #31
 8015d90:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015efc <__ieee754_rem_pio2f+0x250>
 8015d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d98:	eeb1 6a47 	vneg.f32	s12, s14
 8015d9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015da0:	ee16 2a90 	vmov	r2, s13
 8015da4:	dc1c      	bgt.n	8015de0 <__ieee754_rem_pio2f+0x134>
 8015da6:	495a      	ldr	r1, [pc, #360]	; (8015f10 <__ieee754_rem_pio2f+0x264>)
 8015da8:	1e47      	subs	r7, r0, #1
 8015daa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8015dae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015db2:	428b      	cmp	r3, r1
 8015db4:	d014      	beq.n	8015de0 <__ieee754_rem_pio2f+0x134>
 8015db6:	6022      	str	r2, [r4, #0]
 8015db8:	ed94 7a00 	vldr	s14, [r4]
 8015dbc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015dc0:	2e00      	cmp	r6, #0
 8015dc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015dc6:	ed84 0a01 	vstr	s0, [r4, #4]
 8015dca:	da9c      	bge.n	8015d06 <__ieee754_rem_pio2f+0x5a>
 8015dcc:	eeb1 7a47 	vneg.f32	s14, s14
 8015dd0:	eeb1 0a40 	vneg.f32	s0, s0
 8015dd4:	ed84 7a00 	vstr	s14, [r4]
 8015dd8:	ed84 0a01 	vstr	s0, [r4, #4]
 8015ddc:	4240      	negs	r0, r0
 8015dde:	e792      	b.n	8015d06 <__ieee754_rem_pio2f+0x5a>
 8015de0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015de4:	15eb      	asrs	r3, r5, #23
 8015de6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015dea:	2d08      	cmp	r5, #8
 8015dec:	dde3      	ble.n	8015db6 <__ieee754_rem_pio2f+0x10a>
 8015dee:	eddf 7a44 	vldr	s15, [pc, #272]	; 8015f00 <__ieee754_rem_pio2f+0x254>
 8015df2:	eef0 6a40 	vmov.f32	s13, s0
 8015df6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015dfa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015dfe:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015e02:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015f04 <__ieee754_rem_pio2f+0x258>
 8015e06:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8015e0a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8015e0e:	eef0 7a40 	vmov.f32	s15, s0
 8015e12:	ee15 2a90 	vmov	r2, s11
 8015e16:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015e1a:	1a5b      	subs	r3, r3, r1
 8015e1c:	2b19      	cmp	r3, #25
 8015e1e:	dc04      	bgt.n	8015e2a <__ieee754_rem_pio2f+0x17e>
 8015e20:	edc4 5a00 	vstr	s11, [r4]
 8015e24:	eeb0 0a66 	vmov.f32	s0, s13
 8015e28:	e7c6      	b.n	8015db8 <__ieee754_rem_pio2f+0x10c>
 8015e2a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015f14 <__ieee754_rem_pio2f+0x268>
 8015e2e:	eeb0 0a66 	vmov.f32	s0, s13
 8015e32:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015e36:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015e3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015f18 <__ieee754_rem_pio2f+0x26c>
 8015e3e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015e42:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015e46:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015e4a:	ed84 7a00 	vstr	s14, [r4]
 8015e4e:	e7b3      	b.n	8015db8 <__ieee754_rem_pio2f+0x10c>
 8015e50:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015e54:	db06      	blt.n	8015e64 <__ieee754_rem_pio2f+0x1b8>
 8015e56:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015e5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8015e5e:	edc0 7a00 	vstr	s15, [r0]
 8015e62:	e733      	b.n	8015ccc <__ieee754_rem_pio2f+0x20>
 8015e64:	15ea      	asrs	r2, r5, #23
 8015e66:	3a86      	subs	r2, #134	; 0x86
 8015e68:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015e6c:	ee07 3a90 	vmov	s15, r3
 8015e70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e74:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015f1c <__ieee754_rem_pio2f+0x270>
 8015e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e80:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015e84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e94:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015e98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea4:	edcd 7a05 	vstr	s15, [sp, #20]
 8015ea8:	d11e      	bne.n	8015ee8 <__ieee754_rem_pio2f+0x23c>
 8015eaa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb2:	bf14      	ite	ne
 8015eb4:	2302      	movne	r3, #2
 8015eb6:	2301      	moveq	r3, #1
 8015eb8:	4919      	ldr	r1, [pc, #100]	; (8015f20 <__ieee754_rem_pio2f+0x274>)
 8015eba:	9101      	str	r1, [sp, #4]
 8015ebc:	2102      	movs	r1, #2
 8015ebe:	9100      	str	r1, [sp, #0]
 8015ec0:	a803      	add	r0, sp, #12
 8015ec2:	4621      	mov	r1, r4
 8015ec4:	f000 f892 	bl	8015fec <__kernel_rem_pio2f>
 8015ec8:	2e00      	cmp	r6, #0
 8015eca:	f6bf af1c 	bge.w	8015d06 <__ieee754_rem_pio2f+0x5a>
 8015ece:	edd4 7a00 	vldr	s15, [r4]
 8015ed2:	eef1 7a67 	vneg.f32	s15, s15
 8015ed6:	edc4 7a00 	vstr	s15, [r4]
 8015eda:	edd4 7a01 	vldr	s15, [r4, #4]
 8015ede:	eef1 7a67 	vneg.f32	s15, s15
 8015ee2:	edc4 7a01 	vstr	s15, [r4, #4]
 8015ee6:	e779      	b.n	8015ddc <__ieee754_rem_pio2f+0x130>
 8015ee8:	2303      	movs	r3, #3
 8015eea:	e7e5      	b.n	8015eb8 <__ieee754_rem_pio2f+0x20c>
 8015eec:	3f490fd8 	.word	0x3f490fd8
 8015ef0:	4016cbe3 	.word	0x4016cbe3
 8015ef4:	3fc90f80 	.word	0x3fc90f80
 8015ef8:	3fc90fd0 	.word	0x3fc90fd0
 8015efc:	37354443 	.word	0x37354443
 8015f00:	37354400 	.word	0x37354400
 8015f04:	2e85a308 	.word	0x2e85a308
 8015f08:	43490f80 	.word	0x43490f80
 8015f0c:	3f22f984 	.word	0x3f22f984
 8015f10:	08017130 	.word	0x08017130
 8015f14:	2e85a300 	.word	0x2e85a300
 8015f18:	248d3132 	.word	0x248d3132
 8015f1c:	43800000 	.word	0x43800000
 8015f20:	080171b0 	.word	0x080171b0

08015f24 <__ieee754_sqrtf>:
 8015f24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f28:	4770      	bx	lr
	...

08015f2c <__kernel_cosf>:
 8015f2c:	ee10 3a10 	vmov	r3, s0
 8015f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015f34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015f38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015f3c:	da05      	bge.n	8015f4a <__kernel_cosf+0x1e>
 8015f3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015f42:	ee17 2a90 	vmov	r2, s15
 8015f46:	2a00      	cmp	r2, #0
 8015f48:	d03d      	beq.n	8015fc6 <__kernel_cosf+0x9a>
 8015f4a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8015f4e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015fcc <__kernel_cosf+0xa0>
 8015f52:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8015fd0 <__kernel_cosf+0xa4>
 8015f56:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8015fd4 <__kernel_cosf+0xa8>
 8015f5a:	4a1f      	ldr	r2, [pc, #124]	; (8015fd8 <__kernel_cosf+0xac>)
 8015f5c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f60:	4293      	cmp	r3, r2
 8015f62:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015fdc <__kernel_cosf+0xb0>
 8015f66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015f6a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8015fe0 <__kernel_cosf+0xb4>
 8015f6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015f72:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015fe4 <__kernel_cosf+0xb8>
 8015f76:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015f7a:	eeb0 7a66 	vmov.f32	s14, s13
 8015f7e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015f82:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015f86:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8015f8a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8015f8e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8015f92:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015f96:	dc04      	bgt.n	8015fa2 <__kernel_cosf+0x76>
 8015f98:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015f9c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8015fa0:	4770      	bx	lr
 8015fa2:	4a11      	ldr	r2, [pc, #68]	; (8015fe8 <__kernel_cosf+0xbc>)
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	bfda      	itte	le
 8015fa8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015fac:	ee06 3a90 	vmovle	s13, r3
 8015fb0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8015fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015fb8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8015fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015fc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015fc4:	4770      	bx	lr
 8015fc6:	eeb0 0a46 	vmov.f32	s0, s12
 8015fca:	4770      	bx	lr
 8015fcc:	ad47d74e 	.word	0xad47d74e
 8015fd0:	310f74f6 	.word	0x310f74f6
 8015fd4:	3d2aaaab 	.word	0x3d2aaaab
 8015fd8:	3e999999 	.word	0x3e999999
 8015fdc:	b493f27c 	.word	0xb493f27c
 8015fe0:	37d00d01 	.word	0x37d00d01
 8015fe4:	bab60b61 	.word	0xbab60b61
 8015fe8:	3f480000 	.word	0x3f480000

08015fec <__kernel_rem_pio2f>:
 8015fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff0:	ed2d 8b04 	vpush	{d8-d9}
 8015ff4:	b0d7      	sub	sp, #348	; 0x15c
 8015ff6:	4616      	mov	r6, r2
 8015ff8:	4698      	mov	r8, r3
 8015ffa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015ffc:	4bbb      	ldr	r3, [pc, #748]	; (80162ec <__kernel_rem_pio2f+0x300>)
 8015ffe:	9001      	str	r0, [sp, #4]
 8016000:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016004:	1d33      	adds	r3, r6, #4
 8016006:	460d      	mov	r5, r1
 8016008:	f108 39ff 	add.w	r9, r8, #4294967295
 801600c:	db29      	blt.n	8016062 <__kernel_rem_pio2f+0x76>
 801600e:	1ef1      	subs	r1, r6, #3
 8016010:	bf48      	it	mi
 8016012:	1d31      	addmi	r1, r6, #4
 8016014:	10c9      	asrs	r1, r1, #3
 8016016:	1c4c      	adds	r4, r1, #1
 8016018:	00e3      	lsls	r3, r4, #3
 801601a:	9302      	str	r3, [sp, #8]
 801601c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801601e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80162fc <__kernel_rem_pio2f+0x310>
 8016022:	eba1 0009 	sub.w	r0, r1, r9
 8016026:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801602a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801602e:	eb07 0c09 	add.w	ip, r7, r9
 8016032:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016036:	2300      	movs	r3, #0
 8016038:	4563      	cmp	r3, ip
 801603a:	dd14      	ble.n	8016066 <__kernel_rem_pio2f+0x7a>
 801603c:	ab1a      	add	r3, sp, #104	; 0x68
 801603e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016042:	46cc      	mov	ip, r9
 8016044:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016048:	f1c8 0b01 	rsb	fp, r8, #1
 801604c:	eb0b 020c 	add.w	r2, fp, ip
 8016050:	4297      	cmp	r7, r2
 8016052:	db27      	blt.n	80160a4 <__kernel_rem_pio2f+0xb8>
 8016054:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016058:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80162fc <__kernel_rem_pio2f+0x310>
 801605c:	4618      	mov	r0, r3
 801605e:	2200      	movs	r2, #0
 8016060:	e016      	b.n	8016090 <__kernel_rem_pio2f+0xa4>
 8016062:	2100      	movs	r1, #0
 8016064:	e7d7      	b.n	8016016 <__kernel_rem_pio2f+0x2a>
 8016066:	42d8      	cmn	r0, r3
 8016068:	bf5d      	ittte	pl
 801606a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801606e:	ee07 2a90 	vmovpl	s15, r2
 8016072:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016076:	eef0 7a47 	vmovmi.f32	s15, s14
 801607a:	ecea 7a01 	vstmia	sl!, {s15}
 801607e:	3301      	adds	r3, #1
 8016080:	e7da      	b.n	8016038 <__kernel_rem_pio2f+0x4c>
 8016082:	ecfe 6a01 	vldmia	lr!, {s13}
 8016086:	ed90 7a00 	vldr	s14, [r0]
 801608a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801608e:	3201      	adds	r2, #1
 8016090:	454a      	cmp	r2, r9
 8016092:	f1a0 0004 	sub.w	r0, r0, #4
 8016096:	ddf4      	ble.n	8016082 <__kernel_rem_pio2f+0x96>
 8016098:	ecea 7a01 	vstmia	sl!, {s15}
 801609c:	3304      	adds	r3, #4
 801609e:	f10c 0c01 	add.w	ip, ip, #1
 80160a2:	e7d3      	b.n	801604c <__kernel_rem_pio2f+0x60>
 80160a4:	ab06      	add	r3, sp, #24
 80160a6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80160aa:	9304      	str	r3, [sp, #16]
 80160ac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80160ae:	eddf 8a92 	vldr	s17, [pc, #584]	; 80162f8 <__kernel_rem_pio2f+0x30c>
 80160b2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80162f4 <__kernel_rem_pio2f+0x308>
 80160b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80160ba:	9303      	str	r3, [sp, #12]
 80160bc:	46ba      	mov	sl, r7
 80160be:	ab56      	add	r3, sp, #344	; 0x158
 80160c0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80160c4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80160c8:	ab06      	add	r3, sp, #24
 80160ca:	4618      	mov	r0, r3
 80160cc:	4652      	mov	r2, sl
 80160ce:	2a00      	cmp	r2, #0
 80160d0:	dc51      	bgt.n	8016176 <__kernel_rem_pio2f+0x18a>
 80160d2:	4620      	mov	r0, r4
 80160d4:	9305      	str	r3, [sp, #20]
 80160d6:	f000 fe0d 	bl	8016cf4 <scalbnf>
 80160da:	eeb0 8a40 	vmov.f32	s16, s0
 80160de:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80160e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80160e6:	f000 fdbd 	bl	8016c64 <floorf>
 80160ea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80160ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 80160f2:	2c00      	cmp	r4, #0
 80160f4:	9b05      	ldr	r3, [sp, #20]
 80160f6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80160fa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80160fe:	edcd 7a00 	vstr	s15, [sp]
 8016102:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016106:	dd4b      	ble.n	80161a0 <__kernel_rem_pio2f+0x1b4>
 8016108:	f10a 3cff 	add.w	ip, sl, #4294967295
 801610c:	aa06      	add	r2, sp, #24
 801610e:	f1c4 0e08 	rsb	lr, r4, #8
 8016112:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016116:	ee17 1a90 	vmov	r1, s15
 801611a:	fa42 f00e 	asr.w	r0, r2, lr
 801611e:	4401      	add	r1, r0
 8016120:	9100      	str	r1, [sp, #0]
 8016122:	fa00 f00e 	lsl.w	r0, r0, lr
 8016126:	a906      	add	r1, sp, #24
 8016128:	1a12      	subs	r2, r2, r0
 801612a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801612e:	f1c4 0007 	rsb	r0, r4, #7
 8016132:	fa42 fb00 	asr.w	fp, r2, r0
 8016136:	f1bb 0f00 	cmp.w	fp, #0
 801613a:	dd43      	ble.n	80161c4 <__kernel_rem_pio2f+0x1d8>
 801613c:	9a00      	ldr	r2, [sp, #0]
 801613e:	f04f 0e00 	mov.w	lr, #0
 8016142:	3201      	adds	r2, #1
 8016144:	9200      	str	r2, [sp, #0]
 8016146:	4670      	mov	r0, lr
 8016148:	45f2      	cmp	sl, lr
 801614a:	dc6c      	bgt.n	8016226 <__kernel_rem_pio2f+0x23a>
 801614c:	2c00      	cmp	r4, #0
 801614e:	dd04      	ble.n	801615a <__kernel_rem_pio2f+0x16e>
 8016150:	2c01      	cmp	r4, #1
 8016152:	d079      	beq.n	8016248 <__kernel_rem_pio2f+0x25c>
 8016154:	2c02      	cmp	r4, #2
 8016156:	f000 8082 	beq.w	801625e <__kernel_rem_pio2f+0x272>
 801615a:	f1bb 0f02 	cmp.w	fp, #2
 801615e:	d131      	bne.n	80161c4 <__kernel_rem_pio2f+0x1d8>
 8016160:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016164:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016168:	b360      	cbz	r0, 80161c4 <__kernel_rem_pio2f+0x1d8>
 801616a:	4620      	mov	r0, r4
 801616c:	f000 fdc2 	bl	8016cf4 <scalbnf>
 8016170:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016174:	e026      	b.n	80161c4 <__kernel_rem_pio2f+0x1d8>
 8016176:	ee60 7a28 	vmul.f32	s15, s0, s17
 801617a:	3a01      	subs	r2, #1
 801617c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016180:	a942      	add	r1, sp, #264	; 0x108
 8016182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016186:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801618a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801618e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016192:	eca0 0a01 	vstmia	r0!, {s0}
 8016196:	ed9c 0a00 	vldr	s0, [ip]
 801619a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801619e:	e796      	b.n	80160ce <__kernel_rem_pio2f+0xe2>
 80161a0:	d107      	bne.n	80161b2 <__kernel_rem_pio2f+0x1c6>
 80161a2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80161a6:	a906      	add	r1, sp, #24
 80161a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80161ac:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80161b0:	e7c1      	b.n	8016136 <__kernel_rem_pio2f+0x14a>
 80161b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161be:	da2f      	bge.n	8016220 <__kernel_rem_pio2f+0x234>
 80161c0:	f04f 0b00 	mov.w	fp, #0
 80161c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80161c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161cc:	f040 8098 	bne.w	8016300 <__kernel_rem_pio2f+0x314>
 80161d0:	f10a 33ff 	add.w	r3, sl, #4294967295
 80161d4:	469c      	mov	ip, r3
 80161d6:	2200      	movs	r2, #0
 80161d8:	45bc      	cmp	ip, r7
 80161da:	da48      	bge.n	801626e <__kernel_rem_pio2f+0x282>
 80161dc:	2a00      	cmp	r2, #0
 80161de:	d05f      	beq.n	80162a0 <__kernel_rem_pio2f+0x2b4>
 80161e0:	aa06      	add	r2, sp, #24
 80161e2:	3c08      	subs	r4, #8
 80161e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80161e8:	2900      	cmp	r1, #0
 80161ea:	d07d      	beq.n	80162e8 <__kernel_rem_pio2f+0x2fc>
 80161ec:	4620      	mov	r0, r4
 80161ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80161f2:	9301      	str	r3, [sp, #4]
 80161f4:	f000 fd7e 	bl	8016cf4 <scalbnf>
 80161f8:	9b01      	ldr	r3, [sp, #4]
 80161fa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80162f8 <__kernel_rem_pio2f+0x30c>
 80161fe:	4619      	mov	r1, r3
 8016200:	2900      	cmp	r1, #0
 8016202:	f280 80af 	bge.w	8016364 <__kernel_rem_pio2f+0x378>
 8016206:	4618      	mov	r0, r3
 8016208:	2400      	movs	r4, #0
 801620a:	2800      	cmp	r0, #0
 801620c:	f2c0 80d0 	blt.w	80163b0 <__kernel_rem_pio2f+0x3c4>
 8016210:	a942      	add	r1, sp, #264	; 0x108
 8016212:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016216:	4a36      	ldr	r2, [pc, #216]	; (80162f0 <__kernel_rem_pio2f+0x304>)
 8016218:	eddf 7a38 	vldr	s15, [pc, #224]	; 80162fc <__kernel_rem_pio2f+0x310>
 801621c:	2100      	movs	r1, #0
 801621e:	e0bb      	b.n	8016398 <__kernel_rem_pio2f+0x3ac>
 8016220:	f04f 0b02 	mov.w	fp, #2
 8016224:	e78a      	b.n	801613c <__kernel_rem_pio2f+0x150>
 8016226:	681a      	ldr	r2, [r3, #0]
 8016228:	b948      	cbnz	r0, 801623e <__kernel_rem_pio2f+0x252>
 801622a:	b11a      	cbz	r2, 8016234 <__kernel_rem_pio2f+0x248>
 801622c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016230:	601a      	str	r2, [r3, #0]
 8016232:	2201      	movs	r2, #1
 8016234:	f10e 0e01 	add.w	lr, lr, #1
 8016238:	3304      	adds	r3, #4
 801623a:	4610      	mov	r0, r2
 801623c:	e784      	b.n	8016148 <__kernel_rem_pio2f+0x15c>
 801623e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016242:	601a      	str	r2, [r3, #0]
 8016244:	4602      	mov	r2, r0
 8016246:	e7f5      	b.n	8016234 <__kernel_rem_pio2f+0x248>
 8016248:	f10a 3cff 	add.w	ip, sl, #4294967295
 801624c:	ab06      	add	r3, sp, #24
 801624e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016256:	aa06      	add	r2, sp, #24
 8016258:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801625c:	e77d      	b.n	801615a <__kernel_rem_pio2f+0x16e>
 801625e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016262:	ab06      	add	r3, sp, #24
 8016264:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801626c:	e7f3      	b.n	8016256 <__kernel_rem_pio2f+0x26a>
 801626e:	a906      	add	r1, sp, #24
 8016270:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016274:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016278:	4302      	orrs	r2, r0
 801627a:	e7ad      	b.n	80161d8 <__kernel_rem_pio2f+0x1ec>
 801627c:	3001      	adds	r0, #1
 801627e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016282:	2a00      	cmp	r2, #0
 8016284:	d0fa      	beq.n	801627c <__kernel_rem_pio2f+0x290>
 8016286:	a91a      	add	r1, sp, #104	; 0x68
 8016288:	eb0a 0208 	add.w	r2, sl, r8
 801628c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016290:	f10a 0301 	add.w	r3, sl, #1
 8016294:	eb0a 0100 	add.w	r1, sl, r0
 8016298:	4299      	cmp	r1, r3
 801629a:	da04      	bge.n	80162a6 <__kernel_rem_pio2f+0x2ba>
 801629c:	468a      	mov	sl, r1
 801629e:	e70e      	b.n	80160be <__kernel_rem_pio2f+0xd2>
 80162a0:	9b04      	ldr	r3, [sp, #16]
 80162a2:	2001      	movs	r0, #1
 80162a4:	e7eb      	b.n	801627e <__kernel_rem_pio2f+0x292>
 80162a6:	9803      	ldr	r0, [sp, #12]
 80162a8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80162ac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80162b0:	9000      	str	r0, [sp, #0]
 80162b2:	ee07 0a90 	vmov	s15, r0
 80162b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162ba:	2000      	movs	r0, #0
 80162bc:	ece2 7a01 	vstmia	r2!, {s15}
 80162c0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80162fc <__kernel_rem_pio2f+0x310>
 80162c4:	4696      	mov	lr, r2
 80162c6:	4548      	cmp	r0, r9
 80162c8:	dd06      	ble.n	80162d8 <__kernel_rem_pio2f+0x2ec>
 80162ca:	a842      	add	r0, sp, #264	; 0x108
 80162cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80162d0:	edc0 7a00 	vstr	s15, [r0]
 80162d4:	3301      	adds	r3, #1
 80162d6:	e7df      	b.n	8016298 <__kernel_rem_pio2f+0x2ac>
 80162d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80162dc:	ed3e 7a01 	vldmdb	lr!, {s14}
 80162e0:	3001      	adds	r0, #1
 80162e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162e6:	e7ee      	b.n	80162c6 <__kernel_rem_pio2f+0x2da>
 80162e8:	3b01      	subs	r3, #1
 80162ea:	e779      	b.n	80161e0 <__kernel_rem_pio2f+0x1f4>
 80162ec:	080174f4 	.word	0x080174f4
 80162f0:	080174c8 	.word	0x080174c8
 80162f4:	43800000 	.word	0x43800000
 80162f8:	3b800000 	.word	0x3b800000
 80162fc:	00000000 	.word	0x00000000
 8016300:	9b02      	ldr	r3, [sp, #8]
 8016302:	eeb0 0a48 	vmov.f32	s0, s16
 8016306:	1b98      	subs	r0, r3, r6
 8016308:	f000 fcf4 	bl	8016cf4 <scalbnf>
 801630c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80162f4 <__kernel_rem_pio2f+0x308>
 8016310:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016318:	db1b      	blt.n	8016352 <__kernel_rem_pio2f+0x366>
 801631a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80162f8 <__kernel_rem_pio2f+0x30c>
 801631e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016322:	aa06      	add	r2, sp, #24
 8016324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016328:	a906      	add	r1, sp, #24
 801632a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801632e:	3408      	adds	r4, #8
 8016330:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016338:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801633c:	ee10 3a10 	vmov	r3, s0
 8016340:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016344:	ee17 2a90 	vmov	r2, s15
 8016348:	f10a 0301 	add.w	r3, sl, #1
 801634c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016350:	e74c      	b.n	80161ec <__kernel_rem_pio2f+0x200>
 8016352:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016356:	aa06      	add	r2, sp, #24
 8016358:	ee10 3a10 	vmov	r3, s0
 801635c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016360:	4653      	mov	r3, sl
 8016362:	e743      	b.n	80161ec <__kernel_rem_pio2f+0x200>
 8016364:	aa42      	add	r2, sp, #264	; 0x108
 8016366:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801636a:	aa06      	add	r2, sp, #24
 801636c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016370:	9201      	str	r2, [sp, #4]
 8016372:	ee07 2a90 	vmov	s15, r2
 8016376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801637a:	3901      	subs	r1, #1
 801637c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016380:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016384:	edc0 7a00 	vstr	s15, [r0]
 8016388:	e73a      	b.n	8016200 <__kernel_rem_pio2f+0x214>
 801638a:	ecf2 6a01 	vldmia	r2!, {s13}
 801638e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016392:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016396:	3101      	adds	r1, #1
 8016398:	42b9      	cmp	r1, r7
 801639a:	dc01      	bgt.n	80163a0 <__kernel_rem_pio2f+0x3b4>
 801639c:	428c      	cmp	r4, r1
 801639e:	daf4      	bge.n	801638a <__kernel_rem_pio2f+0x39e>
 80163a0:	aa56      	add	r2, sp, #344	; 0x158
 80163a2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80163a6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80163aa:	3801      	subs	r0, #1
 80163ac:	3401      	adds	r4, #1
 80163ae:	e72c      	b.n	801620a <__kernel_rem_pio2f+0x21e>
 80163b0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80163b2:	2a02      	cmp	r2, #2
 80163b4:	dc0a      	bgt.n	80163cc <__kernel_rem_pio2f+0x3e0>
 80163b6:	2a00      	cmp	r2, #0
 80163b8:	dc61      	bgt.n	801647e <__kernel_rem_pio2f+0x492>
 80163ba:	d03c      	beq.n	8016436 <__kernel_rem_pio2f+0x44a>
 80163bc:	9b00      	ldr	r3, [sp, #0]
 80163be:	f003 0007 	and.w	r0, r3, #7
 80163c2:	b057      	add	sp, #348	; 0x15c
 80163c4:	ecbd 8b04 	vpop	{d8-d9}
 80163c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163cc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80163ce:	2a03      	cmp	r2, #3
 80163d0:	d1f4      	bne.n	80163bc <__kernel_rem_pio2f+0x3d0>
 80163d2:	aa2e      	add	r2, sp, #184	; 0xb8
 80163d4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80163d8:	4608      	mov	r0, r1
 80163da:	461c      	mov	r4, r3
 80163dc:	2c00      	cmp	r4, #0
 80163de:	f1a0 0004 	sub.w	r0, r0, #4
 80163e2:	dc59      	bgt.n	8016498 <__kernel_rem_pio2f+0x4ac>
 80163e4:	4618      	mov	r0, r3
 80163e6:	2801      	cmp	r0, #1
 80163e8:	f1a1 0104 	sub.w	r1, r1, #4
 80163ec:	dc64      	bgt.n	80164b8 <__kernel_rem_pio2f+0x4cc>
 80163ee:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80162fc <__kernel_rem_pio2f+0x310>
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	dc70      	bgt.n	80164d8 <__kernel_rem_pio2f+0x4ec>
 80163f6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80163fa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80163fe:	f1bb 0f00 	cmp.w	fp, #0
 8016402:	d172      	bne.n	80164ea <__kernel_rem_pio2f+0x4fe>
 8016404:	edc5 6a00 	vstr	s13, [r5]
 8016408:	ed85 7a01 	vstr	s14, [r5, #4]
 801640c:	edc5 7a02 	vstr	s15, [r5, #8]
 8016410:	e7d4      	b.n	80163bc <__kernel_rem_pio2f+0x3d0>
 8016412:	aa2e      	add	r2, sp, #184	; 0xb8
 8016414:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016418:	ed91 7a00 	vldr	s14, [r1]
 801641c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016420:	3b01      	subs	r3, #1
 8016422:	2b00      	cmp	r3, #0
 8016424:	daf5      	bge.n	8016412 <__kernel_rem_pio2f+0x426>
 8016426:	f1bb 0f00 	cmp.w	fp, #0
 801642a:	d001      	beq.n	8016430 <__kernel_rem_pio2f+0x444>
 801642c:	eef1 7a67 	vneg.f32	s15, s15
 8016430:	edc5 7a00 	vstr	s15, [r5]
 8016434:	e7c2      	b.n	80163bc <__kernel_rem_pio2f+0x3d0>
 8016436:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80162fc <__kernel_rem_pio2f+0x310>
 801643a:	e7f2      	b.n	8016422 <__kernel_rem_pio2f+0x436>
 801643c:	aa2e      	add	r2, sp, #184	; 0xb8
 801643e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016442:	edd0 7a00 	vldr	s15, [r0]
 8016446:	ee37 7a27 	vadd.f32	s14, s14, s15
 801644a:	3901      	subs	r1, #1
 801644c:	2900      	cmp	r1, #0
 801644e:	daf5      	bge.n	801643c <__kernel_rem_pio2f+0x450>
 8016450:	f1bb 0f00 	cmp.w	fp, #0
 8016454:	d017      	beq.n	8016486 <__kernel_rem_pio2f+0x49a>
 8016456:	eef1 7a47 	vneg.f32	s15, s14
 801645a:	edc5 7a00 	vstr	s15, [r5]
 801645e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016466:	a82f      	add	r0, sp, #188	; 0xbc
 8016468:	2101      	movs	r1, #1
 801646a:	428b      	cmp	r3, r1
 801646c:	da0e      	bge.n	801648c <__kernel_rem_pio2f+0x4a0>
 801646e:	f1bb 0f00 	cmp.w	fp, #0
 8016472:	d001      	beq.n	8016478 <__kernel_rem_pio2f+0x48c>
 8016474:	eef1 7a67 	vneg.f32	s15, s15
 8016478:	edc5 7a01 	vstr	s15, [r5, #4]
 801647c:	e79e      	b.n	80163bc <__kernel_rem_pio2f+0x3d0>
 801647e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80162fc <__kernel_rem_pio2f+0x310>
 8016482:	4619      	mov	r1, r3
 8016484:	e7e2      	b.n	801644c <__kernel_rem_pio2f+0x460>
 8016486:	eef0 7a47 	vmov.f32	s15, s14
 801648a:	e7e6      	b.n	801645a <__kernel_rem_pio2f+0x46e>
 801648c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016490:	3101      	adds	r1, #1
 8016492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016496:	e7e8      	b.n	801646a <__kernel_rem_pio2f+0x47e>
 8016498:	edd0 7a00 	vldr	s15, [r0]
 801649c:	edd0 6a01 	vldr	s13, [r0, #4]
 80164a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80164a4:	3c01      	subs	r4, #1
 80164a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164aa:	ed80 7a00 	vstr	s14, [r0]
 80164ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80164b6:	e791      	b.n	80163dc <__kernel_rem_pio2f+0x3f0>
 80164b8:	edd1 7a00 	vldr	s15, [r1]
 80164bc:	edd1 6a01 	vldr	s13, [r1, #4]
 80164c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80164c4:	3801      	subs	r0, #1
 80164c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164ca:	ed81 7a00 	vstr	s14, [r1]
 80164ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164d2:	edc1 7a01 	vstr	s15, [r1, #4]
 80164d6:	e786      	b.n	80163e6 <__kernel_rem_pio2f+0x3fa>
 80164d8:	aa2e      	add	r2, sp, #184	; 0xb8
 80164da:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80164de:	ed91 7a00 	vldr	s14, [r1]
 80164e2:	3b01      	subs	r3, #1
 80164e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164e8:	e783      	b.n	80163f2 <__kernel_rem_pio2f+0x406>
 80164ea:	eef1 6a66 	vneg.f32	s13, s13
 80164ee:	eeb1 7a47 	vneg.f32	s14, s14
 80164f2:	edc5 6a00 	vstr	s13, [r5]
 80164f6:	ed85 7a01 	vstr	s14, [r5, #4]
 80164fa:	eef1 7a67 	vneg.f32	s15, s15
 80164fe:	e785      	b.n	801640c <__kernel_rem_pio2f+0x420>

08016500 <__kernel_sinf>:
 8016500:	ee10 3a10 	vmov	r3, s0
 8016504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016508:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801650c:	da04      	bge.n	8016518 <__kernel_sinf+0x18>
 801650e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016512:	ee17 3a90 	vmov	r3, s15
 8016516:	b35b      	cbz	r3, 8016570 <__kernel_sinf+0x70>
 8016518:	ee20 7a00 	vmul.f32	s14, s0, s0
 801651c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016574 <__kernel_sinf+0x74>
 8016520:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016578 <__kernel_sinf+0x78>
 8016524:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016528:	eddf 7a14 	vldr	s15, [pc, #80]	; 801657c <__kernel_sinf+0x7c>
 801652c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016530:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016580 <__kernel_sinf+0x80>
 8016534:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016538:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016584 <__kernel_sinf+0x84>
 801653c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016540:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016544:	b930      	cbnz	r0, 8016554 <__kernel_sinf+0x54>
 8016546:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016588 <__kernel_sinf+0x88>
 801654a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801654e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016552:	4770      	bx	lr
 8016554:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016558:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801655c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016560:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016564:	eddf 7a09 	vldr	s15, [pc, #36]	; 801658c <__kernel_sinf+0x8c>
 8016568:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801656c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016570:	4770      	bx	lr
 8016572:	bf00      	nop
 8016574:	2f2ec9d3 	.word	0x2f2ec9d3
 8016578:	b2d72f34 	.word	0xb2d72f34
 801657c:	3638ef1b 	.word	0x3638ef1b
 8016580:	b9500d01 	.word	0xb9500d01
 8016584:	3c088889 	.word	0x3c088889
 8016588:	be2aaaab 	.word	0xbe2aaaab
 801658c:	3e2aaaab 	.word	0x3e2aaaab

08016590 <__kernel_tanf>:
 8016590:	b508      	push	{r3, lr}
 8016592:	ee10 3a10 	vmov	r3, s0
 8016596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801659a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801659e:	eef0 7a40 	vmov.f32	s15, s0
 80165a2:	da17      	bge.n	80165d4 <__kernel_tanf+0x44>
 80165a4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80165a8:	ee17 1a10 	vmov	r1, s14
 80165ac:	bb41      	cbnz	r1, 8016600 <__kernel_tanf+0x70>
 80165ae:	1c43      	adds	r3, r0, #1
 80165b0:	4313      	orrs	r3, r2
 80165b2:	d108      	bne.n	80165c6 <__kernel_tanf+0x36>
 80165b4:	f000 fb4e 	bl	8016c54 <fabsf>
 80165b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165c0:	eeb0 0a67 	vmov.f32	s0, s15
 80165c4:	bd08      	pop	{r3, pc}
 80165c6:	2801      	cmp	r0, #1
 80165c8:	d0fa      	beq.n	80165c0 <__kernel_tanf+0x30>
 80165ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80165ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165d2:	e7f5      	b.n	80165c0 <__kernel_tanf+0x30>
 80165d4:	494d      	ldr	r1, [pc, #308]	; (801670c <__kernel_tanf+0x17c>)
 80165d6:	428a      	cmp	r2, r1
 80165d8:	db12      	blt.n	8016600 <__kernel_tanf+0x70>
 80165da:	2b00      	cmp	r3, #0
 80165dc:	bfb8      	it	lt
 80165de:	eef1 7a40 	vneglt.f32	s15, s0
 80165e2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016710 <__kernel_tanf+0x180>
 80165e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80165ea:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016714 <__kernel_tanf+0x184>
 80165ee:	bfb8      	it	lt
 80165f0:	eef1 0a60 	vneglt.f32	s1, s1
 80165f4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80165f8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80165fc:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016718 <__kernel_tanf+0x188>
 8016600:	eddf 5a46 	vldr	s11, [pc, #280]	; 801671c <__kernel_tanf+0x18c>
 8016604:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016720 <__kernel_tanf+0x190>
 8016608:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016724 <__kernel_tanf+0x194>
 801660c:	493f      	ldr	r1, [pc, #252]	; (801670c <__kernel_tanf+0x17c>)
 801660e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016612:	428a      	cmp	r2, r1
 8016614:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016618:	eea7 6a25 	vfma.f32	s12, s14, s11
 801661c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016728 <__kernel_tanf+0x198>
 8016620:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016624:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801672c <__kernel_tanf+0x19c>
 8016628:	eea5 6a87 	vfma.f32	s12, s11, s14
 801662c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016730 <__kernel_tanf+0x1a0>
 8016630:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016634:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016734 <__kernel_tanf+0x1a4>
 8016638:	eea5 6a87 	vfma.f32	s12, s11, s14
 801663c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016738 <__kernel_tanf+0x1a8>
 8016640:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016644:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801673c <__kernel_tanf+0x1ac>
 8016648:	eea5 5a87 	vfma.f32	s10, s11, s14
 801664c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016740 <__kernel_tanf+0x1b0>
 8016650:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016654:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016744 <__kernel_tanf+0x1b4>
 8016658:	eea5 5a87 	vfma.f32	s10, s11, s14
 801665c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016748 <__kernel_tanf+0x1b8>
 8016660:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016664:	eeb0 7a65 	vmov.f32	s14, s11
 8016668:	eea7 6a26 	vfma.f32	s12, s14, s13
 801666c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016670:	eeb0 7a46 	vmov.f32	s14, s12
 8016674:	eeb0 6a60 	vmov.f32	s12, s1
 8016678:	eea7 6a25 	vfma.f32	s12, s14, s11
 801667c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801674c <__kernel_tanf+0x1bc>
 8016680:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016684:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016688:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801668c:	db1d      	blt.n	80166ca <__kernel_tanf+0x13a>
 801668e:	ee06 0a90 	vmov	s13, r0
 8016692:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016696:	ee27 6a07 	vmul.f32	s12, s14, s14
 801669a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801669e:	179b      	asrs	r3, r3, #30
 80166a0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80166a4:	f003 0302 	and.w	r3, r3, #2
 80166a8:	f1c3 0301 	rsb	r3, r3, #1
 80166ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80166b0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80166b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80166b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80166bc:	ee07 3a90 	vmov	s15, r3
 80166c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80166c8:	e77a      	b.n	80165c0 <__kernel_tanf+0x30>
 80166ca:	2801      	cmp	r0, #1
 80166cc:	d01b      	beq.n	8016706 <__kernel_tanf+0x176>
 80166ce:	4b20      	ldr	r3, [pc, #128]	; (8016750 <__kernel_tanf+0x1c0>)
 80166d0:	ee17 2a10 	vmov	r2, s14
 80166d4:	401a      	ands	r2, r3
 80166d6:	ee06 2a10 	vmov	s12, r2
 80166da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80166de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80166e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80166e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80166ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166ee:	ee16 2a90 	vmov	r2, s13
 80166f2:	4013      	ands	r3, r2
 80166f4:	ee07 3a90 	vmov	s15, r3
 80166f8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80166fc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016700:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016704:	e75c      	b.n	80165c0 <__kernel_tanf+0x30>
 8016706:	eef0 7a47 	vmov.f32	s15, s14
 801670a:	e759      	b.n	80165c0 <__kernel_tanf+0x30>
 801670c:	3f2ca140 	.word	0x3f2ca140
 8016710:	3f490fda 	.word	0x3f490fda
 8016714:	33222168 	.word	0x33222168
 8016718:	00000000 	.word	0x00000000
 801671c:	b79bae5f 	.word	0xb79bae5f
 8016720:	38a3f445 	.word	0x38a3f445
 8016724:	37d95384 	.word	0x37d95384
 8016728:	3a1a26c8 	.word	0x3a1a26c8
 801672c:	3b6b6916 	.word	0x3b6b6916
 8016730:	3cb327a4 	.word	0x3cb327a4
 8016734:	3e088889 	.word	0x3e088889
 8016738:	3895c07a 	.word	0x3895c07a
 801673c:	398137b9 	.word	0x398137b9
 8016740:	3abede48 	.word	0x3abede48
 8016744:	3c11371f 	.word	0x3c11371f
 8016748:	3d5d0dd1 	.word	0x3d5d0dd1
 801674c:	3eaaaaab 	.word	0x3eaaaaab
 8016750:	fffff000 	.word	0xfffff000
 8016754:	00000000 	.word	0x00000000

08016758 <atan>:
 8016758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675c:	ec55 4b10 	vmov	r4, r5, d0
 8016760:	4bc3      	ldr	r3, [pc, #780]	; (8016a70 <atan+0x318>)
 8016762:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016766:	429e      	cmp	r6, r3
 8016768:	46ab      	mov	fp, r5
 801676a:	dd18      	ble.n	801679e <atan+0x46>
 801676c:	4bc1      	ldr	r3, [pc, #772]	; (8016a74 <atan+0x31c>)
 801676e:	429e      	cmp	r6, r3
 8016770:	dc01      	bgt.n	8016776 <atan+0x1e>
 8016772:	d109      	bne.n	8016788 <atan+0x30>
 8016774:	b144      	cbz	r4, 8016788 <atan+0x30>
 8016776:	4622      	mov	r2, r4
 8016778:	462b      	mov	r3, r5
 801677a:	4620      	mov	r0, r4
 801677c:	4629      	mov	r1, r5
 801677e:	f7e9 fd29 	bl	80001d4 <__adddf3>
 8016782:	4604      	mov	r4, r0
 8016784:	460d      	mov	r5, r1
 8016786:	e006      	b.n	8016796 <atan+0x3e>
 8016788:	f1bb 0f00 	cmp.w	fp, #0
 801678c:	f300 8131 	bgt.w	80169f2 <atan+0x29a>
 8016790:	a59b      	add	r5, pc, #620	; (adr r5, 8016a00 <atan+0x2a8>)
 8016792:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016796:	ec45 4b10 	vmov	d0, r4, r5
 801679a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679e:	4bb6      	ldr	r3, [pc, #728]	; (8016a78 <atan+0x320>)
 80167a0:	429e      	cmp	r6, r3
 80167a2:	dc14      	bgt.n	80167ce <atan+0x76>
 80167a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80167a8:	429e      	cmp	r6, r3
 80167aa:	dc0d      	bgt.n	80167c8 <atan+0x70>
 80167ac:	a396      	add	r3, pc, #600	; (adr r3, 8016a08 <atan+0x2b0>)
 80167ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b2:	ee10 0a10 	vmov	r0, s0
 80167b6:	4629      	mov	r1, r5
 80167b8:	f7e9 fd0c 	bl	80001d4 <__adddf3>
 80167bc:	4baf      	ldr	r3, [pc, #700]	; (8016a7c <atan+0x324>)
 80167be:	2200      	movs	r2, #0
 80167c0:	f7ea f94e 	bl	8000a60 <__aeabi_dcmpgt>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d1e6      	bne.n	8016796 <atan+0x3e>
 80167c8:	f04f 3aff 	mov.w	sl, #4294967295
 80167cc:	e02b      	b.n	8016826 <atan+0xce>
 80167ce:	f000 f963 	bl	8016a98 <fabs>
 80167d2:	4bab      	ldr	r3, [pc, #684]	; (8016a80 <atan+0x328>)
 80167d4:	429e      	cmp	r6, r3
 80167d6:	ec55 4b10 	vmov	r4, r5, d0
 80167da:	f300 80bf 	bgt.w	801695c <atan+0x204>
 80167de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80167e2:	429e      	cmp	r6, r3
 80167e4:	f300 80a0 	bgt.w	8016928 <atan+0x1d0>
 80167e8:	ee10 2a10 	vmov	r2, s0
 80167ec:	ee10 0a10 	vmov	r0, s0
 80167f0:	462b      	mov	r3, r5
 80167f2:	4629      	mov	r1, r5
 80167f4:	f7e9 fcee 	bl	80001d4 <__adddf3>
 80167f8:	4ba0      	ldr	r3, [pc, #640]	; (8016a7c <atan+0x324>)
 80167fa:	2200      	movs	r2, #0
 80167fc:	f7e9 fce8 	bl	80001d0 <__aeabi_dsub>
 8016800:	2200      	movs	r2, #0
 8016802:	4606      	mov	r6, r0
 8016804:	460f      	mov	r7, r1
 8016806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801680a:	4620      	mov	r0, r4
 801680c:	4629      	mov	r1, r5
 801680e:	f7e9 fce1 	bl	80001d4 <__adddf3>
 8016812:	4602      	mov	r2, r0
 8016814:	460b      	mov	r3, r1
 8016816:	4630      	mov	r0, r6
 8016818:	4639      	mov	r1, r7
 801681a:	f7e9 ffbb 	bl	8000794 <__aeabi_ddiv>
 801681e:	f04f 0a00 	mov.w	sl, #0
 8016822:	4604      	mov	r4, r0
 8016824:	460d      	mov	r5, r1
 8016826:	4622      	mov	r2, r4
 8016828:	462b      	mov	r3, r5
 801682a:	4620      	mov	r0, r4
 801682c:	4629      	mov	r1, r5
 801682e:	f7e9 fe87 	bl	8000540 <__aeabi_dmul>
 8016832:	4602      	mov	r2, r0
 8016834:	460b      	mov	r3, r1
 8016836:	4680      	mov	r8, r0
 8016838:	4689      	mov	r9, r1
 801683a:	f7e9 fe81 	bl	8000540 <__aeabi_dmul>
 801683e:	a374      	add	r3, pc, #464	; (adr r3, 8016a10 <atan+0x2b8>)
 8016840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016844:	4606      	mov	r6, r0
 8016846:	460f      	mov	r7, r1
 8016848:	f7e9 fe7a 	bl	8000540 <__aeabi_dmul>
 801684c:	a372      	add	r3, pc, #456	; (adr r3, 8016a18 <atan+0x2c0>)
 801684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016852:	f7e9 fcbf 	bl	80001d4 <__adddf3>
 8016856:	4632      	mov	r2, r6
 8016858:	463b      	mov	r3, r7
 801685a:	f7e9 fe71 	bl	8000540 <__aeabi_dmul>
 801685e:	a370      	add	r3, pc, #448	; (adr r3, 8016a20 <atan+0x2c8>)
 8016860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016864:	f7e9 fcb6 	bl	80001d4 <__adddf3>
 8016868:	4632      	mov	r2, r6
 801686a:	463b      	mov	r3, r7
 801686c:	f7e9 fe68 	bl	8000540 <__aeabi_dmul>
 8016870:	a36d      	add	r3, pc, #436	; (adr r3, 8016a28 <atan+0x2d0>)
 8016872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016876:	f7e9 fcad 	bl	80001d4 <__adddf3>
 801687a:	4632      	mov	r2, r6
 801687c:	463b      	mov	r3, r7
 801687e:	f7e9 fe5f 	bl	8000540 <__aeabi_dmul>
 8016882:	a36b      	add	r3, pc, #428	; (adr r3, 8016a30 <atan+0x2d8>)
 8016884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016888:	f7e9 fca4 	bl	80001d4 <__adddf3>
 801688c:	4632      	mov	r2, r6
 801688e:	463b      	mov	r3, r7
 8016890:	f7e9 fe56 	bl	8000540 <__aeabi_dmul>
 8016894:	a368      	add	r3, pc, #416	; (adr r3, 8016a38 <atan+0x2e0>)
 8016896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689a:	f7e9 fc9b 	bl	80001d4 <__adddf3>
 801689e:	4642      	mov	r2, r8
 80168a0:	464b      	mov	r3, r9
 80168a2:	f7e9 fe4d 	bl	8000540 <__aeabi_dmul>
 80168a6:	a366      	add	r3, pc, #408	; (adr r3, 8016a40 <atan+0x2e8>)
 80168a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ac:	4680      	mov	r8, r0
 80168ae:	4689      	mov	r9, r1
 80168b0:	4630      	mov	r0, r6
 80168b2:	4639      	mov	r1, r7
 80168b4:	f7e9 fe44 	bl	8000540 <__aeabi_dmul>
 80168b8:	a363      	add	r3, pc, #396	; (adr r3, 8016a48 <atan+0x2f0>)
 80168ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168be:	f7e9 fc87 	bl	80001d0 <__aeabi_dsub>
 80168c2:	4632      	mov	r2, r6
 80168c4:	463b      	mov	r3, r7
 80168c6:	f7e9 fe3b 	bl	8000540 <__aeabi_dmul>
 80168ca:	a361      	add	r3, pc, #388	; (adr r3, 8016a50 <atan+0x2f8>)
 80168cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d0:	f7e9 fc7e 	bl	80001d0 <__aeabi_dsub>
 80168d4:	4632      	mov	r2, r6
 80168d6:	463b      	mov	r3, r7
 80168d8:	f7e9 fe32 	bl	8000540 <__aeabi_dmul>
 80168dc:	a35e      	add	r3, pc, #376	; (adr r3, 8016a58 <atan+0x300>)
 80168de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e2:	f7e9 fc75 	bl	80001d0 <__aeabi_dsub>
 80168e6:	4632      	mov	r2, r6
 80168e8:	463b      	mov	r3, r7
 80168ea:	f7e9 fe29 	bl	8000540 <__aeabi_dmul>
 80168ee:	a35c      	add	r3, pc, #368	; (adr r3, 8016a60 <atan+0x308>)
 80168f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f4:	f7e9 fc6c 	bl	80001d0 <__aeabi_dsub>
 80168f8:	4632      	mov	r2, r6
 80168fa:	463b      	mov	r3, r7
 80168fc:	f7e9 fe20 	bl	8000540 <__aeabi_dmul>
 8016900:	4602      	mov	r2, r0
 8016902:	460b      	mov	r3, r1
 8016904:	4640      	mov	r0, r8
 8016906:	4649      	mov	r1, r9
 8016908:	f7e9 fc64 	bl	80001d4 <__adddf3>
 801690c:	4622      	mov	r2, r4
 801690e:	462b      	mov	r3, r5
 8016910:	f7e9 fe16 	bl	8000540 <__aeabi_dmul>
 8016914:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016918:	4602      	mov	r2, r0
 801691a:	460b      	mov	r3, r1
 801691c:	d14b      	bne.n	80169b6 <atan+0x25e>
 801691e:	4620      	mov	r0, r4
 8016920:	4629      	mov	r1, r5
 8016922:	f7e9 fc55 	bl	80001d0 <__aeabi_dsub>
 8016926:	e72c      	b.n	8016782 <atan+0x2a>
 8016928:	ee10 0a10 	vmov	r0, s0
 801692c:	4b53      	ldr	r3, [pc, #332]	; (8016a7c <atan+0x324>)
 801692e:	2200      	movs	r2, #0
 8016930:	4629      	mov	r1, r5
 8016932:	f7e9 fc4d 	bl	80001d0 <__aeabi_dsub>
 8016936:	4b51      	ldr	r3, [pc, #324]	; (8016a7c <atan+0x324>)
 8016938:	4606      	mov	r6, r0
 801693a:	460f      	mov	r7, r1
 801693c:	2200      	movs	r2, #0
 801693e:	4620      	mov	r0, r4
 8016940:	4629      	mov	r1, r5
 8016942:	f7e9 fc47 	bl	80001d4 <__adddf3>
 8016946:	4602      	mov	r2, r0
 8016948:	460b      	mov	r3, r1
 801694a:	4630      	mov	r0, r6
 801694c:	4639      	mov	r1, r7
 801694e:	f7e9 ff21 	bl	8000794 <__aeabi_ddiv>
 8016952:	f04f 0a01 	mov.w	sl, #1
 8016956:	4604      	mov	r4, r0
 8016958:	460d      	mov	r5, r1
 801695a:	e764      	b.n	8016826 <atan+0xce>
 801695c:	4b49      	ldr	r3, [pc, #292]	; (8016a84 <atan+0x32c>)
 801695e:	429e      	cmp	r6, r3
 8016960:	da1d      	bge.n	801699e <atan+0x246>
 8016962:	ee10 0a10 	vmov	r0, s0
 8016966:	4b48      	ldr	r3, [pc, #288]	; (8016a88 <atan+0x330>)
 8016968:	2200      	movs	r2, #0
 801696a:	4629      	mov	r1, r5
 801696c:	f7e9 fc30 	bl	80001d0 <__aeabi_dsub>
 8016970:	4b45      	ldr	r3, [pc, #276]	; (8016a88 <atan+0x330>)
 8016972:	4606      	mov	r6, r0
 8016974:	460f      	mov	r7, r1
 8016976:	2200      	movs	r2, #0
 8016978:	4620      	mov	r0, r4
 801697a:	4629      	mov	r1, r5
 801697c:	f7e9 fde0 	bl	8000540 <__aeabi_dmul>
 8016980:	4b3e      	ldr	r3, [pc, #248]	; (8016a7c <atan+0x324>)
 8016982:	2200      	movs	r2, #0
 8016984:	f7e9 fc26 	bl	80001d4 <__adddf3>
 8016988:	4602      	mov	r2, r0
 801698a:	460b      	mov	r3, r1
 801698c:	4630      	mov	r0, r6
 801698e:	4639      	mov	r1, r7
 8016990:	f7e9 ff00 	bl	8000794 <__aeabi_ddiv>
 8016994:	f04f 0a02 	mov.w	sl, #2
 8016998:	4604      	mov	r4, r0
 801699a:	460d      	mov	r5, r1
 801699c:	e743      	b.n	8016826 <atan+0xce>
 801699e:	462b      	mov	r3, r5
 80169a0:	ee10 2a10 	vmov	r2, s0
 80169a4:	4939      	ldr	r1, [pc, #228]	; (8016a8c <atan+0x334>)
 80169a6:	2000      	movs	r0, #0
 80169a8:	f7e9 fef4 	bl	8000794 <__aeabi_ddiv>
 80169ac:	f04f 0a03 	mov.w	sl, #3
 80169b0:	4604      	mov	r4, r0
 80169b2:	460d      	mov	r5, r1
 80169b4:	e737      	b.n	8016826 <atan+0xce>
 80169b6:	4b36      	ldr	r3, [pc, #216]	; (8016a90 <atan+0x338>)
 80169b8:	4e36      	ldr	r6, [pc, #216]	; (8016a94 <atan+0x33c>)
 80169ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80169be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80169c2:	e9da 2300 	ldrd	r2, r3, [sl]
 80169c6:	f7e9 fc03 	bl	80001d0 <__aeabi_dsub>
 80169ca:	4622      	mov	r2, r4
 80169cc:	462b      	mov	r3, r5
 80169ce:	f7e9 fbff 	bl	80001d0 <__aeabi_dsub>
 80169d2:	4602      	mov	r2, r0
 80169d4:	460b      	mov	r3, r1
 80169d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80169da:	f7e9 fbf9 	bl	80001d0 <__aeabi_dsub>
 80169de:	f1bb 0f00 	cmp.w	fp, #0
 80169e2:	4604      	mov	r4, r0
 80169e4:	460d      	mov	r5, r1
 80169e6:	f6bf aed6 	bge.w	8016796 <atan+0x3e>
 80169ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169ee:	461d      	mov	r5, r3
 80169f0:	e6d1      	b.n	8016796 <atan+0x3e>
 80169f2:	a51d      	add	r5, pc, #116	; (adr r5, 8016a68 <atan+0x310>)
 80169f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80169f8:	e6cd      	b.n	8016796 <atan+0x3e>
 80169fa:	bf00      	nop
 80169fc:	f3af 8000 	nop.w
 8016a00:	54442d18 	.word	0x54442d18
 8016a04:	bff921fb 	.word	0xbff921fb
 8016a08:	8800759c 	.word	0x8800759c
 8016a0c:	7e37e43c 	.word	0x7e37e43c
 8016a10:	e322da11 	.word	0xe322da11
 8016a14:	3f90ad3a 	.word	0x3f90ad3a
 8016a18:	24760deb 	.word	0x24760deb
 8016a1c:	3fa97b4b 	.word	0x3fa97b4b
 8016a20:	a0d03d51 	.word	0xa0d03d51
 8016a24:	3fb10d66 	.word	0x3fb10d66
 8016a28:	c54c206e 	.word	0xc54c206e
 8016a2c:	3fb745cd 	.word	0x3fb745cd
 8016a30:	920083ff 	.word	0x920083ff
 8016a34:	3fc24924 	.word	0x3fc24924
 8016a38:	5555550d 	.word	0x5555550d
 8016a3c:	3fd55555 	.word	0x3fd55555
 8016a40:	2c6a6c2f 	.word	0x2c6a6c2f
 8016a44:	bfa2b444 	.word	0xbfa2b444
 8016a48:	52defd9a 	.word	0x52defd9a
 8016a4c:	3fadde2d 	.word	0x3fadde2d
 8016a50:	af749a6d 	.word	0xaf749a6d
 8016a54:	3fb3b0f2 	.word	0x3fb3b0f2
 8016a58:	fe231671 	.word	0xfe231671
 8016a5c:	3fbc71c6 	.word	0x3fbc71c6
 8016a60:	9998ebc4 	.word	0x9998ebc4
 8016a64:	3fc99999 	.word	0x3fc99999
 8016a68:	54442d18 	.word	0x54442d18
 8016a6c:	3ff921fb 	.word	0x3ff921fb
 8016a70:	440fffff 	.word	0x440fffff
 8016a74:	7ff00000 	.word	0x7ff00000
 8016a78:	3fdbffff 	.word	0x3fdbffff
 8016a7c:	3ff00000 	.word	0x3ff00000
 8016a80:	3ff2ffff 	.word	0x3ff2ffff
 8016a84:	40038000 	.word	0x40038000
 8016a88:	3ff80000 	.word	0x3ff80000
 8016a8c:	bff00000 	.word	0xbff00000
 8016a90:	08017520 	.word	0x08017520
 8016a94:	08017500 	.word	0x08017500

08016a98 <fabs>:
 8016a98:	ec51 0b10 	vmov	r0, r1, d0
 8016a9c:	ee10 2a10 	vmov	r2, s0
 8016aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016aa4:	ec43 2b10 	vmov	d0, r2, r3
 8016aa8:	4770      	bx	lr
	...

08016aac <atanf>:
 8016aac:	b538      	push	{r3, r4, r5, lr}
 8016aae:	ee10 5a10 	vmov	r5, s0
 8016ab2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016ab6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016aba:	eef0 7a40 	vmov.f32	s15, s0
 8016abe:	db10      	blt.n	8016ae2 <atanf+0x36>
 8016ac0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016ac4:	dd04      	ble.n	8016ad0 <atanf+0x24>
 8016ac6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016aca:	eeb0 0a67 	vmov.f32	s0, s15
 8016ace:	bd38      	pop	{r3, r4, r5, pc}
 8016ad0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016c08 <atanf+0x15c>
 8016ad4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8016c0c <atanf+0x160>
 8016ad8:	2d00      	cmp	r5, #0
 8016ada:	bfd8      	it	le
 8016adc:	eef0 7a40 	vmovle.f32	s15, s0
 8016ae0:	e7f3      	b.n	8016aca <atanf+0x1e>
 8016ae2:	4b4b      	ldr	r3, [pc, #300]	; (8016c10 <atanf+0x164>)
 8016ae4:	429c      	cmp	r4, r3
 8016ae6:	dc10      	bgt.n	8016b0a <atanf+0x5e>
 8016ae8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016aec:	da0a      	bge.n	8016b04 <atanf+0x58>
 8016aee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016c14 <atanf+0x168>
 8016af2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016afa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b02:	dce2      	bgt.n	8016aca <atanf+0x1e>
 8016b04:	f04f 33ff 	mov.w	r3, #4294967295
 8016b08:	e013      	b.n	8016b32 <atanf+0x86>
 8016b0a:	f000 f8a3 	bl	8016c54 <fabsf>
 8016b0e:	4b42      	ldr	r3, [pc, #264]	; (8016c18 <atanf+0x16c>)
 8016b10:	429c      	cmp	r4, r3
 8016b12:	dc4f      	bgt.n	8016bb4 <atanf+0x108>
 8016b14:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016b18:	429c      	cmp	r4, r3
 8016b1a:	dc41      	bgt.n	8016ba0 <atanf+0xf4>
 8016b1c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016b20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b24:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016b28:	2300      	movs	r3, #0
 8016b2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016b2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b32:	1c5a      	adds	r2, r3, #1
 8016b34:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016b38:	eddf 5a38 	vldr	s11, [pc, #224]	; 8016c1c <atanf+0x170>
 8016b3c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8016c20 <atanf+0x174>
 8016b40:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8016c24 <atanf+0x178>
 8016b44:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8016c28 <atanf+0x17c>
 8016b48:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016b4c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b50:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016c2c <atanf+0x180>
 8016b54:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b58:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016c30 <atanf+0x184>
 8016b5c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b60:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016c34 <atanf+0x188>
 8016b64:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b68:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8016c38 <atanf+0x18c>
 8016b6c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b70:	eddf 5a32 	vldr	s11, [pc, #200]	; 8016c3c <atanf+0x190>
 8016b74:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016b78:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8016c40 <atanf+0x194>
 8016b7c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016b80:	eddf 5a30 	vldr	s11, [pc, #192]	; 8016c44 <atanf+0x198>
 8016b84:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016b88:	eea5 0a87 	vfma.f32	s0, s11, s14
 8016b8c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016b90:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016b94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016b98:	d121      	bne.n	8016bde <atanf+0x132>
 8016b9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016b9e:	e794      	b.n	8016aca <atanf+0x1e>
 8016ba0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016ba4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016ba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016bac:	2301      	movs	r3, #1
 8016bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016bb2:	e7be      	b.n	8016b32 <atanf+0x86>
 8016bb4:	4b24      	ldr	r3, [pc, #144]	; (8016c48 <atanf+0x19c>)
 8016bb6:	429c      	cmp	r4, r3
 8016bb8:	dc0b      	bgt.n	8016bd2 <atanf+0x126>
 8016bba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016bc6:	2302      	movs	r3, #2
 8016bc8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016bd0:	e7af      	b.n	8016b32 <atanf+0x86>
 8016bd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016bd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016bda:	2303      	movs	r3, #3
 8016bdc:	e7a9      	b.n	8016b32 <atanf+0x86>
 8016bde:	4a1b      	ldr	r2, [pc, #108]	; (8016c4c <atanf+0x1a0>)
 8016be0:	491b      	ldr	r1, [pc, #108]	; (8016c50 <atanf+0x1a4>)
 8016be2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016be6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016bea:	ed93 7a00 	vldr	s14, [r3]
 8016bee:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016bf2:	2d00      	cmp	r5, #0
 8016bf4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016bf8:	ed92 0a00 	vldr	s0, [r2]
 8016bfc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016c00:	bfb8      	it	lt
 8016c02:	eef1 7a67 	vneglt.f32	s15, s15
 8016c06:	e760      	b.n	8016aca <atanf+0x1e>
 8016c08:	3fc90fdb 	.word	0x3fc90fdb
 8016c0c:	bfc90fdb 	.word	0xbfc90fdb
 8016c10:	3edfffff 	.word	0x3edfffff
 8016c14:	7149f2ca 	.word	0x7149f2ca
 8016c18:	3f97ffff 	.word	0x3f97ffff
 8016c1c:	3c8569d7 	.word	0x3c8569d7
 8016c20:	3d4bda59 	.word	0x3d4bda59
 8016c24:	bd15a221 	.word	0xbd15a221
 8016c28:	be4ccccd 	.word	0xbe4ccccd
 8016c2c:	3d886b35 	.word	0x3d886b35
 8016c30:	3dba2e6e 	.word	0x3dba2e6e
 8016c34:	3e124925 	.word	0x3e124925
 8016c38:	3eaaaaab 	.word	0x3eaaaaab
 8016c3c:	bd6ef16b 	.word	0xbd6ef16b
 8016c40:	bd9d8795 	.word	0xbd9d8795
 8016c44:	bde38e38 	.word	0xbde38e38
 8016c48:	401bffff 	.word	0x401bffff
 8016c4c:	08017540 	.word	0x08017540
 8016c50:	08017550 	.word	0x08017550

08016c54 <fabsf>:
 8016c54:	ee10 3a10 	vmov	r3, s0
 8016c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c5c:	ee00 3a10 	vmov	s0, r3
 8016c60:	4770      	bx	lr
	...

08016c64 <floorf>:
 8016c64:	ee10 3a10 	vmov	r3, s0
 8016c68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016c6c:	3a7f      	subs	r2, #127	; 0x7f
 8016c6e:	2a16      	cmp	r2, #22
 8016c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016c74:	dc2a      	bgt.n	8016ccc <floorf+0x68>
 8016c76:	2a00      	cmp	r2, #0
 8016c78:	da11      	bge.n	8016c9e <floorf+0x3a>
 8016c7a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016cdc <floorf+0x78>
 8016c7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016c82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8a:	dd05      	ble.n	8016c98 <floorf+0x34>
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	da23      	bge.n	8016cd8 <floorf+0x74>
 8016c90:	4a13      	ldr	r2, [pc, #76]	; (8016ce0 <floorf+0x7c>)
 8016c92:	2900      	cmp	r1, #0
 8016c94:	bf18      	it	ne
 8016c96:	4613      	movne	r3, r2
 8016c98:	ee00 3a10 	vmov	s0, r3
 8016c9c:	4770      	bx	lr
 8016c9e:	4911      	ldr	r1, [pc, #68]	; (8016ce4 <floorf+0x80>)
 8016ca0:	4111      	asrs	r1, r2
 8016ca2:	420b      	tst	r3, r1
 8016ca4:	d0fa      	beq.n	8016c9c <floorf+0x38>
 8016ca6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016cdc <floorf+0x78>
 8016caa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016cae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb6:	ddef      	ble.n	8016c98 <floorf+0x34>
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	bfbe      	ittt	lt
 8016cbc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8016cc0:	fa40 f202 	asrlt.w	r2, r0, r2
 8016cc4:	189b      	addlt	r3, r3, r2
 8016cc6:	ea23 0301 	bic.w	r3, r3, r1
 8016cca:	e7e5      	b.n	8016c98 <floorf+0x34>
 8016ccc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016cd0:	d3e4      	bcc.n	8016c9c <floorf+0x38>
 8016cd2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016cd6:	4770      	bx	lr
 8016cd8:	2300      	movs	r3, #0
 8016cda:	e7dd      	b.n	8016c98 <floorf+0x34>
 8016cdc:	7149f2ca 	.word	0x7149f2ca
 8016ce0:	bf800000 	.word	0xbf800000
 8016ce4:	007fffff 	.word	0x007fffff

08016ce8 <nanf>:
 8016ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016cf0 <nanf+0x8>
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop
 8016cf0:	7fc00000 	.word	0x7fc00000

08016cf4 <scalbnf>:
 8016cf4:	ee10 3a10 	vmov	r3, s0
 8016cf8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016cfc:	d025      	beq.n	8016d4a <scalbnf+0x56>
 8016cfe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016d02:	d302      	bcc.n	8016d0a <scalbnf+0x16>
 8016d04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016d08:	4770      	bx	lr
 8016d0a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016d0e:	d122      	bne.n	8016d56 <scalbnf+0x62>
 8016d10:	4b2a      	ldr	r3, [pc, #168]	; (8016dbc <scalbnf+0xc8>)
 8016d12:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016dc0 <scalbnf+0xcc>
 8016d16:	4298      	cmp	r0, r3
 8016d18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d1c:	db16      	blt.n	8016d4c <scalbnf+0x58>
 8016d1e:	ee10 3a10 	vmov	r3, s0
 8016d22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016d26:	3a19      	subs	r2, #25
 8016d28:	4402      	add	r2, r0
 8016d2a:	2afe      	cmp	r2, #254	; 0xfe
 8016d2c:	dd15      	ble.n	8016d5a <scalbnf+0x66>
 8016d2e:	ee10 3a10 	vmov	r3, s0
 8016d32:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016dc4 <scalbnf+0xd0>
 8016d36:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016dc8 <scalbnf+0xd4>
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	eeb0 7a67 	vmov.f32	s14, s15
 8016d40:	bfb8      	it	lt
 8016d42:	eef0 7a66 	vmovlt.f32	s15, s13
 8016d46:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016d4a:	4770      	bx	lr
 8016d4c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016dcc <scalbnf+0xd8>
 8016d50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d54:	4770      	bx	lr
 8016d56:	0dd2      	lsrs	r2, r2, #23
 8016d58:	e7e6      	b.n	8016d28 <scalbnf+0x34>
 8016d5a:	2a00      	cmp	r2, #0
 8016d5c:	dd06      	ble.n	8016d6c <scalbnf+0x78>
 8016d5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d62:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016d66:	ee00 3a10 	vmov	s0, r3
 8016d6a:	4770      	bx	lr
 8016d6c:	f112 0f16 	cmn.w	r2, #22
 8016d70:	da1a      	bge.n	8016da8 <scalbnf+0xb4>
 8016d72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016d76:	4298      	cmp	r0, r3
 8016d78:	ee10 3a10 	vmov	r3, s0
 8016d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d80:	dd0a      	ble.n	8016d98 <scalbnf+0xa4>
 8016d82:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016dc4 <scalbnf+0xd0>
 8016d86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016dc8 <scalbnf+0xd4>
 8016d8a:	eef0 7a40 	vmov.f32	s15, s0
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	bf18      	it	ne
 8016d92:	eeb0 0a47 	vmovne.f32	s0, s14
 8016d96:	e7db      	b.n	8016d50 <scalbnf+0x5c>
 8016d98:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016dcc <scalbnf+0xd8>
 8016d9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016dd0 <scalbnf+0xdc>
 8016da0:	eef0 7a40 	vmov.f32	s15, s0
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	e7f3      	b.n	8016d90 <scalbnf+0x9c>
 8016da8:	3219      	adds	r2, #25
 8016daa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016dae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016db2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016dd4 <scalbnf+0xe0>
 8016db6:	ee07 3a10 	vmov	s14, r3
 8016dba:	e7c4      	b.n	8016d46 <scalbnf+0x52>
 8016dbc:	ffff3cb0 	.word	0xffff3cb0
 8016dc0:	4c000000 	.word	0x4c000000
 8016dc4:	7149f2ca 	.word	0x7149f2ca
 8016dc8:	f149f2ca 	.word	0xf149f2ca
 8016dcc:	0da24260 	.word	0x0da24260
 8016dd0:	8da24260 	.word	0x8da24260
 8016dd4:	33000000 	.word	0x33000000

08016dd8 <abort>:
 8016dd8:	b508      	push	{r3, lr}
 8016dda:	2006      	movs	r0, #6
 8016ddc:	f000 f8de 	bl	8016f9c <raise>
 8016de0:	2001      	movs	r0, #1
 8016de2:	f7eb fa61 	bl	80022a8 <_exit>
	...

08016de8 <__errno>:
 8016de8:	4b01      	ldr	r3, [pc, #4]	; (8016df0 <__errno+0x8>)
 8016dea:	6818      	ldr	r0, [r3, #0]
 8016dec:	4770      	bx	lr
 8016dee:	bf00      	nop
 8016df0:	200000f0 	.word	0x200000f0

08016df4 <__libc_init_array>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4d0d      	ldr	r5, [pc, #52]	; (8016e2c <__libc_init_array+0x38>)
 8016df8:	4c0d      	ldr	r4, [pc, #52]	; (8016e30 <__libc_init_array+0x3c>)
 8016dfa:	1b64      	subs	r4, r4, r5
 8016dfc:	10a4      	asrs	r4, r4, #2
 8016dfe:	2600      	movs	r6, #0
 8016e00:	42a6      	cmp	r6, r4
 8016e02:	d109      	bne.n	8016e18 <__libc_init_array+0x24>
 8016e04:	4d0b      	ldr	r5, [pc, #44]	; (8016e34 <__libc_init_array+0x40>)
 8016e06:	4c0c      	ldr	r4, [pc, #48]	; (8016e38 <__libc_init_array+0x44>)
 8016e08:	f000 f8f2 	bl	8016ff0 <_init>
 8016e0c:	1b64      	subs	r4, r4, r5
 8016e0e:	10a4      	asrs	r4, r4, #2
 8016e10:	2600      	movs	r6, #0
 8016e12:	42a6      	cmp	r6, r4
 8016e14:	d105      	bne.n	8016e22 <__libc_init_array+0x2e>
 8016e16:	bd70      	pop	{r4, r5, r6, pc}
 8016e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e1c:	4798      	blx	r3
 8016e1e:	3601      	adds	r6, #1
 8016e20:	e7ee      	b.n	8016e00 <__libc_init_array+0xc>
 8016e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e26:	4798      	blx	r3
 8016e28:	3601      	adds	r6, #1
 8016e2a:	e7f2      	b.n	8016e12 <__libc_init_array+0x1e>
 8016e2c:	08017568 	.word	0x08017568
 8016e30:	08017568 	.word	0x08017568
 8016e34:	08017568 	.word	0x08017568
 8016e38:	0801756c 	.word	0x0801756c

08016e3c <malloc>:
 8016e3c:	4b02      	ldr	r3, [pc, #8]	; (8016e48 <malloc+0xc>)
 8016e3e:	4601      	mov	r1, r0
 8016e40:	6818      	ldr	r0, [r3, #0]
 8016e42:	f000 b819 	b.w	8016e78 <_malloc_r>
 8016e46:	bf00      	nop
 8016e48:	200000f0 	.word	0x200000f0

08016e4c <memcpy>:
 8016e4c:	440a      	add	r2, r1
 8016e4e:	4291      	cmp	r1, r2
 8016e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e54:	d100      	bne.n	8016e58 <memcpy+0xc>
 8016e56:	4770      	bx	lr
 8016e58:	b510      	push	{r4, lr}
 8016e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e62:	4291      	cmp	r1, r2
 8016e64:	d1f9      	bne.n	8016e5a <memcpy+0xe>
 8016e66:	bd10      	pop	{r4, pc}

08016e68 <memset>:
 8016e68:	4402      	add	r2, r0
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d100      	bne.n	8016e72 <memset+0xa>
 8016e70:	4770      	bx	lr
 8016e72:	f803 1b01 	strb.w	r1, [r3], #1
 8016e76:	e7f9      	b.n	8016e6c <memset+0x4>

08016e78 <_malloc_r>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	1ccd      	adds	r5, r1, #3
 8016e7c:	f025 0503 	bic.w	r5, r5, #3
 8016e80:	3508      	adds	r5, #8
 8016e82:	2d0c      	cmp	r5, #12
 8016e84:	bf38      	it	cc
 8016e86:	250c      	movcc	r5, #12
 8016e88:	2d00      	cmp	r5, #0
 8016e8a:	4606      	mov	r6, r0
 8016e8c:	db01      	blt.n	8016e92 <_malloc_r+0x1a>
 8016e8e:	42a9      	cmp	r1, r5
 8016e90:	d903      	bls.n	8016e9a <_malloc_r+0x22>
 8016e92:	230c      	movs	r3, #12
 8016e94:	6033      	str	r3, [r6, #0]
 8016e96:	2000      	movs	r0, #0
 8016e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e9a:	f000 f89b 	bl	8016fd4 <__malloc_lock>
 8016e9e:	4921      	ldr	r1, [pc, #132]	; (8016f24 <_malloc_r+0xac>)
 8016ea0:	680a      	ldr	r2, [r1, #0]
 8016ea2:	4614      	mov	r4, r2
 8016ea4:	b99c      	cbnz	r4, 8016ece <_malloc_r+0x56>
 8016ea6:	4f20      	ldr	r7, [pc, #128]	; (8016f28 <_malloc_r+0xb0>)
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	b923      	cbnz	r3, 8016eb6 <_malloc_r+0x3e>
 8016eac:	4621      	mov	r1, r4
 8016eae:	4630      	mov	r0, r6
 8016eb0:	f000 f83c 	bl	8016f2c <_sbrk_r>
 8016eb4:	6038      	str	r0, [r7, #0]
 8016eb6:	4629      	mov	r1, r5
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f000 f837 	bl	8016f2c <_sbrk_r>
 8016ebe:	1c43      	adds	r3, r0, #1
 8016ec0:	d123      	bne.n	8016f0a <_malloc_r+0x92>
 8016ec2:	230c      	movs	r3, #12
 8016ec4:	6033      	str	r3, [r6, #0]
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	f000 f88a 	bl	8016fe0 <__malloc_unlock>
 8016ecc:	e7e3      	b.n	8016e96 <_malloc_r+0x1e>
 8016ece:	6823      	ldr	r3, [r4, #0]
 8016ed0:	1b5b      	subs	r3, r3, r5
 8016ed2:	d417      	bmi.n	8016f04 <_malloc_r+0x8c>
 8016ed4:	2b0b      	cmp	r3, #11
 8016ed6:	d903      	bls.n	8016ee0 <_malloc_r+0x68>
 8016ed8:	6023      	str	r3, [r4, #0]
 8016eda:	441c      	add	r4, r3
 8016edc:	6025      	str	r5, [r4, #0]
 8016ede:	e004      	b.n	8016eea <_malloc_r+0x72>
 8016ee0:	6863      	ldr	r3, [r4, #4]
 8016ee2:	42a2      	cmp	r2, r4
 8016ee4:	bf0c      	ite	eq
 8016ee6:	600b      	streq	r3, [r1, #0]
 8016ee8:	6053      	strne	r3, [r2, #4]
 8016eea:	4630      	mov	r0, r6
 8016eec:	f000 f878 	bl	8016fe0 <__malloc_unlock>
 8016ef0:	f104 000b 	add.w	r0, r4, #11
 8016ef4:	1d23      	adds	r3, r4, #4
 8016ef6:	f020 0007 	bic.w	r0, r0, #7
 8016efa:	1ac2      	subs	r2, r0, r3
 8016efc:	d0cc      	beq.n	8016e98 <_malloc_r+0x20>
 8016efe:	1a1b      	subs	r3, r3, r0
 8016f00:	50a3      	str	r3, [r4, r2]
 8016f02:	e7c9      	b.n	8016e98 <_malloc_r+0x20>
 8016f04:	4622      	mov	r2, r4
 8016f06:	6864      	ldr	r4, [r4, #4]
 8016f08:	e7cc      	b.n	8016ea4 <_malloc_r+0x2c>
 8016f0a:	1cc4      	adds	r4, r0, #3
 8016f0c:	f024 0403 	bic.w	r4, r4, #3
 8016f10:	42a0      	cmp	r0, r4
 8016f12:	d0e3      	beq.n	8016edc <_malloc_r+0x64>
 8016f14:	1a21      	subs	r1, r4, r0
 8016f16:	4630      	mov	r0, r6
 8016f18:	f000 f808 	bl	8016f2c <_sbrk_r>
 8016f1c:	3001      	adds	r0, #1
 8016f1e:	d1dd      	bne.n	8016edc <_malloc_r+0x64>
 8016f20:	e7cf      	b.n	8016ec2 <_malloc_r+0x4a>
 8016f22:	bf00      	nop
 8016f24:	2000124c 	.word	0x2000124c
 8016f28:	20001250 	.word	0x20001250

08016f2c <_sbrk_r>:
 8016f2c:	b538      	push	{r3, r4, r5, lr}
 8016f2e:	4d06      	ldr	r5, [pc, #24]	; (8016f48 <_sbrk_r+0x1c>)
 8016f30:	2300      	movs	r3, #0
 8016f32:	4604      	mov	r4, r0
 8016f34:	4608      	mov	r0, r1
 8016f36:	602b      	str	r3, [r5, #0]
 8016f38:	f7eb f9c0 	bl	80022bc <_sbrk>
 8016f3c:	1c43      	adds	r3, r0, #1
 8016f3e:	d102      	bne.n	8016f46 <_sbrk_r+0x1a>
 8016f40:	682b      	ldr	r3, [r5, #0]
 8016f42:	b103      	cbz	r3, 8016f46 <_sbrk_r+0x1a>
 8016f44:	6023      	str	r3, [r4, #0]
 8016f46:	bd38      	pop	{r3, r4, r5, pc}
 8016f48:	20001a40 	.word	0x20001a40

08016f4c <_raise_r>:
 8016f4c:	291f      	cmp	r1, #31
 8016f4e:	b538      	push	{r3, r4, r5, lr}
 8016f50:	4604      	mov	r4, r0
 8016f52:	460d      	mov	r5, r1
 8016f54:	d904      	bls.n	8016f60 <_raise_r+0x14>
 8016f56:	2316      	movs	r3, #22
 8016f58:	6003      	str	r3, [r0, #0]
 8016f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f5e:	bd38      	pop	{r3, r4, r5, pc}
 8016f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f62:	b112      	cbz	r2, 8016f6a <_raise_r+0x1e>
 8016f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f68:	b94b      	cbnz	r3, 8016f7e <_raise_r+0x32>
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f000 f830 	bl	8016fd0 <_getpid_r>
 8016f70:	462a      	mov	r2, r5
 8016f72:	4601      	mov	r1, r0
 8016f74:	4620      	mov	r0, r4
 8016f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f7a:	f000 b817 	b.w	8016fac <_kill_r>
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	d00a      	beq.n	8016f98 <_raise_r+0x4c>
 8016f82:	1c59      	adds	r1, r3, #1
 8016f84:	d103      	bne.n	8016f8e <_raise_r+0x42>
 8016f86:	2316      	movs	r3, #22
 8016f88:	6003      	str	r3, [r0, #0]
 8016f8a:	2001      	movs	r0, #1
 8016f8c:	e7e7      	b.n	8016f5e <_raise_r+0x12>
 8016f8e:	2400      	movs	r4, #0
 8016f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016f94:	4628      	mov	r0, r5
 8016f96:	4798      	blx	r3
 8016f98:	2000      	movs	r0, #0
 8016f9a:	e7e0      	b.n	8016f5e <_raise_r+0x12>

08016f9c <raise>:
 8016f9c:	4b02      	ldr	r3, [pc, #8]	; (8016fa8 <raise+0xc>)
 8016f9e:	4601      	mov	r1, r0
 8016fa0:	6818      	ldr	r0, [r3, #0]
 8016fa2:	f7ff bfd3 	b.w	8016f4c <_raise_r>
 8016fa6:	bf00      	nop
 8016fa8:	200000f0 	.word	0x200000f0

08016fac <_kill_r>:
 8016fac:	b538      	push	{r3, r4, r5, lr}
 8016fae:	4d07      	ldr	r5, [pc, #28]	; (8016fcc <_kill_r+0x20>)
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	4608      	mov	r0, r1
 8016fb6:	4611      	mov	r1, r2
 8016fb8:	602b      	str	r3, [r5, #0]
 8016fba:	f7eb f965 	bl	8002288 <_kill>
 8016fbe:	1c43      	adds	r3, r0, #1
 8016fc0:	d102      	bne.n	8016fc8 <_kill_r+0x1c>
 8016fc2:	682b      	ldr	r3, [r5, #0]
 8016fc4:	b103      	cbz	r3, 8016fc8 <_kill_r+0x1c>
 8016fc6:	6023      	str	r3, [r4, #0]
 8016fc8:	bd38      	pop	{r3, r4, r5, pc}
 8016fca:	bf00      	nop
 8016fcc:	20001a40 	.word	0x20001a40

08016fd0 <_getpid_r>:
 8016fd0:	f7eb b952 	b.w	8002278 <_getpid>

08016fd4 <__malloc_lock>:
 8016fd4:	4801      	ldr	r0, [pc, #4]	; (8016fdc <__malloc_lock+0x8>)
 8016fd6:	f000 b809 	b.w	8016fec <__retarget_lock_acquire_recursive>
 8016fda:	bf00      	nop
 8016fdc:	20001a48 	.word	0x20001a48

08016fe0 <__malloc_unlock>:
 8016fe0:	4801      	ldr	r0, [pc, #4]	; (8016fe8 <__malloc_unlock+0x8>)
 8016fe2:	f000 b804 	b.w	8016fee <__retarget_lock_release_recursive>
 8016fe6:	bf00      	nop
 8016fe8:	20001a48 	.word	0x20001a48

08016fec <__retarget_lock_acquire_recursive>:
 8016fec:	4770      	bx	lr

08016fee <__retarget_lock_release_recursive>:
 8016fee:	4770      	bx	lr

08016ff0 <_init>:
 8016ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ff2:	bf00      	nop
 8016ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ff6:	bc08      	pop	{r3}
 8016ff8:	469e      	mov	lr, r3
 8016ffa:	4770      	bx	lr

08016ffc <_fini>:
 8016ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ffe:	bf00      	nop
 8017000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017002:	bc08      	pop	{r3}
 8017004:	469e      	mov	lr, r3
 8017006:	4770      	bx	lr
